// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_gcmessages_server.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Steam.Protos.Dota2 {

  /// <summary>Holder for reflection information generated from dota_gcmessages_server.proto</summary>
  public static partial class DotaGcmessagesServerReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_gcmessages_server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaGcmessagesServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chxkb3RhX2djbWVzc2FnZXNfc2VydmVyLnByb3RvGhNzdGVhbW1lc3NhZ2Vz",
            "LnByb3RvGhV2YWx2ZWV4dGVuc2lvbnMucHJvdG8aF2RvdGFfc2hhcmVkX2Vu",
            "dW1zLnByb3RvGhxkb3RhX2djbWVzc2FnZXNfY29tbW9uLnByb3RvGhVlY29u",
            "X2djbWVzc2FnZXMucHJvdG8aFWJhc2VfZ2NtZXNzYWdlcy5wcm90bxoYbmV0",
            "d29ya19jb25uZWN0aW9uLnByb3RvGiJkb3RhX2djbWVzc2FnZXNfY29tbW9u",
            "X2xvYmJ5LnByb3RvGi1kb3RhX2djbWVzc2FnZXNfY29tbW9uX21hdGNoX21h",
            "bmFnZW1lbnQucHJvdG8aJmRvdGFfZ2NtZXNzYWdlc19jb21tb25fb3Zlcndv",
            "cmxkLnByb3RvGidkb3RhX2djbWVzc2FnZXNfY29tbW9uX2NyYWZ0d29ya3Mu",
            "cHJvdG8aFmdjc2RrX2djbWVzc2FnZXMucHJvdG8aLHN0ZWFtbWVzc2FnZXNf",
            "c3RlYW1sZWFybi5zdGVhbXdvcmtzc2RrLnByb3RvIskCChlDTXNnUG9vck5l",
            "dHdvcmtDb25kaXRpb25zElIKDmRldGVjdGlvbl90eXBlGAEgASgOMhsuRVBv",
            "b3JOZXR3b3JrQ29uZGl0aW9uc1R5cGU6HWtfRVBvb3JOZXR3b3JrQ29uZGl0",
            "aW9uc19Ob25lEjIKB3BsYXllcnMYAiADKAsyIS5DTXNnUG9vck5ldHdvcmtD",
            "b25kaXRpb25zLlBsYXllchqjAQoGUGxheWVyEhIKCmFjY291bnRfaWQYASAB",
            "KA0SUwoRZGlzY29ubmVjdF9yZWFzb24YAiABKA4yHC5FTmV0d29ya0Rpc2Nv",
            "bm5lY3Rpb25SZWFzb246Gk5FVFdPUktfRElTQ09OTkVDVF9JTlZBTElEEhkK",
            "EW51bV9iYWRfaW50ZXJ2YWxzGAMgASgNEhUKDXBlYWtfbG9zc19wY3QYBCAB",
            "KA0ixgIKE0NNc2dHYW1lc2VydmVyQ3Jhc2gSEAoIbWF0Y2hfaWQYASABKAQS",
            "EAoIbG9iYnlfaWQYAiABKAYSPgoKZ2FtZV9zdGF0ZRgDIAEoDjIPLkRPVEFf",
            "R2FtZVN0YXRlOhlET1RBX0dBTUVSVUxFU19TVEFURV9JTklUEhoKEnNlbnRp",
            "bmVsX3NhdmVfdGltZRgEIAEoBxIWCg5jdXN0b21fZ2FtZV9pZBgLIAEoBhIV",
            "Cg10b3VybmFtZW50X2lkGAwgASgNEhcKD3NlcnZlcl9zdGVhbV9pZBgFIAEo",
            "BhIdChVzZXJ2ZXJfcHVibGljX2lwX2FkZHIYBiABKAcSEwoLc2VydmVyX3Bv",
            "cnQYByABKA0SFgoOc2VydmVyX2NsdXN0ZXIYCCABKA0SCwoDcGlkGAkgASgN",
            "Eg4KBmVuZ2luZRgKIAEoDSKYCAoUQ01zZ0Nvbm5lY3RlZFBsYXllcnMSNwoR",
            "Y29ubmVjdGVkX3BsYXllcnMYASADKAsyHC5DTXNnQ29ubmVjdGVkUGxheWVy",
            "cy5QbGF5ZXISOgoUZGlzY29ubmVjdGVkX3BsYXllcnMYByADKAsyHC5DTXNn",
            "Q29ubmVjdGVkUGxheWVycy5QbGF5ZXISPgoKZ2FtZV9zdGF0ZRgCIAEoDjIP",
            "LkRPVEFfR2FtZVN0YXRlOhlET1RBX0dBTUVSVUxFU19TVEFURV9JTklUEhwK",
            "FGZpcnN0X2Jsb29kX2hhcHBlbmVkGAYgASgIEjsKF3Bvb3JfbmV0d29ya19j",
            "b25kaXRpb25zGAogASgLMhouQ01zZ1Bvb3JOZXR3b3JrQ29uZGl0aW9ucxI+",
            "CgtzZW5kX3JlYXNvbhgIIAEoDjIgLkNNc2dDb25uZWN0ZWRQbGF5ZXJzLlNl",
            "bmRSZWFzb246B0lOVkFMSUQSFQoNcmFkaWFudF9raWxscxgLIAEoDRISCgpk",
            "aXJlX2tpbGxzGAwgASgNEhQKDHJhZGlhbnRfbGVhZBgOIAEoBRIWCg5idWls",
            "ZGluZ19zdGF0ZRgPIAEoDRI3CgxwbGF5ZXJfZHJhZnQYECADKAsyIS5DTXNn",
            "Q29ubmVjdGVkUGxheWVycy5QbGF5ZXJEcmFmdBqoAQoGUGxheWVyEhAKCHN0",
            "ZWFtX2lkGAEgASgGEg8KB2hlcm9faWQYAiABKAUSJgoMbGVhdmVyX3N0YXRl",
            "GAMgASgLMhAuQ01zZ0xlYXZlclN0YXRlElMKEWRpc2Nvbm5lY3RfcmVhc29u",
            "GAQgASgOMhwuRU5ldHdvcmtEaXNjb25uZWN0aW9uUmVhc29uOhpORVRXT1JL",
            "X0RJU0NPTk5FQ1RfSU5WQUxJRBpnCgtQbGF5ZXJEcmFmdBIQCghzdGVhbV9p",
            "ZBgBIAEoBhIzCgR0ZWFtGAIgASgOMg0uRE9UQV9HQ19URUFNOhZET1RBX0dD",
            "X1RFQU1fR09PRF9HVVlTEhEKCXRlYW1fc2xvdBgDIAEoBSKJAgoKU2VuZFJl",
            "YXNvbhILCgdJTlZBTElEEAASDQoJSEVBUlRCRUFUEAESDgoKR0FNRV9TVEFU",
            "RRACEg8KC0ZJUlNUX0JMT09EEAMSFAoQUExBWUVSX0NPTk5FQ1RFRBAEEg8K",
            "C1BMQVlFUl9IRVJPEAUSJAogUExBWUVSX0RJU0NPTk5FQ1RFRF9DT05TRVFV",
            "RU5DRVMQBhImCiJQTEFZRVJfRElTQ09OTkVDVEVEX05PQ09OU0VRVUVOQ0VT",
            "EAcSFQoRR0FNRVNUQVRFX1RJTUVPVVQQChITCg9NQVNTX0RJU0NPTk5FQ1QQ",
            "CxIJCgVLSUxMUxANEhIKDkJVSUxESU5HX1NUQVRFEA4i6QcKEkNNc2dHYW1l",
            "U2VydmVySW5mbxIdChVzZXJ2ZXJfcHVibGljX2lwX2FkZHIYASABKAcSHgoW",
            "c2VydmVyX3ByaXZhdGVfaXBfYWRkchgCIAEoBxITCgtzZXJ2ZXJfcG9ydBgD",
            "IAEoDRIWCg5zZXJ2ZXJfdHZfcG9ydBgEIAEoDRIfChdhc3NpZ25lZF9zZXJ2",
            "ZXJfdHZfcG9ydBgWIAEoDRIrCiNsZWdhY3lfc2VydmVyX3N0ZWFtZGF0YWdy",
            "YW1fYWRkcmVzcxgbIAEoDBISCgpzZXJ2ZXJfa2V5GAUgASgJEhoKEnNlcnZl",
            "cl9oaWJlcm5hdGlvbhgGIAEoCBJACgtzZXJ2ZXJfdHlwZRgHIAEoDjIeLkNN",
            "c2dHYW1lU2VydmVySW5mby5TZXJ2ZXJUeXBlOgtVTlNQRUNJRklFRBIVCg1z",
            "ZXJ2ZXJfcmVnaW9uGAggASgNEhYKDnNlcnZlcl9sb2FkYXZnGAkgASgCEiAK",
            "GHNlcnZlcl90dl9icm9hZGNhc3RfdGltZRgKIAEoAhIYChBzZXJ2ZXJfZ2Ft",
            "ZV90aW1lGAsgASgCEicKH3NlcnZlcl9yZWxheV9jb25uZWN0ZWRfc3RlYW1f",
            "aWQYDCABKAYSFwoPcmVsYXlfc2xvdHNfbWF4GA0gASgNEhgKEHJlbGF5c19j",
            "b25uZWN0ZWQYDiABKAUSHwoXcmVsYXlfY2xpZW50c19jb25uZWN0ZWQYDyAB",
            "KAUSJAoccmVsYXllZF9nYW1lX3NlcnZlcl9zdGVhbV9pZBgQIAEoBhIaChJw",
            "YXJlbnRfcmVsYXlfY291bnQYESABKA0SFgoOdHZfc2VjcmV0X2NvZGUYEiAB",
            "KAYSFgoOc2VydmVyX3ZlcnNpb24YEyABKA0SFgoOc2VydmVyX2NsdXN0ZXIY",
            "FCABKA0SQQoSYWxsb3dfY3VzdG9tX2dhbWVzGBcgASgOMh8uQ01zZ0dhbWVT",
            "ZXJ2ZXJJbmZvLkN1c3RvbUdhbWVzOgRCT1RIEhUKDWJ1aWxkX3ZlcnNpb24Y",
            "GCABKA0SFgoOc3JjZHNfaW5zdGFuY2UYGiABKA0SHQoVZGV2X2ZvcmNlX3Nl",
            "cnZlcl90eXBlGBwgASgIImwKClNlcnZlclR5cGUSDwoLVU5TUEVDSUZJRUQQ",
            "ABIICgRHQU1FEAESCQoFUFJPWFkQAhINCglET1RBX09OTFkQBBIUChBDVVNU",
            "T01fR0FNRV9PTkxZEAUSEwoPRVZFTlRfR0FNRV9PTkxZEAYiNgoLQ3VzdG9t",
            "R2FtZXMSCAoEQk9USBAAEggKBE5PTkUQARIICgRPTkxZEAISCQoFRVZFTlQQ",
            "AyK2AgoSQ01zZ0xlYXZlckRldGVjdGVkEhAKCHN0ZWFtX2lkGAEgASgGEjwK",
            "DWxlYXZlcl9zdGF0dXMYAiABKA4yEy5ET1RBTGVhdmVyU3RhdHVzX3Q6EERP",
            "VEFfTEVBVkVSX05PTkUSJgoMbGVhdmVyX3N0YXRlGAQgASgLMhAuQ01zZ0xl",
            "YXZlclN0YXRlEhYKDnNlcnZlcl9jbHVzdGVyGAUgASgNElMKEWRpc2Nvbm5l",
            "Y3RfcmVhc29uGAYgASgOMhwuRU5ldHdvcmtEaXNjb25uZWN0aW9uUmVhc29u",
            "OhpORVRXT1JLX0RJU0NPTk5FQ1RfSU5WQUxJRBI7Chdwb29yX25ldHdvcmtf",
            "Y29uZGl0aW9ucxgHIAEoCzIaLkNNc2dQb29yTmV0d29ya0NvbmRpdGlvbnMi",
            "LAoaQ01zZ0xlYXZlckRldGVjdGVkUmVzcG9uc2USDgoGcmVzdWx0GAEgASgN",
            "Ik0KH0NNc2dET1RBRmFudGFzeUZpbmFsUGxheWVyU3RhdHMSKgoFc3RhdHMY",
            "AiADKAsyGy5DTXNnRE9UQUZhbnRhc3lQbGF5ZXJTdGF0cyJMCh5DTXNnRE9U",
            "QUZhbnRhc3lMaXZlUGxheWVyU3RhdHMSKgoFc3RhdHMYAiADKAsyGy5DTXNn",
            "RE9UQUZhbnRhc3lQbGF5ZXJTdGF0cyJPChtDTXNnU2VydmVyVG9HQ1JlYWx0",
            "aW1lU3RhdHMSMAoHZGVsYXllZBgBIAEoCzIfLkNNc2dET1RBUmVhbHRpbWVH",
            "YW1lU3RhdHNUZXJzZSI3CiRDTXNnR0NUb1NlcnZlclJlYWx0aW1lU3RhdHNT",
            "dGFydFN0b3ASDwoHZGVsYXllZBgBIAEoCCI3CiVDTXNnR0NUb1NlcnZlclVw",
            "ZGF0ZVN0ZWFtQnJvYWRjYXN0aW5nEg4KBmFjdGl2ZRgBIAEoCCLjAgoYQ01z",
            "Z1NpZ25PdXRHYW1lcGxheVN0YXRzEi4KBXRlYW1zGAEgAygLMh8uQ01zZ1Np",
            "Z25PdXRHYW1lcGxheVN0YXRzLkNUZWFtGnYKB0NQbGF5ZXISEAoIc3RlYW1f",
            "aWQYASABKAYSEwoLcGxheWVyX3Nsb3QYAiABKA0SDwoHaGVyb19pZBgDIAEo",
            "BRIzChJ0aW1lZF9wbGF5ZXJfc3RhdHMYBCADKAsyFy5DTWF0Y2hQbGF5ZXJU",
            "aW1lZFN0YXRzGp4BCgVDVGVhbRIXCg9pc193aW5uaW5nX3RlYW0YASABKAgS",
            "FwoPaXNfcmFkaWFudF90ZWFtGAIgASgIEi8KEHRpbWVkX3RlYW1fc3RhdHMY",
            "AyADKAsyFS5DTWF0Y2hUZWFtVGltZWRTdGF0cxIyCgdwbGF5ZXJzGAQgAygL",
            "MiEuQ01zZ1NpZ25PdXRHYW1lcGxheVN0YXRzLkNQbGF5ZXIigiIKFENNc2dH",
            "YW1lTWF0Y2hTaWduT3V0EhYKCG1hdGNoX2lkGAEgASgEQgSAph0BEhAKCGR1",
            "cmF0aW9uGAIgASgNEhUKDWdvb2RfZ3V5c193aW4YAyABKAgSDAoEZGF0ZRgE",
            "IAEoBxIqCgV0ZWFtcxgGIAMoCzIbLkNNc2dHYW1lTWF0Y2hTaWduT3V0LkNU",
            "ZWFtEhQKDHRvd2VyX3N0YXR1cxgIIAMoDRIXCg9iYXJyYWNrc19zdGF0dXMY",
            "CSADKA0SDwoHY2x1c3RlchgKIAEoDRITCgtzZXJ2ZXJfYWRkchgLIAEoCRIY",
            "ChBmaXJzdF9ibG9vZF90aW1lGAwgASgNEhMKC2V2ZW50X3Njb3JlGA4gASgN",
            "EjIKDWZhbnRhc3lfc3RhdHMYKSADKAsyGy5DTXNnRE9UQUZhbnRhc3lQbGF5",
            "ZXJTdGF0cxJPCiBwbGF5ZXJfc3RyYW5nZV9jb3VudF9hZGp1c3RtZW50cxgR",
            "IAMoCzIlLkNNc2dFY29uUGxheWVyU3RyYW5nZUNvdW50QWRqdXN0bWVudBIb",
            "ChNhdXRvbWF0aWNfc3VycmVuZGVyGBIgASgIEhYKDnNlcnZlcl92ZXJzaW9u",
            "GBMgASgNEjsKF3Bvb3JfbmV0d29ya19jb25kaXRpb25zGCMgASgLMhouQ01z",
            "Z1Bvb3JOZXR3b3JrQ29uZGl0aW9ucxJECg9hZGRpdGlvbmFsX21zZ3MYFCAD",
            "KAsyKy5DTXNnR2FtZU1hdGNoU2lnbk91dC5DQWRkaXRpb25hbFNpZ25vdXRN",
            "c2cSRwoSc29jaWFsX2ZlZWRfZXZlbnRzGCQgAygLMisuQ01zZ0dhbWVNYXRj",
            "aFNpZ25PdXQuQ1NvY2lhbEZlZWRNYXRjaEV2ZW50Eh4KFmF2ZXJhZ2VfbmV0",
            "d29ydGhfZGVsdGEYFiABKBESPwoQY3VzdG9tX2dhbWVfZGF0YRglIAEoCzIl",
            "LkNNc2dHYW1lTWF0Y2hTaWduT3V0LkNDdXN0b21HYW1lRGF0YRITCgttYXRj",
            "aF9mbGFncxgmIAEoDRITCgt0ZWFtX3Njb3JlcxgnIAMoDRIZChFwcmVfZ2Ft",
            "ZV9kdXJhdGlvbhgoIAEoDRJXCh5ldmVudF9nYW1lX2xlYWRlcmJvYXJkX2Vu",
            "dHJpZXMYKiADKAsyLy5DTXNnR2FtZU1hdGNoU2lnbk91dC5FdmVudEdhbWVM",
            "ZWFkZXJib2FyZEVudHJ5EjwKD3dhcmRfcGxhY2VtZW50cxgrIAMoCzIjLkNN",
            "c2dHYW1lTWF0Y2hTaWduT3V0LldhcmRQbGFjZW1lbnQSMQoOZ2FtZXBsYXlf",
            "c3RhdHMYLCABKAsyGS5DTXNnU2lnbk91dEdhbWVwbGF5U3RhdHMSJwoOZXh0",
            "cmFfbWVzc2FnZXMYNiADKAsyDy5DRXh0cmFNc2dCbG9jaxI7Cgx3aW5uaW5n",
            "X3RlYW0YOCABKA4yDS5ET1RBX0dDX1RFQU06FkRPVEFfR0NfVEVBTV9HT09E",
            "X0dVWVMSJwofbm9ybWFsaXplZF93aW5fcHJvYmFiaWxpdHlfZGlmZhg5IAEo",
            "AhItChNtYXRjaF90cmFja2VkX3N0YXRzGDogAygLMhAuQ01zZ1RyYWNrZWRT",
            "dGF0GusTCgVDVGVhbRI0CgdwbGF5ZXJzGAEgAygLMiMuQ01zZ0dhbWVNYXRj",
            "aFNpZ25PdXQuQ1RlYW0uQ1BsYXllchIsChJ0ZWFtX3RyYWNrZWRfc3RhdHMY",
            "AiADKAsyEC5DTXNnVHJhY2tlZFN0YXQa/RIKB0NQbGF5ZXISEAoIc3RlYW1f",
            "aWQYASABKAYSDwoHaGVyb19pZBgDIAEoBRINCgVpdGVtcxgEIAMoBRIbChNp",
            "dGVtX3B1cmNoYXNlX3RpbWVzGD8gAygNEgwKBGdvbGQYBSABKA0SDQoFa2ls",
            "bHMYBiABKA0SDgoGZGVhdGhzGAcgASgNEg8KB2Fzc2lzdHMYCCABKA0SFQoN",
            "bGVhdmVyX3N0YXR1cxgJIAEoDRIRCglsYXN0X2hpdHMYCiABKA0SDgoGZGVu",
            "aWVzGAsgASgNEhQKDGdvbGRfcGVyX21pbhgMIAEoDRIVCg14cF9wZXJfbWlu",
            "dXRlGA0gASgNEhIKCmdvbGRfc3BlbnQYDiABKA0SDQoFbGV2ZWwYDyABKA0S",
            "GgoSc2NhbGVkX2hlcm9fZGFtYWdlGBAgASgNEhsKE3NjYWxlZF90b3dlcl9k",
            "YW1hZ2UYESABKA0SGwoTc2NhbGVkX2hlcm9faGVhbGluZxgSIAEoDRIWCg50",
            "aW1lX2xhc3Rfc2VlbhgTIAEoDRIdChVzdXBwb3J0X2FiaWxpdHlfdmFsdWUY",
            "FCABKA0SEAoIcGFydHlfaWQYFSABKAQSGQoRY2xhaW1lZF9mYXJtX2dvbGQY",
            "GyABKA0SFAoMc3VwcG9ydF9nb2xkGBwgASgNEhYKDmNsYWltZWRfZGVuaWVz",
            "GB0gASgNEhYKDmNsYWltZWRfbWlzc2VzGB4gASgNEg4KBm1pc3NlcxgfIAEo",
            "DRIRCgluZXRfd29ydGgYIiABKA0SEwoLaGVyb19kYW1hZ2UYJSABKA0SFAoM",
            "dG93ZXJfZGFtYWdlGCYgASgNEhQKDGhlcm9faGVhbGluZxgnIAEoDRI1ChBh",
            "YmlsaXR5X3VwZ3JhZGVzGCAgAygLMhsuQ01hdGNoUGxheWVyQWJpbGl0eVVw",
            "Z3JhZGUSQgoaYWRkaXRpb25hbF91bml0c19pbnZlbnRvcnkYISADKAsyHi5D",
            "TWF0Y2hBZGRpdGlvbmFsVW5pdEludmVudG9yeRIzCg9wZXJtYW5lbnRfYnVm",
            "ZnMYKCADKAsyGi5DTWF0Y2hQbGF5ZXJQZXJtYW5lbnRCdWZmEk0KEGN1c3Rv",
            "bV9nYW1lX2RhdGEYIyABKAsyMy5DTXNnR2FtZU1hdGNoU2lnbk91dC5DVGVh",
            "bS5DUGxheWVyLkNDdXN0b21HYW1lRGF0YRIaChJtYXRjaF9wbGF5ZXJfZmxh",
            "Z3MYJCABKA0SGgoSdGFsZW50X2FiaWxpdHlfaWRzGCkgAygFEhcKD2hlcm9f",
            "cGlja19vcmRlchgqIAEoDRIZChFoZXJvX3dhc19yYW5kb21lZBgrIAEoCBIl",
            "Ch1oZXJvX3dhc19kb3RhX3BsdXNfc3VnZ2VzdGlvbhgyIAEoCBIMCgRsYW5l",
            "GC0gASgNEhsKE2lzX3VzaW5nX3BsdXNfZ3VpZGUYLyABKAgSVAoUaGVyb19k",
            "YW1hZ2VfcmVjZWl2ZWQYMCADKAsyNi5DTXNnR2FtZU1hdGNoU2lnbk91dC5D",
            "VGVhbS5DUGxheWVyLkhlcm9EYW1hZ2VSZWNlaXZlZBJRChFoZXJvX2RhbWFn",
            "ZV9kZWFsdBhAIAMoCzI2LkNNc2dHYW1lTWF0Y2hTaWduT3V0LkNUZWFtLkNQ",
            "bGF5ZXIuSGVyb0RhbWFnZVJlY2VpdmVkEhQKDHNlY29uZHNfZGVhZBgzIAEo",
            "DRIaChJnb2xkX2xvc3RfdG9fZGVhdGgYNCABKA0SFQoNY29tbWFuZF9jb3Vu",
            "dBg1IAEoDRImCh5tb3VzZV9jbGlja19jYXN0X2NvbW1hbmRfY291bnQYNiAB",
            "KA0SFgoOdGVsZXBvcnRzX3VzZWQYNyABKA0SLwoiY2F2ZXJuX2NyYXdsX3By",
            "ZWZlcnJlZF9tYXBfdmFyaWFudBg4IAEoDToDMjU1EhQKDGJvdW50eV9ydW5l",
            "cxg5IAEoDRIZChFvdXRwb3N0c19jYXB0dXJlZBg6IAEoDRIPCgdkZXdhcmRz",
            "GDsgASgNEhQKDHdhcmRzX3BsYWNlZBg8IAEoDRIVCg1jYW1wc19zdGFja2Vk",
            "GD0gASgNEhMKC3BsYXllcl9zbG90GD4gASgNEhoKEnByZWRpY3RlZF9wb3Np",
            "dGlvbhhCIAEoDRIaCg1sYW5lX291dGNvbWVzGEMgASgNOgMyNTUSIgoaZnJp",
            "ZW5kbHlfdDFfZGVzdHJveWVkX3RpbWUYRCABKA0SHwoXZW5lbXlfdDFfZGVz",
            "dHJveWVkX3RpbWUYRSABKA0SHQoVZnJpZW5kbHlfcm9zaGFuX2tpbGxzGEYg",
            "ASgNEhoKEmVuZW15X3Jvc2hhbl9raWxscxhHIAEoDRITCgtwb3dlcl9ydW5l",
            "cxhIIAEoDRITCgt3YXRlcl9ydW5lcxhJIAEoDRIVCg1zdHVuX2R1cmF0aW9u",
            "GEogASgCEjoKC3RlYW1fbnVtYmVyGEsgASgOMg0uRE9UQV9HQ19URUFNOhZE",
            "T1RBX0dDX1RFQU1fR09PRF9HVVlTEhEKCXRlYW1fc2xvdBhMIAEoDRIcChR0",
            "aW1lX3B1cmNoYXNlZF9zaGFyZBhNIAEoDRIbChN0aW1lX3B1cmNoYXNlZF9h",
            "Z2hzGE4gASgNEh8KF2FiaWxpdHlfZHJhZnRfYWJpbGl0aWVzGE8gAygFEi4K",
            "FHBsYXllcl90cmFja2VkX3N0YXRzGFAgAygLMhAuQ01zZ1RyYWNrZWRTdGF0",
            "EhYKDnByZWRpY3RlZF9yYW5rGFEgASgNEhYKDnNlbGVjdGVkX2ZhY2V0GFIg",
            "ASgNEhkKEWVuaGFuY2VtZW50X2xldmVsGFMgASgNGjQKD0NDdXN0b21HYW1l",
            "RGF0YRIRCglkb3RhX3RlYW0YASABKA0SDgoGd2lubmVyGAIgASgIGqIBChJI",
            "ZXJvRGFtYWdlUmVjZWl2ZWQSFQoNcHJlX3JlZHVjdGlvbhgBIAEoDRIWCg5w",
            "b3N0X3JlZHVjdGlvbhgCIAEoDRJdCgtkYW1hZ2VfdHlwZRgDIAEoDjIyLkNN",
            "c2dHYW1lTWF0Y2hTaWduT3V0LkNUZWFtLkNQbGF5ZXIuSGVyb0RhbWFnZVR5",
            "cGU6FEhFUk9fREFNQUdFX1BIWVNJQ0FMIlkKDkhlcm9EYW1hZ2VUeXBlEhgK",
            "FEhFUk9fREFNQUdFX1BIWVNJQ0FMEAASFwoTSEVST19EQU1BR0VfTUFHSUNB",
            "TBABEhQKEEhFUk9fREFNQUdFX1BVUkUQAho1ChVDQWRkaXRpb25hbFNpZ25v",
            "dXRNc2cSCgoCaWQYASABKA0SEAoIY29udGVudHMYAiABKAwaegoVQ1NvY2lh",
            "bEZlZWRNYXRjaEV2ZW50EhIKCmFjY291bnRfaWQYASABKA0SEQoJdGltZXN0",
            "YW1wGAIgASgNEhIKCmV2ZW50X3R5cGUYAyABKA0SEQoJZ2FtZV90aW1lGAQg",
            "ASgFEhMKC3JlcGxheV90aW1lGAUgASgNGiwKD0NDdXN0b21HYW1lRGF0YRIZ",
            "ChFwdWJsaXNoX3RpbWVzdGFtcBgBIAEoDRqtAQoZRXZlbnRHYW1lTGVhZGVy",
            "Ym9hcmRFbnRyeRITCgtuYW1lX3N1ZmZpeBgBIAEoCRINCgVzY29yZRgCIAEo",
            "BRIUCgxleHRyYV9kYXRhXzEYAyABKA0SFAoMZXh0cmFfZGF0YV8yGAQgASgN",
            "EhQKDGV4dHJhX2RhdGFfMxgFIAEoDRIUCgxleHRyYV9kYXRhXzQYBiABKA0S",
            "FAoMZXh0cmFfZGF0YV81GAcgASgNGrcBCg1XYXJkUGxhY2VtZW50EhUKCXBs",
            "YXllcl9pZBgBIAEoBToCLTESDwoHdGVhbV9pZBgCIAEoDRITCgtwbGFjZWRf",
            "dGltZRgDIAEoDRIWCg5idWlsZGluZ19zdGF0ZRgEIAEoDRITCgtjcmVlcF9z",
            "dGF0ZRgFIAEoDRIUCgxyb3NoYW5fYWxpdmUYBiABKAgSEgoKcG9zaXRpb25f",
            "eBgHIAEoDRISCgpwb3NpdGlvbl95GAggASgNIocBChRDTXNnU2lnbk91dERy",
            "YWZ0SW5mbxIiChpyYWRpYW50X2NhcHRhaW5fYWNjb3VudF9pZBgBIAEoDRIf",
            "ChdkaXJlX2NhcHRhaW5fYWNjb3VudF9pZBgCIAEoDRIqCgpwaWNrc19iYW5z",
            "GAMgAygLMhYuQ01hdGNoSGVyb1NlbGVjdEV2ZW50ItYBChJDTXNnU2lnbk91",
            "dEJvdEluZm8SFAoMYWxsb3dfY2hlYXRzGAEgASgIEkoKFmJvdF9kaWZmaWN1",
            "bHR5X3JhZGlhbnQYAiABKA4yEi5ET1RBQm90RGlmZmljdWx0eToWQk9UX0RJ",
            "RkZJQ1VMVFlfUEFTU0lWRRIVCg1jcmVhdGVkX2xvYmJ5GAMgASgIEkcKE2Jv",
            "dF9kaWZmaWN1bHR5X2RpcmUYBSABKA4yEi5ET1RBQm90RGlmZmljdWx0eToW",
            "Qk9UX0RJRkZJQ1VMVFlfUEFTU0lWRSKyAQoXQ01zZ1NpZ25PdXRUZXh0TXV0",
            "ZUluZm8SRAoSdGV4dF9tdXRlX21lc3NhZ2VzGAEgAygLMiguQ01zZ1NpZ25P",
            "dXRUZXh0TXV0ZUluZm8uVGV4dE11dGVNZXNzYWdlGlEKD1RleHRNdXRlTWVz",
            "c2FnZRIOCgZyZWdpb24YASABKA0SGAoQY2F1c2VkX3RleHRfbXV0ZRgCIAEo",
            "CBIUCgxjaGF0X21lc3NhZ2UYAyABKAki+gQKFkNNc2dTaWduT3V0UGxheWVy",
            "U3RhdHMSEgoKYWNjb3VudF9pZBgBIAEoBRIQCghtYXRjaF9pZBgCIAEoBBIM",
            "CgRyYW5rGAMgASgNEg8KB2hlcm9faWQYBCABKAUSEAoIcmFtcGFnZXMYBSAB",
            "KA0SFAoMdHJpcGxlX2tpbGxzGAYgASgNEhsKE2ZpcnN0X2Jsb29kX2NsYWlt",
            "ZWQYByABKA0SGQoRZmlyc3RfYmxvb2RfZ2l2ZW4YCCABKA0SFwoPY291cmll",
            "cnNfa2lsbGVkGAkgASgNEhgKEGFlZ2lzZXNfc25hdGNoZWQYCiABKA0SFQoN",
            "Y2hlZXNlc19lYXRlbhgLIAEoDRIWCg5jcmVlcHNfc3RhY2tlZBgMIAEoDRIT",
            "CgtmaWdodF9zY29yZRgNIAEoAhISCgpmYXJtX3Njb3JlGA4gASgCEhUKDXN1",
            "cHBvcnRfc2NvcmUYDyABKAISEgoKcHVzaF9zY29yZRgQIAEoAhINCgVraWxs",
            "cxgRIAEoDRIOCgZkZWF0aHMYEiABKA0SDwoHYXNzaXN0cxgTIAEoDRIRCgls",
            "YXN0X2hpdHMYFCABKA0SDgoGZGVuaWVzGBUgASgNEgsKA2dwbRgWIAEoAhIM",
            "CgR4cHBtGBcgASgCEhEKCW5ldF93b3J0aBgYIAEoAhIOCgZkYW1hZ2UYGSAB",
            "KAISDQoFaGVhbHMYGiABKAISGQoRcmFwaWVyc19wdXJjaGFzZWQYGyABKA0S",
            "HQoVb2JzZXJ2ZXJfd2FyZHNfcGxhY2VkGBwgASgNEhcKD3dhcmRzX2Rlc3Ry",
            "b3llZBgdIAEoDRISCgpsb2JieV90eXBlGB4gASgNIqoFCh9DTXNnU2lnbk91",
            "dENvbW11bmljYXRpb25TdW1tYXJ5EkUKB3BsYXllcnMYASADKAsyNC5DTXNn",
            "U2lnbk91dENvbW11bmljYXRpb25TdW1tYXJ5LlBsYXllckNvbW11bmljYXRp",
            "b24avwQKE1BsYXllckNvbW11bmljYXRpb24SEgoKYWNjb3VudF9pZBgBIAEo",
            "DRINCgVwaW5ncxgCIAEoDRIeChZtYXhfcGluZ3NfcGVyX2ludGVydmFsGAMg",
            "ASgNEhYKDnRlYW1tYXRlX3BpbmdzGAQgASgNEicKH21heF90ZWFtbWF0ZV9w",
            "aW5nc19wZXJfaW50ZXJ2YWwYBSABKA0SGgoSdGVhbV9jaGF0X21lc3NhZ2Vz",
            "GAYgASgNEhkKEWFsbF9jaGF0X21lc3NhZ2VzGAcgASgNEhsKE2NoYXRfd2hl",
            "ZWxfbWVzc2FnZXMYCCABKA0SDgoGcGF1c2VzGAkgASgNEhAKCHVucGF1c2Vz",
            "GAogASgNEhMKC2xpbmVzX2RyYXduGAsgASgNEhoKEnZvaWNlX2NoYXRfc2Vj",
            "b25kcxgMIAEoDRISCgpjaGF0X211dGVzGA0gASgNEhMKC3ZvaWNlX211dGVz",
            "GA4gASgNElUKDHBpbmdfZGV0YWlscxgPIAMoCzI/LkNNc2dTaWduT3V0Q29t",
            "bXVuaWNhdGlvblN1bW1hcnkuUGxheWVyQ29tbXVuaWNhdGlvbi5QaW5nRGV0",
            "YWlsEhkKEWNvbW1zX2Jsb2Nrc19zb2xvGBAgASgNEhkKEWNvbW1zX2Jsb2Nr",
            "c19tYXNzGBEgASgNEhAKCGNoYXRfbG9nGBIgAygJGjUKClBpbmdEZXRhaWwS",
            "GAoEdHlwZRgBIAEoDToKNDI5NDk2NzI5NRINCgVjb3VudBgCIAEoDSKuBQoc",
            "Q01zZ0dhbWVNYXRjaFNpZ25vdXRSZXNwb25zZRIQCghtYXRjaF9pZBgBIAEo",
            "BBITCgtyZXBsYXlfc2FsdBgCIAEoBxIQCghsZWFndWVpZBgFIAEoDRIcChRt",
            "ZXRhZGF0YV9wcml2YXRlX2tleRgHIAEoBxIlCg1tYXRjaF9kZXRhaWxzGAgg",
            "ASgLMg4uQ01zZ0RPVEFNYXRjaBJGChBwbGF5ZXJzX21ldGFkYXRhGAkgAygL",
            "MiwuQ01zZ0dhbWVNYXRjaFNpZ25vdXRSZXNwb25zZS5QbGF5ZXJNZXRhZGF0",
            "YRIbCghtdnBfZGF0YRgKIAEoCzIJLkNNdnBEYXRhEhYKDm93X3ByaXZhdGVf",
            "a2V5GAsgASgGEg8KB293X3NhbHQYDCABKAcSFAoMb3dfcmVwbGF5X2lkGA0g",
            "ASgEEjUKEW92ZXJ3b3JsZF9yZXdhcmRzGA4gASgLMhouQ01zZ092ZXJ3b3Js",
            "ZE1hdGNoUmV3YXJkcxq0AgoOUGxheWVyTWV0YWRhdGESDwoHaGVyb19pZBgB",
            "IAEoBRIVCg1hdmdfa2lsbHNfeDE2GAIgASgNEhYKDmF2Z19kZWF0aHNfeDE2",
            "GAMgASgNEhcKD2F2Z19hc3Npc3RzX3gxNhgEIAEoDRITCgthdmdfZ3BtX3gx",
            "NhgFIAEoDRITCgthdmdfeHBtX3gxNhgGIAEoDRIWCg5iZXN0X2tpbGxzX3gx",
            "NhgHIAEoDRIYChBiZXN0X2Fzc2lzdHNfeDE2GAggASgNEhQKDGJlc3RfZ3Bt",
            "X3gxNhgJIAEoDRIUCgxiZXN0X3hwbV94MTYYCiABKA0SEgoKd2luX3N0cmVh",
            "axgLIAEoDRIXCg9iZXN0X3dpbl9zdHJlYWsYDCABKA0SFAoMZ2FtZXNfcGxh",
            "eWVkGA0gASgNIoUBCiVDTXNnR2FtZU1hdGNoU2lnbk91dFBlcm1pc3Npb25S",
            "ZXF1ZXN0EhYKDnNlcnZlcl92ZXJzaW9uGAEgASgNEhUKDWxvY2FsX2F0dGVt",
            "cHQYAiABKA0SFQoNdG90YWxfYXR0ZW1wdBgDIAEoDRIWCg5zZWNvbmRzX3dh",
            "aXRlZBgEIAEoDSKLAQomQ01zZ0dhbWVNYXRjaFNpZ25PdXRQZXJtaXNzaW9u",
            "UmVzcG9uc2USIQoScGVybWlzc2lvbl9ncmFudGVkGAEgASgIOgVmYWxzZRIe",
            "Cg9hYmFuZG9uX3NpZ25vdXQYAiABKAg6BWZhbHNlEh4KE3JldHJ5X2RlbGF5",
            "X3NlY29uZHMYAyABKA06ATAinwEKIUNNc2dHYW1lTWF0Y2hTaWduT3V0RXZl",
            "bnRHYW1lRGF0YRIoCghldmVudF9pZBgBIAEoDjIHLkVFdmVudDoNRVZFTlRf",
            "SURfTk9ORRIRCglnYW1lX25hbWUYAiABKAkSEAoIbWFwX25hbWUYAyABKAkS",
            "FwoPZXZlbnRfZ2FtZV9kYXRhGAQgASgMEhIKCnN0YXJ0X3RpbWUYBSABKA0i",
            "4AUKHENNc2dHYW1lTWF0Y2hTaWduT3V0UGVyZkRhdGESGgoSYXZlcmFnZV9m",
            "cmFtZV90aW1lGAEgAygCEhYKDm1heF9mcmFtZV90aW1lGAIgAygCEiEKGXNl",
            "cnZlcl9hdmVyYWdlX2ZyYW1lX3RpbWUYAyABKAISHQoVc2VydmVyX21heF9m",
            "cmFtZV90aW1lGAQgASgCEhwKFGF2ZXJhZ2VfY29tcHV0ZV90aW1lGAUgAygC",
            "EhgKEG1heF9jb21wdXRlX3RpbWUYBiADKAISIAoYYXZlcmFnZV9jbGllbnRf",
            "dGlja190aW1lGAcgAygCEhwKFG1heF9jbGllbnRfdGlja190aW1lGAggAygC",
            "EiQKHGF2ZXJhZ2VfY2xpZW50X3NpbXVsYXRlX3RpbWUYCSADKAISIAoYbWF4",
            "X2NsaWVudF9zaW11bGF0ZV90aW1lGAogAygCEhsKE2F2ZXJhZ2Vfb3V0cHV0",
            "X3RpbWUYCyADKAISFwoPbWF4X291dHB1dF90aW1lGAwgAygCEjMKK2F2ZXJh",
            "Z2Vfd2FpdF9mb3JfcmVuZGVyaW5nX3RvX2NvbXBsZXRlX3RpbWUYDSADKAIS",
            "LwonbWF4X3dhaXRfZm9yX3JlbmRlcmluZ190b19jb21wbGV0ZV90aW1lGA4g",
            "AygCEhkKEWF2ZXJhZ2Vfc3dhcF90aW1lGA8gAygCEhUKDW1heF9zd2FwX3Rp",
            "bWUYECADKAISIQoZYXZlcmFnZV9mcmFtZV91cGRhdGVfdGltZRgRIAMoAhId",
            "ChVtYXhfZnJhbWVfdXBkYXRlX3RpbWUYEiADKAISGQoRYXZlcmFnZV9pZGxl",
            "X3RpbWUYEyADKAISFQoNbWF4X2lkbGVfdGltZRgUIAMoAhIlCh1hdmVyYWdl",
            "X2lucHV0X3Byb2Nlc3NpbmdfdGltZRgVIAMoAhIhChltYXhfaW5wdXRfcHJv",
            "Y2Vzc2luZ190aW1lGBYgAygCIkgKG0NNc2dHYW1lTWF0Y2hTaWduT3V0QmFu",
            "RGF0YRIRCgloZXJvX2JhbnMYASADKAUSFgoOaGVyb19iYW5fdm90ZXMYAiAD",
            "KAUi0AoKHENNc2dET1RBTGl2ZVNjb3JlYm9hcmRVcGRhdGUSFQoNdG91cm5h",
            "bWVudF9pZBgBIAEoDRIaChJ0b3VybmFtZW50X2dhbWVfaWQYAiABKA0SEAoI",
            "ZHVyYXRpb24YAyABKAISEgoKaGx0dl9kZWxheRgEIAEoBRI1Cgl0ZWFtX2dv",
            "b2QYBSABKAsyIi5DTXNnRE9UQUxpdmVTY29yZWJvYXJkVXBkYXRlLlRlYW0S",
            "NAoIdGVhbV9iYWQYBiABKAsyIi5DTXNnRE9UQUxpdmVTY29yZWJvYXJkVXBk",
            "YXRlLlRlYW0SHAoUcm9zaGFuX3Jlc3Bhd25fdGltZXIYByABKA0SEQoJbGVh",
            "Z3VlX2lkGAggASgNEhAKCG1hdGNoX2lkGAkgASgEGqYICgRUZWFtEjoKB3Bs",
            "YXllcnMYASADKAsyKS5DTXNnRE9UQUxpdmVTY29yZWJvYXJkVXBkYXRlLlRl",
            "YW0uUGxheWVyEg0KBXNjb3JlGAIgASgNEhMKC3Rvd2VyX3N0YXRlGAMgASgN",
            "EhYKDmJhcnJhY2tzX3N0YXRlGAQgASgNEhIKCmhlcm9fcGlja3MYBSADKAUS",
            "EQoJaGVyb19iYW5zGAYgAygFGv4GCgZQbGF5ZXISEwoLcGxheWVyX3Nsb3QY",
            "ASABKA0SEwoLcGxheWVyX25hbWUYAiABKAkSEQoJaGVyb19uYW1lGAMgASgJ",
            "Eg8KB2hlcm9faWQYBCABKAUSDQoFa2lsbHMYBSABKA0SDgoGZGVhdGhzGAYg",
            "ASgNEg8KB2Fzc2lzdHMYByABKA0SEQoJbGFzdF9oaXRzGAggASgNEg4KBmRl",
            "bmllcxgJIAEoDRIMCgRnb2xkGAogASgNEg0KBWxldmVsGAsgASgNEhQKDGdv",
            "bGRfcGVyX21pbhgMIAEoAhISCgp4cF9wZXJfbWluGA0gASgCEnMKDnVsdGlt",
            "YXRlX3N0YXRlGA4gASgOMjsuQ01zZ0RPVEFMaXZlU2NvcmVib2FyZFVwZGF0",
            "ZS5UZWFtLlBsYXllci5ET1RBVWx0aW1hdGVTdGF0ZToea19FRE9UQVVsdGlt",
            "YXRlU3RhdGVOb3RMZWFybmVkEhkKEXVsdGltYXRlX2Nvb2xkb3duGA8gASgC",
            "EhEKBWl0ZW0wGBAgASgFOgItMRIRCgVpdGVtMRgRIAEoBToCLTESEQoFaXRl",
            "bTIYEiABKAU6Ai0xEhEKBWl0ZW0zGBMgASgFOgItMRIRCgVpdGVtNBgUIAEo",
            "BToCLTESEQoFaXRlbTUYFSABKAU6Ai0xEhUKDXJlc3Bhd25fdGltZXIYFiAB",
            "KA0SEgoKYWNjb3VudF9pZBgXIAEoDRISCgpwb3NpdGlvbl94GBggASgCEhIK",
            "CnBvc2l0aW9uX3kYGSABKAISEQoJbmV0X3dvcnRoGBogASgNEkgKCWFiaWxp",
            "dGllcxgbIAMoCzI1LkNNc2dET1RBTGl2ZVNjb3JlYm9hcmRVcGRhdGUuVGVh",
            "bS5QbGF5ZXIuSGVyb0FiaWxpdHkaPAoLSGVyb0FiaWxpdHkSFgoKYWJpbGl0",
            "eV9pZBgBIAEoBToCLTESFQoNYWJpbGl0eV9sZXZlbBgCIAEoDSKbAQoRRE9U",
            "QVVsdGltYXRlU3RhdGUSIgoea19FRE9UQVVsdGltYXRlU3RhdGVOb3RMZWFy",
            "bmVkEAASIAoca19FRE9UQVVsdGltYXRlU3RhdGVDb29sZG93bhABEiEKHWtf",
            "RURPVEFVbHRpbWF0ZVN0YXRlTmVlZHNNYW5hEAISHQoZa19FRE9UQVVsdGlt",
            "YXRlU3RhdGVSZWFkeRADInAKKUNNc2dTZXJ2ZXJUb0dDUmVxdWVzdEJhdGNo",
            "UGxheWVyUmVzb3VyY2VzEhcKC2FjY291bnRfaWRzGAEgAygNQgIQARIWCgpy",
            "YW5rX3R5cGVzGAQgAygNQgIQARISCgpsb2JieV90eXBlGAUgASgFIrMDCjFD",
            "TXNnU2VydmVyVG9HQ1JlcXVlc3RCYXRjaFBsYXllclJlc291cmNlc1Jlc3Bv",
            "bnNlEkoKB3Jlc3VsdHMYBiADKAsyOS5DTXNnU2VydmVyVG9HQ1JlcXVlc3RC",
            "YXRjaFBsYXllclJlc291cmNlc1Jlc3BvbnNlLlJlc3VsdBqxAgoGUmVzdWx0",
            "EhIKCmFjY291bnRfaWQYASABKA0SDAoEcmFuaxgEIAEoDRIXCg9yYW5rX2Nh",
            "bGlicmF0ZWQYBSABKAgSFAoMbG93X3ByaW9yaXR5GAYgASgIEhUKDWlzX25l",
            "d19wbGF5ZXIYByABKAgSFwoPaXNfZ3VpZGVfcGxheWVyGAggASgIEhIKCmNv",
            "bW1fbGV2ZWwYCSABKAUSFgoOYmVoYXZpb3JfbGV2ZWwYCiABKAUSDAoEd2lu",
            "cxgLIAEoBRIOCgZsb3NzZXMYDCABKAUSFgoOc211cmZfY2F0ZWdvcnkYDSAB",
            "KAUSEgoKY29tbV9zY29yZRgOIAEoBRIWCg5iZWhhdmlvcl9zY29yZRgPIAEo",
            "BRIYChByYW5rX3VuY2VydGFpbnR5GBAgASgFIlIKHUNNc2dET1RBUGxheWVy",
            "RmFpbGVkVG9Db25uZWN0EhYKDmZhaWxlZF9sb2FkZXJzGAEgAygGEhkKEWFi",
            "YW5kb25lZF9sb2FkZXJzGAIgAygGItsBChRDTXNnR0NUb1JlbGF5Q29ubmVj",
            "dBIdChVzb3VyY2VfdHZfcHVibGljX2FkZHIYASABKA0SHgoWc291cmNlX3R2",
            "X3ByaXZhdGVfYWRkchgCIAEoDRIWCg5zb3VyY2VfdHZfcG9ydBgDIAEoDRIc",
            "ChRnYW1lX3NlcnZlcl9zdGVhbV9pZBgEIAEoBBIUCgxwYXJlbnRfY291bnQY",
            "BSABKA0SHQoVdHZfdW5pcXVlX3NlY3JldF9jb2RlGAYgASgGEhkKEXNvdXJj",
            "ZV90dl9zdGVhbWlkGAcgASgGIjgKH0NNc2dHQ0dDVG9MQU5TZXJ2ZXJSZWxh",
            "eUNvbm5lY3QSFQoNcmVsYXlfc3RlYW1pZBgBIAEoBiIsChZDTXNnR0NCYW5T",
            "dGF0dXNSZXF1ZXN0EhIKCmFjY291bnRfaWQYASABKA0idAoXQ01zZ0dDQmFu",
            "U3RhdHVzUmVzcG9uc2USDgoGcmVzdWx0GAEgASgNEhQKDGxvd19wcmlvcml0",
            "eRgCIAEoCBIYChB0ZXh0X2NoYXRfYmFubmVkGAMgASgIEhkKEXZvaWNlX2No",
            "YXRfYmFubmVkGAQgASgIIt4CChdDTXNnVG91cm5hbWVudEl0ZW1FdmVudBIZ",
            "ChFraWxsZXJfYWNjb3VudF9pZBgBIAEoBxIZChF2aWN0aW1fYWNjb3VudF9p",
            "ZBgCIAEoBxI6CgpldmVudF90eXBlGAMgASgOMhYuRE9UQV9Ub3VybmFtZW50",
            "RXZlbnRzOg5URV9GSVJTVF9CTE9PRBIQCgh0dl9kZWxheRgEIAEoBRIRCglk",
            "b3RhX3RpbWUYBSABKAUSEwoLcmVwbGF5X3RpbWUYBiABKAISEQoJbG9vdF9s",
            "aXN0GAcgASgJEhIKCmV2ZW50X3RlYW0YCCABKA0SGAoQbXVsdGlfa2lsbF9j",
            "b3VudBgJIAEoDRIUCgx3aW5uZXJfc2NvcmUYCiABKA0SEwoLbG9zZXJfc2Nv",
            "cmUYCyABKA0SKwoMaGVyb19zdGF0dWVzGAwgAygLMhUuQ1Byb3RvSXRlbUhl",
            "cm9TdGF0dWUidgofQ01zZ1RvdXJuYW1lbnRJdGVtRXZlbnRSZXNwb25zZRI6",
            "CgpldmVudF90eXBlGAEgASgOMhYuRE9UQV9Ub3VybmFtZW50RXZlbnRzOg5U",
            "RV9GSVJTVF9CTE9PRBIXCg92aWV3ZXJzX2dyYW50ZWQYBiABKA0iIwoPQ01z",
            "Z1RlYW1GYW5mYXJlEhAKCG1hdGNoX2lkGAEgASgEIkwKF0NNc2dSZXNwb25z",
            "ZVRlYW1GYW5mYXJlEhgKEGZhbmZhcmVfZ29vZGd1eXMYASABKA0SFwoPZmFu",
            "ZmFyZV9iYWRndXlzGAIgASgNIvkCChhDTXNnRE9UQUF3YXJkRXZlbnRQb2lu",
            "dHMSOwoMYXdhcmRfcG9pbnRzGAEgAygLMiUuQ01zZ0RPVEFBd2FyZEV2ZW50",
            "UG9pbnRzLkF3YXJkUG9pbnRzEhAKCG1hdGNoX2lkGAIgASgEEigKCGV2ZW50",
            "X2lkGAQgASgOMgcuRUV2ZW50Og1FVkVOVF9JRF9OT05FEhEKCXRpbWVzdGFt",
            "cBgFIAEoDRIUCgxhdWRpdF9hY3Rpb24YBiABKA0augEKC0F3YXJkUG9pbnRz",
            "EhIKCmFjY291bnRfaWQYASABKA0SDgoGcG9pbnRzGAIgASgFEhYKDnByZW1p",
            "dW1fcG9pbnRzGAMgASgFEhYKDnRyYWRlX2Jhbl90aW1lGAUgASgNEi8KIGVs",
            "aWdpYmxlX2Zvcl9wZXJpb2RpY19hZGp1c3RtZW50GAYgASgIOgVmYWxzZRIm",
            "Ch5wb2ludF9jYXBfcGVyaW9kaWNfcmVzb3VyY2VfaWQYByABKA0iRQoZQ01z",
            "Z0dDVG9TZXJ2ZXJQaW5nUmVxdWVzdBISCgpyZXF1ZXN0X2lkGAEgASgGEhQK",
            "DHJlcXVlc3RfdGltZRgCIAEoBCJXChpDTXNnR0NUb1NlcnZlclBpbmdSZXNw",
            "b25zZRISCgpyZXF1ZXN0X2lkGAEgASgGEhQKDHJlcXVlc3RfdGltZRgCIAEo",
            "BBIPCgdjbHVzdGVyGAMgASgNIrACCiJDTXNnU2VydmVyVG9HQ01hdGNoQ29u",
            "bmVjdGlvblN0YXRzEhAKCG1hdGNoX2lkGAEgASgEEhEKCXJlZ2lvbl9pZBgC",
            "IAEoDRIRCglsZWFndWVfaWQYAyABKA0SOwoHcGxheWVycxgEIAMoCzIqLkNN",
            "c2dTZXJ2ZXJUb0dDTWF0Y2hDb25uZWN0aW9uU3RhdHMuUGxheWVyEhIKCmNs",
            "dXN0ZXJfaWQYBSABKA0agAEKBlBsYXllchISCgphY2NvdW50X2lkGAEgASgN",
            "EgoKAmlwGAIgASgHEhMKC2F2Z19waW5nX21zGAMgASgNEhMKC3BhY2tldF9s",
            "b3NzGAUgASgCEhYKDnBpbmdfZGV2aWF0aW9uGAYgASgCEhQKDGZ1bGxfcmVz",
            "ZW5kcxgHIAEoDSI7CiBDTXNnU2VydmVyR0NVcGRhdGVTcGVjdGF0b3JDb3Vu",
            "dBIXCg9zcGVjdGF0b3JfY291bnQYASABKA0i/AEKFENTZXJpYWxpemVkQ29t",
            "YmF0TG9nEg8KB3ZlcnNpb24YASABKA0SNAoKZGljdGlvbmFyeRgCIAEoCzIg",
            "LkNTZXJpYWxpemVkQ29tYmF0TG9nLkRpY3Rpb25hcnkSKAoHZW50cmllcxgD",
            "IAMoCzIXLkNNc2dET1RBQ29tYmF0TG9nRW50cnkacwoKRGljdGlvbmFyeRI8",
            "CgdzdHJpbmdzGAEgAygLMisuQ1NlcmlhbGl6ZWRDb21iYXRMb2cuRGljdGlv",
            "bmFyeS5EaWN0U3RyaW5nGicKCkRpY3RTdHJpbmcSCgoCaWQYASACKA0SDQoF",
            "dmFsdWUYAiACKAkijgIKIENNc2dTZXJ2ZXJUb0dDVmljdG9yeVByZWRpY3Rp",
            "b25zEjkKB3JlY29yZHMYASADKAsyKC5DTXNnU2VydmVyVG9HQ1ZpY3RvcnlQ",
            "cmVkaWN0aW9ucy5SZWNvcmQaMwoOUHJlZGljdGlvbkl0ZW0SDwoHaXRlbV9p",
            "ZBgBIAEoBBIQCghpdGVtX2RlZhgCIAEoDRp6CgZSZWNvcmQSEgoKYWNjb3Vu",
            "dF9pZBgBIAEoDRIQCghpdGVtX2lkcxgFIAMoBBJKChBwcmVkaWN0aW9uX2l0",
            "ZW1zGAYgAygLMjAuQ01zZ1NlcnZlclRvR0NWaWN0b3J5UHJlZGljdGlvbnMu",
            "UHJlZGljdGlvbkl0ZW0iHQobQ01zZ1NlcnZlclRvR0NSZXF1ZXN0U3RhdHVz",
            "IjgKJENNc2dTZXJ2ZXJUb0dDUmVxdWVzdFN0YXR1c19SZXNwb25zZRIQCghy",
            "ZXNwb25zZRgBIAEoDSJZCh9DTXNnR0NUb1NlcnZlckV2YWx1YXRlVG94aWND",
            "aGF0EhkKEXRhcmdldF9hY2NvdW50X2lkGAEgASgNEhsKE3JlcG9ydGVyX2Fj",
            "Y291bnRfaWQYAiABKA0ijAEKH0NNc2dTZXJ2ZXJUb0dDRXZhbHVhdGVUb3hp",
            "Y0NoYXQSGQoRdGFyZ2V0X2FjY291bnRfaWQYASABKA0SGwoTcmVwb3J0ZXJf",
            "YWNjb3VudF9pZBgCIAEoDRIQCghtYXRjaF9pZBgDIAEoBhIRCgl0aW1lc3Rh",
            "bXAYBCADKA0SDAoEbGluZRgFIAMoCSKjAQonQ01zZ1NlcnZlclRvR0NFdmFs",
            "dWF0ZVRveGljQ2hhdFJlc3BvbnNlEhkKEXRhcmdldF9hY2NvdW50X2lkGAEg",
            "ASgNEhsKE3JlcG9ydGVyX2FjY291bnRfaWQYAiABKA0SEgoKYmFuX3JlYXNv",
            "bhgDIAEoDRIUCgxiYW5fZHVyYXRpb24YBCABKA0SFgoOdG94aWNpdHlfc2Nv",
            "cmUYBSABKAIi6gEKH0NNc2dTaWduT3V0QXNzYXNzaW5NaW5pR2FtZUluZm8S",
            "FwoPd2lubmluZ19wbGF5ZXJzGAEgAygGEhYKDmxvc2luZ19wbGF5ZXJzGAIg",
            "AygGEhUKDWFyY2FuYV9vd25lcnMYAyADKAYSFAoMYXNzYXNzaW5fd29uGAQg",
            "ASgIEhYKDnRhcmdldF9oZXJvX2lkGAUgASgFEhoKEmNvbnRyYWN0X2NvbXBs",
            "ZXRlZBgGIAEoCBIeChZjb250cmFjdF9jb21wbGV0ZV90aW1lGAcgASgCEhUK",
            "DXBhX2lzX3JhZGlhbnQYCCABKAgixQEKG0NNc2dTZXJ2ZXJUb0dDS2lsbFN1",
            "bW1hcmllcxIWCg5pbmdhbWVldmVudF9pZBgBIAEoDRI7CglzdW1tYXJpZXMY",
            "AiADKAsyKC5DTXNnU2VydmVyVG9HQ0tpbGxTdW1tYXJpZXMuS2lsbFN1bW1h",
            "cnkaUQoLS2lsbFN1bW1hcnkSFgoOa2lsbGVyX2hlcm9faWQYASABKA0SFgoO",
            "dmljdGltX2hlcm9faWQYAiABKA0SEgoKa2lsbF9jb3VudBgDIAEoDSJFCh5D",
            "TXNnU2VydmVyVG9HQ0xvY2tDaGFybVRyYWRpbmcSEgoKYWNjb3VudF9pZBgB",
            "IAEoDRIPCgdpdGVtX2lkGAIgASgEIuACCiBDTXNnU2lnbk91dFVwZGF0ZVBs",
            "YXllckNoYWxsZW5nZRISCgphY2NvdW50X2lkGAEgASgNEj4KCWNvbXBsZXRl",
            "ZBgCIAMoCzIrLkNNc2dTaWduT3V0VXBkYXRlUGxheWVyQ2hhbGxlbmdlLkNo",
            "YWxsZW5nZRI9CghyZXJvbGxlZBgDIAMoCzIrLkNNc2dTaWduT3V0VXBkYXRl",
            "UGxheWVyQ2hhbGxlbmdlLkNoYWxsZW5nZRIQCghtYXRjaF9pZBgEIAEoBBIP",
            "CgdoZXJvX2lkGAUgASgFGoUBCglDaGFsbGVuZ2USKAoIZXZlbnRfaWQYASAB",
            "KA4yBy5FRXZlbnQ6DUVWRU5UX0lEX05PTkUSDwoHc2xvdF9pZBgCIAEoDRIT",
            "CgtzZXF1ZW5jZV9pZBgDIAEoDRIQCghwcm9ncmVzcxgEIAEoDRIWCg5jaGFs",
            "bGVuZ2VfcmFuaxgFIAEoDSJzCiNDTXNnU2VydmVyVG9HQ1Jlcm9sbFBsYXll",
            "ckNoYWxsZW5nZRISCgphY2NvdW50X2lkGAEgASgNEjgKCnJlcm9sbF9tc2cY",
            "AiABKAsyJC5DTXNnQ2xpZW50VG9HQ1Jlcm9sbFBsYXllckNoYWxsZW5nZSLr",
            "AQoOQ01zZ1NwZW5kV2FnZXISJwoHcGxheWVycxgBIAMoCzIWLkNNc2dTcGVu",
            "ZFdhZ2VyLlBsYXllchIoCghldmVudF9pZBgCIAEoDjIHLkVFdmVudDoNRVZF",
            "TlRfSURfTk9ORRIRCgl0aW1lc3RhbXAYAyABKA0SEAoIbWF0Y2hfaWQYBCAB",
            "KAQSFwoPc2VydmVyX3N0ZWFtX2lkGAUgASgEGkgKBlBsYXllchISCgphY2Nv",
            "dW50X2lkGAEgASgNEg0KBXdhZ2VyGAIgASgNEhsKE3dhZ2VyX3Rva2VuX2l0",
            "ZW1faWQYAyABKAQingIKEkNNc2dTaWduT3V0WFBDb2lucxIrCgdwbGF5ZXJz",
            "GAEgAygLMhouQ01zZ1NpZ25PdXRYUENvaW5zLlBsYXllchIoCghldmVudF9p",
            "ZBgCIAEoDjIHLkVFdmVudDoNRVZFTlRfSURfTk9ORRIQCghtYXRjaF9pZBgD",
            "IAEoBBIRCgl0aW1lc3RhbXAYBCABKA0aiwEKBlBsYXllchISCgphY2NvdW50",
            "X2lkGAEgASgNEhEKCXhwX2dhaW5lZBgCIAEoDRITCgtjb2luc19zcGVudBgD",
            "IAEoDRIbChN3YWdlcl90b2tlbl9pdGVtX2lkGAQgASgEEhIKCnJhbmtfd2Fn",
            "ZXIYBSABKA0SFAoMd2FnZXJfc3RyZWFrGAYgASgNIvEBChNDTXNnU2lnbk91",
            "dEJvdW50aWVzEi0KCGJvdW50aWVzGAEgAygLMhsuQ01zZ1NpZ25PdXRCb3Vu",
            "dGllcy5Cb3VudHkSKAoIZXZlbnRfaWQYAiABKA4yBy5FRXZlbnQ6DUVWRU5U",
            "X0lEX05PTkUSEAoIbWF0Y2hfaWQYAyABKAQSEQoJdGltZXN0YW1wGAQgASgN",
            "GlwKBkJvdW50eRIZChFpc3N1ZXJfYWNjb3VudF9pZBgBIAEoDRIcChRjb21w",
            "bGV0ZXJfYWNjb3VudF9pZBgCIAEoDRIZChF0YXJnZXRfYWNjb3VudF9pZBgD",
            "IAEoDSLjAQogQ01zZ1NpZ25PdXRDb21tdW5pdHlHb2FsUHJvZ3Jlc3MSKAoI",
            "ZXZlbnRfaWQYASABKA4yBy5FRXZlbnQ6DUVWRU5UX0lEX05PTkUSTgoQZXZl",
            "bnRfaW5jcmVtZW50cxgCIAMoCzI0LkNNc2dTaWduT3V0Q29tbXVuaXR5R29h",
            "bFByb2dyZXNzLkV2ZW50R29hbEluY3JlbWVudBpFChJFdmVudEdvYWxJbmNy",
            "ZW1lbnQSFQoNZXZlbnRfZ29hbF9pZBgBIAEoDRIYChBpbmNyZW1lbnRfYW1v",
            "dW50GAIgASgNIm4KM0NNc2dTZXJ2ZXJUb0dDQ2xvc2VDb21wZW5kaXVtSW5H",
            "YW1lUHJlZGljdGlvblZvdGluZxIQCghtYXRjaF9pZBgBIAEoBBISCgpobHR2",
            "X2RlbGF5GAIgASgNEhEKCWxlYWd1ZV9pZBgDIAEoDSJNCjtDTXNnU2VydmVy",
            "VG9HQ0Nsb3NlQ29tcGVuZGl1bUluR2FtZVByZWRpY3Rpb25Wb3RpbmdSZXNw",
            "b25zZRIOCgZyZXN1bHQYASABKAgiqQIKL0NNc2dTZXJ2ZXJUb0dDQ29tcGVu",
            "ZGl1bUluR2FtZVByZWRpY3Rpb25SZXN1bHRzEhAKCG1hdGNoX2lkGAEgASgE",
            "ElIKB3Jlc3VsdHMYAiADKAsyQS5DTXNnU2VydmVyVG9HQ0NvbXBlbmRpdW1J",
            "bkdhbWVQcmVkaWN0aW9uUmVzdWx0cy5QcmVkaWN0aW9uUmVzdWx0EhEKCWxl",
            "YWd1ZV9pZBgDIAEoDRIWCg5sZWFndWVfbm9kZV9pZBgEIAEoDRplChBQcmVk",
            "aWN0aW9uUmVzdWx0EhUKDXByZWRpY3Rpb25faWQYASABKA0SGAoQcHJlZGlj",
            "dGlvbl92YWx1ZRgCIAEoDRIgChhwcmVkaWN0aW9uX3ZhbHVlX2lzX21hc2sY",
            "AyABKAgi1AEKL0NNc2dTZXJ2ZXJUb0dDQ29tcGVuZGl1bUNob3NlbkluR2Ft",
            "ZVByZWRpY3Rpb25zEhAKCG1hdGNoX2lkGAEgASgEElcKEnByZWRpY3Rpb25z",
            "X2Nob3NlbhgCIAMoCzI7LkNNc2dTZXJ2ZXJUb0dDQ29tcGVuZGl1bUNob3Nl",
            "bkluR2FtZVByZWRpY3Rpb25zLlByZWRpY3Rpb24SEQoJbGVhZ3VlX2lkGAMg",
            "ASgNGiMKClByZWRpY3Rpb24SFQoNcHJlZGljdGlvbl9pZBgBIAEoDSJwCitD",
            "TXNnR0NUb0dDQ29tcGVuZGl1bUluR2FtZVByZWRpY3Rpb25SZXN1bHRzEkEK",
            "B3Jlc3VsdHMYASABKAsyMC5DTXNnU2VydmVyVG9HQ0NvbXBlbmRpdW1Jbkdh",
            "bWVQcmVkaWN0aW9uUmVzdWx0cyKIBAosQ01zZ1NlcnZlclRvR0NNYXRjaFBs",
            "YXllckl0ZW1QdXJjaGFzZUhpc3RvcnkSEAoIbWF0Y2hfaWQYASABKAQSCwoD",
            "bW1yGAIgASgNEkUKB3BsYXllcnMYAyADKAsyNC5DTXNnU2VydmVyVG9HQ01h",
            "dGNoUGxheWVySXRlbVB1cmNoYXNlSGlzdG9yeS5QbGF5ZXIahgEKDEl0ZW1Q",
            "dXJjaGFzZRIQCgRpdGVtGAEgASgFOgItMRIMCgRnb2xkGAIgASgNEhEKCW5l",
            "dF93b3J0aBgDIAEoDRIRCglnYW1lX3RpbWUYBCABKA0SFwoPaW52ZW50b3J5",
            "X2l0ZW1zGAUgAygFEhcKD3RhbGVudHNfc2tpbGxlZBgHIAMoCBroAQoGUGxh",
            "eWVyEhMKC3BsYXllcl9zbG90GAEgASgNEhIKCmFjY291bnRfaWQYAiABKA0S",
            "DwoHaGVyb19pZBgDIAEoBRIXCg9hbGxpZWRfaGVyb19pZHMYBCADKAUSFgoO",
            "ZW5lbXlfaGVyb19pZHMYBSADKAUSUgoOaXRlbV9wdXJjaGFzZXMYBiADKAsy",
            "Oi5DTXNnU2VydmVyVG9HQ01hdGNoUGxheWVySXRlbVB1cmNoYXNlSGlzdG9y",
            "eS5JdGVtUHVyY2hhc2USDAoEbGFuZRgHIAEoDRIRCglpc193aW5uZXIYCCAB",
            "KAgiygMKMENNc2dTZXJ2ZXJUb0dDTWF0Y2hQbGF5ZXJOZXV0cmFsSXRlbUVx",
            "dWlwSGlzdG9yeRIQCghtYXRjaF9pZBgBIAEoBBJJCgdwbGF5ZXJzGAIgAygL",
            "MjguQ01zZ1NlcnZlclRvR0NNYXRjaFBsYXllck5ldXRyYWxJdGVtRXF1aXBI",
            "aXN0b3J5LlBsYXllchqDAQoJSXRlbUVxdWlwEhAKBGl0ZW0YASABKAU6Ai0x",
            "EhEKCWdhbWVfdGltZRgCIAEoDRIXCg9pbnZlbnRvcnlfaXRlbXMYAyADKAUS",
            "FwoPdGFsZW50c19za2lsbGVkGAQgAygIEh8KF2F2YWlsYWJsZV9uZXV0cmFs",
            "X2l0ZW1zGAUgAygFGrIBCgZQbGF5ZXISEgoKYWNjb3VudF9pZBgBIAEoDRIX",
            "Cg9hbGxpZWRfaGVyb19pZHMYAiADKAUSFgoOZW5lbXlfaGVyb19pZHMYAyAD",
            "KAUSUAoLaXRlbV9lcXVpcHMYBCADKAsyOy5DTXNnU2VydmVyVG9HQ01hdGNo",
            "UGxheWVyTmV1dHJhbEl0ZW1FcXVpcEhpc3RvcnkuSXRlbUVxdWlwEhEKCWlz",
            "X3dpbm5lchgFIAEoCCK2BgofQ01zZ1NlcnZlclRvR0NNYXRjaFN0YXRlSGlz",
            "dG9yeRIQCghtYXRjaF9pZBgBIAEoBBITCgtyYWRpYW50X3dvbhgCIAEoCBIL",
            "CgNtbXIYAyABKA0SQQoMbWF0Y2hfc3RhdGVzGAQgAygLMisuQ01zZ1NlcnZl",
            "clRvR0NNYXRjaFN0YXRlSGlzdG9yeS5NYXRjaFN0YXRlGrQBCgtQbGF5ZXJT",
            "dGF0ZRIPCgdoZXJvX2lkGAEgASgFEhEKCW5ldF93b3J0aBgCIAEoDRINCgVs",
            "ZXZlbBgDIAEoDRIOCgZkZWF0aHMYBCABKA0SFAoMcmVzcGF3bl90aW1lGAUg",
            "ASgNEhMKC2hhc19idXliYWNrGAYgASgIEhEKCWhhc19hZWdpcxgHIAEoCBIS",
            "CgpoYXNfcmFwaWVyGAggASgIEhAKCGRpc3RhbmNlGAkgASgNGr8CCglUZWFt",
            "U3RhdGUSDAoEdGVhbRgBIAEoDRJJCg1wbGF5ZXJfc3RhdGVzGAIgAygLMiwu",
            "Q01zZ1NlcnZlclRvR0NNYXRjaFN0YXRlSGlzdG9yeS5QbGF5ZXJTdGF0ZUIE",
            "4OQdBRIeChB0b3dlcl9oZWFsdGhfcGN0GAMgAygNQgTg5B0LEiEKE2JhcnJh",
            "Y2tzX2hlYWx0aF9wY3QYBCADKA1CBODkHQMSGgoSYW5jaWVudF9oZWFsdGhf",
            "cGN0GAUgASgNEhYKDmdseXBoX2Nvb2xkb3duGAYgASgNEg0KBWtpbGxzGAcg",
            "ASgNEhsKE2NyZWVwX2Rpc3RhbmNlX3NhZmUYCCABKA0SGgoSY3JlZXBfZGlz",
            "dGFuY2VfbWlkGAkgASgNEhoKEmNyZWVwX2Rpc3RhbmNlX29mZhgKIAEoDRqi",
            "AQoKTWF0Y2hTdGF0ZRIRCglnYW1lX3RpbWUYASABKA0SQQoNcmFkaWFudF9z",
            "dGF0ZRgCIAEoCzIqLkNNc2dTZXJ2ZXJUb0dDTWF0Y2hTdGF0ZUhpc3Rvcnku",
            "VGVhbVN0YXRlEj4KCmRpcmVfc3RhdGUYAyABKAsyKi5DTXNnU2VydmVyVG9H",
            "Q01hdGNoU3RhdGVIaXN0b3J5LlRlYW1TdGF0ZSKAAQoaQ01zZ01hdGNoU3Rh",
            "dGVTdGVhbU1MRW50cnkSQAoLbWF0Y2hfc3RhdGUYASABKAsyKy5DTXNnU2Vy",
            "dmVyVG9HQ01hdGNoU3RhdGVIaXN0b3J5Lk1hdGNoU3RhdGUSCwoDbW1yGAIg",
            "ASgNEhMKC3JhZGlhbnRfd29uGAMgASgIIkwKHUNNc2dMYW5lU2VsZWN0aW9u",
            "U3RlYW1NTEVudHJ5EhYKCGhlcm9faWRzGAEgAygFQgTg5B0KEhMKBWxhbmVz",
            "GAIgAygNQgTg5B0GIqMBCiBDTXNnQWJpbGl0eVNlbGVjdGlvblN0ZWFtTUxF",
            "bnRyeRILCgNtbXIYASABKA0SDwoHaGVyb19pZBgCIAEoBRIcCg5lbmVteV9o",
            "ZXJvX2lkcxgDIAMoBUIE4OQdBBIMCgRsYW5lGAQgASgNEhcKCWFiaWxpdGll",
            "cxgFIAMoBUIE4OQdGRIcChBzZWxlY3RlZF9hYmlsaXR5GAYgASgFOgItMSK0",
            "AQojQ01zZ0l0ZW1QdXJjaGFzZVByZWdhbWVTdGVhbU1MRW50cnkSCwoDbW1y",
            "GAEgASgNEgwKBGxhbmUYAiABKA0SDwoHYmFsYW5jZRgDIAEoAhIPCgdoZXJv",
            "X2lkGAQgASgFEh0KD2FsbGllZF9oZXJvX2lkcxgFIAMoBUIE4OQdBBIcCg5l",
            "bmVteV9oZXJvX2lkcxgGIAMoBUIE4OQdBRITCgVpdGVtcxgHIAMoBUIE4OQd",
            "CSLBAQocQ01zZ0l0ZW1QdXJjaGFzZVN0ZWFtTUxFbnRyeRILCgNtbXIYASAB",
            "KA0SDAoEbGFuZRgCIAEoDRIPCgdoZXJvX2lkGAMgASgFEh0KD2FsbGllZF9o",
            "ZXJvX2lkcxgEIAMoBUIE4OQdBBIcCg5lbmVteV9oZXJvX2lkcxgFIAMoBUIE",
            "4OQdBRITCgVpdGVtcxgGIAMoBUIE4OQdFBIjChVpdGVtc190b19iZV9wdXJj",
            "aGFzZWQYByADKAVCBODkHRQixgEKJENNc2dJdGVtUHVyY2hhc2VTZXF1ZW5j",
            "ZVN0ZWFtTUxFbnRyeRILCgNtbXIYASABKA0SDAoEbGFuZRgCIAEoDRIPCgdo",
            "ZXJvX2lkGAMgASgFEh0KD2FsbGllZF9oZXJvX2lkcxgEIAMoBUIE4OQdBBIc",
            "Cg5lbmVteV9oZXJvX2lkcxgFIAMoBUIE4OQdBRITCgVpdGVtcxgGIAMoBUIE",
            "4OQdFBIgChRpdGVtX3RvX2JlX3B1cmNoYXNlZBgHIAEoBToCLTEilgEKJUNN",
            "c2dTZXJ2ZXJUb0dDQ2F2ZXJuQ3Jhd2xJc0hlcm9BY3RpdmUSEAoIZXZlbnRf",
            "aWQYASABKA0SEgoKYWNjb3VudF9pZBgCIAEoDRIiChVwcmVmZXJyZWRfbWFw",
            "X3ZhcmlhbnQYAyABKA06AzI1NRIPCgdoZXJvX2lkGAQgASgFEhIKCnR1cmJv",
            "X21vZGUYBSABKAgi3AMKJENNc2dTZXJ2ZXJUb0dDUGxheWVyQ2hhbGxlbmdl",
            "SGlzdG9yeRIQCghtYXRjaF9pZBgBIAEoBBIUCgxhdmVyYWdlX3JhbmsYAiAB",
            "KA0SUAoRY2hhbGxlbmdlX3JlY29yZHMYAyADKAsyNS5DTXNnU2VydmVyVG9H",
            "Q1BsYXllckNoYWxsZW5nZUhpc3RvcnkuUGxheWVyQ2hhbGxlbmdlGrkCCg9Q",
            "bGF5ZXJDaGFsbGVuZ2USEgoKYWNjb3VudF9pZBgBIAEoDRJbCg5jaGFsbGVu",
            "Z2VfdHlwZRgCIAEoDjIcLkVQbGF5ZXJDaGFsbGVuZ2VIaXN0b3J5VHlwZTol",
            "a19FUGxheWVyQ2hhbGxlbmdlSGlzdG9yeVR5cGVfSW52YWxpZBIVCg1jaGFs",
            "bGVuZ2VfaWQxGAMgASgNEhUKDWNoYWxsZW5nZV9pZDIYBCABKA0SHAoUcHJv",
            "Z3Jlc3NfdmFsdWVfc3RhcnQYBSABKA0SGgoScHJvZ3Jlc3NfdmFsdWVfZW5k",
            "GAYgASgNEhAKCHRlYW1fd29uGAcgASgIEhIKCmF1ZGl0X2RhdGEYCCABKAQS",
            "DwoHaGVyb19pZBgJIAEoBRIWCg5yYW5rX2NvbXBsZXRlZBgKIAEoDSK4Agot",
            "Q01zZ1NlcnZlclRvR0NDYXZlcm5DcmF3bElzSGVyb0FjdGl2ZVJlc3BvbnNl",
            "Eg4KBnJlc3VsdBgBIAEoCBIYCgttYXBfdmFyaWFudBgFIAEoDToDMjU1EhoK",
            "EnBvdGVudGlhbF93aW5uaW5ncxgCIAEoDRJOCgttYXBfcmVzdWx0cxgDIAMo",
            "CzI5LkNNc2dTZXJ2ZXJUb0dDQ2F2ZXJuQ3Jhd2xJc0hlcm9BY3RpdmVSZXNw",
            "b25zZS5NYXBSZXN1bHRzEiUKHXBvdGVudGlhbF9wbHVzX3NoYXJkX3dpbm5p",
            "bmdzGAQgASgNGkoKCk1hcFJlc3VsdHMSHgoRcGF0aF9pZF9jb21wbGV0ZWQY",
            "ASABKA06AzI1NRIcCg9yb29tX2lkX2NsYWltZWQYAiABKA06AzI1NSLuAQoU",
            "Q01zZ05ldXRyYWxJdGVtU3RhdHMSOAoNbmV1dHJhbF9pdGVtcxgBIAMoCzIh",
            "LkNNc2dOZXV0cmFsSXRlbVN0YXRzLk5ldXRyYWxJdGVtGpsBCgtOZXV0cmFs",
            "SXRlbRITCgdpdGVtX2lkGAEgASgFOgItMRIUCgx0aW1lX2Ryb3BwZWQYAiAB",
            "KA0SDAoEdGVhbRgDIAEoDRIaChJ0aW1lX2xhc3RfZXF1aXBwZWQYBCABKA0S",
            "HAoUdGltZV9sYXN0X3VuZXF1aXBwZWQYBSABKA0SGQoRZHVyYXRpb25fZXF1",
            "aXBwZWQYBiABKA0iqgEKH0NNc2dHQ1RvU2VydmVyTG9iYnlIZXJvQmFuUmF0",
            "ZXMSPwoIYmFuX2RhdGEYASADKAsyLS5DTXNnR0NUb1NlcnZlckxvYmJ5SGVy",
            "b0JhblJhdGVzLkhlcm9CYW5FbnRyeRpGCgxIZXJvQmFuRW50cnkSDwoHaGVy",
            "b19pZBgBIAEoBRIRCgliYW5fY291bnQYAiABKA0SEgoKcGlja19jb3VudBgD",
            "IAEoDSLJAgogQ01zZ1NpZ25PdXRHdWlsZENvbnRyYWN0UHJvZ3Jlc3MSSgoQ",
            "cGxheWVyX2NvbnRyYWN0cxgBIAMoCzIwLkNNc2dTaWduT3V0R3VpbGRDb250",
            "cmFjdFByb2dyZXNzLlBsYXllckNvbnRyYWN0GlUKHENvbXBsZXRlZEd1aWxk",
            "RXZlbnRDb250cmFjdHMSEAoIZ3VpbGRfaWQYASABKA0SEAoIZXZlbnRfaWQY",
            "AiABKA0SEQoJY29udHJhY3RzGAMgAygEGoEBCg5QbGF5ZXJDb250cmFjdBIS",
            "CgphY2NvdW50X2lkGAEgASgNElsKE2NvbXBsZXRlZF9jb250cmFjdHMYAiAD",
            "KAsyPi5DTXNnU2lnbk91dEd1aWxkQ29udHJhY3RQcm9ncmVzcy5Db21wbGV0",
            "ZWRHdWlsZEV2ZW50Q29udHJhY3RzIs0CCiFDTXNnU2lnbk91dEd1aWxkQ2hh",
            "bGxlbmdlUHJvZ3Jlc3MSWQobZ3VpbGRfY2hhbGxlbmdlc19wcm9ncmVzc2Vz",
            "GAEgAygLMjQuQ01zZ1NpZ25PdXRHdWlsZENoYWxsZW5nZVByb2dyZXNzLkNo",
            "YWxsZW5nZVByb2dyZXNzGswBChFDaGFsbGVuZ2VQcm9ncmVzcxIQCghndWls",
            "ZF9pZBgBIAEoDRIQCghldmVudF9pZBgCIAEoDRIdChVjaGFsbGVuZ2VfaW5z",
            "dGFuY2VfaWQYAyABKA0SJAocY2hhbGxlbmdlX2luc3RhbmNlX3RpbWVzdGFt",
            "cBgEIAEoDRIfChdjaGFsbGVuZ2VfcGVyaW9kX3NlcmlhbBgFIAEoDRIQCghw",
            "cm9ncmVzcxgGIAEoDRIbChNjaGFsbGVuZ2VfcGFyYW1ldGVyGAcgASgNIoQG",
            "ChNDTXNnU2lnbk91dE1WUFN0YXRzEhAKCG1hdGNoX2lkGAEgASgEEhEKCWdh",
            "bWVfbW9kZRgCIAEoDRIUCgx3aW5uaW5nX3RlYW0YAyABKA0SEQoJZ2FtZV90",
            "aW1lGAQgASgCEiwKB3BsYXllcnMYBSADKAsyGy5DTXNnU2lnbk91dE1WUFN0",
            "YXRzLlBsYXllchrwBAoGUGxheWVyEg8KB3RlYW1faWQYASABKA0SGgoSdGVh",
            "bV9uZXR3b3J0aF9yYW5rGAIgASgNEhIKCmFjY291bnRfaWQYAyABKA0SEwoL",
            "cGxheWVyX3Nsb3QYICABKA0SDAoEcmFuaxghIAEoDRIPCgdoZXJvX2lkGAQg",
            "ASgFEgwKBHJvbGUYBSABKA0SDQoFa2lsbHMYBiABKAUSDgoGZGVhdGhzGAcg",
            "ASgFEg8KB2Fzc2lzdHMYCCABKAUSCgoCeHAYCSABKAUSEQoJbmV0X3dvcnRo",
            "GAogASgFEhoKEnN1cHBvcnRfZ29sZF9zcGVudBgMIAEoBRIUCgx3YXJkc19w",
            "bGFjZWQYDSABKAUSIwobd2FyZHNfc3BvdHRlZF9mb3JfZGV3YXJkaW5nGA4g",
            "ASgFEhUKDWNhbXBzX3N0YWNrZWQYDyABKAUSEQoJbGFzdF9oaXRzGBAgASgF",
            "Eg4KBmRlbmllcxgRIAEoBRIXCg9idWlsZGluZ19kYW1hZ2UYEyABKAUSFAoM",
            "b3RoZXJfZGFtYWdlGBQgASgFEhQKDHRyaXBsZV9raWxscxgaIAEoBRIQCghy",
            "YW1wYWdlcxgcIAEoBRITCgtmaXJzdF9ibG9vZBgfIAEoBRJFChFraWxsX2Vh",
            "dGVyX2V2ZW50cxgiIAMoCzIqLkNNc2dTaWduT3V0TVZQU3RhdHMuUGxheWVy",
            "LktpbGxFYXRlckV2ZW50EhoKEmhpZ2hlc3Rfa2lsbHN0cmVhaxgjIAEoDRo0",
            "Cg5LaWxsRWF0ZXJFdmVudBISCgpldmVudF90eXBlGAEgAigNEg4KBmFtb3Vu",
            "dBgCIAIoDSI2Ch9DTXNnU2VydmVyVG9HQ0dldEd1aWxkQ29udHJhY3RzEhMK",
            "C2FjY291bnRfaWRzGAEgAygNIrADCidDTXNnU2VydmVyVG9HQ0dldEd1aWxk",
            "Q29udHJhY3RzUmVzcG9uc2USSQoQcGxheWVyX2NvbnRyYWN0cxgBIAMoCzIv",
            "LkNNc2dTZXJ2ZXJUb0dDR2V0R3VpbGRDb250cmFjdHNSZXNwb25zZS5QbGF5",
            "ZXIakQEKD0NvbnRyYWN0RGV0YWlscxITCgtjb250cmFjdF9pZBgBIAEoBBId",
            "ChVjaGFsbGVuZ2VfaW5zdGFuY2VfaWQYAiABKA0SGwoTY2hhbGxlbmdlX3Bh",
            "cmFtZXRlchgDIAEoDRIWCg5jb250cmFjdF9zdGFycxgEIAEoDRIVCg1jb250",
            "cmFjdF9zbG90GAUgASgNGqUBCgZQbGF5ZXISEgoKYWNjb3VudF9pZBgBIAEo",
            "DRIQCghndWlsZF9pZBgCIAEoDRIoCghldmVudF9pZBgDIAEoDjIHLkVFdmVu",
            "dDoNRVZFTlRfSURfTk9ORRJLCgljb250cmFjdHMYBCADKAsyOC5DTXNnU2Vy",
            "dmVyVG9HQ0dldEd1aWxkQ29udHJhY3RzUmVzcG9uc2UuQ29udHJhY3REZXRh",
            "aWxzIs4CChZDTXNnTWF0Y2hEaXJldGlkZUNhbmR5Ej4KEXBsYXllcl9jYW5k",
            "eV9kYXRhGAEgAygLMiMuQ01zZ01hdGNoRGlyZXRpZGVDYW5keS5QbGF5ZXJD",
            "YW5keRIoCghldmVudF9pZBgCIAEoDjIHLkVFdmVudDoNRVZFTlRfSURfTk9O",
            "RRotCgxDYW5keURldGFpbHMSDgoGYW1vdW50GAEgASgNEg0KBWF1ZGl0GAIg",
            "ASgNGpoBCgtQbGF5ZXJDYW5keRISCgphY2NvdW50X2lkGAEgASgNEhQKDGNh",
            "bmR5X2Ftb3VudBgDIAEoDRIiChpjb25zdW1lc19wZXJpb2RpY19yZXNvdXJj",
            "ZRgEIAEoCBI9Cg9jYW5keV9icmVha2Rvd24YBSADKAsyJC5DTXNnTWF0Y2hE",
            "aXJldGlkZUNhbmR5LkNhbmR5RGV0YWlscyKSAQoXQ01zZ0dDVG9TZXJ2ZXJD",
            "aGVlckRhdGESPAoLY2hlZXJfdHlwZXMYASADKAsyJy5DTXNnR0NUb1NlcnZl",
            "ckNoZWVyRGF0YS5DaGVlclR5cGVDb3VudBo5Cg5DaGVlclR5cGVDb3VudBIS",
            "CgpjaGVlcl90eXBlGAEgASgNEhMKC2NoZWVyX2NvdW50GAIgASgNIqgECg9D",
            "TXNnQ2hlZXJDb25maWcSFgoOY2hlZXJzX2VuYWJsZWQYASABKAgSGgoSaXNf",
            "dmFsaWRfbGVhZ3VlX2lkGAIgASgIEhcKD3dpbmRvd19kdXJhdGlvbhgDIAEo",
            "AhIbChN3aW5kb3dfYnVja2V0X2NvdW50GAQgASgNEh0KFWNyb3dkX2xldmVs",
            "X3B1c2hfdGltZRgGIAEoAhIXCg9jcm93ZF9sZXZlbF9sb3cYCiABKA0SGgoS",
            "Y3Jvd2RfbGV2ZWxfbWVkaXVtGAsgASgNEhgKEGNyb3dkX2xldmVsX2hpZ2gY",
            "DCABKA0SGQoRY2hlZXJfc2NhbGVfc3RhcnQYDSABKAISGQoRY2hlZXJfc2Nh",
            "bGVfc3BlZWQYDiABKAISHQoVY2hlZXJfc2NhbGVfcHVzaF9tYXJrGA8gASgN",
            "Eh0KFWNoZWVyX3NjYWxlX3B1bGxfbWFyaxgQIAEoDRIoCiBjaGVlcl9zY2Fs",
            "ZV9wY3Rfb2ZfbWF4X2Nwc19jbGFtcBgRIAEoAhIiChpjaGVlcl9zY2FsZV9k",
            "YW1wZW5lcl92YWx1ZRgVIAEoAhImCh5jaGVlcl9zY2FsZV9kYW1wZW5lcl9s",
            "ZXJwX3RpbWUYFiABKA0SGwoTY2hlZXJfZmFjdG9yX2Jyb256ZRgSIAEoAhIb",
            "ChNjaGVlcl9mYWN0b3Jfc2lsdmVyGBMgASgCEhkKEWNoZWVyX2ZhY3Rvcl9n",
            "b2xkGBQgASgCIkMKGUNNc2dHQ1RvU2VydmVyQ2hlZXJDb25maWcSJgoMY2hl",
            "ZXJfY29uZmlnGAEgASgLMhAuQ01zZ0NoZWVyQ29uZmlnIjEKHENNc2dTZXJ2",
            "ZXJUb0dDR2V0Q2hlZXJDb25maWcSEQoJbGVhZ3VlX2lkGAEgASgNIk4KJENN",
            "c2dTZXJ2ZXJUb0dDR2V0Q2hlZXJDb25maWdSZXNwb25zZRImCgxjaGVlcl9j",
            "b25maWcYAiABKAsyEC5DTXNnQ2hlZXJDb25maWciMwohQ01zZ0dDVG9TZXJ2",
            "ZXJDaGVlclNjYWxlc092ZXJyaWRlEg4KBnNjYWxlcxgBIAMoAiIdChtDTXNn",
            "R0NUb1NlcnZlckdldENoZWVyU3RhdGUibwoSQ01zZ0NoZWVyVHlwZVN0YXRl",
            "EhQKDGNoZWVyX2NvdW50cxgBIAMoDRIWCg5tYXhfcGVyX3NlY29uZBgCIAEo",
            "AhITCgtjaGVlcl9zY2FsZRgDIAEoAhIWCg5vdmVycmlkZV9zY2FsZRgEIAEo",
            "AiJxCg5DTXNnQ2hlZXJTdGF0ZRIoCgtjaGVlcl90eXBlcxgBIAMoCzITLkNN",
            "c2dDaGVlclR5cGVTdGF0ZRIbChNyYWRpYW50X2Nyb3dkX2xldmVsGAIgASgN",
            "EhgKEGRpcmVfY3Jvd2RfbGV2ZWwYAyABKA0ibgoeQ01zZ1NlcnZlclRvR0NS",
            "ZXBvcnRDaGVlclN0YXRlEiYKDGNoZWVyX2NvbmZpZxgBIAEoCzIQLkNNc2dD",
            "aGVlckNvbmZpZxIkCgtjaGVlcl9zdGF0ZRgCIAEoCzIPLkNNc2dDaGVlclN0",
            "YXRlIjUKHkNNc2dTZXJ2ZXJUb0dDR2V0U3RpY2tlckhlcm9lcxITCgthY2Nv",
            "dW50X2lkcxgBIAMoDSKtAQomQ01zZ1NlcnZlclRvR0NHZXRTdGlja2VySGVy",
            "b2VzUmVzcG9uc2USPwoHcGxheWVycxgBIAMoCzIuLkNNc2dTZXJ2ZXJUb0dD",
            "R2V0U3RpY2tlckhlcm9lc1Jlc3BvbnNlLlBsYXllchpCCgZQbGF5ZXISEgoK",
            "YWNjb3VudF9pZBgBIAEoDRIkCghzdGlja2VycxgCIAEoCzISLkNNc2dTdGlj",
            "a2VySGVyb2VzInwKF0NNc2dTdGVhbUxlYXJuTWF0Y2hJbmZvEhMKC2F2ZXJh",
            "Z2VfbW1yGAEgASgNEhMKC3JhZGlhbnRfd29uGAIgASgIEhAKCGR1cmF0aW9u",
            "GAMgASgNEhEKCWdhbWVfbW9kZRgEIAEoDRISCgpsb2JieV90eXBlGAUgASgN",
            "IpMBCh1DTXNnU3RlYW1MZWFybk1hdGNoSW5mb1BsYXllchITCgthdmVyYWdl",
            "X21tchgBIAEoDRIQCgh0ZWFtX3dvbhgCIAEoCBIQCghkdXJhdGlvbhgDIAEo",
            "DRIRCglnYW1lX21vZGUYBCABKA0SEgoKbG9iYnlfdHlwZRgFIAEoDRISCgpw",
            "bGF5ZXJfbW1yGAYgASgNItwCChtDTXNnU3RlYW1MZWFybk1hdGNoSW5mb1Rl",
            "YW0SQgoPcmFkaWFudF9wbGF5ZXJzGAEgAygLMiMuQ01zZ1N0ZWFtTGVhcm5N",
            "YXRjaEluZm9UZWFtLlBsYXllckIE8OQdBRI/CgxkaXJlX3BsYXllcnMYAiAD",
            "KAsyIy5DTXNnU3RlYW1MZWFybk1hdGNoSW5mb1RlYW0uUGxheWVyQgTw5B0F",
            "EhgKEHJhZGlhbnRfdGVhbV93b24YAyABKAganQEKBlBsYXllchIUCgxwcmVt",
            "YXRjaF9tbXIYASABKA0SIQoZcHJlbWF0Y2hfcmFua191bmNlcnRhaW50eRgC",
            "IAEoDRIfChdwcmVtYXRjaF9iZWhhdmlvcl9zY29yZRgDIAEoDRIbChNwcmVt",
            "YXRjaF9jb21tX3Njb3JlGAQgASgNEhwKFG51bV9wbGF5ZXJzX2luX3BhcnR5",
            "GAUgASgNIpMCChtDTXNnU3RlYW1MZWFybk1hdGNoSGVyb2VzVjMSHgoQcmFk",
            "aWFudF9oZXJvX2lkcxgBIAMoBUIE8OQdBRIbCg1kaXJlX2hlcm9faWRzGAIg",
            "AygFQgTw5B0FEhsKDXJhZGlhbnRfbGFuZXMYAyADKA1CBPDkHQUSGAoKZGly",
            "ZV9sYW5lcxgEIAMoDUIE8OQdBRIhChNyYWRpYW50X2hlcm9fZmFjZXRzGAUg",
            "AygNQgTw5B0FEh4KEGRpcmVfaGVyb19mYWNldHMYBiADKA1CBPDkHQUSHwoR",
            "cmFkaWFudF9wb3NpdGlvbnMYByADKA1CBPDkHQUSHAoOZGlyZV9wb3NpdGlv",
            "bnMYCCADKA1CBPDkHQUivAEKGUNNc2dTdGVhbUxlYXJuTWF0Y2hIZXJvVjYS",
            "DwoHaGVyb19pZBgBIAEoBRINCgVmYWNldBgCIAEoDRIWCg5oZXJvX2FuZF9m",
            "YWNldBgDIAEoDRIMCgRsYW5lGAQgASgNEhAKCHBvc2l0aW9uGAUgASgNEiMK",
            "FWFsbGllZF9oZXJvX2FuZF9mYWNldBgGIAMoDUIE8OQdBBIiChRlbmVteV9o",
            "ZXJvX2FuZF9mYWNldBgHIAMoDUIE8OQdBSLsAgoeQ01zZ1N0ZWFtTGVhcm5Q",
            "bGF5ZXJUaW1lZFN0YXRzEkYKDHN0YXRfYnVja2V0cxgBIAMoCzIqLkNNc2dT",
            "dGVhbUxlYXJuUGxheWVyVGltZWRTdGF0cy5TdGF0QnVja2V0QgTw5B1aGoEC",
            "CgpTdGF0QnVja2V0EhEKCWdhbWVfdGltZRgBIAEoAhINCgVraWxscxgCIAEo",
            "DRIOCgZkZWF0aHMYAyABKA0SDwoHYXNzaXN0cxgEIAEoDRISCgpleHBlcmll",
            "bmNlGAUgASgNEhEKCWxhc3RfaGl0cxgGIAEoDRIOCgZkZW5pZXMYByABKA0S",
            "EQoJbmV0X3dvcnRoGAggASgNEhEKCWlkbGVfdGltZRgJIAEoAhIXCg9jb21t",
            "YW5kc19pc3N1ZWQYCiABKA0SGwoTc2VudHJ5X3dhcmRzX3BsYWNlZBgLIAEo",
            "DRIdChVvYnNlcnZlcl93YXJkc19wbGFjZWQYDCABKA0isAUKGkNNc2dTdGVh",
            "bUxlYXJuTWF0Y2hTdGF0ZVY1EhEKCWdhbWVfdGltZRgBIAEoAhI8Cg1yYWRp",
            "YW50X3N0YXRlGAIgASgLMiUuQ01zZ1N0ZWFtTGVhcm5NYXRjaFN0YXRlVjUu",
            "VGVhbVN0YXRlEjkKCmRpcmVfc3RhdGUYAyABKAsyJS5DTXNnU3RlYW1MZWFy",
            "bk1hdGNoU3RhdGVWNS5UZWFtU3RhdGUayAEKC1BsYXllclN0YXRlEg8KB2hl",
            "cm9faWQYASABKAUSEQoJbmV0X3dvcnRoGAIgASgNEg0KBWxldmVsGAMgASgN",
            "Eg4KBmRlYXRocxgEIAEoDRIUCgxyZXNwYXduX3RpbWUYBSABKA0SEwoLaGFz",
            "X2J1eWJhY2sYBiABKAgSEQoJaGFzX2FlZ2lzGAcgASgIEhIKCmhhc19yYXBp",
            "ZXIYCCABKAgSEAoIZGlzdGFuY2UYCSABKA0SEgoKaGVyb19mYWNldBgKIAEo",
            "DRq6AgoJVGVhbVN0YXRlEgwKBHRlYW0YASABKA0SRAoNcGxheWVyX3N0YXRl",
            "cxgCIAMoCzInLkNNc2dTdGVhbUxlYXJuTWF0Y2hTdGF0ZVY1LlBsYXllclN0",
            "YXRlQgTw5B0FEh4KEHRvd2VyX2hlYWx0aF9wY3QYAyADKA1CBPDkHQsSIQoT",
            "YmFycmFja3NfaGVhbHRoX3BjdBgEIAMoDUIE8OQdBhIaChJhbmNpZW50X2hl",
            "YWx0aF9wY3QYBSABKA0SFgoOZ2x5cGhfY29vbGRvd24YBiABKA0SDQoFa2ls",
            "bHMYByABKA0SGwoTY3JlZXBfZGlzdGFuY2Vfc2FmZRgIIAEoDRIaChJjcmVl",
            "cF9kaXN0YW5jZV9taWQYCSABKA0SGgoSY3JlZXBfZGlzdGFuY2Vfb2ZmGAog",
            "ASgNIlMKHENNc2dTdGVhbUxlYXJuSXRlbVB1cmNoYXNlVjcSEwoHaXRlbV9p",
            "ZBgBIAEoBToCLTESHgoQcHVyY2hhc2VfaGlzdG9yeRgCIAMoBUIE8OQdMiJx",
            "CiJDTXNnU3RlYW1MZWFyblByZUdhbWVJdGVtUHVyY2hhc2VzEhYKCGl0ZW1f",
            "aWRzGAEgAygFQgTw5B0KEhcKD2lzX3JhZGlhbnRfdGVhbRgCIAEoDRIaChJp",
            "c191c2luZ19kb3RhX3BsdXMYAyABKAgiXgohQ01zZ1N0ZWFtTGVhcm5QcmVH",
            "YW1lSXRlbVB1cmNoYXNlEh4KEHB1cmNoYXNlX2hpc3RvcnkYASADKAVCBPDk",
            "HQoSGQoHaXRlbV9pZBgCIAEoBToCLTFCBPDkHQoiqQEKI0NNc2dTdGVhbUxl",
            "YXJuTmV1dHJhbEl0ZW1QdXJjaGFzZVY0EgwKBHRpZXIYASABKA0SHQoPdHJp",
            "bmtldF9vcHRpb25zGAIgAygFQgTw5B0EEiEKE2VuaGFuY2VtZW50X29wdGlv",
            "bnMYAyADKAVCBPDkHQQSFgoKdHJpbmtldF9pZBgEIAEoBToCLTESGgoOZW5o",
            "YW5jZW1lbnRfaWQYBSABKAU6Ai0xIoQBChpDTXNnU3RlYW1MZWFybkFiaWxp",
            "dHlTa2lsbBIWCgphYmlsaXR5X2lkGAEgASgFOgItMRIfChFza2lsbGVkX2Fi",
            "aWxpdGllcxgCIAMoBUIE8OQdHhIRCglnYW1lX3RpbWUYAyABKAISGgoSaXNf",
            "dXNpbmdfZG90YV9wbHVzGAQgASgIIs8BChtDTXNnU3RlYW1MZWFybldhcmRQ",
            "bGFjZW1lbnQSNwoId2FyZF9sb2MYASABKAsyJS5DTXNnU3RlYW1MZWFybldh",
            "cmRQbGFjZW1lbnQuTG9jYXRpb24SRwoSZXhpc3Rpbmdfd2FyZF9sb2NzGAIg",
            "AygLMiUuQ01zZ1N0ZWFtTGVhcm5XYXJkUGxhY2VtZW50LkxvY2F0aW9uQgTw",
            "5B0GEgwKBHRlYW0YAyABKA0aIAoITG9jYXRpb24SCQoBeBgBIAEoAhIJCgF5",
            "GAIgASgCIpsCCh5DTXNnU3RlYW1MZWFyblBsYXllck1hdGNoU3RhdGUSEQoJ",
            "bmV0X3dvcnRoGAEgASgNEg0KBWxldmVsGAIgASgNEg4KBmRlYXRocxgDIAEo",
            "DRIUCgxyZXNwYXduX3RpbWUYBCABKA0SEwoLaGFzX2J1eWJhY2sYBSABKAgS",
            "EQoJaGFzX2FlZ2lzGAYgASgIEhIKCmhhc19yYXBpZXIYByABKAgSFgoOdGVh",
            "bV9uZXRfd29ydGgYCCABKA0SHAoUZW5lbXlfdGVhbV9uZXRfd29ydGgYCSAB",
            "KA0SEgoKdGVhbV9raWxscxgKIAEoDRIYChBlbmVteV90ZWFtX2tpbGxzGAsg",
            "ASgNEhEKCWdhbWVfdGltZRgMIAEoAiI0ChlDTXNnU2lnbk91dE11ZXJ0YU1p",
            "bmlnYW1lEhcKD2V2ZW50X2dhbWVfZGF0YRgBIAEoDCK9AQoTQ01zZ1NpZ25P",
            "dXRNYXBTdGF0cxIsCgdwbGF5ZXJzGAEgAygLMhsuQ01zZ1NpZ25PdXRNYXBT",
            "dGF0cy5QbGF5ZXISKwoMZ2xvYmFsX3N0YXRzGAIgASgLMhUuQ01zZ01hcFN0",
            "YXRzU25hcHNob3QaSwoGUGxheWVyEhIKCmFjY291bnRfaWQYASABKA0SLQoO",
            "cGVyc29uYWxfc3RhdHMYAiABKAsyFS5DTXNnTWFwU3RhdHNTbmFwc2hvdCJl",
            "ChpDTXNnU2VydmVyVG9HQ05ld0Jsb29tR2lmdBIQCghkZWZpbmRleBgBIAEo",
            "DRIZChFnaWZ0ZXJfYWNjb3VudF9pZBgCIAEoDRIaChJ0YXJnZXRfYWNjb3Vu",
            "dF9pZHMYAyADKA0ijwEKIkNNc2dTZXJ2ZXJUb0dDTmV3Qmxvb21HaWZ0UmVz",
            "cG9uc2USSwoGcmVzdWx0GAEgASgOMhkuRU5ld0Jsb29tR2lmdGluZ1Jlc3Bv",
            "bnNlOiBrRU5ld0Jsb29tR2lmdGluZ19Vbmtub3duRmFpbHVyZRIcChRyZWNl",
            "aXZlZF9hY2NvdW50X2lkcxgCIAMoDSLCAQoUQ01zZ1NpZ25PdXRPdmVyd29y",
            "bGQSLQoHcGxheWVycxgBIAMoCzIcLkNNc2dTaWduT3V0T3ZlcndvcmxkLlBs",
            "YXllchIoCghldmVudF9pZBgCIAEoDjIHLkVFdmVudDoNRVZFTlRfSURfTk9O",
            "RRpRCgZQbGF5ZXISEgoKYWNjb3VudF9pZBgBIAEoDRIUCgxvdmVyd29ybGRf",
            "aWQYAiABKA0SHQoVZGVzaXJlZF90b2tlbl9yZXdhcmRzGAMgAygNIr4BChVD",
            "TXNnU2lnbk91dENyYWZ0d29ya3MSLgoHcGxheWVycxgBIAMoCzIdLkNNc2dT",
            "aWduT3V0Q3JhZnR3b3Jrcy5QbGF5ZXISKAoIZXZlbnRfaWQYAiABKA4yBy5F",
            "RXZlbnQ6DUVWRU5UX0lEX05PTkUaSwoGUGxheWVyEhIKCmFjY291bnRfaWQY",
            "ASABKA0SLQoKY29tcG9uZW50cxgCIAEoCzIZLkNNc2dDcmFmdHdvcmtzQ29t",
            "cG9uZW50cyrGAQoaRVBvb3JOZXR3b3JrQ29uZGl0aW9uc1R5cGUSIQoda19F",
            "UG9vck5ldHdvcmtDb25kaXRpb25zX05vbmUQABIkCiBrX0VQb29yTmV0d29y",
            "a0NvbmRpdGlvbnNfVW5rbm93bhABEisKJ2tfRVBvb3JOZXR3b3JrQ29uZGl0",
            "aW9uc19NYXNzRGlzY29ubmVjdBACEjIKLmtfRVBvb3JOZXR3b3JrQ29uZGl0",
            "aW9uc19FeGNlc3NCYWRRb3NJbnRlcnZhbHMQA0IVqgISU3RlYW0uUHJvdG9z",
            "LkRvdGEy"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Steam.Protos.Dota2.SteammessagesReflection.Descriptor, global::Steam.Protos.Dota2.ValveextensionsReflection.Descriptor, global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor, global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor, global::Steam.Protos.Dota2.EconGcmessagesReflection.Descriptor, global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor, global::Steam.Protos.Dota2.NetworkConnectionReflection.Descriptor, global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor, global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor, global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor, global::Steam.Protos.Dota2.DotaGcmessagesCommonCraftworksReflection.Descriptor, global::Steam.Protos.Dota2.GcsdkGcmessagesReflection.Descriptor, global::Steam.Protos.Dota2.SteammessagesSteamlearnSteamworkssdkReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Steam.Protos.Dota2.EPoorNetworkConditionsType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPoorNetworkConditions), global::Steam.Protos.Dota2.CMsgPoorNetworkConditions.Parser, new[]{ "DetectionType", "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPoorNetworkConditions.Types.Player), global::Steam.Protos.Dota2.CMsgPoorNetworkConditions.Types.Player.Parser, new[]{ "AccountId", "DisconnectReason", "NumBadIntervals", "PeakLossPct" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameserverCrash), global::Steam.Protos.Dota2.CMsgGameserverCrash.Parser, new[]{ "MatchId", "LobbyId", "GameState", "SentinelSaveTime", "CustomGameId", "TournamentId", "ServerSteamId", "ServerPublicIpAddr", "ServerPort", "ServerCluster", "Pid", "Engine" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgConnectedPlayers), global::Steam.Protos.Dota2.CMsgConnectedPlayers.Parser, new[]{ "ConnectedPlayers", "DisconnectedPlayers", "GameState", "FirstBloodHappened", "PoorNetworkConditions", "SendReason", "RadiantKills", "DireKills", "RadiantLead", "BuildingState", "PlayerDraft" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.SendReason) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player), global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player.Parser, new[]{ "SteamId", "HeroId", "LeaverState", "DisconnectReason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.PlayerDraft), global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.PlayerDraft.Parser, new[]{ "SteamId", "Team", "TeamSlot" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameServerInfo), global::Steam.Protos.Dota2.CMsgGameServerInfo.Parser, new[]{ "ServerPublicIpAddr", "ServerPrivateIpAddr", "ServerPort", "ServerTvPort", "AssignedServerTvPort", "LegacyServerSteamdatagramAddress", "ServerKey", "ServerHibernation", "ServerType", "ServerRegion", "ServerLoadavg", "ServerTvBroadcastTime", "ServerGameTime", "ServerRelayConnectedSteamId", "RelaySlotsMax", "RelaysConnected", "RelayClientsConnected", "RelayedGameServerSteamId", "ParentRelayCount", "TvSecretCode", "ServerVersion", "ServerCluster", "AllowCustomGames", "BuildVersion", "SrcdsInstance", "DevForceServerType" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.ServerType), typeof(global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.CustomGames) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLeaverDetected), global::Steam.Protos.Dota2.CMsgLeaverDetected.Parser, new[]{ "SteamId", "LeaverStatus", "LeaverState", "ServerCluster", "DisconnectReason", "PoorNetworkConditions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLeaverDetectedResponse), global::Steam.Protos.Dota2.CMsgLeaverDetectedResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAFantasyFinalPlayerStats), global::Steam.Protos.Dota2.CMsgDOTAFantasyFinalPlayerStats.Parser, new[]{ "Stats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAFantasyLivePlayerStats), global::Steam.Protos.Dota2.CMsgDOTAFantasyLivePlayerStats.Parser, new[]{ "Stats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCRealtimeStats), global::Steam.Protos.Dota2.CMsgServerToGCRealtimeStats.Parser, new[]{ "Delayed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerRealtimeStatsStartStop), global::Steam.Protos.Dota2.CMsgGCToServerRealtimeStatsStartStop.Parser, new[]{ "Delayed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerUpdateSteamBroadcasting), global::Steam.Protos.Dota2.CMsgGCToServerUpdateSteamBroadcasting.Parser, new[]{ "Active" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutGameplayStats), global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Parser, new[]{ "Teams" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CPlayer), global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CPlayer.Parser, new[]{ "SteamId", "PlayerSlot", "HeroId", "TimedPlayerStats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CTeam), global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CTeam.Parser, new[]{ "IsWinningTeam", "IsRadiantTeam", "TimedTeamStats", "Players" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut), global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Parser, new[]{ "MatchId", "Duration", "GoodGuysWin", "Date", "Teams", "TowerStatus", "BarracksStatus", "Cluster", "ServerAddr", "FirstBloodTime", "EventScore", "FantasyStats", "PlayerStrangeCountAdjustments", "AutomaticSurrender", "ServerVersion", "PoorNetworkConditions", "AdditionalMsgs", "SocialFeedEvents", "AverageNetworthDelta", "CustomGameData", "MatchFlags", "TeamScores", "PreGameDuration", "EventGameLeaderboardEntries", "WardPlacements", "GameplayStats", "ExtraMessages", "WinningTeam", "NormalizedWinProbabilityDiff", "MatchTrackedStats" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam), global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Parser, new[]{ "Players", "TeamTrackedStats" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer), global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Parser, new[]{ "SteamId", "HeroId", "Items", "ItemPurchaseTimes", "Gold", "Kills", "Deaths", "Assists", "LeaverStatus", "LastHits", "Denies", "GoldPerMin", "XpPerMinute", "GoldSpent", "Level", "ScaledHeroDamage", "ScaledTowerDamage", "ScaledHeroHealing", "TimeLastSeen", "SupportAbilityValue", "PartyId", "ClaimedFarmGold", "SupportGold", "ClaimedDenies", "ClaimedMisses", "Misses", "NetWorth", "HeroDamage", "TowerDamage", "HeroHealing", "AbilityUpgrades", "AdditionalUnitsInventory", "PermanentBuffs", "CustomGameData", "MatchPlayerFlags", "TalentAbilityIds", "HeroPickOrder", "HeroWasRandomed", "HeroWasDotaPlusSuggestion", "Lane", "IsUsingPlusGuide", "HeroDamageReceived", "HeroDamageDealt", "SecondsDead", "GoldLostToDeath", "CommandCount", "MouseClickCastCommandCount", "TeleportsUsed", "CavernCrawlPreferredMapVariant", "BountyRunes", "OutpostsCaptured", "Dewards", "WardsPlaced", "CampsStacked", "PlayerSlot", "PredictedPosition", "LaneOutcomes", "FriendlyT1DestroyedTime", "EnemyT1DestroyedTime", "FriendlyRoshanKills", "EnemyRoshanKills", "PowerRunes", "WaterRunes", "StunDuration", "TeamNumber", "TeamSlot", "TimePurchasedShard", "TimePurchasedAghs", "AbilityDraftAbilities", "PlayerTrackedStats", "PredictedRank", "SelectedFacet", "EnhancementLevel" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.CCustomGameData), global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.CCustomGameData.Parser, new[]{ "DotaTeam", "Winner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived), global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived.Parser, new[]{ "PreReduction", "PostReduction", "DamageType" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CAdditionalSignoutMsg), global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CAdditionalSignoutMsg.Parser, new[]{ "Id", "Contents" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CSocialFeedMatchEvent), global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CSocialFeedMatchEvent.Parser, new[]{ "AccountId", "Timestamp", "EventType", "GameTime", "ReplayTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CCustomGameData), global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CCustomGameData.Parser, new[]{ "PublishTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.EventGameLeaderboardEntry), global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.EventGameLeaderboardEntry.Parser, new[]{ "NameSuffix", "Score", "ExtraData1", "ExtraData2", "ExtraData3", "ExtraData4", "ExtraData5" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.WardPlacement), global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.WardPlacement.Parser, new[]{ "PlayerId", "TeamId", "PlacedTime", "BuildingState", "CreepState", "RoshanAlive", "PositionX", "PositionY" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutDraftInfo), global::Steam.Protos.Dota2.CMsgSignOutDraftInfo.Parser, new[]{ "RadiantCaptainAccountId", "DireCaptainAccountId", "PicksBans" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutBotInfo), global::Steam.Protos.Dota2.CMsgSignOutBotInfo.Parser, new[]{ "AllowCheats", "BotDifficultyRadiant", "CreatedLobby", "BotDifficultyDire" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutTextMuteInfo), global::Steam.Protos.Dota2.CMsgSignOutTextMuteInfo.Parser, new[]{ "TextMuteMessages" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutTextMuteInfo.Types.TextMuteMessage), global::Steam.Protos.Dota2.CMsgSignOutTextMuteInfo.Types.TextMuteMessage.Parser, new[]{ "Region", "CausedTextMute", "ChatMessage" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutPlayerStats), global::Steam.Protos.Dota2.CMsgSignOutPlayerStats.Parser, new[]{ "AccountId", "MatchId", "Rank", "HeroId", "Rampages", "TripleKills", "FirstBloodClaimed", "FirstBloodGiven", "CouriersKilled", "AegisesSnatched", "CheesesEaten", "CreepsStacked", "FightScore", "FarmScore", "SupportScore", "PushScore", "Kills", "Deaths", "Assists", "LastHits", "Denies", "Gpm", "Xppm", "NetWorth", "Damage", "Heals", "RapiersPurchased", "ObserverWardsPlaced", "WardsDestroyed", "LobbyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary), global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Parser, new[]{ "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication), global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication.Parser, new[]{ "AccountId", "Pings", "MaxPingsPerInterval", "TeammatePings", "MaxTeammatePingsPerInterval", "TeamChatMessages", "AllChatMessages", "ChatWheelMessages", "Pauses", "Unpauses", "LinesDrawn", "VoiceChatSeconds", "ChatMutes", "VoiceMutes", "PingDetails", "CommsBlocksSolo", "CommsBlocksMass", "ChatLog" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication.Types.PingDetail), global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication.Types.PingDetail.Parser, new[]{ "Type", "Count" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignoutResponse), global::Steam.Protos.Dota2.CMsgGameMatchSignoutResponse.Parser, new[]{ "MatchId", "ReplaySalt", "Leagueid", "MetadataPrivateKey", "MatchDetails", "PlayersMetadata", "MvpData", "OwPrivateKey", "OwSalt", "OwReplayId", "OverworldRewards" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignoutResponse.Types.PlayerMetadata), global::Steam.Protos.Dota2.CMsgGameMatchSignoutResponse.Types.PlayerMetadata.Parser, new[]{ "HeroId", "AvgKillsX16", "AvgDeathsX16", "AvgAssistsX16", "AvgGpmX16", "AvgXpmX16", "BestKillsX16", "BestAssistsX16", "BestGpmX16", "BestXpmX16", "WinStreak", "BestWinStreak", "GamesPlayed" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOutPermissionRequest), global::Steam.Protos.Dota2.CMsgGameMatchSignOutPermissionRequest.Parser, new[]{ "ServerVersion", "LocalAttempt", "TotalAttempt", "SecondsWaited" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOutPermissionResponse), global::Steam.Protos.Dota2.CMsgGameMatchSignOutPermissionResponse.Parser, new[]{ "PermissionGranted", "AbandonSignout", "RetryDelaySeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOutEventGameData), global::Steam.Protos.Dota2.CMsgGameMatchSignOutEventGameData.Parser, new[]{ "EventId", "GameName", "MapName", "EventGameData", "StartTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOutPerfData), global::Steam.Protos.Dota2.CMsgGameMatchSignOutPerfData.Parser, new[]{ "AverageFrameTime", "MaxFrameTime", "ServerAverageFrameTime", "ServerMaxFrameTime", "AverageComputeTime", "MaxComputeTime", "AverageClientTickTime", "MaxClientTickTime", "AverageClientSimulateTime", "MaxClientSimulateTime", "AverageOutputTime", "MaxOutputTime", "AverageWaitForRenderingToCompleteTime", "MaxWaitForRenderingToCompleteTime", "AverageSwapTime", "MaxSwapTime", "AverageFrameUpdateTime", "MaxFrameUpdateTime", "AverageIdleTime", "MaxIdleTime", "AverageInputProcessingTime", "MaxInputProcessingTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameMatchSignOutBanData), global::Steam.Protos.Dota2.CMsgGameMatchSignOutBanData.Parser, new[]{ "HeroBans", "HeroBanVotes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate), global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Parser, new[]{ "TournamentId", "TournamentGameId", "Duration", "HltvDelay", "TeamGood", "TeamBad", "RoshanRespawnTimer", "LeagueId", "MatchId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team), global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Parser, new[]{ "Players", "Score", "TowerState", "BarracksState", "HeroPicks", "HeroBans" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player), global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Parser, new[]{ "PlayerSlot", "PlayerName", "HeroName", "HeroId", "Kills", "Deaths", "Assists", "LastHits", "Denies", "Gold", "Level", "GoldPerMin", "XpPerMin", "UltimateState", "UltimateCooldown", "Item0", "Item1", "Item2", "Item3", "Item4", "Item5", "RespawnTimer", "AccountId", "PositionX", "PositionY", "NetWorth", "Abilities" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.DOTAUltimateState) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.HeroAbility), global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.HeroAbility.Parser, new[]{ "AbilityId", "AbilityLevel" }, null, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResources), global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResources.Parser, new[]{ "AccountIds", "RankTypes", "LobbyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResourcesResponse), global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResourcesResponse.Parser, new[]{ "Results" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResourcesResponse.Types.Result), global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResourcesResponse.Types.Result.Parser, new[]{ "AccountId", "Rank", "RankCalibrated", "LowPriority", "IsNewPlayer", "IsGuidePlayer", "CommLevel", "BehaviorLevel", "Wins", "Losses", "SmurfCategory", "CommScore", "BehaviorScore", "RankUncertainty" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAPlayerFailedToConnect), global::Steam.Protos.Dota2.CMsgDOTAPlayerFailedToConnect.Parser, new[]{ "FailedLoaders", "AbandonedLoaders" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToRelayConnect), global::Steam.Protos.Dota2.CMsgGCToRelayConnect.Parser, new[]{ "SourceTvPublicAddr", "SourceTvPrivateAddr", "SourceTvPort", "GameServerSteamId", "ParentCount", "TvUniqueSecretCode", "SourceTvSteamid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCGCToLANServerRelayConnect), global::Steam.Protos.Dota2.CMsgGCGCToLANServerRelayConnect.Parser, new[]{ "RelaySteamid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCBanStatusRequest), global::Steam.Protos.Dota2.CMsgGCBanStatusRequest.Parser, new[]{ "AccountId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCBanStatusResponse), global::Steam.Protos.Dota2.CMsgGCBanStatusResponse.Parser, new[]{ "Result", "LowPriority", "TextChatBanned", "VoiceChatBanned" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgTournamentItemEvent), global::Steam.Protos.Dota2.CMsgTournamentItemEvent.Parser, new[]{ "KillerAccountId", "VictimAccountId", "EventType", "TvDelay", "DotaTime", "ReplayTime", "LootList", "EventTeam", "MultiKillCount", "WinnerScore", "LoserScore", "HeroStatues" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgTournamentItemEventResponse), global::Steam.Protos.Dota2.CMsgTournamentItemEventResponse.Parser, new[]{ "EventType", "ViewersGranted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgTeamFanfare), global::Steam.Protos.Dota2.CMsgTeamFanfare.Parser, new[]{ "MatchId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgResponseTeamFanfare), global::Steam.Protos.Dota2.CMsgResponseTeamFanfare.Parser, new[]{ "FanfareGoodguys", "FanfareBadguys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAAwardEventPoints), global::Steam.Protos.Dota2.CMsgDOTAAwardEventPoints.Parser, new[]{ "AwardPoints", "MatchId", "EventId", "Timestamp", "AuditAction" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAAwardEventPoints.Types.AwardPoints), global::Steam.Protos.Dota2.CMsgDOTAAwardEventPoints.Types.AwardPoints.Parser, new[]{ "AccountId", "Points", "PremiumPoints", "TradeBanTime", "EligibleForPeriodicAdjustment", "PointCapPeriodicResourceId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerPingRequest), global::Steam.Protos.Dota2.CMsgGCToServerPingRequest.Parser, new[]{ "RequestId", "RequestTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerPingResponse), global::Steam.Protos.Dota2.CMsgGCToServerPingResponse.Parser, new[]{ "RequestId", "RequestTime", "Cluster" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchConnectionStats), global::Steam.Protos.Dota2.CMsgServerToGCMatchConnectionStats.Parser, new[]{ "MatchId", "RegionId", "LeagueId", "Players", "ClusterId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchConnectionStats.Types.Player), global::Steam.Protos.Dota2.CMsgServerToGCMatchConnectionStats.Types.Player.Parser, new[]{ "AccountId", "Ip", "AvgPingMs", "PacketLoss", "PingDeviation", "FullResends" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerGCUpdateSpectatorCount), global::Steam.Protos.Dota2.CMsgServerGCUpdateSpectatorCount.Parser, new[]{ "SpectatorCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSerializedCombatLog), global::Steam.Protos.Dota2.CSerializedCombatLog.Parser, new[]{ "Version", "Dictionary", "Entries" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary), global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary.Parser, new[]{ "Strings" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary.Types.DictString), global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary.Types.DictString.Parser, new[]{ "Id", "Value" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions), global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Parser, new[]{ "Records" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.PredictionItem), global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.PredictionItem.Parser, new[]{ "ItemId", "ItemDef" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.Record), global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.Record.Parser, new[]{ "AccountId", "ItemIds", "PredictionItems" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCRequestStatus), global::Steam.Protos.Dota2.CMsgServerToGCRequestStatus.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCRequestStatus_Response), global::Steam.Protos.Dota2.CMsgServerToGCRequestStatus_Response.Parser, new[]{ "Response" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerEvaluateToxicChat), global::Steam.Protos.Dota2.CMsgGCToServerEvaluateToxicChat.Parser, new[]{ "TargetAccountId", "ReporterAccountId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCEvaluateToxicChat), global::Steam.Protos.Dota2.CMsgServerToGCEvaluateToxicChat.Parser, new[]{ "TargetAccountId", "ReporterAccountId", "MatchId", "Timestamp", "Line" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCEvaluateToxicChatResponse), global::Steam.Protos.Dota2.CMsgServerToGCEvaluateToxicChatResponse.Parser, new[]{ "TargetAccountId", "ReporterAccountId", "BanReason", "BanDuration", "ToxicityScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutAssassinMiniGameInfo), global::Steam.Protos.Dota2.CMsgSignOutAssassinMiniGameInfo.Parser, new[]{ "WinningPlayers", "LosingPlayers", "ArcanaOwners", "AssassinWon", "TargetHeroId", "ContractCompleted", "ContractCompleteTime", "PaIsRadiant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCKillSummaries), global::Steam.Protos.Dota2.CMsgServerToGCKillSummaries.Parser, new[]{ "IngameeventId", "Summaries" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCKillSummaries.Types.KillSummary), global::Steam.Protos.Dota2.CMsgServerToGCKillSummaries.Types.KillSummary.Parser, new[]{ "KillerHeroId", "VictimHeroId", "KillCount" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCLockCharmTrading), global::Steam.Protos.Dota2.CMsgServerToGCLockCharmTrading.Parser, new[]{ "AccountId", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge), global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Parser, new[]{ "AccountId", "Completed", "Rerolled", "MatchId", "HeroId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge), global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge.Parser, new[]{ "EventId", "SlotId", "SequenceId", "Progress", "ChallengeRank" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCRerollPlayerChallenge), global::Steam.Protos.Dota2.CMsgServerToGCRerollPlayerChallenge.Parser, new[]{ "AccountId", "RerollMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSpendWager), global::Steam.Protos.Dota2.CMsgSpendWager.Parser, new[]{ "Players", "EventId", "Timestamp", "MatchId", "ServerSteamId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSpendWager.Types.Player), global::Steam.Protos.Dota2.CMsgSpendWager.Types.Player.Parser, new[]{ "AccountId", "Wager", "WagerTokenItemId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutXPCoins), global::Steam.Protos.Dota2.CMsgSignOutXPCoins.Parser, new[]{ "Players", "EventId", "MatchId", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutXPCoins.Types.Player), global::Steam.Protos.Dota2.CMsgSignOutXPCoins.Types.Player.Parser, new[]{ "AccountId", "XpGained", "CoinsSpent", "WagerTokenItemId", "RankWager", "WagerStreak" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutBounties), global::Steam.Protos.Dota2.CMsgSignOutBounties.Parser, new[]{ "Bounties", "EventId", "MatchId", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutBounties.Types.Bounty), global::Steam.Protos.Dota2.CMsgSignOutBounties.Types.Bounty.Parser, new[]{ "IssuerAccountId", "CompleterAccountId", "TargetAccountId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutCommunityGoalProgress), global::Steam.Protos.Dota2.CMsgSignOutCommunityGoalProgress.Parser, new[]{ "EventId", "EventIncrements" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutCommunityGoalProgress.Types.EventGoalIncrement), global::Steam.Protos.Dota2.CMsgSignOutCommunityGoalProgress.Types.EventGoalIncrement.Parser, new[]{ "EventGoalId", "IncrementAmount" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCCloseCompendiumInGamePredictionVoting), global::Steam.Protos.Dota2.CMsgServerToGCCloseCompendiumInGamePredictionVoting.Parser, new[]{ "MatchId", "HltvDelay", "LeagueId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse), global::Steam.Protos.Dota2.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults), global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults.Parser, new[]{ "MatchId", "Results", "LeagueId", "LeagueNodeId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults.Types.PredictionResult), global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults.Types.PredictionResult.Parser, new[]{ "PredictionId", "PredictionValue", "PredictionValueIsMask" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCCompendiumChosenInGamePredictions), global::Steam.Protos.Dota2.CMsgServerToGCCompendiumChosenInGamePredictions.Parser, new[]{ "MatchId", "PredictionsChosen", "LeagueId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCCompendiumChosenInGamePredictions.Types.Prediction), global::Steam.Protos.Dota2.CMsgServerToGCCompendiumChosenInGamePredictions.Types.Prediction.Parser, new[]{ "PredictionId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToGCCompendiumInGamePredictionResults), global::Steam.Protos.Dota2.CMsgGCToGCCompendiumInGamePredictionResults.Parser, new[]{ "Results" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory), global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Parser, new[]{ "MatchId", "Mmr", "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.ItemPurchase), global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.ItemPurchase.Parser, new[]{ "Item", "Gold", "NetWorth", "GameTime", "InventoryItems", "TalentsSkilled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.Player), global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.Player.Parser, new[]{ "PlayerSlot", "AccountId", "HeroId", "AlliedHeroIds", "EnemyHeroIds", "ItemPurchases", "Lane", "IsWinner" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory), global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Parser, new[]{ "MatchId", "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.ItemEquip), global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.ItemEquip.Parser, new[]{ "Item", "GameTime", "InventoryItems", "TalentsSkilled", "AvailableNeutralItems" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.Player), global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.Player.Parser, new[]{ "AccountId", "AlliedHeroIds", "EnemyHeroIds", "ItemEquips", "IsWinner" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory), global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Parser, new[]{ "MatchId", "RadiantWon", "Mmr", "MatchStates" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.PlayerState), global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.PlayerState.Parser, new[]{ "HeroId", "NetWorth", "Level", "Deaths", "RespawnTime", "HasBuyback", "HasAegis", "HasRapier", "Distance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState), global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState.Parser, new[]{ "Team", "PlayerStates", "TowerHealthPct", "BarracksHealthPct", "AncientHealthPct", "GlyphCooldown", "Kills", "CreepDistanceSafe", "CreepDistanceMid", "CreepDistanceOff" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState), global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState.Parser, new[]{ "GameTime", "RadiantState", "DireState" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchStateSteamMLEntry), global::Steam.Protos.Dota2.CMsgMatchStateSteamMLEntry.Parser, new[]{ "MatchState", "Mmr", "RadiantWon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLaneSelectionSteamMLEntry), global::Steam.Protos.Dota2.CMsgLaneSelectionSteamMLEntry.Parser, new[]{ "HeroIds", "Lanes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAbilitySelectionSteamMLEntry), global::Steam.Protos.Dota2.CMsgAbilitySelectionSteamMLEntry.Parser, new[]{ "Mmr", "HeroId", "EnemyHeroIds", "Lane", "Abilities", "SelectedAbility" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgItemPurchasePregameSteamMLEntry), global::Steam.Protos.Dota2.CMsgItemPurchasePregameSteamMLEntry.Parser, new[]{ "Mmr", "Lane", "Balance", "HeroId", "AlliedHeroIds", "EnemyHeroIds", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgItemPurchaseSteamMLEntry), global::Steam.Protos.Dota2.CMsgItemPurchaseSteamMLEntry.Parser, new[]{ "Mmr", "Lane", "HeroId", "AlliedHeroIds", "EnemyHeroIds", "Items", "ItemsToBePurchased" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgItemPurchaseSequenceSteamMLEntry), global::Steam.Protos.Dota2.CMsgItemPurchaseSequenceSteamMLEntry.Parser, new[]{ "Mmr", "Lane", "HeroId", "AlliedHeroIds", "EnemyHeroIds", "Items", "ItemToBePurchased" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActive), global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActive.Parser, new[]{ "EventId", "AccountId", "PreferredMapVariant", "HeroId", "TurboMode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCPlayerChallengeHistory), global::Steam.Protos.Dota2.CMsgServerToGCPlayerChallengeHistory.Parser, new[]{ "MatchId", "AverageRank", "ChallengeRecords" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCPlayerChallengeHistory.Types.PlayerChallenge), global::Steam.Protos.Dota2.CMsgServerToGCPlayerChallengeHistory.Types.PlayerChallenge.Parser, new[]{ "AccountId", "ChallengeType", "ChallengeId1", "ChallengeId2", "ProgressValueStart", "ProgressValueEnd", "TeamWon", "AuditData", "HeroId", "RankCompleted" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActiveResponse), global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActiveResponse.Parser, new[]{ "Result", "MapVariant", "PotentialWinnings", "MapResults", "PotentialPlusShardWinnings" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActiveResponse.Types.MapResults), global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActiveResponse.Types.MapResults.Parser, new[]{ "PathIdCompleted", "RoomIdClaimed" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgNeutralItemStats), global::Steam.Protos.Dota2.CMsgNeutralItemStats.Parser, new[]{ "NeutralItems" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgNeutralItemStats.Types.NeutralItem), global::Steam.Protos.Dota2.CMsgNeutralItemStats.Types.NeutralItem.Parser, new[]{ "ItemId", "TimeDropped", "Team", "TimeLastEquipped", "TimeLastUnequipped", "DurationEquipped" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerLobbyHeroBanRates), global::Steam.Protos.Dota2.CMsgGCToServerLobbyHeroBanRates.Parser, new[]{ "BanData" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerLobbyHeroBanRates.Types.HeroBanEntry), global::Steam.Protos.Dota2.CMsgGCToServerLobbyHeroBanRates.Types.HeroBanEntry.Parser, new[]{ "HeroId", "BanCount", "PickCount" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress), global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Parser, new[]{ "PlayerContracts" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.CompletedGuildEventContracts), global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.CompletedGuildEventContracts.Parser, new[]{ "GuildId", "EventId", "Contracts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.PlayerContract), global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.PlayerContract.Parser, new[]{ "AccountId", "CompletedContracts" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutGuildChallengeProgress), global::Steam.Protos.Dota2.CMsgSignOutGuildChallengeProgress.Parser, new[]{ "GuildChallengesProgresses" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutGuildChallengeProgress.Types.ChallengeProgress), global::Steam.Protos.Dota2.CMsgSignOutGuildChallengeProgress.Types.ChallengeProgress.Parser, new[]{ "GuildId", "EventId", "ChallengeInstanceId", "ChallengeInstanceTimestamp", "ChallengePeriodSerial", "Progress", "ChallengeParameter" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutMVPStats), global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Parser, new[]{ "MatchId", "GameMode", "WinningTeam", "GameTime", "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player), global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player.Parser, new[]{ "TeamId", "TeamNetworthRank", "AccountId", "PlayerSlot", "Rank", "HeroId", "Role", "Kills", "Deaths", "Assists", "Xp", "NetWorth", "SupportGoldSpent", "WardsPlaced", "WardsSpottedForDewarding", "CampsStacked", "LastHits", "Denies", "BuildingDamage", "OtherDamage", "TripleKills", "Rampages", "FirstBlood", "KillEaterEvents", "HighestKillstreak" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player.Types.KillEaterEvent), global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player.Types.KillEaterEvent.Parser, new[]{ "EventType", "Amount" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContracts), global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContracts.Parser, new[]{ "AccountIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse), global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Parser, new[]{ "PlayerContracts" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.ContractDetails), global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.ContractDetails.Parser, new[]{ "ContractId", "ChallengeInstanceId", "ChallengeParameter", "ContractStars", "ContractSlot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.Player), global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.Player.Parser, new[]{ "AccountId", "GuildId", "EventId", "Contracts" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchDiretideCandy), global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Parser, new[]{ "PlayerCandyData", "EventId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.CandyDetails), global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.CandyDetails.Parser, new[]{ "Amount", "Audit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.PlayerCandy), global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.PlayerCandy.Parser, new[]{ "AccountId", "CandyAmount", "ConsumesPeriodicResource", "CandyBreakdown" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerCheerData), global::Steam.Protos.Dota2.CMsgGCToServerCheerData.Parser, new[]{ "CheerTypes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerCheerData.Types.CheerTypeCount), global::Steam.Protos.Dota2.CMsgGCToServerCheerData.Types.CheerTypeCount.Parser, new[]{ "CheerType", "CheerCount" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgCheerConfig), global::Steam.Protos.Dota2.CMsgCheerConfig.Parser, new[]{ "CheersEnabled", "IsValidLeagueId", "WindowDuration", "WindowBucketCount", "CrowdLevelPushTime", "CrowdLevelLow", "CrowdLevelMedium", "CrowdLevelHigh", "CheerScaleStart", "CheerScaleSpeed", "CheerScalePushMark", "CheerScalePullMark", "CheerScalePctOfMaxCpsClamp", "CheerScaleDampenerValue", "CheerScaleDampenerLerpTime", "CheerFactorBronze", "CheerFactorSilver", "CheerFactorGold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerCheerConfig), global::Steam.Protos.Dota2.CMsgGCToServerCheerConfig.Parser, new[]{ "CheerConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCGetCheerConfig), global::Steam.Protos.Dota2.CMsgServerToGCGetCheerConfig.Parser, new[]{ "LeagueId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCGetCheerConfigResponse), global::Steam.Protos.Dota2.CMsgServerToGCGetCheerConfigResponse.Parser, new[]{ "CheerConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerCheerScalesOverride), global::Steam.Protos.Dota2.CMsgGCToServerCheerScalesOverride.Parser, new[]{ "Scales" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerGetCheerState), global::Steam.Protos.Dota2.CMsgGCToServerGetCheerState.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgCheerTypeState), global::Steam.Protos.Dota2.CMsgCheerTypeState.Parser, new[]{ "CheerCounts", "MaxPerSecond", "CheerScale", "OverrideScale" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgCheerState), global::Steam.Protos.Dota2.CMsgCheerState.Parser, new[]{ "CheerTypes", "RadiantCrowdLevel", "DireCrowdLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCReportCheerState), global::Steam.Protos.Dota2.CMsgServerToGCReportCheerState.Parser, new[]{ "CheerConfig", "CheerState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroes), global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroes.Parser, new[]{ "AccountIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroesResponse), global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroesResponse.Parser, new[]{ "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroesResponse.Types.Player), global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroesResponse.Types.Player.Parser, new[]{ "AccountId", "Stickers" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfo), global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfo.Parser, new[]{ "AverageMmr", "RadiantWon", "Duration", "GameMode", "LobbyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoPlayer), global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoPlayer.Parser, new[]{ "AverageMmr", "TeamWon", "Duration", "GameMode", "LobbyType", "PlayerMmr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam), global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Parser, new[]{ "RadiantPlayers", "DirePlayers", "RadiantTeamWon" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player), global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player.Parser, new[]{ "PrematchMmr", "PrematchRankUncertainty", "PrematchBehaviorScore", "PrematchCommScore", "NumPlayersInParty" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnMatchHeroesV3), global::Steam.Protos.Dota2.CMsgSteamLearnMatchHeroesV3.Parser, new[]{ "RadiantHeroIds", "DireHeroIds", "RadiantLanes", "DireLanes", "RadiantHeroFacets", "DireHeroFacets", "RadiantPositions", "DirePositions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnMatchHeroV6), global::Steam.Protos.Dota2.CMsgSteamLearnMatchHeroV6.Parser, new[]{ "HeroId", "Facet", "HeroAndFacet", "Lane", "Position", "AlliedHeroAndFacet", "EnemyHeroAndFacet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnPlayerTimedStats), global::Steam.Protos.Dota2.CMsgSteamLearnPlayerTimedStats.Parser, new[]{ "StatBuckets" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnPlayerTimedStats.Types.StatBucket), global::Steam.Protos.Dota2.CMsgSteamLearnPlayerTimedStats.Types.StatBucket.Parser, new[]{ "GameTime", "Kills", "Deaths", "Assists", "Experience", "LastHits", "Denies", "NetWorth", "IdleTime", "CommandsIssued", "SentryWardsPlaced", "ObserverWardsPlaced" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5), global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Parser, new[]{ "GameTime", "RadiantState", "DireState" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.PlayerState), global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.PlayerState.Parser, new[]{ "HeroId", "NetWorth", "Level", "Deaths", "RespawnTime", "HasBuyback", "HasAegis", "HasRapier", "Distance", "HeroFacet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState), global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState.Parser, new[]{ "Team", "PlayerStates", "TowerHealthPct", "BarracksHealthPct", "AncientHealthPct", "GlyphCooldown", "Kills", "CreepDistanceSafe", "CreepDistanceMid", "CreepDistanceOff" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnItemPurchaseV7), global::Steam.Protos.Dota2.CMsgSteamLearnItemPurchaseV7.Parser, new[]{ "ItemId", "PurchaseHistory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnPreGameItemPurchases), global::Steam.Protos.Dota2.CMsgSteamLearnPreGameItemPurchases.Parser, new[]{ "ItemIds", "IsRadiantTeam", "IsUsingDotaPlus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnPreGameItemPurchase), global::Steam.Protos.Dota2.CMsgSteamLearnPreGameItemPurchase.Parser, new[]{ "PurchaseHistory", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnNeutralItemPurchaseV4), global::Steam.Protos.Dota2.CMsgSteamLearnNeutralItemPurchaseV4.Parser, new[]{ "Tier", "TrinketOptions", "EnhancementOptions", "TrinketId", "EnhancementId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnAbilitySkill), global::Steam.Protos.Dota2.CMsgSteamLearnAbilitySkill.Parser, new[]{ "AbilityId", "SkilledAbilities", "GameTime", "IsUsingDotaPlus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement), global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Parser, new[]{ "WardLoc", "ExistingWardLocs", "Team" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location), global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location.Parser, new[]{ "X", "Y" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSteamLearnPlayerMatchState), global::Steam.Protos.Dota2.CMsgSteamLearnPlayerMatchState.Parser, new[]{ "NetWorth", "Level", "Deaths", "RespawnTime", "HasBuyback", "HasAegis", "HasRapier", "TeamNetWorth", "EnemyTeamNetWorth", "TeamKills", "EnemyTeamKills", "GameTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutMuertaMinigame), global::Steam.Protos.Dota2.CMsgSignOutMuertaMinigame.Parser, new[]{ "EventGameData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutMapStats), global::Steam.Protos.Dota2.CMsgSignOutMapStats.Parser, new[]{ "Players", "GlobalStats" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutMapStats.Types.Player), global::Steam.Protos.Dota2.CMsgSignOutMapStats.Types.Player.Parser, new[]{ "AccountId", "PersonalStats" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCNewBloomGift), global::Steam.Protos.Dota2.CMsgServerToGCNewBloomGift.Parser, new[]{ "Defindex", "GifterAccountId", "TargetAccountIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCNewBloomGiftResponse), global::Steam.Protos.Dota2.CMsgServerToGCNewBloomGiftResponse.Parser, new[]{ "Result", "ReceivedAccountIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutOverworld), global::Steam.Protos.Dota2.CMsgSignOutOverworld.Parser, new[]{ "Players", "EventId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutOverworld.Types.Player), global::Steam.Protos.Dota2.CMsgSignOutOverworld.Types.Player.Parser, new[]{ "AccountId", "OverworldId", "DesiredTokenRewards" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutCraftworks), global::Steam.Protos.Dota2.CMsgSignOutCraftworks.Parser, new[]{ "Players", "EventId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSignOutCraftworks.Types.Player), global::Steam.Protos.Dota2.CMsgSignOutCraftworks.Types.Player.Parser, new[]{ "AccountId", "Components" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum EPoorNetworkConditionsType {
    [pbr::OriginalName("k_EPoorNetworkConditions_None")] KEpoorNetworkConditionsNone = 0,
    [pbr::OriginalName("k_EPoorNetworkConditions_Unknown")] KEpoorNetworkConditionsUnknown = 1,
    [pbr::OriginalName("k_EPoorNetworkConditions_MassDisconnect")] KEpoorNetworkConditionsMassDisconnect = 2,
    [pbr::OriginalName("k_EPoorNetworkConditions_ExcessBadQosIntervals")] KEpoorNetworkConditionsExcessBadQosIntervals = 3,
  }

  #endregion

  #region Messages
  public sealed partial class CMsgPoorNetworkConditions : pb::IMessage<CMsgPoorNetworkConditions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPoorNetworkConditions> _parser = new pb::MessageParser<CMsgPoorNetworkConditions>(() => new CMsgPoorNetworkConditions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPoorNetworkConditions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPoorNetworkConditions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPoorNetworkConditions(CMsgPoorNetworkConditions other) : this() {
      _hasBits0 = other._hasBits0;
      detectionType_ = other.detectionType_;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPoorNetworkConditions Clone() {
      return new CMsgPoorNetworkConditions(this);
    }

    /// <summary>Field number for the "detection_type" field.</summary>
    public const int DetectionTypeFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EPoorNetworkConditionsType DetectionTypeDefaultValue = global::Steam.Protos.Dota2.EPoorNetworkConditionsType.KEpoorNetworkConditionsNone;

    private global::Steam.Protos.Dota2.EPoorNetworkConditionsType detectionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EPoorNetworkConditionsType DetectionType {
      get { if ((_hasBits0 & 1) != 0) { return detectionType_; } else { return DetectionTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        detectionType_ = value;
      }
    }
    /// <summary>Gets whether the "detection_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDetectionType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "detection_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDetectionType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgPoorNetworkConditions.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgPoorNetworkConditions.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPoorNetworkConditions.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPoorNetworkConditions.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPoorNetworkConditions.Types.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPoorNetworkConditions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPoorNetworkConditions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DetectionType != other.DetectionType) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDetectionType) hash ^= DetectionType.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDetectionType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DetectionType);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDetectionType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DetectionType);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDetectionType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DetectionType);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPoorNetworkConditions other) {
      if (other == null) {
        return;
      }
      if (other.HasDetectionType) {
        DetectionType = other.DetectionType;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DetectionType = (global::Steam.Protos.Dota2.EPoorNetworkConditionsType) input.ReadEnum();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DetectionType = (global::Steam.Protos.Dota2.EPoorNetworkConditionsType) input.ReadEnum();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgPoorNetworkConditions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgPoorNetworkConditions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          disconnectReason_ = other.disconnectReason_;
          numBadIntervals_ = other.numBadIntervals_;
          peakLossPct_ = other.peakLossPct_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "disconnect_reason" field.</summary>
        public const int DisconnectReasonFieldNumber = 2;
        private readonly static global::Steam.Protos.Dota2.ENetworkDisconnectionReason DisconnectReasonDefaultValue = global::Steam.Protos.Dota2.ENetworkDisconnectionReason.NetworkDisconnectInvalid;

        private global::Steam.Protos.Dota2.ENetworkDisconnectionReason disconnectReason_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.ENetworkDisconnectionReason DisconnectReason {
          get { if ((_hasBits0 & 2) != 0) { return disconnectReason_; } else { return DisconnectReasonDefaultValue; } }
          set {
            _hasBits0 |= 2;
            disconnectReason_ = value;
          }
        }
        /// <summary>Gets whether the "disconnect_reason" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDisconnectReason {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "disconnect_reason" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDisconnectReason() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "num_bad_intervals" field.</summary>
        public const int NumBadIntervalsFieldNumber = 3;
        private readonly static uint NumBadIntervalsDefaultValue = 0;

        private uint numBadIntervals_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumBadIntervals {
          get { if ((_hasBits0 & 4) != 0) { return numBadIntervals_; } else { return NumBadIntervalsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            numBadIntervals_ = value;
          }
        }
        /// <summary>Gets whether the "num_bad_intervals" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNumBadIntervals {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "num_bad_intervals" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNumBadIntervals() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "peak_loss_pct" field.</summary>
        public const int PeakLossPctFieldNumber = 4;
        private readonly static uint PeakLossPctDefaultValue = 0;

        private uint peakLossPct_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PeakLossPct {
          get { if ((_hasBits0 & 8) != 0) { return peakLossPct_; } else { return PeakLossPctDefaultValue; } }
          set {
            _hasBits0 |= 8;
            peakLossPct_ = value;
          }
        }
        /// <summary>Gets whether the "peak_loss_pct" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPeakLossPct {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "peak_loss_pct" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPeakLossPct() {
          _hasBits0 &= ~8;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (DisconnectReason != other.DisconnectReason) return false;
          if (NumBadIntervals != other.NumBadIntervals) return false;
          if (PeakLossPct != other.PeakLossPct) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasDisconnectReason) hash ^= DisconnectReason.GetHashCode();
          if (HasNumBadIntervals) hash ^= NumBadIntervals.GetHashCode();
          if (HasPeakLossPct) hash ^= PeakLossPct.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasDisconnectReason) {
            output.WriteRawTag(16);
            output.WriteEnum((int) DisconnectReason);
          }
          if (HasNumBadIntervals) {
            output.WriteRawTag(24);
            output.WriteUInt32(NumBadIntervals);
          }
          if (HasPeakLossPct) {
            output.WriteRawTag(32);
            output.WriteUInt32(PeakLossPct);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasDisconnectReason) {
            output.WriteRawTag(16);
            output.WriteEnum((int) DisconnectReason);
          }
          if (HasNumBadIntervals) {
            output.WriteRawTag(24);
            output.WriteUInt32(NumBadIntervals);
          }
          if (HasPeakLossPct) {
            output.WriteRawTag(32);
            output.WriteUInt32(PeakLossPct);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasDisconnectReason) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DisconnectReason);
          }
          if (HasNumBadIntervals) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumBadIntervals);
          }
          if (HasPeakLossPct) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeakLossPct);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasDisconnectReason) {
            DisconnectReason = other.DisconnectReason;
          }
          if (other.HasNumBadIntervals) {
            NumBadIntervals = other.NumBadIntervals;
          }
          if (other.HasPeakLossPct) {
            PeakLossPct = other.PeakLossPct;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                DisconnectReason = (global::Steam.Protos.Dota2.ENetworkDisconnectionReason) input.ReadEnum();
                break;
              }
              case 24: {
                NumBadIntervals = input.ReadUInt32();
                break;
              }
              case 32: {
                PeakLossPct = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                DisconnectReason = (global::Steam.Protos.Dota2.ENetworkDisconnectionReason) input.ReadEnum();
                break;
              }
              case 24: {
                NumBadIntervals = input.ReadUInt32();
                break;
              }
              case 32: {
                PeakLossPct = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGameserverCrash : pb::IMessage<CMsgGameserverCrash>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameserverCrash> _parser = new pb::MessageParser<CMsgGameserverCrash>(() => new CMsgGameserverCrash());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameserverCrash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameserverCrash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameserverCrash(CMsgGameserverCrash other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      lobbyId_ = other.lobbyId_;
      gameState_ = other.gameState_;
      sentinelSaveTime_ = other.sentinelSaveTime_;
      customGameId_ = other.customGameId_;
      tournamentId_ = other.tournamentId_;
      serverSteamId_ = other.serverSteamId_;
      serverPublicIpAddr_ = other.serverPublicIpAddr_;
      serverPort_ = other.serverPort_;
      serverCluster_ = other.serverCluster_;
      pid_ = other.pid_;
      engine_ = other.engine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameserverCrash Clone() {
      return new CMsgGameserverCrash(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 2;
    private readonly static ulong LobbyIdDefaultValue = 0UL;

    private ulong lobbyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LobbyId {
      get { if ((_hasBits0 & 2) != 0) { return lobbyId_; } else { return LobbyIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lobbyId_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lobby_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.DOTA_GameState GameStateDefaultValue = global::Steam.Protos.Dota2.DOTA_GameState.DotaGamerulesStateInit;

    private global::Steam.Protos.Dota2.DOTA_GameState gameState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GameState GameState {
      get { if ((_hasBits0 & 4) != 0) { return gameState_; } else { return GameStateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        gameState_ = value;
      }
    }
    /// <summary>Gets whether the "game_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "game_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameState() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "sentinel_save_time" field.</summary>
    public const int SentinelSaveTimeFieldNumber = 4;
    private readonly static uint SentinelSaveTimeDefaultValue = 0;

    private uint sentinelSaveTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SentinelSaveTime {
      get { if ((_hasBits0 & 8) != 0) { return sentinelSaveTime_; } else { return SentinelSaveTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        sentinelSaveTime_ = value;
      }
    }
    /// <summary>Gets whether the "sentinel_save_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSentinelSaveTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "sentinel_save_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSentinelSaveTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "custom_game_id" field.</summary>
    public const int CustomGameIdFieldNumber = 11;
    private readonly static ulong CustomGameIdDefaultValue = 0UL;

    private ulong customGameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomGameId {
      get { if ((_hasBits0 & 1024) != 0) { return customGameId_; } else { return CustomGameIdDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        customGameId_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameId {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameId() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "tournament_id" field.</summary>
    public const int TournamentIdFieldNumber = 12;
    private readonly static uint TournamentIdDefaultValue = 0;

    private uint tournamentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TournamentId {
      get { if ((_hasBits0 & 2048) != 0) { return tournamentId_; } else { return TournamentIdDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        tournamentId_ = value;
      }
    }
    /// <summary>Gets whether the "tournament_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTournamentId {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "tournament_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTournamentId() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "server_steam_id" field.</summary>
    public const int ServerSteamIdFieldNumber = 5;
    private readonly static ulong ServerSteamIdDefaultValue = 0UL;

    private ulong serverSteamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerSteamId {
      get { if ((_hasBits0 & 16) != 0) { return serverSteamId_; } else { return ServerSteamIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        serverSteamId_ = value;
      }
    }
    /// <summary>Gets whether the "server_steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerSteamId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "server_steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerSteamId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "server_public_ip_addr" field.</summary>
    public const int ServerPublicIpAddrFieldNumber = 6;
    private readonly static uint ServerPublicIpAddrDefaultValue = 0;

    private uint serverPublicIpAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerPublicIpAddr {
      get { if ((_hasBits0 & 32) != 0) { return serverPublicIpAddr_; } else { return ServerPublicIpAddrDefaultValue; } }
      set {
        _hasBits0 |= 32;
        serverPublicIpAddr_ = value;
      }
    }
    /// <summary>Gets whether the "server_public_ip_addr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerPublicIpAddr {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "server_public_ip_addr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerPublicIpAddr() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "server_port" field.</summary>
    public const int ServerPortFieldNumber = 7;
    private readonly static uint ServerPortDefaultValue = 0;

    private uint serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerPort {
      get { if ((_hasBits0 & 64) != 0) { return serverPort_; } else { return ServerPortDefaultValue; } }
      set {
        _hasBits0 |= 64;
        serverPort_ = value;
      }
    }
    /// <summary>Gets whether the "server_port" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerPort {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "server_port" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerPort() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "server_cluster" field.</summary>
    public const int ServerClusterFieldNumber = 8;
    private readonly static uint ServerClusterDefaultValue = 0;

    private uint serverCluster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerCluster {
      get { if ((_hasBits0 & 128) != 0) { return serverCluster_; } else { return ServerClusterDefaultValue; } }
      set {
        _hasBits0 |= 128;
        serverCluster_ = value;
      }
    }
    /// <summary>Gets whether the "server_cluster" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerCluster {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "server_cluster" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerCluster() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 9;
    private readonly static uint PidDefaultValue = 0;

    private uint pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pid {
      get { if ((_hasBits0 & 256) != 0) { return pid_; } else { return PidDefaultValue; } }
      set {
        _hasBits0 |= 256;
        pid_ = value;
      }
    }
    /// <summary>Gets whether the "pid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPid {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "pid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPid() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 10;
    private readonly static uint EngineDefaultValue = 0;

    private uint engine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Engine {
      get { if ((_hasBits0 & 512) != 0) { return engine_; } else { return EngineDefaultValue; } }
      set {
        _hasBits0 |= 512;
        engine_ = value;
      }
    }
    /// <summary>Gets whether the "engine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngine {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "engine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngine() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameserverCrash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameserverCrash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (LobbyId != other.LobbyId) return false;
      if (GameState != other.GameState) return false;
      if (SentinelSaveTime != other.SentinelSaveTime) return false;
      if (CustomGameId != other.CustomGameId) return false;
      if (TournamentId != other.TournamentId) return false;
      if (ServerSteamId != other.ServerSteamId) return false;
      if (ServerPublicIpAddr != other.ServerPublicIpAddr) return false;
      if (ServerPort != other.ServerPort) return false;
      if (ServerCluster != other.ServerCluster) return false;
      if (Pid != other.Pid) return false;
      if (Engine != other.Engine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasLobbyId) hash ^= LobbyId.GetHashCode();
      if (HasGameState) hash ^= GameState.GetHashCode();
      if (HasSentinelSaveTime) hash ^= SentinelSaveTime.GetHashCode();
      if (HasCustomGameId) hash ^= CustomGameId.GetHashCode();
      if (HasTournamentId) hash ^= TournamentId.GetHashCode();
      if (HasServerSteamId) hash ^= ServerSteamId.GetHashCode();
      if (HasServerPublicIpAddr) hash ^= ServerPublicIpAddr.GetHashCode();
      if (HasServerPort) hash ^= ServerPort.GetHashCode();
      if (HasServerCluster) hash ^= ServerCluster.GetHashCode();
      if (HasPid) hash ^= Pid.GetHashCode();
      if (HasEngine) hash ^= Engine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasLobbyId) {
        output.WriteRawTag(17);
        output.WriteFixed64(LobbyId);
      }
      if (HasGameState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) GameState);
      }
      if (HasSentinelSaveTime) {
        output.WriteRawTag(37);
        output.WriteFixed32(SentinelSaveTime);
      }
      if (HasServerSteamId) {
        output.WriteRawTag(41);
        output.WriteFixed64(ServerSteamId);
      }
      if (HasServerPublicIpAddr) {
        output.WriteRawTag(53);
        output.WriteFixed32(ServerPublicIpAddr);
      }
      if (HasServerPort) {
        output.WriteRawTag(56);
        output.WriteUInt32(ServerPort);
      }
      if (HasServerCluster) {
        output.WriteRawTag(64);
        output.WriteUInt32(ServerCluster);
      }
      if (HasPid) {
        output.WriteRawTag(72);
        output.WriteUInt32(Pid);
      }
      if (HasEngine) {
        output.WriteRawTag(80);
        output.WriteUInt32(Engine);
      }
      if (HasCustomGameId) {
        output.WriteRawTag(89);
        output.WriteFixed64(CustomGameId);
      }
      if (HasTournamentId) {
        output.WriteRawTag(96);
        output.WriteUInt32(TournamentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasLobbyId) {
        output.WriteRawTag(17);
        output.WriteFixed64(LobbyId);
      }
      if (HasGameState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) GameState);
      }
      if (HasSentinelSaveTime) {
        output.WriteRawTag(37);
        output.WriteFixed32(SentinelSaveTime);
      }
      if (HasServerSteamId) {
        output.WriteRawTag(41);
        output.WriteFixed64(ServerSteamId);
      }
      if (HasServerPublicIpAddr) {
        output.WriteRawTag(53);
        output.WriteFixed32(ServerPublicIpAddr);
      }
      if (HasServerPort) {
        output.WriteRawTag(56);
        output.WriteUInt32(ServerPort);
      }
      if (HasServerCluster) {
        output.WriteRawTag(64);
        output.WriteUInt32(ServerCluster);
      }
      if (HasPid) {
        output.WriteRawTag(72);
        output.WriteUInt32(Pid);
      }
      if (HasEngine) {
        output.WriteRawTag(80);
        output.WriteUInt32(Engine);
      }
      if (HasCustomGameId) {
        output.WriteRawTag(89);
        output.WriteFixed64(CustomGameId);
      }
      if (HasTournamentId) {
        output.WriteRawTag(96);
        output.WriteUInt32(TournamentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasLobbyId) {
        size += 1 + 8;
      }
      if (HasGameState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameState);
      }
      if (HasSentinelSaveTime) {
        size += 1 + 4;
      }
      if (HasCustomGameId) {
        size += 1 + 8;
      }
      if (HasTournamentId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TournamentId);
      }
      if (HasServerSteamId) {
        size += 1 + 8;
      }
      if (HasServerPublicIpAddr) {
        size += 1 + 4;
      }
      if (HasServerPort) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerPort);
      }
      if (HasServerCluster) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerCluster);
      }
      if (HasPid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pid);
      }
      if (HasEngine) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Engine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameserverCrash other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasLobbyId) {
        LobbyId = other.LobbyId;
      }
      if (other.HasGameState) {
        GameState = other.GameState;
      }
      if (other.HasSentinelSaveTime) {
        SentinelSaveTime = other.SentinelSaveTime;
      }
      if (other.HasCustomGameId) {
        CustomGameId = other.CustomGameId;
      }
      if (other.HasTournamentId) {
        TournamentId = other.TournamentId;
      }
      if (other.HasServerSteamId) {
        ServerSteamId = other.ServerSteamId;
      }
      if (other.HasServerPublicIpAddr) {
        ServerPublicIpAddr = other.ServerPublicIpAddr;
      }
      if (other.HasServerPort) {
        ServerPort = other.ServerPort;
      }
      if (other.HasServerCluster) {
        ServerCluster = other.ServerCluster;
      }
      if (other.HasPid) {
        Pid = other.Pid;
      }
      if (other.HasEngine) {
        Engine = other.Engine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 17: {
            LobbyId = input.ReadFixed64();
            break;
          }
          case 24: {
            GameState = (global::Steam.Protos.Dota2.DOTA_GameState) input.ReadEnum();
            break;
          }
          case 37: {
            SentinelSaveTime = input.ReadFixed32();
            break;
          }
          case 41: {
            ServerSteamId = input.ReadFixed64();
            break;
          }
          case 53: {
            ServerPublicIpAddr = input.ReadFixed32();
            break;
          }
          case 56: {
            ServerPort = input.ReadUInt32();
            break;
          }
          case 64: {
            ServerCluster = input.ReadUInt32();
            break;
          }
          case 72: {
            Pid = input.ReadUInt32();
            break;
          }
          case 80: {
            Engine = input.ReadUInt32();
            break;
          }
          case 89: {
            CustomGameId = input.ReadFixed64();
            break;
          }
          case 96: {
            TournamentId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 17: {
            LobbyId = input.ReadFixed64();
            break;
          }
          case 24: {
            GameState = (global::Steam.Protos.Dota2.DOTA_GameState) input.ReadEnum();
            break;
          }
          case 37: {
            SentinelSaveTime = input.ReadFixed32();
            break;
          }
          case 41: {
            ServerSteamId = input.ReadFixed64();
            break;
          }
          case 53: {
            ServerPublicIpAddr = input.ReadFixed32();
            break;
          }
          case 56: {
            ServerPort = input.ReadUInt32();
            break;
          }
          case 64: {
            ServerCluster = input.ReadUInt32();
            break;
          }
          case 72: {
            Pid = input.ReadUInt32();
            break;
          }
          case 80: {
            Engine = input.ReadUInt32();
            break;
          }
          case 89: {
            CustomGameId = input.ReadFixed64();
            break;
          }
          case 96: {
            TournamentId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgConnectedPlayers : pb::IMessage<CMsgConnectedPlayers>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgConnectedPlayers> _parser = new pb::MessageParser<CMsgConnectedPlayers>(() => new CMsgConnectedPlayers());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgConnectedPlayers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgConnectedPlayers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgConnectedPlayers(CMsgConnectedPlayers other) : this() {
      _hasBits0 = other._hasBits0;
      connectedPlayers_ = other.connectedPlayers_.Clone();
      disconnectedPlayers_ = other.disconnectedPlayers_.Clone();
      gameState_ = other.gameState_;
      firstBloodHappened_ = other.firstBloodHappened_;
      poorNetworkConditions_ = other.poorNetworkConditions_ != null ? other.poorNetworkConditions_.Clone() : null;
      sendReason_ = other.sendReason_;
      radiantKills_ = other.radiantKills_;
      direKills_ = other.direKills_;
      radiantLead_ = other.radiantLead_;
      buildingState_ = other.buildingState_;
      playerDraft_ = other.playerDraft_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgConnectedPlayers Clone() {
      return new CMsgConnectedPlayers(this);
    }

    /// <summary>Field number for the "connected_players" field.</summary>
    public const int ConnectedPlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player> _repeated_connectedPlayers_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player> connectedPlayers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player> ConnectedPlayers {
      get { return connectedPlayers_; }
    }

    /// <summary>Field number for the "disconnected_players" field.</summary>
    public const int DisconnectedPlayersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player> _repeated_disconnectedPlayers_codec
        = pb::FieldCodec.ForMessage(58, global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player> disconnectedPlayers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.Player> DisconnectedPlayers {
      get { return disconnectedPlayers_; }
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.DOTA_GameState GameStateDefaultValue = global::Steam.Protos.Dota2.DOTA_GameState.DotaGamerulesStateInit;

    private global::Steam.Protos.Dota2.DOTA_GameState gameState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GameState GameState {
      get { if ((_hasBits0 & 1) != 0) { return gameState_; } else { return GameStateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gameState_ = value;
      }
    }
    /// <summary>Gets whether the "game_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "game_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "first_blood_happened" field.</summary>
    public const int FirstBloodHappenedFieldNumber = 6;
    private readonly static bool FirstBloodHappenedDefaultValue = false;

    private bool firstBloodHappened_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FirstBloodHappened {
      get { if ((_hasBits0 & 2) != 0) { return firstBloodHappened_; } else { return FirstBloodHappenedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        firstBloodHappened_ = value;
      }
    }
    /// <summary>Gets whether the "first_blood_happened" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstBloodHappened {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "first_blood_happened" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstBloodHappened() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "poor_network_conditions" field.</summary>
    public const int PoorNetworkConditionsFieldNumber = 10;
    private global::Steam.Protos.Dota2.CMsgPoorNetworkConditions poorNetworkConditions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPoorNetworkConditions PoorNetworkConditions {
      get { return poorNetworkConditions_; }
      set {
        poorNetworkConditions_ = value;
      }
    }

    /// <summary>Field number for the "send_reason" field.</summary>
    public const int SendReasonFieldNumber = 8;
    private readonly static global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.SendReason SendReasonDefaultValue = global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.SendReason.Invalid;

    private global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.SendReason sendReason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.SendReason SendReason {
      get { if ((_hasBits0 & 4) != 0) { return sendReason_; } else { return SendReasonDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sendReason_ = value;
      }
    }
    /// <summary>Gets whether the "send_reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendReason {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "send_reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendReason() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "radiant_kills" field.</summary>
    public const int RadiantKillsFieldNumber = 11;
    private readonly static uint RadiantKillsDefaultValue = 0;

    private uint radiantKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantKills {
      get { if ((_hasBits0 & 8) != 0) { return radiantKills_; } else { return RadiantKillsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        radiantKills_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantKills {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "radiant_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantKills() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "dire_kills" field.</summary>
    public const int DireKillsFieldNumber = 12;
    private readonly static uint DireKillsDefaultValue = 0;

    private uint direKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireKills {
      get { if ((_hasBits0 & 16) != 0) { return direKills_; } else { return DireKillsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        direKills_ = value;
      }
    }
    /// <summary>Gets whether the "dire_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireKills {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "dire_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireKills() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "radiant_lead" field.</summary>
    public const int RadiantLeadFieldNumber = 14;
    private readonly static int RadiantLeadDefaultValue = 0;

    private int radiantLead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RadiantLead {
      get { if ((_hasBits0 & 32) != 0) { return radiantLead_; } else { return RadiantLeadDefaultValue; } }
      set {
        _hasBits0 |= 32;
        radiantLead_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_lead" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantLead {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "radiant_lead" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantLead() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "building_state" field.</summary>
    public const int BuildingStateFieldNumber = 15;
    private readonly static uint BuildingStateDefaultValue = 0;

    private uint buildingState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildingState {
      get { if ((_hasBits0 & 64) != 0) { return buildingState_; } else { return BuildingStateDefaultValue; } }
      set {
        _hasBits0 |= 64;
        buildingState_ = value;
      }
    }
    /// <summary>Gets whether the "building_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuildingState {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "building_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuildingState() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "player_draft" field.</summary>
    public const int PlayerDraftFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.PlayerDraft> _repeated_playerDraft_codec
        = pb::FieldCodec.ForMessage(130, global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.PlayerDraft.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.PlayerDraft> playerDraft_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.PlayerDraft>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.PlayerDraft> PlayerDraft {
      get { return playerDraft_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgConnectedPlayers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgConnectedPlayers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!connectedPlayers_.Equals(other.connectedPlayers_)) return false;
      if(!disconnectedPlayers_.Equals(other.disconnectedPlayers_)) return false;
      if (GameState != other.GameState) return false;
      if (FirstBloodHappened != other.FirstBloodHappened) return false;
      if (!object.Equals(PoorNetworkConditions, other.PoorNetworkConditions)) return false;
      if (SendReason != other.SendReason) return false;
      if (RadiantKills != other.RadiantKills) return false;
      if (DireKills != other.DireKills) return false;
      if (RadiantLead != other.RadiantLead) return false;
      if (BuildingState != other.BuildingState) return false;
      if(!playerDraft_.Equals(other.playerDraft_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= connectedPlayers_.GetHashCode();
      hash ^= disconnectedPlayers_.GetHashCode();
      if (HasGameState) hash ^= GameState.GetHashCode();
      if (HasFirstBloodHappened) hash ^= FirstBloodHappened.GetHashCode();
      if (poorNetworkConditions_ != null) hash ^= PoorNetworkConditions.GetHashCode();
      if (HasSendReason) hash ^= SendReason.GetHashCode();
      if (HasRadiantKills) hash ^= RadiantKills.GetHashCode();
      if (HasDireKills) hash ^= DireKills.GetHashCode();
      if (HasRadiantLead) hash ^= RadiantLead.GetHashCode();
      if (HasBuildingState) hash ^= BuildingState.GetHashCode();
      hash ^= playerDraft_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      connectedPlayers_.WriteTo(output, _repeated_connectedPlayers_codec);
      if (HasGameState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameState);
      }
      if (HasFirstBloodHappened) {
        output.WriteRawTag(48);
        output.WriteBool(FirstBloodHappened);
      }
      disconnectedPlayers_.WriteTo(output, _repeated_disconnectedPlayers_codec);
      if (HasSendReason) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SendReason);
      }
      if (poorNetworkConditions_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(PoorNetworkConditions);
      }
      if (HasRadiantKills) {
        output.WriteRawTag(88);
        output.WriteUInt32(RadiantKills);
      }
      if (HasDireKills) {
        output.WriteRawTag(96);
        output.WriteUInt32(DireKills);
      }
      if (HasRadiantLead) {
        output.WriteRawTag(112);
        output.WriteInt32(RadiantLead);
      }
      if (HasBuildingState) {
        output.WriteRawTag(120);
        output.WriteUInt32(BuildingState);
      }
      playerDraft_.WriteTo(output, _repeated_playerDraft_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      connectedPlayers_.WriteTo(ref output, _repeated_connectedPlayers_codec);
      if (HasGameState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameState);
      }
      if (HasFirstBloodHappened) {
        output.WriteRawTag(48);
        output.WriteBool(FirstBloodHappened);
      }
      disconnectedPlayers_.WriteTo(ref output, _repeated_disconnectedPlayers_codec);
      if (HasSendReason) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SendReason);
      }
      if (poorNetworkConditions_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(PoorNetworkConditions);
      }
      if (HasRadiantKills) {
        output.WriteRawTag(88);
        output.WriteUInt32(RadiantKills);
      }
      if (HasDireKills) {
        output.WriteRawTag(96);
        output.WriteUInt32(DireKills);
      }
      if (HasRadiantLead) {
        output.WriteRawTag(112);
        output.WriteInt32(RadiantLead);
      }
      if (HasBuildingState) {
        output.WriteRawTag(120);
        output.WriteUInt32(BuildingState);
      }
      playerDraft_.WriteTo(ref output, _repeated_playerDraft_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += connectedPlayers_.CalculateSize(_repeated_connectedPlayers_codec);
      size += disconnectedPlayers_.CalculateSize(_repeated_disconnectedPlayers_codec);
      if (HasGameState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameState);
      }
      if (HasFirstBloodHappened) {
        size += 1 + 1;
      }
      if (poorNetworkConditions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoorNetworkConditions);
      }
      if (HasSendReason) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SendReason);
      }
      if (HasRadiantKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RadiantKills);
      }
      if (HasDireKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DireKills);
      }
      if (HasRadiantLead) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RadiantLead);
      }
      if (HasBuildingState) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildingState);
      }
      size += playerDraft_.CalculateSize(_repeated_playerDraft_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgConnectedPlayers other) {
      if (other == null) {
        return;
      }
      connectedPlayers_.Add(other.connectedPlayers_);
      disconnectedPlayers_.Add(other.disconnectedPlayers_);
      if (other.HasGameState) {
        GameState = other.GameState;
      }
      if (other.HasFirstBloodHappened) {
        FirstBloodHappened = other.FirstBloodHappened;
      }
      if (other.poorNetworkConditions_ != null) {
        if (poorNetworkConditions_ == null) {
          PoorNetworkConditions = new global::Steam.Protos.Dota2.CMsgPoorNetworkConditions();
        }
        PoorNetworkConditions.MergeFrom(other.PoorNetworkConditions);
      }
      if (other.HasSendReason) {
        SendReason = other.SendReason;
      }
      if (other.HasRadiantKills) {
        RadiantKills = other.RadiantKills;
      }
      if (other.HasDireKills) {
        DireKills = other.DireKills;
      }
      if (other.HasRadiantLead) {
        RadiantLead = other.RadiantLead;
      }
      if (other.HasBuildingState) {
        BuildingState = other.BuildingState;
      }
      playerDraft_.Add(other.playerDraft_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            connectedPlayers_.AddEntriesFrom(input, _repeated_connectedPlayers_codec);
            break;
          }
          case 16: {
            GameState = (global::Steam.Protos.Dota2.DOTA_GameState) input.ReadEnum();
            break;
          }
          case 48: {
            FirstBloodHappened = input.ReadBool();
            break;
          }
          case 58: {
            disconnectedPlayers_.AddEntriesFrom(input, _repeated_disconnectedPlayers_codec);
            break;
          }
          case 64: {
            SendReason = (global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.SendReason) input.ReadEnum();
            break;
          }
          case 82: {
            if (poorNetworkConditions_ == null) {
              PoorNetworkConditions = new global::Steam.Protos.Dota2.CMsgPoorNetworkConditions();
            }
            input.ReadMessage(PoorNetworkConditions);
            break;
          }
          case 88: {
            RadiantKills = input.ReadUInt32();
            break;
          }
          case 96: {
            DireKills = input.ReadUInt32();
            break;
          }
          case 112: {
            RadiantLead = input.ReadInt32();
            break;
          }
          case 120: {
            BuildingState = input.ReadUInt32();
            break;
          }
          case 130: {
            playerDraft_.AddEntriesFrom(input, _repeated_playerDraft_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            connectedPlayers_.AddEntriesFrom(ref input, _repeated_connectedPlayers_codec);
            break;
          }
          case 16: {
            GameState = (global::Steam.Protos.Dota2.DOTA_GameState) input.ReadEnum();
            break;
          }
          case 48: {
            FirstBloodHappened = input.ReadBool();
            break;
          }
          case 58: {
            disconnectedPlayers_.AddEntriesFrom(ref input, _repeated_disconnectedPlayers_codec);
            break;
          }
          case 64: {
            SendReason = (global::Steam.Protos.Dota2.CMsgConnectedPlayers.Types.SendReason) input.ReadEnum();
            break;
          }
          case 82: {
            if (poorNetworkConditions_ == null) {
              PoorNetworkConditions = new global::Steam.Protos.Dota2.CMsgPoorNetworkConditions();
            }
            input.ReadMessage(PoorNetworkConditions);
            break;
          }
          case 88: {
            RadiantKills = input.ReadUInt32();
            break;
          }
          case 96: {
            DireKills = input.ReadUInt32();
            break;
          }
          case 112: {
            RadiantLead = input.ReadInt32();
            break;
          }
          case 120: {
            BuildingState = input.ReadUInt32();
            break;
          }
          case 130: {
            playerDraft_.AddEntriesFrom(ref input, _repeated_playerDraft_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgConnectedPlayers message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SendReason {
        [pbr::OriginalName("INVALID")] Invalid = 0,
        [pbr::OriginalName("HEARTBEAT")] Heartbeat = 1,
        [pbr::OriginalName("GAME_STATE")] GameState = 2,
        [pbr::OriginalName("FIRST_BLOOD")] FirstBlood = 3,
        [pbr::OriginalName("PLAYER_CONNECTED")] PlayerConnected = 4,
        [pbr::OriginalName("PLAYER_HERO")] PlayerHero = 5,
        [pbr::OriginalName("PLAYER_DISCONNECTED_CONSEQUENCES")] PlayerDisconnectedConsequences = 6,
        [pbr::OriginalName("PLAYER_DISCONNECTED_NOCONSEQUENCES")] PlayerDisconnectedNoconsequences = 7,
        [pbr::OriginalName("GAMESTATE_TIMEOUT")] GamestateTimeout = 10,
        [pbr::OriginalName("MASS_DISCONNECT")] MassDisconnect = 11,
        [pbr::OriginalName("KILLS")] Kills = 13,
        [pbr::OriginalName("BUILDING_STATE")] BuildingState = 14,
      }

      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgConnectedPlayers.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          steamId_ = other.steamId_;
          heroId_ = other.heroId_;
          leaverState_ = other.leaverState_ != null ? other.leaverState_.Clone() : null;
          disconnectReason_ = other.disconnectReason_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "steam_id" field.</summary>
        public const int SteamIdFieldNumber = 1;
        private readonly static ulong SteamIdDefaultValue = 0UL;

        private ulong steamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong SteamId {
          get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            steamId_ = value;
          }
        }
        /// <summary>Gets whether the "steam_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSteamId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "steam_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSteamId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 2;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "leaver_state" field.</summary>
        public const int LeaverStateFieldNumber = 3;
        private global::Steam.Protos.Dota2.CMsgLeaverState leaverState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgLeaverState LeaverState {
          get { return leaverState_; }
          set {
            leaverState_ = value;
          }
        }

        /// <summary>Field number for the "disconnect_reason" field.</summary>
        public const int DisconnectReasonFieldNumber = 4;
        private readonly static global::Steam.Protos.Dota2.ENetworkDisconnectionReason DisconnectReasonDefaultValue = global::Steam.Protos.Dota2.ENetworkDisconnectionReason.NetworkDisconnectInvalid;

        private global::Steam.Protos.Dota2.ENetworkDisconnectionReason disconnectReason_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.ENetworkDisconnectionReason DisconnectReason {
          get { if ((_hasBits0 & 4) != 0) { return disconnectReason_; } else { return DisconnectReasonDefaultValue; } }
          set {
            _hasBits0 |= 4;
            disconnectReason_ = value;
          }
        }
        /// <summary>Gets whether the "disconnect_reason" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDisconnectReason {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "disconnect_reason" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDisconnectReason() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SteamId != other.SteamId) return false;
          if (HeroId != other.HeroId) return false;
          if (!object.Equals(LeaverState, other.LeaverState)) return false;
          if (DisconnectReason != other.DisconnectReason) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSteamId) hash ^= SteamId.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (leaverState_ != null) hash ^= LeaverState.GetHashCode();
          if (HasDisconnectReason) hash ^= DisconnectReason.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasSteamId) {
            output.WriteRawTag(9);
            output.WriteFixed64(SteamId);
          }
          if (HasHeroId) {
            output.WriteRawTag(16);
            output.WriteInt32(HeroId);
          }
          if (leaverState_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(LeaverState);
          }
          if (HasDisconnectReason) {
            output.WriteRawTag(32);
            output.WriteEnum((int) DisconnectReason);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasSteamId) {
            output.WriteRawTag(9);
            output.WriteFixed64(SteamId);
          }
          if (HasHeroId) {
            output.WriteRawTag(16);
            output.WriteInt32(HeroId);
          }
          if (leaverState_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(LeaverState);
          }
          if (HasDisconnectReason) {
            output.WriteRawTag(32);
            output.WriteEnum((int) DisconnectReason);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSteamId) {
            size += 1 + 8;
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (leaverState_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaverState);
          }
          if (HasDisconnectReason) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DisconnectReason);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasSteamId) {
            SteamId = other.SteamId;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.leaverState_ != null) {
            if (leaverState_ == null) {
              LeaverState = new global::Steam.Protos.Dota2.CMsgLeaverState();
            }
            LeaverState.MergeFrom(other.LeaverState);
          }
          if (other.HasDisconnectReason) {
            DisconnectReason = other.DisconnectReason;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                SteamId = input.ReadFixed64();
                break;
              }
              case 16: {
                HeroId = input.ReadInt32();
                break;
              }
              case 26: {
                if (leaverState_ == null) {
                  LeaverState = new global::Steam.Protos.Dota2.CMsgLeaverState();
                }
                input.ReadMessage(LeaverState);
                break;
              }
              case 32: {
                DisconnectReason = (global::Steam.Protos.Dota2.ENetworkDisconnectionReason) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                SteamId = input.ReadFixed64();
                break;
              }
              case 16: {
                HeroId = input.ReadInt32();
                break;
              }
              case 26: {
                if (leaverState_ == null) {
                  LeaverState = new global::Steam.Protos.Dota2.CMsgLeaverState();
                }
                input.ReadMessage(LeaverState);
                break;
              }
              case 32: {
                DisconnectReason = (global::Steam.Protos.Dota2.ENetworkDisconnectionReason) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PlayerDraft : pb::IMessage<PlayerDraft>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerDraft> _parser = new pb::MessageParser<PlayerDraft>(() => new PlayerDraft());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerDraft> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgConnectedPlayers.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDraft() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDraft(PlayerDraft other) : this() {
          _hasBits0 = other._hasBits0;
          steamId_ = other.steamId_;
          team_ = other.team_;
          teamSlot_ = other.teamSlot_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDraft Clone() {
          return new PlayerDraft(this);
        }

        /// <summary>Field number for the "steam_id" field.</summary>
        public const int SteamIdFieldNumber = 1;
        private readonly static ulong SteamIdDefaultValue = 0UL;

        private ulong steamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong SteamId {
          get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            steamId_ = value;
          }
        }
        /// <summary>Gets whether the "steam_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSteamId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "steam_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSteamId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 2;
        private readonly static global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamDefaultValue = global::Steam.Protos.Dota2.DOTA_GC_TEAM.GoodGuys;

        private global::Steam.Protos.Dota2.DOTA_GC_TEAM team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.DOTA_GC_TEAM Team {
          get { if ((_hasBits0 & 2) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 2;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "team_slot" field.</summary>
        public const int TeamSlotFieldNumber = 3;
        private readonly static int TeamSlotDefaultValue = 0;

        private int teamSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamSlot {
          get { if ((_hasBits0 & 4) != 0) { return teamSlot_; } else { return TeamSlotDefaultValue; } }
          set {
            _hasBits0 |= 4;
            teamSlot_ = value;
          }
        }
        /// <summary>Gets whether the "team_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamSlot {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "team_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamSlot() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerDraft);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerDraft other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SteamId != other.SteamId) return false;
          if (Team != other.Team) return false;
          if (TeamSlot != other.TeamSlot) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSteamId) hash ^= SteamId.GetHashCode();
          if (HasTeam) hash ^= Team.GetHashCode();
          if (HasTeamSlot) hash ^= TeamSlot.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasSteamId) {
            output.WriteRawTag(9);
            output.WriteFixed64(SteamId);
          }
          if (HasTeam) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Team);
          }
          if (HasTeamSlot) {
            output.WriteRawTag(24);
            output.WriteInt32(TeamSlot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasSteamId) {
            output.WriteRawTag(9);
            output.WriteFixed64(SteamId);
          }
          if (HasTeam) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Team);
          }
          if (HasTeamSlot) {
            output.WriteRawTag(24);
            output.WriteInt32(TeamSlot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSteamId) {
            size += 1 + 8;
          }
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Team);
          }
          if (HasTeamSlot) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamSlot);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerDraft other) {
          if (other == null) {
            return;
          }
          if (other.HasSteamId) {
            SteamId = other.SteamId;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          if (other.HasTeamSlot) {
            TeamSlot = other.TeamSlot;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                SteamId = input.ReadFixed64();
                break;
              }
              case 16: {
                Team = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
                break;
              }
              case 24: {
                TeamSlot = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                SteamId = input.ReadFixed64();
                break;
              }
              case 16: {
                Team = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
                break;
              }
              case 24: {
                TeamSlot = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGameServerInfo : pb::IMessage<CMsgGameServerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameServerInfo> _parser = new pb::MessageParser<CMsgGameServerInfo>(() => new CMsgGameServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameServerInfo(CMsgGameServerInfo other) : this() {
      _hasBits0 = other._hasBits0;
      serverPublicIpAddr_ = other.serverPublicIpAddr_;
      serverPrivateIpAddr_ = other.serverPrivateIpAddr_;
      serverPort_ = other.serverPort_;
      serverTvPort_ = other.serverTvPort_;
      assignedServerTvPort_ = other.assignedServerTvPort_;
      legacyServerSteamdatagramAddress_ = other.legacyServerSteamdatagramAddress_;
      serverKey_ = other.serverKey_;
      serverHibernation_ = other.serverHibernation_;
      serverType_ = other.serverType_;
      serverRegion_ = other.serverRegion_;
      serverLoadavg_ = other.serverLoadavg_;
      serverTvBroadcastTime_ = other.serverTvBroadcastTime_;
      serverGameTime_ = other.serverGameTime_;
      serverRelayConnectedSteamId_ = other.serverRelayConnectedSteamId_;
      relaySlotsMax_ = other.relaySlotsMax_;
      relaysConnected_ = other.relaysConnected_;
      relayClientsConnected_ = other.relayClientsConnected_;
      relayedGameServerSteamId_ = other.relayedGameServerSteamId_;
      parentRelayCount_ = other.parentRelayCount_;
      tvSecretCode_ = other.tvSecretCode_;
      serverVersion_ = other.serverVersion_;
      serverCluster_ = other.serverCluster_;
      allowCustomGames_ = other.allowCustomGames_;
      buildVersion_ = other.buildVersion_;
      srcdsInstance_ = other.srcdsInstance_;
      devForceServerType_ = other.devForceServerType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameServerInfo Clone() {
      return new CMsgGameServerInfo(this);
    }

    /// <summary>Field number for the "server_public_ip_addr" field.</summary>
    public const int ServerPublicIpAddrFieldNumber = 1;
    private readonly static uint ServerPublicIpAddrDefaultValue = 0;

    private uint serverPublicIpAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerPublicIpAddr {
      get { if ((_hasBits0 & 1) != 0) { return serverPublicIpAddr_; } else { return ServerPublicIpAddrDefaultValue; } }
      set {
        _hasBits0 |= 1;
        serverPublicIpAddr_ = value;
      }
    }
    /// <summary>Gets whether the "server_public_ip_addr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerPublicIpAddr {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "server_public_ip_addr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerPublicIpAddr() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "server_private_ip_addr" field.</summary>
    public const int ServerPrivateIpAddrFieldNumber = 2;
    private readonly static uint ServerPrivateIpAddrDefaultValue = 0;

    private uint serverPrivateIpAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerPrivateIpAddr {
      get { if ((_hasBits0 & 2) != 0) { return serverPrivateIpAddr_; } else { return ServerPrivateIpAddrDefaultValue; } }
      set {
        _hasBits0 |= 2;
        serverPrivateIpAddr_ = value;
      }
    }
    /// <summary>Gets whether the "server_private_ip_addr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerPrivateIpAddr {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "server_private_ip_addr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerPrivateIpAddr() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "server_port" field.</summary>
    public const int ServerPortFieldNumber = 3;
    private readonly static uint ServerPortDefaultValue = 0;

    private uint serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerPort {
      get { if ((_hasBits0 & 4) != 0) { return serverPort_; } else { return ServerPortDefaultValue; } }
      set {
        _hasBits0 |= 4;
        serverPort_ = value;
      }
    }
    /// <summary>Gets whether the "server_port" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerPort {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "server_port" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerPort() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "server_tv_port" field.</summary>
    public const int ServerTvPortFieldNumber = 4;
    private readonly static uint ServerTvPortDefaultValue = 0;

    private uint serverTvPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerTvPort {
      get { if ((_hasBits0 & 8) != 0) { return serverTvPort_; } else { return ServerTvPortDefaultValue; } }
      set {
        _hasBits0 |= 8;
        serverTvPort_ = value;
      }
    }
    /// <summary>Gets whether the "server_tv_port" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerTvPort {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "server_tv_port" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerTvPort() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "assigned_server_tv_port" field.</summary>
    public const int AssignedServerTvPortFieldNumber = 22;
    private readonly static uint AssignedServerTvPortDefaultValue = 0;

    private uint assignedServerTvPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssignedServerTvPort {
      get { if ((_hasBits0 & 524288) != 0) { return assignedServerTvPort_; } else { return AssignedServerTvPortDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        assignedServerTvPort_ = value;
      }
    }
    /// <summary>Gets whether the "assigned_server_tv_port" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssignedServerTvPort {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "assigned_server_tv_port" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssignedServerTvPort() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "legacy_server_steamdatagram_address" field.</summary>
    public const int LegacyServerSteamdatagramAddressFieldNumber = 27;
    private readonly static pb::ByteString LegacyServerSteamdatagramAddressDefaultValue = pb::ByteString.Empty;

    private pb::ByteString legacyServerSteamdatagramAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LegacyServerSteamdatagramAddress {
      get { return legacyServerSteamdatagramAddress_ ?? LegacyServerSteamdatagramAddressDefaultValue; }
      set {
        legacyServerSteamdatagramAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "legacy_server_steamdatagram_address" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLegacyServerSteamdatagramAddress {
      get { return legacyServerSteamdatagramAddress_ != null; }
    }
    /// <summary>Clears the value of the "legacy_server_steamdatagram_address" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLegacyServerSteamdatagramAddress() {
      legacyServerSteamdatagramAddress_ = null;
    }

    /// <summary>Field number for the "server_key" field.</summary>
    public const int ServerKeyFieldNumber = 5;
    private readonly static string ServerKeyDefaultValue = "";

    private string serverKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerKey {
      get { return serverKey_ ?? ServerKeyDefaultValue; }
      set {
        serverKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "server_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerKey {
      get { return serverKey_ != null; }
    }
    /// <summary>Clears the value of the "server_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerKey() {
      serverKey_ = null;
    }

    /// <summary>Field number for the "server_hibernation" field.</summary>
    public const int ServerHibernationFieldNumber = 6;
    private readonly static bool ServerHibernationDefaultValue = false;

    private bool serverHibernation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ServerHibernation {
      get { if ((_hasBits0 & 16) != 0) { return serverHibernation_; } else { return ServerHibernationDefaultValue; } }
      set {
        _hasBits0 |= 16;
        serverHibernation_ = value;
      }
    }
    /// <summary>Gets whether the "server_hibernation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerHibernation {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "server_hibernation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerHibernation() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "server_type" field.</summary>
    public const int ServerTypeFieldNumber = 7;
    private readonly static global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.ServerType ServerTypeDefaultValue = global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.ServerType.Unspecified;

    private global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.ServerType serverType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.ServerType ServerType {
      get { if ((_hasBits0 & 32) != 0) { return serverType_; } else { return ServerTypeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        serverType_ = value;
      }
    }
    /// <summary>Gets whether the "server_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerType {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "server_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerType() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "server_region" field.</summary>
    public const int ServerRegionFieldNumber = 8;
    private readonly static uint ServerRegionDefaultValue = 0;

    private uint serverRegion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerRegion {
      get { if ((_hasBits0 & 64) != 0) { return serverRegion_; } else { return ServerRegionDefaultValue; } }
      set {
        _hasBits0 |= 64;
        serverRegion_ = value;
      }
    }
    /// <summary>Gets whether the "server_region" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerRegion {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "server_region" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerRegion() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "server_loadavg" field.</summary>
    public const int ServerLoadavgFieldNumber = 9;
    private readonly static float ServerLoadavgDefaultValue = 0F;

    private float serverLoadavg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ServerLoadavg {
      get { if ((_hasBits0 & 128) != 0) { return serverLoadavg_; } else { return ServerLoadavgDefaultValue; } }
      set {
        _hasBits0 |= 128;
        serverLoadavg_ = value;
      }
    }
    /// <summary>Gets whether the "server_loadavg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerLoadavg {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "server_loadavg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerLoadavg() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "server_tv_broadcast_time" field.</summary>
    public const int ServerTvBroadcastTimeFieldNumber = 10;
    private readonly static float ServerTvBroadcastTimeDefaultValue = 0F;

    private float serverTvBroadcastTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ServerTvBroadcastTime {
      get { if ((_hasBits0 & 256) != 0) { return serverTvBroadcastTime_; } else { return ServerTvBroadcastTimeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        serverTvBroadcastTime_ = value;
      }
    }
    /// <summary>Gets whether the "server_tv_broadcast_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerTvBroadcastTime {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "server_tv_broadcast_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerTvBroadcastTime() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "server_game_time" field.</summary>
    public const int ServerGameTimeFieldNumber = 11;
    private readonly static float ServerGameTimeDefaultValue = 0F;

    private float serverGameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ServerGameTime {
      get { if ((_hasBits0 & 512) != 0) { return serverGameTime_; } else { return ServerGameTimeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        serverGameTime_ = value;
      }
    }
    /// <summary>Gets whether the "server_game_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerGameTime {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "server_game_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerGameTime() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "server_relay_connected_steam_id" field.</summary>
    public const int ServerRelayConnectedSteamIdFieldNumber = 12;
    private readonly static ulong ServerRelayConnectedSteamIdDefaultValue = 0UL;

    private ulong serverRelayConnectedSteamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerRelayConnectedSteamId {
      get { if ((_hasBits0 & 1024) != 0) { return serverRelayConnectedSteamId_; } else { return ServerRelayConnectedSteamIdDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        serverRelayConnectedSteamId_ = value;
      }
    }
    /// <summary>Gets whether the "server_relay_connected_steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerRelayConnectedSteamId {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "server_relay_connected_steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerRelayConnectedSteamId() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "relay_slots_max" field.</summary>
    public const int RelaySlotsMaxFieldNumber = 13;
    private readonly static uint RelaySlotsMaxDefaultValue = 0;

    private uint relaySlotsMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RelaySlotsMax {
      get { if ((_hasBits0 & 2048) != 0) { return relaySlotsMax_; } else { return RelaySlotsMaxDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        relaySlotsMax_ = value;
      }
    }
    /// <summary>Gets whether the "relay_slots_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRelaySlotsMax {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "relay_slots_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRelaySlotsMax() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "relays_connected" field.</summary>
    public const int RelaysConnectedFieldNumber = 14;
    private readonly static int RelaysConnectedDefaultValue = 0;

    private int relaysConnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelaysConnected {
      get { if ((_hasBits0 & 4096) != 0) { return relaysConnected_; } else { return RelaysConnectedDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        relaysConnected_ = value;
      }
    }
    /// <summary>Gets whether the "relays_connected" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRelaysConnected {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "relays_connected" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRelaysConnected() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "relay_clients_connected" field.</summary>
    public const int RelayClientsConnectedFieldNumber = 15;
    private readonly static int RelayClientsConnectedDefaultValue = 0;

    private int relayClientsConnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelayClientsConnected {
      get { if ((_hasBits0 & 8192) != 0) { return relayClientsConnected_; } else { return RelayClientsConnectedDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        relayClientsConnected_ = value;
      }
    }
    /// <summary>Gets whether the "relay_clients_connected" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRelayClientsConnected {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "relay_clients_connected" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRelayClientsConnected() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "relayed_game_server_steam_id" field.</summary>
    public const int RelayedGameServerSteamIdFieldNumber = 16;
    private readonly static ulong RelayedGameServerSteamIdDefaultValue = 0UL;

    private ulong relayedGameServerSteamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RelayedGameServerSteamId {
      get { if ((_hasBits0 & 16384) != 0) { return relayedGameServerSteamId_; } else { return RelayedGameServerSteamIdDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        relayedGameServerSteamId_ = value;
      }
    }
    /// <summary>Gets whether the "relayed_game_server_steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRelayedGameServerSteamId {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "relayed_game_server_steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRelayedGameServerSteamId() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "parent_relay_count" field.</summary>
    public const int ParentRelayCountFieldNumber = 17;
    private readonly static uint ParentRelayCountDefaultValue = 0;

    private uint parentRelayCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParentRelayCount {
      get { if ((_hasBits0 & 32768) != 0) { return parentRelayCount_; } else { return ParentRelayCountDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        parentRelayCount_ = value;
      }
    }
    /// <summary>Gets whether the "parent_relay_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentRelayCount {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "parent_relay_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentRelayCount() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "tv_secret_code" field.</summary>
    public const int TvSecretCodeFieldNumber = 18;
    private readonly static ulong TvSecretCodeDefaultValue = 0UL;

    private ulong tvSecretCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TvSecretCode {
      get { if ((_hasBits0 & 65536) != 0) { return tvSecretCode_; } else { return TvSecretCodeDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        tvSecretCode_ = value;
      }
    }
    /// <summary>Gets whether the "tv_secret_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTvSecretCode {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "tv_secret_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTvSecretCode() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "server_version" field.</summary>
    public const int ServerVersionFieldNumber = 19;
    private readonly static uint ServerVersionDefaultValue = 0;

    private uint serverVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerVersion {
      get { if ((_hasBits0 & 131072) != 0) { return serverVersion_; } else { return ServerVersionDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        serverVersion_ = value;
      }
    }
    /// <summary>Gets whether the "server_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerVersion {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "server_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerVersion() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "server_cluster" field.</summary>
    public const int ServerClusterFieldNumber = 20;
    private readonly static uint ServerClusterDefaultValue = 0;

    private uint serverCluster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerCluster {
      get { if ((_hasBits0 & 262144) != 0) { return serverCluster_; } else { return ServerClusterDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        serverCluster_ = value;
      }
    }
    /// <summary>Gets whether the "server_cluster" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerCluster {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "server_cluster" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerCluster() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "allow_custom_games" field.</summary>
    public const int AllowCustomGamesFieldNumber = 23;
    private readonly static global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.CustomGames AllowCustomGamesDefaultValue = global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.CustomGames.Both;

    private global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.CustomGames allowCustomGames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.CustomGames AllowCustomGames {
      get { if ((_hasBits0 & 1048576) != 0) { return allowCustomGames_; } else { return AllowCustomGamesDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        allowCustomGames_ = value;
      }
    }
    /// <summary>Gets whether the "allow_custom_games" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllowCustomGames {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "allow_custom_games" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllowCustomGames() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 24;
    private readonly static uint BuildVersionDefaultValue = 0;

    private uint buildVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildVersion {
      get { if ((_hasBits0 & 2097152) != 0) { return buildVersion_; } else { return BuildVersionDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        buildVersion_ = value;
      }
    }
    /// <summary>Gets whether the "build_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuildVersion {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "build_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuildVersion() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "srcds_instance" field.</summary>
    public const int SrcdsInstanceFieldNumber = 26;
    private readonly static uint SrcdsInstanceDefaultValue = 0;

    private uint srcdsInstance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcdsInstance {
      get { if ((_hasBits0 & 4194304) != 0) { return srcdsInstance_; } else { return SrcdsInstanceDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        srcdsInstance_ = value;
      }
    }
    /// <summary>Gets whether the "srcds_instance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSrcdsInstance {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "srcds_instance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSrcdsInstance() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "dev_force_server_type" field.</summary>
    public const int DevForceServerTypeFieldNumber = 28;
    private readonly static bool DevForceServerTypeDefaultValue = false;

    private bool devForceServerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DevForceServerType {
      get { if ((_hasBits0 & 8388608) != 0) { return devForceServerType_; } else { return DevForceServerTypeDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        devForceServerType_ = value;
      }
    }
    /// <summary>Gets whether the "dev_force_server_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDevForceServerType {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "dev_force_server_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDevForceServerType() {
      _hasBits0 &= ~8388608;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerPublicIpAddr != other.ServerPublicIpAddr) return false;
      if (ServerPrivateIpAddr != other.ServerPrivateIpAddr) return false;
      if (ServerPort != other.ServerPort) return false;
      if (ServerTvPort != other.ServerTvPort) return false;
      if (AssignedServerTvPort != other.AssignedServerTvPort) return false;
      if (LegacyServerSteamdatagramAddress != other.LegacyServerSteamdatagramAddress) return false;
      if (ServerKey != other.ServerKey) return false;
      if (ServerHibernation != other.ServerHibernation) return false;
      if (ServerType != other.ServerType) return false;
      if (ServerRegion != other.ServerRegion) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ServerLoadavg, other.ServerLoadavg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ServerTvBroadcastTime, other.ServerTvBroadcastTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ServerGameTime, other.ServerGameTime)) return false;
      if (ServerRelayConnectedSteamId != other.ServerRelayConnectedSteamId) return false;
      if (RelaySlotsMax != other.RelaySlotsMax) return false;
      if (RelaysConnected != other.RelaysConnected) return false;
      if (RelayClientsConnected != other.RelayClientsConnected) return false;
      if (RelayedGameServerSteamId != other.RelayedGameServerSteamId) return false;
      if (ParentRelayCount != other.ParentRelayCount) return false;
      if (TvSecretCode != other.TvSecretCode) return false;
      if (ServerVersion != other.ServerVersion) return false;
      if (ServerCluster != other.ServerCluster) return false;
      if (AllowCustomGames != other.AllowCustomGames) return false;
      if (BuildVersion != other.BuildVersion) return false;
      if (SrcdsInstance != other.SrcdsInstance) return false;
      if (DevForceServerType != other.DevForceServerType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServerPublicIpAddr) hash ^= ServerPublicIpAddr.GetHashCode();
      if (HasServerPrivateIpAddr) hash ^= ServerPrivateIpAddr.GetHashCode();
      if (HasServerPort) hash ^= ServerPort.GetHashCode();
      if (HasServerTvPort) hash ^= ServerTvPort.GetHashCode();
      if (HasAssignedServerTvPort) hash ^= AssignedServerTvPort.GetHashCode();
      if (HasLegacyServerSteamdatagramAddress) hash ^= LegacyServerSteamdatagramAddress.GetHashCode();
      if (HasServerKey) hash ^= ServerKey.GetHashCode();
      if (HasServerHibernation) hash ^= ServerHibernation.GetHashCode();
      if (HasServerType) hash ^= ServerType.GetHashCode();
      if (HasServerRegion) hash ^= ServerRegion.GetHashCode();
      if (HasServerLoadavg) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ServerLoadavg);
      if (HasServerTvBroadcastTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ServerTvBroadcastTime);
      if (HasServerGameTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ServerGameTime);
      if (HasServerRelayConnectedSteamId) hash ^= ServerRelayConnectedSteamId.GetHashCode();
      if (HasRelaySlotsMax) hash ^= RelaySlotsMax.GetHashCode();
      if (HasRelaysConnected) hash ^= RelaysConnected.GetHashCode();
      if (HasRelayClientsConnected) hash ^= RelayClientsConnected.GetHashCode();
      if (HasRelayedGameServerSteamId) hash ^= RelayedGameServerSteamId.GetHashCode();
      if (HasParentRelayCount) hash ^= ParentRelayCount.GetHashCode();
      if (HasTvSecretCode) hash ^= TvSecretCode.GetHashCode();
      if (HasServerVersion) hash ^= ServerVersion.GetHashCode();
      if (HasServerCluster) hash ^= ServerCluster.GetHashCode();
      if (HasAllowCustomGames) hash ^= AllowCustomGames.GetHashCode();
      if (HasBuildVersion) hash ^= BuildVersion.GetHashCode();
      if (HasSrcdsInstance) hash ^= SrcdsInstance.GetHashCode();
      if (HasDevForceServerType) hash ^= DevForceServerType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasServerPublicIpAddr) {
        output.WriteRawTag(13);
        output.WriteFixed32(ServerPublicIpAddr);
      }
      if (HasServerPrivateIpAddr) {
        output.WriteRawTag(21);
        output.WriteFixed32(ServerPrivateIpAddr);
      }
      if (HasServerPort) {
        output.WriteRawTag(24);
        output.WriteUInt32(ServerPort);
      }
      if (HasServerTvPort) {
        output.WriteRawTag(32);
        output.WriteUInt32(ServerTvPort);
      }
      if (HasServerKey) {
        output.WriteRawTag(42);
        output.WriteString(ServerKey);
      }
      if (HasServerHibernation) {
        output.WriteRawTag(48);
        output.WriteBool(ServerHibernation);
      }
      if (HasServerType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ServerType);
      }
      if (HasServerRegion) {
        output.WriteRawTag(64);
        output.WriteUInt32(ServerRegion);
      }
      if (HasServerLoadavg) {
        output.WriteRawTag(77);
        output.WriteFloat(ServerLoadavg);
      }
      if (HasServerTvBroadcastTime) {
        output.WriteRawTag(85);
        output.WriteFloat(ServerTvBroadcastTime);
      }
      if (HasServerGameTime) {
        output.WriteRawTag(93);
        output.WriteFloat(ServerGameTime);
      }
      if (HasServerRelayConnectedSteamId) {
        output.WriteRawTag(97);
        output.WriteFixed64(ServerRelayConnectedSteamId);
      }
      if (HasRelaySlotsMax) {
        output.WriteRawTag(104);
        output.WriteUInt32(RelaySlotsMax);
      }
      if (HasRelaysConnected) {
        output.WriteRawTag(112);
        output.WriteInt32(RelaysConnected);
      }
      if (HasRelayClientsConnected) {
        output.WriteRawTag(120);
        output.WriteInt32(RelayClientsConnected);
      }
      if (HasRelayedGameServerSteamId) {
        output.WriteRawTag(129, 1);
        output.WriteFixed64(RelayedGameServerSteamId);
      }
      if (HasParentRelayCount) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ParentRelayCount);
      }
      if (HasTvSecretCode) {
        output.WriteRawTag(145, 1);
        output.WriteFixed64(TvSecretCode);
      }
      if (HasServerVersion) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(ServerVersion);
      }
      if (HasServerCluster) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(ServerCluster);
      }
      if (HasAssignedServerTvPort) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(AssignedServerTvPort);
      }
      if (HasAllowCustomGames) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) AllowCustomGames);
      }
      if (HasBuildVersion) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(BuildVersion);
      }
      if (HasSrcdsInstance) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(SrcdsInstance);
      }
      if (HasLegacyServerSteamdatagramAddress) {
        output.WriteRawTag(218, 1);
        output.WriteBytes(LegacyServerSteamdatagramAddress);
      }
      if (HasDevForceServerType) {
        output.WriteRawTag(224, 1);
        output.WriteBool(DevForceServerType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasServerPublicIpAddr) {
        output.WriteRawTag(13);
        output.WriteFixed32(ServerPublicIpAddr);
      }
      if (HasServerPrivateIpAddr) {
        output.WriteRawTag(21);
        output.WriteFixed32(ServerPrivateIpAddr);
      }
      if (HasServerPort) {
        output.WriteRawTag(24);
        output.WriteUInt32(ServerPort);
      }
      if (HasServerTvPort) {
        output.WriteRawTag(32);
        output.WriteUInt32(ServerTvPort);
      }
      if (HasServerKey) {
        output.WriteRawTag(42);
        output.WriteString(ServerKey);
      }
      if (HasServerHibernation) {
        output.WriteRawTag(48);
        output.WriteBool(ServerHibernation);
      }
      if (HasServerType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ServerType);
      }
      if (HasServerRegion) {
        output.WriteRawTag(64);
        output.WriteUInt32(ServerRegion);
      }
      if (HasServerLoadavg) {
        output.WriteRawTag(77);
        output.WriteFloat(ServerLoadavg);
      }
      if (HasServerTvBroadcastTime) {
        output.WriteRawTag(85);
        output.WriteFloat(ServerTvBroadcastTime);
      }
      if (HasServerGameTime) {
        output.WriteRawTag(93);
        output.WriteFloat(ServerGameTime);
      }
      if (HasServerRelayConnectedSteamId) {
        output.WriteRawTag(97);
        output.WriteFixed64(ServerRelayConnectedSteamId);
      }
      if (HasRelaySlotsMax) {
        output.WriteRawTag(104);
        output.WriteUInt32(RelaySlotsMax);
      }
      if (HasRelaysConnected) {
        output.WriteRawTag(112);
        output.WriteInt32(RelaysConnected);
      }
      if (HasRelayClientsConnected) {
        output.WriteRawTag(120);
        output.WriteInt32(RelayClientsConnected);
      }
      if (HasRelayedGameServerSteamId) {
        output.WriteRawTag(129, 1);
        output.WriteFixed64(RelayedGameServerSteamId);
      }
      if (HasParentRelayCount) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ParentRelayCount);
      }
      if (HasTvSecretCode) {
        output.WriteRawTag(145, 1);
        output.WriteFixed64(TvSecretCode);
      }
      if (HasServerVersion) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(ServerVersion);
      }
      if (HasServerCluster) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(ServerCluster);
      }
      if (HasAssignedServerTvPort) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(AssignedServerTvPort);
      }
      if (HasAllowCustomGames) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) AllowCustomGames);
      }
      if (HasBuildVersion) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(BuildVersion);
      }
      if (HasSrcdsInstance) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(SrcdsInstance);
      }
      if (HasLegacyServerSteamdatagramAddress) {
        output.WriteRawTag(218, 1);
        output.WriteBytes(LegacyServerSteamdatagramAddress);
      }
      if (HasDevForceServerType) {
        output.WriteRawTag(224, 1);
        output.WriteBool(DevForceServerType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServerPublicIpAddr) {
        size += 1 + 4;
      }
      if (HasServerPrivateIpAddr) {
        size += 1 + 4;
      }
      if (HasServerPort) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerPort);
      }
      if (HasServerTvPort) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTvPort);
      }
      if (HasAssignedServerTvPort) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssignedServerTvPort);
      }
      if (HasLegacyServerSteamdatagramAddress) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(LegacyServerSteamdatagramAddress);
      }
      if (HasServerKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerKey);
      }
      if (HasServerHibernation) {
        size += 1 + 1;
      }
      if (HasServerType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServerType);
      }
      if (HasServerRegion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerRegion);
      }
      if (HasServerLoadavg) {
        size += 1 + 4;
      }
      if (HasServerTvBroadcastTime) {
        size += 1 + 4;
      }
      if (HasServerGameTime) {
        size += 1 + 4;
      }
      if (HasServerRelayConnectedSteamId) {
        size += 1 + 8;
      }
      if (HasRelaySlotsMax) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RelaySlotsMax);
      }
      if (HasRelaysConnected) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelaysConnected);
      }
      if (HasRelayClientsConnected) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelayClientsConnected);
      }
      if (HasRelayedGameServerSteamId) {
        size += 2 + 8;
      }
      if (HasParentRelayCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ParentRelayCount);
      }
      if (HasTvSecretCode) {
        size += 2 + 8;
      }
      if (HasServerVersion) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ServerVersion);
      }
      if (HasServerCluster) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ServerCluster);
      }
      if (HasAllowCustomGames) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AllowCustomGames);
      }
      if (HasBuildVersion) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuildVersion);
      }
      if (HasSrcdsInstance) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SrcdsInstance);
      }
      if (HasDevForceServerType) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasServerPublicIpAddr) {
        ServerPublicIpAddr = other.ServerPublicIpAddr;
      }
      if (other.HasServerPrivateIpAddr) {
        ServerPrivateIpAddr = other.ServerPrivateIpAddr;
      }
      if (other.HasServerPort) {
        ServerPort = other.ServerPort;
      }
      if (other.HasServerTvPort) {
        ServerTvPort = other.ServerTvPort;
      }
      if (other.HasAssignedServerTvPort) {
        AssignedServerTvPort = other.AssignedServerTvPort;
      }
      if (other.HasLegacyServerSteamdatagramAddress) {
        LegacyServerSteamdatagramAddress = other.LegacyServerSteamdatagramAddress;
      }
      if (other.HasServerKey) {
        ServerKey = other.ServerKey;
      }
      if (other.HasServerHibernation) {
        ServerHibernation = other.ServerHibernation;
      }
      if (other.HasServerType) {
        ServerType = other.ServerType;
      }
      if (other.HasServerRegion) {
        ServerRegion = other.ServerRegion;
      }
      if (other.HasServerLoadavg) {
        ServerLoadavg = other.ServerLoadavg;
      }
      if (other.HasServerTvBroadcastTime) {
        ServerTvBroadcastTime = other.ServerTvBroadcastTime;
      }
      if (other.HasServerGameTime) {
        ServerGameTime = other.ServerGameTime;
      }
      if (other.HasServerRelayConnectedSteamId) {
        ServerRelayConnectedSteamId = other.ServerRelayConnectedSteamId;
      }
      if (other.HasRelaySlotsMax) {
        RelaySlotsMax = other.RelaySlotsMax;
      }
      if (other.HasRelaysConnected) {
        RelaysConnected = other.RelaysConnected;
      }
      if (other.HasRelayClientsConnected) {
        RelayClientsConnected = other.RelayClientsConnected;
      }
      if (other.HasRelayedGameServerSteamId) {
        RelayedGameServerSteamId = other.RelayedGameServerSteamId;
      }
      if (other.HasParentRelayCount) {
        ParentRelayCount = other.ParentRelayCount;
      }
      if (other.HasTvSecretCode) {
        TvSecretCode = other.TvSecretCode;
      }
      if (other.HasServerVersion) {
        ServerVersion = other.ServerVersion;
      }
      if (other.HasServerCluster) {
        ServerCluster = other.ServerCluster;
      }
      if (other.HasAllowCustomGames) {
        AllowCustomGames = other.AllowCustomGames;
      }
      if (other.HasBuildVersion) {
        BuildVersion = other.BuildVersion;
      }
      if (other.HasSrcdsInstance) {
        SrcdsInstance = other.SrcdsInstance;
      }
      if (other.HasDevForceServerType) {
        DevForceServerType = other.DevForceServerType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            ServerPublicIpAddr = input.ReadFixed32();
            break;
          }
          case 21: {
            ServerPrivateIpAddr = input.ReadFixed32();
            break;
          }
          case 24: {
            ServerPort = input.ReadUInt32();
            break;
          }
          case 32: {
            ServerTvPort = input.ReadUInt32();
            break;
          }
          case 42: {
            ServerKey = input.ReadString();
            break;
          }
          case 48: {
            ServerHibernation = input.ReadBool();
            break;
          }
          case 56: {
            ServerType = (global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.ServerType) input.ReadEnum();
            break;
          }
          case 64: {
            ServerRegion = input.ReadUInt32();
            break;
          }
          case 77: {
            ServerLoadavg = input.ReadFloat();
            break;
          }
          case 85: {
            ServerTvBroadcastTime = input.ReadFloat();
            break;
          }
          case 93: {
            ServerGameTime = input.ReadFloat();
            break;
          }
          case 97: {
            ServerRelayConnectedSteamId = input.ReadFixed64();
            break;
          }
          case 104: {
            RelaySlotsMax = input.ReadUInt32();
            break;
          }
          case 112: {
            RelaysConnected = input.ReadInt32();
            break;
          }
          case 120: {
            RelayClientsConnected = input.ReadInt32();
            break;
          }
          case 129: {
            RelayedGameServerSteamId = input.ReadFixed64();
            break;
          }
          case 136: {
            ParentRelayCount = input.ReadUInt32();
            break;
          }
          case 145: {
            TvSecretCode = input.ReadFixed64();
            break;
          }
          case 152: {
            ServerVersion = input.ReadUInt32();
            break;
          }
          case 160: {
            ServerCluster = input.ReadUInt32();
            break;
          }
          case 176: {
            AssignedServerTvPort = input.ReadUInt32();
            break;
          }
          case 184: {
            AllowCustomGames = (global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.CustomGames) input.ReadEnum();
            break;
          }
          case 192: {
            BuildVersion = input.ReadUInt32();
            break;
          }
          case 208: {
            SrcdsInstance = input.ReadUInt32();
            break;
          }
          case 218: {
            LegacyServerSteamdatagramAddress = input.ReadBytes();
            break;
          }
          case 224: {
            DevForceServerType = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            ServerPublicIpAddr = input.ReadFixed32();
            break;
          }
          case 21: {
            ServerPrivateIpAddr = input.ReadFixed32();
            break;
          }
          case 24: {
            ServerPort = input.ReadUInt32();
            break;
          }
          case 32: {
            ServerTvPort = input.ReadUInt32();
            break;
          }
          case 42: {
            ServerKey = input.ReadString();
            break;
          }
          case 48: {
            ServerHibernation = input.ReadBool();
            break;
          }
          case 56: {
            ServerType = (global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.ServerType) input.ReadEnum();
            break;
          }
          case 64: {
            ServerRegion = input.ReadUInt32();
            break;
          }
          case 77: {
            ServerLoadavg = input.ReadFloat();
            break;
          }
          case 85: {
            ServerTvBroadcastTime = input.ReadFloat();
            break;
          }
          case 93: {
            ServerGameTime = input.ReadFloat();
            break;
          }
          case 97: {
            ServerRelayConnectedSteamId = input.ReadFixed64();
            break;
          }
          case 104: {
            RelaySlotsMax = input.ReadUInt32();
            break;
          }
          case 112: {
            RelaysConnected = input.ReadInt32();
            break;
          }
          case 120: {
            RelayClientsConnected = input.ReadInt32();
            break;
          }
          case 129: {
            RelayedGameServerSteamId = input.ReadFixed64();
            break;
          }
          case 136: {
            ParentRelayCount = input.ReadUInt32();
            break;
          }
          case 145: {
            TvSecretCode = input.ReadFixed64();
            break;
          }
          case 152: {
            ServerVersion = input.ReadUInt32();
            break;
          }
          case 160: {
            ServerCluster = input.ReadUInt32();
            break;
          }
          case 176: {
            AssignedServerTvPort = input.ReadUInt32();
            break;
          }
          case 184: {
            AllowCustomGames = (global::Steam.Protos.Dota2.CMsgGameServerInfo.Types.CustomGames) input.ReadEnum();
            break;
          }
          case 192: {
            BuildVersion = input.ReadUInt32();
            break;
          }
          case 208: {
            SrcdsInstance = input.ReadUInt32();
            break;
          }
          case 218: {
            LegacyServerSteamdatagramAddress = input.ReadBytes();
            break;
          }
          case 224: {
            DevForceServerType = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGameServerInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ServerType {
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("GAME")] Game = 1,
        [pbr::OriginalName("PROXY")] Proxy = 2,
        [pbr::OriginalName("DOTA_ONLY")] DotaOnly = 4,
        [pbr::OriginalName("CUSTOM_GAME_ONLY")] CustomGameOnly = 5,
        [pbr::OriginalName("EVENT_GAME_ONLY")] EventGameOnly = 6,
      }

      public enum CustomGames {
        [pbr::OriginalName("BOTH")] Both = 0,
        [pbr::OriginalName("NONE")] None = 1,
        [pbr::OriginalName("ONLY")] Only = 2,
        [pbr::OriginalName("EVENT")] Event = 3,
      }

    }
    #endregion

  }

  public sealed partial class CMsgLeaverDetected : pb::IMessage<CMsgLeaverDetected>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLeaverDetected> _parser = new pb::MessageParser<CMsgLeaverDetected>(() => new CMsgLeaverDetected());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLeaverDetected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaverDetected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaverDetected(CMsgLeaverDetected other) : this() {
      _hasBits0 = other._hasBits0;
      steamId_ = other.steamId_;
      leaverStatus_ = other.leaverStatus_;
      leaverState_ = other.leaverState_ != null ? other.leaverState_.Clone() : null;
      serverCluster_ = other.serverCluster_;
      disconnectReason_ = other.disconnectReason_;
      poorNetworkConditions_ = other.poorNetworkConditions_ != null ? other.poorNetworkConditions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaverDetected Clone() {
      return new CMsgLeaverDetected(this);
    }

    /// <summary>Field number for the "steam_id" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private readonly static ulong SteamIdDefaultValue = 0UL;

    private ulong steamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamId {
      get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        steamId_ = value;
      }
    }
    /// <summary>Gets whether the "steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSteamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSteamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leaver_status" field.</summary>
    public const int LeaverStatusFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.DOTALeaverStatus_t LeaverStatusDefaultValue = global::Steam.Protos.Dota2.DOTALeaverStatus_t.DotaLeaverNone;

    private global::Steam.Protos.Dota2.DOTALeaverStatus_t leaverStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTALeaverStatus_t LeaverStatus {
      get { if ((_hasBits0 & 2) != 0) { return leaverStatus_; } else { return LeaverStatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leaverStatus_ = value;
      }
    }
    /// <summary>Gets whether the "leaver_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaverStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leaver_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaverStatus() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "leaver_state" field.</summary>
    public const int LeaverStateFieldNumber = 4;
    private global::Steam.Protos.Dota2.CMsgLeaverState leaverState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgLeaverState LeaverState {
      get { return leaverState_; }
      set {
        leaverState_ = value;
      }
    }

    /// <summary>Field number for the "server_cluster" field.</summary>
    public const int ServerClusterFieldNumber = 5;
    private readonly static uint ServerClusterDefaultValue = 0;

    private uint serverCluster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerCluster {
      get { if ((_hasBits0 & 4) != 0) { return serverCluster_; } else { return ServerClusterDefaultValue; } }
      set {
        _hasBits0 |= 4;
        serverCluster_ = value;
      }
    }
    /// <summary>Gets whether the "server_cluster" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerCluster {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "server_cluster" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerCluster() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "disconnect_reason" field.</summary>
    public const int DisconnectReasonFieldNumber = 6;
    private readonly static global::Steam.Protos.Dota2.ENetworkDisconnectionReason DisconnectReasonDefaultValue = global::Steam.Protos.Dota2.ENetworkDisconnectionReason.NetworkDisconnectInvalid;

    private global::Steam.Protos.Dota2.ENetworkDisconnectionReason disconnectReason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.ENetworkDisconnectionReason DisconnectReason {
      get { if ((_hasBits0 & 8) != 0) { return disconnectReason_; } else { return DisconnectReasonDefaultValue; } }
      set {
        _hasBits0 |= 8;
        disconnectReason_ = value;
      }
    }
    /// <summary>Gets whether the "disconnect_reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDisconnectReason {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "disconnect_reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisconnectReason() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "poor_network_conditions" field.</summary>
    public const int PoorNetworkConditionsFieldNumber = 7;
    private global::Steam.Protos.Dota2.CMsgPoorNetworkConditions poorNetworkConditions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPoorNetworkConditions PoorNetworkConditions {
      get { return poorNetworkConditions_; }
      set {
        poorNetworkConditions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLeaverDetected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLeaverDetected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (LeaverStatus != other.LeaverStatus) return false;
      if (!object.Equals(LeaverState, other.LeaverState)) return false;
      if (ServerCluster != other.ServerCluster) return false;
      if (DisconnectReason != other.DisconnectReason) return false;
      if (!object.Equals(PoorNetworkConditions, other.PoorNetworkConditions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSteamId) hash ^= SteamId.GetHashCode();
      if (HasLeaverStatus) hash ^= LeaverStatus.GetHashCode();
      if (leaverState_ != null) hash ^= LeaverState.GetHashCode();
      if (HasServerCluster) hash ^= ServerCluster.GetHashCode();
      if (HasDisconnectReason) hash ^= DisconnectReason.GetHashCode();
      if (poorNetworkConditions_ != null) hash ^= PoorNetworkConditions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSteamId) {
        output.WriteRawTag(9);
        output.WriteFixed64(SteamId);
      }
      if (HasLeaverStatus) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LeaverStatus);
      }
      if (leaverState_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LeaverState);
      }
      if (HasServerCluster) {
        output.WriteRawTag(40);
        output.WriteUInt32(ServerCluster);
      }
      if (HasDisconnectReason) {
        output.WriteRawTag(48);
        output.WriteEnum((int) DisconnectReason);
      }
      if (poorNetworkConditions_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PoorNetworkConditions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSteamId) {
        output.WriteRawTag(9);
        output.WriteFixed64(SteamId);
      }
      if (HasLeaverStatus) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LeaverStatus);
      }
      if (leaverState_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LeaverState);
      }
      if (HasServerCluster) {
        output.WriteRawTag(40);
        output.WriteUInt32(ServerCluster);
      }
      if (HasDisconnectReason) {
        output.WriteRawTag(48);
        output.WriteEnum((int) DisconnectReason);
      }
      if (poorNetworkConditions_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PoorNetworkConditions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSteamId) {
        size += 1 + 8;
      }
      if (HasLeaverStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LeaverStatus);
      }
      if (leaverState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaverState);
      }
      if (HasServerCluster) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerCluster);
      }
      if (HasDisconnectReason) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DisconnectReason);
      }
      if (poorNetworkConditions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoorNetworkConditions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLeaverDetected other) {
      if (other == null) {
        return;
      }
      if (other.HasSteamId) {
        SteamId = other.SteamId;
      }
      if (other.HasLeaverStatus) {
        LeaverStatus = other.LeaverStatus;
      }
      if (other.leaverState_ != null) {
        if (leaverState_ == null) {
          LeaverState = new global::Steam.Protos.Dota2.CMsgLeaverState();
        }
        LeaverState.MergeFrom(other.LeaverState);
      }
      if (other.HasServerCluster) {
        ServerCluster = other.ServerCluster;
      }
      if (other.HasDisconnectReason) {
        DisconnectReason = other.DisconnectReason;
      }
      if (other.poorNetworkConditions_ != null) {
        if (poorNetworkConditions_ == null) {
          PoorNetworkConditions = new global::Steam.Protos.Dota2.CMsgPoorNetworkConditions();
        }
        PoorNetworkConditions.MergeFrom(other.PoorNetworkConditions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            SteamId = input.ReadFixed64();
            break;
          }
          case 16: {
            LeaverStatus = (global::Steam.Protos.Dota2.DOTALeaverStatus_t) input.ReadEnum();
            break;
          }
          case 34: {
            if (leaverState_ == null) {
              LeaverState = new global::Steam.Protos.Dota2.CMsgLeaverState();
            }
            input.ReadMessage(LeaverState);
            break;
          }
          case 40: {
            ServerCluster = input.ReadUInt32();
            break;
          }
          case 48: {
            DisconnectReason = (global::Steam.Protos.Dota2.ENetworkDisconnectionReason) input.ReadEnum();
            break;
          }
          case 58: {
            if (poorNetworkConditions_ == null) {
              PoorNetworkConditions = new global::Steam.Protos.Dota2.CMsgPoorNetworkConditions();
            }
            input.ReadMessage(PoorNetworkConditions);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            SteamId = input.ReadFixed64();
            break;
          }
          case 16: {
            LeaverStatus = (global::Steam.Protos.Dota2.DOTALeaverStatus_t) input.ReadEnum();
            break;
          }
          case 34: {
            if (leaverState_ == null) {
              LeaverState = new global::Steam.Protos.Dota2.CMsgLeaverState();
            }
            input.ReadMessage(LeaverState);
            break;
          }
          case 40: {
            ServerCluster = input.ReadUInt32();
            break;
          }
          case 48: {
            DisconnectReason = (global::Steam.Protos.Dota2.ENetworkDisconnectionReason) input.ReadEnum();
            break;
          }
          case 58: {
            if (poorNetworkConditions_ == null) {
              PoorNetworkConditions = new global::Steam.Protos.Dota2.CMsgPoorNetworkConditions();
            }
            input.ReadMessage(PoorNetworkConditions);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLeaverDetectedResponse : pb::IMessage<CMsgLeaverDetectedResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLeaverDetectedResponse> _parser = new pb::MessageParser<CMsgLeaverDetectedResponse>(() => new CMsgLeaverDetectedResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLeaverDetectedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaverDetectedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaverDetectedResponse(CMsgLeaverDetectedResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaverDetectedResponse Clone() {
      return new CMsgLeaverDetectedResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static uint ResultDefaultValue = 0;

    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLeaverDetectedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLeaverDetectedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLeaverDetectedResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTAFantasyFinalPlayerStats : pb::IMessage<CMsgDOTAFantasyFinalPlayerStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAFantasyFinalPlayerStats> _parser = new pb::MessageParser<CMsgDOTAFantasyFinalPlayerStats>(() => new CMsgDOTAFantasyFinalPlayerStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAFantasyFinalPlayerStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyFinalPlayerStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyFinalPlayerStats(CMsgDOTAFantasyFinalPlayerStats other) : this() {
      stats_ = other.stats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyFinalPlayerStats Clone() {
      return new CMsgDOTAFantasyFinalPlayerStats(this);
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> _repeated_stats_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> stats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> Stats {
      get { return stats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAFantasyFinalPlayerStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAFantasyFinalPlayerStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stats_.Equals(other.stats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      stats_.WriteTo(output, _repeated_stats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      stats_.WriteTo(ref output, _repeated_stats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stats_.CalculateSize(_repeated_stats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAFantasyFinalPlayerStats other) {
      if (other == null) {
        return;
      }
      stats_.Add(other.stats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            stats_.AddEntriesFrom(input, _repeated_stats_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            stats_.AddEntriesFrom(ref input, _repeated_stats_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTAFantasyLivePlayerStats : pb::IMessage<CMsgDOTAFantasyLivePlayerStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAFantasyLivePlayerStats> _parser = new pb::MessageParser<CMsgDOTAFantasyLivePlayerStats>(() => new CMsgDOTAFantasyLivePlayerStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAFantasyLivePlayerStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyLivePlayerStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyLivePlayerStats(CMsgDOTAFantasyLivePlayerStats other) : this() {
      stats_ = other.stats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyLivePlayerStats Clone() {
      return new CMsgDOTAFantasyLivePlayerStats(this);
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> _repeated_stats_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> stats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> Stats {
      get { return stats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAFantasyLivePlayerStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAFantasyLivePlayerStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stats_.Equals(other.stats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      stats_.WriteTo(output, _repeated_stats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      stats_.WriteTo(ref output, _repeated_stats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stats_.CalculateSize(_repeated_stats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAFantasyLivePlayerStats other) {
      if (other == null) {
        return;
      }
      stats_.Add(other.stats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            stats_.AddEntriesFrom(input, _repeated_stats_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            stats_.AddEntriesFrom(ref input, _repeated_stats_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCRealtimeStats : pb::IMessage<CMsgServerToGCRealtimeStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCRealtimeStats> _parser = new pb::MessageParser<CMsgServerToGCRealtimeStats>(() => new CMsgServerToGCRealtimeStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCRealtimeStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRealtimeStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRealtimeStats(CMsgServerToGCRealtimeStats other) : this() {
      delayed_ = other.delayed_ != null ? other.delayed_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRealtimeStats Clone() {
      return new CMsgServerToGCRealtimeStats(this);
    }

    /// <summary>Field number for the "delayed" field.</summary>
    public const int DelayedFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse delayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse Delayed {
      get { return delayed_; }
      set {
        delayed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCRealtimeStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCRealtimeStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Delayed, other.Delayed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (delayed_ != null) hash ^= Delayed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (delayed_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Delayed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (delayed_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Delayed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (delayed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delayed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCRealtimeStats other) {
      if (other == null) {
        return;
      }
      if (other.delayed_ != null) {
        if (delayed_ == null) {
          Delayed = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse();
        }
        Delayed.MergeFrom(other.Delayed);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (delayed_ == null) {
              Delayed = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse();
            }
            input.ReadMessage(Delayed);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (delayed_ == null) {
              Delayed = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse();
            }
            input.ReadMessage(Delayed);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToServerRealtimeStatsStartStop : pb::IMessage<CMsgGCToServerRealtimeStatsStartStop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerRealtimeStatsStartStop> _parser = new pb::MessageParser<CMsgGCToServerRealtimeStatsStartStop>(() => new CMsgGCToServerRealtimeStatsStartStop());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerRealtimeStatsStartStop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerRealtimeStatsStartStop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerRealtimeStatsStartStop(CMsgGCToServerRealtimeStatsStartStop other) : this() {
      _hasBits0 = other._hasBits0;
      delayed_ = other.delayed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerRealtimeStatsStartStop Clone() {
      return new CMsgGCToServerRealtimeStatsStartStop(this);
    }

    /// <summary>Field number for the "delayed" field.</summary>
    public const int DelayedFieldNumber = 1;
    private readonly static bool DelayedDefaultValue = false;

    private bool delayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Delayed {
      get { if ((_hasBits0 & 1) != 0) { return delayed_; } else { return DelayedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        delayed_ = value;
      }
    }
    /// <summary>Gets whether the "delayed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDelayed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "delayed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDelayed() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerRealtimeStatsStartStop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerRealtimeStatsStartStop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Delayed != other.Delayed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDelayed) hash ^= Delayed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDelayed) {
        output.WriteRawTag(8);
        output.WriteBool(Delayed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDelayed) {
        output.WriteRawTag(8);
        output.WriteBool(Delayed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDelayed) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerRealtimeStatsStartStop other) {
      if (other == null) {
        return;
      }
      if (other.HasDelayed) {
        Delayed = other.Delayed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Delayed = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Delayed = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToServerUpdateSteamBroadcasting : pb::IMessage<CMsgGCToServerUpdateSteamBroadcasting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerUpdateSteamBroadcasting> _parser = new pb::MessageParser<CMsgGCToServerUpdateSteamBroadcasting>(() => new CMsgGCToServerUpdateSteamBroadcasting());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerUpdateSteamBroadcasting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerUpdateSteamBroadcasting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerUpdateSteamBroadcasting(CMsgGCToServerUpdateSteamBroadcasting other) : this() {
      _hasBits0 = other._hasBits0;
      active_ = other.active_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerUpdateSteamBroadcasting Clone() {
      return new CMsgGCToServerUpdateSteamBroadcasting(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private readonly static bool ActiveDefaultValue = false;

    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { if ((_hasBits0 & 1) != 0) { return active_; } else { return ActiveDefaultValue; } }
      set {
        _hasBits0 |= 1;
        active_ = value;
      }
    }
    /// <summary>Gets whether the "active" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActive {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "active" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActive() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerUpdateSteamBroadcasting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerUpdateSteamBroadcasting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasActive) hash ^= Active.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasActive) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasActive) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasActive) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerUpdateSteamBroadcasting other) {
      if (other == null) {
        return;
      }
      if (other.HasActive) {
        Active = other.Active;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSignOutGameplayStats : pb::IMessage<CMsgSignOutGameplayStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutGameplayStats> _parser = new pb::MessageParser<CMsgSignOutGameplayStats>(() => new CMsgSignOutGameplayStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutGameplayStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutGameplayStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutGameplayStats(CMsgSignOutGameplayStats other) : this() {
      teams_ = other.teams_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutGameplayStats Clone() {
      return new CMsgSignOutGameplayStats(this);
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CTeam> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CTeam.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CTeam> teams_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CTeam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CTeam> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutGameplayStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutGameplayStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!teams_.Equals(other.teams_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= teams_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      teams_.WriteTo(output, _repeated_teams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      teams_.WriteTo(ref output, _repeated_teams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teams_.CalculateSize(_repeated_teams_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutGameplayStats other) {
      if (other == null) {
        return;
      }
      teams_.Add(other.teams_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            teams_.AddEntriesFrom(ref input, _repeated_teams_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutGameplayStats message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CPlayer : pb::IMessage<CPlayer>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CPlayer> _parser = new pb::MessageParser<CPlayer>(() => new CPlayer());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CPlayer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CPlayer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CPlayer(CPlayer other) : this() {
          _hasBits0 = other._hasBits0;
          steamId_ = other.steamId_;
          playerSlot_ = other.playerSlot_;
          heroId_ = other.heroId_;
          timedPlayerStats_ = other.timedPlayerStats_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CPlayer Clone() {
          return new CPlayer(this);
        }

        /// <summary>Field number for the "steam_id" field.</summary>
        public const int SteamIdFieldNumber = 1;
        private readonly static ulong SteamIdDefaultValue = 0UL;

        private ulong steamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong SteamId {
          get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            steamId_ = value;
          }
        }
        /// <summary>Gets whether the "steam_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSteamId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "steam_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSteamId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "player_slot" field.</summary>
        public const int PlayerSlotFieldNumber = 2;
        private readonly static uint PlayerSlotDefaultValue = 0;

        private uint playerSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerSlot {
          get { if ((_hasBits0 & 2) != 0) { return playerSlot_; } else { return PlayerSlotDefaultValue; } }
          set {
            _hasBits0 |= 2;
            playerSlot_ = value;
          }
        }
        /// <summary>Gets whether the "player_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerSlot {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "player_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerSlot() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 3;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "timed_player_stats" field.</summary>
        public const int TimedPlayerStatsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchPlayerTimedStats> _repeated_timedPlayerStats_codec
            = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CMatchPlayerTimedStats.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerTimedStats> timedPlayerStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerTimedStats>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerTimedStats> TimedPlayerStats {
          get { return timedPlayerStats_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CPlayer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CPlayer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SteamId != other.SteamId) return false;
          if (PlayerSlot != other.PlayerSlot) return false;
          if (HeroId != other.HeroId) return false;
          if(!timedPlayerStats_.Equals(other.timedPlayerStats_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSteamId) hash ^= SteamId.GetHashCode();
          if (HasPlayerSlot) hash ^= PlayerSlot.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          hash ^= timedPlayerStats_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasSteamId) {
            output.WriteRawTag(9);
            output.WriteFixed64(SteamId);
          }
          if (HasPlayerSlot) {
            output.WriteRawTag(16);
            output.WriteUInt32(PlayerSlot);
          }
          if (HasHeroId) {
            output.WriteRawTag(24);
            output.WriteInt32(HeroId);
          }
          timedPlayerStats_.WriteTo(output, _repeated_timedPlayerStats_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasSteamId) {
            output.WriteRawTag(9);
            output.WriteFixed64(SteamId);
          }
          if (HasPlayerSlot) {
            output.WriteRawTag(16);
            output.WriteUInt32(PlayerSlot);
          }
          if (HasHeroId) {
            output.WriteRawTag(24);
            output.WriteInt32(HeroId);
          }
          timedPlayerStats_.WriteTo(ref output, _repeated_timedPlayerStats_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSteamId) {
            size += 1 + 8;
          }
          if (HasPlayerSlot) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          size += timedPlayerStats_.CalculateSize(_repeated_timedPlayerStats_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CPlayer other) {
          if (other == null) {
            return;
          }
          if (other.HasSteamId) {
            SteamId = other.SteamId;
          }
          if (other.HasPlayerSlot) {
            PlayerSlot = other.PlayerSlot;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          timedPlayerStats_.Add(other.timedPlayerStats_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                SteamId = input.ReadFixed64();
                break;
              }
              case 16: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadInt32();
                break;
              }
              case 34: {
                timedPlayerStats_.AddEntriesFrom(input, _repeated_timedPlayerStats_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                SteamId = input.ReadFixed64();
                break;
              }
              case 16: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadInt32();
                break;
              }
              case 34: {
                timedPlayerStats_.AddEntriesFrom(ref input, _repeated_timedPlayerStats_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class CTeam : pb::IMessage<CTeam>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CTeam> _parser = new pb::MessageParser<CTeam>(() => new CTeam());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CTeam> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CTeam() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CTeam(CTeam other) : this() {
          _hasBits0 = other._hasBits0;
          isWinningTeam_ = other.isWinningTeam_;
          isRadiantTeam_ = other.isRadiantTeam_;
          timedTeamStats_ = other.timedTeamStats_.Clone();
          players_ = other.players_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CTeam Clone() {
          return new CTeam(this);
        }

        /// <summary>Field number for the "is_winning_team" field.</summary>
        public const int IsWinningTeamFieldNumber = 1;
        private readonly static bool IsWinningTeamDefaultValue = false;

        private bool isWinningTeam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsWinningTeam {
          get { if ((_hasBits0 & 1) != 0) { return isWinningTeam_; } else { return IsWinningTeamDefaultValue; } }
          set {
            _hasBits0 |= 1;
            isWinningTeam_ = value;
          }
        }
        /// <summary>Gets whether the "is_winning_team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsWinningTeam {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "is_winning_team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsWinningTeam() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "is_radiant_team" field.</summary>
        public const int IsRadiantTeamFieldNumber = 2;
        private readonly static bool IsRadiantTeamDefaultValue = false;

        private bool isRadiantTeam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsRadiantTeam {
          get { if ((_hasBits0 & 2) != 0) { return isRadiantTeam_; } else { return IsRadiantTeamDefaultValue; } }
          set {
            _hasBits0 |= 2;
            isRadiantTeam_ = value;
          }
        }
        /// <summary>Gets whether the "is_radiant_team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsRadiantTeam {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "is_radiant_team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsRadiantTeam() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "timed_team_stats" field.</summary>
        public const int TimedTeamStatsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchTeamTimedStats> _repeated_timedTeamStats_codec
            = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMatchTeamTimedStats.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchTeamTimedStats> timedTeamStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchTeamTimedStats>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchTeamTimedStats> TimedTeamStats {
          get { return timedTeamStats_; }
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CPlayer> _repeated_players_codec
            = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CPlayer.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CPlayer> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CPlayer>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGameplayStats.Types.CPlayer> Players {
          get { return players_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CTeam);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CTeam other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (IsWinningTeam != other.IsWinningTeam) return false;
          if (IsRadiantTeam != other.IsRadiantTeam) return false;
          if(!timedTeamStats_.Equals(other.timedTeamStats_)) return false;
          if(!players_.Equals(other.players_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasIsWinningTeam) hash ^= IsWinningTeam.GetHashCode();
          if (HasIsRadiantTeam) hash ^= IsRadiantTeam.GetHashCode();
          hash ^= timedTeamStats_.GetHashCode();
          hash ^= players_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasIsWinningTeam) {
            output.WriteRawTag(8);
            output.WriteBool(IsWinningTeam);
          }
          if (HasIsRadiantTeam) {
            output.WriteRawTag(16);
            output.WriteBool(IsRadiantTeam);
          }
          timedTeamStats_.WriteTo(output, _repeated_timedTeamStats_codec);
          players_.WriteTo(output, _repeated_players_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasIsWinningTeam) {
            output.WriteRawTag(8);
            output.WriteBool(IsWinningTeam);
          }
          if (HasIsRadiantTeam) {
            output.WriteRawTag(16);
            output.WriteBool(IsRadiantTeam);
          }
          timedTeamStats_.WriteTo(ref output, _repeated_timedTeamStats_codec);
          players_.WriteTo(ref output, _repeated_players_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasIsWinningTeam) {
            size += 1 + 1;
          }
          if (HasIsRadiantTeam) {
            size += 1 + 1;
          }
          size += timedTeamStats_.CalculateSize(_repeated_timedTeamStats_codec);
          size += players_.CalculateSize(_repeated_players_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CTeam other) {
          if (other == null) {
            return;
          }
          if (other.HasIsWinningTeam) {
            IsWinningTeam = other.IsWinningTeam;
          }
          if (other.HasIsRadiantTeam) {
            IsRadiantTeam = other.IsRadiantTeam;
          }
          timedTeamStats_.Add(other.timedTeamStats_);
          players_.Add(other.players_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                IsWinningTeam = input.ReadBool();
                break;
              }
              case 16: {
                IsRadiantTeam = input.ReadBool();
                break;
              }
              case 26: {
                timedTeamStats_.AddEntriesFrom(input, _repeated_timedTeamStats_codec);
                break;
              }
              case 34: {
                players_.AddEntriesFrom(input, _repeated_players_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                IsWinningTeam = input.ReadBool();
                break;
              }
              case 16: {
                IsRadiantTeam = input.ReadBool();
                break;
              }
              case 26: {
                timedTeamStats_.AddEntriesFrom(ref input, _repeated_timedTeamStats_codec);
                break;
              }
              case 34: {
                players_.AddEntriesFrom(ref input, _repeated_players_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGameMatchSignOut : pb::IMessage<CMsgGameMatchSignOut>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameMatchSignOut> _parser = new pb::MessageParser<CMsgGameMatchSignOut>(() => new CMsgGameMatchSignOut());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameMatchSignOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOut(CMsgGameMatchSignOut other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      duration_ = other.duration_;
      goodGuysWin_ = other.goodGuysWin_;
      date_ = other.date_;
      teams_ = other.teams_.Clone();
      towerStatus_ = other.towerStatus_.Clone();
      barracksStatus_ = other.barracksStatus_.Clone();
      cluster_ = other.cluster_;
      serverAddr_ = other.serverAddr_;
      firstBloodTime_ = other.firstBloodTime_;
      eventScore_ = other.eventScore_;
      fantasyStats_ = other.fantasyStats_.Clone();
      playerStrangeCountAdjustments_ = other.playerStrangeCountAdjustments_.Clone();
      automaticSurrender_ = other.automaticSurrender_;
      serverVersion_ = other.serverVersion_;
      poorNetworkConditions_ = other.poorNetworkConditions_ != null ? other.poorNetworkConditions_.Clone() : null;
      additionalMsgs_ = other.additionalMsgs_.Clone();
      socialFeedEvents_ = other.socialFeedEvents_.Clone();
      averageNetworthDelta_ = other.averageNetworthDelta_;
      customGameData_ = other.customGameData_ != null ? other.customGameData_.Clone() : null;
      matchFlags_ = other.matchFlags_;
      teamScores_ = other.teamScores_.Clone();
      preGameDuration_ = other.preGameDuration_;
      eventGameLeaderboardEntries_ = other.eventGameLeaderboardEntries_.Clone();
      wardPlacements_ = other.wardPlacements_.Clone();
      gameplayStats_ = other.gameplayStats_ != null ? other.gameplayStats_.Clone() : null;
      extraMessages_ = other.extraMessages_.Clone();
      winningTeam_ = other.winningTeam_;
      normalizedWinProbabilityDiff_ = other.normalizedWinProbabilityDiff_;
      matchTrackedStats_ = other.matchTrackedStats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOut Clone() {
      return new CMsgGameMatchSignOut(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { if ((_hasBits0 & 2) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "good_guys_win" field.</summary>
    public const int GoodGuysWinFieldNumber = 3;
    private readonly static bool GoodGuysWinDefaultValue = false;

    private bool goodGuysWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GoodGuysWin {
      get { if ((_hasBits0 & 4) != 0) { return goodGuysWin_; } else { return GoodGuysWinDefaultValue; } }
      set {
        _hasBits0 |= 4;
        goodGuysWin_ = value;
      }
    }
    /// <summary>Gets whether the "good_guys_win" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoodGuysWin {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "good_guys_win" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoodGuysWin() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    private readonly static uint DateDefaultValue = 0;

    private uint date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Date {
      get { if ((_hasBits0 & 8) != 0) { return date_; } else { return DateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        date_ = value;
      }
    }
    /// <summary>Gets whether the "date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDate {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDate() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam> teams_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam> Teams {
      get { return teams_; }
    }

    /// <summary>Field number for the "tower_status" field.</summary>
    public const int TowerStatusFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_towerStatus_codec
        = pb::FieldCodec.ForUInt32(64);
    private readonly pbc::RepeatedField<uint> towerStatus_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TowerStatus {
      get { return towerStatus_; }
    }

    /// <summary>Field number for the "barracks_status" field.</summary>
    public const int BarracksStatusFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_barracksStatus_codec
        = pb::FieldCodec.ForUInt32(72);
    private readonly pbc::RepeatedField<uint> barracksStatus_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BarracksStatus {
      get { return barracksStatus_; }
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 10;
    private readonly static uint ClusterDefaultValue = 0;

    private uint cluster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cluster {
      get { if ((_hasBits0 & 16) != 0) { return cluster_; } else { return ClusterDefaultValue; } }
      set {
        _hasBits0 |= 16;
        cluster_ = value;
      }
    }
    /// <summary>Gets whether the "cluster" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCluster {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cluster" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCluster() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "server_addr" field.</summary>
    public const int ServerAddrFieldNumber = 11;
    private readonly static string ServerAddrDefaultValue = "";

    private string serverAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerAddr {
      get { return serverAddr_ ?? ServerAddrDefaultValue; }
      set {
        serverAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "server_addr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerAddr {
      get { return serverAddr_ != null; }
    }
    /// <summary>Clears the value of the "server_addr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerAddr() {
      serverAddr_ = null;
    }

    /// <summary>Field number for the "first_blood_time" field.</summary>
    public const int FirstBloodTimeFieldNumber = 12;
    private readonly static uint FirstBloodTimeDefaultValue = 0;

    private uint firstBloodTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstBloodTime {
      get { if ((_hasBits0 & 32) != 0) { return firstBloodTime_; } else { return FirstBloodTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        firstBloodTime_ = value;
      }
    }
    /// <summary>Gets whether the "first_blood_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstBloodTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "first_blood_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstBloodTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "event_score" field.</summary>
    public const int EventScoreFieldNumber = 14;
    private readonly static uint EventScoreDefaultValue = 0;

    private uint eventScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventScore {
      get { if ((_hasBits0 & 64) != 0) { return eventScore_; } else { return EventScoreDefaultValue; } }
      set {
        _hasBits0 |= 64;
        eventScore_ = value;
      }
    }
    /// <summary>Gets whether the "event_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventScore {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "event_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventScore() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "fantasy_stats" field.</summary>
    public const int FantasyStatsFieldNumber = 41;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> _repeated_fantasyStats_codec
        = pb::FieldCodec.ForMessage(330, global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> fantasyStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> FantasyStats {
      get { return fantasyStats_; }
    }

    /// <summary>Field number for the "player_strange_count_adjustments" field.</summary>
    public const int PlayerStrangeCountAdjustmentsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgEconPlayerStrangeCountAdjustment> _repeated_playerStrangeCountAdjustments_codec
        = pb::FieldCodec.ForMessage(138, global::Steam.Protos.Dota2.CMsgEconPlayerStrangeCountAdjustment.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgEconPlayerStrangeCountAdjustment> playerStrangeCountAdjustments_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgEconPlayerStrangeCountAdjustment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgEconPlayerStrangeCountAdjustment> PlayerStrangeCountAdjustments {
      get { return playerStrangeCountAdjustments_; }
    }

    /// <summary>Field number for the "automatic_surrender" field.</summary>
    public const int AutomaticSurrenderFieldNumber = 18;
    private readonly static bool AutomaticSurrenderDefaultValue = false;

    private bool automaticSurrender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutomaticSurrender {
      get { if ((_hasBits0 & 128) != 0) { return automaticSurrender_; } else { return AutomaticSurrenderDefaultValue; } }
      set {
        _hasBits0 |= 128;
        automaticSurrender_ = value;
      }
    }
    /// <summary>Gets whether the "automatic_surrender" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAutomaticSurrender {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "automatic_surrender" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAutomaticSurrender() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "server_version" field.</summary>
    public const int ServerVersionFieldNumber = 19;
    private readonly static uint ServerVersionDefaultValue = 0;

    private uint serverVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerVersion {
      get { if ((_hasBits0 & 256) != 0) { return serverVersion_; } else { return ServerVersionDefaultValue; } }
      set {
        _hasBits0 |= 256;
        serverVersion_ = value;
      }
    }
    /// <summary>Gets whether the "server_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerVersion {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "server_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerVersion() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "poor_network_conditions" field.</summary>
    public const int PoorNetworkConditionsFieldNumber = 35;
    private global::Steam.Protos.Dota2.CMsgPoorNetworkConditions poorNetworkConditions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPoorNetworkConditions PoorNetworkConditions {
      get { return poorNetworkConditions_; }
      set {
        poorNetworkConditions_ = value;
      }
    }

    /// <summary>Field number for the "additional_msgs" field.</summary>
    public const int AdditionalMsgsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CAdditionalSignoutMsg> _repeated_additionalMsgs_codec
        = pb::FieldCodec.ForMessage(162, global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CAdditionalSignoutMsg.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CAdditionalSignoutMsg> additionalMsgs_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CAdditionalSignoutMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CAdditionalSignoutMsg> AdditionalMsgs {
      get { return additionalMsgs_; }
    }

    /// <summary>Field number for the "social_feed_events" field.</summary>
    public const int SocialFeedEventsFieldNumber = 36;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CSocialFeedMatchEvent> _repeated_socialFeedEvents_codec
        = pb::FieldCodec.ForMessage(290, global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CSocialFeedMatchEvent.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CSocialFeedMatchEvent> socialFeedEvents_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CSocialFeedMatchEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CSocialFeedMatchEvent> SocialFeedEvents {
      get { return socialFeedEvents_; }
    }

    /// <summary>Field number for the "average_networth_delta" field.</summary>
    public const int AverageNetworthDeltaFieldNumber = 22;
    private readonly static int AverageNetworthDeltaDefaultValue = 0;

    private int averageNetworthDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AverageNetworthDelta {
      get { if ((_hasBits0 & 512) != 0) { return averageNetworthDelta_; } else { return AverageNetworthDeltaDefaultValue; } }
      set {
        _hasBits0 |= 512;
        averageNetworthDelta_ = value;
      }
    }
    /// <summary>Gets whether the "average_networth_delta" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAverageNetworthDelta {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "average_networth_delta" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAverageNetworthDelta() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "custom_game_data" field.</summary>
    public const int CustomGameDataFieldNumber = 37;
    private global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CCustomGameData customGameData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CCustomGameData CustomGameData {
      get { return customGameData_; }
      set {
        customGameData_ = value;
      }
    }

    /// <summary>Field number for the "match_flags" field.</summary>
    public const int MatchFlagsFieldNumber = 38;
    private readonly static uint MatchFlagsDefaultValue = 0;

    private uint matchFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchFlags {
      get { if ((_hasBits0 & 1024) != 0) { return matchFlags_; } else { return MatchFlagsDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        matchFlags_ = value;
      }
    }
    /// <summary>Gets whether the "match_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchFlags {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "match_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchFlags() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "team_scores" field.</summary>
    public const int TeamScoresFieldNumber = 39;
    private static readonly pb::FieldCodec<uint> _repeated_teamScores_codec
        = pb::FieldCodec.ForUInt32(312);
    private readonly pbc::RepeatedField<uint> teamScores_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TeamScores {
      get { return teamScores_; }
    }

    /// <summary>Field number for the "pre_game_duration" field.</summary>
    public const int PreGameDurationFieldNumber = 40;
    private readonly static uint PreGameDurationDefaultValue = 0;

    private uint preGameDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PreGameDuration {
      get { if ((_hasBits0 & 2048) != 0) { return preGameDuration_; } else { return PreGameDurationDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        preGameDuration_ = value;
      }
    }
    /// <summary>Gets whether the "pre_game_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreGameDuration {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "pre_game_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreGameDuration() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "event_game_leaderboard_entries" field.</summary>
    public const int EventGameLeaderboardEntriesFieldNumber = 42;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.EventGameLeaderboardEntry> _repeated_eventGameLeaderboardEntries_codec
        = pb::FieldCodec.ForMessage(338, global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.EventGameLeaderboardEntry.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.EventGameLeaderboardEntry> eventGameLeaderboardEntries_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.EventGameLeaderboardEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.EventGameLeaderboardEntry> EventGameLeaderboardEntries {
      get { return eventGameLeaderboardEntries_; }
    }

    /// <summary>Field number for the "ward_placements" field.</summary>
    public const int WardPlacementsFieldNumber = 43;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.WardPlacement> _repeated_wardPlacements_codec
        = pb::FieldCodec.ForMessage(346, global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.WardPlacement.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.WardPlacement> wardPlacements_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.WardPlacement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.WardPlacement> WardPlacements {
      get { return wardPlacements_; }
    }

    /// <summary>Field number for the "gameplay_stats" field.</summary>
    public const int GameplayStatsFieldNumber = 44;
    private global::Steam.Protos.Dota2.CMsgSignOutGameplayStats gameplayStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgSignOutGameplayStats GameplayStats {
      get { return gameplayStats_; }
      set {
        gameplayStats_ = value;
      }
    }

    /// <summary>Field number for the "extra_messages" field.</summary>
    public const int ExtraMessagesFieldNumber = 54;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CExtraMsgBlock> _repeated_extraMessages_codec
        = pb::FieldCodec.ForMessage(434, global::Steam.Protos.Dota2.CExtraMsgBlock.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock> extraMessages_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock> ExtraMessages {
      get { return extraMessages_; }
    }

    /// <summary>Field number for the "winning_team" field.</summary>
    public const int WinningTeamFieldNumber = 56;
    private readonly static global::Steam.Protos.Dota2.DOTA_GC_TEAM WinningTeamDefaultValue = global::Steam.Protos.Dota2.DOTA_GC_TEAM.GoodGuys;

    private global::Steam.Protos.Dota2.DOTA_GC_TEAM winningTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GC_TEAM WinningTeam {
      get { if ((_hasBits0 & 4096) != 0) { return winningTeam_; } else { return WinningTeamDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        winningTeam_ = value;
      }
    }
    /// <summary>Gets whether the "winning_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWinningTeam {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "winning_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWinningTeam() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "normalized_win_probability_diff" field.</summary>
    public const int NormalizedWinProbabilityDiffFieldNumber = 57;
    private readonly static float NormalizedWinProbabilityDiffDefaultValue = 0F;

    private float normalizedWinProbabilityDiff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NormalizedWinProbabilityDiff {
      get { if ((_hasBits0 & 8192) != 0) { return normalizedWinProbabilityDiff_; } else { return NormalizedWinProbabilityDiffDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        normalizedWinProbabilityDiff_ = value;
      }
    }
    /// <summary>Gets whether the "normalized_win_probability_diff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNormalizedWinProbabilityDiff {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "normalized_win_probability_diff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNormalizedWinProbabilityDiff() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "match_tracked_stats" field.</summary>
    public const int MatchTrackedStatsFieldNumber = 58;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgTrackedStat> _repeated_matchTrackedStats_codec
        = pb::FieldCodec.ForMessage(466, global::Steam.Protos.Dota2.CMsgTrackedStat.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgTrackedStat> matchTrackedStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgTrackedStat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgTrackedStat> MatchTrackedStats {
      get { return matchTrackedStats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameMatchSignOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameMatchSignOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Duration != other.Duration) return false;
      if (GoodGuysWin != other.GoodGuysWin) return false;
      if (Date != other.Date) return false;
      if(!teams_.Equals(other.teams_)) return false;
      if(!towerStatus_.Equals(other.towerStatus_)) return false;
      if(!barracksStatus_.Equals(other.barracksStatus_)) return false;
      if (Cluster != other.Cluster) return false;
      if (ServerAddr != other.ServerAddr) return false;
      if (FirstBloodTime != other.FirstBloodTime) return false;
      if (EventScore != other.EventScore) return false;
      if(!fantasyStats_.Equals(other.fantasyStats_)) return false;
      if(!playerStrangeCountAdjustments_.Equals(other.playerStrangeCountAdjustments_)) return false;
      if (AutomaticSurrender != other.AutomaticSurrender) return false;
      if (ServerVersion != other.ServerVersion) return false;
      if (!object.Equals(PoorNetworkConditions, other.PoorNetworkConditions)) return false;
      if(!additionalMsgs_.Equals(other.additionalMsgs_)) return false;
      if(!socialFeedEvents_.Equals(other.socialFeedEvents_)) return false;
      if (AverageNetworthDelta != other.AverageNetworthDelta) return false;
      if (!object.Equals(CustomGameData, other.CustomGameData)) return false;
      if (MatchFlags != other.MatchFlags) return false;
      if(!teamScores_.Equals(other.teamScores_)) return false;
      if (PreGameDuration != other.PreGameDuration) return false;
      if(!eventGameLeaderboardEntries_.Equals(other.eventGameLeaderboardEntries_)) return false;
      if(!wardPlacements_.Equals(other.wardPlacements_)) return false;
      if (!object.Equals(GameplayStats, other.GameplayStats)) return false;
      if(!extraMessages_.Equals(other.extraMessages_)) return false;
      if (WinningTeam != other.WinningTeam) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NormalizedWinProbabilityDiff, other.NormalizedWinProbabilityDiff)) return false;
      if(!matchTrackedStats_.Equals(other.matchTrackedStats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasGoodGuysWin) hash ^= GoodGuysWin.GetHashCode();
      if (HasDate) hash ^= Date.GetHashCode();
      hash ^= teams_.GetHashCode();
      hash ^= towerStatus_.GetHashCode();
      hash ^= barracksStatus_.GetHashCode();
      if (HasCluster) hash ^= Cluster.GetHashCode();
      if (HasServerAddr) hash ^= ServerAddr.GetHashCode();
      if (HasFirstBloodTime) hash ^= FirstBloodTime.GetHashCode();
      if (HasEventScore) hash ^= EventScore.GetHashCode();
      hash ^= fantasyStats_.GetHashCode();
      hash ^= playerStrangeCountAdjustments_.GetHashCode();
      if (HasAutomaticSurrender) hash ^= AutomaticSurrender.GetHashCode();
      if (HasServerVersion) hash ^= ServerVersion.GetHashCode();
      if (poorNetworkConditions_ != null) hash ^= PoorNetworkConditions.GetHashCode();
      hash ^= additionalMsgs_.GetHashCode();
      hash ^= socialFeedEvents_.GetHashCode();
      if (HasAverageNetworthDelta) hash ^= AverageNetworthDelta.GetHashCode();
      if (customGameData_ != null) hash ^= CustomGameData.GetHashCode();
      if (HasMatchFlags) hash ^= MatchFlags.GetHashCode();
      hash ^= teamScores_.GetHashCode();
      if (HasPreGameDuration) hash ^= PreGameDuration.GetHashCode();
      hash ^= eventGameLeaderboardEntries_.GetHashCode();
      hash ^= wardPlacements_.GetHashCode();
      if (gameplayStats_ != null) hash ^= GameplayStats.GetHashCode();
      hash ^= extraMessages_.GetHashCode();
      if (HasWinningTeam) hash ^= WinningTeam.GetHashCode();
      if (HasNormalizedWinProbabilityDiff) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NormalizedWinProbabilityDiff);
      hash ^= matchTrackedStats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasDuration) {
        output.WriteRawTag(16);
        output.WriteUInt32(Duration);
      }
      if (HasGoodGuysWin) {
        output.WriteRawTag(24);
        output.WriteBool(GoodGuysWin);
      }
      if (HasDate) {
        output.WriteRawTag(37);
        output.WriteFixed32(Date);
      }
      teams_.WriteTo(output, _repeated_teams_codec);
      towerStatus_.WriteTo(output, _repeated_towerStatus_codec);
      barracksStatus_.WriteTo(output, _repeated_barracksStatus_codec);
      if (HasCluster) {
        output.WriteRawTag(80);
        output.WriteUInt32(Cluster);
      }
      if (HasServerAddr) {
        output.WriteRawTag(90);
        output.WriteString(ServerAddr);
      }
      if (HasFirstBloodTime) {
        output.WriteRawTag(96);
        output.WriteUInt32(FirstBloodTime);
      }
      if (HasEventScore) {
        output.WriteRawTag(112);
        output.WriteUInt32(EventScore);
      }
      playerStrangeCountAdjustments_.WriteTo(output, _repeated_playerStrangeCountAdjustments_codec);
      if (HasAutomaticSurrender) {
        output.WriteRawTag(144, 1);
        output.WriteBool(AutomaticSurrender);
      }
      if (HasServerVersion) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(ServerVersion);
      }
      additionalMsgs_.WriteTo(output, _repeated_additionalMsgs_codec);
      if (HasAverageNetworthDelta) {
        output.WriteRawTag(176, 1);
        output.WriteSInt32(AverageNetworthDelta);
      }
      if (poorNetworkConditions_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(PoorNetworkConditions);
      }
      socialFeedEvents_.WriteTo(output, _repeated_socialFeedEvents_codec);
      if (customGameData_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(CustomGameData);
      }
      if (HasMatchFlags) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(MatchFlags);
      }
      teamScores_.WriteTo(output, _repeated_teamScores_codec);
      if (HasPreGameDuration) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(PreGameDuration);
      }
      fantasyStats_.WriteTo(output, _repeated_fantasyStats_codec);
      eventGameLeaderboardEntries_.WriteTo(output, _repeated_eventGameLeaderboardEntries_codec);
      wardPlacements_.WriteTo(output, _repeated_wardPlacements_codec);
      if (gameplayStats_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(GameplayStats);
      }
      extraMessages_.WriteTo(output, _repeated_extraMessages_codec);
      if (HasWinningTeam) {
        output.WriteRawTag(192, 3);
        output.WriteEnum((int) WinningTeam);
      }
      if (HasNormalizedWinProbabilityDiff) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(NormalizedWinProbabilityDiff);
      }
      matchTrackedStats_.WriteTo(output, _repeated_matchTrackedStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasDuration) {
        output.WriteRawTag(16);
        output.WriteUInt32(Duration);
      }
      if (HasGoodGuysWin) {
        output.WriteRawTag(24);
        output.WriteBool(GoodGuysWin);
      }
      if (HasDate) {
        output.WriteRawTag(37);
        output.WriteFixed32(Date);
      }
      teams_.WriteTo(ref output, _repeated_teams_codec);
      towerStatus_.WriteTo(ref output, _repeated_towerStatus_codec);
      barracksStatus_.WriteTo(ref output, _repeated_barracksStatus_codec);
      if (HasCluster) {
        output.WriteRawTag(80);
        output.WriteUInt32(Cluster);
      }
      if (HasServerAddr) {
        output.WriteRawTag(90);
        output.WriteString(ServerAddr);
      }
      if (HasFirstBloodTime) {
        output.WriteRawTag(96);
        output.WriteUInt32(FirstBloodTime);
      }
      if (HasEventScore) {
        output.WriteRawTag(112);
        output.WriteUInt32(EventScore);
      }
      playerStrangeCountAdjustments_.WriteTo(ref output, _repeated_playerStrangeCountAdjustments_codec);
      if (HasAutomaticSurrender) {
        output.WriteRawTag(144, 1);
        output.WriteBool(AutomaticSurrender);
      }
      if (HasServerVersion) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(ServerVersion);
      }
      additionalMsgs_.WriteTo(ref output, _repeated_additionalMsgs_codec);
      if (HasAverageNetworthDelta) {
        output.WriteRawTag(176, 1);
        output.WriteSInt32(AverageNetworthDelta);
      }
      if (poorNetworkConditions_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(PoorNetworkConditions);
      }
      socialFeedEvents_.WriteTo(ref output, _repeated_socialFeedEvents_codec);
      if (customGameData_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(CustomGameData);
      }
      if (HasMatchFlags) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(MatchFlags);
      }
      teamScores_.WriteTo(ref output, _repeated_teamScores_codec);
      if (HasPreGameDuration) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(PreGameDuration);
      }
      fantasyStats_.WriteTo(ref output, _repeated_fantasyStats_codec);
      eventGameLeaderboardEntries_.WriteTo(ref output, _repeated_eventGameLeaderboardEntries_codec);
      wardPlacements_.WriteTo(ref output, _repeated_wardPlacements_codec);
      if (gameplayStats_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(GameplayStats);
      }
      extraMessages_.WriteTo(ref output, _repeated_extraMessages_codec);
      if (HasWinningTeam) {
        output.WriteRawTag(192, 3);
        output.WriteEnum((int) WinningTeam);
      }
      if (HasNormalizedWinProbabilityDiff) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(NormalizedWinProbabilityDiff);
      }
      matchTrackedStats_.WriteTo(ref output, _repeated_matchTrackedStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasGoodGuysWin) {
        size += 1 + 1;
      }
      if (HasDate) {
        size += 1 + 4;
      }
      size += teams_.CalculateSize(_repeated_teams_codec);
      size += towerStatus_.CalculateSize(_repeated_towerStatus_codec);
      size += barracksStatus_.CalculateSize(_repeated_barracksStatus_codec);
      if (HasCluster) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cluster);
      }
      if (HasServerAddr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerAddr);
      }
      if (HasFirstBloodTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirstBloodTime);
      }
      if (HasEventScore) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventScore);
      }
      size += fantasyStats_.CalculateSize(_repeated_fantasyStats_codec);
      size += playerStrangeCountAdjustments_.CalculateSize(_repeated_playerStrangeCountAdjustments_codec);
      if (HasAutomaticSurrender) {
        size += 2 + 1;
      }
      if (HasServerVersion) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ServerVersion);
      }
      if (poorNetworkConditions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PoorNetworkConditions);
      }
      size += additionalMsgs_.CalculateSize(_repeated_additionalMsgs_codec);
      size += socialFeedEvents_.CalculateSize(_repeated_socialFeedEvents_codec);
      if (HasAverageNetworthDelta) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AverageNetworthDelta);
      }
      if (customGameData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CustomGameData);
      }
      if (HasMatchFlags) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchFlags);
      }
      size += teamScores_.CalculateSize(_repeated_teamScores_codec);
      if (HasPreGameDuration) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PreGameDuration);
      }
      size += eventGameLeaderboardEntries_.CalculateSize(_repeated_eventGameLeaderboardEntries_codec);
      size += wardPlacements_.CalculateSize(_repeated_wardPlacements_codec);
      if (gameplayStats_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameplayStats);
      }
      size += extraMessages_.CalculateSize(_repeated_extraMessages_codec);
      if (HasWinningTeam) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WinningTeam);
      }
      if (HasNormalizedWinProbabilityDiff) {
        size += 2 + 4;
      }
      size += matchTrackedStats_.CalculateSize(_repeated_matchTrackedStats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameMatchSignOut other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasGoodGuysWin) {
        GoodGuysWin = other.GoodGuysWin;
      }
      if (other.HasDate) {
        Date = other.Date;
      }
      teams_.Add(other.teams_);
      towerStatus_.Add(other.towerStatus_);
      barracksStatus_.Add(other.barracksStatus_);
      if (other.HasCluster) {
        Cluster = other.Cluster;
      }
      if (other.HasServerAddr) {
        ServerAddr = other.ServerAddr;
      }
      if (other.HasFirstBloodTime) {
        FirstBloodTime = other.FirstBloodTime;
      }
      if (other.HasEventScore) {
        EventScore = other.EventScore;
      }
      fantasyStats_.Add(other.fantasyStats_);
      playerStrangeCountAdjustments_.Add(other.playerStrangeCountAdjustments_);
      if (other.HasAutomaticSurrender) {
        AutomaticSurrender = other.AutomaticSurrender;
      }
      if (other.HasServerVersion) {
        ServerVersion = other.ServerVersion;
      }
      if (other.poorNetworkConditions_ != null) {
        if (poorNetworkConditions_ == null) {
          PoorNetworkConditions = new global::Steam.Protos.Dota2.CMsgPoorNetworkConditions();
        }
        PoorNetworkConditions.MergeFrom(other.PoorNetworkConditions);
      }
      additionalMsgs_.Add(other.additionalMsgs_);
      socialFeedEvents_.Add(other.socialFeedEvents_);
      if (other.HasAverageNetworthDelta) {
        AverageNetworthDelta = other.AverageNetworthDelta;
      }
      if (other.customGameData_ != null) {
        if (customGameData_ == null) {
          CustomGameData = new global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CCustomGameData();
        }
        CustomGameData.MergeFrom(other.CustomGameData);
      }
      if (other.HasMatchFlags) {
        MatchFlags = other.MatchFlags;
      }
      teamScores_.Add(other.teamScores_);
      if (other.HasPreGameDuration) {
        PreGameDuration = other.PreGameDuration;
      }
      eventGameLeaderboardEntries_.Add(other.eventGameLeaderboardEntries_);
      wardPlacements_.Add(other.wardPlacements_);
      if (other.gameplayStats_ != null) {
        if (gameplayStats_ == null) {
          GameplayStats = new global::Steam.Protos.Dota2.CMsgSignOutGameplayStats();
        }
        GameplayStats.MergeFrom(other.GameplayStats);
      }
      extraMessages_.Add(other.extraMessages_);
      if (other.HasWinningTeam) {
        WinningTeam = other.WinningTeam;
      }
      if (other.HasNormalizedWinProbabilityDiff) {
        NormalizedWinProbabilityDiff = other.NormalizedWinProbabilityDiff;
      }
      matchTrackedStats_.Add(other.matchTrackedStats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            Duration = input.ReadUInt32();
            break;
          }
          case 24: {
            GoodGuysWin = input.ReadBool();
            break;
          }
          case 37: {
            Date = input.ReadFixed32();
            break;
          }
          case 50: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
          case 66:
          case 64: {
            towerStatus_.AddEntriesFrom(input, _repeated_towerStatus_codec);
            break;
          }
          case 74:
          case 72: {
            barracksStatus_.AddEntriesFrom(input, _repeated_barracksStatus_codec);
            break;
          }
          case 80: {
            Cluster = input.ReadUInt32();
            break;
          }
          case 90: {
            ServerAddr = input.ReadString();
            break;
          }
          case 96: {
            FirstBloodTime = input.ReadUInt32();
            break;
          }
          case 112: {
            EventScore = input.ReadUInt32();
            break;
          }
          case 138: {
            playerStrangeCountAdjustments_.AddEntriesFrom(input, _repeated_playerStrangeCountAdjustments_codec);
            break;
          }
          case 144: {
            AutomaticSurrender = input.ReadBool();
            break;
          }
          case 152: {
            ServerVersion = input.ReadUInt32();
            break;
          }
          case 162: {
            additionalMsgs_.AddEntriesFrom(input, _repeated_additionalMsgs_codec);
            break;
          }
          case 176: {
            AverageNetworthDelta = input.ReadSInt32();
            break;
          }
          case 282: {
            if (poorNetworkConditions_ == null) {
              PoorNetworkConditions = new global::Steam.Protos.Dota2.CMsgPoorNetworkConditions();
            }
            input.ReadMessage(PoorNetworkConditions);
            break;
          }
          case 290: {
            socialFeedEvents_.AddEntriesFrom(input, _repeated_socialFeedEvents_codec);
            break;
          }
          case 298: {
            if (customGameData_ == null) {
              CustomGameData = new global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CCustomGameData();
            }
            input.ReadMessage(CustomGameData);
            break;
          }
          case 304: {
            MatchFlags = input.ReadUInt32();
            break;
          }
          case 314:
          case 312: {
            teamScores_.AddEntriesFrom(input, _repeated_teamScores_codec);
            break;
          }
          case 320: {
            PreGameDuration = input.ReadUInt32();
            break;
          }
          case 330: {
            fantasyStats_.AddEntriesFrom(input, _repeated_fantasyStats_codec);
            break;
          }
          case 338: {
            eventGameLeaderboardEntries_.AddEntriesFrom(input, _repeated_eventGameLeaderboardEntries_codec);
            break;
          }
          case 346: {
            wardPlacements_.AddEntriesFrom(input, _repeated_wardPlacements_codec);
            break;
          }
          case 354: {
            if (gameplayStats_ == null) {
              GameplayStats = new global::Steam.Protos.Dota2.CMsgSignOutGameplayStats();
            }
            input.ReadMessage(GameplayStats);
            break;
          }
          case 434: {
            extraMessages_.AddEntriesFrom(input, _repeated_extraMessages_codec);
            break;
          }
          case 448: {
            WinningTeam = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
            break;
          }
          case 461: {
            NormalizedWinProbabilityDiff = input.ReadFloat();
            break;
          }
          case 466: {
            matchTrackedStats_.AddEntriesFrom(input, _repeated_matchTrackedStats_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            Duration = input.ReadUInt32();
            break;
          }
          case 24: {
            GoodGuysWin = input.ReadBool();
            break;
          }
          case 37: {
            Date = input.ReadFixed32();
            break;
          }
          case 50: {
            teams_.AddEntriesFrom(ref input, _repeated_teams_codec);
            break;
          }
          case 66:
          case 64: {
            towerStatus_.AddEntriesFrom(ref input, _repeated_towerStatus_codec);
            break;
          }
          case 74:
          case 72: {
            barracksStatus_.AddEntriesFrom(ref input, _repeated_barracksStatus_codec);
            break;
          }
          case 80: {
            Cluster = input.ReadUInt32();
            break;
          }
          case 90: {
            ServerAddr = input.ReadString();
            break;
          }
          case 96: {
            FirstBloodTime = input.ReadUInt32();
            break;
          }
          case 112: {
            EventScore = input.ReadUInt32();
            break;
          }
          case 138: {
            playerStrangeCountAdjustments_.AddEntriesFrom(ref input, _repeated_playerStrangeCountAdjustments_codec);
            break;
          }
          case 144: {
            AutomaticSurrender = input.ReadBool();
            break;
          }
          case 152: {
            ServerVersion = input.ReadUInt32();
            break;
          }
          case 162: {
            additionalMsgs_.AddEntriesFrom(ref input, _repeated_additionalMsgs_codec);
            break;
          }
          case 176: {
            AverageNetworthDelta = input.ReadSInt32();
            break;
          }
          case 282: {
            if (poorNetworkConditions_ == null) {
              PoorNetworkConditions = new global::Steam.Protos.Dota2.CMsgPoorNetworkConditions();
            }
            input.ReadMessage(PoorNetworkConditions);
            break;
          }
          case 290: {
            socialFeedEvents_.AddEntriesFrom(ref input, _repeated_socialFeedEvents_codec);
            break;
          }
          case 298: {
            if (customGameData_ == null) {
              CustomGameData = new global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CCustomGameData();
            }
            input.ReadMessage(CustomGameData);
            break;
          }
          case 304: {
            MatchFlags = input.ReadUInt32();
            break;
          }
          case 314:
          case 312: {
            teamScores_.AddEntriesFrom(ref input, _repeated_teamScores_codec);
            break;
          }
          case 320: {
            PreGameDuration = input.ReadUInt32();
            break;
          }
          case 330: {
            fantasyStats_.AddEntriesFrom(ref input, _repeated_fantasyStats_codec);
            break;
          }
          case 338: {
            eventGameLeaderboardEntries_.AddEntriesFrom(ref input, _repeated_eventGameLeaderboardEntries_codec);
            break;
          }
          case 346: {
            wardPlacements_.AddEntriesFrom(ref input, _repeated_wardPlacements_codec);
            break;
          }
          case 354: {
            if (gameplayStats_ == null) {
              GameplayStats = new global::Steam.Protos.Dota2.CMsgSignOutGameplayStats();
            }
            input.ReadMessage(GameplayStats);
            break;
          }
          case 434: {
            extraMessages_.AddEntriesFrom(ref input, _repeated_extraMessages_codec);
            break;
          }
          case 448: {
            WinningTeam = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
            break;
          }
          case 461: {
            NormalizedWinProbabilityDiff = input.ReadFloat();
            break;
          }
          case 466: {
            matchTrackedStats_.AddEntriesFrom(ref input, _repeated_matchTrackedStats_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGameMatchSignOut message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CTeam : pb::IMessage<CTeam>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CTeam> _parser = new pb::MessageParser<CTeam>(() => new CTeam());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CTeam> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CTeam() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CTeam(CTeam other) : this() {
          players_ = other.players_.Clone();
          teamTrackedStats_ = other.teamTrackedStats_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CTeam Clone() {
          return new CTeam(this);
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer> _repeated_players_codec
            = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer> Players {
          get { return players_; }
        }

        /// <summary>Field number for the "team_tracked_stats" field.</summary>
        public const int TeamTrackedStatsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgTrackedStat> _repeated_teamTrackedStats_codec
            = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgTrackedStat.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgTrackedStat> teamTrackedStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgTrackedStat>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgTrackedStat> TeamTrackedStats {
          get { return teamTrackedStats_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CTeam);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CTeam other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!players_.Equals(other.players_)) return false;
          if(!teamTrackedStats_.Equals(other.teamTrackedStats_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= players_.GetHashCode();
          hash ^= teamTrackedStats_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          players_.WriteTo(output, _repeated_players_codec);
          teamTrackedStats_.WriteTo(output, _repeated_teamTrackedStats_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          players_.WriteTo(ref output, _repeated_players_codec);
          teamTrackedStats_.WriteTo(ref output, _repeated_teamTrackedStats_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += players_.CalculateSize(_repeated_players_codec);
          size += teamTrackedStats_.CalculateSize(_repeated_teamTrackedStats_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CTeam other) {
          if (other == null) {
            return;
          }
          players_.Add(other.players_);
          teamTrackedStats_.Add(other.teamTrackedStats_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                players_.AddEntriesFrom(input, _repeated_players_codec);
                break;
              }
              case 18: {
                teamTrackedStats_.AddEntriesFrom(input, _repeated_teamTrackedStats_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                players_.AddEntriesFrom(ref input, _repeated_players_codec);
                break;
              }
              case 18: {
                teamTrackedStats_.AddEntriesFrom(ref input, _repeated_teamTrackedStats_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the CTeam message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class CPlayer : pb::IMessage<CPlayer>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<CPlayer> _parser = new pb::MessageParser<CPlayer>(() => new CPlayer());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            private int _hasBits1;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CPlayer> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CPlayer() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CPlayer(CPlayer other) : this() {
              _hasBits0 = other._hasBits0;
              _hasBits1 = other._hasBits1;
              steamId_ = other.steamId_;
              heroId_ = other.heroId_;
              items_ = other.items_.Clone();
              itemPurchaseTimes_ = other.itemPurchaseTimes_.Clone();
              gold_ = other.gold_;
              kills_ = other.kills_;
              deaths_ = other.deaths_;
              assists_ = other.assists_;
              leaverStatus_ = other.leaverStatus_;
              lastHits_ = other.lastHits_;
              denies_ = other.denies_;
              goldPerMin_ = other.goldPerMin_;
              xpPerMinute_ = other.xpPerMinute_;
              goldSpent_ = other.goldSpent_;
              level_ = other.level_;
              scaledHeroDamage_ = other.scaledHeroDamage_;
              scaledTowerDamage_ = other.scaledTowerDamage_;
              scaledHeroHealing_ = other.scaledHeroHealing_;
              timeLastSeen_ = other.timeLastSeen_;
              supportAbilityValue_ = other.supportAbilityValue_;
              partyId_ = other.partyId_;
              claimedFarmGold_ = other.claimedFarmGold_;
              supportGold_ = other.supportGold_;
              claimedDenies_ = other.claimedDenies_;
              claimedMisses_ = other.claimedMisses_;
              misses_ = other.misses_;
              netWorth_ = other.netWorth_;
              heroDamage_ = other.heroDamage_;
              towerDamage_ = other.towerDamage_;
              heroHealing_ = other.heroHealing_;
              abilityUpgrades_ = other.abilityUpgrades_.Clone();
              additionalUnitsInventory_ = other.additionalUnitsInventory_.Clone();
              permanentBuffs_ = other.permanentBuffs_.Clone();
              customGameData_ = other.customGameData_ != null ? other.customGameData_.Clone() : null;
              matchPlayerFlags_ = other.matchPlayerFlags_;
              talentAbilityIds_ = other.talentAbilityIds_.Clone();
              heroPickOrder_ = other.heroPickOrder_;
              heroWasRandomed_ = other.heroWasRandomed_;
              heroWasDotaPlusSuggestion_ = other.heroWasDotaPlusSuggestion_;
              lane_ = other.lane_;
              isUsingPlusGuide_ = other.isUsingPlusGuide_;
              heroDamageReceived_ = other.heroDamageReceived_.Clone();
              heroDamageDealt_ = other.heroDamageDealt_.Clone();
              secondsDead_ = other.secondsDead_;
              goldLostToDeath_ = other.goldLostToDeath_;
              commandCount_ = other.commandCount_;
              mouseClickCastCommandCount_ = other.mouseClickCastCommandCount_;
              teleportsUsed_ = other.teleportsUsed_;
              cavernCrawlPreferredMapVariant_ = other.cavernCrawlPreferredMapVariant_;
              bountyRunes_ = other.bountyRunes_;
              outpostsCaptured_ = other.outpostsCaptured_;
              dewards_ = other.dewards_;
              wardsPlaced_ = other.wardsPlaced_;
              campsStacked_ = other.campsStacked_;
              playerSlot_ = other.playerSlot_;
              predictedPosition_ = other.predictedPosition_;
              laneOutcomes_ = other.laneOutcomes_;
              friendlyT1DestroyedTime_ = other.friendlyT1DestroyedTime_;
              enemyT1DestroyedTime_ = other.enemyT1DestroyedTime_;
              friendlyRoshanKills_ = other.friendlyRoshanKills_;
              enemyRoshanKills_ = other.enemyRoshanKills_;
              powerRunes_ = other.powerRunes_;
              waterRunes_ = other.waterRunes_;
              stunDuration_ = other.stunDuration_;
              teamNumber_ = other.teamNumber_;
              teamSlot_ = other.teamSlot_;
              timePurchasedShard_ = other.timePurchasedShard_;
              timePurchasedAghs_ = other.timePurchasedAghs_;
              abilityDraftAbilities_ = other.abilityDraftAbilities_.Clone();
              playerTrackedStats_ = other.playerTrackedStats_.Clone();
              predictedRank_ = other.predictedRank_;
              selectedFacet_ = other.selectedFacet_;
              enhancementLevel_ = other.enhancementLevel_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CPlayer Clone() {
              return new CPlayer(this);
            }

            /// <summary>Field number for the "steam_id" field.</summary>
            public const int SteamIdFieldNumber = 1;
            private readonly static ulong SteamIdDefaultValue = 0UL;

            private ulong steamId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong SteamId {
              get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                steamId_ = value;
              }
            }
            /// <summary>Gets whether the "steam_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasSteamId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "steam_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearSteamId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "hero_id" field.</summary>
            public const int HeroIdFieldNumber = 3;
            private readonly static int HeroIdDefaultValue = 0;

            private int heroId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int HeroId {
              get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
              set {
                _hasBits0 |= 2;
                heroId_ = value;
              }
            }
            /// <summary>Gets whether the "hero_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroId {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "hero_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroId() {
              _hasBits0 &= ~2;
            }

            /// <summary>Field number for the "items" field.</summary>
            public const int ItemsFieldNumber = 4;
            private static readonly pb::FieldCodec<int> _repeated_items_codec
                = pb::FieldCodec.ForInt32(32);
            private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<int> Items {
              get { return items_; }
            }

            /// <summary>Field number for the "item_purchase_times" field.</summary>
            public const int ItemPurchaseTimesFieldNumber = 63;
            private static readonly pb::FieldCodec<uint> _repeated_itemPurchaseTimes_codec
                = pb::FieldCodec.ForUInt32(504);
            private readonly pbc::RepeatedField<uint> itemPurchaseTimes_ = new pbc::RepeatedField<uint>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<uint> ItemPurchaseTimes {
              get { return itemPurchaseTimes_; }
            }

            /// <summary>Field number for the "gold" field.</summary>
            public const int GoldFieldNumber = 5;
            private readonly static uint GoldDefaultValue = 0;

            private uint gold_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Gold {
              get { if ((_hasBits0 & 4) != 0) { return gold_; } else { return GoldDefaultValue; } }
              set {
                _hasBits0 |= 4;
                gold_ = value;
              }
            }
            /// <summary>Gets whether the "gold" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasGold {
              get { return (_hasBits0 & 4) != 0; }
            }
            /// <summary>Clears the value of the "gold" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearGold() {
              _hasBits0 &= ~4;
            }

            /// <summary>Field number for the "kills" field.</summary>
            public const int KillsFieldNumber = 6;
            private readonly static uint KillsDefaultValue = 0;

            private uint kills_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Kills {
              get { if ((_hasBits0 & 8) != 0) { return kills_; } else { return KillsDefaultValue; } }
              set {
                _hasBits0 |= 8;
                kills_ = value;
              }
            }
            /// <summary>Gets whether the "kills" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasKills {
              get { return (_hasBits0 & 8) != 0; }
            }
            /// <summary>Clears the value of the "kills" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearKills() {
              _hasBits0 &= ~8;
            }

            /// <summary>Field number for the "deaths" field.</summary>
            public const int DeathsFieldNumber = 7;
            private readonly static uint DeathsDefaultValue = 0;

            private uint deaths_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Deaths {
              get { if ((_hasBits0 & 16) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
              set {
                _hasBits0 |= 16;
                deaths_ = value;
              }
            }
            /// <summary>Gets whether the "deaths" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDeaths {
              get { return (_hasBits0 & 16) != 0; }
            }
            /// <summary>Clears the value of the "deaths" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDeaths() {
              _hasBits0 &= ~16;
            }

            /// <summary>Field number for the "assists" field.</summary>
            public const int AssistsFieldNumber = 8;
            private readonly static uint AssistsDefaultValue = 0;

            private uint assists_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Assists {
              get { if ((_hasBits0 & 32) != 0) { return assists_; } else { return AssistsDefaultValue; } }
              set {
                _hasBits0 |= 32;
                assists_ = value;
              }
            }
            /// <summary>Gets whether the "assists" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasAssists {
              get { return (_hasBits0 & 32) != 0; }
            }
            /// <summary>Clears the value of the "assists" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearAssists() {
              _hasBits0 &= ~32;
            }

            /// <summary>Field number for the "leaver_status" field.</summary>
            public const int LeaverStatusFieldNumber = 9;
            private readonly static uint LeaverStatusDefaultValue = 0;

            private uint leaverStatus_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint LeaverStatus {
              get { if ((_hasBits0 & 64) != 0) { return leaverStatus_; } else { return LeaverStatusDefaultValue; } }
              set {
                _hasBits0 |= 64;
                leaverStatus_ = value;
              }
            }
            /// <summary>Gets whether the "leaver_status" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLeaverStatus {
              get { return (_hasBits0 & 64) != 0; }
            }
            /// <summary>Clears the value of the "leaver_status" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLeaverStatus() {
              _hasBits0 &= ~64;
            }

            /// <summary>Field number for the "last_hits" field.</summary>
            public const int LastHitsFieldNumber = 10;
            private readonly static uint LastHitsDefaultValue = 0;

            private uint lastHits_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint LastHits {
              get { if ((_hasBits0 & 128) != 0) { return lastHits_; } else { return LastHitsDefaultValue; } }
              set {
                _hasBits0 |= 128;
                lastHits_ = value;
              }
            }
            /// <summary>Gets whether the "last_hits" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLastHits {
              get { return (_hasBits0 & 128) != 0; }
            }
            /// <summary>Clears the value of the "last_hits" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLastHits() {
              _hasBits0 &= ~128;
            }

            /// <summary>Field number for the "denies" field.</summary>
            public const int DeniesFieldNumber = 11;
            private readonly static uint DeniesDefaultValue = 0;

            private uint denies_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Denies {
              get { if ((_hasBits0 & 256) != 0) { return denies_; } else { return DeniesDefaultValue; } }
              set {
                _hasBits0 |= 256;
                denies_ = value;
              }
            }
            /// <summary>Gets whether the "denies" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDenies {
              get { return (_hasBits0 & 256) != 0; }
            }
            /// <summary>Clears the value of the "denies" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDenies() {
              _hasBits0 &= ~256;
            }

            /// <summary>Field number for the "gold_per_min" field.</summary>
            public const int GoldPerMinFieldNumber = 12;
            private readonly static uint GoldPerMinDefaultValue = 0;

            private uint goldPerMin_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint GoldPerMin {
              get { if ((_hasBits0 & 512) != 0) { return goldPerMin_; } else { return GoldPerMinDefaultValue; } }
              set {
                _hasBits0 |= 512;
                goldPerMin_ = value;
              }
            }
            /// <summary>Gets whether the "gold_per_min" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasGoldPerMin {
              get { return (_hasBits0 & 512) != 0; }
            }
            /// <summary>Clears the value of the "gold_per_min" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearGoldPerMin() {
              _hasBits0 &= ~512;
            }

            /// <summary>Field number for the "xp_per_minute" field.</summary>
            public const int XpPerMinuteFieldNumber = 13;
            private readonly static uint XpPerMinuteDefaultValue = 0;

            private uint xpPerMinute_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint XpPerMinute {
              get { if ((_hasBits0 & 1024) != 0) { return xpPerMinute_; } else { return XpPerMinuteDefaultValue; } }
              set {
                _hasBits0 |= 1024;
                xpPerMinute_ = value;
              }
            }
            /// <summary>Gets whether the "xp_per_minute" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasXpPerMinute {
              get { return (_hasBits0 & 1024) != 0; }
            }
            /// <summary>Clears the value of the "xp_per_minute" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearXpPerMinute() {
              _hasBits0 &= ~1024;
            }

            /// <summary>Field number for the "gold_spent" field.</summary>
            public const int GoldSpentFieldNumber = 14;
            private readonly static uint GoldSpentDefaultValue = 0;

            private uint goldSpent_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint GoldSpent {
              get { if ((_hasBits0 & 2048) != 0) { return goldSpent_; } else { return GoldSpentDefaultValue; } }
              set {
                _hasBits0 |= 2048;
                goldSpent_ = value;
              }
            }
            /// <summary>Gets whether the "gold_spent" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasGoldSpent {
              get { return (_hasBits0 & 2048) != 0; }
            }
            /// <summary>Clears the value of the "gold_spent" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearGoldSpent() {
              _hasBits0 &= ~2048;
            }

            /// <summary>Field number for the "level" field.</summary>
            public const int LevelFieldNumber = 15;
            private readonly static uint LevelDefaultValue = 0;

            private uint level_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Level {
              get { if ((_hasBits0 & 4096) != 0) { return level_; } else { return LevelDefaultValue; } }
              set {
                _hasBits0 |= 4096;
                level_ = value;
              }
            }
            /// <summary>Gets whether the "level" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLevel {
              get { return (_hasBits0 & 4096) != 0; }
            }
            /// <summary>Clears the value of the "level" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLevel() {
              _hasBits0 &= ~4096;
            }

            /// <summary>Field number for the "scaled_hero_damage" field.</summary>
            public const int ScaledHeroDamageFieldNumber = 16;
            private readonly static uint ScaledHeroDamageDefaultValue = 0;

            private uint scaledHeroDamage_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ScaledHeroDamage {
              get { if ((_hasBits0 & 8192) != 0) { return scaledHeroDamage_; } else { return ScaledHeroDamageDefaultValue; } }
              set {
                _hasBits0 |= 8192;
                scaledHeroDamage_ = value;
              }
            }
            /// <summary>Gets whether the "scaled_hero_damage" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasScaledHeroDamage {
              get { return (_hasBits0 & 8192) != 0; }
            }
            /// <summary>Clears the value of the "scaled_hero_damage" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearScaledHeroDamage() {
              _hasBits0 &= ~8192;
            }

            /// <summary>Field number for the "scaled_tower_damage" field.</summary>
            public const int ScaledTowerDamageFieldNumber = 17;
            private readonly static uint ScaledTowerDamageDefaultValue = 0;

            private uint scaledTowerDamage_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ScaledTowerDamage {
              get { if ((_hasBits0 & 16384) != 0) { return scaledTowerDamage_; } else { return ScaledTowerDamageDefaultValue; } }
              set {
                _hasBits0 |= 16384;
                scaledTowerDamage_ = value;
              }
            }
            /// <summary>Gets whether the "scaled_tower_damage" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasScaledTowerDamage {
              get { return (_hasBits0 & 16384) != 0; }
            }
            /// <summary>Clears the value of the "scaled_tower_damage" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearScaledTowerDamage() {
              _hasBits0 &= ~16384;
            }

            /// <summary>Field number for the "scaled_hero_healing" field.</summary>
            public const int ScaledHeroHealingFieldNumber = 18;
            private readonly static uint ScaledHeroHealingDefaultValue = 0;

            private uint scaledHeroHealing_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ScaledHeroHealing {
              get { if ((_hasBits0 & 32768) != 0) { return scaledHeroHealing_; } else { return ScaledHeroHealingDefaultValue; } }
              set {
                _hasBits0 |= 32768;
                scaledHeroHealing_ = value;
              }
            }
            /// <summary>Gets whether the "scaled_hero_healing" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasScaledHeroHealing {
              get { return (_hasBits0 & 32768) != 0; }
            }
            /// <summary>Clears the value of the "scaled_hero_healing" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearScaledHeroHealing() {
              _hasBits0 &= ~32768;
            }

            /// <summary>Field number for the "time_last_seen" field.</summary>
            public const int TimeLastSeenFieldNumber = 19;
            private readonly static uint TimeLastSeenDefaultValue = 0;

            private uint timeLastSeen_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TimeLastSeen {
              get { if ((_hasBits0 & 65536) != 0) { return timeLastSeen_; } else { return TimeLastSeenDefaultValue; } }
              set {
                _hasBits0 |= 65536;
                timeLastSeen_ = value;
              }
            }
            /// <summary>Gets whether the "time_last_seen" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTimeLastSeen {
              get { return (_hasBits0 & 65536) != 0; }
            }
            /// <summary>Clears the value of the "time_last_seen" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTimeLastSeen() {
              _hasBits0 &= ~65536;
            }

            /// <summary>Field number for the "support_ability_value" field.</summary>
            public const int SupportAbilityValueFieldNumber = 20;
            private readonly static uint SupportAbilityValueDefaultValue = 0;

            private uint supportAbilityValue_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint SupportAbilityValue {
              get { if ((_hasBits0 & 131072) != 0) { return supportAbilityValue_; } else { return SupportAbilityValueDefaultValue; } }
              set {
                _hasBits0 |= 131072;
                supportAbilityValue_ = value;
              }
            }
            /// <summary>Gets whether the "support_ability_value" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasSupportAbilityValue {
              get { return (_hasBits0 & 131072) != 0; }
            }
            /// <summary>Clears the value of the "support_ability_value" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearSupportAbilityValue() {
              _hasBits0 &= ~131072;
            }

            /// <summary>Field number for the "party_id" field.</summary>
            public const int PartyIdFieldNumber = 21;
            private readonly static ulong PartyIdDefaultValue = 0UL;

            private ulong partyId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong PartyId {
              get { if ((_hasBits0 & 262144) != 0) { return partyId_; } else { return PartyIdDefaultValue; } }
              set {
                _hasBits0 |= 262144;
                partyId_ = value;
              }
            }
            /// <summary>Gets whether the "party_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPartyId {
              get { return (_hasBits0 & 262144) != 0; }
            }
            /// <summary>Clears the value of the "party_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPartyId() {
              _hasBits0 &= ~262144;
            }

            /// <summary>Field number for the "claimed_farm_gold" field.</summary>
            public const int ClaimedFarmGoldFieldNumber = 27;
            private readonly static uint ClaimedFarmGoldDefaultValue = 0;

            private uint claimedFarmGold_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ClaimedFarmGold {
              get { if ((_hasBits0 & 524288) != 0) { return claimedFarmGold_; } else { return ClaimedFarmGoldDefaultValue; } }
              set {
                _hasBits0 |= 524288;
                claimedFarmGold_ = value;
              }
            }
            /// <summary>Gets whether the "claimed_farm_gold" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasClaimedFarmGold {
              get { return (_hasBits0 & 524288) != 0; }
            }
            /// <summary>Clears the value of the "claimed_farm_gold" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearClaimedFarmGold() {
              _hasBits0 &= ~524288;
            }

            /// <summary>Field number for the "support_gold" field.</summary>
            public const int SupportGoldFieldNumber = 28;
            private readonly static uint SupportGoldDefaultValue = 0;

            private uint supportGold_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint SupportGold {
              get { if ((_hasBits0 & 1048576) != 0) { return supportGold_; } else { return SupportGoldDefaultValue; } }
              set {
                _hasBits0 |= 1048576;
                supportGold_ = value;
              }
            }
            /// <summary>Gets whether the "support_gold" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasSupportGold {
              get { return (_hasBits0 & 1048576) != 0; }
            }
            /// <summary>Clears the value of the "support_gold" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearSupportGold() {
              _hasBits0 &= ~1048576;
            }

            /// <summary>Field number for the "claimed_denies" field.</summary>
            public const int ClaimedDeniesFieldNumber = 29;
            private readonly static uint ClaimedDeniesDefaultValue = 0;

            private uint claimedDenies_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ClaimedDenies {
              get { if ((_hasBits0 & 2097152) != 0) { return claimedDenies_; } else { return ClaimedDeniesDefaultValue; } }
              set {
                _hasBits0 |= 2097152;
                claimedDenies_ = value;
              }
            }
            /// <summary>Gets whether the "claimed_denies" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasClaimedDenies {
              get { return (_hasBits0 & 2097152) != 0; }
            }
            /// <summary>Clears the value of the "claimed_denies" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearClaimedDenies() {
              _hasBits0 &= ~2097152;
            }

            /// <summary>Field number for the "claimed_misses" field.</summary>
            public const int ClaimedMissesFieldNumber = 30;
            private readonly static uint ClaimedMissesDefaultValue = 0;

            private uint claimedMisses_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ClaimedMisses {
              get { if ((_hasBits0 & 4194304) != 0) { return claimedMisses_; } else { return ClaimedMissesDefaultValue; } }
              set {
                _hasBits0 |= 4194304;
                claimedMisses_ = value;
              }
            }
            /// <summary>Gets whether the "claimed_misses" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasClaimedMisses {
              get { return (_hasBits0 & 4194304) != 0; }
            }
            /// <summary>Clears the value of the "claimed_misses" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearClaimedMisses() {
              _hasBits0 &= ~4194304;
            }

            /// <summary>Field number for the "misses" field.</summary>
            public const int MissesFieldNumber = 31;
            private readonly static uint MissesDefaultValue = 0;

            private uint misses_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Misses {
              get { if ((_hasBits0 & 8388608) != 0) { return misses_; } else { return MissesDefaultValue; } }
              set {
                _hasBits0 |= 8388608;
                misses_ = value;
              }
            }
            /// <summary>Gets whether the "misses" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasMisses {
              get { return (_hasBits0 & 8388608) != 0; }
            }
            /// <summary>Clears the value of the "misses" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearMisses() {
              _hasBits0 &= ~8388608;
            }

            /// <summary>Field number for the "net_worth" field.</summary>
            public const int NetWorthFieldNumber = 34;
            private readonly static uint NetWorthDefaultValue = 0;

            private uint netWorth_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint NetWorth {
              get { if ((_hasBits0 & 16777216) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
              set {
                _hasBits0 |= 16777216;
                netWorth_ = value;
              }
            }
            /// <summary>Gets whether the "net_worth" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasNetWorth {
              get { return (_hasBits0 & 16777216) != 0; }
            }
            /// <summary>Clears the value of the "net_worth" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearNetWorth() {
              _hasBits0 &= ~16777216;
            }

            /// <summary>Field number for the "hero_damage" field.</summary>
            public const int HeroDamageFieldNumber = 37;
            private readonly static uint HeroDamageDefaultValue = 0;

            private uint heroDamage_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint HeroDamage {
              get { if ((_hasBits0 & 67108864) != 0) { return heroDamage_; } else { return HeroDamageDefaultValue; } }
              set {
                _hasBits0 |= 67108864;
                heroDamage_ = value;
              }
            }
            /// <summary>Gets whether the "hero_damage" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroDamage {
              get { return (_hasBits0 & 67108864) != 0; }
            }
            /// <summary>Clears the value of the "hero_damage" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroDamage() {
              _hasBits0 &= ~67108864;
            }

            /// <summary>Field number for the "tower_damage" field.</summary>
            public const int TowerDamageFieldNumber = 38;
            private readonly static uint TowerDamageDefaultValue = 0;

            private uint towerDamage_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TowerDamage {
              get { if ((_hasBits0 & 134217728) != 0) { return towerDamage_; } else { return TowerDamageDefaultValue; } }
              set {
                _hasBits0 |= 134217728;
                towerDamage_ = value;
              }
            }
            /// <summary>Gets whether the "tower_damage" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTowerDamage {
              get { return (_hasBits0 & 134217728) != 0; }
            }
            /// <summary>Clears the value of the "tower_damage" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTowerDamage() {
              _hasBits0 &= ~134217728;
            }

            /// <summary>Field number for the "hero_healing" field.</summary>
            public const int HeroHealingFieldNumber = 39;
            private readonly static uint HeroHealingDefaultValue = 0;

            private uint heroHealing_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint HeroHealing {
              get { if ((_hasBits0 & 268435456) != 0) { return heroHealing_; } else { return HeroHealingDefaultValue; } }
              set {
                _hasBits0 |= 268435456;
                heroHealing_ = value;
              }
            }
            /// <summary>Gets whether the "hero_healing" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroHealing {
              get { return (_hasBits0 & 268435456) != 0; }
            }
            /// <summary>Clears the value of the "hero_healing" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroHealing() {
              _hasBits0 &= ~268435456;
            }

            /// <summary>Field number for the "ability_upgrades" field.</summary>
            public const int AbilityUpgradesFieldNumber = 32;
            private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade> _repeated_abilityUpgrades_codec
                = pb::FieldCodec.ForMessage(258, global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade.Parser);
            private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade> abilityUpgrades_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade> AbilityUpgrades {
              get { return abilityUpgrades_; }
            }

            /// <summary>Field number for the "additional_units_inventory" field.</summary>
            public const int AdditionalUnitsInventoryFieldNumber = 33;
            private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory> _repeated_additionalUnitsInventory_codec
                = pb::FieldCodec.ForMessage(266, global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory.Parser);
            private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory> additionalUnitsInventory_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory> AdditionalUnitsInventory {
              get { return additionalUnitsInventory_; }
            }

            /// <summary>Field number for the "permanent_buffs" field.</summary>
            public const int PermanentBuffsFieldNumber = 40;
            private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff> _repeated_permanentBuffs_codec
                = pb::FieldCodec.ForMessage(322, global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff.Parser);
            private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff> permanentBuffs_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff> PermanentBuffs {
              get { return permanentBuffs_; }
            }

            /// <summary>Field number for the "custom_game_data" field.</summary>
            public const int CustomGameDataFieldNumber = 35;
            private global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.CCustomGameData customGameData_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.CCustomGameData CustomGameData {
              get { return customGameData_; }
              set {
                customGameData_ = value;
              }
            }

            /// <summary>Field number for the "match_player_flags" field.</summary>
            public const int MatchPlayerFlagsFieldNumber = 36;
            private readonly static uint MatchPlayerFlagsDefaultValue = 0;

            private uint matchPlayerFlags_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint MatchPlayerFlags {
              get { if ((_hasBits0 & 33554432) != 0) { return matchPlayerFlags_; } else { return MatchPlayerFlagsDefaultValue; } }
              set {
                _hasBits0 |= 33554432;
                matchPlayerFlags_ = value;
              }
            }
            /// <summary>Gets whether the "match_player_flags" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasMatchPlayerFlags {
              get { return (_hasBits0 & 33554432) != 0; }
            }
            /// <summary>Clears the value of the "match_player_flags" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearMatchPlayerFlags() {
              _hasBits0 &= ~33554432;
            }

            /// <summary>Field number for the "talent_ability_ids" field.</summary>
            public const int TalentAbilityIdsFieldNumber = 41;
            private static readonly pb::FieldCodec<int> _repeated_talentAbilityIds_codec
                = pb::FieldCodec.ForInt32(328);
            private readonly pbc::RepeatedField<int> talentAbilityIds_ = new pbc::RepeatedField<int>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<int> TalentAbilityIds {
              get { return talentAbilityIds_; }
            }

            /// <summary>Field number for the "hero_pick_order" field.</summary>
            public const int HeroPickOrderFieldNumber = 42;
            private readonly static uint HeroPickOrderDefaultValue = 0;

            private uint heroPickOrder_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint HeroPickOrder {
              get { if ((_hasBits0 & 536870912) != 0) { return heroPickOrder_; } else { return HeroPickOrderDefaultValue; } }
              set {
                _hasBits0 |= 536870912;
                heroPickOrder_ = value;
              }
            }
            /// <summary>Gets whether the "hero_pick_order" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroPickOrder {
              get { return (_hasBits0 & 536870912) != 0; }
            }
            /// <summary>Clears the value of the "hero_pick_order" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroPickOrder() {
              _hasBits0 &= ~536870912;
            }

            /// <summary>Field number for the "hero_was_randomed" field.</summary>
            public const int HeroWasRandomedFieldNumber = 43;
            private readonly static bool HeroWasRandomedDefaultValue = false;

            private bool heroWasRandomed_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HeroWasRandomed {
              get { if ((_hasBits0 & 1073741824) != 0) { return heroWasRandomed_; } else { return HeroWasRandomedDefaultValue; } }
              set {
                _hasBits0 |= 1073741824;
                heroWasRandomed_ = value;
              }
            }
            /// <summary>Gets whether the "hero_was_randomed" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroWasRandomed {
              get { return (_hasBits0 & 1073741824) != 0; }
            }
            /// <summary>Clears the value of the "hero_was_randomed" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroWasRandomed() {
              _hasBits0 &= ~1073741824;
            }

            /// <summary>Field number for the "hero_was_dota_plus_suggestion" field.</summary>
            public const int HeroWasDotaPlusSuggestionFieldNumber = 50;
            private readonly static bool HeroWasDotaPlusSuggestionDefaultValue = false;

            private bool heroWasDotaPlusSuggestion_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HeroWasDotaPlusSuggestion {
              get { if ((_hasBits1 & 2) != 0) { return heroWasDotaPlusSuggestion_; } else { return HeroWasDotaPlusSuggestionDefaultValue; } }
              set {
                _hasBits1 |= 2;
                heroWasDotaPlusSuggestion_ = value;
              }
            }
            /// <summary>Gets whether the "hero_was_dota_plus_suggestion" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroWasDotaPlusSuggestion {
              get { return (_hasBits1 & 2) != 0; }
            }
            /// <summary>Clears the value of the "hero_was_dota_plus_suggestion" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroWasDotaPlusSuggestion() {
              _hasBits1 &= ~2;
            }

            /// <summary>Field number for the "lane" field.</summary>
            public const int LaneFieldNumber = 45;
            private readonly static uint LaneDefaultValue = 0;

            private uint lane_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Lane {
              get { if ((_hasBits0 & -2147483648) != 0) { return lane_; } else { return LaneDefaultValue; } }
              set {
                _hasBits0 |= -2147483648;
                lane_ = value;
              }
            }
            /// <summary>Gets whether the "lane" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLane {
              get { return (_hasBits0 & -2147483648) != 0; }
            }
            /// <summary>Clears the value of the "lane" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLane() {
              _hasBits0 &= ~-2147483648;
            }

            /// <summary>Field number for the "is_using_plus_guide" field.</summary>
            public const int IsUsingPlusGuideFieldNumber = 47;
            private readonly static bool IsUsingPlusGuideDefaultValue = false;

            private bool isUsingPlusGuide_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IsUsingPlusGuide {
              get { if ((_hasBits1 & 1) != 0) { return isUsingPlusGuide_; } else { return IsUsingPlusGuideDefaultValue; } }
              set {
                _hasBits1 |= 1;
                isUsingPlusGuide_ = value;
              }
            }
            /// <summary>Gets whether the "is_using_plus_guide" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasIsUsingPlusGuide {
              get { return (_hasBits1 & 1) != 0; }
            }
            /// <summary>Clears the value of the "is_using_plus_guide" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearIsUsingPlusGuide() {
              _hasBits1 &= ~1;
            }

            /// <summary>Field number for the "hero_damage_received" field.</summary>
            public const int HeroDamageReceivedFieldNumber = 48;
            private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived> _repeated_heroDamageReceived_codec
                = pb::FieldCodec.ForMessage(386, global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived.Parser);
            private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived> heroDamageReceived_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived> HeroDamageReceived {
              get { return heroDamageReceived_; }
            }

            /// <summary>Field number for the "hero_damage_dealt" field.</summary>
            public const int HeroDamageDealtFieldNumber = 64;
            private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived> _repeated_heroDamageDealt_codec
                = pb::FieldCodec.ForMessage(514, global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived.Parser);
            private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived> heroDamageDealt_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageReceived> HeroDamageDealt {
              get { return heroDamageDealt_; }
            }

            /// <summary>Field number for the "seconds_dead" field.</summary>
            public const int SecondsDeadFieldNumber = 51;
            private readonly static uint SecondsDeadDefaultValue = 0;

            private uint secondsDead_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint SecondsDead {
              get { if ((_hasBits1 & 4) != 0) { return secondsDead_; } else { return SecondsDeadDefaultValue; } }
              set {
                _hasBits1 |= 4;
                secondsDead_ = value;
              }
            }
            /// <summary>Gets whether the "seconds_dead" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasSecondsDead {
              get { return (_hasBits1 & 4) != 0; }
            }
            /// <summary>Clears the value of the "seconds_dead" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearSecondsDead() {
              _hasBits1 &= ~4;
            }

            /// <summary>Field number for the "gold_lost_to_death" field.</summary>
            public const int GoldLostToDeathFieldNumber = 52;
            private readonly static uint GoldLostToDeathDefaultValue = 0;

            private uint goldLostToDeath_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint GoldLostToDeath {
              get { if ((_hasBits1 & 8) != 0) { return goldLostToDeath_; } else { return GoldLostToDeathDefaultValue; } }
              set {
                _hasBits1 |= 8;
                goldLostToDeath_ = value;
              }
            }
            /// <summary>Gets whether the "gold_lost_to_death" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasGoldLostToDeath {
              get { return (_hasBits1 & 8) != 0; }
            }
            /// <summary>Clears the value of the "gold_lost_to_death" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearGoldLostToDeath() {
              _hasBits1 &= ~8;
            }

            /// <summary>Field number for the "command_count" field.</summary>
            public const int CommandCountFieldNumber = 53;
            private readonly static uint CommandCountDefaultValue = 0;

            private uint commandCount_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint CommandCount {
              get { if ((_hasBits1 & 16) != 0) { return commandCount_; } else { return CommandCountDefaultValue; } }
              set {
                _hasBits1 |= 16;
                commandCount_ = value;
              }
            }
            /// <summary>Gets whether the "command_count" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasCommandCount {
              get { return (_hasBits1 & 16) != 0; }
            }
            /// <summary>Clears the value of the "command_count" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearCommandCount() {
              _hasBits1 &= ~16;
            }

            /// <summary>Field number for the "mouse_click_cast_command_count" field.</summary>
            public const int MouseClickCastCommandCountFieldNumber = 54;
            private readonly static uint MouseClickCastCommandCountDefaultValue = 0;

            private uint mouseClickCastCommandCount_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint MouseClickCastCommandCount {
              get { if ((_hasBits1 & 32) != 0) { return mouseClickCastCommandCount_; } else { return MouseClickCastCommandCountDefaultValue; } }
              set {
                _hasBits1 |= 32;
                mouseClickCastCommandCount_ = value;
              }
            }
            /// <summary>Gets whether the "mouse_click_cast_command_count" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasMouseClickCastCommandCount {
              get { return (_hasBits1 & 32) != 0; }
            }
            /// <summary>Clears the value of the "mouse_click_cast_command_count" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearMouseClickCastCommandCount() {
              _hasBits1 &= ~32;
            }

            /// <summary>Field number for the "teleports_used" field.</summary>
            public const int TeleportsUsedFieldNumber = 55;
            private readonly static uint TeleportsUsedDefaultValue = 0;

            private uint teleportsUsed_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TeleportsUsed {
              get { if ((_hasBits1 & 64) != 0) { return teleportsUsed_; } else { return TeleportsUsedDefaultValue; } }
              set {
                _hasBits1 |= 64;
                teleportsUsed_ = value;
              }
            }
            /// <summary>Gets whether the "teleports_used" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTeleportsUsed {
              get { return (_hasBits1 & 64) != 0; }
            }
            /// <summary>Clears the value of the "teleports_used" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTeleportsUsed() {
              _hasBits1 &= ~64;
            }

            /// <summary>Field number for the "cavern_crawl_preferred_map_variant" field.</summary>
            public const int CavernCrawlPreferredMapVariantFieldNumber = 56;
            private readonly static uint CavernCrawlPreferredMapVariantDefaultValue = 255;

            private uint cavernCrawlPreferredMapVariant_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint CavernCrawlPreferredMapVariant {
              get { if ((_hasBits1 & 128) != 0) { return cavernCrawlPreferredMapVariant_; } else { return CavernCrawlPreferredMapVariantDefaultValue; } }
              set {
                _hasBits1 |= 128;
                cavernCrawlPreferredMapVariant_ = value;
              }
            }
            /// <summary>Gets whether the "cavern_crawl_preferred_map_variant" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasCavernCrawlPreferredMapVariant {
              get { return (_hasBits1 & 128) != 0; }
            }
            /// <summary>Clears the value of the "cavern_crawl_preferred_map_variant" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearCavernCrawlPreferredMapVariant() {
              _hasBits1 &= ~128;
            }

            /// <summary>Field number for the "bounty_runes" field.</summary>
            public const int BountyRunesFieldNumber = 57;
            private readonly static uint BountyRunesDefaultValue = 0;

            private uint bountyRunes_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint BountyRunes {
              get { if ((_hasBits1 & 256) != 0) { return bountyRunes_; } else { return BountyRunesDefaultValue; } }
              set {
                _hasBits1 |= 256;
                bountyRunes_ = value;
              }
            }
            /// <summary>Gets whether the "bounty_runes" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasBountyRunes {
              get { return (_hasBits1 & 256) != 0; }
            }
            /// <summary>Clears the value of the "bounty_runes" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearBountyRunes() {
              _hasBits1 &= ~256;
            }

            /// <summary>Field number for the "outposts_captured" field.</summary>
            public const int OutpostsCapturedFieldNumber = 58;
            private readonly static uint OutpostsCapturedDefaultValue = 0;

            private uint outpostsCaptured_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint OutpostsCaptured {
              get { if ((_hasBits1 & 512) != 0) { return outpostsCaptured_; } else { return OutpostsCapturedDefaultValue; } }
              set {
                _hasBits1 |= 512;
                outpostsCaptured_ = value;
              }
            }
            /// <summary>Gets whether the "outposts_captured" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasOutpostsCaptured {
              get { return (_hasBits1 & 512) != 0; }
            }
            /// <summary>Clears the value of the "outposts_captured" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearOutpostsCaptured() {
              _hasBits1 &= ~512;
            }

            /// <summary>Field number for the "dewards" field.</summary>
            public const int DewardsFieldNumber = 59;
            private readonly static uint DewardsDefaultValue = 0;

            private uint dewards_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Dewards {
              get { if ((_hasBits1 & 1024) != 0) { return dewards_; } else { return DewardsDefaultValue; } }
              set {
                _hasBits1 |= 1024;
                dewards_ = value;
              }
            }
            /// <summary>Gets whether the "dewards" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDewards {
              get { return (_hasBits1 & 1024) != 0; }
            }
            /// <summary>Clears the value of the "dewards" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDewards() {
              _hasBits1 &= ~1024;
            }

            /// <summary>Field number for the "wards_placed" field.</summary>
            public const int WardsPlacedFieldNumber = 60;
            private readonly static uint WardsPlacedDefaultValue = 0;

            private uint wardsPlaced_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint WardsPlaced {
              get { if ((_hasBits1 & 2048) != 0) { return wardsPlaced_; } else { return WardsPlacedDefaultValue; } }
              set {
                _hasBits1 |= 2048;
                wardsPlaced_ = value;
              }
            }
            /// <summary>Gets whether the "wards_placed" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasWardsPlaced {
              get { return (_hasBits1 & 2048) != 0; }
            }
            /// <summary>Clears the value of the "wards_placed" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearWardsPlaced() {
              _hasBits1 &= ~2048;
            }

            /// <summary>Field number for the "camps_stacked" field.</summary>
            public const int CampsStackedFieldNumber = 61;
            private readonly static uint CampsStackedDefaultValue = 0;

            private uint campsStacked_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint CampsStacked {
              get { if ((_hasBits1 & 4096) != 0) { return campsStacked_; } else { return CampsStackedDefaultValue; } }
              set {
                _hasBits1 |= 4096;
                campsStacked_ = value;
              }
            }
            /// <summary>Gets whether the "camps_stacked" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasCampsStacked {
              get { return (_hasBits1 & 4096) != 0; }
            }
            /// <summary>Clears the value of the "camps_stacked" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearCampsStacked() {
              _hasBits1 &= ~4096;
            }

            /// <summary>Field number for the "player_slot" field.</summary>
            public const int PlayerSlotFieldNumber = 62;
            private readonly static uint PlayerSlotDefaultValue = 0;

            private uint playerSlot_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PlayerSlot {
              get { if ((_hasBits1 & 8192) != 0) { return playerSlot_; } else { return PlayerSlotDefaultValue; } }
              set {
                _hasBits1 |= 8192;
                playerSlot_ = value;
              }
            }
            /// <summary>Gets whether the "player_slot" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPlayerSlot {
              get { return (_hasBits1 & 8192) != 0; }
            }
            /// <summary>Clears the value of the "player_slot" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPlayerSlot() {
              _hasBits1 &= ~8192;
            }

            /// <summary>Field number for the "predicted_position" field.</summary>
            public const int PredictedPositionFieldNumber = 66;
            private readonly static uint PredictedPositionDefaultValue = 0;

            private uint predictedPosition_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PredictedPosition {
              get { if ((_hasBits1 & 16384) != 0) { return predictedPosition_; } else { return PredictedPositionDefaultValue; } }
              set {
                _hasBits1 |= 16384;
                predictedPosition_ = value;
              }
            }
            /// <summary>Gets whether the "predicted_position" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPredictedPosition {
              get { return (_hasBits1 & 16384) != 0; }
            }
            /// <summary>Clears the value of the "predicted_position" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPredictedPosition() {
              _hasBits1 &= ~16384;
            }

            /// <summary>Field number for the "lane_outcomes" field.</summary>
            public const int LaneOutcomesFieldNumber = 67;
            private readonly static uint LaneOutcomesDefaultValue = 255;

            private uint laneOutcomes_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint LaneOutcomes {
              get { if ((_hasBits1 & 32768) != 0) { return laneOutcomes_; } else { return LaneOutcomesDefaultValue; } }
              set {
                _hasBits1 |= 32768;
                laneOutcomes_ = value;
              }
            }
            /// <summary>Gets whether the "lane_outcomes" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLaneOutcomes {
              get { return (_hasBits1 & 32768) != 0; }
            }
            /// <summary>Clears the value of the "lane_outcomes" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLaneOutcomes() {
              _hasBits1 &= ~32768;
            }

            /// <summary>Field number for the "friendly_t1_destroyed_time" field.</summary>
            public const int FriendlyT1DestroyedTimeFieldNumber = 68;
            private readonly static uint FriendlyT1DestroyedTimeDefaultValue = 0;

            private uint friendlyT1DestroyedTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint FriendlyT1DestroyedTime {
              get { if ((_hasBits1 & 65536) != 0) { return friendlyT1DestroyedTime_; } else { return FriendlyT1DestroyedTimeDefaultValue; } }
              set {
                _hasBits1 |= 65536;
                friendlyT1DestroyedTime_ = value;
              }
            }
            /// <summary>Gets whether the "friendly_t1_destroyed_time" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasFriendlyT1DestroyedTime {
              get { return (_hasBits1 & 65536) != 0; }
            }
            /// <summary>Clears the value of the "friendly_t1_destroyed_time" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearFriendlyT1DestroyedTime() {
              _hasBits1 &= ~65536;
            }

            /// <summary>Field number for the "enemy_t1_destroyed_time" field.</summary>
            public const int EnemyT1DestroyedTimeFieldNumber = 69;
            private readonly static uint EnemyT1DestroyedTimeDefaultValue = 0;

            private uint enemyT1DestroyedTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EnemyT1DestroyedTime {
              get { if ((_hasBits1 & 131072) != 0) { return enemyT1DestroyedTime_; } else { return EnemyT1DestroyedTimeDefaultValue; } }
              set {
                _hasBits1 |= 131072;
                enemyT1DestroyedTime_ = value;
              }
            }
            /// <summary>Gets whether the "enemy_t1_destroyed_time" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasEnemyT1DestroyedTime {
              get { return (_hasBits1 & 131072) != 0; }
            }
            /// <summary>Clears the value of the "enemy_t1_destroyed_time" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearEnemyT1DestroyedTime() {
              _hasBits1 &= ~131072;
            }

            /// <summary>Field number for the "friendly_roshan_kills" field.</summary>
            public const int FriendlyRoshanKillsFieldNumber = 70;
            private readonly static uint FriendlyRoshanKillsDefaultValue = 0;

            private uint friendlyRoshanKills_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint FriendlyRoshanKills {
              get { if ((_hasBits1 & 262144) != 0) { return friendlyRoshanKills_; } else { return FriendlyRoshanKillsDefaultValue; } }
              set {
                _hasBits1 |= 262144;
                friendlyRoshanKills_ = value;
              }
            }
            /// <summary>Gets whether the "friendly_roshan_kills" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasFriendlyRoshanKills {
              get { return (_hasBits1 & 262144) != 0; }
            }
            /// <summary>Clears the value of the "friendly_roshan_kills" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearFriendlyRoshanKills() {
              _hasBits1 &= ~262144;
            }

            /// <summary>Field number for the "enemy_roshan_kills" field.</summary>
            public const int EnemyRoshanKillsFieldNumber = 71;
            private readonly static uint EnemyRoshanKillsDefaultValue = 0;

            private uint enemyRoshanKills_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EnemyRoshanKills {
              get { if ((_hasBits1 & 524288) != 0) { return enemyRoshanKills_; } else { return EnemyRoshanKillsDefaultValue; } }
              set {
                _hasBits1 |= 524288;
                enemyRoshanKills_ = value;
              }
            }
            /// <summary>Gets whether the "enemy_roshan_kills" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasEnemyRoshanKills {
              get { return (_hasBits1 & 524288) != 0; }
            }
            /// <summary>Clears the value of the "enemy_roshan_kills" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearEnemyRoshanKills() {
              _hasBits1 &= ~524288;
            }

            /// <summary>Field number for the "power_runes" field.</summary>
            public const int PowerRunesFieldNumber = 72;
            private readonly static uint PowerRunesDefaultValue = 0;

            private uint powerRunes_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PowerRunes {
              get { if ((_hasBits1 & 1048576) != 0) { return powerRunes_; } else { return PowerRunesDefaultValue; } }
              set {
                _hasBits1 |= 1048576;
                powerRunes_ = value;
              }
            }
            /// <summary>Gets whether the "power_runes" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPowerRunes {
              get { return (_hasBits1 & 1048576) != 0; }
            }
            /// <summary>Clears the value of the "power_runes" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPowerRunes() {
              _hasBits1 &= ~1048576;
            }

            /// <summary>Field number for the "water_runes" field.</summary>
            public const int WaterRunesFieldNumber = 73;
            private readonly static uint WaterRunesDefaultValue = 0;

            private uint waterRunes_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint WaterRunes {
              get { if ((_hasBits1 & 2097152) != 0) { return waterRunes_; } else { return WaterRunesDefaultValue; } }
              set {
                _hasBits1 |= 2097152;
                waterRunes_ = value;
              }
            }
            /// <summary>Gets whether the "water_runes" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasWaterRunes {
              get { return (_hasBits1 & 2097152) != 0; }
            }
            /// <summary>Clears the value of the "water_runes" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearWaterRunes() {
              _hasBits1 &= ~2097152;
            }

            /// <summary>Field number for the "stun_duration" field.</summary>
            public const int StunDurationFieldNumber = 74;
            private readonly static float StunDurationDefaultValue = 0F;

            private float stunDuration_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float StunDuration {
              get { if ((_hasBits1 & 4194304) != 0) { return stunDuration_; } else { return StunDurationDefaultValue; } }
              set {
                _hasBits1 |= 4194304;
                stunDuration_ = value;
              }
            }
            /// <summary>Gets whether the "stun_duration" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasStunDuration {
              get { return (_hasBits1 & 4194304) != 0; }
            }
            /// <summary>Clears the value of the "stun_duration" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStunDuration() {
              _hasBits1 &= ~4194304;
            }

            /// <summary>Field number for the "team_number" field.</summary>
            public const int TeamNumberFieldNumber = 75;
            private readonly static global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamNumberDefaultValue = global::Steam.Protos.Dota2.DOTA_GC_TEAM.GoodGuys;

            private global::Steam.Protos.Dota2.DOTA_GC_TEAM teamNumber_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamNumber {
              get { if ((_hasBits1 & 8388608) != 0) { return teamNumber_; } else { return TeamNumberDefaultValue; } }
              set {
                _hasBits1 |= 8388608;
                teamNumber_ = value;
              }
            }
            /// <summary>Gets whether the "team_number" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTeamNumber {
              get { return (_hasBits1 & 8388608) != 0; }
            }
            /// <summary>Clears the value of the "team_number" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTeamNumber() {
              _hasBits1 &= ~8388608;
            }

            /// <summary>Field number for the "team_slot" field.</summary>
            public const int TeamSlotFieldNumber = 76;
            private readonly static uint TeamSlotDefaultValue = 0;

            private uint teamSlot_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TeamSlot {
              get { if ((_hasBits1 & 16777216) != 0) { return teamSlot_; } else { return TeamSlotDefaultValue; } }
              set {
                _hasBits1 |= 16777216;
                teamSlot_ = value;
              }
            }
            /// <summary>Gets whether the "team_slot" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTeamSlot {
              get { return (_hasBits1 & 16777216) != 0; }
            }
            /// <summary>Clears the value of the "team_slot" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTeamSlot() {
              _hasBits1 &= ~16777216;
            }

            /// <summary>Field number for the "time_purchased_shard" field.</summary>
            public const int TimePurchasedShardFieldNumber = 77;
            private readonly static uint TimePurchasedShardDefaultValue = 0;

            private uint timePurchasedShard_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TimePurchasedShard {
              get { if ((_hasBits1 & 33554432) != 0) { return timePurchasedShard_; } else { return TimePurchasedShardDefaultValue; } }
              set {
                _hasBits1 |= 33554432;
                timePurchasedShard_ = value;
              }
            }
            /// <summary>Gets whether the "time_purchased_shard" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTimePurchasedShard {
              get { return (_hasBits1 & 33554432) != 0; }
            }
            /// <summary>Clears the value of the "time_purchased_shard" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTimePurchasedShard() {
              _hasBits1 &= ~33554432;
            }

            /// <summary>Field number for the "time_purchased_aghs" field.</summary>
            public const int TimePurchasedAghsFieldNumber = 78;
            private readonly static uint TimePurchasedAghsDefaultValue = 0;

            private uint timePurchasedAghs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TimePurchasedAghs {
              get { if ((_hasBits1 & 67108864) != 0) { return timePurchasedAghs_; } else { return TimePurchasedAghsDefaultValue; } }
              set {
                _hasBits1 |= 67108864;
                timePurchasedAghs_ = value;
              }
            }
            /// <summary>Gets whether the "time_purchased_aghs" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTimePurchasedAghs {
              get { return (_hasBits1 & 67108864) != 0; }
            }
            /// <summary>Clears the value of the "time_purchased_aghs" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTimePurchasedAghs() {
              _hasBits1 &= ~67108864;
            }

            /// <summary>Field number for the "ability_draft_abilities" field.</summary>
            public const int AbilityDraftAbilitiesFieldNumber = 79;
            private static readonly pb::FieldCodec<int> _repeated_abilityDraftAbilities_codec
                = pb::FieldCodec.ForInt32(632);
            private readonly pbc::RepeatedField<int> abilityDraftAbilities_ = new pbc::RepeatedField<int>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<int> AbilityDraftAbilities {
              get { return abilityDraftAbilities_; }
            }

            /// <summary>Field number for the "player_tracked_stats" field.</summary>
            public const int PlayerTrackedStatsFieldNumber = 80;
            private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgTrackedStat> _repeated_playerTrackedStats_codec
                = pb::FieldCodec.ForMessage(642, global::Steam.Protos.Dota2.CMsgTrackedStat.Parser);
            private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgTrackedStat> playerTrackedStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgTrackedStat>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgTrackedStat> PlayerTrackedStats {
              get { return playerTrackedStats_; }
            }

            /// <summary>Field number for the "predicted_rank" field.</summary>
            public const int PredictedRankFieldNumber = 81;
            private readonly static uint PredictedRankDefaultValue = 0;

            private uint predictedRank_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PredictedRank {
              get { if ((_hasBits1 & 134217728) != 0) { return predictedRank_; } else { return PredictedRankDefaultValue; } }
              set {
                _hasBits1 |= 134217728;
                predictedRank_ = value;
              }
            }
            /// <summary>Gets whether the "predicted_rank" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPredictedRank {
              get { return (_hasBits1 & 134217728) != 0; }
            }
            /// <summary>Clears the value of the "predicted_rank" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPredictedRank() {
              _hasBits1 &= ~134217728;
            }

            /// <summary>Field number for the "selected_facet" field.</summary>
            public const int SelectedFacetFieldNumber = 82;
            private readonly static uint SelectedFacetDefaultValue = 0;

            private uint selectedFacet_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint SelectedFacet {
              get { if ((_hasBits1 & 268435456) != 0) { return selectedFacet_; } else { return SelectedFacetDefaultValue; } }
              set {
                _hasBits1 |= 268435456;
                selectedFacet_ = value;
              }
            }
            /// <summary>Gets whether the "selected_facet" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasSelectedFacet {
              get { return (_hasBits1 & 268435456) != 0; }
            }
            /// <summary>Clears the value of the "selected_facet" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearSelectedFacet() {
              _hasBits1 &= ~268435456;
            }

            /// <summary>Field number for the "enhancement_level" field.</summary>
            public const int EnhancementLevelFieldNumber = 83;
            private readonly static uint EnhancementLevelDefaultValue = 0;

            private uint enhancementLevel_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EnhancementLevel {
              get { if ((_hasBits1 & 536870912) != 0) { return enhancementLevel_; } else { return EnhancementLevelDefaultValue; } }
              set {
                _hasBits1 |= 536870912;
                enhancementLevel_ = value;
              }
            }
            /// <summary>Gets whether the "enhancement_level" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasEnhancementLevel {
              get { return (_hasBits1 & 536870912) != 0; }
            }
            /// <summary>Clears the value of the "enhancement_level" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearEnhancementLevel() {
              _hasBits1 &= ~536870912;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CPlayer);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CPlayer other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SteamId != other.SteamId) return false;
              if (HeroId != other.HeroId) return false;
              if(!items_.Equals(other.items_)) return false;
              if(!itemPurchaseTimes_.Equals(other.itemPurchaseTimes_)) return false;
              if (Gold != other.Gold) return false;
              if (Kills != other.Kills) return false;
              if (Deaths != other.Deaths) return false;
              if (Assists != other.Assists) return false;
              if (LeaverStatus != other.LeaverStatus) return false;
              if (LastHits != other.LastHits) return false;
              if (Denies != other.Denies) return false;
              if (GoldPerMin != other.GoldPerMin) return false;
              if (XpPerMinute != other.XpPerMinute) return false;
              if (GoldSpent != other.GoldSpent) return false;
              if (Level != other.Level) return false;
              if (ScaledHeroDamage != other.ScaledHeroDamage) return false;
              if (ScaledTowerDamage != other.ScaledTowerDamage) return false;
              if (ScaledHeroHealing != other.ScaledHeroHealing) return false;
              if (TimeLastSeen != other.TimeLastSeen) return false;
              if (SupportAbilityValue != other.SupportAbilityValue) return false;
              if (PartyId != other.PartyId) return false;
              if (ClaimedFarmGold != other.ClaimedFarmGold) return false;
              if (SupportGold != other.SupportGold) return false;
              if (ClaimedDenies != other.ClaimedDenies) return false;
              if (ClaimedMisses != other.ClaimedMisses) return false;
              if (Misses != other.Misses) return false;
              if (NetWorth != other.NetWorth) return false;
              if (HeroDamage != other.HeroDamage) return false;
              if (TowerDamage != other.TowerDamage) return false;
              if (HeroHealing != other.HeroHealing) return false;
              if(!abilityUpgrades_.Equals(other.abilityUpgrades_)) return false;
              if(!additionalUnitsInventory_.Equals(other.additionalUnitsInventory_)) return false;
              if(!permanentBuffs_.Equals(other.permanentBuffs_)) return false;
              if (!object.Equals(CustomGameData, other.CustomGameData)) return false;
              if (MatchPlayerFlags != other.MatchPlayerFlags) return false;
              if(!talentAbilityIds_.Equals(other.talentAbilityIds_)) return false;
              if (HeroPickOrder != other.HeroPickOrder) return false;
              if (HeroWasRandomed != other.HeroWasRandomed) return false;
              if (HeroWasDotaPlusSuggestion != other.HeroWasDotaPlusSuggestion) return false;
              if (Lane != other.Lane) return false;
              if (IsUsingPlusGuide != other.IsUsingPlusGuide) return false;
              if(!heroDamageReceived_.Equals(other.heroDamageReceived_)) return false;
              if(!heroDamageDealt_.Equals(other.heroDamageDealt_)) return false;
              if (SecondsDead != other.SecondsDead) return false;
              if (GoldLostToDeath != other.GoldLostToDeath) return false;
              if (CommandCount != other.CommandCount) return false;
              if (MouseClickCastCommandCount != other.MouseClickCastCommandCount) return false;
              if (TeleportsUsed != other.TeleportsUsed) return false;
              if (CavernCrawlPreferredMapVariant != other.CavernCrawlPreferredMapVariant) return false;
              if (BountyRunes != other.BountyRunes) return false;
              if (OutpostsCaptured != other.OutpostsCaptured) return false;
              if (Dewards != other.Dewards) return false;
              if (WardsPlaced != other.WardsPlaced) return false;
              if (CampsStacked != other.CampsStacked) return false;
              if (PlayerSlot != other.PlayerSlot) return false;
              if (PredictedPosition != other.PredictedPosition) return false;
              if (LaneOutcomes != other.LaneOutcomes) return false;
              if (FriendlyT1DestroyedTime != other.FriendlyT1DestroyedTime) return false;
              if (EnemyT1DestroyedTime != other.EnemyT1DestroyedTime) return false;
              if (FriendlyRoshanKills != other.FriendlyRoshanKills) return false;
              if (EnemyRoshanKills != other.EnemyRoshanKills) return false;
              if (PowerRunes != other.PowerRunes) return false;
              if (WaterRunes != other.WaterRunes) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StunDuration, other.StunDuration)) return false;
              if (TeamNumber != other.TeamNumber) return false;
              if (TeamSlot != other.TeamSlot) return false;
              if (TimePurchasedShard != other.TimePurchasedShard) return false;
              if (TimePurchasedAghs != other.TimePurchasedAghs) return false;
              if(!abilityDraftAbilities_.Equals(other.abilityDraftAbilities_)) return false;
              if(!playerTrackedStats_.Equals(other.playerTrackedStats_)) return false;
              if (PredictedRank != other.PredictedRank) return false;
              if (SelectedFacet != other.SelectedFacet) return false;
              if (EnhancementLevel != other.EnhancementLevel) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasSteamId) hash ^= SteamId.GetHashCode();
              if (HasHeroId) hash ^= HeroId.GetHashCode();
              hash ^= items_.GetHashCode();
              hash ^= itemPurchaseTimes_.GetHashCode();
              if (HasGold) hash ^= Gold.GetHashCode();
              if (HasKills) hash ^= Kills.GetHashCode();
              if (HasDeaths) hash ^= Deaths.GetHashCode();
              if (HasAssists) hash ^= Assists.GetHashCode();
              if (HasLeaverStatus) hash ^= LeaverStatus.GetHashCode();
              if (HasLastHits) hash ^= LastHits.GetHashCode();
              if (HasDenies) hash ^= Denies.GetHashCode();
              if (HasGoldPerMin) hash ^= GoldPerMin.GetHashCode();
              if (HasXpPerMinute) hash ^= XpPerMinute.GetHashCode();
              if (HasGoldSpent) hash ^= GoldSpent.GetHashCode();
              if (HasLevel) hash ^= Level.GetHashCode();
              if (HasScaledHeroDamage) hash ^= ScaledHeroDamage.GetHashCode();
              if (HasScaledTowerDamage) hash ^= ScaledTowerDamage.GetHashCode();
              if (HasScaledHeroHealing) hash ^= ScaledHeroHealing.GetHashCode();
              if (HasTimeLastSeen) hash ^= TimeLastSeen.GetHashCode();
              if (HasSupportAbilityValue) hash ^= SupportAbilityValue.GetHashCode();
              if (HasPartyId) hash ^= PartyId.GetHashCode();
              if (HasClaimedFarmGold) hash ^= ClaimedFarmGold.GetHashCode();
              if (HasSupportGold) hash ^= SupportGold.GetHashCode();
              if (HasClaimedDenies) hash ^= ClaimedDenies.GetHashCode();
              if (HasClaimedMisses) hash ^= ClaimedMisses.GetHashCode();
              if (HasMisses) hash ^= Misses.GetHashCode();
              if (HasNetWorth) hash ^= NetWorth.GetHashCode();
              if (HasHeroDamage) hash ^= HeroDamage.GetHashCode();
              if (HasTowerDamage) hash ^= TowerDamage.GetHashCode();
              if (HasHeroHealing) hash ^= HeroHealing.GetHashCode();
              hash ^= abilityUpgrades_.GetHashCode();
              hash ^= additionalUnitsInventory_.GetHashCode();
              hash ^= permanentBuffs_.GetHashCode();
              if (customGameData_ != null) hash ^= CustomGameData.GetHashCode();
              if (HasMatchPlayerFlags) hash ^= MatchPlayerFlags.GetHashCode();
              hash ^= talentAbilityIds_.GetHashCode();
              if (HasHeroPickOrder) hash ^= HeroPickOrder.GetHashCode();
              if (HasHeroWasRandomed) hash ^= HeroWasRandomed.GetHashCode();
              if (HasHeroWasDotaPlusSuggestion) hash ^= HeroWasDotaPlusSuggestion.GetHashCode();
              if (HasLane) hash ^= Lane.GetHashCode();
              if (HasIsUsingPlusGuide) hash ^= IsUsingPlusGuide.GetHashCode();
              hash ^= heroDamageReceived_.GetHashCode();
              hash ^= heroDamageDealt_.GetHashCode();
              if (HasSecondsDead) hash ^= SecondsDead.GetHashCode();
              if (HasGoldLostToDeath) hash ^= GoldLostToDeath.GetHashCode();
              if (HasCommandCount) hash ^= CommandCount.GetHashCode();
              if (HasMouseClickCastCommandCount) hash ^= MouseClickCastCommandCount.GetHashCode();
              if (HasTeleportsUsed) hash ^= TeleportsUsed.GetHashCode();
              if (HasCavernCrawlPreferredMapVariant) hash ^= CavernCrawlPreferredMapVariant.GetHashCode();
              if (HasBountyRunes) hash ^= BountyRunes.GetHashCode();
              if (HasOutpostsCaptured) hash ^= OutpostsCaptured.GetHashCode();
              if (HasDewards) hash ^= Dewards.GetHashCode();
              if (HasWardsPlaced) hash ^= WardsPlaced.GetHashCode();
              if (HasCampsStacked) hash ^= CampsStacked.GetHashCode();
              if (HasPlayerSlot) hash ^= PlayerSlot.GetHashCode();
              if (HasPredictedPosition) hash ^= PredictedPosition.GetHashCode();
              if (HasLaneOutcomes) hash ^= LaneOutcomes.GetHashCode();
              if (HasFriendlyT1DestroyedTime) hash ^= FriendlyT1DestroyedTime.GetHashCode();
              if (HasEnemyT1DestroyedTime) hash ^= EnemyT1DestroyedTime.GetHashCode();
              if (HasFriendlyRoshanKills) hash ^= FriendlyRoshanKills.GetHashCode();
              if (HasEnemyRoshanKills) hash ^= EnemyRoshanKills.GetHashCode();
              if (HasPowerRunes) hash ^= PowerRunes.GetHashCode();
              if (HasWaterRunes) hash ^= WaterRunes.GetHashCode();
              if (HasStunDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StunDuration);
              if (HasTeamNumber) hash ^= TeamNumber.GetHashCode();
              if (HasTeamSlot) hash ^= TeamSlot.GetHashCode();
              if (HasTimePurchasedShard) hash ^= TimePurchasedShard.GetHashCode();
              if (HasTimePurchasedAghs) hash ^= TimePurchasedAghs.GetHashCode();
              hash ^= abilityDraftAbilities_.GetHashCode();
              hash ^= playerTrackedStats_.GetHashCode();
              if (HasPredictedRank) hash ^= PredictedRank.GetHashCode();
              if (HasSelectedFacet) hash ^= SelectedFacet.GetHashCode();
              if (HasEnhancementLevel) hash ^= EnhancementLevel.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasSteamId) {
                output.WriteRawTag(9);
                output.WriteFixed64(SteamId);
              }
              if (HasHeroId) {
                output.WriteRawTag(24);
                output.WriteInt32(HeroId);
              }
              items_.WriteTo(output, _repeated_items_codec);
              if (HasGold) {
                output.WriteRawTag(40);
                output.WriteUInt32(Gold);
              }
              if (HasKills) {
                output.WriteRawTag(48);
                output.WriteUInt32(Kills);
              }
              if (HasDeaths) {
                output.WriteRawTag(56);
                output.WriteUInt32(Deaths);
              }
              if (HasAssists) {
                output.WriteRawTag(64);
                output.WriteUInt32(Assists);
              }
              if (HasLeaverStatus) {
                output.WriteRawTag(72);
                output.WriteUInt32(LeaverStatus);
              }
              if (HasLastHits) {
                output.WriteRawTag(80);
                output.WriteUInt32(LastHits);
              }
              if (HasDenies) {
                output.WriteRawTag(88);
                output.WriteUInt32(Denies);
              }
              if (HasGoldPerMin) {
                output.WriteRawTag(96);
                output.WriteUInt32(GoldPerMin);
              }
              if (HasXpPerMinute) {
                output.WriteRawTag(104);
                output.WriteUInt32(XpPerMinute);
              }
              if (HasGoldSpent) {
                output.WriteRawTag(112);
                output.WriteUInt32(GoldSpent);
              }
              if (HasLevel) {
                output.WriteRawTag(120);
                output.WriteUInt32(Level);
              }
              if (HasScaledHeroDamage) {
                output.WriteRawTag(128, 1);
                output.WriteUInt32(ScaledHeroDamage);
              }
              if (HasScaledTowerDamage) {
                output.WriteRawTag(136, 1);
                output.WriteUInt32(ScaledTowerDamage);
              }
              if (HasScaledHeroHealing) {
                output.WriteRawTag(144, 1);
                output.WriteUInt32(ScaledHeroHealing);
              }
              if (HasTimeLastSeen) {
                output.WriteRawTag(152, 1);
                output.WriteUInt32(TimeLastSeen);
              }
              if (HasSupportAbilityValue) {
                output.WriteRawTag(160, 1);
                output.WriteUInt32(SupportAbilityValue);
              }
              if (HasPartyId) {
                output.WriteRawTag(168, 1);
                output.WriteUInt64(PartyId);
              }
              if (HasClaimedFarmGold) {
                output.WriteRawTag(216, 1);
                output.WriteUInt32(ClaimedFarmGold);
              }
              if (HasSupportGold) {
                output.WriteRawTag(224, 1);
                output.WriteUInt32(SupportGold);
              }
              if (HasClaimedDenies) {
                output.WriteRawTag(232, 1);
                output.WriteUInt32(ClaimedDenies);
              }
              if (HasClaimedMisses) {
                output.WriteRawTag(240, 1);
                output.WriteUInt32(ClaimedMisses);
              }
              if (HasMisses) {
                output.WriteRawTag(248, 1);
                output.WriteUInt32(Misses);
              }
              abilityUpgrades_.WriteTo(output, _repeated_abilityUpgrades_codec);
              additionalUnitsInventory_.WriteTo(output, _repeated_additionalUnitsInventory_codec);
              if (HasNetWorth) {
                output.WriteRawTag(144, 2);
                output.WriteUInt32(NetWorth);
              }
              if (customGameData_ != null) {
                output.WriteRawTag(154, 2);
                output.WriteMessage(CustomGameData);
              }
              if (HasMatchPlayerFlags) {
                output.WriteRawTag(160, 2);
                output.WriteUInt32(MatchPlayerFlags);
              }
              if (HasHeroDamage) {
                output.WriteRawTag(168, 2);
                output.WriteUInt32(HeroDamage);
              }
              if (HasTowerDamage) {
                output.WriteRawTag(176, 2);
                output.WriteUInt32(TowerDamage);
              }
              if (HasHeroHealing) {
                output.WriteRawTag(184, 2);
                output.WriteUInt32(HeroHealing);
              }
              permanentBuffs_.WriteTo(output, _repeated_permanentBuffs_codec);
              talentAbilityIds_.WriteTo(output, _repeated_talentAbilityIds_codec);
              if (HasHeroPickOrder) {
                output.WriteRawTag(208, 2);
                output.WriteUInt32(HeroPickOrder);
              }
              if (HasHeroWasRandomed) {
                output.WriteRawTag(216, 2);
                output.WriteBool(HeroWasRandomed);
              }
              if (HasLane) {
                output.WriteRawTag(232, 2);
                output.WriteUInt32(Lane);
              }
              if (HasIsUsingPlusGuide) {
                output.WriteRawTag(248, 2);
                output.WriteBool(IsUsingPlusGuide);
              }
              heroDamageReceived_.WriteTo(output, _repeated_heroDamageReceived_codec);
              if (HasHeroWasDotaPlusSuggestion) {
                output.WriteRawTag(144, 3);
                output.WriteBool(HeroWasDotaPlusSuggestion);
              }
              if (HasSecondsDead) {
                output.WriteRawTag(152, 3);
                output.WriteUInt32(SecondsDead);
              }
              if (HasGoldLostToDeath) {
                output.WriteRawTag(160, 3);
                output.WriteUInt32(GoldLostToDeath);
              }
              if (HasCommandCount) {
                output.WriteRawTag(168, 3);
                output.WriteUInt32(CommandCount);
              }
              if (HasMouseClickCastCommandCount) {
                output.WriteRawTag(176, 3);
                output.WriteUInt32(MouseClickCastCommandCount);
              }
              if (HasTeleportsUsed) {
                output.WriteRawTag(184, 3);
                output.WriteUInt32(TeleportsUsed);
              }
              if (HasCavernCrawlPreferredMapVariant) {
                output.WriteRawTag(192, 3);
                output.WriteUInt32(CavernCrawlPreferredMapVariant);
              }
              if (HasBountyRunes) {
                output.WriteRawTag(200, 3);
                output.WriteUInt32(BountyRunes);
              }
              if (HasOutpostsCaptured) {
                output.WriteRawTag(208, 3);
                output.WriteUInt32(OutpostsCaptured);
              }
              if (HasDewards) {
                output.WriteRawTag(216, 3);
                output.WriteUInt32(Dewards);
              }
              if (HasWardsPlaced) {
                output.WriteRawTag(224, 3);
                output.WriteUInt32(WardsPlaced);
              }
              if (HasCampsStacked) {
                output.WriteRawTag(232, 3);
                output.WriteUInt32(CampsStacked);
              }
              if (HasPlayerSlot) {
                output.WriteRawTag(240, 3);
                output.WriteUInt32(PlayerSlot);
              }
              itemPurchaseTimes_.WriteTo(output, _repeated_itemPurchaseTimes_codec);
              heroDamageDealt_.WriteTo(output, _repeated_heroDamageDealt_codec);
              if (HasPredictedPosition) {
                output.WriteRawTag(144, 4);
                output.WriteUInt32(PredictedPosition);
              }
              if (HasLaneOutcomes) {
                output.WriteRawTag(152, 4);
                output.WriteUInt32(LaneOutcomes);
              }
              if (HasFriendlyT1DestroyedTime) {
                output.WriteRawTag(160, 4);
                output.WriteUInt32(FriendlyT1DestroyedTime);
              }
              if (HasEnemyT1DestroyedTime) {
                output.WriteRawTag(168, 4);
                output.WriteUInt32(EnemyT1DestroyedTime);
              }
              if (HasFriendlyRoshanKills) {
                output.WriteRawTag(176, 4);
                output.WriteUInt32(FriendlyRoshanKills);
              }
              if (HasEnemyRoshanKills) {
                output.WriteRawTag(184, 4);
                output.WriteUInt32(EnemyRoshanKills);
              }
              if (HasPowerRunes) {
                output.WriteRawTag(192, 4);
                output.WriteUInt32(PowerRunes);
              }
              if (HasWaterRunes) {
                output.WriteRawTag(200, 4);
                output.WriteUInt32(WaterRunes);
              }
              if (HasStunDuration) {
                output.WriteRawTag(213, 4);
                output.WriteFloat(StunDuration);
              }
              if (HasTeamNumber) {
                output.WriteRawTag(216, 4);
                output.WriteEnum((int) TeamNumber);
              }
              if (HasTeamSlot) {
                output.WriteRawTag(224, 4);
                output.WriteUInt32(TeamSlot);
              }
              if (HasTimePurchasedShard) {
                output.WriteRawTag(232, 4);
                output.WriteUInt32(TimePurchasedShard);
              }
              if (HasTimePurchasedAghs) {
                output.WriteRawTag(240, 4);
                output.WriteUInt32(TimePurchasedAghs);
              }
              abilityDraftAbilities_.WriteTo(output, _repeated_abilityDraftAbilities_codec);
              playerTrackedStats_.WriteTo(output, _repeated_playerTrackedStats_codec);
              if (HasPredictedRank) {
                output.WriteRawTag(136, 5);
                output.WriteUInt32(PredictedRank);
              }
              if (HasSelectedFacet) {
                output.WriteRawTag(144, 5);
                output.WriteUInt32(SelectedFacet);
              }
              if (HasEnhancementLevel) {
                output.WriteRawTag(152, 5);
                output.WriteUInt32(EnhancementLevel);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasSteamId) {
                output.WriteRawTag(9);
                output.WriteFixed64(SteamId);
              }
              if (HasHeroId) {
                output.WriteRawTag(24);
                output.WriteInt32(HeroId);
              }
              items_.WriteTo(ref output, _repeated_items_codec);
              if (HasGold) {
                output.WriteRawTag(40);
                output.WriteUInt32(Gold);
              }
              if (HasKills) {
                output.WriteRawTag(48);
                output.WriteUInt32(Kills);
              }
              if (HasDeaths) {
                output.WriteRawTag(56);
                output.WriteUInt32(Deaths);
              }
              if (HasAssists) {
                output.WriteRawTag(64);
                output.WriteUInt32(Assists);
              }
              if (HasLeaverStatus) {
                output.WriteRawTag(72);
                output.WriteUInt32(LeaverStatus);
              }
              if (HasLastHits) {
                output.WriteRawTag(80);
                output.WriteUInt32(LastHits);
              }
              if (HasDenies) {
                output.WriteRawTag(88);
                output.WriteUInt32(Denies);
              }
              if (HasGoldPerMin) {
                output.WriteRawTag(96);
                output.WriteUInt32(GoldPerMin);
              }
              if (HasXpPerMinute) {
                output.WriteRawTag(104);
                output.WriteUInt32(XpPerMinute);
              }
              if (HasGoldSpent) {
                output.WriteRawTag(112);
                output.WriteUInt32(GoldSpent);
              }
              if (HasLevel) {
                output.WriteRawTag(120);
                output.WriteUInt32(Level);
              }
              if (HasScaledHeroDamage) {
                output.WriteRawTag(128, 1);
                output.WriteUInt32(ScaledHeroDamage);
              }
              if (HasScaledTowerDamage) {
                output.WriteRawTag(136, 1);
                output.WriteUInt32(ScaledTowerDamage);
              }
              if (HasScaledHeroHealing) {
                output.WriteRawTag(144, 1);
                output.WriteUInt32(ScaledHeroHealing);
              }
              if (HasTimeLastSeen) {
                output.WriteRawTag(152, 1);
                output.WriteUInt32(TimeLastSeen);
              }
              if (HasSupportAbilityValue) {
                output.WriteRawTag(160, 1);
                output.WriteUInt32(SupportAbilityValue);
              }
              if (HasPartyId) {
                output.WriteRawTag(168, 1);
                output.WriteUInt64(PartyId);
              }
              if (HasClaimedFarmGold) {
                output.WriteRawTag(216, 1);
                output.WriteUInt32(ClaimedFarmGold);
              }
              if (HasSupportGold) {
                output.WriteRawTag(224, 1);
                output.WriteUInt32(SupportGold);
              }
              if (HasClaimedDenies) {
                output.WriteRawTag(232, 1);
                output.WriteUInt32(ClaimedDenies);
              }
              if (HasClaimedMisses) {
                output.WriteRawTag(240, 1);
                output.WriteUInt32(ClaimedMisses);
              }
              if (HasMisses) {
                output.WriteRawTag(248, 1);
                output.WriteUInt32(Misses);
              }
              abilityUpgrades_.WriteTo(ref output, _repeated_abilityUpgrades_codec);
              additionalUnitsInventory_.WriteTo(ref output, _repeated_additionalUnitsInventory_codec);
              if (HasNetWorth) {
                output.WriteRawTag(144, 2);
                output.WriteUInt32(NetWorth);
              }
              if (customGameData_ != null) {
                output.WriteRawTag(154, 2);
                output.WriteMessage(CustomGameData);
              }
              if (HasMatchPlayerFlags) {
                output.WriteRawTag(160, 2);
                output.WriteUInt32(MatchPlayerFlags);
              }
              if (HasHeroDamage) {
                output.WriteRawTag(168, 2);
                output.WriteUInt32(HeroDamage);
              }
              if (HasTowerDamage) {
                output.WriteRawTag(176, 2);
                output.WriteUInt32(TowerDamage);
              }
              if (HasHeroHealing) {
                output.WriteRawTag(184, 2);
                output.WriteUInt32(HeroHealing);
              }
              permanentBuffs_.WriteTo(ref output, _repeated_permanentBuffs_codec);
              talentAbilityIds_.WriteTo(ref output, _repeated_talentAbilityIds_codec);
              if (HasHeroPickOrder) {
                output.WriteRawTag(208, 2);
                output.WriteUInt32(HeroPickOrder);
              }
              if (HasHeroWasRandomed) {
                output.WriteRawTag(216, 2);
                output.WriteBool(HeroWasRandomed);
              }
              if (HasLane) {
                output.WriteRawTag(232, 2);
                output.WriteUInt32(Lane);
              }
              if (HasIsUsingPlusGuide) {
                output.WriteRawTag(248, 2);
                output.WriteBool(IsUsingPlusGuide);
              }
              heroDamageReceived_.WriteTo(ref output, _repeated_heroDamageReceived_codec);
              if (HasHeroWasDotaPlusSuggestion) {
                output.WriteRawTag(144, 3);
                output.WriteBool(HeroWasDotaPlusSuggestion);
              }
              if (HasSecondsDead) {
                output.WriteRawTag(152, 3);
                output.WriteUInt32(SecondsDead);
              }
              if (HasGoldLostToDeath) {
                output.WriteRawTag(160, 3);
                output.WriteUInt32(GoldLostToDeath);
              }
              if (HasCommandCount) {
                output.WriteRawTag(168, 3);
                output.WriteUInt32(CommandCount);
              }
              if (HasMouseClickCastCommandCount) {
                output.WriteRawTag(176, 3);
                output.WriteUInt32(MouseClickCastCommandCount);
              }
              if (HasTeleportsUsed) {
                output.WriteRawTag(184, 3);
                output.WriteUInt32(TeleportsUsed);
              }
              if (HasCavernCrawlPreferredMapVariant) {
                output.WriteRawTag(192, 3);
                output.WriteUInt32(CavernCrawlPreferredMapVariant);
              }
              if (HasBountyRunes) {
                output.WriteRawTag(200, 3);
                output.WriteUInt32(BountyRunes);
              }
              if (HasOutpostsCaptured) {
                output.WriteRawTag(208, 3);
                output.WriteUInt32(OutpostsCaptured);
              }
              if (HasDewards) {
                output.WriteRawTag(216, 3);
                output.WriteUInt32(Dewards);
              }
              if (HasWardsPlaced) {
                output.WriteRawTag(224, 3);
                output.WriteUInt32(WardsPlaced);
              }
              if (HasCampsStacked) {
                output.WriteRawTag(232, 3);
                output.WriteUInt32(CampsStacked);
              }
              if (HasPlayerSlot) {
                output.WriteRawTag(240, 3);
                output.WriteUInt32(PlayerSlot);
              }
              itemPurchaseTimes_.WriteTo(ref output, _repeated_itemPurchaseTimes_codec);
              heroDamageDealt_.WriteTo(ref output, _repeated_heroDamageDealt_codec);
              if (HasPredictedPosition) {
                output.WriteRawTag(144, 4);
                output.WriteUInt32(PredictedPosition);
              }
              if (HasLaneOutcomes) {
                output.WriteRawTag(152, 4);
                output.WriteUInt32(LaneOutcomes);
              }
              if (HasFriendlyT1DestroyedTime) {
                output.WriteRawTag(160, 4);
                output.WriteUInt32(FriendlyT1DestroyedTime);
              }
              if (HasEnemyT1DestroyedTime) {
                output.WriteRawTag(168, 4);
                output.WriteUInt32(EnemyT1DestroyedTime);
              }
              if (HasFriendlyRoshanKills) {
                output.WriteRawTag(176, 4);
                output.WriteUInt32(FriendlyRoshanKills);
              }
              if (HasEnemyRoshanKills) {
                output.WriteRawTag(184, 4);
                output.WriteUInt32(EnemyRoshanKills);
              }
              if (HasPowerRunes) {
                output.WriteRawTag(192, 4);
                output.WriteUInt32(PowerRunes);
              }
              if (HasWaterRunes) {
                output.WriteRawTag(200, 4);
                output.WriteUInt32(WaterRunes);
              }
              if (HasStunDuration) {
                output.WriteRawTag(213, 4);
                output.WriteFloat(StunDuration);
              }
              if (HasTeamNumber) {
                output.WriteRawTag(216, 4);
                output.WriteEnum((int) TeamNumber);
              }
              if (HasTeamSlot) {
                output.WriteRawTag(224, 4);
                output.WriteUInt32(TeamSlot);
              }
              if (HasTimePurchasedShard) {
                output.WriteRawTag(232, 4);
                output.WriteUInt32(TimePurchasedShard);
              }
              if (HasTimePurchasedAghs) {
                output.WriteRawTag(240, 4);
                output.WriteUInt32(TimePurchasedAghs);
              }
              abilityDraftAbilities_.WriteTo(ref output, _repeated_abilityDraftAbilities_codec);
              playerTrackedStats_.WriteTo(ref output, _repeated_playerTrackedStats_codec);
              if (HasPredictedRank) {
                output.WriteRawTag(136, 5);
                output.WriteUInt32(PredictedRank);
              }
              if (HasSelectedFacet) {
                output.WriteRawTag(144, 5);
                output.WriteUInt32(SelectedFacet);
              }
              if (HasEnhancementLevel) {
                output.WriteRawTag(152, 5);
                output.WriteUInt32(EnhancementLevel);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasSteamId) {
                size += 1 + 8;
              }
              if (HasHeroId) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
              }
              size += items_.CalculateSize(_repeated_items_codec);
              size += itemPurchaseTimes_.CalculateSize(_repeated_itemPurchaseTimes_codec);
              if (HasGold) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gold);
              }
              if (HasKills) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
              }
              if (HasDeaths) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
              }
              if (HasAssists) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
              }
              if (HasLeaverStatus) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaverStatus);
              }
              if (HasLastHits) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
              }
              if (HasDenies) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Denies);
              }
              if (HasGoldPerMin) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldPerMin);
              }
              if (HasXpPerMinute) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(XpPerMinute);
              }
              if (HasGoldSpent) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldSpent);
              }
              if (HasLevel) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
              }
              if (HasScaledHeroDamage) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScaledHeroDamage);
              }
              if (HasScaledTowerDamage) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScaledTowerDamage);
              }
              if (HasScaledHeroHealing) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScaledHeroHealing);
              }
              if (HasTimeLastSeen) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TimeLastSeen);
              }
              if (HasSupportAbilityValue) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SupportAbilityValue);
              }
              if (HasPartyId) {
                size += 2 + pb::CodedOutputStream.ComputeUInt64Size(PartyId);
              }
              if (HasClaimedFarmGold) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClaimedFarmGold);
              }
              if (HasSupportGold) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SupportGold);
              }
              if (HasClaimedDenies) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClaimedDenies);
              }
              if (HasClaimedMisses) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClaimedMisses);
              }
              if (HasMisses) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Misses);
              }
              if (HasNetWorth) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
              }
              if (HasHeroDamage) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroDamage);
              }
              if (HasTowerDamage) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TowerDamage);
              }
              if (HasHeroHealing) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroHealing);
              }
              size += abilityUpgrades_.CalculateSize(_repeated_abilityUpgrades_codec);
              size += additionalUnitsInventory_.CalculateSize(_repeated_additionalUnitsInventory_codec);
              size += permanentBuffs_.CalculateSize(_repeated_permanentBuffs_codec);
              if (customGameData_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(CustomGameData);
              }
              if (HasMatchPlayerFlags) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchPlayerFlags);
              }
              size += talentAbilityIds_.CalculateSize(_repeated_talentAbilityIds_codec);
              if (HasHeroPickOrder) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroPickOrder);
              }
              if (HasHeroWasRandomed) {
                size += 2 + 1;
              }
              if (HasHeroWasDotaPlusSuggestion) {
                size += 2 + 1;
              }
              if (HasLane) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Lane);
              }
              if (HasIsUsingPlusGuide) {
                size += 2 + 1;
              }
              size += heroDamageReceived_.CalculateSize(_repeated_heroDamageReceived_codec);
              size += heroDamageDealt_.CalculateSize(_repeated_heroDamageDealt_codec);
              if (HasSecondsDead) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SecondsDead);
              }
              if (HasGoldLostToDeath) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GoldLostToDeath);
              }
              if (HasCommandCount) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CommandCount);
              }
              if (HasMouseClickCastCommandCount) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MouseClickCastCommandCount);
              }
              if (HasTeleportsUsed) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeleportsUsed);
              }
              if (HasCavernCrawlPreferredMapVariant) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CavernCrawlPreferredMapVariant);
              }
              if (HasBountyRunes) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BountyRunes);
              }
              if (HasOutpostsCaptured) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OutpostsCaptured);
              }
              if (HasDewards) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Dewards);
              }
              if (HasWardsPlaced) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WardsPlaced);
              }
              if (HasCampsStacked) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CampsStacked);
              }
              if (HasPlayerSlot) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
              }
              if (HasPredictedPosition) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PredictedPosition);
              }
              if (HasLaneOutcomes) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LaneOutcomes);
              }
              if (HasFriendlyT1DestroyedTime) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FriendlyT1DestroyedTime);
              }
              if (HasEnemyT1DestroyedTime) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EnemyT1DestroyedTime);
              }
              if (HasFriendlyRoshanKills) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FriendlyRoshanKills);
              }
              if (HasEnemyRoshanKills) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EnemyRoshanKills);
              }
              if (HasPowerRunes) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PowerRunes);
              }
              if (HasWaterRunes) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WaterRunes);
              }
              if (HasStunDuration) {
                size += 2 + 4;
              }
              if (HasTeamNumber) {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TeamNumber);
              }
              if (HasTeamSlot) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeamSlot);
              }
              if (HasTimePurchasedShard) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TimePurchasedShard);
              }
              if (HasTimePurchasedAghs) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TimePurchasedAghs);
              }
              size += abilityDraftAbilities_.CalculateSize(_repeated_abilityDraftAbilities_codec);
              size += playerTrackedStats_.CalculateSize(_repeated_playerTrackedStats_codec);
              if (HasPredictedRank) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PredictedRank);
              }
              if (HasSelectedFacet) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SelectedFacet);
              }
              if (HasEnhancementLevel) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EnhancementLevel);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CPlayer other) {
              if (other == null) {
                return;
              }
              if (other.HasSteamId) {
                SteamId = other.SteamId;
              }
              if (other.HasHeroId) {
                HeroId = other.HeroId;
              }
              items_.Add(other.items_);
              itemPurchaseTimes_.Add(other.itemPurchaseTimes_);
              if (other.HasGold) {
                Gold = other.Gold;
              }
              if (other.HasKills) {
                Kills = other.Kills;
              }
              if (other.HasDeaths) {
                Deaths = other.Deaths;
              }
              if (other.HasAssists) {
                Assists = other.Assists;
              }
              if (other.HasLeaverStatus) {
                LeaverStatus = other.LeaverStatus;
              }
              if (other.HasLastHits) {
                LastHits = other.LastHits;
              }
              if (other.HasDenies) {
                Denies = other.Denies;
              }
              if (other.HasGoldPerMin) {
                GoldPerMin = other.GoldPerMin;
              }
              if (other.HasXpPerMinute) {
                XpPerMinute = other.XpPerMinute;
              }
              if (other.HasGoldSpent) {
                GoldSpent = other.GoldSpent;
              }
              if (other.HasLevel) {
                Level = other.Level;
              }
              if (other.HasScaledHeroDamage) {
                ScaledHeroDamage = other.ScaledHeroDamage;
              }
              if (other.HasScaledTowerDamage) {
                ScaledTowerDamage = other.ScaledTowerDamage;
              }
              if (other.HasScaledHeroHealing) {
                ScaledHeroHealing = other.ScaledHeroHealing;
              }
              if (other.HasTimeLastSeen) {
                TimeLastSeen = other.TimeLastSeen;
              }
              if (other.HasSupportAbilityValue) {
                SupportAbilityValue = other.SupportAbilityValue;
              }
              if (other.HasPartyId) {
                PartyId = other.PartyId;
              }
              if (other.HasClaimedFarmGold) {
                ClaimedFarmGold = other.ClaimedFarmGold;
              }
              if (other.HasSupportGold) {
                SupportGold = other.SupportGold;
              }
              if (other.HasClaimedDenies) {
                ClaimedDenies = other.ClaimedDenies;
              }
              if (other.HasClaimedMisses) {
                ClaimedMisses = other.ClaimedMisses;
              }
              if (other.HasMisses) {
                Misses = other.Misses;
              }
              if (other.HasNetWorth) {
                NetWorth = other.NetWorth;
              }
              if (other.HasHeroDamage) {
                HeroDamage = other.HeroDamage;
              }
              if (other.HasTowerDamage) {
                TowerDamage = other.TowerDamage;
              }
              if (other.HasHeroHealing) {
                HeroHealing = other.HeroHealing;
              }
              abilityUpgrades_.Add(other.abilityUpgrades_);
              additionalUnitsInventory_.Add(other.additionalUnitsInventory_);
              permanentBuffs_.Add(other.permanentBuffs_);
              if (other.customGameData_ != null) {
                if (customGameData_ == null) {
                  CustomGameData = new global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.CCustomGameData();
                }
                CustomGameData.MergeFrom(other.CustomGameData);
              }
              if (other.HasMatchPlayerFlags) {
                MatchPlayerFlags = other.MatchPlayerFlags;
              }
              talentAbilityIds_.Add(other.talentAbilityIds_);
              if (other.HasHeroPickOrder) {
                HeroPickOrder = other.HeroPickOrder;
              }
              if (other.HasHeroWasRandomed) {
                HeroWasRandomed = other.HeroWasRandomed;
              }
              if (other.HasHeroWasDotaPlusSuggestion) {
                HeroWasDotaPlusSuggestion = other.HeroWasDotaPlusSuggestion;
              }
              if (other.HasLane) {
                Lane = other.Lane;
              }
              if (other.HasIsUsingPlusGuide) {
                IsUsingPlusGuide = other.IsUsingPlusGuide;
              }
              heroDamageReceived_.Add(other.heroDamageReceived_);
              heroDamageDealt_.Add(other.heroDamageDealt_);
              if (other.HasSecondsDead) {
                SecondsDead = other.SecondsDead;
              }
              if (other.HasGoldLostToDeath) {
                GoldLostToDeath = other.GoldLostToDeath;
              }
              if (other.HasCommandCount) {
                CommandCount = other.CommandCount;
              }
              if (other.HasMouseClickCastCommandCount) {
                MouseClickCastCommandCount = other.MouseClickCastCommandCount;
              }
              if (other.HasTeleportsUsed) {
                TeleportsUsed = other.TeleportsUsed;
              }
              if (other.HasCavernCrawlPreferredMapVariant) {
                CavernCrawlPreferredMapVariant = other.CavernCrawlPreferredMapVariant;
              }
              if (other.HasBountyRunes) {
                BountyRunes = other.BountyRunes;
              }
              if (other.HasOutpostsCaptured) {
                OutpostsCaptured = other.OutpostsCaptured;
              }
              if (other.HasDewards) {
                Dewards = other.Dewards;
              }
              if (other.HasWardsPlaced) {
                WardsPlaced = other.WardsPlaced;
              }
              if (other.HasCampsStacked) {
                CampsStacked = other.CampsStacked;
              }
              if (other.HasPlayerSlot) {
                PlayerSlot = other.PlayerSlot;
              }
              if (other.HasPredictedPosition) {
                PredictedPosition = other.PredictedPosition;
              }
              if (other.HasLaneOutcomes) {
                LaneOutcomes = other.LaneOutcomes;
              }
              if (other.HasFriendlyT1DestroyedTime) {
                FriendlyT1DestroyedTime = other.FriendlyT1DestroyedTime;
              }
              if (other.HasEnemyT1DestroyedTime) {
                EnemyT1DestroyedTime = other.EnemyT1DestroyedTime;
              }
              if (other.HasFriendlyRoshanKills) {
                FriendlyRoshanKills = other.FriendlyRoshanKills;
              }
              if (other.HasEnemyRoshanKills) {
                EnemyRoshanKills = other.EnemyRoshanKills;
              }
              if (other.HasPowerRunes) {
                PowerRunes = other.PowerRunes;
              }
              if (other.HasWaterRunes) {
                WaterRunes = other.WaterRunes;
              }
              if (other.HasStunDuration) {
                StunDuration = other.StunDuration;
              }
              if (other.HasTeamNumber) {
                TeamNumber = other.TeamNumber;
              }
              if (other.HasTeamSlot) {
                TeamSlot = other.TeamSlot;
              }
              if (other.HasTimePurchasedShard) {
                TimePurchasedShard = other.TimePurchasedShard;
              }
              if (other.HasTimePurchasedAghs) {
                TimePurchasedAghs = other.TimePurchasedAghs;
              }
              abilityDraftAbilities_.Add(other.abilityDraftAbilities_);
              playerTrackedStats_.Add(other.playerTrackedStats_);
              if (other.HasPredictedRank) {
                PredictedRank = other.PredictedRank;
              }
              if (other.HasSelectedFacet) {
                SelectedFacet = other.SelectedFacet;
              }
              if (other.HasEnhancementLevel) {
                EnhancementLevel = other.EnhancementLevel;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 9: {
                    SteamId = input.ReadFixed64();
                    break;
                  }
                  case 24: {
                    HeroId = input.ReadInt32();
                    break;
                  }
                  case 34:
                  case 32: {
                    items_.AddEntriesFrom(input, _repeated_items_codec);
                    break;
                  }
                  case 40: {
                    Gold = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    Kills = input.ReadUInt32();
                    break;
                  }
                  case 56: {
                    Deaths = input.ReadUInt32();
                    break;
                  }
                  case 64: {
                    Assists = input.ReadUInt32();
                    break;
                  }
                  case 72: {
                    LeaverStatus = input.ReadUInt32();
                    break;
                  }
                  case 80: {
                    LastHits = input.ReadUInt32();
                    break;
                  }
                  case 88: {
                    Denies = input.ReadUInt32();
                    break;
                  }
                  case 96: {
                    GoldPerMin = input.ReadUInt32();
                    break;
                  }
                  case 104: {
                    XpPerMinute = input.ReadUInt32();
                    break;
                  }
                  case 112: {
                    GoldSpent = input.ReadUInt32();
                    break;
                  }
                  case 120: {
                    Level = input.ReadUInt32();
                    break;
                  }
                  case 128: {
                    ScaledHeroDamage = input.ReadUInt32();
                    break;
                  }
                  case 136: {
                    ScaledTowerDamage = input.ReadUInt32();
                    break;
                  }
                  case 144: {
                    ScaledHeroHealing = input.ReadUInt32();
                    break;
                  }
                  case 152: {
                    TimeLastSeen = input.ReadUInt32();
                    break;
                  }
                  case 160: {
                    SupportAbilityValue = input.ReadUInt32();
                    break;
                  }
                  case 168: {
                    PartyId = input.ReadUInt64();
                    break;
                  }
                  case 216: {
                    ClaimedFarmGold = input.ReadUInt32();
                    break;
                  }
                  case 224: {
                    SupportGold = input.ReadUInt32();
                    break;
                  }
                  case 232: {
                    ClaimedDenies = input.ReadUInt32();
                    break;
                  }
                  case 240: {
                    ClaimedMisses = input.ReadUInt32();
                    break;
                  }
                  case 248: {
                    Misses = input.ReadUInt32();
                    break;
                  }
                  case 258: {
                    abilityUpgrades_.AddEntriesFrom(input, _repeated_abilityUpgrades_codec);
                    break;
                  }
                  case 266: {
                    additionalUnitsInventory_.AddEntriesFrom(input, _repeated_additionalUnitsInventory_codec);
                    break;
                  }
                  case 272: {
                    NetWorth = input.ReadUInt32();
                    break;
                  }
                  case 282: {
                    if (customGameData_ == null) {
                      CustomGameData = new global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.CCustomGameData();
                    }
                    input.ReadMessage(CustomGameData);
                    break;
                  }
                  case 288: {
                    MatchPlayerFlags = input.ReadUInt32();
                    break;
                  }
                  case 296: {
                    HeroDamage = input.ReadUInt32();
                    break;
                  }
                  case 304: {
                    TowerDamage = input.ReadUInt32();
                    break;
                  }
                  case 312: {
                    HeroHealing = input.ReadUInt32();
                    break;
                  }
                  case 322: {
                    permanentBuffs_.AddEntriesFrom(input, _repeated_permanentBuffs_codec);
                    break;
                  }
                  case 330:
                  case 328: {
                    talentAbilityIds_.AddEntriesFrom(input, _repeated_talentAbilityIds_codec);
                    break;
                  }
                  case 336: {
                    HeroPickOrder = input.ReadUInt32();
                    break;
                  }
                  case 344: {
                    HeroWasRandomed = input.ReadBool();
                    break;
                  }
                  case 360: {
                    Lane = input.ReadUInt32();
                    break;
                  }
                  case 376: {
                    IsUsingPlusGuide = input.ReadBool();
                    break;
                  }
                  case 386: {
                    heroDamageReceived_.AddEntriesFrom(input, _repeated_heroDamageReceived_codec);
                    break;
                  }
                  case 400: {
                    HeroWasDotaPlusSuggestion = input.ReadBool();
                    break;
                  }
                  case 408: {
                    SecondsDead = input.ReadUInt32();
                    break;
                  }
                  case 416: {
                    GoldLostToDeath = input.ReadUInt32();
                    break;
                  }
                  case 424: {
                    CommandCount = input.ReadUInt32();
                    break;
                  }
                  case 432: {
                    MouseClickCastCommandCount = input.ReadUInt32();
                    break;
                  }
                  case 440: {
                    TeleportsUsed = input.ReadUInt32();
                    break;
                  }
                  case 448: {
                    CavernCrawlPreferredMapVariant = input.ReadUInt32();
                    break;
                  }
                  case 456: {
                    BountyRunes = input.ReadUInt32();
                    break;
                  }
                  case 464: {
                    OutpostsCaptured = input.ReadUInt32();
                    break;
                  }
                  case 472: {
                    Dewards = input.ReadUInt32();
                    break;
                  }
                  case 480: {
                    WardsPlaced = input.ReadUInt32();
                    break;
                  }
                  case 488: {
                    CampsStacked = input.ReadUInt32();
                    break;
                  }
                  case 496: {
                    PlayerSlot = input.ReadUInt32();
                    break;
                  }
                  case 506:
                  case 504: {
                    itemPurchaseTimes_.AddEntriesFrom(input, _repeated_itemPurchaseTimes_codec);
                    break;
                  }
                  case 514: {
                    heroDamageDealt_.AddEntriesFrom(input, _repeated_heroDamageDealt_codec);
                    break;
                  }
                  case 528: {
                    PredictedPosition = input.ReadUInt32();
                    break;
                  }
                  case 536: {
                    LaneOutcomes = input.ReadUInt32();
                    break;
                  }
                  case 544: {
                    FriendlyT1DestroyedTime = input.ReadUInt32();
                    break;
                  }
                  case 552: {
                    EnemyT1DestroyedTime = input.ReadUInt32();
                    break;
                  }
                  case 560: {
                    FriendlyRoshanKills = input.ReadUInt32();
                    break;
                  }
                  case 568: {
                    EnemyRoshanKills = input.ReadUInt32();
                    break;
                  }
                  case 576: {
                    PowerRunes = input.ReadUInt32();
                    break;
                  }
                  case 584: {
                    WaterRunes = input.ReadUInt32();
                    break;
                  }
                  case 597: {
                    StunDuration = input.ReadFloat();
                    break;
                  }
                  case 600: {
                    TeamNumber = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
                    break;
                  }
                  case 608: {
                    TeamSlot = input.ReadUInt32();
                    break;
                  }
                  case 616: {
                    TimePurchasedShard = input.ReadUInt32();
                    break;
                  }
                  case 624: {
                    TimePurchasedAghs = input.ReadUInt32();
                    break;
                  }
                  case 634:
                  case 632: {
                    abilityDraftAbilities_.AddEntriesFrom(input, _repeated_abilityDraftAbilities_codec);
                    break;
                  }
                  case 642: {
                    playerTrackedStats_.AddEntriesFrom(input, _repeated_playerTrackedStats_codec);
                    break;
                  }
                  case 648: {
                    PredictedRank = input.ReadUInt32();
                    break;
                  }
                  case 656: {
                    SelectedFacet = input.ReadUInt32();
                    break;
                  }
                  case 664: {
                    EnhancementLevel = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 9: {
                    SteamId = input.ReadFixed64();
                    break;
                  }
                  case 24: {
                    HeroId = input.ReadInt32();
                    break;
                  }
                  case 34:
                  case 32: {
                    items_.AddEntriesFrom(ref input, _repeated_items_codec);
                    break;
                  }
                  case 40: {
                    Gold = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    Kills = input.ReadUInt32();
                    break;
                  }
                  case 56: {
                    Deaths = input.ReadUInt32();
                    break;
                  }
                  case 64: {
                    Assists = input.ReadUInt32();
                    break;
                  }
                  case 72: {
                    LeaverStatus = input.ReadUInt32();
                    break;
                  }
                  case 80: {
                    LastHits = input.ReadUInt32();
                    break;
                  }
                  case 88: {
                    Denies = input.ReadUInt32();
                    break;
                  }
                  case 96: {
                    GoldPerMin = input.ReadUInt32();
                    break;
                  }
                  case 104: {
                    XpPerMinute = input.ReadUInt32();
                    break;
                  }
                  case 112: {
                    GoldSpent = input.ReadUInt32();
                    break;
                  }
                  case 120: {
                    Level = input.ReadUInt32();
                    break;
                  }
                  case 128: {
                    ScaledHeroDamage = input.ReadUInt32();
                    break;
                  }
                  case 136: {
                    ScaledTowerDamage = input.ReadUInt32();
                    break;
                  }
                  case 144: {
                    ScaledHeroHealing = input.ReadUInt32();
                    break;
                  }
                  case 152: {
                    TimeLastSeen = input.ReadUInt32();
                    break;
                  }
                  case 160: {
                    SupportAbilityValue = input.ReadUInt32();
                    break;
                  }
                  case 168: {
                    PartyId = input.ReadUInt64();
                    break;
                  }
                  case 216: {
                    ClaimedFarmGold = input.ReadUInt32();
                    break;
                  }
                  case 224: {
                    SupportGold = input.ReadUInt32();
                    break;
                  }
                  case 232: {
                    ClaimedDenies = input.ReadUInt32();
                    break;
                  }
                  case 240: {
                    ClaimedMisses = input.ReadUInt32();
                    break;
                  }
                  case 248: {
                    Misses = input.ReadUInt32();
                    break;
                  }
                  case 258: {
                    abilityUpgrades_.AddEntriesFrom(ref input, _repeated_abilityUpgrades_codec);
                    break;
                  }
                  case 266: {
                    additionalUnitsInventory_.AddEntriesFrom(ref input, _repeated_additionalUnitsInventory_codec);
                    break;
                  }
                  case 272: {
                    NetWorth = input.ReadUInt32();
                    break;
                  }
                  case 282: {
                    if (customGameData_ == null) {
                      CustomGameData = new global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.CCustomGameData();
                    }
                    input.ReadMessage(CustomGameData);
                    break;
                  }
                  case 288: {
                    MatchPlayerFlags = input.ReadUInt32();
                    break;
                  }
                  case 296: {
                    HeroDamage = input.ReadUInt32();
                    break;
                  }
                  case 304: {
                    TowerDamage = input.ReadUInt32();
                    break;
                  }
                  case 312: {
                    HeroHealing = input.ReadUInt32();
                    break;
                  }
                  case 322: {
                    permanentBuffs_.AddEntriesFrom(ref input, _repeated_permanentBuffs_codec);
                    break;
                  }
                  case 330:
                  case 328: {
                    talentAbilityIds_.AddEntriesFrom(ref input, _repeated_talentAbilityIds_codec);
                    break;
                  }
                  case 336: {
                    HeroPickOrder = input.ReadUInt32();
                    break;
                  }
                  case 344: {
                    HeroWasRandomed = input.ReadBool();
                    break;
                  }
                  case 360: {
                    Lane = input.ReadUInt32();
                    break;
                  }
                  case 376: {
                    IsUsingPlusGuide = input.ReadBool();
                    break;
                  }
                  case 386: {
                    heroDamageReceived_.AddEntriesFrom(ref input, _repeated_heroDamageReceived_codec);
                    break;
                  }
                  case 400: {
                    HeroWasDotaPlusSuggestion = input.ReadBool();
                    break;
                  }
                  case 408: {
                    SecondsDead = input.ReadUInt32();
                    break;
                  }
                  case 416: {
                    GoldLostToDeath = input.ReadUInt32();
                    break;
                  }
                  case 424: {
                    CommandCount = input.ReadUInt32();
                    break;
                  }
                  case 432: {
                    MouseClickCastCommandCount = input.ReadUInt32();
                    break;
                  }
                  case 440: {
                    TeleportsUsed = input.ReadUInt32();
                    break;
                  }
                  case 448: {
                    CavernCrawlPreferredMapVariant = input.ReadUInt32();
                    break;
                  }
                  case 456: {
                    BountyRunes = input.ReadUInt32();
                    break;
                  }
                  case 464: {
                    OutpostsCaptured = input.ReadUInt32();
                    break;
                  }
                  case 472: {
                    Dewards = input.ReadUInt32();
                    break;
                  }
                  case 480: {
                    WardsPlaced = input.ReadUInt32();
                    break;
                  }
                  case 488: {
                    CampsStacked = input.ReadUInt32();
                    break;
                  }
                  case 496: {
                    PlayerSlot = input.ReadUInt32();
                    break;
                  }
                  case 506:
                  case 504: {
                    itemPurchaseTimes_.AddEntriesFrom(ref input, _repeated_itemPurchaseTimes_codec);
                    break;
                  }
                  case 514: {
                    heroDamageDealt_.AddEntriesFrom(ref input, _repeated_heroDamageDealt_codec);
                    break;
                  }
                  case 528: {
                    PredictedPosition = input.ReadUInt32();
                    break;
                  }
                  case 536: {
                    LaneOutcomes = input.ReadUInt32();
                    break;
                  }
                  case 544: {
                    FriendlyT1DestroyedTime = input.ReadUInt32();
                    break;
                  }
                  case 552: {
                    EnemyT1DestroyedTime = input.ReadUInt32();
                    break;
                  }
                  case 560: {
                    FriendlyRoshanKills = input.ReadUInt32();
                    break;
                  }
                  case 568: {
                    EnemyRoshanKills = input.ReadUInt32();
                    break;
                  }
                  case 576: {
                    PowerRunes = input.ReadUInt32();
                    break;
                  }
                  case 584: {
                    WaterRunes = input.ReadUInt32();
                    break;
                  }
                  case 597: {
                    StunDuration = input.ReadFloat();
                    break;
                  }
                  case 600: {
                    TeamNumber = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
                    break;
                  }
                  case 608: {
                    TeamSlot = input.ReadUInt32();
                    break;
                  }
                  case 616: {
                    TimePurchasedShard = input.ReadUInt32();
                    break;
                  }
                  case 624: {
                    TimePurchasedAghs = input.ReadUInt32();
                    break;
                  }
                  case 634:
                  case 632: {
                    abilityDraftAbilities_.AddEntriesFrom(ref input, _repeated_abilityDraftAbilities_codec);
                    break;
                  }
                  case 642: {
                    playerTrackedStats_.AddEntriesFrom(ref input, _repeated_playerTrackedStats_codec);
                    break;
                  }
                  case 648: {
                    PredictedRank = input.ReadUInt32();
                    break;
                  }
                  case 656: {
                    SelectedFacet = input.ReadUInt32();
                    break;
                  }
                  case 664: {
                    EnhancementLevel = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the CPlayer message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum HeroDamageType {
                [pbr::OriginalName("HERO_DAMAGE_PHYSICAL")] HeroDamagePhysical = 0,
                [pbr::OriginalName("HERO_DAMAGE_MAGICAL")] HeroDamageMagical = 1,
                [pbr::OriginalName("HERO_DAMAGE_PURE")] HeroDamagePure = 2,
              }

              public sealed partial class CCustomGameData : pb::IMessage<CCustomGameData>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<CCustomGameData> _parser = new pb::MessageParser<CCustomGameData>(() => new CCustomGameData());
                private pb::UnknownFieldSet _unknownFields;
                private int _hasBits0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<CCustomGameData> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CCustomGameData() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CCustomGameData(CCustomGameData other) : this() {
                  _hasBits0 = other._hasBits0;
                  dotaTeam_ = other.dotaTeam_;
                  winner_ = other.winner_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CCustomGameData Clone() {
                  return new CCustomGameData(this);
                }

                /// <summary>Field number for the "dota_team" field.</summary>
                public const int DotaTeamFieldNumber = 1;
                private readonly static uint DotaTeamDefaultValue = 0;

                private uint dotaTeam_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint DotaTeam {
                  get { if ((_hasBits0 & 1) != 0) { return dotaTeam_; } else { return DotaTeamDefaultValue; } }
                  set {
                    _hasBits0 |= 1;
                    dotaTeam_ = value;
                  }
                }
                /// <summary>Gets whether the "dota_team" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasDotaTeam {
                  get { return (_hasBits0 & 1) != 0; }
                }
                /// <summary>Clears the value of the "dota_team" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearDotaTeam() {
                  _hasBits0 &= ~1;
                }

                /// <summary>Field number for the "winner" field.</summary>
                public const int WinnerFieldNumber = 2;
                private readonly static bool WinnerDefaultValue = false;

                private bool winner_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Winner {
                  get { if ((_hasBits0 & 2) != 0) { return winner_; } else { return WinnerDefaultValue; } }
                  set {
                    _hasBits0 |= 2;
                    winner_ = value;
                  }
                }
                /// <summary>Gets whether the "winner" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasWinner {
                  get { return (_hasBits0 & 2) != 0; }
                }
                /// <summary>Clears the value of the "winner" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearWinner() {
                  _hasBits0 &= ~2;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as CCustomGameData);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(CCustomGameData other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (DotaTeam != other.DotaTeam) return false;
                  if (Winner != other.Winner) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (HasDotaTeam) hash ^= DotaTeam.GetHashCode();
                  if (HasWinner) hash ^= Winner.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (HasDotaTeam) {
                    output.WriteRawTag(8);
                    output.WriteUInt32(DotaTeam);
                  }
                  if (HasWinner) {
                    output.WriteRawTag(16);
                    output.WriteBool(Winner);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (HasDotaTeam) {
                    output.WriteRawTag(8);
                    output.WriteUInt32(DotaTeam);
                  }
                  if (HasWinner) {
                    output.WriteRawTag(16);
                    output.WriteBool(Winner);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (HasDotaTeam) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DotaTeam);
                  }
                  if (HasWinner) {
                    size += 1 + 1;
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(CCustomGameData other) {
                  if (other == null) {
                    return;
                  }
                  if (other.HasDotaTeam) {
                    DotaTeam = other.DotaTeam;
                  }
                  if (other.HasWinner) {
                    Winner = other.Winner;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        DotaTeam = input.ReadUInt32();
                        break;
                      }
                      case 16: {
                        Winner = input.ReadBool();
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 8: {
                        DotaTeam = input.ReadUInt32();
                        break;
                      }
                      case 16: {
                        Winner = input.ReadBool();
                        break;
                      }
                    }
                  }
                }
                #endif

              }

              public sealed partial class HeroDamageReceived : pb::IMessage<HeroDamageReceived>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<HeroDamageReceived> _parser = new pb::MessageParser<HeroDamageReceived>(() => new HeroDamageReceived());
                private pb::UnknownFieldSet _unknownFields;
                private int _hasBits0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<HeroDamageReceived> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public HeroDamageReceived() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public HeroDamageReceived(HeroDamageReceived other) : this() {
                  _hasBits0 = other._hasBits0;
                  preReduction_ = other.preReduction_;
                  postReduction_ = other.postReduction_;
                  damageType_ = other.damageType_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public HeroDamageReceived Clone() {
                  return new HeroDamageReceived(this);
                }

                /// <summary>Field number for the "pre_reduction" field.</summary>
                public const int PreReductionFieldNumber = 1;
                private readonly static uint PreReductionDefaultValue = 0;

                private uint preReduction_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint PreReduction {
                  get { if ((_hasBits0 & 1) != 0) { return preReduction_; } else { return PreReductionDefaultValue; } }
                  set {
                    _hasBits0 |= 1;
                    preReduction_ = value;
                  }
                }
                /// <summary>Gets whether the "pre_reduction" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasPreReduction {
                  get { return (_hasBits0 & 1) != 0; }
                }
                /// <summary>Clears the value of the "pre_reduction" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearPreReduction() {
                  _hasBits0 &= ~1;
                }

                /// <summary>Field number for the "post_reduction" field.</summary>
                public const int PostReductionFieldNumber = 2;
                private readonly static uint PostReductionDefaultValue = 0;

                private uint postReduction_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint PostReduction {
                  get { if ((_hasBits0 & 2) != 0) { return postReduction_; } else { return PostReductionDefaultValue; } }
                  set {
                    _hasBits0 |= 2;
                    postReduction_ = value;
                  }
                }
                /// <summary>Gets whether the "post_reduction" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasPostReduction {
                  get { return (_hasBits0 & 2) != 0; }
                }
                /// <summary>Clears the value of the "post_reduction" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearPostReduction() {
                  _hasBits0 &= ~2;
                }

                /// <summary>Field number for the "damage_type" field.</summary>
                public const int DamageTypeFieldNumber = 3;
                private readonly static global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageType DamageTypeDefaultValue = global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageType.HeroDamagePhysical;

                private global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageType damageType_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageType DamageType {
                  get { if ((_hasBits0 & 4) != 0) { return damageType_; } else { return DamageTypeDefaultValue; } }
                  set {
                    _hasBits0 |= 4;
                    damageType_ = value;
                  }
                }
                /// <summary>Gets whether the "damage_type" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasDamageType {
                  get { return (_hasBits0 & 4) != 0; }
                }
                /// <summary>Clears the value of the "damage_type" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearDamageType() {
                  _hasBits0 &= ~4;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as HeroDamageReceived);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(HeroDamageReceived other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (PreReduction != other.PreReduction) return false;
                  if (PostReduction != other.PostReduction) return false;
                  if (DamageType != other.DamageType) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (HasPreReduction) hash ^= PreReduction.GetHashCode();
                  if (HasPostReduction) hash ^= PostReduction.GetHashCode();
                  if (HasDamageType) hash ^= DamageType.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (HasPreReduction) {
                    output.WriteRawTag(8);
                    output.WriteUInt32(PreReduction);
                  }
                  if (HasPostReduction) {
                    output.WriteRawTag(16);
                    output.WriteUInt32(PostReduction);
                  }
                  if (HasDamageType) {
                    output.WriteRawTag(24);
                    output.WriteEnum((int) DamageType);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (HasPreReduction) {
                    output.WriteRawTag(8);
                    output.WriteUInt32(PreReduction);
                  }
                  if (HasPostReduction) {
                    output.WriteRawTag(16);
                    output.WriteUInt32(PostReduction);
                  }
                  if (HasDamageType) {
                    output.WriteRawTag(24);
                    output.WriteEnum((int) DamageType);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (HasPreReduction) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreReduction);
                  }
                  if (HasPostReduction) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PostReduction);
                  }
                  if (HasDamageType) {
                    size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DamageType);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(HeroDamageReceived other) {
                  if (other == null) {
                    return;
                  }
                  if (other.HasPreReduction) {
                    PreReduction = other.PreReduction;
                  }
                  if (other.HasPostReduction) {
                    PostReduction = other.PostReduction;
                  }
                  if (other.HasDamageType) {
                    DamageType = other.DamageType;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        PreReduction = input.ReadUInt32();
                        break;
                      }
                      case 16: {
                        PostReduction = input.ReadUInt32();
                        break;
                      }
                      case 24: {
                        DamageType = (global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageType) input.ReadEnum();
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 8: {
                        PreReduction = input.ReadUInt32();
                        break;
                      }
                      case 16: {
                        PostReduction = input.ReadUInt32();
                        break;
                      }
                      case 24: {
                        DamageType = (global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Types.CTeam.Types.CPlayer.Types.HeroDamageType) input.ReadEnum();
                        break;
                      }
                    }
                  }
                }
                #endif

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class CAdditionalSignoutMsg : pb::IMessage<CAdditionalSignoutMsg>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CAdditionalSignoutMsg> _parser = new pb::MessageParser<CAdditionalSignoutMsg>(() => new CAdditionalSignoutMsg());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CAdditionalSignoutMsg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CAdditionalSignoutMsg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CAdditionalSignoutMsg(CAdditionalSignoutMsg other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          contents_ = other.contents_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CAdditionalSignoutMsg Clone() {
          return new CAdditionalSignoutMsg(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static uint IdDefaultValue = 0;

        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "contents" field.</summary>
        public const int ContentsFieldNumber = 2;
        private readonly static pb::ByteString ContentsDefaultValue = pb::ByteString.Empty;

        private pb::ByteString contents_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Contents {
          get { return contents_ ?? ContentsDefaultValue; }
          set {
            contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "contents" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContents {
          get { return contents_ != null; }
        }
        /// <summary>Clears the value of the "contents" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContents() {
          contents_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CAdditionalSignoutMsg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CAdditionalSignoutMsg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Contents != other.Contents) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasContents) hash ^= Contents.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (HasContents) {
            output.WriteRawTag(18);
            output.WriteBytes(Contents);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (HasContents) {
            output.WriteRawTag(18);
            output.WriteBytes(Contents);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (HasContents) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Contents);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CAdditionalSignoutMsg other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasContents) {
            Contents = other.Contents;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Contents = input.ReadBytes();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Contents = input.ReadBytes();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class CSocialFeedMatchEvent : pb::IMessage<CSocialFeedMatchEvent>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CSocialFeedMatchEvent> _parser = new pb::MessageParser<CSocialFeedMatchEvent>(() => new CSocialFeedMatchEvent());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CSocialFeedMatchEvent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CSocialFeedMatchEvent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CSocialFeedMatchEvent(CSocialFeedMatchEvent other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          timestamp_ = other.timestamp_;
          eventType_ = other.eventType_;
          gameTime_ = other.gameTime_;
          replayTime_ = other.replayTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CSocialFeedMatchEvent Clone() {
          return new CSocialFeedMatchEvent(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private readonly static uint TimestampDefaultValue = 0;

        private uint timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Timestamp {
          get { if ((_hasBits0 & 2) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
          set {
            _hasBits0 |= 2;
            timestamp_ = value;
          }
        }
        /// <summary>Gets whether the "timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimestamp {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimestamp() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "event_type" field.</summary>
        public const int EventTypeFieldNumber = 3;
        private readonly static uint EventTypeDefaultValue = 0;

        private uint eventType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EventType {
          get { if ((_hasBits0 & 4) != 0) { return eventType_; } else { return EventTypeDefaultValue; } }
          set {
            _hasBits0 |= 4;
            eventType_ = value;
          }
        }
        /// <summary>Gets whether the "event_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEventType {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "event_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEventType() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "game_time" field.</summary>
        public const int GameTimeFieldNumber = 4;
        private readonly static int GameTimeDefaultValue = 0;

        private int gameTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GameTime {
          get { if ((_hasBits0 & 8) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
          set {
            _hasBits0 |= 8;
            gameTime_ = value;
          }
        }
        /// <summary>Gets whether the "game_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameTime {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "game_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameTime() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "replay_time" field.</summary>
        public const int ReplayTimeFieldNumber = 5;
        private readonly static uint ReplayTimeDefaultValue = 0;

        private uint replayTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ReplayTime {
          get { if ((_hasBits0 & 16) != 0) { return replayTime_; } else { return ReplayTimeDefaultValue; } }
          set {
            _hasBits0 |= 16;
            replayTime_ = value;
          }
        }
        /// <summary>Gets whether the "replay_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReplayTime {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "replay_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReplayTime() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CSocialFeedMatchEvent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CSocialFeedMatchEvent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (Timestamp != other.Timestamp) return false;
          if (EventType != other.EventType) return false;
          if (GameTime != other.GameTime) return false;
          if (ReplayTime != other.ReplayTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasTimestamp) hash ^= Timestamp.GetHashCode();
          if (HasEventType) hash ^= EventType.GetHashCode();
          if (HasGameTime) hash ^= GameTime.GetHashCode();
          if (HasReplayTime) hash ^= ReplayTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasTimestamp) {
            output.WriteRawTag(16);
            output.WriteUInt32(Timestamp);
          }
          if (HasEventType) {
            output.WriteRawTag(24);
            output.WriteUInt32(EventType);
          }
          if (HasGameTime) {
            output.WriteRawTag(32);
            output.WriteInt32(GameTime);
          }
          if (HasReplayTime) {
            output.WriteRawTag(40);
            output.WriteUInt32(ReplayTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasTimestamp) {
            output.WriteRawTag(16);
            output.WriteUInt32(Timestamp);
          }
          if (HasEventType) {
            output.WriteRawTag(24);
            output.WriteUInt32(EventType);
          }
          if (HasGameTime) {
            output.WriteRawTag(32);
            output.WriteInt32(GameTime);
          }
          if (HasReplayTime) {
            output.WriteRawTag(40);
            output.WriteUInt32(ReplayTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
          }
          if (HasEventType) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventType);
          }
          if (HasGameTime) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
          }
          if (HasReplayTime) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReplayTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CSocialFeedMatchEvent other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          if (other.HasEventType) {
            EventType = other.EventType;
          }
          if (other.HasGameTime) {
            GameTime = other.GameTime;
          }
          if (other.HasReplayTime) {
            ReplayTime = other.ReplayTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                Timestamp = input.ReadUInt32();
                break;
              }
              case 24: {
                EventType = input.ReadUInt32();
                break;
              }
              case 32: {
                GameTime = input.ReadInt32();
                break;
              }
              case 40: {
                ReplayTime = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                Timestamp = input.ReadUInt32();
                break;
              }
              case 24: {
                EventType = input.ReadUInt32();
                break;
              }
              case 32: {
                GameTime = input.ReadInt32();
                break;
              }
              case 40: {
                ReplayTime = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class CCustomGameData : pb::IMessage<CCustomGameData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CCustomGameData> _parser = new pb::MessageParser<CCustomGameData>(() => new CCustomGameData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CCustomGameData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CCustomGameData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CCustomGameData(CCustomGameData other) : this() {
          _hasBits0 = other._hasBits0;
          publishTimestamp_ = other.publishTimestamp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CCustomGameData Clone() {
          return new CCustomGameData(this);
        }

        /// <summary>Field number for the "publish_timestamp" field.</summary>
        public const int PublishTimestampFieldNumber = 1;
        private readonly static uint PublishTimestampDefaultValue = 0;

        private uint publishTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PublishTimestamp {
          get { if ((_hasBits0 & 1) != 0) { return publishTimestamp_; } else { return PublishTimestampDefaultValue; } }
          set {
            _hasBits0 |= 1;
            publishTimestamp_ = value;
          }
        }
        /// <summary>Gets whether the "publish_timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPublishTimestamp {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "publish_timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPublishTimestamp() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CCustomGameData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CCustomGameData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PublishTimestamp != other.PublishTimestamp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPublishTimestamp) hash ^= PublishTimestamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPublishTimestamp) {
            output.WriteRawTag(8);
            output.WriteUInt32(PublishTimestamp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPublishTimestamp) {
            output.WriteRawTag(8);
            output.WriteUInt32(PublishTimestamp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPublishTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PublishTimestamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CCustomGameData other) {
          if (other == null) {
            return;
          }
          if (other.HasPublishTimestamp) {
            PublishTimestamp = other.PublishTimestamp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PublishTimestamp = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PublishTimestamp = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class EventGameLeaderboardEntry : pb::IMessage<EventGameLeaderboardEntry>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<EventGameLeaderboardEntry> _parser = new pb::MessageParser<EventGameLeaderboardEntry>(() => new EventGameLeaderboardEntry());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EventGameLeaderboardEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventGameLeaderboardEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventGameLeaderboardEntry(EventGameLeaderboardEntry other) : this() {
          _hasBits0 = other._hasBits0;
          nameSuffix_ = other.nameSuffix_;
          score_ = other.score_;
          extraData1_ = other.extraData1_;
          extraData2_ = other.extraData2_;
          extraData3_ = other.extraData3_;
          extraData4_ = other.extraData4_;
          extraData5_ = other.extraData5_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventGameLeaderboardEntry Clone() {
          return new EventGameLeaderboardEntry(this);
        }

        /// <summary>Field number for the "name_suffix" field.</summary>
        public const int NameSuffixFieldNumber = 1;
        private readonly static string NameSuffixDefaultValue = "";

        private string nameSuffix_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NameSuffix {
          get { return nameSuffix_ ?? NameSuffixDefaultValue; }
          set {
            nameSuffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name_suffix" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNameSuffix {
          get { return nameSuffix_ != null; }
        }
        /// <summary>Clears the value of the "name_suffix" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNameSuffix() {
          nameSuffix_ = null;
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 2;
        private readonly static int ScoreDefaultValue = 0;

        private int score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Score {
          get { if ((_hasBits0 & 1) != 0) { return score_; } else { return ScoreDefaultValue; } }
          set {
            _hasBits0 |= 1;
            score_ = value;
          }
        }
        /// <summary>Gets whether the "score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScore {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScore() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "extra_data_1" field.</summary>
        public const int ExtraData1FieldNumber = 3;
        private readonly static uint ExtraData1DefaultValue = 0;

        private uint extraData1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ExtraData1 {
          get { if ((_hasBits0 & 2) != 0) { return extraData1_; } else { return ExtraData1DefaultValue; } }
          set {
            _hasBits0 |= 2;
            extraData1_ = value;
          }
        }
        /// <summary>Gets whether the "extra_data_1" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExtraData1 {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "extra_data_1" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExtraData1() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "extra_data_2" field.</summary>
        public const int ExtraData2FieldNumber = 4;
        private readonly static uint ExtraData2DefaultValue = 0;

        private uint extraData2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ExtraData2 {
          get { if ((_hasBits0 & 4) != 0) { return extraData2_; } else { return ExtraData2DefaultValue; } }
          set {
            _hasBits0 |= 4;
            extraData2_ = value;
          }
        }
        /// <summary>Gets whether the "extra_data_2" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExtraData2 {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "extra_data_2" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExtraData2() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "extra_data_3" field.</summary>
        public const int ExtraData3FieldNumber = 5;
        private readonly static uint ExtraData3DefaultValue = 0;

        private uint extraData3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ExtraData3 {
          get { if ((_hasBits0 & 8) != 0) { return extraData3_; } else { return ExtraData3DefaultValue; } }
          set {
            _hasBits0 |= 8;
            extraData3_ = value;
          }
        }
        /// <summary>Gets whether the "extra_data_3" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExtraData3 {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "extra_data_3" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExtraData3() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "extra_data_4" field.</summary>
        public const int ExtraData4FieldNumber = 6;
        private readonly static uint ExtraData4DefaultValue = 0;

        private uint extraData4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ExtraData4 {
          get { if ((_hasBits0 & 16) != 0) { return extraData4_; } else { return ExtraData4DefaultValue; } }
          set {
            _hasBits0 |= 16;
            extraData4_ = value;
          }
        }
        /// <summary>Gets whether the "extra_data_4" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExtraData4 {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "extra_data_4" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExtraData4() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "extra_data_5" field.</summary>
        public const int ExtraData5FieldNumber = 7;
        private readonly static uint ExtraData5DefaultValue = 0;

        private uint extraData5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ExtraData5 {
          get { if ((_hasBits0 & 32) != 0) { return extraData5_; } else { return ExtraData5DefaultValue; } }
          set {
            _hasBits0 |= 32;
            extraData5_ = value;
          }
        }
        /// <summary>Gets whether the "extra_data_5" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExtraData5 {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "extra_data_5" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExtraData5() {
          _hasBits0 &= ~32;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EventGameLeaderboardEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EventGameLeaderboardEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NameSuffix != other.NameSuffix) return false;
          if (Score != other.Score) return false;
          if (ExtraData1 != other.ExtraData1) return false;
          if (ExtraData2 != other.ExtraData2) return false;
          if (ExtraData3 != other.ExtraData3) return false;
          if (ExtraData4 != other.ExtraData4) return false;
          if (ExtraData5 != other.ExtraData5) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasNameSuffix) hash ^= NameSuffix.GetHashCode();
          if (HasScore) hash ^= Score.GetHashCode();
          if (HasExtraData1) hash ^= ExtraData1.GetHashCode();
          if (HasExtraData2) hash ^= ExtraData2.GetHashCode();
          if (HasExtraData3) hash ^= ExtraData3.GetHashCode();
          if (HasExtraData4) hash ^= ExtraData4.GetHashCode();
          if (HasExtraData5) hash ^= ExtraData5.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasNameSuffix) {
            output.WriteRawTag(10);
            output.WriteString(NameSuffix);
          }
          if (HasScore) {
            output.WriteRawTag(16);
            output.WriteInt32(Score);
          }
          if (HasExtraData1) {
            output.WriteRawTag(24);
            output.WriteUInt32(ExtraData1);
          }
          if (HasExtraData2) {
            output.WriteRawTag(32);
            output.WriteUInt32(ExtraData2);
          }
          if (HasExtraData3) {
            output.WriteRawTag(40);
            output.WriteUInt32(ExtraData3);
          }
          if (HasExtraData4) {
            output.WriteRawTag(48);
            output.WriteUInt32(ExtraData4);
          }
          if (HasExtraData5) {
            output.WriteRawTag(56);
            output.WriteUInt32(ExtraData5);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasNameSuffix) {
            output.WriteRawTag(10);
            output.WriteString(NameSuffix);
          }
          if (HasScore) {
            output.WriteRawTag(16);
            output.WriteInt32(Score);
          }
          if (HasExtraData1) {
            output.WriteRawTag(24);
            output.WriteUInt32(ExtraData1);
          }
          if (HasExtraData2) {
            output.WriteRawTag(32);
            output.WriteUInt32(ExtraData2);
          }
          if (HasExtraData3) {
            output.WriteRawTag(40);
            output.WriteUInt32(ExtraData3);
          }
          if (HasExtraData4) {
            output.WriteRawTag(48);
            output.WriteUInt32(ExtraData4);
          }
          if (HasExtraData5) {
            output.WriteRawTag(56);
            output.WriteUInt32(ExtraData5);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasNameSuffix) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NameSuffix);
          }
          if (HasScore) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
          }
          if (HasExtraData1) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraData1);
          }
          if (HasExtraData2) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraData2);
          }
          if (HasExtraData3) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraData3);
          }
          if (HasExtraData4) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraData4);
          }
          if (HasExtraData5) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraData5);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EventGameLeaderboardEntry other) {
          if (other == null) {
            return;
          }
          if (other.HasNameSuffix) {
            NameSuffix = other.NameSuffix;
          }
          if (other.HasScore) {
            Score = other.Score;
          }
          if (other.HasExtraData1) {
            ExtraData1 = other.ExtraData1;
          }
          if (other.HasExtraData2) {
            ExtraData2 = other.ExtraData2;
          }
          if (other.HasExtraData3) {
            ExtraData3 = other.ExtraData3;
          }
          if (other.HasExtraData4) {
            ExtraData4 = other.ExtraData4;
          }
          if (other.HasExtraData5) {
            ExtraData5 = other.ExtraData5;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                NameSuffix = input.ReadString();
                break;
              }
              case 16: {
                Score = input.ReadInt32();
                break;
              }
              case 24: {
                ExtraData1 = input.ReadUInt32();
                break;
              }
              case 32: {
                ExtraData2 = input.ReadUInt32();
                break;
              }
              case 40: {
                ExtraData3 = input.ReadUInt32();
                break;
              }
              case 48: {
                ExtraData4 = input.ReadUInt32();
                break;
              }
              case 56: {
                ExtraData5 = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                NameSuffix = input.ReadString();
                break;
              }
              case 16: {
                Score = input.ReadInt32();
                break;
              }
              case 24: {
                ExtraData1 = input.ReadUInt32();
                break;
              }
              case 32: {
                ExtraData2 = input.ReadUInt32();
                break;
              }
              case 40: {
                ExtraData3 = input.ReadUInt32();
                break;
              }
              case 48: {
                ExtraData4 = input.ReadUInt32();
                break;
              }
              case 56: {
                ExtraData5 = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class WardPlacement : pb::IMessage<WardPlacement>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<WardPlacement> _parser = new pb::MessageParser<WardPlacement>(() => new WardPlacement());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WardPlacement> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGameMatchSignOut.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WardPlacement() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WardPlacement(WardPlacement other) : this() {
          _hasBits0 = other._hasBits0;
          playerId_ = other.playerId_;
          teamId_ = other.teamId_;
          placedTime_ = other.placedTime_;
          buildingState_ = other.buildingState_;
          creepState_ = other.creepState_;
          roshanAlive_ = other.roshanAlive_;
          positionX_ = other.positionX_;
          positionY_ = other.positionY_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WardPlacement Clone() {
          return new WardPlacement(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static int PlayerIdDefaultValue = -1;

        private int playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerId {
          get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            playerId_ = value;
          }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "team_id" field.</summary>
        public const int TeamIdFieldNumber = 2;
        private readonly static uint TeamIdDefaultValue = 0;

        private uint teamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamId {
          get { if ((_hasBits0 & 2) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            teamId_ = value;
          }
        }
        /// <summary>Gets whether the "team_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "team_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "placed_time" field.</summary>
        public const int PlacedTimeFieldNumber = 3;
        private readonly static uint PlacedTimeDefaultValue = 0;

        private uint placedTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlacedTime {
          get { if ((_hasBits0 & 4) != 0) { return placedTime_; } else { return PlacedTimeDefaultValue; } }
          set {
            _hasBits0 |= 4;
            placedTime_ = value;
          }
        }
        /// <summary>Gets whether the "placed_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlacedTime {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "placed_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlacedTime() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "building_state" field.</summary>
        public const int BuildingStateFieldNumber = 4;
        private readonly static uint BuildingStateDefaultValue = 0;

        private uint buildingState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BuildingState {
          get { if ((_hasBits0 & 8) != 0) { return buildingState_; } else { return BuildingStateDefaultValue; } }
          set {
            _hasBits0 |= 8;
            buildingState_ = value;
          }
        }
        /// <summary>Gets whether the "building_state" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuildingState {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "building_state" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuildingState() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "creep_state" field.</summary>
        public const int CreepStateFieldNumber = 5;
        private readonly static uint CreepStateDefaultValue = 0;

        private uint creepState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreepState {
          get { if ((_hasBits0 & 16) != 0) { return creepState_; } else { return CreepStateDefaultValue; } }
          set {
            _hasBits0 |= 16;
            creepState_ = value;
          }
        }
        /// <summary>Gets whether the "creep_state" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreepState {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "creep_state" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreepState() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "roshan_alive" field.</summary>
        public const int RoshanAliveFieldNumber = 6;
        private readonly static bool RoshanAliveDefaultValue = false;

        private bool roshanAlive_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RoshanAlive {
          get { if ((_hasBits0 & 32) != 0) { return roshanAlive_; } else { return RoshanAliveDefaultValue; } }
          set {
            _hasBits0 |= 32;
            roshanAlive_ = value;
          }
        }
        /// <summary>Gets whether the "roshan_alive" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRoshanAlive {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "roshan_alive" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRoshanAlive() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "position_x" field.</summary>
        public const int PositionXFieldNumber = 7;
        private readonly static uint PositionXDefaultValue = 0;

        private uint positionX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PositionX {
          get { if ((_hasBits0 & 64) != 0) { return positionX_; } else { return PositionXDefaultValue; } }
          set {
            _hasBits0 |= 64;
            positionX_ = value;
          }
        }
        /// <summary>Gets whether the "position_x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPositionX {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "position_x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPositionX() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "position_y" field.</summary>
        public const int PositionYFieldNumber = 8;
        private readonly static uint PositionYDefaultValue = 0;

        private uint positionY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PositionY {
          get { if ((_hasBits0 & 128) != 0) { return positionY_; } else { return PositionYDefaultValue; } }
          set {
            _hasBits0 |= 128;
            positionY_ = value;
          }
        }
        /// <summary>Gets whether the "position_y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPositionY {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "position_y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPositionY() {
          _hasBits0 &= ~128;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WardPlacement);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WardPlacement other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerId != other.PlayerId) return false;
          if (TeamId != other.TeamId) return false;
          if (PlacedTime != other.PlacedTime) return false;
          if (BuildingState != other.BuildingState) return false;
          if (CreepState != other.CreepState) return false;
          if (RoshanAlive != other.RoshanAlive) return false;
          if (PositionX != other.PositionX) return false;
          if (PositionY != other.PositionY) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPlayerId) hash ^= PlayerId.GetHashCode();
          if (HasTeamId) hash ^= TeamId.GetHashCode();
          if (HasPlacedTime) hash ^= PlacedTime.GetHashCode();
          if (HasBuildingState) hash ^= BuildingState.GetHashCode();
          if (HasCreepState) hash ^= CreepState.GetHashCode();
          if (HasRoshanAlive) hash ^= RoshanAlive.GetHashCode();
          if (HasPositionX) hash ^= PositionX.GetHashCode();
          if (HasPositionY) hash ^= PositionY.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPlayerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerId);
          }
          if (HasTeamId) {
            output.WriteRawTag(16);
            output.WriteUInt32(TeamId);
          }
          if (HasPlacedTime) {
            output.WriteRawTag(24);
            output.WriteUInt32(PlacedTime);
          }
          if (HasBuildingState) {
            output.WriteRawTag(32);
            output.WriteUInt32(BuildingState);
          }
          if (HasCreepState) {
            output.WriteRawTag(40);
            output.WriteUInt32(CreepState);
          }
          if (HasRoshanAlive) {
            output.WriteRawTag(48);
            output.WriteBool(RoshanAlive);
          }
          if (HasPositionX) {
            output.WriteRawTag(56);
            output.WriteUInt32(PositionX);
          }
          if (HasPositionY) {
            output.WriteRawTag(64);
            output.WriteUInt32(PositionY);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPlayerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerId);
          }
          if (HasTeamId) {
            output.WriteRawTag(16);
            output.WriteUInt32(TeamId);
          }
          if (HasPlacedTime) {
            output.WriteRawTag(24);
            output.WriteUInt32(PlacedTime);
          }
          if (HasBuildingState) {
            output.WriteRawTag(32);
            output.WriteUInt32(BuildingState);
          }
          if (HasCreepState) {
            output.WriteRawTag(40);
            output.WriteUInt32(CreepState);
          }
          if (HasRoshanAlive) {
            output.WriteRawTag(48);
            output.WriteBool(RoshanAlive);
          }
          if (HasPositionX) {
            output.WriteRawTag(56);
            output.WriteUInt32(PositionX);
          }
          if (HasPositionY) {
            output.WriteRawTag(64);
            output.WriteUInt32(PositionY);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPlayerId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
          }
          if (HasTeamId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
          }
          if (HasPlacedTime) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlacedTime);
          }
          if (HasBuildingState) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildingState);
          }
          if (HasCreepState) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreepState);
          }
          if (HasRoshanAlive) {
            size += 1 + 1;
          }
          if (HasPositionX) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionX);
          }
          if (HasPositionY) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionY);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WardPlacement other) {
          if (other == null) {
            return;
          }
          if (other.HasPlayerId) {
            PlayerId = other.PlayerId;
          }
          if (other.HasTeamId) {
            TeamId = other.TeamId;
          }
          if (other.HasPlacedTime) {
            PlacedTime = other.PlacedTime;
          }
          if (other.HasBuildingState) {
            BuildingState = other.BuildingState;
          }
          if (other.HasCreepState) {
            CreepState = other.CreepState;
          }
          if (other.HasRoshanAlive) {
            RoshanAlive = other.RoshanAlive;
          }
          if (other.HasPositionX) {
            PositionX = other.PositionX;
          }
          if (other.HasPositionY) {
            PositionY = other.PositionY;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerId = input.ReadInt32();
                break;
              }
              case 16: {
                TeamId = input.ReadUInt32();
                break;
              }
              case 24: {
                PlacedTime = input.ReadUInt32();
                break;
              }
              case 32: {
                BuildingState = input.ReadUInt32();
                break;
              }
              case 40: {
                CreepState = input.ReadUInt32();
                break;
              }
              case 48: {
                RoshanAlive = input.ReadBool();
                break;
              }
              case 56: {
                PositionX = input.ReadUInt32();
                break;
              }
              case 64: {
                PositionY = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerId = input.ReadInt32();
                break;
              }
              case 16: {
                TeamId = input.ReadUInt32();
                break;
              }
              case 24: {
                PlacedTime = input.ReadUInt32();
                break;
              }
              case 32: {
                BuildingState = input.ReadUInt32();
                break;
              }
              case 40: {
                CreepState = input.ReadUInt32();
                break;
              }
              case 48: {
                RoshanAlive = input.ReadBool();
                break;
              }
              case 56: {
                PositionX = input.ReadUInt32();
                break;
              }
              case 64: {
                PositionY = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSignOutDraftInfo : pb::IMessage<CMsgSignOutDraftInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutDraftInfo> _parser = new pb::MessageParser<CMsgSignOutDraftInfo>(() => new CMsgSignOutDraftInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutDraftInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutDraftInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutDraftInfo(CMsgSignOutDraftInfo other) : this() {
      _hasBits0 = other._hasBits0;
      radiantCaptainAccountId_ = other.radiantCaptainAccountId_;
      direCaptainAccountId_ = other.direCaptainAccountId_;
      picksBans_ = other.picksBans_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutDraftInfo Clone() {
      return new CMsgSignOutDraftInfo(this);
    }

    /// <summary>Field number for the "radiant_captain_account_id" field.</summary>
    public const int RadiantCaptainAccountIdFieldNumber = 1;
    private readonly static uint RadiantCaptainAccountIdDefaultValue = 0;

    private uint radiantCaptainAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantCaptainAccountId {
      get { if ((_hasBits0 & 1) != 0) { return radiantCaptainAccountId_; } else { return RadiantCaptainAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        radiantCaptainAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_captain_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantCaptainAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "radiant_captain_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantCaptainAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "dire_captain_account_id" field.</summary>
    public const int DireCaptainAccountIdFieldNumber = 2;
    private readonly static uint DireCaptainAccountIdDefaultValue = 0;

    private uint direCaptainAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireCaptainAccountId {
      get { if ((_hasBits0 & 2) != 0) { return direCaptainAccountId_; } else { return DireCaptainAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        direCaptainAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "dire_captain_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireCaptainAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "dire_captain_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireCaptainAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "picks_bans" field.</summary>
    public const int PicksBansFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchHeroSelectEvent> _repeated_picksBans_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMatchHeroSelectEvent.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchHeroSelectEvent> picksBans_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchHeroSelectEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchHeroSelectEvent> PicksBans {
      get { return picksBans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutDraftInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutDraftInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RadiantCaptainAccountId != other.RadiantCaptainAccountId) return false;
      if (DireCaptainAccountId != other.DireCaptainAccountId) return false;
      if(!picksBans_.Equals(other.picksBans_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRadiantCaptainAccountId) hash ^= RadiantCaptainAccountId.GetHashCode();
      if (HasDireCaptainAccountId) hash ^= DireCaptainAccountId.GetHashCode();
      hash ^= picksBans_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRadiantCaptainAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RadiantCaptainAccountId);
      }
      if (HasDireCaptainAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(DireCaptainAccountId);
      }
      picksBans_.WriteTo(output, _repeated_picksBans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRadiantCaptainAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RadiantCaptainAccountId);
      }
      if (HasDireCaptainAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(DireCaptainAccountId);
      }
      picksBans_.WriteTo(ref output, _repeated_picksBans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRadiantCaptainAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RadiantCaptainAccountId);
      }
      if (HasDireCaptainAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DireCaptainAccountId);
      }
      size += picksBans_.CalculateSize(_repeated_picksBans_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutDraftInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasRadiantCaptainAccountId) {
        RadiantCaptainAccountId = other.RadiantCaptainAccountId;
      }
      if (other.HasDireCaptainAccountId) {
        DireCaptainAccountId = other.DireCaptainAccountId;
      }
      picksBans_.Add(other.picksBans_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RadiantCaptainAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            DireCaptainAccountId = input.ReadUInt32();
            break;
          }
          case 26: {
            picksBans_.AddEntriesFrom(input, _repeated_picksBans_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RadiantCaptainAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            DireCaptainAccountId = input.ReadUInt32();
            break;
          }
          case 26: {
            picksBans_.AddEntriesFrom(ref input, _repeated_picksBans_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSignOutBotInfo : pb::IMessage<CMsgSignOutBotInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutBotInfo> _parser = new pb::MessageParser<CMsgSignOutBotInfo>(() => new CMsgSignOutBotInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutBotInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutBotInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutBotInfo(CMsgSignOutBotInfo other) : this() {
      _hasBits0 = other._hasBits0;
      allowCheats_ = other.allowCheats_;
      botDifficultyRadiant_ = other.botDifficultyRadiant_;
      createdLobby_ = other.createdLobby_;
      botDifficultyDire_ = other.botDifficultyDire_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutBotInfo Clone() {
      return new CMsgSignOutBotInfo(this);
    }

    /// <summary>Field number for the "allow_cheats" field.</summary>
    public const int AllowCheatsFieldNumber = 1;
    private readonly static bool AllowCheatsDefaultValue = false;

    private bool allowCheats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowCheats {
      get { if ((_hasBits0 & 1) != 0) { return allowCheats_; } else { return AllowCheatsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        allowCheats_ = value;
      }
    }
    /// <summary>Gets whether the "allow_cheats" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllowCheats {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "allow_cheats" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllowCheats() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bot_difficulty_radiant" field.</summary>
    public const int BotDifficultyRadiantFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.DOTABotDifficulty BotDifficultyRadiantDefaultValue = global::Steam.Protos.Dota2.DOTABotDifficulty.BotDifficultyPassive;

    private global::Steam.Protos.Dota2.DOTABotDifficulty botDifficultyRadiant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTABotDifficulty BotDifficultyRadiant {
      get { if ((_hasBits0 & 2) != 0) { return botDifficultyRadiant_; } else { return BotDifficultyRadiantDefaultValue; } }
      set {
        _hasBits0 |= 2;
        botDifficultyRadiant_ = value;
      }
    }
    /// <summary>Gets whether the "bot_difficulty_radiant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBotDifficultyRadiant {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bot_difficulty_radiant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBotDifficultyRadiant() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "created_lobby" field.</summary>
    public const int CreatedLobbyFieldNumber = 3;
    private readonly static bool CreatedLobbyDefaultValue = false;

    private bool createdLobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CreatedLobby {
      get { if ((_hasBits0 & 4) != 0) { return createdLobby_; } else { return CreatedLobbyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        createdLobby_ = value;
      }
    }
    /// <summary>Gets whether the "created_lobby" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreatedLobby {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "created_lobby" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreatedLobby() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "bot_difficulty_dire" field.</summary>
    public const int BotDifficultyDireFieldNumber = 5;
    private readonly static global::Steam.Protos.Dota2.DOTABotDifficulty BotDifficultyDireDefaultValue = global::Steam.Protos.Dota2.DOTABotDifficulty.BotDifficultyPassive;

    private global::Steam.Protos.Dota2.DOTABotDifficulty botDifficultyDire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTABotDifficulty BotDifficultyDire {
      get { if ((_hasBits0 & 8) != 0) { return botDifficultyDire_; } else { return BotDifficultyDireDefaultValue; } }
      set {
        _hasBits0 |= 8;
        botDifficultyDire_ = value;
      }
    }
    /// <summary>Gets whether the "bot_difficulty_dire" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBotDifficultyDire {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "bot_difficulty_dire" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBotDifficultyDire() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutBotInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutBotInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllowCheats != other.AllowCheats) return false;
      if (BotDifficultyRadiant != other.BotDifficultyRadiant) return false;
      if (CreatedLobby != other.CreatedLobby) return false;
      if (BotDifficultyDire != other.BotDifficultyDire) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAllowCheats) hash ^= AllowCheats.GetHashCode();
      if (HasBotDifficultyRadiant) hash ^= BotDifficultyRadiant.GetHashCode();
      if (HasCreatedLobby) hash ^= CreatedLobby.GetHashCode();
      if (HasBotDifficultyDire) hash ^= BotDifficultyDire.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAllowCheats) {
        output.WriteRawTag(8);
        output.WriteBool(AllowCheats);
      }
      if (HasBotDifficultyRadiant) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BotDifficultyRadiant);
      }
      if (HasCreatedLobby) {
        output.WriteRawTag(24);
        output.WriteBool(CreatedLobby);
      }
      if (HasBotDifficultyDire) {
        output.WriteRawTag(40);
        output.WriteEnum((int) BotDifficultyDire);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAllowCheats) {
        output.WriteRawTag(8);
        output.WriteBool(AllowCheats);
      }
      if (HasBotDifficultyRadiant) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BotDifficultyRadiant);
      }
      if (HasCreatedLobby) {
        output.WriteRawTag(24);
        output.WriteBool(CreatedLobby);
      }
      if (HasBotDifficultyDire) {
        output.WriteRawTag(40);
        output.WriteEnum((int) BotDifficultyDire);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAllowCheats) {
        size += 1 + 1;
      }
      if (HasBotDifficultyRadiant) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BotDifficultyRadiant);
      }
      if (HasCreatedLobby) {
        size += 1 + 1;
      }
      if (HasBotDifficultyDire) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BotDifficultyDire);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutBotInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasAllowCheats) {
        AllowCheats = other.AllowCheats;
      }
      if (other.HasBotDifficultyRadiant) {
        BotDifficultyRadiant = other.BotDifficultyRadiant;
      }
      if (other.HasCreatedLobby) {
        CreatedLobby = other.CreatedLobby;
      }
      if (other.HasBotDifficultyDire) {
        BotDifficultyDire = other.BotDifficultyDire;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllowCheats = input.ReadBool();
            break;
          }
          case 16: {
            BotDifficultyRadiant = (global::Steam.Protos.Dota2.DOTABotDifficulty) input.ReadEnum();
            break;
          }
          case 24: {
            CreatedLobby = input.ReadBool();
            break;
          }
          case 40: {
            BotDifficultyDire = (global::Steam.Protos.Dota2.DOTABotDifficulty) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AllowCheats = input.ReadBool();
            break;
          }
          case 16: {
            BotDifficultyRadiant = (global::Steam.Protos.Dota2.DOTABotDifficulty) input.ReadEnum();
            break;
          }
          case 24: {
            CreatedLobby = input.ReadBool();
            break;
          }
          case 40: {
            BotDifficultyDire = (global::Steam.Protos.Dota2.DOTABotDifficulty) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSignOutTextMuteInfo : pb::IMessage<CMsgSignOutTextMuteInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutTextMuteInfo> _parser = new pb::MessageParser<CMsgSignOutTextMuteInfo>(() => new CMsgSignOutTextMuteInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutTextMuteInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutTextMuteInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutTextMuteInfo(CMsgSignOutTextMuteInfo other) : this() {
      textMuteMessages_ = other.textMuteMessages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutTextMuteInfo Clone() {
      return new CMsgSignOutTextMuteInfo(this);
    }

    /// <summary>Field number for the "text_mute_messages" field.</summary>
    public const int TextMuteMessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutTextMuteInfo.Types.TextMuteMessage> _repeated_textMuteMessages_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSignOutTextMuteInfo.Types.TextMuteMessage.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutTextMuteInfo.Types.TextMuteMessage> textMuteMessages_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutTextMuteInfo.Types.TextMuteMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutTextMuteInfo.Types.TextMuteMessage> TextMuteMessages {
      get { return textMuteMessages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutTextMuteInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutTextMuteInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!textMuteMessages_.Equals(other.textMuteMessages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= textMuteMessages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      textMuteMessages_.WriteTo(output, _repeated_textMuteMessages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      textMuteMessages_.WriteTo(ref output, _repeated_textMuteMessages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += textMuteMessages_.CalculateSize(_repeated_textMuteMessages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutTextMuteInfo other) {
      if (other == null) {
        return;
      }
      textMuteMessages_.Add(other.textMuteMessages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            textMuteMessages_.AddEntriesFrom(input, _repeated_textMuteMessages_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            textMuteMessages_.AddEntriesFrom(ref input, _repeated_textMuteMessages_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutTextMuteInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TextMuteMessage : pb::IMessage<TextMuteMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TextMuteMessage> _parser = new pb::MessageParser<TextMuteMessage>(() => new TextMuteMessage());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TextMuteMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutTextMuteInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextMuteMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextMuteMessage(TextMuteMessage other) : this() {
          _hasBits0 = other._hasBits0;
          region_ = other.region_;
          causedTextMute_ = other.causedTextMute_;
          chatMessage_ = other.chatMessage_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextMuteMessage Clone() {
          return new TextMuteMessage(this);
        }

        /// <summary>Field number for the "region" field.</summary>
        public const int RegionFieldNumber = 1;
        private readonly static uint RegionDefaultValue = 0;

        private uint region_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Region {
          get { if ((_hasBits0 & 1) != 0) { return region_; } else { return RegionDefaultValue; } }
          set {
            _hasBits0 |= 1;
            region_ = value;
          }
        }
        /// <summary>Gets whether the "region" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRegion {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "region" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRegion() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "caused_text_mute" field.</summary>
        public const int CausedTextMuteFieldNumber = 2;
        private readonly static bool CausedTextMuteDefaultValue = false;

        private bool causedTextMute_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool CausedTextMute {
          get { if ((_hasBits0 & 2) != 0) { return causedTextMute_; } else { return CausedTextMuteDefaultValue; } }
          set {
            _hasBits0 |= 2;
            causedTextMute_ = value;
          }
        }
        /// <summary>Gets whether the "caused_text_mute" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCausedTextMute {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "caused_text_mute" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCausedTextMute() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "chat_message" field.</summary>
        public const int ChatMessageFieldNumber = 3;
        private readonly static string ChatMessageDefaultValue = "";

        private string chatMessage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChatMessage {
          get { return chatMessage_ ?? ChatMessageDefaultValue; }
          set {
            chatMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "chat_message" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChatMessage {
          get { return chatMessage_ != null; }
        }
        /// <summary>Clears the value of the "chat_message" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChatMessage() {
          chatMessage_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TextMuteMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TextMuteMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Region != other.Region) return false;
          if (CausedTextMute != other.CausedTextMute) return false;
          if (ChatMessage != other.ChatMessage) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasRegion) hash ^= Region.GetHashCode();
          if (HasCausedTextMute) hash ^= CausedTextMute.GetHashCode();
          if (HasChatMessage) hash ^= ChatMessage.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasRegion) {
            output.WriteRawTag(8);
            output.WriteUInt32(Region);
          }
          if (HasCausedTextMute) {
            output.WriteRawTag(16);
            output.WriteBool(CausedTextMute);
          }
          if (HasChatMessage) {
            output.WriteRawTag(26);
            output.WriteString(ChatMessage);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasRegion) {
            output.WriteRawTag(8);
            output.WriteUInt32(Region);
          }
          if (HasCausedTextMute) {
            output.WriteRawTag(16);
            output.WriteBool(CausedTextMute);
          }
          if (HasChatMessage) {
            output.WriteRawTag(26);
            output.WriteString(ChatMessage);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasRegion) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Region);
          }
          if (HasCausedTextMute) {
            size += 1 + 1;
          }
          if (HasChatMessage) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatMessage);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TextMuteMessage other) {
          if (other == null) {
            return;
          }
          if (other.HasRegion) {
            Region = other.Region;
          }
          if (other.HasCausedTextMute) {
            CausedTextMute = other.CausedTextMute;
          }
          if (other.HasChatMessage) {
            ChatMessage = other.ChatMessage;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Region = input.ReadUInt32();
                break;
              }
              case 16: {
                CausedTextMute = input.ReadBool();
                break;
              }
              case 26: {
                ChatMessage = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Region = input.ReadUInt32();
                break;
              }
              case 16: {
                CausedTextMute = input.ReadBool();
                break;
              }
              case 26: {
                ChatMessage = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSignOutPlayerStats : pb::IMessage<CMsgSignOutPlayerStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutPlayerStats> _parser = new pb::MessageParser<CMsgSignOutPlayerStats>(() => new CMsgSignOutPlayerStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutPlayerStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutPlayerStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutPlayerStats(CMsgSignOutPlayerStats other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      matchId_ = other.matchId_;
      rank_ = other.rank_;
      heroId_ = other.heroId_;
      rampages_ = other.rampages_;
      tripleKills_ = other.tripleKills_;
      firstBloodClaimed_ = other.firstBloodClaimed_;
      firstBloodGiven_ = other.firstBloodGiven_;
      couriersKilled_ = other.couriersKilled_;
      aegisesSnatched_ = other.aegisesSnatched_;
      cheesesEaten_ = other.cheesesEaten_;
      creepsStacked_ = other.creepsStacked_;
      fightScore_ = other.fightScore_;
      farmScore_ = other.farmScore_;
      supportScore_ = other.supportScore_;
      pushScore_ = other.pushScore_;
      kills_ = other.kills_;
      deaths_ = other.deaths_;
      assists_ = other.assists_;
      lastHits_ = other.lastHits_;
      denies_ = other.denies_;
      gpm_ = other.gpm_;
      xppm_ = other.xppm_;
      netWorth_ = other.netWorth_;
      damage_ = other.damage_;
      heals_ = other.heals_;
      rapiersPurchased_ = other.rapiersPurchased_;
      observerWardsPlaced_ = other.observerWardsPlaced_;
      wardsDestroyed_ = other.wardsDestroyed_;
      lobbyType_ = other.lobbyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutPlayerStats Clone() {
      return new CMsgSignOutPlayerStats(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static int AccountIdDefaultValue = 0;

    private int accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 2) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private readonly static uint RankDefaultValue = 0;

    private uint rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { if ((_hasBits0 & 4) != 0) { return rank_; } else { return RankDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rank_ = value;
      }
    }
    /// <summary>Gets whether the "rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRank {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRank() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 8) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "rampages" field.</summary>
    public const int RampagesFieldNumber = 5;
    private readonly static uint RampagesDefaultValue = 0;

    private uint rampages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rampages {
      get { if ((_hasBits0 & 16) != 0) { return rampages_; } else { return RampagesDefaultValue; } }
      set {
        _hasBits0 |= 16;
        rampages_ = value;
      }
    }
    /// <summary>Gets whether the "rampages" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRampages {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "rampages" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRampages() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "triple_kills" field.</summary>
    public const int TripleKillsFieldNumber = 6;
    private readonly static uint TripleKillsDefaultValue = 0;

    private uint tripleKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TripleKills {
      get { if ((_hasBits0 & 32) != 0) { return tripleKills_; } else { return TripleKillsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        tripleKills_ = value;
      }
    }
    /// <summary>Gets whether the "triple_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTripleKills {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "triple_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTripleKills() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "first_blood_claimed" field.</summary>
    public const int FirstBloodClaimedFieldNumber = 7;
    private readonly static uint FirstBloodClaimedDefaultValue = 0;

    private uint firstBloodClaimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstBloodClaimed {
      get { if ((_hasBits0 & 64) != 0) { return firstBloodClaimed_; } else { return FirstBloodClaimedDefaultValue; } }
      set {
        _hasBits0 |= 64;
        firstBloodClaimed_ = value;
      }
    }
    /// <summary>Gets whether the "first_blood_claimed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstBloodClaimed {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "first_blood_claimed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstBloodClaimed() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "first_blood_given" field.</summary>
    public const int FirstBloodGivenFieldNumber = 8;
    private readonly static uint FirstBloodGivenDefaultValue = 0;

    private uint firstBloodGiven_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstBloodGiven {
      get { if ((_hasBits0 & 128) != 0) { return firstBloodGiven_; } else { return FirstBloodGivenDefaultValue; } }
      set {
        _hasBits0 |= 128;
        firstBloodGiven_ = value;
      }
    }
    /// <summary>Gets whether the "first_blood_given" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstBloodGiven {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "first_blood_given" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstBloodGiven() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "couriers_killed" field.</summary>
    public const int CouriersKilledFieldNumber = 9;
    private readonly static uint CouriersKilledDefaultValue = 0;

    private uint couriersKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CouriersKilled {
      get { if ((_hasBits0 & 256) != 0) { return couriersKilled_; } else { return CouriersKilledDefaultValue; } }
      set {
        _hasBits0 |= 256;
        couriersKilled_ = value;
      }
    }
    /// <summary>Gets whether the "couriers_killed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCouriersKilled {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "couriers_killed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCouriersKilled() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "aegises_snatched" field.</summary>
    public const int AegisesSnatchedFieldNumber = 10;
    private readonly static uint AegisesSnatchedDefaultValue = 0;

    private uint aegisesSnatched_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AegisesSnatched {
      get { if ((_hasBits0 & 512) != 0) { return aegisesSnatched_; } else { return AegisesSnatchedDefaultValue; } }
      set {
        _hasBits0 |= 512;
        aegisesSnatched_ = value;
      }
    }
    /// <summary>Gets whether the "aegises_snatched" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAegisesSnatched {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "aegises_snatched" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAegisesSnatched() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "cheeses_eaten" field.</summary>
    public const int CheesesEatenFieldNumber = 11;
    private readonly static uint CheesesEatenDefaultValue = 0;

    private uint cheesesEaten_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CheesesEaten {
      get { if ((_hasBits0 & 1024) != 0) { return cheesesEaten_; } else { return CheesesEatenDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        cheesesEaten_ = value;
      }
    }
    /// <summary>Gets whether the "cheeses_eaten" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheesesEaten {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "cheeses_eaten" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheesesEaten() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "creeps_stacked" field.</summary>
    public const int CreepsStackedFieldNumber = 12;
    private readonly static uint CreepsStackedDefaultValue = 0;

    private uint creepsStacked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreepsStacked {
      get { if ((_hasBits0 & 2048) != 0) { return creepsStacked_; } else { return CreepsStackedDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        creepsStacked_ = value;
      }
    }
    /// <summary>Gets whether the "creeps_stacked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreepsStacked {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "creeps_stacked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreepsStacked() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "fight_score" field.</summary>
    public const int FightScoreFieldNumber = 13;
    private readonly static float FightScoreDefaultValue = 0F;

    private float fightScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FightScore {
      get { if ((_hasBits0 & 4096) != 0) { return fightScore_; } else { return FightScoreDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        fightScore_ = value;
      }
    }
    /// <summary>Gets whether the "fight_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFightScore {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "fight_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFightScore() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "farm_score" field.</summary>
    public const int FarmScoreFieldNumber = 14;
    private readonly static float FarmScoreDefaultValue = 0F;

    private float farmScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FarmScore {
      get { if ((_hasBits0 & 8192) != 0) { return farmScore_; } else { return FarmScoreDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        farmScore_ = value;
      }
    }
    /// <summary>Gets whether the "farm_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFarmScore {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "farm_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFarmScore() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "support_score" field.</summary>
    public const int SupportScoreFieldNumber = 15;
    private readonly static float SupportScoreDefaultValue = 0F;

    private float supportScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SupportScore {
      get { if ((_hasBits0 & 16384) != 0) { return supportScore_; } else { return SupportScoreDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        supportScore_ = value;
      }
    }
    /// <summary>Gets whether the "support_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSupportScore {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "support_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSupportScore() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "push_score" field.</summary>
    public const int PushScoreFieldNumber = 16;
    private readonly static float PushScoreDefaultValue = 0F;

    private float pushScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PushScore {
      get { if ((_hasBits0 & 32768) != 0) { return pushScore_; } else { return PushScoreDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        pushScore_ = value;
      }
    }
    /// <summary>Gets whether the "push_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPushScore {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "push_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPushScore() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "kills" field.</summary>
    public const int KillsFieldNumber = 17;
    private readonly static uint KillsDefaultValue = 0;

    private uint kills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kills {
      get { if ((_hasBits0 & 65536) != 0) { return kills_; } else { return KillsDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        kills_ = value;
      }
    }
    /// <summary>Gets whether the "kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKills {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKills() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "deaths" field.</summary>
    public const int DeathsFieldNumber = 18;
    private readonly static uint DeathsDefaultValue = 0;

    private uint deaths_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deaths {
      get { if ((_hasBits0 & 131072) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        deaths_ = value;
      }
    }
    /// <summary>Gets whether the "deaths" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeaths {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "deaths" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeaths() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "assists" field.</summary>
    public const int AssistsFieldNumber = 19;
    private readonly static uint AssistsDefaultValue = 0;

    private uint assists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Assists {
      get { if ((_hasBits0 & 262144) != 0) { return assists_; } else { return AssistsDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        assists_ = value;
      }
    }
    /// <summary>Gets whether the "assists" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssists {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "assists" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssists() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "last_hits" field.</summary>
    public const int LastHitsFieldNumber = 20;
    private readonly static uint LastHitsDefaultValue = 0;

    private uint lastHits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastHits {
      get { if ((_hasBits0 & 524288) != 0) { return lastHits_; } else { return LastHitsDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        lastHits_ = value;
      }
    }
    /// <summary>Gets whether the "last_hits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastHits {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "last_hits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastHits() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "denies" field.</summary>
    public const int DeniesFieldNumber = 21;
    private readonly static uint DeniesDefaultValue = 0;

    private uint denies_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Denies {
      get { if ((_hasBits0 & 1048576) != 0) { return denies_; } else { return DeniesDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        denies_ = value;
      }
    }
    /// <summary>Gets whether the "denies" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDenies {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "denies" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDenies() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "gpm" field.</summary>
    public const int GpmFieldNumber = 22;
    private readonly static float GpmDefaultValue = 0F;

    private float gpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Gpm {
      get { if ((_hasBits0 & 2097152) != 0) { return gpm_; } else { return GpmDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        gpm_ = value;
      }
    }
    /// <summary>Gets whether the "gpm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGpm {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "gpm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGpm() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "xppm" field.</summary>
    public const int XppmFieldNumber = 23;
    private readonly static float XppmDefaultValue = 0F;

    private float xppm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xppm {
      get { if ((_hasBits0 & 4194304) != 0) { return xppm_; } else { return XppmDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        xppm_ = value;
      }
    }
    /// <summary>Gets whether the "xppm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXppm {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "xppm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearXppm() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "net_worth" field.</summary>
    public const int NetWorthFieldNumber = 24;
    private readonly static float NetWorthDefaultValue = 0F;

    private float netWorth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NetWorth {
      get { if ((_hasBits0 & 8388608) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        netWorth_ = value;
      }
    }
    /// <summary>Gets whether the "net_worth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNetWorth {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "net_worth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNetWorth() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 25;
    private readonly static float DamageDefaultValue = 0F;

    private float damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Damage {
      get { if ((_hasBits0 & 16777216) != 0) { return damage_; } else { return DamageDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        damage_ = value;
      }
    }
    /// <summary>Gets whether the "damage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamage {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "damage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamage() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "heals" field.</summary>
    public const int HealsFieldNumber = 26;
    private readonly static float HealsDefaultValue = 0F;

    private float heals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Heals {
      get { if ((_hasBits0 & 33554432) != 0) { return heals_; } else { return HealsDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        heals_ = value;
      }
    }
    /// <summary>Gets whether the "heals" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeals {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "heals" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeals() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "rapiers_purchased" field.</summary>
    public const int RapiersPurchasedFieldNumber = 27;
    private readonly static uint RapiersPurchasedDefaultValue = 0;

    private uint rapiersPurchased_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RapiersPurchased {
      get { if ((_hasBits0 & 67108864) != 0) { return rapiersPurchased_; } else { return RapiersPurchasedDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        rapiersPurchased_ = value;
      }
    }
    /// <summary>Gets whether the "rapiers_purchased" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRapiersPurchased {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "rapiers_purchased" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRapiersPurchased() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "observer_wards_placed" field.</summary>
    public const int ObserverWardsPlacedFieldNumber = 28;
    private readonly static uint ObserverWardsPlacedDefaultValue = 0;

    private uint observerWardsPlaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObserverWardsPlaced {
      get { if ((_hasBits0 & 134217728) != 0) { return observerWardsPlaced_; } else { return ObserverWardsPlacedDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        observerWardsPlaced_ = value;
      }
    }
    /// <summary>Gets whether the "observer_wards_placed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObserverWardsPlaced {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "observer_wards_placed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObserverWardsPlaced() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "wards_destroyed" field.</summary>
    public const int WardsDestroyedFieldNumber = 29;
    private readonly static uint WardsDestroyedDefaultValue = 0;

    private uint wardsDestroyed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WardsDestroyed {
      get { if ((_hasBits0 & 268435456) != 0) { return wardsDestroyed_; } else { return WardsDestroyedDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        wardsDestroyed_ = value;
      }
    }
    /// <summary>Gets whether the "wards_destroyed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWardsDestroyed {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "wards_destroyed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWardsDestroyed() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "lobby_type" field.</summary>
    public const int LobbyTypeFieldNumber = 30;
    private readonly static uint LobbyTypeDefaultValue = 0;

    private uint lobbyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyType {
      get { if ((_hasBits0 & 536870912) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        lobbyType_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyType {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "lobby_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyType() {
      _hasBits0 &= ~536870912;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutPlayerStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutPlayerStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (MatchId != other.MatchId) return false;
      if (Rank != other.Rank) return false;
      if (HeroId != other.HeroId) return false;
      if (Rampages != other.Rampages) return false;
      if (TripleKills != other.TripleKills) return false;
      if (FirstBloodClaimed != other.FirstBloodClaimed) return false;
      if (FirstBloodGiven != other.FirstBloodGiven) return false;
      if (CouriersKilled != other.CouriersKilled) return false;
      if (AegisesSnatched != other.AegisesSnatched) return false;
      if (CheesesEaten != other.CheesesEaten) return false;
      if (CreepsStacked != other.CreepsStacked) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FightScore, other.FightScore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FarmScore, other.FarmScore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SupportScore, other.SupportScore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PushScore, other.PushScore)) return false;
      if (Kills != other.Kills) return false;
      if (Deaths != other.Deaths) return false;
      if (Assists != other.Assists) return false;
      if (LastHits != other.LastHits) return false;
      if (Denies != other.Denies) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gpm, other.Gpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xppm, other.Xppm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NetWorth, other.NetWorth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Damage, other.Damage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Heals, other.Heals)) return false;
      if (RapiersPurchased != other.RapiersPurchased) return false;
      if (ObserverWardsPlaced != other.ObserverWardsPlaced) return false;
      if (WardsDestroyed != other.WardsDestroyed) return false;
      if (LobbyType != other.LobbyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasRank) hash ^= Rank.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasRampages) hash ^= Rampages.GetHashCode();
      if (HasTripleKills) hash ^= TripleKills.GetHashCode();
      if (HasFirstBloodClaimed) hash ^= FirstBloodClaimed.GetHashCode();
      if (HasFirstBloodGiven) hash ^= FirstBloodGiven.GetHashCode();
      if (HasCouriersKilled) hash ^= CouriersKilled.GetHashCode();
      if (HasAegisesSnatched) hash ^= AegisesSnatched.GetHashCode();
      if (HasCheesesEaten) hash ^= CheesesEaten.GetHashCode();
      if (HasCreepsStacked) hash ^= CreepsStacked.GetHashCode();
      if (HasFightScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FightScore);
      if (HasFarmScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FarmScore);
      if (HasSupportScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SupportScore);
      if (HasPushScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PushScore);
      if (HasKills) hash ^= Kills.GetHashCode();
      if (HasDeaths) hash ^= Deaths.GetHashCode();
      if (HasAssists) hash ^= Assists.GetHashCode();
      if (HasLastHits) hash ^= LastHits.GetHashCode();
      if (HasDenies) hash ^= Denies.GetHashCode();
      if (HasGpm) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gpm);
      if (HasXppm) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xppm);
      if (HasNetWorth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NetWorth);
      if (HasDamage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Damage);
      if (HasHeals) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Heals);
      if (HasRapiersPurchased) hash ^= RapiersPurchased.GetHashCode();
      if (HasObserverWardsPlaced) hash ^= ObserverWardsPlaced.GetHashCode();
      if (HasWardsDestroyed) hash ^= WardsDestroyed.GetHashCode();
      if (HasLobbyType) hash ^= LobbyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountId);
      }
      if (HasMatchId) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (HasRank) {
        output.WriteRawTag(24);
        output.WriteUInt32(Rank);
      }
      if (HasHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(HeroId);
      }
      if (HasRampages) {
        output.WriteRawTag(40);
        output.WriteUInt32(Rampages);
      }
      if (HasTripleKills) {
        output.WriteRawTag(48);
        output.WriteUInt32(TripleKills);
      }
      if (HasFirstBloodClaimed) {
        output.WriteRawTag(56);
        output.WriteUInt32(FirstBloodClaimed);
      }
      if (HasFirstBloodGiven) {
        output.WriteRawTag(64);
        output.WriteUInt32(FirstBloodGiven);
      }
      if (HasCouriersKilled) {
        output.WriteRawTag(72);
        output.WriteUInt32(CouriersKilled);
      }
      if (HasAegisesSnatched) {
        output.WriteRawTag(80);
        output.WriteUInt32(AegisesSnatched);
      }
      if (HasCheesesEaten) {
        output.WriteRawTag(88);
        output.WriteUInt32(CheesesEaten);
      }
      if (HasCreepsStacked) {
        output.WriteRawTag(96);
        output.WriteUInt32(CreepsStacked);
      }
      if (HasFightScore) {
        output.WriteRawTag(109);
        output.WriteFloat(FightScore);
      }
      if (HasFarmScore) {
        output.WriteRawTag(117);
        output.WriteFloat(FarmScore);
      }
      if (HasSupportScore) {
        output.WriteRawTag(125);
        output.WriteFloat(SupportScore);
      }
      if (HasPushScore) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(PushScore);
      }
      if (HasKills) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Deaths);
      }
      if (HasAssists) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Assists);
      }
      if (HasLastHits) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(LastHits);
      }
      if (HasDenies) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Denies);
      }
      if (HasGpm) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(Gpm);
      }
      if (HasXppm) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(Xppm);
      }
      if (HasNetWorth) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(NetWorth);
      }
      if (HasDamage) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(Damage);
      }
      if (HasHeals) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(Heals);
      }
      if (HasRapiersPurchased) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(RapiersPurchased);
      }
      if (HasObserverWardsPlaced) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(ObserverWardsPlaced);
      }
      if (HasWardsDestroyed) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(WardsDestroyed);
      }
      if (HasLobbyType) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(LobbyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountId);
      }
      if (HasMatchId) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (HasRank) {
        output.WriteRawTag(24);
        output.WriteUInt32(Rank);
      }
      if (HasHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(HeroId);
      }
      if (HasRampages) {
        output.WriteRawTag(40);
        output.WriteUInt32(Rampages);
      }
      if (HasTripleKills) {
        output.WriteRawTag(48);
        output.WriteUInt32(TripleKills);
      }
      if (HasFirstBloodClaimed) {
        output.WriteRawTag(56);
        output.WriteUInt32(FirstBloodClaimed);
      }
      if (HasFirstBloodGiven) {
        output.WriteRawTag(64);
        output.WriteUInt32(FirstBloodGiven);
      }
      if (HasCouriersKilled) {
        output.WriteRawTag(72);
        output.WriteUInt32(CouriersKilled);
      }
      if (HasAegisesSnatched) {
        output.WriteRawTag(80);
        output.WriteUInt32(AegisesSnatched);
      }
      if (HasCheesesEaten) {
        output.WriteRawTag(88);
        output.WriteUInt32(CheesesEaten);
      }
      if (HasCreepsStacked) {
        output.WriteRawTag(96);
        output.WriteUInt32(CreepsStacked);
      }
      if (HasFightScore) {
        output.WriteRawTag(109);
        output.WriteFloat(FightScore);
      }
      if (HasFarmScore) {
        output.WriteRawTag(117);
        output.WriteFloat(FarmScore);
      }
      if (HasSupportScore) {
        output.WriteRawTag(125);
        output.WriteFloat(SupportScore);
      }
      if (HasPushScore) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(PushScore);
      }
      if (HasKills) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Deaths);
      }
      if (HasAssists) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Assists);
      }
      if (HasLastHits) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(LastHits);
      }
      if (HasDenies) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Denies);
      }
      if (HasGpm) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(Gpm);
      }
      if (HasXppm) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(Xppm);
      }
      if (HasNetWorth) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(NetWorth);
      }
      if (HasDamage) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(Damage);
      }
      if (HasHeals) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(Heals);
      }
      if (HasRapiersPurchased) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(RapiersPurchased);
      }
      if (HasObserverWardsPlaced) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(ObserverWardsPlaced);
      }
      if (HasWardsDestroyed) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(WardsDestroyed);
      }
      if (HasLobbyType) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(LobbyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasRank) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasRampages) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rampages);
      }
      if (HasTripleKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TripleKills);
      }
      if (HasFirstBloodClaimed) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirstBloodClaimed);
      }
      if (HasFirstBloodGiven) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirstBloodGiven);
      }
      if (HasCouriersKilled) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CouriersKilled);
      }
      if (HasAegisesSnatched) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AegisesSnatched);
      }
      if (HasCheesesEaten) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CheesesEaten);
      }
      if (HasCreepsStacked) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreepsStacked);
      }
      if (HasFightScore) {
        size += 1 + 4;
      }
      if (HasFarmScore) {
        size += 1 + 4;
      }
      if (HasSupportScore) {
        size += 1 + 4;
      }
      if (HasPushScore) {
        size += 2 + 4;
      }
      if (HasKills) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
      }
      if (HasDeaths) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
      }
      if (HasAssists) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
      }
      if (HasLastHits) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
      }
      if (HasDenies) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Denies);
      }
      if (HasGpm) {
        size += 2 + 4;
      }
      if (HasXppm) {
        size += 2 + 4;
      }
      if (HasNetWorth) {
        size += 2 + 4;
      }
      if (HasDamage) {
        size += 2 + 4;
      }
      if (HasHeals) {
        size += 2 + 4;
      }
      if (HasRapiersPurchased) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RapiersPurchased);
      }
      if (HasObserverWardsPlaced) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObserverWardsPlaced);
      }
      if (HasWardsDestroyed) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WardsDestroyed);
      }
      if (HasLobbyType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LobbyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutPlayerStats other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasRank) {
        Rank = other.Rank;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasRampages) {
        Rampages = other.Rampages;
      }
      if (other.HasTripleKills) {
        TripleKills = other.TripleKills;
      }
      if (other.HasFirstBloodClaimed) {
        FirstBloodClaimed = other.FirstBloodClaimed;
      }
      if (other.HasFirstBloodGiven) {
        FirstBloodGiven = other.FirstBloodGiven;
      }
      if (other.HasCouriersKilled) {
        CouriersKilled = other.CouriersKilled;
      }
      if (other.HasAegisesSnatched) {
        AegisesSnatched = other.AegisesSnatched;
      }
      if (other.HasCheesesEaten) {
        CheesesEaten = other.CheesesEaten;
      }
      if (other.HasCreepsStacked) {
        CreepsStacked = other.CreepsStacked;
      }
      if (other.HasFightScore) {
        FightScore = other.FightScore;
      }
      if (other.HasFarmScore) {
        FarmScore = other.FarmScore;
      }
      if (other.HasSupportScore) {
        SupportScore = other.SupportScore;
      }
      if (other.HasPushScore) {
        PushScore = other.PushScore;
      }
      if (other.HasKills) {
        Kills = other.Kills;
      }
      if (other.HasDeaths) {
        Deaths = other.Deaths;
      }
      if (other.HasAssists) {
        Assists = other.Assists;
      }
      if (other.HasLastHits) {
        LastHits = other.LastHits;
      }
      if (other.HasDenies) {
        Denies = other.Denies;
      }
      if (other.HasGpm) {
        Gpm = other.Gpm;
      }
      if (other.HasXppm) {
        Xppm = other.Xppm;
      }
      if (other.HasNetWorth) {
        NetWorth = other.NetWorth;
      }
      if (other.HasDamage) {
        Damage = other.Damage;
      }
      if (other.HasHeals) {
        Heals = other.Heals;
      }
      if (other.HasRapiersPurchased) {
        RapiersPurchased = other.RapiersPurchased;
      }
      if (other.HasObserverWardsPlaced) {
        ObserverWardsPlaced = other.ObserverWardsPlaced;
      }
      if (other.HasWardsDestroyed) {
        WardsDestroyed = other.WardsDestroyed;
      }
      if (other.HasLobbyType) {
        LobbyType = other.LobbyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 24: {
            Rank = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadInt32();
            break;
          }
          case 40: {
            Rampages = input.ReadUInt32();
            break;
          }
          case 48: {
            TripleKills = input.ReadUInt32();
            break;
          }
          case 56: {
            FirstBloodClaimed = input.ReadUInt32();
            break;
          }
          case 64: {
            FirstBloodGiven = input.ReadUInt32();
            break;
          }
          case 72: {
            CouriersKilled = input.ReadUInt32();
            break;
          }
          case 80: {
            AegisesSnatched = input.ReadUInt32();
            break;
          }
          case 88: {
            CheesesEaten = input.ReadUInt32();
            break;
          }
          case 96: {
            CreepsStacked = input.ReadUInt32();
            break;
          }
          case 109: {
            FightScore = input.ReadFloat();
            break;
          }
          case 117: {
            FarmScore = input.ReadFloat();
            break;
          }
          case 125: {
            SupportScore = input.ReadFloat();
            break;
          }
          case 133: {
            PushScore = input.ReadFloat();
            break;
          }
          case 136: {
            Kills = input.ReadUInt32();
            break;
          }
          case 144: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 152: {
            Assists = input.ReadUInt32();
            break;
          }
          case 160: {
            LastHits = input.ReadUInt32();
            break;
          }
          case 168: {
            Denies = input.ReadUInt32();
            break;
          }
          case 181: {
            Gpm = input.ReadFloat();
            break;
          }
          case 189: {
            Xppm = input.ReadFloat();
            break;
          }
          case 197: {
            NetWorth = input.ReadFloat();
            break;
          }
          case 205: {
            Damage = input.ReadFloat();
            break;
          }
          case 213: {
            Heals = input.ReadFloat();
            break;
          }
          case 216: {
            RapiersPurchased = input.ReadUInt32();
            break;
          }
          case 224: {
            ObserverWardsPlaced = input.ReadUInt32();
            break;
          }
          case 232: {
            WardsDestroyed = input.ReadUInt32();
            break;
          }
          case 240: {
            LobbyType = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 24: {
            Rank = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadInt32();
            break;
          }
          case 40: {
            Rampages = input.ReadUInt32();
            break;
          }
          case 48: {
            TripleKills = input.ReadUInt32();
            break;
          }
          case 56: {
            FirstBloodClaimed = input.ReadUInt32();
            break;
          }
          case 64: {
            FirstBloodGiven = input.ReadUInt32();
            break;
          }
          case 72: {
            CouriersKilled = input.ReadUInt32();
            break;
          }
          case 80: {
            AegisesSnatched = input.ReadUInt32();
            break;
          }
          case 88: {
            CheesesEaten = input.ReadUInt32();
            break;
          }
          case 96: {
            CreepsStacked = input.ReadUInt32();
            break;
          }
          case 109: {
            FightScore = input.ReadFloat();
            break;
          }
          case 117: {
            FarmScore = input.ReadFloat();
            break;
          }
          case 125: {
            SupportScore = input.ReadFloat();
            break;
          }
          case 133: {
            PushScore = input.ReadFloat();
            break;
          }
          case 136: {
            Kills = input.ReadUInt32();
            break;
          }
          case 144: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 152: {
            Assists = input.ReadUInt32();
            break;
          }
          case 160: {
            LastHits = input.ReadUInt32();
            break;
          }
          case 168: {
            Denies = input.ReadUInt32();
            break;
          }
          case 181: {
            Gpm = input.ReadFloat();
            break;
          }
          case 189: {
            Xppm = input.ReadFloat();
            break;
          }
          case 197: {
            NetWorth = input.ReadFloat();
            break;
          }
          case 205: {
            Damage = input.ReadFloat();
            break;
          }
          case 213: {
            Heals = input.ReadFloat();
            break;
          }
          case 216: {
            RapiersPurchased = input.ReadUInt32();
            break;
          }
          case 224: {
            ObserverWardsPlaced = input.ReadUInt32();
            break;
          }
          case 232: {
            WardsDestroyed = input.ReadUInt32();
            break;
          }
          case 240: {
            LobbyType = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSignOutCommunicationSummary : pb::IMessage<CMsgSignOutCommunicationSummary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutCommunicationSummary> _parser = new pb::MessageParser<CMsgSignOutCommunicationSummary>(() => new CMsgSignOutCommunicationSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutCommunicationSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutCommunicationSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutCommunicationSummary(CMsgSignOutCommunicationSummary other) : this() {
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutCommunicationSummary Clone() {
      return new CMsgSignOutCommunicationSummary(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutCommunicationSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutCommunicationSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutCommunicationSummary other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutCommunicationSummary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerCommunication : pb::IMessage<PlayerCommunication>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerCommunication> _parser = new pb::MessageParser<PlayerCommunication>(() => new PlayerCommunication());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerCommunication> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCommunication() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCommunication(PlayerCommunication other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          pings_ = other.pings_;
          maxPingsPerInterval_ = other.maxPingsPerInterval_;
          teammatePings_ = other.teammatePings_;
          maxTeammatePingsPerInterval_ = other.maxTeammatePingsPerInterval_;
          teamChatMessages_ = other.teamChatMessages_;
          allChatMessages_ = other.allChatMessages_;
          chatWheelMessages_ = other.chatWheelMessages_;
          pauses_ = other.pauses_;
          unpauses_ = other.unpauses_;
          linesDrawn_ = other.linesDrawn_;
          voiceChatSeconds_ = other.voiceChatSeconds_;
          chatMutes_ = other.chatMutes_;
          voiceMutes_ = other.voiceMutes_;
          pingDetails_ = other.pingDetails_.Clone();
          commsBlocksSolo_ = other.commsBlocksSolo_;
          commsBlocksMass_ = other.commsBlocksMass_;
          chatLog_ = other.chatLog_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCommunication Clone() {
          return new PlayerCommunication(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "pings" field.</summary>
        public const int PingsFieldNumber = 2;
        private readonly static uint PingsDefaultValue = 0;

        private uint pings_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Pings {
          get { if ((_hasBits0 & 2) != 0) { return pings_; } else { return PingsDefaultValue; } }
          set {
            _hasBits0 |= 2;
            pings_ = value;
          }
        }
        /// <summary>Gets whether the "pings" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPings {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "pings" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPings() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "max_pings_per_interval" field.</summary>
        public const int MaxPingsPerIntervalFieldNumber = 3;
        private readonly static uint MaxPingsPerIntervalDefaultValue = 0;

        private uint maxPingsPerInterval_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxPingsPerInterval {
          get { if ((_hasBits0 & 4) != 0) { return maxPingsPerInterval_; } else { return MaxPingsPerIntervalDefaultValue; } }
          set {
            _hasBits0 |= 4;
            maxPingsPerInterval_ = value;
          }
        }
        /// <summary>Gets whether the "max_pings_per_interval" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMaxPingsPerInterval {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "max_pings_per_interval" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMaxPingsPerInterval() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "teammate_pings" field.</summary>
        public const int TeammatePingsFieldNumber = 4;
        private readonly static uint TeammatePingsDefaultValue = 0;

        private uint teammatePings_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeammatePings {
          get { if ((_hasBits0 & 8) != 0) { return teammatePings_; } else { return TeammatePingsDefaultValue; } }
          set {
            _hasBits0 |= 8;
            teammatePings_ = value;
          }
        }
        /// <summary>Gets whether the "teammate_pings" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeammatePings {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "teammate_pings" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeammatePings() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "max_teammate_pings_per_interval" field.</summary>
        public const int MaxTeammatePingsPerIntervalFieldNumber = 5;
        private readonly static uint MaxTeammatePingsPerIntervalDefaultValue = 0;

        private uint maxTeammatePingsPerInterval_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxTeammatePingsPerInterval {
          get { if ((_hasBits0 & 16) != 0) { return maxTeammatePingsPerInterval_; } else { return MaxTeammatePingsPerIntervalDefaultValue; } }
          set {
            _hasBits0 |= 16;
            maxTeammatePingsPerInterval_ = value;
          }
        }
        /// <summary>Gets whether the "max_teammate_pings_per_interval" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMaxTeammatePingsPerInterval {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "max_teammate_pings_per_interval" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMaxTeammatePingsPerInterval() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "team_chat_messages" field.</summary>
        public const int TeamChatMessagesFieldNumber = 6;
        private readonly static uint TeamChatMessagesDefaultValue = 0;

        private uint teamChatMessages_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamChatMessages {
          get { if ((_hasBits0 & 32) != 0) { return teamChatMessages_; } else { return TeamChatMessagesDefaultValue; } }
          set {
            _hasBits0 |= 32;
            teamChatMessages_ = value;
          }
        }
        /// <summary>Gets whether the "team_chat_messages" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamChatMessages {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "team_chat_messages" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamChatMessages() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "all_chat_messages" field.</summary>
        public const int AllChatMessagesFieldNumber = 7;
        private readonly static uint AllChatMessagesDefaultValue = 0;

        private uint allChatMessages_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AllChatMessages {
          get { if ((_hasBits0 & 64) != 0) { return allChatMessages_; } else { return AllChatMessagesDefaultValue; } }
          set {
            _hasBits0 |= 64;
            allChatMessages_ = value;
          }
        }
        /// <summary>Gets whether the "all_chat_messages" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAllChatMessages {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "all_chat_messages" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAllChatMessages() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "chat_wheel_messages" field.</summary>
        public const int ChatWheelMessagesFieldNumber = 8;
        private readonly static uint ChatWheelMessagesDefaultValue = 0;

        private uint chatWheelMessages_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChatWheelMessages {
          get { if ((_hasBits0 & 128) != 0) { return chatWheelMessages_; } else { return ChatWheelMessagesDefaultValue; } }
          set {
            _hasBits0 |= 128;
            chatWheelMessages_ = value;
          }
        }
        /// <summary>Gets whether the "chat_wheel_messages" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChatWheelMessages {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "chat_wheel_messages" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChatWheelMessages() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "pauses" field.</summary>
        public const int PausesFieldNumber = 9;
        private readonly static uint PausesDefaultValue = 0;

        private uint pauses_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Pauses {
          get { if ((_hasBits0 & 256) != 0) { return pauses_; } else { return PausesDefaultValue; } }
          set {
            _hasBits0 |= 256;
            pauses_ = value;
          }
        }
        /// <summary>Gets whether the "pauses" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPauses {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "pauses" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPauses() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "unpauses" field.</summary>
        public const int UnpausesFieldNumber = 10;
        private readonly static uint UnpausesDefaultValue = 0;

        private uint unpauses_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Unpauses {
          get { if ((_hasBits0 & 512) != 0) { return unpauses_; } else { return UnpausesDefaultValue; } }
          set {
            _hasBits0 |= 512;
            unpauses_ = value;
          }
        }
        /// <summary>Gets whether the "unpauses" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnpauses {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "unpauses" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnpauses() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "lines_drawn" field.</summary>
        public const int LinesDrawnFieldNumber = 11;
        private readonly static uint LinesDrawnDefaultValue = 0;

        private uint linesDrawn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LinesDrawn {
          get { if ((_hasBits0 & 1024) != 0) { return linesDrawn_; } else { return LinesDrawnDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            linesDrawn_ = value;
          }
        }
        /// <summary>Gets whether the "lines_drawn" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLinesDrawn {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "lines_drawn" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLinesDrawn() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "voice_chat_seconds" field.</summary>
        public const int VoiceChatSecondsFieldNumber = 12;
        private readonly static uint VoiceChatSecondsDefaultValue = 0;

        private uint voiceChatSeconds_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint VoiceChatSeconds {
          get { if ((_hasBits0 & 2048) != 0) { return voiceChatSeconds_; } else { return VoiceChatSecondsDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            voiceChatSeconds_ = value;
          }
        }
        /// <summary>Gets whether the "voice_chat_seconds" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVoiceChatSeconds {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "voice_chat_seconds" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVoiceChatSeconds() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "chat_mutes" field.</summary>
        public const int ChatMutesFieldNumber = 13;
        private readonly static uint ChatMutesDefaultValue = 0;

        private uint chatMutes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChatMutes {
          get { if ((_hasBits0 & 4096) != 0) { return chatMutes_; } else { return ChatMutesDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            chatMutes_ = value;
          }
        }
        /// <summary>Gets whether the "chat_mutes" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChatMutes {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "chat_mutes" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChatMutes() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "voice_mutes" field.</summary>
        public const int VoiceMutesFieldNumber = 14;
        private readonly static uint VoiceMutesDefaultValue = 0;

        private uint voiceMutes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint VoiceMutes {
          get { if ((_hasBits0 & 8192) != 0) { return voiceMutes_; } else { return VoiceMutesDefaultValue; } }
          set {
            _hasBits0 |= 8192;
            voiceMutes_ = value;
          }
        }
        /// <summary>Gets whether the "voice_mutes" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVoiceMutes {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "voice_mutes" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVoiceMutes() {
          _hasBits0 &= ~8192;
        }

        /// <summary>Field number for the "ping_details" field.</summary>
        public const int PingDetailsFieldNumber = 15;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication.Types.PingDetail> _repeated_pingDetails_codec
            = pb::FieldCodec.ForMessage(122, global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication.Types.PingDetail.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication.Types.PingDetail> pingDetails_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication.Types.PingDetail>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication.Types.PingDetail> PingDetails {
          get { return pingDetails_; }
        }

        /// <summary>Field number for the "comms_blocks_solo" field.</summary>
        public const int CommsBlocksSoloFieldNumber = 16;
        private readonly static uint CommsBlocksSoloDefaultValue = 0;

        private uint commsBlocksSolo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CommsBlocksSolo {
          get { if ((_hasBits0 & 16384) != 0) { return commsBlocksSolo_; } else { return CommsBlocksSoloDefaultValue; } }
          set {
            _hasBits0 |= 16384;
            commsBlocksSolo_ = value;
          }
        }
        /// <summary>Gets whether the "comms_blocks_solo" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCommsBlocksSolo {
          get { return (_hasBits0 & 16384) != 0; }
        }
        /// <summary>Clears the value of the "comms_blocks_solo" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommsBlocksSolo() {
          _hasBits0 &= ~16384;
        }

        /// <summary>Field number for the "comms_blocks_mass" field.</summary>
        public const int CommsBlocksMassFieldNumber = 17;
        private readonly static uint CommsBlocksMassDefaultValue = 0;

        private uint commsBlocksMass_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CommsBlocksMass {
          get { if ((_hasBits0 & 32768) != 0) { return commsBlocksMass_; } else { return CommsBlocksMassDefaultValue; } }
          set {
            _hasBits0 |= 32768;
            commsBlocksMass_ = value;
          }
        }
        /// <summary>Gets whether the "comms_blocks_mass" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCommsBlocksMass {
          get { return (_hasBits0 & 32768) != 0; }
        }
        /// <summary>Clears the value of the "comms_blocks_mass" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommsBlocksMass() {
          _hasBits0 &= ~32768;
        }

        /// <summary>Field number for the "chat_log" field.</summary>
        public const int ChatLogFieldNumber = 18;
        private static readonly pb::FieldCodec<string> _repeated_chatLog_codec
            = pb::FieldCodec.ForString(146);
        private readonly pbc::RepeatedField<string> chatLog_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ChatLog {
          get { return chatLog_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerCommunication);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerCommunication other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (Pings != other.Pings) return false;
          if (MaxPingsPerInterval != other.MaxPingsPerInterval) return false;
          if (TeammatePings != other.TeammatePings) return false;
          if (MaxTeammatePingsPerInterval != other.MaxTeammatePingsPerInterval) return false;
          if (TeamChatMessages != other.TeamChatMessages) return false;
          if (AllChatMessages != other.AllChatMessages) return false;
          if (ChatWheelMessages != other.ChatWheelMessages) return false;
          if (Pauses != other.Pauses) return false;
          if (Unpauses != other.Unpauses) return false;
          if (LinesDrawn != other.LinesDrawn) return false;
          if (VoiceChatSeconds != other.VoiceChatSeconds) return false;
          if (ChatMutes != other.ChatMutes) return false;
          if (VoiceMutes != other.VoiceMutes) return false;
          if(!pingDetails_.Equals(other.pingDetails_)) return false;
          if (CommsBlocksSolo != other.CommsBlocksSolo) return false;
          if (CommsBlocksMass != other.CommsBlocksMass) return false;
          if(!chatLog_.Equals(other.chatLog_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasPings) hash ^= Pings.GetHashCode();
          if (HasMaxPingsPerInterval) hash ^= MaxPingsPerInterval.GetHashCode();
          if (HasTeammatePings) hash ^= TeammatePings.GetHashCode();
          if (HasMaxTeammatePingsPerInterval) hash ^= MaxTeammatePingsPerInterval.GetHashCode();
          if (HasTeamChatMessages) hash ^= TeamChatMessages.GetHashCode();
          if (HasAllChatMessages) hash ^= AllChatMessages.GetHashCode();
          if (HasChatWheelMessages) hash ^= ChatWheelMessages.GetHashCode();
          if (HasPauses) hash ^= Pauses.GetHashCode();
          if (HasUnpauses) hash ^= Unpauses.GetHashCode();
          if (HasLinesDrawn) hash ^= LinesDrawn.GetHashCode();
          if (HasVoiceChatSeconds) hash ^= VoiceChatSeconds.GetHashCode();
          if (HasChatMutes) hash ^= ChatMutes.GetHashCode();
          if (HasVoiceMutes) hash ^= VoiceMutes.GetHashCode();
          hash ^= pingDetails_.GetHashCode();
          if (HasCommsBlocksSolo) hash ^= CommsBlocksSolo.GetHashCode();
          if (HasCommsBlocksMass) hash ^= CommsBlocksMass.GetHashCode();
          hash ^= chatLog_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasPings) {
            output.WriteRawTag(16);
            output.WriteUInt32(Pings);
          }
          if (HasMaxPingsPerInterval) {
            output.WriteRawTag(24);
            output.WriteUInt32(MaxPingsPerInterval);
          }
          if (HasTeammatePings) {
            output.WriteRawTag(32);
            output.WriteUInt32(TeammatePings);
          }
          if (HasMaxTeammatePingsPerInterval) {
            output.WriteRawTag(40);
            output.WriteUInt32(MaxTeammatePingsPerInterval);
          }
          if (HasTeamChatMessages) {
            output.WriteRawTag(48);
            output.WriteUInt32(TeamChatMessages);
          }
          if (HasAllChatMessages) {
            output.WriteRawTag(56);
            output.WriteUInt32(AllChatMessages);
          }
          if (HasChatWheelMessages) {
            output.WriteRawTag(64);
            output.WriteUInt32(ChatWheelMessages);
          }
          if (HasPauses) {
            output.WriteRawTag(72);
            output.WriteUInt32(Pauses);
          }
          if (HasUnpauses) {
            output.WriteRawTag(80);
            output.WriteUInt32(Unpauses);
          }
          if (HasLinesDrawn) {
            output.WriteRawTag(88);
            output.WriteUInt32(LinesDrawn);
          }
          if (HasVoiceChatSeconds) {
            output.WriteRawTag(96);
            output.WriteUInt32(VoiceChatSeconds);
          }
          if (HasChatMutes) {
            output.WriteRawTag(104);
            output.WriteUInt32(ChatMutes);
          }
          if (HasVoiceMutes) {
            output.WriteRawTag(112);
            output.WriteUInt32(VoiceMutes);
          }
          pingDetails_.WriteTo(output, _repeated_pingDetails_codec);
          if (HasCommsBlocksSolo) {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(CommsBlocksSolo);
          }
          if (HasCommsBlocksMass) {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(CommsBlocksMass);
          }
          chatLog_.WriteTo(output, _repeated_chatLog_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasPings) {
            output.WriteRawTag(16);
            output.WriteUInt32(Pings);
          }
          if (HasMaxPingsPerInterval) {
            output.WriteRawTag(24);
            output.WriteUInt32(MaxPingsPerInterval);
          }
          if (HasTeammatePings) {
            output.WriteRawTag(32);
            output.WriteUInt32(TeammatePings);
          }
          if (HasMaxTeammatePingsPerInterval) {
            output.WriteRawTag(40);
            output.WriteUInt32(MaxTeammatePingsPerInterval);
          }
          if (HasTeamChatMessages) {
            output.WriteRawTag(48);
            output.WriteUInt32(TeamChatMessages);
          }
          if (HasAllChatMessages) {
            output.WriteRawTag(56);
            output.WriteUInt32(AllChatMessages);
          }
          if (HasChatWheelMessages) {
            output.WriteRawTag(64);
            output.WriteUInt32(ChatWheelMessages);
          }
          if (HasPauses) {
            output.WriteRawTag(72);
            output.WriteUInt32(Pauses);
          }
          if (HasUnpauses) {
            output.WriteRawTag(80);
            output.WriteUInt32(Unpauses);
          }
          if (HasLinesDrawn) {
            output.WriteRawTag(88);
            output.WriteUInt32(LinesDrawn);
          }
          if (HasVoiceChatSeconds) {
            output.WriteRawTag(96);
            output.WriteUInt32(VoiceChatSeconds);
          }
          if (HasChatMutes) {
            output.WriteRawTag(104);
            output.WriteUInt32(ChatMutes);
          }
          if (HasVoiceMutes) {
            output.WriteRawTag(112);
            output.WriteUInt32(VoiceMutes);
          }
          pingDetails_.WriteTo(ref output, _repeated_pingDetails_codec);
          if (HasCommsBlocksSolo) {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(CommsBlocksSolo);
          }
          if (HasCommsBlocksMass) {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(CommsBlocksMass);
          }
          chatLog_.WriteTo(ref output, _repeated_chatLog_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasPings) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pings);
          }
          if (HasMaxPingsPerInterval) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPingsPerInterval);
          }
          if (HasTeammatePings) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeammatePings);
          }
          if (HasMaxTeammatePingsPerInterval) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTeammatePingsPerInterval);
          }
          if (HasTeamChatMessages) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamChatMessages);
          }
          if (HasAllChatMessages) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllChatMessages);
          }
          if (HasChatWheelMessages) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatWheelMessages);
          }
          if (HasPauses) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pauses);
          }
          if (HasUnpauses) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unpauses);
          }
          if (HasLinesDrawn) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LinesDrawn);
          }
          if (HasVoiceChatSeconds) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VoiceChatSeconds);
          }
          if (HasChatMutes) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatMutes);
          }
          if (HasVoiceMutes) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VoiceMutes);
          }
          size += pingDetails_.CalculateSize(_repeated_pingDetails_codec);
          if (HasCommsBlocksSolo) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CommsBlocksSolo);
          }
          if (HasCommsBlocksMass) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CommsBlocksMass);
          }
          size += chatLog_.CalculateSize(_repeated_chatLog_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerCommunication other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasPings) {
            Pings = other.Pings;
          }
          if (other.HasMaxPingsPerInterval) {
            MaxPingsPerInterval = other.MaxPingsPerInterval;
          }
          if (other.HasTeammatePings) {
            TeammatePings = other.TeammatePings;
          }
          if (other.HasMaxTeammatePingsPerInterval) {
            MaxTeammatePingsPerInterval = other.MaxTeammatePingsPerInterval;
          }
          if (other.HasTeamChatMessages) {
            TeamChatMessages = other.TeamChatMessages;
          }
          if (other.HasAllChatMessages) {
            AllChatMessages = other.AllChatMessages;
          }
          if (other.HasChatWheelMessages) {
            ChatWheelMessages = other.ChatWheelMessages;
          }
          if (other.HasPauses) {
            Pauses = other.Pauses;
          }
          if (other.HasUnpauses) {
            Unpauses = other.Unpauses;
          }
          if (other.HasLinesDrawn) {
            LinesDrawn = other.LinesDrawn;
          }
          if (other.HasVoiceChatSeconds) {
            VoiceChatSeconds = other.VoiceChatSeconds;
          }
          if (other.HasChatMutes) {
            ChatMutes = other.ChatMutes;
          }
          if (other.HasVoiceMutes) {
            VoiceMutes = other.VoiceMutes;
          }
          pingDetails_.Add(other.pingDetails_);
          if (other.HasCommsBlocksSolo) {
            CommsBlocksSolo = other.CommsBlocksSolo;
          }
          if (other.HasCommsBlocksMass) {
            CommsBlocksMass = other.CommsBlocksMass;
          }
          chatLog_.Add(other.chatLog_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                Pings = input.ReadUInt32();
                break;
              }
              case 24: {
                MaxPingsPerInterval = input.ReadUInt32();
                break;
              }
              case 32: {
                TeammatePings = input.ReadUInt32();
                break;
              }
              case 40: {
                MaxTeammatePingsPerInterval = input.ReadUInt32();
                break;
              }
              case 48: {
                TeamChatMessages = input.ReadUInt32();
                break;
              }
              case 56: {
                AllChatMessages = input.ReadUInt32();
                break;
              }
              case 64: {
                ChatWheelMessages = input.ReadUInt32();
                break;
              }
              case 72: {
                Pauses = input.ReadUInt32();
                break;
              }
              case 80: {
                Unpauses = input.ReadUInt32();
                break;
              }
              case 88: {
                LinesDrawn = input.ReadUInt32();
                break;
              }
              case 96: {
                VoiceChatSeconds = input.ReadUInt32();
                break;
              }
              case 104: {
                ChatMutes = input.ReadUInt32();
                break;
              }
              case 112: {
                VoiceMutes = input.ReadUInt32();
                break;
              }
              case 122: {
                pingDetails_.AddEntriesFrom(input, _repeated_pingDetails_codec);
                break;
              }
              case 128: {
                CommsBlocksSolo = input.ReadUInt32();
                break;
              }
              case 136: {
                CommsBlocksMass = input.ReadUInt32();
                break;
              }
              case 146: {
                chatLog_.AddEntriesFrom(input, _repeated_chatLog_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                Pings = input.ReadUInt32();
                break;
              }
              case 24: {
                MaxPingsPerInterval = input.ReadUInt32();
                break;
              }
              case 32: {
                TeammatePings = input.ReadUInt32();
                break;
              }
              case 40: {
                MaxTeammatePingsPerInterval = input.ReadUInt32();
                break;
              }
              case 48: {
                TeamChatMessages = input.ReadUInt32();
                break;
              }
              case 56: {
                AllChatMessages = input.ReadUInt32();
                break;
              }
              case 64: {
                ChatWheelMessages = input.ReadUInt32();
                break;
              }
              case 72: {
                Pauses = input.ReadUInt32();
                break;
              }
              case 80: {
                Unpauses = input.ReadUInt32();
                break;
              }
              case 88: {
                LinesDrawn = input.ReadUInt32();
                break;
              }
              case 96: {
                VoiceChatSeconds = input.ReadUInt32();
                break;
              }
              case 104: {
                ChatMutes = input.ReadUInt32();
                break;
              }
              case 112: {
                VoiceMutes = input.ReadUInt32();
                break;
              }
              case 122: {
                pingDetails_.AddEntriesFrom(ref input, _repeated_pingDetails_codec);
                break;
              }
              case 128: {
                CommsBlocksSolo = input.ReadUInt32();
                break;
              }
              case 136: {
                CommsBlocksMass = input.ReadUInt32();
                break;
              }
              case 146: {
                chatLog_.AddEntriesFrom(ref input, _repeated_chatLog_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the PlayerCommunication message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class PingDetail : pb::IMessage<PingDetail>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<PingDetail> _parser = new pb::MessageParser<PingDetail>(() => new PingDetail());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PingDetail> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgSignOutCommunicationSummary.Types.PlayerCommunication.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PingDetail() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PingDetail(PingDetail other) : this() {
              _hasBits0 = other._hasBits0;
              type_ = other.type_;
              count_ = other.count_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PingDetail Clone() {
              return new PingDetail(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private readonly static uint TypeDefaultValue = 4294967295;

            private uint type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Type {
              get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
              set {
                _hasBits0 |= 1;
                type_ = value;
              }
            }
            /// <summary>Gets whether the "type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasType {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "count" field.</summary>
            public const int CountFieldNumber = 2;
            private readonly static uint CountDefaultValue = 0;

            private uint count_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Count {
              get { if ((_hasBits0 & 2) != 0) { return count_; } else { return CountDefaultValue; } }
              set {
                _hasBits0 |= 2;
                count_ = value;
              }
            }
            /// <summary>Gets whether the "count" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasCount {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "count" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearCount() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PingDetail);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PingDetail other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (Count != other.Count) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasType) hash ^= Type.GetHashCode();
              if (HasCount) hash ^= Count.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasType) {
                output.WriteRawTag(8);
                output.WriteUInt32(Type);
              }
              if (HasCount) {
                output.WriteRawTag(16);
                output.WriteUInt32(Count);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasType) {
                output.WriteRawTag(8);
                output.WriteUInt32(Type);
              }
              if (HasCount) {
                output.WriteRawTag(16);
                output.WriteUInt32(Count);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasType) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
              }
              if (HasCount) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PingDetail other) {
              if (other == null) {
                return;
              }
              if (other.HasType) {
                Type = other.Type;
              }
              if (other.HasCount) {
                Count = other.Count;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Type = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Count = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Type = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Count = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CMsgGameMatchSignoutResponse : pb::IMessage<CMsgGameMatchSignoutResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameMatchSignoutResponse> _parser = new pb::MessageParser<CMsgGameMatchSignoutResponse>(() => new CMsgGameMatchSignoutResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameMatchSignoutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignoutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignoutResponse(CMsgGameMatchSignoutResponse other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      replaySalt_ = other.replaySalt_;
      leagueid_ = other.leagueid_;
      metadataPrivateKey_ = other.metadataPrivateKey_;
      matchDetails_ = other.matchDetails_ != null ? other.matchDetails_.Clone() : null;
      playersMetadata_ = other.playersMetadata_.Clone();
      mvpData_ = other.mvpData_ != null ? other.mvpData_.Clone() : null;
      owPrivateKey_ = other.owPrivateKey_;
      owSalt_ = other.owSalt_;
      owReplayId_ = other.owReplayId_;
      overworldRewards_ = other.overworldRewards_ != null ? other.overworldRewards_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignoutResponse Clone() {
      return new CMsgGameMatchSignoutResponse(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "replay_salt" field.</summary>
    public const int ReplaySaltFieldNumber = 2;
    private readonly static uint ReplaySaltDefaultValue = 0;

    private uint replaySalt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReplaySalt {
      get { if ((_hasBits0 & 2) != 0) { return replaySalt_; } else { return ReplaySaltDefaultValue; } }
      set {
        _hasBits0 |= 2;
        replaySalt_ = value;
      }
    }
    /// <summary>Gets whether the "replay_salt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReplaySalt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "replay_salt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReplaySalt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 5;
    private readonly static uint LeagueidDefaultValue = 0;

    private uint leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leagueid {
      get { if ((_hasBits0 & 4) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueid() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "metadata_private_key" field.</summary>
    public const int MetadataPrivateKeyFieldNumber = 7;
    private readonly static uint MetadataPrivateKeyDefaultValue = 0;

    private uint metadataPrivateKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MetadataPrivateKey {
      get { if ((_hasBits0 & 8) != 0) { return metadataPrivateKey_; } else { return MetadataPrivateKeyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        metadataPrivateKey_ = value;
      }
    }
    /// <summary>Gets whether the "metadata_private_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMetadataPrivateKey {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "metadata_private_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMetadataPrivateKey() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "match_details" field.</summary>
    public const int MatchDetailsFieldNumber = 8;
    private global::Steam.Protos.Dota2.CMsgDOTAMatch matchDetails_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTAMatch MatchDetails {
      get { return matchDetails_; }
      set {
        matchDetails_ = value;
      }
    }

    /// <summary>Field number for the "players_metadata" field.</summary>
    public const int PlayersMetadataFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameMatchSignoutResponse.Types.PlayerMetadata> _repeated_playersMetadata_codec
        = pb::FieldCodec.ForMessage(74, global::Steam.Protos.Dota2.CMsgGameMatchSignoutResponse.Types.PlayerMetadata.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignoutResponse.Types.PlayerMetadata> playersMetadata_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignoutResponse.Types.PlayerMetadata>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameMatchSignoutResponse.Types.PlayerMetadata> PlayersMetadata {
      get { return playersMetadata_; }
    }

    /// <summary>Field number for the "mvp_data" field.</summary>
    public const int MvpDataFieldNumber = 10;
    private global::Steam.Protos.Dota2.CMvpData mvpData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMvpData MvpData {
      get { return mvpData_; }
      set {
        mvpData_ = value;
      }
    }

    /// <summary>Field number for the "ow_private_key" field.</summary>
    public const int OwPrivateKeyFieldNumber = 11;
    private readonly static ulong OwPrivateKeyDefaultValue = 0UL;

    private ulong owPrivateKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OwPrivateKey {
      get { if ((_hasBits0 & 16) != 0) { return owPrivateKey_; } else { return OwPrivateKeyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        owPrivateKey_ = value;
      }
    }
    /// <summary>Gets whether the "ow_private_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwPrivateKey {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "ow_private_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwPrivateKey() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "ow_salt" field.</summary>
    public const int OwSaltFieldNumber = 12;
    private readonly static uint OwSaltDefaultValue = 0;

    private uint owSalt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwSalt {
      get { if ((_hasBits0 & 32) != 0) { return owSalt_; } else { return OwSaltDefaultValue; } }
      set {
        _hasBits0 |= 32;
        owSalt_ = value;
      }
    }
    /// <summary>Gets whether the "ow_salt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwSalt {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ow_salt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwSalt() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ow_replay_id" field.</summary>
    public const int OwReplayIdFieldNumber = 13;
    private readonly static ulong OwReplayIdDefaultValue = 0UL;

    private ulong owReplayId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OwReplayId {
      get { if ((_hasBits0 & 64) != 0) { return owReplayId_; } else { return OwReplayIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        owReplayId_ = value;
      }
    }
    /// <summary>Gets whether the "ow_replay_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwReplayId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "ow_replay_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwReplayId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "overworld_rewards" field.</summary>
    public const int OverworldRewardsFieldNumber = 14;
    private global::Steam.Protos.Dota2.CMsgOverworldMatchRewards overworldRewards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldMatchRewards OverworldRewards {
      get { return overworldRewards_; }
      set {
        overworldRewards_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameMatchSignoutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameMatchSignoutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (ReplaySalt != other.ReplaySalt) return false;
      if (Leagueid != other.Leagueid) return false;
      if (MetadataPrivateKey != other.MetadataPrivateKey) return false;
      if (!object.Equals(MatchDetails, other.MatchDetails)) return false;
      if(!playersMetadata_.Equals(other.playersMetadata_)) return false;
      if (!object.Equals(MvpData, other.MvpData)) return false;
      if (OwPrivateKey != other.OwPrivateKey) return false;
      if (OwSalt != other.OwSalt) return false;
      if (OwReplayId != other.OwReplayId) return false;
      if (!object.Equals(OverworldRewards, other.OverworldRewards)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasReplaySalt) hash ^= ReplaySalt.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasMetadataPrivateKey) hash ^= MetadataPrivateKey.GetHashCode();
      if (matchDetails_ != null) hash ^= MatchDetails.GetHashCode();
      hash ^= playersMetadata_.GetHashCode();
      if (mvpData_ != null) hash ^= MvpData.GetHashCode();
      if (HasOwPrivateKey) hash ^= OwPrivateKey.GetHashCode();
      if (HasOwSalt) hash ^= OwSalt.GetHashCode();
      if (HasOwReplayId) hash ^= OwReplayId.GetHashCode();
      if (overworldRewards_ != null) hash ^= OverworldRewards.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasReplaySalt) {
        output.WriteRawTag(21);
        output.WriteFixed32(ReplaySalt);
      }
      if (HasLeagueid) {
        output.WriteRawTag(40);
        output.WriteUInt32(Leagueid);
      }
      if (HasMetadataPrivateKey) {
        output.WriteRawTag(61);
        output.WriteFixed32(MetadataPrivateKey);
      }
      if (matchDetails_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MatchDetails);
      }
      playersMetadata_.WriteTo(output, _repeated_playersMetadata_codec);
      if (mvpData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MvpData);
      }
      if (HasOwPrivateKey) {
        output.WriteRawTag(89);
        output.WriteFixed64(OwPrivateKey);
      }
      if (HasOwSalt) {
        output.WriteRawTag(101);
        output.WriteFixed32(OwSalt);
      }
      if (HasOwReplayId) {
        output.WriteRawTag(104);
        output.WriteUInt64(OwReplayId);
      }
      if (overworldRewards_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(OverworldRewards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasReplaySalt) {
        output.WriteRawTag(21);
        output.WriteFixed32(ReplaySalt);
      }
      if (HasLeagueid) {
        output.WriteRawTag(40);
        output.WriteUInt32(Leagueid);
      }
      if (HasMetadataPrivateKey) {
        output.WriteRawTag(61);
        output.WriteFixed32(MetadataPrivateKey);
      }
      if (matchDetails_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MatchDetails);
      }
      playersMetadata_.WriteTo(ref output, _repeated_playersMetadata_codec);
      if (mvpData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MvpData);
      }
      if (HasOwPrivateKey) {
        output.WriteRawTag(89);
        output.WriteFixed64(OwPrivateKey);
      }
      if (HasOwSalt) {
        output.WriteRawTag(101);
        output.WriteFixed32(OwSalt);
      }
      if (HasOwReplayId) {
        output.WriteRawTag(104);
        output.WriteUInt64(OwReplayId);
      }
      if (overworldRewards_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(OverworldRewards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasReplaySalt) {
        size += 1 + 4;
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Leagueid);
      }
      if (HasMetadataPrivateKey) {
        size += 1 + 4;
      }
      if (matchDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchDetails);
      }
      size += playersMetadata_.CalculateSize(_repeated_playersMetadata_codec);
      if (mvpData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MvpData);
      }
      if (HasOwPrivateKey) {
        size += 1 + 8;
      }
      if (HasOwSalt) {
        size += 1 + 4;
      }
      if (HasOwReplayId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OwReplayId);
      }
      if (overworldRewards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OverworldRewards);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameMatchSignoutResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasReplaySalt) {
        ReplaySalt = other.ReplaySalt;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasMetadataPrivateKey) {
        MetadataPrivateKey = other.MetadataPrivateKey;
      }
      if (other.matchDetails_ != null) {
        if (matchDetails_ == null) {
          MatchDetails = new global::Steam.Protos.Dota2.CMsgDOTAMatch();
        }
        MatchDetails.MergeFrom(other.MatchDetails);
      }
      playersMetadata_.Add(other.playersMetadata_);
      if (other.mvpData_ != null) {
        if (mvpData_ == null) {
          MvpData = new global::Steam.Protos.Dota2.CMvpData();
        }
        MvpData.MergeFrom(other.MvpData);
      }
      if (other.HasOwPrivateKey) {
        OwPrivateKey = other.OwPrivateKey;
      }
      if (other.HasOwSalt) {
        OwSalt = other.OwSalt;
      }
      if (other.HasOwReplayId) {
        OwReplayId = other.OwReplayId;
      }
      if (other.overworldRewards_ != null) {
        if (overworldRewards_ == null) {
          OverworldRewards = new global::Steam.Protos.Dota2.CMsgOverworldMatchRewards();
        }
        OverworldRewards.MergeFrom(other.OverworldRewards);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 21: {
            ReplaySalt = input.ReadFixed32();
            break;
          }
          case 40: {
            Leagueid = input.ReadUInt32();
            break;
          }
          case 61: {
            MetadataPrivateKey = input.ReadFixed32();
            break;
          }
          case 66: {
            if (matchDetails_ == null) {
              MatchDetails = new global::Steam.Protos.Dota2.CMsgDOTAMatch();
            }
            input.ReadMessage(MatchDetails);
            break;
          }
          case 74: {
            playersMetadata_.AddEntriesFrom(input, _repeated_playersMetadata_codec);
            break;
          }
          case 82: {
            if (mvpData_ == null) {
              MvpData = new global::Steam.Protos.Dota2.CMvpData();
            }
            input.ReadMessage(MvpData);
            break;
          }
          case 89: {
            OwPrivateKey = input.ReadFixed64();
            break;
          }
          case 101: {
            OwSalt = input.ReadFixed32();
            break;
          }
          case 104: {
            OwReplayId = input.ReadUInt64();
            break;
          }
          case 114: {
            if (overworldRewards_ == null) {
              OverworldRewards = new global::Steam.Protos.Dota2.CMsgOverworldMatchRewards();
            }
            input.ReadMessage(OverworldRewards);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 21: {
            ReplaySalt = input.ReadFixed32();
            break;
          }
          case 40: {
            Leagueid = input.ReadUInt32();
            break;
          }
          case 61: {
            MetadataPrivateKey = input.ReadFixed32();
            break;
          }
          case 66: {
            if (matchDetails_ == null) {
              MatchDetails = new global::Steam.Protos.Dota2.CMsgDOTAMatch();
            }
            input.ReadMessage(MatchDetails);
            break;
          }
          case 74: {
            playersMetadata_.AddEntriesFrom(ref input, _repeated_playersMetadata_codec);
            break;
          }
          case 82: {
            if (mvpData_ == null) {
              MvpData = new global::Steam.Protos.Dota2.CMvpData();
            }
            input.ReadMessage(MvpData);
            break;
          }
          case 89: {
            OwPrivateKey = input.ReadFixed64();
            break;
          }
          case 101: {
            OwSalt = input.ReadFixed32();
            break;
          }
          case 104: {
            OwReplayId = input.ReadUInt64();
            break;
          }
          case 114: {
            if (overworldRewards_ == null) {
              OverworldRewards = new global::Steam.Protos.Dota2.CMsgOverworldMatchRewards();
            }
            input.ReadMessage(OverworldRewards);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGameMatchSignoutResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerMetadata : pb::IMessage<PlayerMetadata>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerMetadata> _parser = new pb::MessageParser<PlayerMetadata>(() => new PlayerMetadata());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerMetadata> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGameMatchSignoutResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerMetadata() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerMetadata(PlayerMetadata other) : this() {
          _hasBits0 = other._hasBits0;
          heroId_ = other.heroId_;
          avgKillsX16_ = other.avgKillsX16_;
          avgDeathsX16_ = other.avgDeathsX16_;
          avgAssistsX16_ = other.avgAssistsX16_;
          avgGpmX16_ = other.avgGpmX16_;
          avgXpmX16_ = other.avgXpmX16_;
          bestKillsX16_ = other.bestKillsX16_;
          bestAssistsX16_ = other.bestAssistsX16_;
          bestGpmX16_ = other.bestGpmX16_;
          bestXpmX16_ = other.bestXpmX16_;
          winStreak_ = other.winStreak_;
          bestWinStreak_ = other.bestWinStreak_;
          gamesPlayed_ = other.gamesPlayed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerMetadata Clone() {
          return new PlayerMetadata(this);
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 1;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "avg_kills_x16" field.</summary>
        public const int AvgKillsX16FieldNumber = 2;
        private readonly static uint AvgKillsX16DefaultValue = 0;

        private uint avgKillsX16_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AvgKillsX16 {
          get { if ((_hasBits0 & 2) != 0) { return avgKillsX16_; } else { return AvgKillsX16DefaultValue; } }
          set {
            _hasBits0 |= 2;
            avgKillsX16_ = value;
          }
        }
        /// <summary>Gets whether the "avg_kills_x16" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvgKillsX16 {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "avg_kills_x16" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvgKillsX16() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "avg_deaths_x16" field.</summary>
        public const int AvgDeathsX16FieldNumber = 3;
        private readonly static uint AvgDeathsX16DefaultValue = 0;

        private uint avgDeathsX16_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AvgDeathsX16 {
          get { if ((_hasBits0 & 4) != 0) { return avgDeathsX16_; } else { return AvgDeathsX16DefaultValue; } }
          set {
            _hasBits0 |= 4;
            avgDeathsX16_ = value;
          }
        }
        /// <summary>Gets whether the "avg_deaths_x16" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvgDeathsX16 {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "avg_deaths_x16" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvgDeathsX16() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "avg_assists_x16" field.</summary>
        public const int AvgAssistsX16FieldNumber = 4;
        private readonly static uint AvgAssistsX16DefaultValue = 0;

        private uint avgAssistsX16_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AvgAssistsX16 {
          get { if ((_hasBits0 & 8) != 0) { return avgAssistsX16_; } else { return AvgAssistsX16DefaultValue; } }
          set {
            _hasBits0 |= 8;
            avgAssistsX16_ = value;
          }
        }
        /// <summary>Gets whether the "avg_assists_x16" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvgAssistsX16 {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "avg_assists_x16" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvgAssistsX16() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "avg_gpm_x16" field.</summary>
        public const int AvgGpmX16FieldNumber = 5;
        private readonly static uint AvgGpmX16DefaultValue = 0;

        private uint avgGpmX16_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AvgGpmX16 {
          get { if ((_hasBits0 & 16) != 0) { return avgGpmX16_; } else { return AvgGpmX16DefaultValue; } }
          set {
            _hasBits0 |= 16;
            avgGpmX16_ = value;
          }
        }
        /// <summary>Gets whether the "avg_gpm_x16" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvgGpmX16 {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "avg_gpm_x16" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvgGpmX16() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "avg_xpm_x16" field.</summary>
        public const int AvgXpmX16FieldNumber = 6;
        private readonly static uint AvgXpmX16DefaultValue = 0;

        private uint avgXpmX16_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AvgXpmX16 {
          get { if ((_hasBits0 & 32) != 0) { return avgXpmX16_; } else { return AvgXpmX16DefaultValue; } }
          set {
            _hasBits0 |= 32;
            avgXpmX16_ = value;
          }
        }
        /// <summary>Gets whether the "avg_xpm_x16" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvgXpmX16 {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "avg_xpm_x16" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvgXpmX16() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "best_kills_x16" field.</summary>
        public const int BestKillsX16FieldNumber = 7;
        private readonly static uint BestKillsX16DefaultValue = 0;

        private uint bestKillsX16_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BestKillsX16 {
          get { if ((_hasBits0 & 64) != 0) { return bestKillsX16_; } else { return BestKillsX16DefaultValue; } }
          set {
            _hasBits0 |= 64;
            bestKillsX16_ = value;
          }
        }
        /// <summary>Gets whether the "best_kills_x16" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBestKillsX16 {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "best_kills_x16" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBestKillsX16() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "best_assists_x16" field.</summary>
        public const int BestAssistsX16FieldNumber = 8;
        private readonly static uint BestAssistsX16DefaultValue = 0;

        private uint bestAssistsX16_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BestAssistsX16 {
          get { if ((_hasBits0 & 128) != 0) { return bestAssistsX16_; } else { return BestAssistsX16DefaultValue; } }
          set {
            _hasBits0 |= 128;
            bestAssistsX16_ = value;
          }
        }
        /// <summary>Gets whether the "best_assists_x16" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBestAssistsX16 {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "best_assists_x16" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBestAssistsX16() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "best_gpm_x16" field.</summary>
        public const int BestGpmX16FieldNumber = 9;
        private readonly static uint BestGpmX16DefaultValue = 0;

        private uint bestGpmX16_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BestGpmX16 {
          get { if ((_hasBits0 & 256) != 0) { return bestGpmX16_; } else { return BestGpmX16DefaultValue; } }
          set {
            _hasBits0 |= 256;
            bestGpmX16_ = value;
          }
        }
        /// <summary>Gets whether the "best_gpm_x16" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBestGpmX16 {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "best_gpm_x16" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBestGpmX16() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "best_xpm_x16" field.</summary>
        public const int BestXpmX16FieldNumber = 10;
        private readonly static uint BestXpmX16DefaultValue = 0;

        private uint bestXpmX16_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BestXpmX16 {
          get { if ((_hasBits0 & 512) != 0) { return bestXpmX16_; } else { return BestXpmX16DefaultValue; } }
          set {
            _hasBits0 |= 512;
            bestXpmX16_ = value;
          }
        }
        /// <summary>Gets whether the "best_xpm_x16" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBestXpmX16 {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "best_xpm_x16" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBestXpmX16() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "win_streak" field.</summary>
        public const int WinStreakFieldNumber = 11;
        private readonly static uint WinStreakDefaultValue = 0;

        private uint winStreak_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WinStreak {
          get { if ((_hasBits0 & 1024) != 0) { return winStreak_; } else { return WinStreakDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            winStreak_ = value;
          }
        }
        /// <summary>Gets whether the "win_streak" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWinStreak {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "win_streak" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWinStreak() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "best_win_streak" field.</summary>
        public const int BestWinStreakFieldNumber = 12;
        private readonly static uint BestWinStreakDefaultValue = 0;

        private uint bestWinStreak_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BestWinStreak {
          get { if ((_hasBits0 & 2048) != 0) { return bestWinStreak_; } else { return BestWinStreakDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            bestWinStreak_ = value;
          }
        }
        /// <summary>Gets whether the "best_win_streak" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBestWinStreak {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "best_win_streak" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBestWinStreak() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "games_played" field.</summary>
        public const int GamesPlayedFieldNumber = 13;
        private readonly static uint GamesPlayedDefaultValue = 0;

        private uint gamesPlayed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GamesPlayed {
          get { if ((_hasBits0 & 4096) != 0) { return gamesPlayed_; } else { return GamesPlayedDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            gamesPlayed_ = value;
          }
        }
        /// <summary>Gets whether the "games_played" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGamesPlayed {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "games_played" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGamesPlayed() {
          _hasBits0 &= ~4096;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerMetadata);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerMetadata other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HeroId != other.HeroId) return false;
          if (AvgKillsX16 != other.AvgKillsX16) return false;
          if (AvgDeathsX16 != other.AvgDeathsX16) return false;
          if (AvgAssistsX16 != other.AvgAssistsX16) return false;
          if (AvgGpmX16 != other.AvgGpmX16) return false;
          if (AvgXpmX16 != other.AvgXpmX16) return false;
          if (BestKillsX16 != other.BestKillsX16) return false;
          if (BestAssistsX16 != other.BestAssistsX16) return false;
          if (BestGpmX16 != other.BestGpmX16) return false;
          if (BestXpmX16 != other.BestXpmX16) return false;
          if (WinStreak != other.WinStreak) return false;
          if (BestWinStreak != other.BestWinStreak) return false;
          if (GamesPlayed != other.GamesPlayed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasAvgKillsX16) hash ^= AvgKillsX16.GetHashCode();
          if (HasAvgDeathsX16) hash ^= AvgDeathsX16.GetHashCode();
          if (HasAvgAssistsX16) hash ^= AvgAssistsX16.GetHashCode();
          if (HasAvgGpmX16) hash ^= AvgGpmX16.GetHashCode();
          if (HasAvgXpmX16) hash ^= AvgXpmX16.GetHashCode();
          if (HasBestKillsX16) hash ^= BestKillsX16.GetHashCode();
          if (HasBestAssistsX16) hash ^= BestAssistsX16.GetHashCode();
          if (HasBestGpmX16) hash ^= BestGpmX16.GetHashCode();
          if (HasBestXpmX16) hash ^= BestXpmX16.GetHashCode();
          if (HasWinStreak) hash ^= WinStreak.GetHashCode();
          if (HasBestWinStreak) hash ^= BestWinStreak.GetHashCode();
          if (HasGamesPlayed) hash ^= GamesPlayed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasHeroId) {
            output.WriteRawTag(8);
            output.WriteInt32(HeroId);
          }
          if (HasAvgKillsX16) {
            output.WriteRawTag(16);
            output.WriteUInt32(AvgKillsX16);
          }
          if (HasAvgDeathsX16) {
            output.WriteRawTag(24);
            output.WriteUInt32(AvgDeathsX16);
          }
          if (HasAvgAssistsX16) {
            output.WriteRawTag(32);
            output.WriteUInt32(AvgAssistsX16);
          }
          if (HasAvgGpmX16) {
            output.WriteRawTag(40);
            output.WriteUInt32(AvgGpmX16);
          }
          if (HasAvgXpmX16) {
            output.WriteRawTag(48);
            output.WriteUInt32(AvgXpmX16);
          }
          if (HasBestKillsX16) {
            output.WriteRawTag(56);
            output.WriteUInt32(BestKillsX16);
          }
          if (HasBestAssistsX16) {
            output.WriteRawTag(64);
            output.WriteUInt32(BestAssistsX16);
          }
          if (HasBestGpmX16) {
            output.WriteRawTag(72);
            output.WriteUInt32(BestGpmX16);
          }
          if (HasBestXpmX16) {
            output.WriteRawTag(80);
            output.WriteUInt32(BestXpmX16);
          }
          if (HasWinStreak) {
            output.WriteRawTag(88);
            output.WriteUInt32(WinStreak);
          }
          if (HasBestWinStreak) {
            output.WriteRawTag(96);
            output.WriteUInt32(BestWinStreak);
          }
          if (HasGamesPlayed) {
            output.WriteRawTag(104);
            output.WriteUInt32(GamesPlayed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasHeroId) {
            output.WriteRawTag(8);
            output.WriteInt32(HeroId);
          }
          if (HasAvgKillsX16) {
            output.WriteRawTag(16);
            output.WriteUInt32(AvgKillsX16);
          }
          if (HasAvgDeathsX16) {
            output.WriteRawTag(24);
            output.WriteUInt32(AvgDeathsX16);
          }
          if (HasAvgAssistsX16) {
            output.WriteRawTag(32);
            output.WriteUInt32(AvgAssistsX16);
          }
          if (HasAvgGpmX16) {
            output.WriteRawTag(40);
            output.WriteUInt32(AvgGpmX16);
          }
          if (HasAvgXpmX16) {
            output.WriteRawTag(48);
            output.WriteUInt32(AvgXpmX16);
          }
          if (HasBestKillsX16) {
            output.WriteRawTag(56);
            output.WriteUInt32(BestKillsX16);
          }
          if (HasBestAssistsX16) {
            output.WriteRawTag(64);
            output.WriteUInt32(BestAssistsX16);
          }
          if (HasBestGpmX16) {
            output.WriteRawTag(72);
            output.WriteUInt32(BestGpmX16);
          }
          if (HasBestXpmX16) {
            output.WriteRawTag(80);
            output.WriteUInt32(BestXpmX16);
          }
          if (HasWinStreak) {
            output.WriteRawTag(88);
            output.WriteUInt32(WinStreak);
          }
          if (HasBestWinStreak) {
            output.WriteRawTag(96);
            output.WriteUInt32(BestWinStreak);
          }
          if (HasGamesPlayed) {
            output.WriteRawTag(104);
            output.WriteUInt32(GamesPlayed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasAvgKillsX16) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgKillsX16);
          }
          if (HasAvgDeathsX16) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgDeathsX16);
          }
          if (HasAvgAssistsX16) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgAssistsX16);
          }
          if (HasAvgGpmX16) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgGpmX16);
          }
          if (HasAvgXpmX16) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgXpmX16);
          }
          if (HasBestKillsX16) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestKillsX16);
          }
          if (HasBestAssistsX16) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestAssistsX16);
          }
          if (HasBestGpmX16) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestGpmX16);
          }
          if (HasBestXpmX16) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestXpmX16);
          }
          if (HasWinStreak) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinStreak);
          }
          if (HasBestWinStreak) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestWinStreak);
          }
          if (HasGamesPlayed) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamesPlayed);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerMetadata other) {
          if (other == null) {
            return;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasAvgKillsX16) {
            AvgKillsX16 = other.AvgKillsX16;
          }
          if (other.HasAvgDeathsX16) {
            AvgDeathsX16 = other.AvgDeathsX16;
          }
          if (other.HasAvgAssistsX16) {
            AvgAssistsX16 = other.AvgAssistsX16;
          }
          if (other.HasAvgGpmX16) {
            AvgGpmX16 = other.AvgGpmX16;
          }
          if (other.HasAvgXpmX16) {
            AvgXpmX16 = other.AvgXpmX16;
          }
          if (other.HasBestKillsX16) {
            BestKillsX16 = other.BestKillsX16;
          }
          if (other.HasBestAssistsX16) {
            BestAssistsX16 = other.BestAssistsX16;
          }
          if (other.HasBestGpmX16) {
            BestGpmX16 = other.BestGpmX16;
          }
          if (other.HasBestXpmX16) {
            BestXpmX16 = other.BestXpmX16;
          }
          if (other.HasWinStreak) {
            WinStreak = other.WinStreak;
          }
          if (other.HasBestWinStreak) {
            BestWinStreak = other.BestWinStreak;
          }
          if (other.HasGamesPlayed) {
            GamesPlayed = other.GamesPlayed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                HeroId = input.ReadInt32();
                break;
              }
              case 16: {
                AvgKillsX16 = input.ReadUInt32();
                break;
              }
              case 24: {
                AvgDeathsX16 = input.ReadUInt32();
                break;
              }
              case 32: {
                AvgAssistsX16 = input.ReadUInt32();
                break;
              }
              case 40: {
                AvgGpmX16 = input.ReadUInt32();
                break;
              }
              case 48: {
                AvgXpmX16 = input.ReadUInt32();
                break;
              }
              case 56: {
                BestKillsX16 = input.ReadUInt32();
                break;
              }
              case 64: {
                BestAssistsX16 = input.ReadUInt32();
                break;
              }
              case 72: {
                BestGpmX16 = input.ReadUInt32();
                break;
              }
              case 80: {
                BestXpmX16 = input.ReadUInt32();
                break;
              }
              case 88: {
                WinStreak = input.ReadUInt32();
                break;
              }
              case 96: {
                BestWinStreak = input.ReadUInt32();
                break;
              }
              case 104: {
                GamesPlayed = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                HeroId = input.ReadInt32();
                break;
              }
              case 16: {
                AvgKillsX16 = input.ReadUInt32();
                break;
              }
              case 24: {
                AvgDeathsX16 = input.ReadUInt32();
                break;
              }
              case 32: {
                AvgAssistsX16 = input.ReadUInt32();
                break;
              }
              case 40: {
                AvgGpmX16 = input.ReadUInt32();
                break;
              }
              case 48: {
                AvgXpmX16 = input.ReadUInt32();
                break;
              }
              case 56: {
                BestKillsX16 = input.ReadUInt32();
                break;
              }
              case 64: {
                BestAssistsX16 = input.ReadUInt32();
                break;
              }
              case 72: {
                BestGpmX16 = input.ReadUInt32();
                break;
              }
              case 80: {
                BestXpmX16 = input.ReadUInt32();
                break;
              }
              case 88: {
                WinStreak = input.ReadUInt32();
                break;
              }
              case 96: {
                BestWinStreak = input.ReadUInt32();
                break;
              }
              case 104: {
                GamesPlayed = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGameMatchSignOutPermissionRequest : pb::IMessage<CMsgGameMatchSignOutPermissionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameMatchSignOutPermissionRequest> _parser = new pb::MessageParser<CMsgGameMatchSignOutPermissionRequest>(() => new CMsgGameMatchSignOutPermissionRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameMatchSignOutPermissionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutPermissionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutPermissionRequest(CMsgGameMatchSignOutPermissionRequest other) : this() {
      _hasBits0 = other._hasBits0;
      serverVersion_ = other.serverVersion_;
      localAttempt_ = other.localAttempt_;
      totalAttempt_ = other.totalAttempt_;
      secondsWaited_ = other.secondsWaited_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutPermissionRequest Clone() {
      return new CMsgGameMatchSignOutPermissionRequest(this);
    }

    /// <summary>Field number for the "server_version" field.</summary>
    public const int ServerVersionFieldNumber = 1;
    private readonly static uint ServerVersionDefaultValue = 0;

    private uint serverVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerVersion {
      get { if ((_hasBits0 & 1) != 0) { return serverVersion_; } else { return ServerVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        serverVersion_ = value;
      }
    }
    /// <summary>Gets whether the "server_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "server_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerVersion() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "local_attempt" field.</summary>
    public const int LocalAttemptFieldNumber = 2;
    private readonly static uint LocalAttemptDefaultValue = 0;

    private uint localAttempt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalAttempt {
      get { if ((_hasBits0 & 2) != 0) { return localAttempt_; } else { return LocalAttemptDefaultValue; } }
      set {
        _hasBits0 |= 2;
        localAttempt_ = value;
      }
    }
    /// <summary>Gets whether the "local_attempt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocalAttempt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "local_attempt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalAttempt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_attempt" field.</summary>
    public const int TotalAttemptFieldNumber = 3;
    private readonly static uint TotalAttemptDefaultValue = 0;

    private uint totalAttempt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalAttempt {
      get { if ((_hasBits0 & 4) != 0) { return totalAttempt_; } else { return TotalAttemptDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalAttempt_ = value;
      }
    }
    /// <summary>Gets whether the "total_attempt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalAttempt {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_attempt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalAttempt() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "seconds_waited" field.</summary>
    public const int SecondsWaitedFieldNumber = 4;
    private readonly static uint SecondsWaitedDefaultValue = 0;

    private uint secondsWaited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecondsWaited {
      get { if ((_hasBits0 & 8) != 0) { return secondsWaited_; } else { return SecondsWaitedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        secondsWaited_ = value;
      }
    }
    /// <summary>Gets whether the "seconds_waited" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecondsWaited {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "seconds_waited" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecondsWaited() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameMatchSignOutPermissionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameMatchSignOutPermissionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerVersion != other.ServerVersion) return false;
      if (LocalAttempt != other.LocalAttempt) return false;
      if (TotalAttempt != other.TotalAttempt) return false;
      if (SecondsWaited != other.SecondsWaited) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServerVersion) hash ^= ServerVersion.GetHashCode();
      if (HasLocalAttempt) hash ^= LocalAttempt.GetHashCode();
      if (HasTotalAttempt) hash ^= TotalAttempt.GetHashCode();
      if (HasSecondsWaited) hash ^= SecondsWaited.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasServerVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerVersion);
      }
      if (HasLocalAttempt) {
        output.WriteRawTag(16);
        output.WriteUInt32(LocalAttempt);
      }
      if (HasTotalAttempt) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalAttempt);
      }
      if (HasSecondsWaited) {
        output.WriteRawTag(32);
        output.WriteUInt32(SecondsWaited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasServerVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerVersion);
      }
      if (HasLocalAttempt) {
        output.WriteRawTag(16);
        output.WriteUInt32(LocalAttempt);
      }
      if (HasTotalAttempt) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalAttempt);
      }
      if (HasSecondsWaited) {
        output.WriteRawTag(32);
        output.WriteUInt32(SecondsWaited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServerVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerVersion);
      }
      if (HasLocalAttempt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocalAttempt);
      }
      if (HasTotalAttempt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalAttempt);
      }
      if (HasSecondsWaited) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsWaited);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameMatchSignOutPermissionRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasServerVersion) {
        ServerVersion = other.ServerVersion;
      }
      if (other.HasLocalAttempt) {
        LocalAttempt = other.LocalAttempt;
      }
      if (other.HasTotalAttempt) {
        TotalAttempt = other.TotalAttempt;
      }
      if (other.HasSecondsWaited) {
        SecondsWaited = other.SecondsWaited;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            LocalAttempt = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalAttempt = input.ReadUInt32();
            break;
          }
          case 32: {
            SecondsWaited = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ServerVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            LocalAttempt = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalAttempt = input.ReadUInt32();
            break;
          }
          case 32: {
            SecondsWaited = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameMatchSignOutPermissionResponse : pb::IMessage<CMsgGameMatchSignOutPermissionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameMatchSignOutPermissionResponse> _parser = new pb::MessageParser<CMsgGameMatchSignOutPermissionResponse>(() => new CMsgGameMatchSignOutPermissionResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameMatchSignOutPermissionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutPermissionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutPermissionResponse(CMsgGameMatchSignOutPermissionResponse other) : this() {
      _hasBits0 = other._hasBits0;
      permissionGranted_ = other.permissionGranted_;
      abandonSignout_ = other.abandonSignout_;
      retryDelaySeconds_ = other.retryDelaySeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutPermissionResponse Clone() {
      return new CMsgGameMatchSignOutPermissionResponse(this);
    }

    /// <summary>Field number for the "permission_granted" field.</summary>
    public const int PermissionGrantedFieldNumber = 1;
    private readonly static bool PermissionGrantedDefaultValue = false;

    private bool permissionGranted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PermissionGranted {
      get { if ((_hasBits0 & 1) != 0) { return permissionGranted_; } else { return PermissionGrantedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        permissionGranted_ = value;
      }
    }
    /// <summary>Gets whether the "permission_granted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPermissionGranted {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "permission_granted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPermissionGranted() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "abandon_signout" field.</summary>
    public const int AbandonSignoutFieldNumber = 2;
    private readonly static bool AbandonSignoutDefaultValue = false;

    private bool abandonSignout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AbandonSignout {
      get { if ((_hasBits0 & 2) != 0) { return abandonSignout_; } else { return AbandonSignoutDefaultValue; } }
      set {
        _hasBits0 |= 2;
        abandonSignout_ = value;
      }
    }
    /// <summary>Gets whether the "abandon_signout" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbandonSignout {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "abandon_signout" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbandonSignout() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "retry_delay_seconds" field.</summary>
    public const int RetryDelaySecondsFieldNumber = 3;
    private readonly static uint RetryDelaySecondsDefaultValue = 0;

    private uint retryDelaySeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RetryDelaySeconds {
      get { if ((_hasBits0 & 4) != 0) { return retryDelaySeconds_; } else { return RetryDelaySecondsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        retryDelaySeconds_ = value;
      }
    }
    /// <summary>Gets whether the "retry_delay_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRetryDelaySeconds {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "retry_delay_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRetryDelaySeconds() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameMatchSignOutPermissionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameMatchSignOutPermissionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PermissionGranted != other.PermissionGranted) return false;
      if (AbandonSignout != other.AbandonSignout) return false;
      if (RetryDelaySeconds != other.RetryDelaySeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPermissionGranted) hash ^= PermissionGranted.GetHashCode();
      if (HasAbandonSignout) hash ^= AbandonSignout.GetHashCode();
      if (HasRetryDelaySeconds) hash ^= RetryDelaySeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPermissionGranted) {
        output.WriteRawTag(8);
        output.WriteBool(PermissionGranted);
      }
      if (HasAbandonSignout) {
        output.WriteRawTag(16);
        output.WriteBool(AbandonSignout);
      }
      if (HasRetryDelaySeconds) {
        output.WriteRawTag(24);
        output.WriteUInt32(RetryDelaySeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPermissionGranted) {
        output.WriteRawTag(8);
        output.WriteBool(PermissionGranted);
      }
      if (HasAbandonSignout) {
        output.WriteRawTag(16);
        output.WriteBool(AbandonSignout);
      }
      if (HasRetryDelaySeconds) {
        output.WriteRawTag(24);
        output.WriteUInt32(RetryDelaySeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPermissionGranted) {
        size += 1 + 1;
      }
      if (HasAbandonSignout) {
        size += 1 + 1;
      }
      if (HasRetryDelaySeconds) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RetryDelaySeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameMatchSignOutPermissionResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasPermissionGranted) {
        PermissionGranted = other.PermissionGranted;
      }
      if (other.HasAbandonSignout) {
        AbandonSignout = other.AbandonSignout;
      }
      if (other.HasRetryDelaySeconds) {
        RetryDelaySeconds = other.RetryDelaySeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PermissionGranted = input.ReadBool();
            break;
          }
          case 16: {
            AbandonSignout = input.ReadBool();
            break;
          }
          case 24: {
            RetryDelaySeconds = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PermissionGranted = input.ReadBool();
            break;
          }
          case 16: {
            AbandonSignout = input.ReadBool();
            break;
          }
          case 24: {
            RetryDelaySeconds = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameMatchSignOutEventGameData : pb::IMessage<CMsgGameMatchSignOutEventGameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameMatchSignOutEventGameData> _parser = new pb::MessageParser<CMsgGameMatchSignOutEventGameData>(() => new CMsgGameMatchSignOutEventGameData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameMatchSignOutEventGameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutEventGameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutEventGameData(CMsgGameMatchSignOutEventGameData other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      gameName_ = other.gameName_;
      mapName_ = other.mapName_;
      eventGameData_ = other.eventGameData_;
      startTime_ = other.startTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutEventGameData Clone() {
      return new CMsgGameMatchSignOutEventGameData(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "game_name" field.</summary>
    public const int GameNameFieldNumber = 2;
    private readonly static string GameNameDefaultValue = "";

    private string gameName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_ ?? GameNameDefaultValue; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "game_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameName {
      get { return gameName_ != null; }
    }
    /// <summary>Clears the value of the "game_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameName() {
      gameName_ = null;
    }

    /// <summary>Field number for the "map_name" field.</summary>
    public const int MapNameFieldNumber = 3;
    private readonly static string MapNameDefaultValue = "";

    private string mapName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_ ?? MapNameDefaultValue; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "map_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMapName {
      get { return mapName_ != null; }
    }
    /// <summary>Clears the value of the "map_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMapName() {
      mapName_ = null;
    }

    /// <summary>Field number for the "event_game_data" field.</summary>
    public const int EventGameDataFieldNumber = 4;
    private readonly static pb::ByteString EventGameDataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString eventGameData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventGameData {
      get { return eventGameData_ ?? EventGameDataDefaultValue; }
      set {
        eventGameData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "event_game_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventGameData {
      get { return eventGameData_ != null; }
    }
    /// <summary>Clears the value of the "event_game_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventGameData() {
      eventGameData_ = null;
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private readonly static uint StartTimeDefaultValue = 0;

    private uint startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { if ((_hasBits0 & 2) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        startTime_ = value;
      }
    }
    /// <summary>Gets whether the "start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameMatchSignOutEventGameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameMatchSignOutEventGameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (GameName != other.GameName) return false;
      if (MapName != other.MapName) return false;
      if (EventGameData != other.EventGameData) return false;
      if (StartTime != other.StartTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasGameName) hash ^= GameName.GetHashCode();
      if (HasMapName) hash ^= MapName.GetHashCode();
      if (HasEventGameData) hash ^= EventGameData.GetHashCode();
      if (HasStartTime) hash ^= StartTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      if (HasGameName) {
        output.WriteRawTag(18);
        output.WriteString(GameName);
      }
      if (HasMapName) {
        output.WriteRawTag(26);
        output.WriteString(MapName);
      }
      if (HasEventGameData) {
        output.WriteRawTag(34);
        output.WriteBytes(EventGameData);
      }
      if (HasStartTime) {
        output.WriteRawTag(40);
        output.WriteUInt32(StartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      if (HasGameName) {
        output.WriteRawTag(18);
        output.WriteString(GameName);
      }
      if (HasMapName) {
        output.WriteRawTag(26);
        output.WriteString(MapName);
      }
      if (HasEventGameData) {
        output.WriteRawTag(34);
        output.WriteBytes(EventGameData);
      }
      if (HasStartTime) {
        output.WriteRawTag(40);
        output.WriteUInt32(StartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasGameName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (HasMapName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (HasEventGameData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventGameData);
      }
      if (HasStartTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameMatchSignOutEventGameData other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasGameName) {
        GameName = other.GameName;
      }
      if (other.HasMapName) {
        MapName = other.MapName;
      }
      if (other.HasEventGameData) {
        EventGameData = other.EventGameData;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 18: {
            GameName = input.ReadString();
            break;
          }
          case 26: {
            MapName = input.ReadString();
            break;
          }
          case 34: {
            EventGameData = input.ReadBytes();
            break;
          }
          case 40: {
            StartTime = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 18: {
            GameName = input.ReadString();
            break;
          }
          case 26: {
            MapName = input.ReadString();
            break;
          }
          case 34: {
            EventGameData = input.ReadBytes();
            break;
          }
          case 40: {
            StartTime = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameMatchSignOutPerfData : pb::IMessage<CMsgGameMatchSignOutPerfData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameMatchSignOutPerfData> _parser = new pb::MessageParser<CMsgGameMatchSignOutPerfData>(() => new CMsgGameMatchSignOutPerfData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameMatchSignOutPerfData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutPerfData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutPerfData(CMsgGameMatchSignOutPerfData other) : this() {
      _hasBits0 = other._hasBits0;
      averageFrameTime_ = other.averageFrameTime_.Clone();
      maxFrameTime_ = other.maxFrameTime_.Clone();
      serverAverageFrameTime_ = other.serverAverageFrameTime_;
      serverMaxFrameTime_ = other.serverMaxFrameTime_;
      averageComputeTime_ = other.averageComputeTime_.Clone();
      maxComputeTime_ = other.maxComputeTime_.Clone();
      averageClientTickTime_ = other.averageClientTickTime_.Clone();
      maxClientTickTime_ = other.maxClientTickTime_.Clone();
      averageClientSimulateTime_ = other.averageClientSimulateTime_.Clone();
      maxClientSimulateTime_ = other.maxClientSimulateTime_.Clone();
      averageOutputTime_ = other.averageOutputTime_.Clone();
      maxOutputTime_ = other.maxOutputTime_.Clone();
      averageWaitForRenderingToCompleteTime_ = other.averageWaitForRenderingToCompleteTime_.Clone();
      maxWaitForRenderingToCompleteTime_ = other.maxWaitForRenderingToCompleteTime_.Clone();
      averageSwapTime_ = other.averageSwapTime_.Clone();
      maxSwapTime_ = other.maxSwapTime_.Clone();
      averageFrameUpdateTime_ = other.averageFrameUpdateTime_.Clone();
      maxFrameUpdateTime_ = other.maxFrameUpdateTime_.Clone();
      averageIdleTime_ = other.averageIdleTime_.Clone();
      maxIdleTime_ = other.maxIdleTime_.Clone();
      averageInputProcessingTime_ = other.averageInputProcessingTime_.Clone();
      maxInputProcessingTime_ = other.maxInputProcessingTime_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutPerfData Clone() {
      return new CMsgGameMatchSignOutPerfData(this);
    }

    /// <summary>Field number for the "average_frame_time" field.</summary>
    public const int AverageFrameTimeFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_averageFrameTime_codec
        = pb::FieldCodec.ForFloat(13);
    private readonly pbc::RepeatedField<float> averageFrameTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AverageFrameTime {
      get { return averageFrameTime_; }
    }

    /// <summary>Field number for the "max_frame_time" field.</summary>
    public const int MaxFrameTimeFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_maxFrameTime_codec
        = pb::FieldCodec.ForFloat(21);
    private readonly pbc::RepeatedField<float> maxFrameTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxFrameTime {
      get { return maxFrameTime_; }
    }

    /// <summary>Field number for the "server_average_frame_time" field.</summary>
    public const int ServerAverageFrameTimeFieldNumber = 3;
    private readonly static float ServerAverageFrameTimeDefaultValue = 0F;

    private float serverAverageFrameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ServerAverageFrameTime {
      get { if ((_hasBits0 & 1) != 0) { return serverAverageFrameTime_; } else { return ServerAverageFrameTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        serverAverageFrameTime_ = value;
      }
    }
    /// <summary>Gets whether the "server_average_frame_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerAverageFrameTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "server_average_frame_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerAverageFrameTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "server_max_frame_time" field.</summary>
    public const int ServerMaxFrameTimeFieldNumber = 4;
    private readonly static float ServerMaxFrameTimeDefaultValue = 0F;

    private float serverMaxFrameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ServerMaxFrameTime {
      get { if ((_hasBits0 & 2) != 0) { return serverMaxFrameTime_; } else { return ServerMaxFrameTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        serverMaxFrameTime_ = value;
      }
    }
    /// <summary>Gets whether the "server_max_frame_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerMaxFrameTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "server_max_frame_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerMaxFrameTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "average_compute_time" field.</summary>
    public const int AverageComputeTimeFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_averageComputeTime_codec
        = pb::FieldCodec.ForFloat(45);
    private readonly pbc::RepeatedField<float> averageComputeTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AverageComputeTime {
      get { return averageComputeTime_; }
    }

    /// <summary>Field number for the "max_compute_time" field.</summary>
    public const int MaxComputeTimeFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_maxComputeTime_codec
        = pb::FieldCodec.ForFloat(53);
    private readonly pbc::RepeatedField<float> maxComputeTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxComputeTime {
      get { return maxComputeTime_; }
    }

    /// <summary>Field number for the "average_client_tick_time" field.</summary>
    public const int AverageClientTickTimeFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_averageClientTickTime_codec
        = pb::FieldCodec.ForFloat(61);
    private readonly pbc::RepeatedField<float> averageClientTickTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AverageClientTickTime {
      get { return averageClientTickTime_; }
    }

    /// <summary>Field number for the "max_client_tick_time" field.</summary>
    public const int MaxClientTickTimeFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_maxClientTickTime_codec
        = pb::FieldCodec.ForFloat(69);
    private readonly pbc::RepeatedField<float> maxClientTickTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxClientTickTime {
      get { return maxClientTickTime_; }
    }

    /// <summary>Field number for the "average_client_simulate_time" field.</summary>
    public const int AverageClientSimulateTimeFieldNumber = 9;
    private static readonly pb::FieldCodec<float> _repeated_averageClientSimulateTime_codec
        = pb::FieldCodec.ForFloat(77);
    private readonly pbc::RepeatedField<float> averageClientSimulateTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AverageClientSimulateTime {
      get { return averageClientSimulateTime_; }
    }

    /// <summary>Field number for the "max_client_simulate_time" field.</summary>
    public const int MaxClientSimulateTimeFieldNumber = 10;
    private static readonly pb::FieldCodec<float> _repeated_maxClientSimulateTime_codec
        = pb::FieldCodec.ForFloat(85);
    private readonly pbc::RepeatedField<float> maxClientSimulateTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxClientSimulateTime {
      get { return maxClientSimulateTime_; }
    }

    /// <summary>Field number for the "average_output_time" field.</summary>
    public const int AverageOutputTimeFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_averageOutputTime_codec
        = pb::FieldCodec.ForFloat(93);
    private readonly pbc::RepeatedField<float> averageOutputTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AverageOutputTime {
      get { return averageOutputTime_; }
    }

    /// <summary>Field number for the "max_output_time" field.</summary>
    public const int MaxOutputTimeFieldNumber = 12;
    private static readonly pb::FieldCodec<float> _repeated_maxOutputTime_codec
        = pb::FieldCodec.ForFloat(101);
    private readonly pbc::RepeatedField<float> maxOutputTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxOutputTime {
      get { return maxOutputTime_; }
    }

    /// <summary>Field number for the "average_wait_for_rendering_to_complete_time" field.</summary>
    public const int AverageWaitForRenderingToCompleteTimeFieldNumber = 13;
    private static readonly pb::FieldCodec<float> _repeated_averageWaitForRenderingToCompleteTime_codec
        = pb::FieldCodec.ForFloat(109);
    private readonly pbc::RepeatedField<float> averageWaitForRenderingToCompleteTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AverageWaitForRenderingToCompleteTime {
      get { return averageWaitForRenderingToCompleteTime_; }
    }

    /// <summary>Field number for the "max_wait_for_rendering_to_complete_time" field.</summary>
    public const int MaxWaitForRenderingToCompleteTimeFieldNumber = 14;
    private static readonly pb::FieldCodec<float> _repeated_maxWaitForRenderingToCompleteTime_codec
        = pb::FieldCodec.ForFloat(117);
    private readonly pbc::RepeatedField<float> maxWaitForRenderingToCompleteTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxWaitForRenderingToCompleteTime {
      get { return maxWaitForRenderingToCompleteTime_; }
    }

    /// <summary>Field number for the "average_swap_time" field.</summary>
    public const int AverageSwapTimeFieldNumber = 15;
    private static readonly pb::FieldCodec<float> _repeated_averageSwapTime_codec
        = pb::FieldCodec.ForFloat(125);
    private readonly pbc::RepeatedField<float> averageSwapTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AverageSwapTime {
      get { return averageSwapTime_; }
    }

    /// <summary>Field number for the "max_swap_time" field.</summary>
    public const int MaxSwapTimeFieldNumber = 16;
    private static readonly pb::FieldCodec<float> _repeated_maxSwapTime_codec
        = pb::FieldCodec.ForFloat(133);
    private readonly pbc::RepeatedField<float> maxSwapTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxSwapTime {
      get { return maxSwapTime_; }
    }

    /// <summary>Field number for the "average_frame_update_time" field.</summary>
    public const int AverageFrameUpdateTimeFieldNumber = 17;
    private static readonly pb::FieldCodec<float> _repeated_averageFrameUpdateTime_codec
        = pb::FieldCodec.ForFloat(141);
    private readonly pbc::RepeatedField<float> averageFrameUpdateTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AverageFrameUpdateTime {
      get { return averageFrameUpdateTime_; }
    }

    /// <summary>Field number for the "max_frame_update_time" field.</summary>
    public const int MaxFrameUpdateTimeFieldNumber = 18;
    private static readonly pb::FieldCodec<float> _repeated_maxFrameUpdateTime_codec
        = pb::FieldCodec.ForFloat(149);
    private readonly pbc::RepeatedField<float> maxFrameUpdateTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxFrameUpdateTime {
      get { return maxFrameUpdateTime_; }
    }

    /// <summary>Field number for the "average_idle_time" field.</summary>
    public const int AverageIdleTimeFieldNumber = 19;
    private static readonly pb::FieldCodec<float> _repeated_averageIdleTime_codec
        = pb::FieldCodec.ForFloat(157);
    private readonly pbc::RepeatedField<float> averageIdleTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AverageIdleTime {
      get { return averageIdleTime_; }
    }

    /// <summary>Field number for the "max_idle_time" field.</summary>
    public const int MaxIdleTimeFieldNumber = 20;
    private static readonly pb::FieldCodec<float> _repeated_maxIdleTime_codec
        = pb::FieldCodec.ForFloat(165);
    private readonly pbc::RepeatedField<float> maxIdleTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxIdleTime {
      get { return maxIdleTime_; }
    }

    /// <summary>Field number for the "average_input_processing_time" field.</summary>
    public const int AverageInputProcessingTimeFieldNumber = 21;
    private static readonly pb::FieldCodec<float> _repeated_averageInputProcessingTime_codec
        = pb::FieldCodec.ForFloat(173);
    private readonly pbc::RepeatedField<float> averageInputProcessingTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AverageInputProcessingTime {
      get { return averageInputProcessingTime_; }
    }

    /// <summary>Field number for the "max_input_processing_time" field.</summary>
    public const int MaxInputProcessingTimeFieldNumber = 22;
    private static readonly pb::FieldCodec<float> _repeated_maxInputProcessingTime_codec
        = pb::FieldCodec.ForFloat(181);
    private readonly pbc::RepeatedField<float> maxInputProcessingTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxInputProcessingTime {
      get { return maxInputProcessingTime_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameMatchSignOutPerfData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameMatchSignOutPerfData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!averageFrameTime_.Equals(other.averageFrameTime_)) return false;
      if(!maxFrameTime_.Equals(other.maxFrameTime_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ServerAverageFrameTime, other.ServerAverageFrameTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ServerMaxFrameTime, other.ServerMaxFrameTime)) return false;
      if(!averageComputeTime_.Equals(other.averageComputeTime_)) return false;
      if(!maxComputeTime_.Equals(other.maxComputeTime_)) return false;
      if(!averageClientTickTime_.Equals(other.averageClientTickTime_)) return false;
      if(!maxClientTickTime_.Equals(other.maxClientTickTime_)) return false;
      if(!averageClientSimulateTime_.Equals(other.averageClientSimulateTime_)) return false;
      if(!maxClientSimulateTime_.Equals(other.maxClientSimulateTime_)) return false;
      if(!averageOutputTime_.Equals(other.averageOutputTime_)) return false;
      if(!maxOutputTime_.Equals(other.maxOutputTime_)) return false;
      if(!averageWaitForRenderingToCompleteTime_.Equals(other.averageWaitForRenderingToCompleteTime_)) return false;
      if(!maxWaitForRenderingToCompleteTime_.Equals(other.maxWaitForRenderingToCompleteTime_)) return false;
      if(!averageSwapTime_.Equals(other.averageSwapTime_)) return false;
      if(!maxSwapTime_.Equals(other.maxSwapTime_)) return false;
      if(!averageFrameUpdateTime_.Equals(other.averageFrameUpdateTime_)) return false;
      if(!maxFrameUpdateTime_.Equals(other.maxFrameUpdateTime_)) return false;
      if(!averageIdleTime_.Equals(other.averageIdleTime_)) return false;
      if(!maxIdleTime_.Equals(other.maxIdleTime_)) return false;
      if(!averageInputProcessingTime_.Equals(other.averageInputProcessingTime_)) return false;
      if(!maxInputProcessingTime_.Equals(other.maxInputProcessingTime_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= averageFrameTime_.GetHashCode();
      hash ^= maxFrameTime_.GetHashCode();
      if (HasServerAverageFrameTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ServerAverageFrameTime);
      if (HasServerMaxFrameTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ServerMaxFrameTime);
      hash ^= averageComputeTime_.GetHashCode();
      hash ^= maxComputeTime_.GetHashCode();
      hash ^= averageClientTickTime_.GetHashCode();
      hash ^= maxClientTickTime_.GetHashCode();
      hash ^= averageClientSimulateTime_.GetHashCode();
      hash ^= maxClientSimulateTime_.GetHashCode();
      hash ^= averageOutputTime_.GetHashCode();
      hash ^= maxOutputTime_.GetHashCode();
      hash ^= averageWaitForRenderingToCompleteTime_.GetHashCode();
      hash ^= maxWaitForRenderingToCompleteTime_.GetHashCode();
      hash ^= averageSwapTime_.GetHashCode();
      hash ^= maxSwapTime_.GetHashCode();
      hash ^= averageFrameUpdateTime_.GetHashCode();
      hash ^= maxFrameUpdateTime_.GetHashCode();
      hash ^= averageIdleTime_.GetHashCode();
      hash ^= maxIdleTime_.GetHashCode();
      hash ^= averageInputProcessingTime_.GetHashCode();
      hash ^= maxInputProcessingTime_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      averageFrameTime_.WriteTo(output, _repeated_averageFrameTime_codec);
      maxFrameTime_.WriteTo(output, _repeated_maxFrameTime_codec);
      if (HasServerAverageFrameTime) {
        output.WriteRawTag(29);
        output.WriteFloat(ServerAverageFrameTime);
      }
      if (HasServerMaxFrameTime) {
        output.WriteRawTag(37);
        output.WriteFloat(ServerMaxFrameTime);
      }
      averageComputeTime_.WriteTo(output, _repeated_averageComputeTime_codec);
      maxComputeTime_.WriteTo(output, _repeated_maxComputeTime_codec);
      averageClientTickTime_.WriteTo(output, _repeated_averageClientTickTime_codec);
      maxClientTickTime_.WriteTo(output, _repeated_maxClientTickTime_codec);
      averageClientSimulateTime_.WriteTo(output, _repeated_averageClientSimulateTime_codec);
      maxClientSimulateTime_.WriteTo(output, _repeated_maxClientSimulateTime_codec);
      averageOutputTime_.WriteTo(output, _repeated_averageOutputTime_codec);
      maxOutputTime_.WriteTo(output, _repeated_maxOutputTime_codec);
      averageWaitForRenderingToCompleteTime_.WriteTo(output, _repeated_averageWaitForRenderingToCompleteTime_codec);
      maxWaitForRenderingToCompleteTime_.WriteTo(output, _repeated_maxWaitForRenderingToCompleteTime_codec);
      averageSwapTime_.WriteTo(output, _repeated_averageSwapTime_codec);
      maxSwapTime_.WriteTo(output, _repeated_maxSwapTime_codec);
      averageFrameUpdateTime_.WriteTo(output, _repeated_averageFrameUpdateTime_codec);
      maxFrameUpdateTime_.WriteTo(output, _repeated_maxFrameUpdateTime_codec);
      averageIdleTime_.WriteTo(output, _repeated_averageIdleTime_codec);
      maxIdleTime_.WriteTo(output, _repeated_maxIdleTime_codec);
      averageInputProcessingTime_.WriteTo(output, _repeated_averageInputProcessingTime_codec);
      maxInputProcessingTime_.WriteTo(output, _repeated_maxInputProcessingTime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      averageFrameTime_.WriteTo(ref output, _repeated_averageFrameTime_codec);
      maxFrameTime_.WriteTo(ref output, _repeated_maxFrameTime_codec);
      if (HasServerAverageFrameTime) {
        output.WriteRawTag(29);
        output.WriteFloat(ServerAverageFrameTime);
      }
      if (HasServerMaxFrameTime) {
        output.WriteRawTag(37);
        output.WriteFloat(ServerMaxFrameTime);
      }
      averageComputeTime_.WriteTo(ref output, _repeated_averageComputeTime_codec);
      maxComputeTime_.WriteTo(ref output, _repeated_maxComputeTime_codec);
      averageClientTickTime_.WriteTo(ref output, _repeated_averageClientTickTime_codec);
      maxClientTickTime_.WriteTo(ref output, _repeated_maxClientTickTime_codec);
      averageClientSimulateTime_.WriteTo(ref output, _repeated_averageClientSimulateTime_codec);
      maxClientSimulateTime_.WriteTo(ref output, _repeated_maxClientSimulateTime_codec);
      averageOutputTime_.WriteTo(ref output, _repeated_averageOutputTime_codec);
      maxOutputTime_.WriteTo(ref output, _repeated_maxOutputTime_codec);
      averageWaitForRenderingToCompleteTime_.WriteTo(ref output, _repeated_averageWaitForRenderingToCompleteTime_codec);
      maxWaitForRenderingToCompleteTime_.WriteTo(ref output, _repeated_maxWaitForRenderingToCompleteTime_codec);
      averageSwapTime_.WriteTo(ref output, _repeated_averageSwapTime_codec);
      maxSwapTime_.WriteTo(ref output, _repeated_maxSwapTime_codec);
      averageFrameUpdateTime_.WriteTo(ref output, _repeated_averageFrameUpdateTime_codec);
      maxFrameUpdateTime_.WriteTo(ref output, _repeated_maxFrameUpdateTime_codec);
      averageIdleTime_.WriteTo(ref output, _repeated_averageIdleTime_codec);
      maxIdleTime_.WriteTo(ref output, _repeated_maxIdleTime_codec);
      averageInputProcessingTime_.WriteTo(ref output, _repeated_averageInputProcessingTime_codec);
      maxInputProcessingTime_.WriteTo(ref output, _repeated_maxInputProcessingTime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += averageFrameTime_.CalculateSize(_repeated_averageFrameTime_codec);
      size += maxFrameTime_.CalculateSize(_repeated_maxFrameTime_codec);
      if (HasServerAverageFrameTime) {
        size += 1 + 4;
      }
      if (HasServerMaxFrameTime) {
        size += 1 + 4;
      }
      size += averageComputeTime_.CalculateSize(_repeated_averageComputeTime_codec);
      size += maxComputeTime_.CalculateSize(_repeated_maxComputeTime_codec);
      size += averageClientTickTime_.CalculateSize(_repeated_averageClientTickTime_codec);
      size += maxClientTickTime_.CalculateSize(_repeated_maxClientTickTime_codec);
      size += averageClientSimulateTime_.CalculateSize(_repeated_averageClientSimulateTime_codec);
      size += maxClientSimulateTime_.CalculateSize(_repeated_maxClientSimulateTime_codec);
      size += averageOutputTime_.CalculateSize(_repeated_averageOutputTime_codec);
      size += maxOutputTime_.CalculateSize(_repeated_maxOutputTime_codec);
      size += averageWaitForRenderingToCompleteTime_.CalculateSize(_repeated_averageWaitForRenderingToCompleteTime_codec);
      size += maxWaitForRenderingToCompleteTime_.CalculateSize(_repeated_maxWaitForRenderingToCompleteTime_codec);
      size += averageSwapTime_.CalculateSize(_repeated_averageSwapTime_codec);
      size += maxSwapTime_.CalculateSize(_repeated_maxSwapTime_codec);
      size += averageFrameUpdateTime_.CalculateSize(_repeated_averageFrameUpdateTime_codec);
      size += maxFrameUpdateTime_.CalculateSize(_repeated_maxFrameUpdateTime_codec);
      size += averageIdleTime_.CalculateSize(_repeated_averageIdleTime_codec);
      size += maxIdleTime_.CalculateSize(_repeated_maxIdleTime_codec);
      size += averageInputProcessingTime_.CalculateSize(_repeated_averageInputProcessingTime_codec);
      size += maxInputProcessingTime_.CalculateSize(_repeated_maxInputProcessingTime_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameMatchSignOutPerfData other) {
      if (other == null) {
        return;
      }
      averageFrameTime_.Add(other.averageFrameTime_);
      maxFrameTime_.Add(other.maxFrameTime_);
      if (other.HasServerAverageFrameTime) {
        ServerAverageFrameTime = other.ServerAverageFrameTime;
      }
      if (other.HasServerMaxFrameTime) {
        ServerMaxFrameTime = other.ServerMaxFrameTime;
      }
      averageComputeTime_.Add(other.averageComputeTime_);
      maxComputeTime_.Add(other.maxComputeTime_);
      averageClientTickTime_.Add(other.averageClientTickTime_);
      maxClientTickTime_.Add(other.maxClientTickTime_);
      averageClientSimulateTime_.Add(other.averageClientSimulateTime_);
      maxClientSimulateTime_.Add(other.maxClientSimulateTime_);
      averageOutputTime_.Add(other.averageOutputTime_);
      maxOutputTime_.Add(other.maxOutputTime_);
      averageWaitForRenderingToCompleteTime_.Add(other.averageWaitForRenderingToCompleteTime_);
      maxWaitForRenderingToCompleteTime_.Add(other.maxWaitForRenderingToCompleteTime_);
      averageSwapTime_.Add(other.averageSwapTime_);
      maxSwapTime_.Add(other.maxSwapTime_);
      averageFrameUpdateTime_.Add(other.averageFrameUpdateTime_);
      maxFrameUpdateTime_.Add(other.maxFrameUpdateTime_);
      averageIdleTime_.Add(other.averageIdleTime_);
      maxIdleTime_.Add(other.maxIdleTime_);
      averageInputProcessingTime_.Add(other.averageInputProcessingTime_);
      maxInputProcessingTime_.Add(other.maxInputProcessingTime_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            averageFrameTime_.AddEntriesFrom(input, _repeated_averageFrameTime_codec);
            break;
          }
          case 18:
          case 21: {
            maxFrameTime_.AddEntriesFrom(input, _repeated_maxFrameTime_codec);
            break;
          }
          case 29: {
            ServerAverageFrameTime = input.ReadFloat();
            break;
          }
          case 37: {
            ServerMaxFrameTime = input.ReadFloat();
            break;
          }
          case 42:
          case 45: {
            averageComputeTime_.AddEntriesFrom(input, _repeated_averageComputeTime_codec);
            break;
          }
          case 50:
          case 53: {
            maxComputeTime_.AddEntriesFrom(input, _repeated_maxComputeTime_codec);
            break;
          }
          case 58:
          case 61: {
            averageClientTickTime_.AddEntriesFrom(input, _repeated_averageClientTickTime_codec);
            break;
          }
          case 66:
          case 69: {
            maxClientTickTime_.AddEntriesFrom(input, _repeated_maxClientTickTime_codec);
            break;
          }
          case 74:
          case 77: {
            averageClientSimulateTime_.AddEntriesFrom(input, _repeated_averageClientSimulateTime_codec);
            break;
          }
          case 82:
          case 85: {
            maxClientSimulateTime_.AddEntriesFrom(input, _repeated_maxClientSimulateTime_codec);
            break;
          }
          case 90:
          case 93: {
            averageOutputTime_.AddEntriesFrom(input, _repeated_averageOutputTime_codec);
            break;
          }
          case 98:
          case 101: {
            maxOutputTime_.AddEntriesFrom(input, _repeated_maxOutputTime_codec);
            break;
          }
          case 106:
          case 109: {
            averageWaitForRenderingToCompleteTime_.AddEntriesFrom(input, _repeated_averageWaitForRenderingToCompleteTime_codec);
            break;
          }
          case 114:
          case 117: {
            maxWaitForRenderingToCompleteTime_.AddEntriesFrom(input, _repeated_maxWaitForRenderingToCompleteTime_codec);
            break;
          }
          case 122:
          case 125: {
            averageSwapTime_.AddEntriesFrom(input, _repeated_averageSwapTime_codec);
            break;
          }
          case 130:
          case 133: {
            maxSwapTime_.AddEntriesFrom(input, _repeated_maxSwapTime_codec);
            break;
          }
          case 138:
          case 141: {
            averageFrameUpdateTime_.AddEntriesFrom(input, _repeated_averageFrameUpdateTime_codec);
            break;
          }
          case 146:
          case 149: {
            maxFrameUpdateTime_.AddEntriesFrom(input, _repeated_maxFrameUpdateTime_codec);
            break;
          }
          case 154:
          case 157: {
            averageIdleTime_.AddEntriesFrom(input, _repeated_averageIdleTime_codec);
            break;
          }
          case 162:
          case 165: {
            maxIdleTime_.AddEntriesFrom(input, _repeated_maxIdleTime_codec);
            break;
          }
          case 170:
          case 173: {
            averageInputProcessingTime_.AddEntriesFrom(input, _repeated_averageInputProcessingTime_codec);
            break;
          }
          case 178:
          case 181: {
            maxInputProcessingTime_.AddEntriesFrom(input, _repeated_maxInputProcessingTime_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 13: {
            averageFrameTime_.AddEntriesFrom(ref input, _repeated_averageFrameTime_codec);
            break;
          }
          case 18:
          case 21: {
            maxFrameTime_.AddEntriesFrom(ref input, _repeated_maxFrameTime_codec);
            break;
          }
          case 29: {
            ServerAverageFrameTime = input.ReadFloat();
            break;
          }
          case 37: {
            ServerMaxFrameTime = input.ReadFloat();
            break;
          }
          case 42:
          case 45: {
            averageComputeTime_.AddEntriesFrom(ref input, _repeated_averageComputeTime_codec);
            break;
          }
          case 50:
          case 53: {
            maxComputeTime_.AddEntriesFrom(ref input, _repeated_maxComputeTime_codec);
            break;
          }
          case 58:
          case 61: {
            averageClientTickTime_.AddEntriesFrom(ref input, _repeated_averageClientTickTime_codec);
            break;
          }
          case 66:
          case 69: {
            maxClientTickTime_.AddEntriesFrom(ref input, _repeated_maxClientTickTime_codec);
            break;
          }
          case 74:
          case 77: {
            averageClientSimulateTime_.AddEntriesFrom(ref input, _repeated_averageClientSimulateTime_codec);
            break;
          }
          case 82:
          case 85: {
            maxClientSimulateTime_.AddEntriesFrom(ref input, _repeated_maxClientSimulateTime_codec);
            break;
          }
          case 90:
          case 93: {
            averageOutputTime_.AddEntriesFrom(ref input, _repeated_averageOutputTime_codec);
            break;
          }
          case 98:
          case 101: {
            maxOutputTime_.AddEntriesFrom(ref input, _repeated_maxOutputTime_codec);
            break;
          }
          case 106:
          case 109: {
            averageWaitForRenderingToCompleteTime_.AddEntriesFrom(ref input, _repeated_averageWaitForRenderingToCompleteTime_codec);
            break;
          }
          case 114:
          case 117: {
            maxWaitForRenderingToCompleteTime_.AddEntriesFrom(ref input, _repeated_maxWaitForRenderingToCompleteTime_codec);
            break;
          }
          case 122:
          case 125: {
            averageSwapTime_.AddEntriesFrom(ref input, _repeated_averageSwapTime_codec);
            break;
          }
          case 130:
          case 133: {
            maxSwapTime_.AddEntriesFrom(ref input, _repeated_maxSwapTime_codec);
            break;
          }
          case 138:
          case 141: {
            averageFrameUpdateTime_.AddEntriesFrom(ref input, _repeated_averageFrameUpdateTime_codec);
            break;
          }
          case 146:
          case 149: {
            maxFrameUpdateTime_.AddEntriesFrom(ref input, _repeated_maxFrameUpdateTime_codec);
            break;
          }
          case 154:
          case 157: {
            averageIdleTime_.AddEntriesFrom(ref input, _repeated_averageIdleTime_codec);
            break;
          }
          case 162:
          case 165: {
            maxIdleTime_.AddEntriesFrom(ref input, _repeated_maxIdleTime_codec);
            break;
          }
          case 170:
          case 173: {
            averageInputProcessingTime_.AddEntriesFrom(ref input, _repeated_averageInputProcessingTime_codec);
            break;
          }
          case 178:
          case 181: {
            maxInputProcessingTime_.AddEntriesFrom(ref input, _repeated_maxInputProcessingTime_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameMatchSignOutBanData : pb::IMessage<CMsgGameMatchSignOutBanData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameMatchSignOutBanData> _parser = new pb::MessageParser<CMsgGameMatchSignOutBanData>(() => new CMsgGameMatchSignOutBanData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameMatchSignOutBanData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutBanData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutBanData(CMsgGameMatchSignOutBanData other) : this() {
      heroBans_ = other.heroBans_.Clone();
      heroBanVotes_ = other.heroBanVotes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameMatchSignOutBanData Clone() {
      return new CMsgGameMatchSignOutBanData(this);
    }

    /// <summary>Field number for the "hero_bans" field.</summary>
    public const int HeroBansFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_heroBans_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> heroBans_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroBans {
      get { return heroBans_; }
    }

    /// <summary>Field number for the "hero_ban_votes" field.</summary>
    public const int HeroBanVotesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_heroBanVotes_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> heroBanVotes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroBanVotes {
      get { return heroBanVotes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameMatchSignOutBanData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameMatchSignOutBanData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroBans_.Equals(other.heroBans_)) return false;
      if(!heroBanVotes_.Equals(other.heroBanVotes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroBans_.GetHashCode();
      hash ^= heroBanVotes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      heroBans_.WriteTo(output, _repeated_heroBans_codec);
      heroBanVotes_.WriteTo(output, _repeated_heroBanVotes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      heroBans_.WriteTo(ref output, _repeated_heroBans_codec);
      heroBanVotes_.WriteTo(ref output, _repeated_heroBanVotes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroBans_.CalculateSize(_repeated_heroBans_codec);
      size += heroBanVotes_.CalculateSize(_repeated_heroBanVotes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameMatchSignOutBanData other) {
      if (other == null) {
        return;
      }
      heroBans_.Add(other.heroBans_);
      heroBanVotes_.Add(other.heroBanVotes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            heroBans_.AddEntriesFrom(input, _repeated_heroBans_codec);
            break;
          }
          case 18:
          case 16: {
            heroBanVotes_.AddEntriesFrom(input, _repeated_heroBanVotes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            heroBans_.AddEntriesFrom(ref input, _repeated_heroBans_codec);
            break;
          }
          case 18:
          case 16: {
            heroBanVotes_.AddEntriesFrom(ref input, _repeated_heroBanVotes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTALiveScoreboardUpdate : pb::IMessage<CMsgDOTALiveScoreboardUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTALiveScoreboardUpdate> _parser = new pb::MessageParser<CMsgDOTALiveScoreboardUpdate>(() => new CMsgDOTALiveScoreboardUpdate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTALiveScoreboardUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTALiveScoreboardUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTALiveScoreboardUpdate(CMsgDOTALiveScoreboardUpdate other) : this() {
      _hasBits0 = other._hasBits0;
      tournamentId_ = other.tournamentId_;
      tournamentGameId_ = other.tournamentGameId_;
      duration_ = other.duration_;
      hltvDelay_ = other.hltvDelay_;
      teamGood_ = other.teamGood_ != null ? other.teamGood_.Clone() : null;
      teamBad_ = other.teamBad_ != null ? other.teamBad_.Clone() : null;
      roshanRespawnTimer_ = other.roshanRespawnTimer_;
      leagueId_ = other.leagueId_;
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTALiveScoreboardUpdate Clone() {
      return new CMsgDOTALiveScoreboardUpdate(this);
    }

    /// <summary>Field number for the "tournament_id" field.</summary>
    public const int TournamentIdFieldNumber = 1;
    private readonly static uint TournamentIdDefaultValue = 0;

    private uint tournamentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TournamentId {
      get { if ((_hasBits0 & 1) != 0) { return tournamentId_; } else { return TournamentIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tournamentId_ = value;
      }
    }
    /// <summary>Gets whether the "tournament_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTournamentId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tournament_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTournamentId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tournament_game_id" field.</summary>
    public const int TournamentGameIdFieldNumber = 2;
    private readonly static uint TournamentGameIdDefaultValue = 0;

    private uint tournamentGameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TournamentGameId {
      get { if ((_hasBits0 & 2) != 0) { return tournamentGameId_; } else { return TournamentGameIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tournamentGameId_ = value;
      }
    }
    /// <summary>Gets whether the "tournament_game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTournamentGameId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tournament_game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTournamentGameId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private readonly static float DurationDefaultValue = 0F;

    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { if ((_hasBits0 & 4) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "hltv_delay" field.</summary>
    public const int HltvDelayFieldNumber = 4;
    private readonly static int HltvDelayDefaultValue = 0;

    private int hltvDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HltvDelay {
      get { if ((_hasBits0 & 8) != 0) { return hltvDelay_; } else { return HltvDelayDefaultValue; } }
      set {
        _hasBits0 |= 8;
        hltvDelay_ = value;
      }
    }
    /// <summary>Gets whether the "hltv_delay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHltvDelay {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "hltv_delay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHltvDelay() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "team_good" field.</summary>
    public const int TeamGoodFieldNumber = 5;
    private global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team teamGood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team TeamGood {
      get { return teamGood_; }
      set {
        teamGood_ = value;
      }
    }

    /// <summary>Field number for the "team_bad" field.</summary>
    public const int TeamBadFieldNumber = 6;
    private global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team teamBad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team TeamBad {
      get { return teamBad_; }
      set {
        teamBad_ = value;
      }
    }

    /// <summary>Field number for the "roshan_respawn_timer" field.</summary>
    public const int RoshanRespawnTimerFieldNumber = 7;
    private readonly static uint RoshanRespawnTimerDefaultValue = 0;

    private uint roshanRespawnTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoshanRespawnTimer {
      get { if ((_hasBits0 & 16) != 0) { return roshanRespawnTimer_; } else { return RoshanRespawnTimerDefaultValue; } }
      set {
        _hasBits0 |= 16;
        roshanRespawnTimer_ = value;
      }
    }
    /// <summary>Gets whether the "roshan_respawn_timer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoshanRespawnTimer {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "roshan_respawn_timer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoshanRespawnTimer() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "league_id" field.</summary>
    public const int LeagueIdFieldNumber = 8;
    private readonly static uint LeagueIdDefaultValue = 0;

    private uint leagueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeagueId {
      get { if ((_hasBits0 & 32) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        leagueId_ = value;
      }
    }
    /// <summary>Gets whether the "league_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "league_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueId() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 9;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 64) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTALiveScoreboardUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTALiveScoreboardUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TournamentId != other.TournamentId) return false;
      if (TournamentGameId != other.TournamentGameId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (HltvDelay != other.HltvDelay) return false;
      if (!object.Equals(TeamGood, other.TeamGood)) return false;
      if (!object.Equals(TeamBad, other.TeamBad)) return false;
      if (RoshanRespawnTimer != other.RoshanRespawnTimer) return false;
      if (LeagueId != other.LeagueId) return false;
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTournamentId) hash ^= TournamentId.GetHashCode();
      if (HasTournamentGameId) hash ^= TournamentGameId.GetHashCode();
      if (HasDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (HasHltvDelay) hash ^= HltvDelay.GetHashCode();
      if (teamGood_ != null) hash ^= TeamGood.GetHashCode();
      if (teamBad_ != null) hash ^= TeamBad.GetHashCode();
      if (HasRoshanRespawnTimer) hash ^= RoshanRespawnTimer.GetHashCode();
      if (HasLeagueId) hash ^= LeagueId.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTournamentId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TournamentId);
      }
      if (HasTournamentGameId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TournamentGameId);
      }
      if (HasDuration) {
        output.WriteRawTag(29);
        output.WriteFloat(Duration);
      }
      if (HasHltvDelay) {
        output.WriteRawTag(32);
        output.WriteInt32(HltvDelay);
      }
      if (teamGood_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TeamGood);
      }
      if (teamBad_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TeamBad);
      }
      if (HasRoshanRespawnTimer) {
        output.WriteRawTag(56);
        output.WriteUInt32(RoshanRespawnTimer);
      }
      if (HasLeagueId) {
        output.WriteRawTag(64);
        output.WriteUInt32(LeagueId);
      }
      if (HasMatchId) {
        output.WriteRawTag(72);
        output.WriteUInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTournamentId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TournamentId);
      }
      if (HasTournamentGameId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TournamentGameId);
      }
      if (HasDuration) {
        output.WriteRawTag(29);
        output.WriteFloat(Duration);
      }
      if (HasHltvDelay) {
        output.WriteRawTag(32);
        output.WriteInt32(HltvDelay);
      }
      if (teamGood_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TeamGood);
      }
      if (teamBad_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TeamBad);
      }
      if (HasRoshanRespawnTimer) {
        output.WriteRawTag(56);
        output.WriteUInt32(RoshanRespawnTimer);
      }
      if (HasLeagueId) {
        output.WriteRawTag(64);
        output.WriteUInt32(LeagueId);
      }
      if (HasMatchId) {
        output.WriteRawTag(72);
        output.WriteUInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTournamentId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TournamentId);
      }
      if (HasTournamentGameId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TournamentGameId);
      }
      if (HasDuration) {
        size += 1 + 4;
      }
      if (HasHltvDelay) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HltvDelay);
      }
      if (teamGood_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamGood);
      }
      if (teamBad_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamBad);
      }
      if (HasRoshanRespawnTimer) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoshanRespawnTimer);
      }
      if (HasLeagueId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
      }
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTALiveScoreboardUpdate other) {
      if (other == null) {
        return;
      }
      if (other.HasTournamentId) {
        TournamentId = other.TournamentId;
      }
      if (other.HasTournamentGameId) {
        TournamentGameId = other.TournamentGameId;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasHltvDelay) {
        HltvDelay = other.HltvDelay;
      }
      if (other.teamGood_ != null) {
        if (teamGood_ == null) {
          TeamGood = new global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team();
        }
        TeamGood.MergeFrom(other.TeamGood);
      }
      if (other.teamBad_ != null) {
        if (teamBad_ == null) {
          TeamBad = new global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team();
        }
        TeamBad.MergeFrom(other.TeamBad);
      }
      if (other.HasRoshanRespawnTimer) {
        RoshanRespawnTimer = other.RoshanRespawnTimer;
      }
      if (other.HasLeagueId) {
        LeagueId = other.LeagueId;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TournamentId = input.ReadUInt32();
            break;
          }
          case 16: {
            TournamentGameId = input.ReadUInt32();
            break;
          }
          case 29: {
            Duration = input.ReadFloat();
            break;
          }
          case 32: {
            HltvDelay = input.ReadInt32();
            break;
          }
          case 42: {
            if (teamGood_ == null) {
              TeamGood = new global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team();
            }
            input.ReadMessage(TeamGood);
            break;
          }
          case 50: {
            if (teamBad_ == null) {
              TeamBad = new global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team();
            }
            input.ReadMessage(TeamBad);
            break;
          }
          case 56: {
            RoshanRespawnTimer = input.ReadUInt32();
            break;
          }
          case 64: {
            LeagueId = input.ReadUInt32();
            break;
          }
          case 72: {
            MatchId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TournamentId = input.ReadUInt32();
            break;
          }
          case 16: {
            TournamentGameId = input.ReadUInt32();
            break;
          }
          case 29: {
            Duration = input.ReadFloat();
            break;
          }
          case 32: {
            HltvDelay = input.ReadInt32();
            break;
          }
          case 42: {
            if (teamGood_ == null) {
              TeamGood = new global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team();
            }
            input.ReadMessage(TeamGood);
            break;
          }
          case 50: {
            if (teamBad_ == null) {
              TeamBad = new global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team();
            }
            input.ReadMessage(TeamBad);
            break;
          }
          case 56: {
            RoshanRespawnTimer = input.ReadUInt32();
            break;
          }
          case 64: {
            LeagueId = input.ReadUInt32();
            break;
          }
          case 72: {
            MatchId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTALiveScoreboardUpdate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Team : pb::IMessage<Team>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Team> _parser = new pb::MessageParser<Team>(() => new Team());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Team> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Team() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Team(Team other) : this() {
          _hasBits0 = other._hasBits0;
          players_ = other.players_.Clone();
          score_ = other.score_;
          towerState_ = other.towerState_;
          barracksState_ = other.barracksState_;
          heroPicks_ = other.heroPicks_.Clone();
          heroBans_ = other.heroBans_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Team Clone() {
          return new Team(this);
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player> _repeated_players_codec
            = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player> Players {
          get { return players_; }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 2;
        private readonly static uint ScoreDefaultValue = 0;

        private uint score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Score {
          get { if ((_hasBits0 & 1) != 0) { return score_; } else { return ScoreDefaultValue; } }
          set {
            _hasBits0 |= 1;
            score_ = value;
          }
        }
        /// <summary>Gets whether the "score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScore {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScore() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "tower_state" field.</summary>
        public const int TowerStateFieldNumber = 3;
        private readonly static uint TowerStateDefaultValue = 0;

        private uint towerState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TowerState {
          get { if ((_hasBits0 & 2) != 0) { return towerState_; } else { return TowerStateDefaultValue; } }
          set {
            _hasBits0 |= 2;
            towerState_ = value;
          }
        }
        /// <summary>Gets whether the "tower_state" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTowerState {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "tower_state" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTowerState() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "barracks_state" field.</summary>
        public const int BarracksStateFieldNumber = 4;
        private readonly static uint BarracksStateDefaultValue = 0;

        private uint barracksState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BarracksState {
          get { if ((_hasBits0 & 4) != 0) { return barracksState_; } else { return BarracksStateDefaultValue; } }
          set {
            _hasBits0 |= 4;
            barracksState_ = value;
          }
        }
        /// <summary>Gets whether the "barracks_state" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBarracksState {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "barracks_state" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBarracksState() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "hero_picks" field.</summary>
        public const int HeroPicksFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_heroPicks_codec
            = pb::FieldCodec.ForInt32(40);
        private readonly pbc::RepeatedField<int> heroPicks_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> HeroPicks {
          get { return heroPicks_; }
        }

        /// <summary>Field number for the "hero_bans" field.</summary>
        public const int HeroBansFieldNumber = 6;
        private static readonly pb::FieldCodec<int> _repeated_heroBans_codec
            = pb::FieldCodec.ForInt32(48);
        private readonly pbc::RepeatedField<int> heroBans_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> HeroBans {
          get { return heroBans_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Team);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Team other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!players_.Equals(other.players_)) return false;
          if (Score != other.Score) return false;
          if (TowerState != other.TowerState) return false;
          if (BarracksState != other.BarracksState) return false;
          if(!heroPicks_.Equals(other.heroPicks_)) return false;
          if(!heroBans_.Equals(other.heroBans_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= players_.GetHashCode();
          if (HasScore) hash ^= Score.GetHashCode();
          if (HasTowerState) hash ^= TowerState.GetHashCode();
          if (HasBarracksState) hash ^= BarracksState.GetHashCode();
          hash ^= heroPicks_.GetHashCode();
          hash ^= heroBans_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          players_.WriteTo(output, _repeated_players_codec);
          if (HasScore) {
            output.WriteRawTag(16);
            output.WriteUInt32(Score);
          }
          if (HasTowerState) {
            output.WriteRawTag(24);
            output.WriteUInt32(TowerState);
          }
          if (HasBarracksState) {
            output.WriteRawTag(32);
            output.WriteUInt32(BarracksState);
          }
          heroPicks_.WriteTo(output, _repeated_heroPicks_codec);
          heroBans_.WriteTo(output, _repeated_heroBans_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          players_.WriteTo(ref output, _repeated_players_codec);
          if (HasScore) {
            output.WriteRawTag(16);
            output.WriteUInt32(Score);
          }
          if (HasTowerState) {
            output.WriteRawTag(24);
            output.WriteUInt32(TowerState);
          }
          if (HasBarracksState) {
            output.WriteRawTag(32);
            output.WriteUInt32(BarracksState);
          }
          heroPicks_.WriteTo(ref output, _repeated_heroPicks_codec);
          heroBans_.WriteTo(ref output, _repeated_heroBans_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += players_.CalculateSize(_repeated_players_codec);
          if (HasScore) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
          }
          if (HasTowerState) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TowerState);
          }
          if (HasBarracksState) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BarracksState);
          }
          size += heroPicks_.CalculateSize(_repeated_heroPicks_codec);
          size += heroBans_.CalculateSize(_repeated_heroBans_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Team other) {
          if (other == null) {
            return;
          }
          players_.Add(other.players_);
          if (other.HasScore) {
            Score = other.Score;
          }
          if (other.HasTowerState) {
            TowerState = other.TowerState;
          }
          if (other.HasBarracksState) {
            BarracksState = other.BarracksState;
          }
          heroPicks_.Add(other.heroPicks_);
          heroBans_.Add(other.heroBans_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                players_.AddEntriesFrom(input, _repeated_players_codec);
                break;
              }
              case 16: {
                Score = input.ReadUInt32();
                break;
              }
              case 24: {
                TowerState = input.ReadUInt32();
                break;
              }
              case 32: {
                BarracksState = input.ReadUInt32();
                break;
              }
              case 42:
              case 40: {
                heroPicks_.AddEntriesFrom(input, _repeated_heroPicks_codec);
                break;
              }
              case 50:
              case 48: {
                heroBans_.AddEntriesFrom(input, _repeated_heroBans_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                players_.AddEntriesFrom(ref input, _repeated_players_codec);
                break;
              }
              case 16: {
                Score = input.ReadUInt32();
                break;
              }
              case 24: {
                TowerState = input.ReadUInt32();
                break;
              }
              case 32: {
                BarracksState = input.ReadUInt32();
                break;
              }
              case 42:
              case 40: {
                heroPicks_.AddEntriesFrom(ref input, _repeated_heroPicks_codec);
                break;
              }
              case 50:
              case 48: {
                heroBans_.AddEntriesFrom(ref input, _repeated_heroBans_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Team message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Player : pb::IMessage<Player>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Player> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Player() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Player(Player other) : this() {
              _hasBits0 = other._hasBits0;
              playerSlot_ = other.playerSlot_;
              playerName_ = other.playerName_;
              heroName_ = other.heroName_;
              heroId_ = other.heroId_;
              kills_ = other.kills_;
              deaths_ = other.deaths_;
              assists_ = other.assists_;
              lastHits_ = other.lastHits_;
              denies_ = other.denies_;
              gold_ = other.gold_;
              level_ = other.level_;
              goldPerMin_ = other.goldPerMin_;
              xpPerMin_ = other.xpPerMin_;
              ultimateState_ = other.ultimateState_;
              ultimateCooldown_ = other.ultimateCooldown_;
              item0_ = other.item0_;
              item1_ = other.item1_;
              item2_ = other.item2_;
              item3_ = other.item3_;
              item4_ = other.item4_;
              item5_ = other.item5_;
              respawnTimer_ = other.respawnTimer_;
              accountId_ = other.accountId_;
              positionX_ = other.positionX_;
              positionY_ = other.positionY_;
              netWorth_ = other.netWorth_;
              abilities_ = other.abilities_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Player Clone() {
              return new Player(this);
            }

            /// <summary>Field number for the "player_slot" field.</summary>
            public const int PlayerSlotFieldNumber = 1;
            private readonly static uint PlayerSlotDefaultValue = 0;

            private uint playerSlot_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PlayerSlot {
              get { if ((_hasBits0 & 1) != 0) { return playerSlot_; } else { return PlayerSlotDefaultValue; } }
              set {
                _hasBits0 |= 1;
                playerSlot_ = value;
              }
            }
            /// <summary>Gets whether the "player_slot" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPlayerSlot {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "player_slot" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPlayerSlot() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "player_name" field.</summary>
            public const int PlayerNameFieldNumber = 2;
            private readonly static string PlayerNameDefaultValue = "";

            private string playerName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string PlayerName {
              get { return playerName_ ?? PlayerNameDefaultValue; }
              set {
                playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "player_name" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPlayerName {
              get { return playerName_ != null; }
            }
            /// <summary>Clears the value of the "player_name" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPlayerName() {
              playerName_ = null;
            }

            /// <summary>Field number for the "hero_name" field.</summary>
            public const int HeroNameFieldNumber = 3;
            private readonly static string HeroNameDefaultValue = "";

            private string heroName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string HeroName {
              get { return heroName_ ?? HeroNameDefaultValue; }
              set {
                heroName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "hero_name" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroName {
              get { return heroName_ != null; }
            }
            /// <summary>Clears the value of the "hero_name" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroName() {
              heroName_ = null;
            }

            /// <summary>Field number for the "hero_id" field.</summary>
            public const int HeroIdFieldNumber = 4;
            private readonly static int HeroIdDefaultValue = 0;

            private int heroId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int HeroId {
              get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
              set {
                _hasBits0 |= 2;
                heroId_ = value;
              }
            }
            /// <summary>Gets whether the "hero_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroId {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "hero_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroId() {
              _hasBits0 &= ~2;
            }

            /// <summary>Field number for the "kills" field.</summary>
            public const int KillsFieldNumber = 5;
            private readonly static uint KillsDefaultValue = 0;

            private uint kills_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Kills {
              get { if ((_hasBits0 & 4) != 0) { return kills_; } else { return KillsDefaultValue; } }
              set {
                _hasBits0 |= 4;
                kills_ = value;
              }
            }
            /// <summary>Gets whether the "kills" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasKills {
              get { return (_hasBits0 & 4) != 0; }
            }
            /// <summary>Clears the value of the "kills" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearKills() {
              _hasBits0 &= ~4;
            }

            /// <summary>Field number for the "deaths" field.</summary>
            public const int DeathsFieldNumber = 6;
            private readonly static uint DeathsDefaultValue = 0;

            private uint deaths_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Deaths {
              get { if ((_hasBits0 & 8) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
              set {
                _hasBits0 |= 8;
                deaths_ = value;
              }
            }
            /// <summary>Gets whether the "deaths" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDeaths {
              get { return (_hasBits0 & 8) != 0; }
            }
            /// <summary>Clears the value of the "deaths" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDeaths() {
              _hasBits0 &= ~8;
            }

            /// <summary>Field number for the "assists" field.</summary>
            public const int AssistsFieldNumber = 7;
            private readonly static uint AssistsDefaultValue = 0;

            private uint assists_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Assists {
              get { if ((_hasBits0 & 16) != 0) { return assists_; } else { return AssistsDefaultValue; } }
              set {
                _hasBits0 |= 16;
                assists_ = value;
              }
            }
            /// <summary>Gets whether the "assists" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasAssists {
              get { return (_hasBits0 & 16) != 0; }
            }
            /// <summary>Clears the value of the "assists" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearAssists() {
              _hasBits0 &= ~16;
            }

            /// <summary>Field number for the "last_hits" field.</summary>
            public const int LastHitsFieldNumber = 8;
            private readonly static uint LastHitsDefaultValue = 0;

            private uint lastHits_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint LastHits {
              get { if ((_hasBits0 & 32) != 0) { return lastHits_; } else { return LastHitsDefaultValue; } }
              set {
                _hasBits0 |= 32;
                lastHits_ = value;
              }
            }
            /// <summary>Gets whether the "last_hits" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLastHits {
              get { return (_hasBits0 & 32) != 0; }
            }
            /// <summary>Clears the value of the "last_hits" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLastHits() {
              _hasBits0 &= ~32;
            }

            /// <summary>Field number for the "denies" field.</summary>
            public const int DeniesFieldNumber = 9;
            private readonly static uint DeniesDefaultValue = 0;

            private uint denies_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Denies {
              get { if ((_hasBits0 & 64) != 0) { return denies_; } else { return DeniesDefaultValue; } }
              set {
                _hasBits0 |= 64;
                denies_ = value;
              }
            }
            /// <summary>Gets whether the "denies" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDenies {
              get { return (_hasBits0 & 64) != 0; }
            }
            /// <summary>Clears the value of the "denies" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDenies() {
              _hasBits0 &= ~64;
            }

            /// <summary>Field number for the "gold" field.</summary>
            public const int GoldFieldNumber = 10;
            private readonly static uint GoldDefaultValue = 0;

            private uint gold_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Gold {
              get { if ((_hasBits0 & 128) != 0) { return gold_; } else { return GoldDefaultValue; } }
              set {
                _hasBits0 |= 128;
                gold_ = value;
              }
            }
            /// <summary>Gets whether the "gold" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasGold {
              get { return (_hasBits0 & 128) != 0; }
            }
            /// <summary>Clears the value of the "gold" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearGold() {
              _hasBits0 &= ~128;
            }

            /// <summary>Field number for the "level" field.</summary>
            public const int LevelFieldNumber = 11;
            private readonly static uint LevelDefaultValue = 0;

            private uint level_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Level {
              get { if ((_hasBits0 & 256) != 0) { return level_; } else { return LevelDefaultValue; } }
              set {
                _hasBits0 |= 256;
                level_ = value;
              }
            }
            /// <summary>Gets whether the "level" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLevel {
              get { return (_hasBits0 & 256) != 0; }
            }
            /// <summary>Clears the value of the "level" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLevel() {
              _hasBits0 &= ~256;
            }

            /// <summary>Field number for the "gold_per_min" field.</summary>
            public const int GoldPerMinFieldNumber = 12;
            private readonly static float GoldPerMinDefaultValue = 0F;

            private float goldPerMin_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float GoldPerMin {
              get { if ((_hasBits0 & 512) != 0) { return goldPerMin_; } else { return GoldPerMinDefaultValue; } }
              set {
                _hasBits0 |= 512;
                goldPerMin_ = value;
              }
            }
            /// <summary>Gets whether the "gold_per_min" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasGoldPerMin {
              get { return (_hasBits0 & 512) != 0; }
            }
            /// <summary>Clears the value of the "gold_per_min" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearGoldPerMin() {
              _hasBits0 &= ~512;
            }

            /// <summary>Field number for the "xp_per_min" field.</summary>
            public const int XpPerMinFieldNumber = 13;
            private readonly static float XpPerMinDefaultValue = 0F;

            private float xpPerMin_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float XpPerMin {
              get { if ((_hasBits0 & 1024) != 0) { return xpPerMin_; } else { return XpPerMinDefaultValue; } }
              set {
                _hasBits0 |= 1024;
                xpPerMin_ = value;
              }
            }
            /// <summary>Gets whether the "xp_per_min" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasXpPerMin {
              get { return (_hasBits0 & 1024) != 0; }
            }
            /// <summary>Clears the value of the "xp_per_min" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearXpPerMin() {
              _hasBits0 &= ~1024;
            }

            /// <summary>Field number for the "ultimate_state" field.</summary>
            public const int UltimateStateFieldNumber = 14;
            private readonly static global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.DOTAUltimateState UltimateStateDefaultValue = global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.DOTAUltimateState.KEdotaultimateStateNotLearned;

            private global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.DOTAUltimateState ultimateState_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.DOTAUltimateState UltimateState {
              get { if ((_hasBits0 & 2048) != 0) { return ultimateState_; } else { return UltimateStateDefaultValue; } }
              set {
                _hasBits0 |= 2048;
                ultimateState_ = value;
              }
            }
            /// <summary>Gets whether the "ultimate_state" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasUltimateState {
              get { return (_hasBits0 & 2048) != 0; }
            }
            /// <summary>Clears the value of the "ultimate_state" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearUltimateState() {
              _hasBits0 &= ~2048;
            }

            /// <summary>Field number for the "ultimate_cooldown" field.</summary>
            public const int UltimateCooldownFieldNumber = 15;
            private readonly static float UltimateCooldownDefaultValue = 0F;

            private float ultimateCooldown_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float UltimateCooldown {
              get { if ((_hasBits0 & 4096) != 0) { return ultimateCooldown_; } else { return UltimateCooldownDefaultValue; } }
              set {
                _hasBits0 |= 4096;
                ultimateCooldown_ = value;
              }
            }
            /// <summary>Gets whether the "ultimate_cooldown" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasUltimateCooldown {
              get { return (_hasBits0 & 4096) != 0; }
            }
            /// <summary>Clears the value of the "ultimate_cooldown" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearUltimateCooldown() {
              _hasBits0 &= ~4096;
            }

            /// <summary>Field number for the "item0" field.</summary>
            public const int Item0FieldNumber = 16;
            private readonly static int Item0DefaultValue = -1;

            private int item0_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Item0 {
              get { if ((_hasBits0 & 8192) != 0) { return item0_; } else { return Item0DefaultValue; } }
              set {
                _hasBits0 |= 8192;
                item0_ = value;
              }
            }
            /// <summary>Gets whether the "item0" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasItem0 {
              get { return (_hasBits0 & 8192) != 0; }
            }
            /// <summary>Clears the value of the "item0" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearItem0() {
              _hasBits0 &= ~8192;
            }

            /// <summary>Field number for the "item1" field.</summary>
            public const int Item1FieldNumber = 17;
            private readonly static int Item1DefaultValue = -1;

            private int item1_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Item1 {
              get { if ((_hasBits0 & 16384) != 0) { return item1_; } else { return Item1DefaultValue; } }
              set {
                _hasBits0 |= 16384;
                item1_ = value;
              }
            }
            /// <summary>Gets whether the "item1" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasItem1 {
              get { return (_hasBits0 & 16384) != 0; }
            }
            /// <summary>Clears the value of the "item1" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearItem1() {
              _hasBits0 &= ~16384;
            }

            /// <summary>Field number for the "item2" field.</summary>
            public const int Item2FieldNumber = 18;
            private readonly static int Item2DefaultValue = -1;

            private int item2_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Item2 {
              get { if ((_hasBits0 & 32768) != 0) { return item2_; } else { return Item2DefaultValue; } }
              set {
                _hasBits0 |= 32768;
                item2_ = value;
              }
            }
            /// <summary>Gets whether the "item2" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasItem2 {
              get { return (_hasBits0 & 32768) != 0; }
            }
            /// <summary>Clears the value of the "item2" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearItem2() {
              _hasBits0 &= ~32768;
            }

            /// <summary>Field number for the "item3" field.</summary>
            public const int Item3FieldNumber = 19;
            private readonly static int Item3DefaultValue = -1;

            private int item3_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Item3 {
              get { if ((_hasBits0 & 65536) != 0) { return item3_; } else { return Item3DefaultValue; } }
              set {
                _hasBits0 |= 65536;
                item3_ = value;
              }
            }
            /// <summary>Gets whether the "item3" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasItem3 {
              get { return (_hasBits0 & 65536) != 0; }
            }
            /// <summary>Clears the value of the "item3" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearItem3() {
              _hasBits0 &= ~65536;
            }

            /// <summary>Field number for the "item4" field.</summary>
            public const int Item4FieldNumber = 20;
            private readonly static int Item4DefaultValue = -1;

            private int item4_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Item4 {
              get { if ((_hasBits0 & 131072) != 0) { return item4_; } else { return Item4DefaultValue; } }
              set {
                _hasBits0 |= 131072;
                item4_ = value;
              }
            }
            /// <summary>Gets whether the "item4" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasItem4 {
              get { return (_hasBits0 & 131072) != 0; }
            }
            /// <summary>Clears the value of the "item4" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearItem4() {
              _hasBits0 &= ~131072;
            }

            /// <summary>Field number for the "item5" field.</summary>
            public const int Item5FieldNumber = 21;
            private readonly static int Item5DefaultValue = -1;

            private int item5_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Item5 {
              get { if ((_hasBits0 & 262144) != 0) { return item5_; } else { return Item5DefaultValue; } }
              set {
                _hasBits0 |= 262144;
                item5_ = value;
              }
            }
            /// <summary>Gets whether the "item5" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasItem5 {
              get { return (_hasBits0 & 262144) != 0; }
            }
            /// <summary>Clears the value of the "item5" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearItem5() {
              _hasBits0 &= ~262144;
            }

            /// <summary>Field number for the "respawn_timer" field.</summary>
            public const int RespawnTimerFieldNumber = 22;
            private readonly static uint RespawnTimerDefaultValue = 0;

            private uint respawnTimer_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint RespawnTimer {
              get { if ((_hasBits0 & 524288) != 0) { return respawnTimer_; } else { return RespawnTimerDefaultValue; } }
              set {
                _hasBits0 |= 524288;
                respawnTimer_ = value;
              }
            }
            /// <summary>Gets whether the "respawn_timer" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasRespawnTimer {
              get { return (_hasBits0 & 524288) != 0; }
            }
            /// <summary>Clears the value of the "respawn_timer" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearRespawnTimer() {
              _hasBits0 &= ~524288;
            }

            /// <summary>Field number for the "account_id" field.</summary>
            public const int AccountIdFieldNumber = 23;
            private readonly static uint AccountIdDefaultValue = 0;

            private uint accountId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AccountId {
              get { if ((_hasBits0 & 1048576) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
              set {
                _hasBits0 |= 1048576;
                accountId_ = value;
              }
            }
            /// <summary>Gets whether the "account_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasAccountId {
              get { return (_hasBits0 & 1048576) != 0; }
            }
            /// <summary>Clears the value of the "account_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearAccountId() {
              _hasBits0 &= ~1048576;
            }

            /// <summary>Field number for the "position_x" field.</summary>
            public const int PositionXFieldNumber = 24;
            private readonly static float PositionXDefaultValue = 0F;

            private float positionX_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float PositionX {
              get { if ((_hasBits0 & 2097152) != 0) { return positionX_; } else { return PositionXDefaultValue; } }
              set {
                _hasBits0 |= 2097152;
                positionX_ = value;
              }
            }
            /// <summary>Gets whether the "position_x" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPositionX {
              get { return (_hasBits0 & 2097152) != 0; }
            }
            /// <summary>Clears the value of the "position_x" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPositionX() {
              _hasBits0 &= ~2097152;
            }

            /// <summary>Field number for the "position_y" field.</summary>
            public const int PositionYFieldNumber = 25;
            private readonly static float PositionYDefaultValue = 0F;

            private float positionY_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float PositionY {
              get { if ((_hasBits0 & 4194304) != 0) { return positionY_; } else { return PositionYDefaultValue; } }
              set {
                _hasBits0 |= 4194304;
                positionY_ = value;
              }
            }
            /// <summary>Gets whether the "position_y" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPositionY {
              get { return (_hasBits0 & 4194304) != 0; }
            }
            /// <summary>Clears the value of the "position_y" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPositionY() {
              _hasBits0 &= ~4194304;
            }

            /// <summary>Field number for the "net_worth" field.</summary>
            public const int NetWorthFieldNumber = 26;
            private readonly static uint NetWorthDefaultValue = 0;

            private uint netWorth_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint NetWorth {
              get { if ((_hasBits0 & 8388608) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
              set {
                _hasBits0 |= 8388608;
                netWorth_ = value;
              }
            }
            /// <summary>Gets whether the "net_worth" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasNetWorth {
              get { return (_hasBits0 & 8388608) != 0; }
            }
            /// <summary>Clears the value of the "net_worth" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearNetWorth() {
              _hasBits0 &= ~8388608;
            }

            /// <summary>Field number for the "abilities" field.</summary>
            public const int AbilitiesFieldNumber = 27;
            private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.HeroAbility> _repeated_abilities_codec
                = pb::FieldCodec.ForMessage(218, global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.HeroAbility.Parser);
            private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.HeroAbility> abilities_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.HeroAbility>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.HeroAbility> Abilities {
              get { return abilities_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Player);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Player other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (PlayerSlot != other.PlayerSlot) return false;
              if (PlayerName != other.PlayerName) return false;
              if (HeroName != other.HeroName) return false;
              if (HeroId != other.HeroId) return false;
              if (Kills != other.Kills) return false;
              if (Deaths != other.Deaths) return false;
              if (Assists != other.Assists) return false;
              if (LastHits != other.LastHits) return false;
              if (Denies != other.Denies) return false;
              if (Gold != other.Gold) return false;
              if (Level != other.Level) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GoldPerMin, other.GoldPerMin)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XpPerMin, other.XpPerMin)) return false;
              if (UltimateState != other.UltimateState) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UltimateCooldown, other.UltimateCooldown)) return false;
              if (Item0 != other.Item0) return false;
              if (Item1 != other.Item1) return false;
              if (Item2 != other.Item2) return false;
              if (Item3 != other.Item3) return false;
              if (Item4 != other.Item4) return false;
              if (Item5 != other.Item5) return false;
              if (RespawnTimer != other.RespawnTimer) return false;
              if (AccountId != other.AccountId) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
              if (NetWorth != other.NetWorth) return false;
              if(!abilities_.Equals(other.abilities_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasPlayerSlot) hash ^= PlayerSlot.GetHashCode();
              if (HasPlayerName) hash ^= PlayerName.GetHashCode();
              if (HasHeroName) hash ^= HeroName.GetHashCode();
              if (HasHeroId) hash ^= HeroId.GetHashCode();
              if (HasKills) hash ^= Kills.GetHashCode();
              if (HasDeaths) hash ^= Deaths.GetHashCode();
              if (HasAssists) hash ^= Assists.GetHashCode();
              if (HasLastHits) hash ^= LastHits.GetHashCode();
              if (HasDenies) hash ^= Denies.GetHashCode();
              if (HasGold) hash ^= Gold.GetHashCode();
              if (HasLevel) hash ^= Level.GetHashCode();
              if (HasGoldPerMin) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GoldPerMin);
              if (HasXpPerMin) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XpPerMin);
              if (HasUltimateState) hash ^= UltimateState.GetHashCode();
              if (HasUltimateCooldown) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UltimateCooldown);
              if (HasItem0) hash ^= Item0.GetHashCode();
              if (HasItem1) hash ^= Item1.GetHashCode();
              if (HasItem2) hash ^= Item2.GetHashCode();
              if (HasItem3) hash ^= Item3.GetHashCode();
              if (HasItem4) hash ^= Item4.GetHashCode();
              if (HasItem5) hash ^= Item5.GetHashCode();
              if (HasRespawnTimer) hash ^= RespawnTimer.GetHashCode();
              if (HasAccountId) hash ^= AccountId.GetHashCode();
              if (HasPositionX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
              if (HasPositionY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
              if (HasNetWorth) hash ^= NetWorth.GetHashCode();
              hash ^= abilities_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasPlayerSlot) {
                output.WriteRawTag(8);
                output.WriteUInt32(PlayerSlot);
              }
              if (HasPlayerName) {
                output.WriteRawTag(18);
                output.WriteString(PlayerName);
              }
              if (HasHeroName) {
                output.WriteRawTag(26);
                output.WriteString(HeroName);
              }
              if (HasHeroId) {
                output.WriteRawTag(32);
                output.WriteInt32(HeroId);
              }
              if (HasKills) {
                output.WriteRawTag(40);
                output.WriteUInt32(Kills);
              }
              if (HasDeaths) {
                output.WriteRawTag(48);
                output.WriteUInt32(Deaths);
              }
              if (HasAssists) {
                output.WriteRawTag(56);
                output.WriteUInt32(Assists);
              }
              if (HasLastHits) {
                output.WriteRawTag(64);
                output.WriteUInt32(LastHits);
              }
              if (HasDenies) {
                output.WriteRawTag(72);
                output.WriteUInt32(Denies);
              }
              if (HasGold) {
                output.WriteRawTag(80);
                output.WriteUInt32(Gold);
              }
              if (HasLevel) {
                output.WriteRawTag(88);
                output.WriteUInt32(Level);
              }
              if (HasGoldPerMin) {
                output.WriteRawTag(101);
                output.WriteFloat(GoldPerMin);
              }
              if (HasXpPerMin) {
                output.WriteRawTag(109);
                output.WriteFloat(XpPerMin);
              }
              if (HasUltimateState) {
                output.WriteRawTag(112);
                output.WriteEnum((int) UltimateState);
              }
              if (HasUltimateCooldown) {
                output.WriteRawTag(125);
                output.WriteFloat(UltimateCooldown);
              }
              if (HasItem0) {
                output.WriteRawTag(128, 1);
                output.WriteInt32(Item0);
              }
              if (HasItem1) {
                output.WriteRawTag(136, 1);
                output.WriteInt32(Item1);
              }
              if (HasItem2) {
                output.WriteRawTag(144, 1);
                output.WriteInt32(Item2);
              }
              if (HasItem3) {
                output.WriteRawTag(152, 1);
                output.WriteInt32(Item3);
              }
              if (HasItem4) {
                output.WriteRawTag(160, 1);
                output.WriteInt32(Item4);
              }
              if (HasItem5) {
                output.WriteRawTag(168, 1);
                output.WriteInt32(Item5);
              }
              if (HasRespawnTimer) {
                output.WriteRawTag(176, 1);
                output.WriteUInt32(RespawnTimer);
              }
              if (HasAccountId) {
                output.WriteRawTag(184, 1);
                output.WriteUInt32(AccountId);
              }
              if (HasPositionX) {
                output.WriteRawTag(197, 1);
                output.WriteFloat(PositionX);
              }
              if (HasPositionY) {
                output.WriteRawTag(205, 1);
                output.WriteFloat(PositionY);
              }
              if (HasNetWorth) {
                output.WriteRawTag(208, 1);
                output.WriteUInt32(NetWorth);
              }
              abilities_.WriteTo(output, _repeated_abilities_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasPlayerSlot) {
                output.WriteRawTag(8);
                output.WriteUInt32(PlayerSlot);
              }
              if (HasPlayerName) {
                output.WriteRawTag(18);
                output.WriteString(PlayerName);
              }
              if (HasHeroName) {
                output.WriteRawTag(26);
                output.WriteString(HeroName);
              }
              if (HasHeroId) {
                output.WriteRawTag(32);
                output.WriteInt32(HeroId);
              }
              if (HasKills) {
                output.WriteRawTag(40);
                output.WriteUInt32(Kills);
              }
              if (HasDeaths) {
                output.WriteRawTag(48);
                output.WriteUInt32(Deaths);
              }
              if (HasAssists) {
                output.WriteRawTag(56);
                output.WriteUInt32(Assists);
              }
              if (HasLastHits) {
                output.WriteRawTag(64);
                output.WriteUInt32(LastHits);
              }
              if (HasDenies) {
                output.WriteRawTag(72);
                output.WriteUInt32(Denies);
              }
              if (HasGold) {
                output.WriteRawTag(80);
                output.WriteUInt32(Gold);
              }
              if (HasLevel) {
                output.WriteRawTag(88);
                output.WriteUInt32(Level);
              }
              if (HasGoldPerMin) {
                output.WriteRawTag(101);
                output.WriteFloat(GoldPerMin);
              }
              if (HasXpPerMin) {
                output.WriteRawTag(109);
                output.WriteFloat(XpPerMin);
              }
              if (HasUltimateState) {
                output.WriteRawTag(112);
                output.WriteEnum((int) UltimateState);
              }
              if (HasUltimateCooldown) {
                output.WriteRawTag(125);
                output.WriteFloat(UltimateCooldown);
              }
              if (HasItem0) {
                output.WriteRawTag(128, 1);
                output.WriteInt32(Item0);
              }
              if (HasItem1) {
                output.WriteRawTag(136, 1);
                output.WriteInt32(Item1);
              }
              if (HasItem2) {
                output.WriteRawTag(144, 1);
                output.WriteInt32(Item2);
              }
              if (HasItem3) {
                output.WriteRawTag(152, 1);
                output.WriteInt32(Item3);
              }
              if (HasItem4) {
                output.WriteRawTag(160, 1);
                output.WriteInt32(Item4);
              }
              if (HasItem5) {
                output.WriteRawTag(168, 1);
                output.WriteInt32(Item5);
              }
              if (HasRespawnTimer) {
                output.WriteRawTag(176, 1);
                output.WriteUInt32(RespawnTimer);
              }
              if (HasAccountId) {
                output.WriteRawTag(184, 1);
                output.WriteUInt32(AccountId);
              }
              if (HasPositionX) {
                output.WriteRawTag(197, 1);
                output.WriteFloat(PositionX);
              }
              if (HasPositionY) {
                output.WriteRawTag(205, 1);
                output.WriteFloat(PositionY);
              }
              if (HasNetWorth) {
                output.WriteRawTag(208, 1);
                output.WriteUInt32(NetWorth);
              }
              abilities_.WriteTo(ref output, _repeated_abilities_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasPlayerSlot) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
              }
              if (HasPlayerName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
              }
              if (HasHeroName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroName);
              }
              if (HasHeroId) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
              }
              if (HasKills) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
              }
              if (HasDeaths) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
              }
              if (HasAssists) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
              }
              if (HasLastHits) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
              }
              if (HasDenies) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Denies);
              }
              if (HasGold) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gold);
              }
              if (HasLevel) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
              }
              if (HasGoldPerMin) {
                size += 1 + 4;
              }
              if (HasXpPerMin) {
                size += 1 + 4;
              }
              if (HasUltimateState) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UltimateState);
              }
              if (HasUltimateCooldown) {
                size += 1 + 4;
              }
              if (HasItem0) {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item0);
              }
              if (HasItem1) {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item1);
              }
              if (HasItem2) {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item2);
              }
              if (HasItem3) {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item3);
              }
              if (HasItem4) {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item4);
              }
              if (HasItem5) {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item5);
              }
              if (HasRespawnTimer) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RespawnTimer);
              }
              if (HasAccountId) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
              }
              if (HasPositionX) {
                size += 2 + 4;
              }
              if (HasPositionY) {
                size += 2 + 4;
              }
              if (HasNetWorth) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
              }
              size += abilities_.CalculateSize(_repeated_abilities_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Player other) {
              if (other == null) {
                return;
              }
              if (other.HasPlayerSlot) {
                PlayerSlot = other.PlayerSlot;
              }
              if (other.HasPlayerName) {
                PlayerName = other.PlayerName;
              }
              if (other.HasHeroName) {
                HeroName = other.HeroName;
              }
              if (other.HasHeroId) {
                HeroId = other.HeroId;
              }
              if (other.HasKills) {
                Kills = other.Kills;
              }
              if (other.HasDeaths) {
                Deaths = other.Deaths;
              }
              if (other.HasAssists) {
                Assists = other.Assists;
              }
              if (other.HasLastHits) {
                LastHits = other.LastHits;
              }
              if (other.HasDenies) {
                Denies = other.Denies;
              }
              if (other.HasGold) {
                Gold = other.Gold;
              }
              if (other.HasLevel) {
                Level = other.Level;
              }
              if (other.HasGoldPerMin) {
                GoldPerMin = other.GoldPerMin;
              }
              if (other.HasXpPerMin) {
                XpPerMin = other.XpPerMin;
              }
              if (other.HasUltimateState) {
                UltimateState = other.UltimateState;
              }
              if (other.HasUltimateCooldown) {
                UltimateCooldown = other.UltimateCooldown;
              }
              if (other.HasItem0) {
                Item0 = other.Item0;
              }
              if (other.HasItem1) {
                Item1 = other.Item1;
              }
              if (other.HasItem2) {
                Item2 = other.Item2;
              }
              if (other.HasItem3) {
                Item3 = other.Item3;
              }
              if (other.HasItem4) {
                Item4 = other.Item4;
              }
              if (other.HasItem5) {
                Item5 = other.Item5;
              }
              if (other.HasRespawnTimer) {
                RespawnTimer = other.RespawnTimer;
              }
              if (other.HasAccountId) {
                AccountId = other.AccountId;
              }
              if (other.HasPositionX) {
                PositionX = other.PositionX;
              }
              if (other.HasPositionY) {
                PositionY = other.PositionY;
              }
              if (other.HasNetWorth) {
                NetWorth = other.NetWorth;
              }
              abilities_.Add(other.abilities_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    PlayerSlot = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    PlayerName = input.ReadString();
                    break;
                  }
                  case 26: {
                    HeroName = input.ReadString();
                    break;
                  }
                  case 32: {
                    HeroId = input.ReadInt32();
                    break;
                  }
                  case 40: {
                    Kills = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    Deaths = input.ReadUInt32();
                    break;
                  }
                  case 56: {
                    Assists = input.ReadUInt32();
                    break;
                  }
                  case 64: {
                    LastHits = input.ReadUInt32();
                    break;
                  }
                  case 72: {
                    Denies = input.ReadUInt32();
                    break;
                  }
                  case 80: {
                    Gold = input.ReadUInt32();
                    break;
                  }
                  case 88: {
                    Level = input.ReadUInt32();
                    break;
                  }
                  case 101: {
                    GoldPerMin = input.ReadFloat();
                    break;
                  }
                  case 109: {
                    XpPerMin = input.ReadFloat();
                    break;
                  }
                  case 112: {
                    UltimateState = (global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.DOTAUltimateState) input.ReadEnum();
                    break;
                  }
                  case 125: {
                    UltimateCooldown = input.ReadFloat();
                    break;
                  }
                  case 128: {
                    Item0 = input.ReadInt32();
                    break;
                  }
                  case 136: {
                    Item1 = input.ReadInt32();
                    break;
                  }
                  case 144: {
                    Item2 = input.ReadInt32();
                    break;
                  }
                  case 152: {
                    Item3 = input.ReadInt32();
                    break;
                  }
                  case 160: {
                    Item4 = input.ReadInt32();
                    break;
                  }
                  case 168: {
                    Item5 = input.ReadInt32();
                    break;
                  }
                  case 176: {
                    RespawnTimer = input.ReadUInt32();
                    break;
                  }
                  case 184: {
                    AccountId = input.ReadUInt32();
                    break;
                  }
                  case 197: {
                    PositionX = input.ReadFloat();
                    break;
                  }
                  case 205: {
                    PositionY = input.ReadFloat();
                    break;
                  }
                  case 208: {
                    NetWorth = input.ReadUInt32();
                    break;
                  }
                  case 218: {
                    abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    PlayerSlot = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    PlayerName = input.ReadString();
                    break;
                  }
                  case 26: {
                    HeroName = input.ReadString();
                    break;
                  }
                  case 32: {
                    HeroId = input.ReadInt32();
                    break;
                  }
                  case 40: {
                    Kills = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    Deaths = input.ReadUInt32();
                    break;
                  }
                  case 56: {
                    Assists = input.ReadUInt32();
                    break;
                  }
                  case 64: {
                    LastHits = input.ReadUInt32();
                    break;
                  }
                  case 72: {
                    Denies = input.ReadUInt32();
                    break;
                  }
                  case 80: {
                    Gold = input.ReadUInt32();
                    break;
                  }
                  case 88: {
                    Level = input.ReadUInt32();
                    break;
                  }
                  case 101: {
                    GoldPerMin = input.ReadFloat();
                    break;
                  }
                  case 109: {
                    XpPerMin = input.ReadFloat();
                    break;
                  }
                  case 112: {
                    UltimateState = (global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Types.DOTAUltimateState) input.ReadEnum();
                    break;
                  }
                  case 125: {
                    UltimateCooldown = input.ReadFloat();
                    break;
                  }
                  case 128: {
                    Item0 = input.ReadInt32();
                    break;
                  }
                  case 136: {
                    Item1 = input.ReadInt32();
                    break;
                  }
                  case 144: {
                    Item2 = input.ReadInt32();
                    break;
                  }
                  case 152: {
                    Item3 = input.ReadInt32();
                    break;
                  }
                  case 160: {
                    Item4 = input.ReadInt32();
                    break;
                  }
                  case 168: {
                    Item5 = input.ReadInt32();
                    break;
                  }
                  case 176: {
                    RespawnTimer = input.ReadUInt32();
                    break;
                  }
                  case 184: {
                    AccountId = input.ReadUInt32();
                    break;
                  }
                  case 197: {
                    PositionX = input.ReadFloat();
                    break;
                  }
                  case 205: {
                    PositionY = input.ReadFloat();
                    break;
                  }
                  case 208: {
                    NetWorth = input.ReadUInt32();
                    break;
                  }
                  case 218: {
                    abilities_.AddEntriesFrom(ref input, _repeated_abilities_codec);
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the Player message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum DOTAUltimateState {
                [pbr::OriginalName("k_EDOTAUltimateStateNotLearned")] KEdotaultimateStateNotLearned = 0,
                [pbr::OriginalName("k_EDOTAUltimateStateCooldown")] KEdotaultimateStateCooldown = 1,
                [pbr::OriginalName("k_EDOTAUltimateStateNeedsMana")] KEdotaultimateStateNeedsMana = 2,
                [pbr::OriginalName("k_EDOTAUltimateStateReady")] KEdotaultimateStateReady = 3,
              }

              public sealed partial class HeroAbility : pb::IMessage<HeroAbility>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<HeroAbility> _parser = new pb::MessageParser<HeroAbility>(() => new HeroAbility());
                private pb::UnknownFieldSet _unknownFields;
                private int _hasBits0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<HeroAbility> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Steam.Protos.Dota2.CMsgDOTALiveScoreboardUpdate.Types.Team.Types.Player.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public HeroAbility() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public HeroAbility(HeroAbility other) : this() {
                  _hasBits0 = other._hasBits0;
                  abilityId_ = other.abilityId_;
                  abilityLevel_ = other.abilityLevel_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public HeroAbility Clone() {
                  return new HeroAbility(this);
                }

                /// <summary>Field number for the "ability_id" field.</summary>
                public const int AbilityIdFieldNumber = 1;
                private readonly static int AbilityIdDefaultValue = -1;

                private int abilityId_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int AbilityId {
                  get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
                  set {
                    _hasBits0 |= 1;
                    abilityId_ = value;
                  }
                }
                /// <summary>Gets whether the "ability_id" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasAbilityId {
                  get { return (_hasBits0 & 1) != 0; }
                }
                /// <summary>Clears the value of the "ability_id" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearAbilityId() {
                  _hasBits0 &= ~1;
                }

                /// <summary>Field number for the "ability_level" field.</summary>
                public const int AbilityLevelFieldNumber = 2;
                private readonly static uint AbilityLevelDefaultValue = 0;

                private uint abilityLevel_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint AbilityLevel {
                  get { if ((_hasBits0 & 2) != 0) { return abilityLevel_; } else { return AbilityLevelDefaultValue; } }
                  set {
                    _hasBits0 |= 2;
                    abilityLevel_ = value;
                  }
                }
                /// <summary>Gets whether the "ability_level" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasAbilityLevel {
                  get { return (_hasBits0 & 2) != 0; }
                }
                /// <summary>Clears the value of the "ability_level" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearAbilityLevel() {
                  _hasBits0 &= ~2;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as HeroAbility);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(HeroAbility other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (AbilityId != other.AbilityId) return false;
                  if (AbilityLevel != other.AbilityLevel) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (HasAbilityId) hash ^= AbilityId.GetHashCode();
                  if (HasAbilityLevel) hash ^= AbilityLevel.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (HasAbilityId) {
                    output.WriteRawTag(8);
                    output.WriteInt32(AbilityId);
                  }
                  if (HasAbilityLevel) {
                    output.WriteRawTag(16);
                    output.WriteUInt32(AbilityLevel);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (HasAbilityId) {
                    output.WriteRawTag(8);
                    output.WriteInt32(AbilityId);
                  }
                  if (HasAbilityLevel) {
                    output.WriteRawTag(16);
                    output.WriteUInt32(AbilityLevel);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (HasAbilityId) {
                    size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
                  }
                  if (HasAbilityLevel) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityLevel);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(HeroAbility other) {
                  if (other == null) {
                    return;
                  }
                  if (other.HasAbilityId) {
                    AbilityId = other.AbilityId;
                  }
                  if (other.HasAbilityLevel) {
                    AbilityLevel = other.AbilityLevel;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        AbilityId = input.ReadInt32();
                        break;
                      }
                      case 16: {
                        AbilityLevel = input.ReadUInt32();
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 8: {
                        AbilityId = input.ReadInt32();
                        break;
                      }
                      case 16: {
                        AbilityLevel = input.ReadUInt32();
                        break;
                      }
                    }
                  }
                }
                #endif

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCRequestBatchPlayerResources : pb::IMessage<CMsgServerToGCRequestBatchPlayerResources>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCRequestBatchPlayerResources> _parser = new pb::MessageParser<CMsgServerToGCRequestBatchPlayerResources>(() => new CMsgServerToGCRequestBatchPlayerResources());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCRequestBatchPlayerResources> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestBatchPlayerResources() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestBatchPlayerResources(CMsgServerToGCRequestBatchPlayerResources other) : this() {
      _hasBits0 = other._hasBits0;
      accountIds_ = other.accountIds_.Clone();
      rankTypes_ = other.rankTypes_.Clone();
      lobbyType_ = other.lobbyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestBatchPlayerResources Clone() {
      return new CMsgServerToGCRequestBatchPlayerResources(this);
    }

    /// <summary>Field number for the "account_ids" field.</summary>
    public const int AccountIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_accountIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> accountIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AccountIds {
      get { return accountIds_; }
    }

    /// <summary>Field number for the "rank_types" field.</summary>
    public const int RankTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_rankTypes_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> rankTypes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RankTypes {
      get { return rankTypes_; }
    }

    /// <summary>Field number for the "lobby_type" field.</summary>
    public const int LobbyTypeFieldNumber = 5;
    private readonly static int LobbyTypeDefaultValue = 0;

    private int lobbyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LobbyType {
      get { if ((_hasBits0 & 1) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lobbyType_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lobby_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCRequestBatchPlayerResources);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCRequestBatchPlayerResources other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accountIds_.Equals(other.accountIds_)) return false;
      if(!rankTypes_.Equals(other.rankTypes_)) return false;
      if (LobbyType != other.LobbyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accountIds_.GetHashCode();
      hash ^= rankTypes_.GetHashCode();
      if (HasLobbyType) hash ^= LobbyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accountIds_.WriteTo(output, _repeated_accountIds_codec);
      rankTypes_.WriteTo(output, _repeated_rankTypes_codec);
      if (HasLobbyType) {
        output.WriteRawTag(40);
        output.WriteInt32(LobbyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accountIds_.WriteTo(ref output, _repeated_accountIds_codec);
      rankTypes_.WriteTo(ref output, _repeated_rankTypes_codec);
      if (HasLobbyType) {
        output.WriteRawTag(40);
        output.WriteInt32(LobbyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accountIds_.CalculateSize(_repeated_accountIds_codec);
      size += rankTypes_.CalculateSize(_repeated_rankTypes_codec);
      if (HasLobbyType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LobbyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCRequestBatchPlayerResources other) {
      if (other == null) {
        return;
      }
      accountIds_.Add(other.accountIds_);
      rankTypes_.Add(other.rankTypes_);
      if (other.HasLobbyType) {
        LobbyType = other.LobbyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            accountIds_.AddEntriesFrom(input, _repeated_accountIds_codec);
            break;
          }
          case 34:
          case 32: {
            rankTypes_.AddEntriesFrom(input, _repeated_rankTypes_codec);
            break;
          }
          case 40: {
            LobbyType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            accountIds_.AddEntriesFrom(ref input, _repeated_accountIds_codec);
            break;
          }
          case 34:
          case 32: {
            rankTypes_.AddEntriesFrom(ref input, _repeated_rankTypes_codec);
            break;
          }
          case 40: {
            LobbyType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCRequestBatchPlayerResourcesResponse : pb::IMessage<CMsgServerToGCRequestBatchPlayerResourcesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCRequestBatchPlayerResourcesResponse> _parser = new pb::MessageParser<CMsgServerToGCRequestBatchPlayerResourcesResponse>(() => new CMsgServerToGCRequestBatchPlayerResourcesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCRequestBatchPlayerResourcesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestBatchPlayerResourcesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestBatchPlayerResourcesResponse(CMsgServerToGCRequestBatchPlayerResourcesResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestBatchPlayerResourcesResponse Clone() {
      return new CMsgServerToGCRequestBatchPlayerResourcesResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResourcesResponse.Types.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResourcesResponse.Types.Result.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResourcesResponse.Types.Result> results_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResourcesResponse.Types.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResourcesResponse.Types.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCRequestBatchPlayerResourcesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCRequestBatchPlayerResourcesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      results_.WriteTo(ref output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCRequestBatchPlayerResourcesResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 50: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 50: {
            results_.AddEntriesFrom(ref input, _repeated_results_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCRequestBatchPlayerResourcesResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Result : pb::IMessage<Result>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Result> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCRequestBatchPlayerResourcesResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result(Result other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          rank_ = other.rank_;
          rankCalibrated_ = other.rankCalibrated_;
          lowPriority_ = other.lowPriority_;
          isNewPlayer_ = other.isNewPlayer_;
          isGuidePlayer_ = other.isGuidePlayer_;
          commLevel_ = other.commLevel_;
          behaviorLevel_ = other.behaviorLevel_;
          wins_ = other.wins_;
          losses_ = other.losses_;
          smurfCategory_ = other.smurfCategory_;
          commScore_ = other.commScore_;
          behaviorScore_ = other.behaviorScore_;
          rankUncertainty_ = other.rankUncertainty_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result Clone() {
          return new Result(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 4;
        private readonly static uint RankDefaultValue = 0;

        private uint rank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Rank {
          get { if ((_hasBits0 & 2) != 0) { return rank_; } else { return RankDefaultValue; } }
          set {
            _hasBits0 |= 2;
            rank_ = value;
          }
        }
        /// <summary>Gets whether the "rank" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRank {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "rank" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRank() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "rank_calibrated" field.</summary>
        public const int RankCalibratedFieldNumber = 5;
        private readonly static bool RankCalibratedDefaultValue = false;

        private bool rankCalibrated_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RankCalibrated {
          get { if ((_hasBits0 & 4) != 0) { return rankCalibrated_; } else { return RankCalibratedDefaultValue; } }
          set {
            _hasBits0 |= 4;
            rankCalibrated_ = value;
          }
        }
        /// <summary>Gets whether the "rank_calibrated" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRankCalibrated {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "rank_calibrated" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRankCalibrated() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "low_priority" field.</summary>
        public const int LowPriorityFieldNumber = 6;
        private readonly static bool LowPriorityDefaultValue = false;

        private bool lowPriority_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool LowPriority {
          get { if ((_hasBits0 & 8) != 0) { return lowPriority_; } else { return LowPriorityDefaultValue; } }
          set {
            _hasBits0 |= 8;
            lowPriority_ = value;
          }
        }
        /// <summary>Gets whether the "low_priority" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLowPriority {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "low_priority" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLowPriority() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "is_new_player" field.</summary>
        public const int IsNewPlayerFieldNumber = 7;
        private readonly static bool IsNewPlayerDefaultValue = false;

        private bool isNewPlayer_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsNewPlayer {
          get { if ((_hasBits0 & 16) != 0) { return isNewPlayer_; } else { return IsNewPlayerDefaultValue; } }
          set {
            _hasBits0 |= 16;
            isNewPlayer_ = value;
          }
        }
        /// <summary>Gets whether the "is_new_player" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsNewPlayer {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "is_new_player" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsNewPlayer() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "is_guide_player" field.</summary>
        public const int IsGuidePlayerFieldNumber = 8;
        private readonly static bool IsGuidePlayerDefaultValue = false;

        private bool isGuidePlayer_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsGuidePlayer {
          get { if ((_hasBits0 & 32) != 0) { return isGuidePlayer_; } else { return IsGuidePlayerDefaultValue; } }
          set {
            _hasBits0 |= 32;
            isGuidePlayer_ = value;
          }
        }
        /// <summary>Gets whether the "is_guide_player" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsGuidePlayer {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "is_guide_player" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsGuidePlayer() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "comm_level" field.</summary>
        public const int CommLevelFieldNumber = 9;
        private readonly static int CommLevelDefaultValue = 0;

        private int commLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CommLevel {
          get { if ((_hasBits0 & 64) != 0) { return commLevel_; } else { return CommLevelDefaultValue; } }
          set {
            _hasBits0 |= 64;
            commLevel_ = value;
          }
        }
        /// <summary>Gets whether the "comm_level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCommLevel {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "comm_level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommLevel() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "behavior_level" field.</summary>
        public const int BehaviorLevelFieldNumber = 10;
        private readonly static int BehaviorLevelDefaultValue = 0;

        private int behaviorLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BehaviorLevel {
          get { if ((_hasBits0 & 128) != 0) { return behaviorLevel_; } else { return BehaviorLevelDefaultValue; } }
          set {
            _hasBits0 |= 128;
            behaviorLevel_ = value;
          }
        }
        /// <summary>Gets whether the "behavior_level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBehaviorLevel {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "behavior_level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBehaviorLevel() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "wins" field.</summary>
        public const int WinsFieldNumber = 11;
        private readonly static int WinsDefaultValue = 0;

        private int wins_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Wins {
          get { if ((_hasBits0 & 256) != 0) { return wins_; } else { return WinsDefaultValue; } }
          set {
            _hasBits0 |= 256;
            wins_ = value;
          }
        }
        /// <summary>Gets whether the "wins" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWins {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "wins" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWins() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "losses" field.</summary>
        public const int LossesFieldNumber = 12;
        private readonly static int LossesDefaultValue = 0;

        private int losses_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Losses {
          get { if ((_hasBits0 & 512) != 0) { return losses_; } else { return LossesDefaultValue; } }
          set {
            _hasBits0 |= 512;
            losses_ = value;
          }
        }
        /// <summary>Gets whether the "losses" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLosses {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "losses" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLosses() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "smurf_category" field.</summary>
        public const int SmurfCategoryFieldNumber = 13;
        private readonly static int SmurfCategoryDefaultValue = 0;

        private int smurfCategory_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SmurfCategory {
          get { if ((_hasBits0 & 1024) != 0) { return smurfCategory_; } else { return SmurfCategoryDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            smurfCategory_ = value;
          }
        }
        /// <summary>Gets whether the "smurf_category" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSmurfCategory {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "smurf_category" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSmurfCategory() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "comm_score" field.</summary>
        public const int CommScoreFieldNumber = 14;
        private readonly static int CommScoreDefaultValue = 0;

        private int commScore_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CommScore {
          get { if ((_hasBits0 & 2048) != 0) { return commScore_; } else { return CommScoreDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            commScore_ = value;
          }
        }
        /// <summary>Gets whether the "comm_score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCommScore {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "comm_score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommScore() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "behavior_score" field.</summary>
        public const int BehaviorScoreFieldNumber = 15;
        private readonly static int BehaviorScoreDefaultValue = 0;

        private int behaviorScore_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BehaviorScore {
          get { if ((_hasBits0 & 4096) != 0) { return behaviorScore_; } else { return BehaviorScoreDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            behaviorScore_ = value;
          }
        }
        /// <summary>Gets whether the "behavior_score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBehaviorScore {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "behavior_score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBehaviorScore() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "rank_uncertainty" field.</summary>
        public const int RankUncertaintyFieldNumber = 16;
        private readonly static int RankUncertaintyDefaultValue = 0;

        private int rankUncertainty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RankUncertainty {
          get { if ((_hasBits0 & 8192) != 0) { return rankUncertainty_; } else { return RankUncertaintyDefaultValue; } }
          set {
            _hasBits0 |= 8192;
            rankUncertainty_ = value;
          }
        }
        /// <summary>Gets whether the "rank_uncertainty" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRankUncertainty {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "rank_uncertainty" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRankUncertainty() {
          _hasBits0 &= ~8192;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Result);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Result other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (Rank != other.Rank) return false;
          if (RankCalibrated != other.RankCalibrated) return false;
          if (LowPriority != other.LowPriority) return false;
          if (IsNewPlayer != other.IsNewPlayer) return false;
          if (IsGuidePlayer != other.IsGuidePlayer) return false;
          if (CommLevel != other.CommLevel) return false;
          if (BehaviorLevel != other.BehaviorLevel) return false;
          if (Wins != other.Wins) return false;
          if (Losses != other.Losses) return false;
          if (SmurfCategory != other.SmurfCategory) return false;
          if (CommScore != other.CommScore) return false;
          if (BehaviorScore != other.BehaviorScore) return false;
          if (RankUncertainty != other.RankUncertainty) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasRank) hash ^= Rank.GetHashCode();
          if (HasRankCalibrated) hash ^= RankCalibrated.GetHashCode();
          if (HasLowPriority) hash ^= LowPriority.GetHashCode();
          if (HasIsNewPlayer) hash ^= IsNewPlayer.GetHashCode();
          if (HasIsGuidePlayer) hash ^= IsGuidePlayer.GetHashCode();
          if (HasCommLevel) hash ^= CommLevel.GetHashCode();
          if (HasBehaviorLevel) hash ^= BehaviorLevel.GetHashCode();
          if (HasWins) hash ^= Wins.GetHashCode();
          if (HasLosses) hash ^= Losses.GetHashCode();
          if (HasSmurfCategory) hash ^= SmurfCategory.GetHashCode();
          if (HasCommScore) hash ^= CommScore.GetHashCode();
          if (HasBehaviorScore) hash ^= BehaviorScore.GetHashCode();
          if (HasRankUncertainty) hash ^= RankUncertainty.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasRank) {
            output.WriteRawTag(32);
            output.WriteUInt32(Rank);
          }
          if (HasRankCalibrated) {
            output.WriteRawTag(40);
            output.WriteBool(RankCalibrated);
          }
          if (HasLowPriority) {
            output.WriteRawTag(48);
            output.WriteBool(LowPriority);
          }
          if (HasIsNewPlayer) {
            output.WriteRawTag(56);
            output.WriteBool(IsNewPlayer);
          }
          if (HasIsGuidePlayer) {
            output.WriteRawTag(64);
            output.WriteBool(IsGuidePlayer);
          }
          if (HasCommLevel) {
            output.WriteRawTag(72);
            output.WriteInt32(CommLevel);
          }
          if (HasBehaviorLevel) {
            output.WriteRawTag(80);
            output.WriteInt32(BehaviorLevel);
          }
          if (HasWins) {
            output.WriteRawTag(88);
            output.WriteInt32(Wins);
          }
          if (HasLosses) {
            output.WriteRawTag(96);
            output.WriteInt32(Losses);
          }
          if (HasSmurfCategory) {
            output.WriteRawTag(104);
            output.WriteInt32(SmurfCategory);
          }
          if (HasCommScore) {
            output.WriteRawTag(112);
            output.WriteInt32(CommScore);
          }
          if (HasBehaviorScore) {
            output.WriteRawTag(120);
            output.WriteInt32(BehaviorScore);
          }
          if (HasRankUncertainty) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(RankUncertainty);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasRank) {
            output.WriteRawTag(32);
            output.WriteUInt32(Rank);
          }
          if (HasRankCalibrated) {
            output.WriteRawTag(40);
            output.WriteBool(RankCalibrated);
          }
          if (HasLowPriority) {
            output.WriteRawTag(48);
            output.WriteBool(LowPriority);
          }
          if (HasIsNewPlayer) {
            output.WriteRawTag(56);
            output.WriteBool(IsNewPlayer);
          }
          if (HasIsGuidePlayer) {
            output.WriteRawTag(64);
            output.WriteBool(IsGuidePlayer);
          }
          if (HasCommLevel) {
            output.WriteRawTag(72);
            output.WriteInt32(CommLevel);
          }
          if (HasBehaviorLevel) {
            output.WriteRawTag(80);
            output.WriteInt32(BehaviorLevel);
          }
          if (HasWins) {
            output.WriteRawTag(88);
            output.WriteInt32(Wins);
          }
          if (HasLosses) {
            output.WriteRawTag(96);
            output.WriteInt32(Losses);
          }
          if (HasSmurfCategory) {
            output.WriteRawTag(104);
            output.WriteInt32(SmurfCategory);
          }
          if (HasCommScore) {
            output.WriteRawTag(112);
            output.WriteInt32(CommScore);
          }
          if (HasBehaviorScore) {
            output.WriteRawTag(120);
            output.WriteInt32(BehaviorScore);
          }
          if (HasRankUncertainty) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(RankUncertainty);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasRank) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
          }
          if (HasRankCalibrated) {
            size += 1 + 1;
          }
          if (HasLowPriority) {
            size += 1 + 1;
          }
          if (HasIsNewPlayer) {
            size += 1 + 1;
          }
          if (HasIsGuidePlayer) {
            size += 1 + 1;
          }
          if (HasCommLevel) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommLevel);
          }
          if (HasBehaviorLevel) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BehaviorLevel);
          }
          if (HasWins) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wins);
          }
          if (HasLosses) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Losses);
          }
          if (HasSmurfCategory) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmurfCategory);
          }
          if (HasCommScore) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommScore);
          }
          if (HasBehaviorScore) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BehaviorScore);
          }
          if (HasRankUncertainty) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankUncertainty);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Result other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasRank) {
            Rank = other.Rank;
          }
          if (other.HasRankCalibrated) {
            RankCalibrated = other.RankCalibrated;
          }
          if (other.HasLowPriority) {
            LowPriority = other.LowPriority;
          }
          if (other.HasIsNewPlayer) {
            IsNewPlayer = other.IsNewPlayer;
          }
          if (other.HasIsGuidePlayer) {
            IsGuidePlayer = other.IsGuidePlayer;
          }
          if (other.HasCommLevel) {
            CommLevel = other.CommLevel;
          }
          if (other.HasBehaviorLevel) {
            BehaviorLevel = other.BehaviorLevel;
          }
          if (other.HasWins) {
            Wins = other.Wins;
          }
          if (other.HasLosses) {
            Losses = other.Losses;
          }
          if (other.HasSmurfCategory) {
            SmurfCategory = other.SmurfCategory;
          }
          if (other.HasCommScore) {
            CommScore = other.CommScore;
          }
          if (other.HasBehaviorScore) {
            BehaviorScore = other.BehaviorScore;
          }
          if (other.HasRankUncertainty) {
            RankUncertainty = other.RankUncertainty;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 32: {
                Rank = input.ReadUInt32();
                break;
              }
              case 40: {
                RankCalibrated = input.ReadBool();
                break;
              }
              case 48: {
                LowPriority = input.ReadBool();
                break;
              }
              case 56: {
                IsNewPlayer = input.ReadBool();
                break;
              }
              case 64: {
                IsGuidePlayer = input.ReadBool();
                break;
              }
              case 72: {
                CommLevel = input.ReadInt32();
                break;
              }
              case 80: {
                BehaviorLevel = input.ReadInt32();
                break;
              }
              case 88: {
                Wins = input.ReadInt32();
                break;
              }
              case 96: {
                Losses = input.ReadInt32();
                break;
              }
              case 104: {
                SmurfCategory = input.ReadInt32();
                break;
              }
              case 112: {
                CommScore = input.ReadInt32();
                break;
              }
              case 120: {
                BehaviorScore = input.ReadInt32();
                break;
              }
              case 128: {
                RankUncertainty = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 32: {
                Rank = input.ReadUInt32();
                break;
              }
              case 40: {
                RankCalibrated = input.ReadBool();
                break;
              }
              case 48: {
                LowPriority = input.ReadBool();
                break;
              }
              case 56: {
                IsNewPlayer = input.ReadBool();
                break;
              }
              case 64: {
                IsGuidePlayer = input.ReadBool();
                break;
              }
              case 72: {
                CommLevel = input.ReadInt32();
                break;
              }
              case 80: {
                BehaviorLevel = input.ReadInt32();
                break;
              }
              case 88: {
                Wins = input.ReadInt32();
                break;
              }
              case 96: {
                Losses = input.ReadInt32();
                break;
              }
              case 104: {
                SmurfCategory = input.ReadInt32();
                break;
              }
              case 112: {
                CommScore = input.ReadInt32();
                break;
              }
              case 120: {
                BehaviorScore = input.ReadInt32();
                break;
              }
              case 128: {
                RankUncertainty = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgDOTAPlayerFailedToConnect : pb::IMessage<CMsgDOTAPlayerFailedToConnect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAPlayerFailedToConnect> _parser = new pb::MessageParser<CMsgDOTAPlayerFailedToConnect>(() => new CMsgDOTAPlayerFailedToConnect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAPlayerFailedToConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAPlayerFailedToConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAPlayerFailedToConnect(CMsgDOTAPlayerFailedToConnect other) : this() {
      failedLoaders_ = other.failedLoaders_.Clone();
      abandonedLoaders_ = other.abandonedLoaders_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAPlayerFailedToConnect Clone() {
      return new CMsgDOTAPlayerFailedToConnect(this);
    }

    /// <summary>Field number for the "failed_loaders" field.</summary>
    public const int FailedLoadersFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_failedLoaders_codec
        = pb::FieldCodec.ForFixed64(9);
    private readonly pbc::RepeatedField<ulong> failedLoaders_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> FailedLoaders {
      get { return failedLoaders_; }
    }

    /// <summary>Field number for the "abandoned_loaders" field.</summary>
    public const int AbandonedLoadersFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_abandonedLoaders_codec
        = pb::FieldCodec.ForFixed64(17);
    private readonly pbc::RepeatedField<ulong> abandonedLoaders_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> AbandonedLoaders {
      get { return abandonedLoaders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAPlayerFailedToConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAPlayerFailedToConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!failedLoaders_.Equals(other.failedLoaders_)) return false;
      if(!abandonedLoaders_.Equals(other.abandonedLoaders_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= failedLoaders_.GetHashCode();
      hash ^= abandonedLoaders_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      failedLoaders_.WriteTo(output, _repeated_failedLoaders_codec);
      abandonedLoaders_.WriteTo(output, _repeated_abandonedLoaders_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      failedLoaders_.WriteTo(ref output, _repeated_failedLoaders_codec);
      abandonedLoaders_.WriteTo(ref output, _repeated_abandonedLoaders_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += failedLoaders_.CalculateSize(_repeated_failedLoaders_codec);
      size += abandonedLoaders_.CalculateSize(_repeated_abandonedLoaders_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAPlayerFailedToConnect other) {
      if (other == null) {
        return;
      }
      failedLoaders_.Add(other.failedLoaders_);
      abandonedLoaders_.Add(other.abandonedLoaders_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            failedLoaders_.AddEntriesFrom(input, _repeated_failedLoaders_codec);
            break;
          }
          case 18:
          case 17: {
            abandonedLoaders_.AddEntriesFrom(input, _repeated_abandonedLoaders_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 9: {
            failedLoaders_.AddEntriesFrom(ref input, _repeated_failedLoaders_codec);
            break;
          }
          case 18:
          case 17: {
            abandonedLoaders_.AddEntriesFrom(ref input, _repeated_abandonedLoaders_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToRelayConnect : pb::IMessage<CMsgGCToRelayConnect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToRelayConnect> _parser = new pb::MessageParser<CMsgGCToRelayConnect>(() => new CMsgGCToRelayConnect());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToRelayConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToRelayConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToRelayConnect(CMsgGCToRelayConnect other) : this() {
      _hasBits0 = other._hasBits0;
      sourceTvPublicAddr_ = other.sourceTvPublicAddr_;
      sourceTvPrivateAddr_ = other.sourceTvPrivateAddr_;
      sourceTvPort_ = other.sourceTvPort_;
      gameServerSteamId_ = other.gameServerSteamId_;
      parentCount_ = other.parentCount_;
      tvUniqueSecretCode_ = other.tvUniqueSecretCode_;
      sourceTvSteamid_ = other.sourceTvSteamid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToRelayConnect Clone() {
      return new CMsgGCToRelayConnect(this);
    }

    /// <summary>Field number for the "source_tv_public_addr" field.</summary>
    public const int SourceTvPublicAddrFieldNumber = 1;
    private readonly static uint SourceTvPublicAddrDefaultValue = 0;

    private uint sourceTvPublicAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceTvPublicAddr {
      get { if ((_hasBits0 & 1) != 0) { return sourceTvPublicAddr_; } else { return SourceTvPublicAddrDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sourceTvPublicAddr_ = value;
      }
    }
    /// <summary>Gets whether the "source_tv_public_addr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceTvPublicAddr {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_tv_public_addr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceTvPublicAddr() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "source_tv_private_addr" field.</summary>
    public const int SourceTvPrivateAddrFieldNumber = 2;
    private readonly static uint SourceTvPrivateAddrDefaultValue = 0;

    private uint sourceTvPrivateAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceTvPrivateAddr {
      get { if ((_hasBits0 & 2) != 0) { return sourceTvPrivateAddr_; } else { return SourceTvPrivateAddrDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sourceTvPrivateAddr_ = value;
      }
    }
    /// <summary>Gets whether the "source_tv_private_addr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceTvPrivateAddr {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "source_tv_private_addr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceTvPrivateAddr() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "source_tv_port" field.</summary>
    public const int SourceTvPortFieldNumber = 3;
    private readonly static uint SourceTvPortDefaultValue = 0;

    private uint sourceTvPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceTvPort {
      get { if ((_hasBits0 & 4) != 0) { return sourceTvPort_; } else { return SourceTvPortDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sourceTvPort_ = value;
      }
    }
    /// <summary>Gets whether the "source_tv_port" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceTvPort {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "source_tv_port" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceTvPort() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "game_server_steam_id" field.</summary>
    public const int GameServerSteamIdFieldNumber = 4;
    private readonly static ulong GameServerSteamIdDefaultValue = 0UL;

    private ulong gameServerSteamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameServerSteamId {
      get { if ((_hasBits0 & 8) != 0) { return gameServerSteamId_; } else { return GameServerSteamIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gameServerSteamId_ = value;
      }
    }
    /// <summary>Gets whether the "game_server_steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameServerSteamId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "game_server_steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameServerSteamId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "parent_count" field.</summary>
    public const int ParentCountFieldNumber = 5;
    private readonly static uint ParentCountDefaultValue = 0;

    private uint parentCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParentCount {
      get { if ((_hasBits0 & 16) != 0) { return parentCount_; } else { return ParentCountDefaultValue; } }
      set {
        _hasBits0 |= 16;
        parentCount_ = value;
      }
    }
    /// <summary>Gets whether the "parent_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentCount {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "parent_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentCount() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "tv_unique_secret_code" field.</summary>
    public const int TvUniqueSecretCodeFieldNumber = 6;
    private readonly static ulong TvUniqueSecretCodeDefaultValue = 0UL;

    private ulong tvUniqueSecretCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TvUniqueSecretCode {
      get { if ((_hasBits0 & 32) != 0) { return tvUniqueSecretCode_; } else { return TvUniqueSecretCodeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        tvUniqueSecretCode_ = value;
      }
    }
    /// <summary>Gets whether the "tv_unique_secret_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTvUniqueSecretCode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "tv_unique_secret_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTvUniqueSecretCode() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "source_tv_steamid" field.</summary>
    public const int SourceTvSteamidFieldNumber = 7;
    private readonly static ulong SourceTvSteamidDefaultValue = 0UL;

    private ulong sourceTvSteamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SourceTvSteamid {
      get { if ((_hasBits0 & 64) != 0) { return sourceTvSteamid_; } else { return SourceTvSteamidDefaultValue; } }
      set {
        _hasBits0 |= 64;
        sourceTvSteamid_ = value;
      }
    }
    /// <summary>Gets whether the "source_tv_steamid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceTvSteamid {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "source_tv_steamid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceTvSteamid() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToRelayConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToRelayConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceTvPublicAddr != other.SourceTvPublicAddr) return false;
      if (SourceTvPrivateAddr != other.SourceTvPrivateAddr) return false;
      if (SourceTvPort != other.SourceTvPort) return false;
      if (GameServerSteamId != other.GameServerSteamId) return false;
      if (ParentCount != other.ParentCount) return false;
      if (TvUniqueSecretCode != other.TvUniqueSecretCode) return false;
      if (SourceTvSteamid != other.SourceTvSteamid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourceTvPublicAddr) hash ^= SourceTvPublicAddr.GetHashCode();
      if (HasSourceTvPrivateAddr) hash ^= SourceTvPrivateAddr.GetHashCode();
      if (HasSourceTvPort) hash ^= SourceTvPort.GetHashCode();
      if (HasGameServerSteamId) hash ^= GameServerSteamId.GetHashCode();
      if (HasParentCount) hash ^= ParentCount.GetHashCode();
      if (HasTvUniqueSecretCode) hash ^= TvUniqueSecretCode.GetHashCode();
      if (HasSourceTvSteamid) hash ^= SourceTvSteamid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSourceTvPublicAddr) {
        output.WriteRawTag(8);
        output.WriteUInt32(SourceTvPublicAddr);
      }
      if (HasSourceTvPrivateAddr) {
        output.WriteRawTag(16);
        output.WriteUInt32(SourceTvPrivateAddr);
      }
      if (HasSourceTvPort) {
        output.WriteRawTag(24);
        output.WriteUInt32(SourceTvPort);
      }
      if (HasGameServerSteamId) {
        output.WriteRawTag(32);
        output.WriteUInt64(GameServerSteamId);
      }
      if (HasParentCount) {
        output.WriteRawTag(40);
        output.WriteUInt32(ParentCount);
      }
      if (HasTvUniqueSecretCode) {
        output.WriteRawTag(49);
        output.WriteFixed64(TvUniqueSecretCode);
      }
      if (HasSourceTvSteamid) {
        output.WriteRawTag(57);
        output.WriteFixed64(SourceTvSteamid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSourceTvPublicAddr) {
        output.WriteRawTag(8);
        output.WriteUInt32(SourceTvPublicAddr);
      }
      if (HasSourceTvPrivateAddr) {
        output.WriteRawTag(16);
        output.WriteUInt32(SourceTvPrivateAddr);
      }
      if (HasSourceTvPort) {
        output.WriteRawTag(24);
        output.WriteUInt32(SourceTvPort);
      }
      if (HasGameServerSteamId) {
        output.WriteRawTag(32);
        output.WriteUInt64(GameServerSteamId);
      }
      if (HasParentCount) {
        output.WriteRawTag(40);
        output.WriteUInt32(ParentCount);
      }
      if (HasTvUniqueSecretCode) {
        output.WriteRawTag(49);
        output.WriteFixed64(TvUniqueSecretCode);
      }
      if (HasSourceTvSteamid) {
        output.WriteRawTag(57);
        output.WriteFixed64(SourceTvSteamid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSourceTvPublicAddr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceTvPublicAddr);
      }
      if (HasSourceTvPrivateAddr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceTvPrivateAddr);
      }
      if (HasSourceTvPort) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceTvPort);
      }
      if (HasGameServerSteamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameServerSteamId);
      }
      if (HasParentCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParentCount);
      }
      if (HasTvUniqueSecretCode) {
        size += 1 + 8;
      }
      if (HasSourceTvSteamid) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToRelayConnect other) {
      if (other == null) {
        return;
      }
      if (other.HasSourceTvPublicAddr) {
        SourceTvPublicAddr = other.SourceTvPublicAddr;
      }
      if (other.HasSourceTvPrivateAddr) {
        SourceTvPrivateAddr = other.SourceTvPrivateAddr;
      }
      if (other.HasSourceTvPort) {
        SourceTvPort = other.SourceTvPort;
      }
      if (other.HasGameServerSteamId) {
        GameServerSteamId = other.GameServerSteamId;
      }
      if (other.HasParentCount) {
        ParentCount = other.ParentCount;
      }
      if (other.HasTvUniqueSecretCode) {
        TvUniqueSecretCode = other.TvUniqueSecretCode;
      }
      if (other.HasSourceTvSteamid) {
        SourceTvSteamid = other.SourceTvSteamid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceTvPublicAddr = input.ReadUInt32();
            break;
          }
          case 16: {
            SourceTvPrivateAddr = input.ReadUInt32();
            break;
          }
          case 24: {
            SourceTvPort = input.ReadUInt32();
            break;
          }
          case 32: {
            GameServerSteamId = input.ReadUInt64();
            break;
          }
          case 40: {
            ParentCount = input.ReadUInt32();
            break;
          }
          case 49: {
            TvUniqueSecretCode = input.ReadFixed64();
            break;
          }
          case 57: {
            SourceTvSteamid = input.ReadFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceTvPublicAddr = input.ReadUInt32();
            break;
          }
          case 16: {
            SourceTvPrivateAddr = input.ReadUInt32();
            break;
          }
          case 24: {
            SourceTvPort = input.ReadUInt32();
            break;
          }
          case 32: {
            GameServerSteamId = input.ReadUInt64();
            break;
          }
          case 40: {
            ParentCount = input.ReadUInt32();
            break;
          }
          case 49: {
            TvUniqueSecretCode = input.ReadFixed64();
            break;
          }
          case 57: {
            SourceTvSteamid = input.ReadFixed64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCGCToLANServerRelayConnect : pb::IMessage<CMsgGCGCToLANServerRelayConnect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCGCToLANServerRelayConnect> _parser = new pb::MessageParser<CMsgGCGCToLANServerRelayConnect>(() => new CMsgGCGCToLANServerRelayConnect());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCGCToLANServerRelayConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCGCToLANServerRelayConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCGCToLANServerRelayConnect(CMsgGCGCToLANServerRelayConnect other) : this() {
      _hasBits0 = other._hasBits0;
      relaySteamid_ = other.relaySteamid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCGCToLANServerRelayConnect Clone() {
      return new CMsgGCGCToLANServerRelayConnect(this);
    }

    /// <summary>Field number for the "relay_steamid" field.</summary>
    public const int RelaySteamidFieldNumber = 1;
    private readonly static ulong RelaySteamidDefaultValue = 0UL;

    private ulong relaySteamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RelaySteamid {
      get { if ((_hasBits0 & 1) != 0) { return relaySteamid_; } else { return RelaySteamidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        relaySteamid_ = value;
      }
    }
    /// <summary>Gets whether the "relay_steamid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRelaySteamid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "relay_steamid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRelaySteamid() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCGCToLANServerRelayConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCGCToLANServerRelayConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RelaySteamid != other.RelaySteamid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRelaySteamid) hash ^= RelaySteamid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRelaySteamid) {
        output.WriteRawTag(9);
        output.WriteFixed64(RelaySteamid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRelaySteamid) {
        output.WriteRawTag(9);
        output.WriteFixed64(RelaySteamid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRelaySteamid) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCGCToLANServerRelayConnect other) {
      if (other == null) {
        return;
      }
      if (other.HasRelaySteamid) {
        RelaySteamid = other.RelaySteamid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            RelaySteamid = input.ReadFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            RelaySteamid = input.ReadFixed64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCBanStatusRequest : pb::IMessage<CMsgGCBanStatusRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCBanStatusRequest> _parser = new pb::MessageParser<CMsgGCBanStatusRequest>(() => new CMsgGCBanStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCBanStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCBanStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCBanStatusRequest(CMsgGCBanStatusRequest other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCBanStatusRequest Clone() {
      return new CMsgGCBanStatusRequest(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCBanStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCBanStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCBanStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCBanStatusResponse : pb::IMessage<CMsgGCBanStatusResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCBanStatusResponse> _parser = new pb::MessageParser<CMsgGCBanStatusResponse>(() => new CMsgGCBanStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCBanStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCBanStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCBanStatusResponse(CMsgGCBanStatusResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      lowPriority_ = other.lowPriority_;
      textChatBanned_ = other.textChatBanned_;
      voiceChatBanned_ = other.voiceChatBanned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCBanStatusResponse Clone() {
      return new CMsgGCBanStatusResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static uint ResultDefaultValue = 0;

    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "low_priority" field.</summary>
    public const int LowPriorityFieldNumber = 2;
    private readonly static bool LowPriorityDefaultValue = false;

    private bool lowPriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LowPriority {
      get { if ((_hasBits0 & 2) != 0) { return lowPriority_; } else { return LowPriorityDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lowPriority_ = value;
      }
    }
    /// <summary>Gets whether the "low_priority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLowPriority {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "low_priority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowPriority() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "text_chat_banned" field.</summary>
    public const int TextChatBannedFieldNumber = 3;
    private readonly static bool TextChatBannedDefaultValue = false;

    private bool textChatBanned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TextChatBanned {
      get { if ((_hasBits0 & 4) != 0) { return textChatBanned_; } else { return TextChatBannedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        textChatBanned_ = value;
      }
    }
    /// <summary>Gets whether the "text_chat_banned" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTextChatBanned {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "text_chat_banned" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTextChatBanned() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "voice_chat_banned" field.</summary>
    public const int VoiceChatBannedFieldNumber = 4;
    private readonly static bool VoiceChatBannedDefaultValue = false;

    private bool voiceChatBanned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VoiceChatBanned {
      get { if ((_hasBits0 & 8) != 0) { return voiceChatBanned_; } else { return VoiceChatBannedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        voiceChatBanned_ = value;
      }
    }
    /// <summary>Gets whether the "voice_chat_banned" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVoiceChatBanned {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "voice_chat_banned" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVoiceChatBanned() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCBanStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCBanStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (LowPriority != other.LowPriority) return false;
      if (TextChatBanned != other.TextChatBanned) return false;
      if (VoiceChatBanned != other.VoiceChatBanned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (HasLowPriority) hash ^= LowPriority.GetHashCode();
      if (HasTextChatBanned) hash ^= TextChatBanned.GetHashCode();
      if (HasVoiceChatBanned) hash ^= VoiceChatBanned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (HasLowPriority) {
        output.WriteRawTag(16);
        output.WriteBool(LowPriority);
      }
      if (HasTextChatBanned) {
        output.WriteRawTag(24);
        output.WriteBool(TextChatBanned);
      }
      if (HasVoiceChatBanned) {
        output.WriteRawTag(32);
        output.WriteBool(VoiceChatBanned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (HasLowPriority) {
        output.WriteRawTag(16);
        output.WriteBool(LowPriority);
      }
      if (HasTextChatBanned) {
        output.WriteRawTag(24);
        output.WriteBool(TextChatBanned);
      }
      if (HasVoiceChatBanned) {
        output.WriteRawTag(32);
        output.WriteBool(VoiceChatBanned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (HasLowPriority) {
        size += 1 + 1;
      }
      if (HasTextChatBanned) {
        size += 1 + 1;
      }
      if (HasVoiceChatBanned) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCBanStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasLowPriority) {
        LowPriority = other.LowPriority;
      }
      if (other.HasTextChatBanned) {
        TextChatBanned = other.TextChatBanned;
      }
      if (other.HasVoiceChatBanned) {
        VoiceChatBanned = other.VoiceChatBanned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
          case 16: {
            LowPriority = input.ReadBool();
            break;
          }
          case 24: {
            TextChatBanned = input.ReadBool();
            break;
          }
          case 32: {
            VoiceChatBanned = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
          case 16: {
            LowPriority = input.ReadBool();
            break;
          }
          case 24: {
            TextChatBanned = input.ReadBool();
            break;
          }
          case 32: {
            VoiceChatBanned = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgTournamentItemEvent : pb::IMessage<CMsgTournamentItemEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgTournamentItemEvent> _parser = new pb::MessageParser<CMsgTournamentItemEvent>(() => new CMsgTournamentItemEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTournamentItemEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTournamentItemEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTournamentItemEvent(CMsgTournamentItemEvent other) : this() {
      _hasBits0 = other._hasBits0;
      killerAccountId_ = other.killerAccountId_;
      victimAccountId_ = other.victimAccountId_;
      eventType_ = other.eventType_;
      tvDelay_ = other.tvDelay_;
      dotaTime_ = other.dotaTime_;
      replayTime_ = other.replayTime_;
      lootList_ = other.lootList_;
      eventTeam_ = other.eventTeam_;
      multiKillCount_ = other.multiKillCount_;
      winnerScore_ = other.winnerScore_;
      loserScore_ = other.loserScore_;
      heroStatues_ = other.heroStatues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTournamentItemEvent Clone() {
      return new CMsgTournamentItemEvent(this);
    }

    /// <summary>Field number for the "killer_account_id" field.</summary>
    public const int KillerAccountIdFieldNumber = 1;
    private readonly static uint KillerAccountIdDefaultValue = 0;

    private uint killerAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillerAccountId {
      get { if ((_hasBits0 & 1) != 0) { return killerAccountId_; } else { return KillerAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        killerAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "killer_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKillerAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "killer_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKillerAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "victim_account_id" field.</summary>
    public const int VictimAccountIdFieldNumber = 2;
    private readonly static uint VictimAccountIdDefaultValue = 0;

    private uint victimAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VictimAccountId {
      get { if ((_hasBits0 & 2) != 0) { return victimAccountId_; } else { return VictimAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        victimAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "victim_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVictimAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "victim_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVictimAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.DOTA_TournamentEvents EventTypeDefaultValue = global::Steam.Protos.Dota2.DOTA_TournamentEvents.TeFirstBlood;

    private global::Steam.Protos.Dota2.DOTA_TournamentEvents eventType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_TournamentEvents EventType {
      get { if ((_hasBits0 & 4) != 0) { return eventType_; } else { return EventTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        eventType_ = value;
      }
    }
    /// <summary>Gets whether the "event_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "event_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "tv_delay" field.</summary>
    public const int TvDelayFieldNumber = 4;
    private readonly static int TvDelayDefaultValue = 0;

    private int tvDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TvDelay {
      get { if ((_hasBits0 & 8) != 0) { return tvDelay_; } else { return TvDelayDefaultValue; } }
      set {
        _hasBits0 |= 8;
        tvDelay_ = value;
      }
    }
    /// <summary>Gets whether the "tv_delay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTvDelay {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "tv_delay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTvDelay() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "dota_time" field.</summary>
    public const int DotaTimeFieldNumber = 5;
    private readonly static int DotaTimeDefaultValue = 0;

    private int dotaTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DotaTime {
      get { if ((_hasBits0 & 16) != 0) { return dotaTime_; } else { return DotaTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        dotaTime_ = value;
      }
    }
    /// <summary>Gets whether the "dota_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDotaTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "dota_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDotaTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "replay_time" field.</summary>
    public const int ReplayTimeFieldNumber = 6;
    private readonly static float ReplayTimeDefaultValue = 0F;

    private float replayTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReplayTime {
      get { if ((_hasBits0 & 32) != 0) { return replayTime_; } else { return ReplayTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        replayTime_ = value;
      }
    }
    /// <summary>Gets whether the "replay_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReplayTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "replay_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReplayTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "loot_list" field.</summary>
    public const int LootListFieldNumber = 7;
    private readonly static string LootListDefaultValue = "";

    private string lootList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LootList {
      get { return lootList_ ?? LootListDefaultValue; }
      set {
        lootList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "loot_list" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLootList {
      get { return lootList_ != null; }
    }
    /// <summary>Clears the value of the "loot_list" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLootList() {
      lootList_ = null;
    }

    /// <summary>Field number for the "event_team" field.</summary>
    public const int EventTeamFieldNumber = 8;
    private readonly static uint EventTeamDefaultValue = 0;

    private uint eventTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventTeam {
      get { if ((_hasBits0 & 64) != 0) { return eventTeam_; } else { return EventTeamDefaultValue; } }
      set {
        _hasBits0 |= 64;
        eventTeam_ = value;
      }
    }
    /// <summary>Gets whether the "event_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventTeam {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "event_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventTeam() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "multi_kill_count" field.</summary>
    public const int MultiKillCountFieldNumber = 9;
    private readonly static uint MultiKillCountDefaultValue = 0;

    private uint multiKillCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MultiKillCount {
      get { if ((_hasBits0 & 128) != 0) { return multiKillCount_; } else { return MultiKillCountDefaultValue; } }
      set {
        _hasBits0 |= 128;
        multiKillCount_ = value;
      }
    }
    /// <summary>Gets whether the "multi_kill_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMultiKillCount {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "multi_kill_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMultiKillCount() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "winner_score" field.</summary>
    public const int WinnerScoreFieldNumber = 10;
    private readonly static uint WinnerScoreDefaultValue = 0;

    private uint winnerScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinnerScore {
      get { if ((_hasBits0 & 256) != 0) { return winnerScore_; } else { return WinnerScoreDefaultValue; } }
      set {
        _hasBits0 |= 256;
        winnerScore_ = value;
      }
    }
    /// <summary>Gets whether the "winner_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWinnerScore {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "winner_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWinnerScore() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "loser_score" field.</summary>
    public const int LoserScoreFieldNumber = 11;
    private readonly static uint LoserScoreDefaultValue = 0;

    private uint loserScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoserScore {
      get { if ((_hasBits0 & 512) != 0) { return loserScore_; } else { return LoserScoreDefaultValue; } }
      set {
        _hasBits0 |= 512;
        loserScore_ = value;
      }
    }
    /// <summary>Gets whether the "loser_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLoserScore {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "loser_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLoserScore() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "hero_statues" field.</summary>
    public const int HeroStatuesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CProtoItemHeroStatue> _repeated_heroStatues_codec
        = pb::FieldCodec.ForMessage(98, global::Steam.Protos.Dota2.CProtoItemHeroStatue.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CProtoItemHeroStatue> heroStatues_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CProtoItemHeroStatue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CProtoItemHeroStatue> HeroStatues {
      get { return heroStatues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTournamentItemEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTournamentItemEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KillerAccountId != other.KillerAccountId) return false;
      if (VictimAccountId != other.VictimAccountId) return false;
      if (EventType != other.EventType) return false;
      if (TvDelay != other.TvDelay) return false;
      if (DotaTime != other.DotaTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReplayTime, other.ReplayTime)) return false;
      if (LootList != other.LootList) return false;
      if (EventTeam != other.EventTeam) return false;
      if (MultiKillCount != other.MultiKillCount) return false;
      if (WinnerScore != other.WinnerScore) return false;
      if (LoserScore != other.LoserScore) return false;
      if(!heroStatues_.Equals(other.heroStatues_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKillerAccountId) hash ^= KillerAccountId.GetHashCode();
      if (HasVictimAccountId) hash ^= VictimAccountId.GetHashCode();
      if (HasEventType) hash ^= EventType.GetHashCode();
      if (HasTvDelay) hash ^= TvDelay.GetHashCode();
      if (HasDotaTime) hash ^= DotaTime.GetHashCode();
      if (HasReplayTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReplayTime);
      if (HasLootList) hash ^= LootList.GetHashCode();
      if (HasEventTeam) hash ^= EventTeam.GetHashCode();
      if (HasMultiKillCount) hash ^= MultiKillCount.GetHashCode();
      if (HasWinnerScore) hash ^= WinnerScore.GetHashCode();
      if (HasLoserScore) hash ^= LoserScore.GetHashCode();
      hash ^= heroStatues_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKillerAccountId) {
        output.WriteRawTag(13);
        output.WriteFixed32(KillerAccountId);
      }
      if (HasVictimAccountId) {
        output.WriteRawTag(21);
        output.WriteFixed32(VictimAccountId);
      }
      if (HasEventType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EventType);
      }
      if (HasTvDelay) {
        output.WriteRawTag(32);
        output.WriteInt32(TvDelay);
      }
      if (HasDotaTime) {
        output.WriteRawTag(40);
        output.WriteInt32(DotaTime);
      }
      if (HasReplayTime) {
        output.WriteRawTag(53);
        output.WriteFloat(ReplayTime);
      }
      if (HasLootList) {
        output.WriteRawTag(58);
        output.WriteString(LootList);
      }
      if (HasEventTeam) {
        output.WriteRawTag(64);
        output.WriteUInt32(EventTeam);
      }
      if (HasMultiKillCount) {
        output.WriteRawTag(72);
        output.WriteUInt32(MultiKillCount);
      }
      if (HasWinnerScore) {
        output.WriteRawTag(80);
        output.WriteUInt32(WinnerScore);
      }
      if (HasLoserScore) {
        output.WriteRawTag(88);
        output.WriteUInt32(LoserScore);
      }
      heroStatues_.WriteTo(output, _repeated_heroStatues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKillerAccountId) {
        output.WriteRawTag(13);
        output.WriteFixed32(KillerAccountId);
      }
      if (HasVictimAccountId) {
        output.WriteRawTag(21);
        output.WriteFixed32(VictimAccountId);
      }
      if (HasEventType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EventType);
      }
      if (HasTvDelay) {
        output.WriteRawTag(32);
        output.WriteInt32(TvDelay);
      }
      if (HasDotaTime) {
        output.WriteRawTag(40);
        output.WriteInt32(DotaTime);
      }
      if (HasReplayTime) {
        output.WriteRawTag(53);
        output.WriteFloat(ReplayTime);
      }
      if (HasLootList) {
        output.WriteRawTag(58);
        output.WriteString(LootList);
      }
      if (HasEventTeam) {
        output.WriteRawTag(64);
        output.WriteUInt32(EventTeam);
      }
      if (HasMultiKillCount) {
        output.WriteRawTag(72);
        output.WriteUInt32(MultiKillCount);
      }
      if (HasWinnerScore) {
        output.WriteRawTag(80);
        output.WriteUInt32(WinnerScore);
      }
      if (HasLoserScore) {
        output.WriteRawTag(88);
        output.WriteUInt32(LoserScore);
      }
      heroStatues_.WriteTo(ref output, _repeated_heroStatues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKillerAccountId) {
        size += 1 + 4;
      }
      if (HasVictimAccountId) {
        size += 1 + 4;
      }
      if (HasEventType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (HasTvDelay) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TvDelay);
      }
      if (HasDotaTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DotaTime);
      }
      if (HasReplayTime) {
        size += 1 + 4;
      }
      if (HasLootList) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LootList);
      }
      if (HasEventTeam) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventTeam);
      }
      if (HasMultiKillCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MultiKillCount);
      }
      if (HasWinnerScore) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinnerScore);
      }
      if (HasLoserScore) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoserScore);
      }
      size += heroStatues_.CalculateSize(_repeated_heroStatues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTournamentItemEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasKillerAccountId) {
        KillerAccountId = other.KillerAccountId;
      }
      if (other.HasVictimAccountId) {
        VictimAccountId = other.VictimAccountId;
      }
      if (other.HasEventType) {
        EventType = other.EventType;
      }
      if (other.HasTvDelay) {
        TvDelay = other.TvDelay;
      }
      if (other.HasDotaTime) {
        DotaTime = other.DotaTime;
      }
      if (other.HasReplayTime) {
        ReplayTime = other.ReplayTime;
      }
      if (other.HasLootList) {
        LootList = other.LootList;
      }
      if (other.HasEventTeam) {
        EventTeam = other.EventTeam;
      }
      if (other.HasMultiKillCount) {
        MultiKillCount = other.MultiKillCount;
      }
      if (other.HasWinnerScore) {
        WinnerScore = other.WinnerScore;
      }
      if (other.HasLoserScore) {
        LoserScore = other.LoserScore;
      }
      heroStatues_.Add(other.heroStatues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            KillerAccountId = input.ReadFixed32();
            break;
          }
          case 21: {
            VictimAccountId = input.ReadFixed32();
            break;
          }
          case 24: {
            EventType = (global::Steam.Protos.Dota2.DOTA_TournamentEvents) input.ReadEnum();
            break;
          }
          case 32: {
            TvDelay = input.ReadInt32();
            break;
          }
          case 40: {
            DotaTime = input.ReadInt32();
            break;
          }
          case 53: {
            ReplayTime = input.ReadFloat();
            break;
          }
          case 58: {
            LootList = input.ReadString();
            break;
          }
          case 64: {
            EventTeam = input.ReadUInt32();
            break;
          }
          case 72: {
            MultiKillCount = input.ReadUInt32();
            break;
          }
          case 80: {
            WinnerScore = input.ReadUInt32();
            break;
          }
          case 88: {
            LoserScore = input.ReadUInt32();
            break;
          }
          case 98: {
            heroStatues_.AddEntriesFrom(input, _repeated_heroStatues_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            KillerAccountId = input.ReadFixed32();
            break;
          }
          case 21: {
            VictimAccountId = input.ReadFixed32();
            break;
          }
          case 24: {
            EventType = (global::Steam.Protos.Dota2.DOTA_TournamentEvents) input.ReadEnum();
            break;
          }
          case 32: {
            TvDelay = input.ReadInt32();
            break;
          }
          case 40: {
            DotaTime = input.ReadInt32();
            break;
          }
          case 53: {
            ReplayTime = input.ReadFloat();
            break;
          }
          case 58: {
            LootList = input.ReadString();
            break;
          }
          case 64: {
            EventTeam = input.ReadUInt32();
            break;
          }
          case 72: {
            MultiKillCount = input.ReadUInt32();
            break;
          }
          case 80: {
            WinnerScore = input.ReadUInt32();
            break;
          }
          case 88: {
            LoserScore = input.ReadUInt32();
            break;
          }
          case 98: {
            heroStatues_.AddEntriesFrom(ref input, _repeated_heroStatues_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgTournamentItemEventResponse : pb::IMessage<CMsgTournamentItemEventResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgTournamentItemEventResponse> _parser = new pb::MessageParser<CMsgTournamentItemEventResponse>(() => new CMsgTournamentItemEventResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTournamentItemEventResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTournamentItemEventResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTournamentItemEventResponse(CMsgTournamentItemEventResponse other) : this() {
      _hasBits0 = other._hasBits0;
      eventType_ = other.eventType_;
      viewersGranted_ = other.viewersGranted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTournamentItemEventResponse Clone() {
      return new CMsgTournamentItemEventResponse(this);
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.DOTA_TournamentEvents EventTypeDefaultValue = global::Steam.Protos.Dota2.DOTA_TournamentEvents.TeFirstBlood;

    private global::Steam.Protos.Dota2.DOTA_TournamentEvents eventType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_TournamentEvents EventType {
      get { if ((_hasBits0 & 1) != 0) { return eventType_; } else { return EventTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventType_ = value;
      }
    }
    /// <summary>Gets whether the "event_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "viewers_granted" field.</summary>
    public const int ViewersGrantedFieldNumber = 6;
    private readonly static uint ViewersGrantedDefaultValue = 0;

    private uint viewersGranted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ViewersGranted {
      get { if ((_hasBits0 & 2) != 0) { return viewersGranted_; } else { return ViewersGrantedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        viewersGranted_ = value;
      }
    }
    /// <summary>Gets whether the "viewers_granted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasViewersGranted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "viewers_granted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViewersGranted() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTournamentItemEventResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTournamentItemEventResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (ViewersGranted != other.ViewersGranted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventType) hash ^= EventType.GetHashCode();
      if (HasViewersGranted) hash ^= ViewersGranted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (HasViewersGranted) {
        output.WriteRawTag(48);
        output.WriteUInt32(ViewersGranted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (HasViewersGranted) {
        output.WriteRawTag(48);
        output.WriteUInt32(ViewersGranted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (HasViewersGranted) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ViewersGranted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTournamentItemEventResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasEventType) {
        EventType = other.EventType;
      }
      if (other.HasViewersGranted) {
        ViewersGranted = other.ViewersGranted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventType = (global::Steam.Protos.Dota2.DOTA_TournamentEvents) input.ReadEnum();
            break;
          }
          case 48: {
            ViewersGranted = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EventType = (global::Steam.Protos.Dota2.DOTA_TournamentEvents) input.ReadEnum();
            break;
          }
          case 48: {
            ViewersGranted = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgTeamFanfare : pb::IMessage<CMsgTeamFanfare>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgTeamFanfare> _parser = new pb::MessageParser<CMsgTeamFanfare>(() => new CMsgTeamFanfare());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTeamFanfare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTeamFanfare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTeamFanfare(CMsgTeamFanfare other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTeamFanfare Clone() {
      return new CMsgTeamFanfare(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTeamFanfare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTeamFanfare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTeamFanfare other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgResponseTeamFanfare : pb::IMessage<CMsgResponseTeamFanfare>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgResponseTeamFanfare> _parser = new pb::MessageParser<CMsgResponseTeamFanfare>(() => new CMsgResponseTeamFanfare());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgResponseTeamFanfare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgResponseTeamFanfare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgResponseTeamFanfare(CMsgResponseTeamFanfare other) : this() {
      _hasBits0 = other._hasBits0;
      fanfareGoodguys_ = other.fanfareGoodguys_;
      fanfareBadguys_ = other.fanfareBadguys_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgResponseTeamFanfare Clone() {
      return new CMsgResponseTeamFanfare(this);
    }

    /// <summary>Field number for the "fanfare_goodguys" field.</summary>
    public const int FanfareGoodguysFieldNumber = 1;
    private readonly static uint FanfareGoodguysDefaultValue = 0;

    private uint fanfareGoodguys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FanfareGoodguys {
      get { if ((_hasBits0 & 1) != 0) { return fanfareGoodguys_; } else { return FanfareGoodguysDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fanfareGoodguys_ = value;
      }
    }
    /// <summary>Gets whether the "fanfare_goodguys" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFanfareGoodguys {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fanfare_goodguys" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFanfareGoodguys() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "fanfare_badguys" field.</summary>
    public const int FanfareBadguysFieldNumber = 2;
    private readonly static uint FanfareBadguysDefaultValue = 0;

    private uint fanfareBadguys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FanfareBadguys {
      get { if ((_hasBits0 & 2) != 0) { return fanfareBadguys_; } else { return FanfareBadguysDefaultValue; } }
      set {
        _hasBits0 |= 2;
        fanfareBadguys_ = value;
      }
    }
    /// <summary>Gets whether the "fanfare_badguys" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFanfareBadguys {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "fanfare_badguys" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFanfareBadguys() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgResponseTeamFanfare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgResponseTeamFanfare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FanfareGoodguys != other.FanfareGoodguys) return false;
      if (FanfareBadguys != other.FanfareBadguys) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFanfareGoodguys) hash ^= FanfareGoodguys.GetHashCode();
      if (HasFanfareBadguys) hash ^= FanfareBadguys.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFanfareGoodguys) {
        output.WriteRawTag(8);
        output.WriteUInt32(FanfareGoodguys);
      }
      if (HasFanfareBadguys) {
        output.WriteRawTag(16);
        output.WriteUInt32(FanfareBadguys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFanfareGoodguys) {
        output.WriteRawTag(8);
        output.WriteUInt32(FanfareGoodguys);
      }
      if (HasFanfareBadguys) {
        output.WriteRawTag(16);
        output.WriteUInt32(FanfareBadguys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFanfareGoodguys) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FanfareGoodguys);
      }
      if (HasFanfareBadguys) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FanfareBadguys);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgResponseTeamFanfare other) {
      if (other == null) {
        return;
      }
      if (other.HasFanfareGoodguys) {
        FanfareGoodguys = other.FanfareGoodguys;
      }
      if (other.HasFanfareBadguys) {
        FanfareBadguys = other.FanfareBadguys;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FanfareGoodguys = input.ReadUInt32();
            break;
          }
          case 16: {
            FanfareBadguys = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FanfareGoodguys = input.ReadUInt32();
            break;
          }
          case 16: {
            FanfareBadguys = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTAAwardEventPoints : pb::IMessage<CMsgDOTAAwardEventPoints>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAAwardEventPoints> _parser = new pb::MessageParser<CMsgDOTAAwardEventPoints>(() => new CMsgDOTAAwardEventPoints());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAAwardEventPoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAAwardEventPoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAAwardEventPoints(CMsgDOTAAwardEventPoints other) : this() {
      _hasBits0 = other._hasBits0;
      awardPoints_ = other.awardPoints_.Clone();
      matchId_ = other.matchId_;
      eventId_ = other.eventId_;
      timestamp_ = other.timestamp_;
      auditAction_ = other.auditAction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAAwardEventPoints Clone() {
      return new CMsgDOTAAwardEventPoints(this);
    }

    /// <summary>Field number for the "award_points" field.</summary>
    public const int AwardPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAAwardEventPoints.Types.AwardPoints> _repeated_awardPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgDOTAAwardEventPoints.Types.AwardPoints.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAAwardEventPoints.Types.AwardPoints> awardPoints_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAAwardEventPoints.Types.AwardPoints>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAAwardEventPoints.Types.AwardPoints> AwardPoints {
      get { return awardPoints_; }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 4;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 2) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private readonly static uint TimestampDefaultValue = 0;

    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { if ((_hasBits0 & 4) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "audit_action" field.</summary>
    public const int AuditActionFieldNumber = 6;
    private readonly static uint AuditActionDefaultValue = 0;

    private uint auditAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AuditAction {
      get { if ((_hasBits0 & 8) != 0) { return auditAction_; } else { return AuditActionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        auditAction_ = value;
      }
    }
    /// <summary>Gets whether the "audit_action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuditAction {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "audit_action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuditAction() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAAwardEventPoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAAwardEventPoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!awardPoints_.Equals(other.awardPoints_)) return false;
      if (MatchId != other.MatchId) return false;
      if (EventId != other.EventId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (AuditAction != other.AuditAction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= awardPoints_.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasAuditAction) hash ^= AuditAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      awardPoints_.WriteTo(output, _repeated_awardPoints_codec);
      if (HasMatchId) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (HasEventId) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EventId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(40);
        output.WriteUInt32(Timestamp);
      }
      if (HasAuditAction) {
        output.WriteRawTag(48);
        output.WriteUInt32(AuditAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      awardPoints_.WriteTo(ref output, _repeated_awardPoints_codec);
      if (HasMatchId) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (HasEventId) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EventId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(40);
        output.WriteUInt32(Timestamp);
      }
      if (HasAuditAction) {
        output.WriteRawTag(48);
        output.WriteUInt32(AuditAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awardPoints_.CalculateSize(_repeated_awardPoints_codec);
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (HasAuditAction) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AuditAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAAwardEventPoints other) {
      if (other == null) {
        return;
      }
      awardPoints_.Add(other.awardPoints_);
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasAuditAction) {
        AuditAction = other.AuditAction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            awardPoints_.AddEntriesFrom(input, _repeated_awardPoints_codec);
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 32: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 40: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 48: {
            AuditAction = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            awardPoints_.AddEntriesFrom(ref input, _repeated_awardPoints_codec);
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 32: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 40: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 48: {
            AuditAction = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTAAwardEventPoints message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AwardPoints : pb::IMessage<AwardPoints>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AwardPoints> _parser = new pb::MessageParser<AwardPoints>(() => new AwardPoints());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AwardPoints> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAAwardEventPoints.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AwardPoints() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AwardPoints(AwardPoints other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          points_ = other.points_;
          premiumPoints_ = other.premiumPoints_;
          tradeBanTime_ = other.tradeBanTime_;
          eligibleForPeriodicAdjustment_ = other.eligibleForPeriodicAdjustment_;
          pointCapPeriodicResourceId_ = other.pointCapPeriodicResourceId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AwardPoints Clone() {
          return new AwardPoints(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 2;
        private readonly static int PointsDefaultValue = 0;

        private int points_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Points {
          get { if ((_hasBits0 & 2) != 0) { return points_; } else { return PointsDefaultValue; } }
          set {
            _hasBits0 |= 2;
            points_ = value;
          }
        }
        /// <summary>Gets whether the "points" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPoints {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "points" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPoints() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "premium_points" field.</summary>
        public const int PremiumPointsFieldNumber = 3;
        private readonly static int PremiumPointsDefaultValue = 0;

        private int premiumPoints_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PremiumPoints {
          get { if ((_hasBits0 & 4) != 0) { return premiumPoints_; } else { return PremiumPointsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            premiumPoints_ = value;
          }
        }
        /// <summary>Gets whether the "premium_points" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPremiumPoints {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "premium_points" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPremiumPoints() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "trade_ban_time" field.</summary>
        public const int TradeBanTimeFieldNumber = 5;
        private readonly static uint TradeBanTimeDefaultValue = 0;

        private uint tradeBanTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TradeBanTime {
          get { if ((_hasBits0 & 8) != 0) { return tradeBanTime_; } else { return TradeBanTimeDefaultValue; } }
          set {
            _hasBits0 |= 8;
            tradeBanTime_ = value;
          }
        }
        /// <summary>Gets whether the "trade_ban_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTradeBanTime {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "trade_ban_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTradeBanTime() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "eligible_for_periodic_adjustment" field.</summary>
        public const int EligibleForPeriodicAdjustmentFieldNumber = 6;
        private readonly static bool EligibleForPeriodicAdjustmentDefaultValue = false;

        private bool eligibleForPeriodicAdjustment_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EligibleForPeriodicAdjustment {
          get { if ((_hasBits0 & 16) != 0) { return eligibleForPeriodicAdjustment_; } else { return EligibleForPeriodicAdjustmentDefaultValue; } }
          set {
            _hasBits0 |= 16;
            eligibleForPeriodicAdjustment_ = value;
          }
        }
        /// <summary>Gets whether the "eligible_for_periodic_adjustment" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEligibleForPeriodicAdjustment {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "eligible_for_periodic_adjustment" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEligibleForPeriodicAdjustment() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "point_cap_periodic_resource_id" field.</summary>
        public const int PointCapPeriodicResourceIdFieldNumber = 7;
        private readonly static uint PointCapPeriodicResourceIdDefaultValue = 0;

        private uint pointCapPeriodicResourceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PointCapPeriodicResourceId {
          get { if ((_hasBits0 & 32) != 0) { return pointCapPeriodicResourceId_; } else { return PointCapPeriodicResourceIdDefaultValue; } }
          set {
            _hasBits0 |= 32;
            pointCapPeriodicResourceId_ = value;
          }
        }
        /// <summary>Gets whether the "point_cap_periodic_resource_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPointCapPeriodicResourceId {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "point_cap_periodic_resource_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPointCapPeriodicResourceId() {
          _hasBits0 &= ~32;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AwardPoints);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AwardPoints other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (Points != other.Points) return false;
          if (PremiumPoints != other.PremiumPoints) return false;
          if (TradeBanTime != other.TradeBanTime) return false;
          if (EligibleForPeriodicAdjustment != other.EligibleForPeriodicAdjustment) return false;
          if (PointCapPeriodicResourceId != other.PointCapPeriodicResourceId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasPoints) hash ^= Points.GetHashCode();
          if (HasPremiumPoints) hash ^= PremiumPoints.GetHashCode();
          if (HasTradeBanTime) hash ^= TradeBanTime.GetHashCode();
          if (HasEligibleForPeriodicAdjustment) hash ^= EligibleForPeriodicAdjustment.GetHashCode();
          if (HasPointCapPeriodicResourceId) hash ^= PointCapPeriodicResourceId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasPoints) {
            output.WriteRawTag(16);
            output.WriteInt32(Points);
          }
          if (HasPremiumPoints) {
            output.WriteRawTag(24);
            output.WriteInt32(PremiumPoints);
          }
          if (HasTradeBanTime) {
            output.WriteRawTag(40);
            output.WriteUInt32(TradeBanTime);
          }
          if (HasEligibleForPeriodicAdjustment) {
            output.WriteRawTag(48);
            output.WriteBool(EligibleForPeriodicAdjustment);
          }
          if (HasPointCapPeriodicResourceId) {
            output.WriteRawTag(56);
            output.WriteUInt32(PointCapPeriodicResourceId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasPoints) {
            output.WriteRawTag(16);
            output.WriteInt32(Points);
          }
          if (HasPremiumPoints) {
            output.WriteRawTag(24);
            output.WriteInt32(PremiumPoints);
          }
          if (HasTradeBanTime) {
            output.WriteRawTag(40);
            output.WriteUInt32(TradeBanTime);
          }
          if (HasEligibleForPeriodicAdjustment) {
            output.WriteRawTag(48);
            output.WriteBool(EligibleForPeriodicAdjustment);
          }
          if (HasPointCapPeriodicResourceId) {
            output.WriteRawTag(56);
            output.WriteUInt32(PointCapPeriodicResourceId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasPoints) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Points);
          }
          if (HasPremiumPoints) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PremiumPoints);
          }
          if (HasTradeBanTime) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradeBanTime);
          }
          if (HasEligibleForPeriodicAdjustment) {
            size += 1 + 1;
          }
          if (HasPointCapPeriodicResourceId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PointCapPeriodicResourceId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AwardPoints other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasPoints) {
            Points = other.Points;
          }
          if (other.HasPremiumPoints) {
            PremiumPoints = other.PremiumPoints;
          }
          if (other.HasTradeBanTime) {
            TradeBanTime = other.TradeBanTime;
          }
          if (other.HasEligibleForPeriodicAdjustment) {
            EligibleForPeriodicAdjustment = other.EligibleForPeriodicAdjustment;
          }
          if (other.HasPointCapPeriodicResourceId) {
            PointCapPeriodicResourceId = other.PointCapPeriodicResourceId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                Points = input.ReadInt32();
                break;
              }
              case 24: {
                PremiumPoints = input.ReadInt32();
                break;
              }
              case 40: {
                TradeBanTime = input.ReadUInt32();
                break;
              }
              case 48: {
                EligibleForPeriodicAdjustment = input.ReadBool();
                break;
              }
              case 56: {
                PointCapPeriodicResourceId = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                Points = input.ReadInt32();
                break;
              }
              case 24: {
                PremiumPoints = input.ReadInt32();
                break;
              }
              case 40: {
                TradeBanTime = input.ReadUInt32();
                break;
              }
              case 48: {
                EligibleForPeriodicAdjustment = input.ReadBool();
                break;
              }
              case 56: {
                PointCapPeriodicResourceId = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGCToServerPingRequest : pb::IMessage<CMsgGCToServerPingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerPingRequest> _parser = new pb::MessageParser<CMsgGCToServerPingRequest>(() => new CMsgGCToServerPingRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerPingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerPingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerPingRequest(CMsgGCToServerPingRequest other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      requestTime_ = other.requestTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerPingRequest Clone() {
      return new CMsgGCToServerPingRequest(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private readonly static ulong RequestTimeDefaultValue = 0UL;

    private ulong requestTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestTime {
      get { if ((_hasBits0 & 2) != 0) { return requestTime_; } else { return RequestTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestTime_ = value;
      }
    }
    /// <summary>Gets whether the "request_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerPingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerPingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (RequestTime != other.RequestTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasRequestTime) hash ^= RequestTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(9);
        output.WriteFixed64(RequestId);
      }
      if (HasRequestTime) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(9);
        output.WriteFixed64(RequestId);
      }
      if (HasRequestTime) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + 8;
      }
      if (HasRequestTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerPingRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasRequestTime) {
        RequestTime = other.RequestTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            RequestId = input.ReadFixed64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            RequestId = input.ReadFixed64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToServerPingResponse : pb::IMessage<CMsgGCToServerPingResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerPingResponse> _parser = new pb::MessageParser<CMsgGCToServerPingResponse>(() => new CMsgGCToServerPingResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerPingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerPingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerPingResponse(CMsgGCToServerPingResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      requestTime_ = other.requestTime_;
      cluster_ = other.cluster_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerPingResponse Clone() {
      return new CMsgGCToServerPingResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private readonly static ulong RequestTimeDefaultValue = 0UL;

    private ulong requestTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestTime {
      get { if ((_hasBits0 & 2) != 0) { return requestTime_; } else { return RequestTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestTime_ = value;
      }
    }
    /// <summary>Gets whether the "request_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 3;
    private readonly static uint ClusterDefaultValue = 0;

    private uint cluster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cluster {
      get { if ((_hasBits0 & 4) != 0) { return cluster_; } else { return ClusterDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cluster_ = value;
      }
    }
    /// <summary>Gets whether the "cluster" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCluster {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cluster" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCluster() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerPingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerPingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (RequestTime != other.RequestTime) return false;
      if (Cluster != other.Cluster) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasRequestTime) hash ^= RequestTime.GetHashCode();
      if (HasCluster) hash ^= Cluster.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(9);
        output.WriteFixed64(RequestId);
      }
      if (HasRequestTime) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (HasCluster) {
        output.WriteRawTag(24);
        output.WriteUInt32(Cluster);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(9);
        output.WriteFixed64(RequestId);
      }
      if (HasRequestTime) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (HasCluster) {
        output.WriteRawTag(24);
        output.WriteUInt32(Cluster);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + 8;
      }
      if (HasRequestTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (HasCluster) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cluster);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerPingResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasRequestTime) {
        RequestTime = other.RequestTime;
      }
      if (other.HasCluster) {
        Cluster = other.Cluster;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            RequestId = input.ReadFixed64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            Cluster = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            RequestId = input.ReadFixed64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            Cluster = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCMatchConnectionStats : pb::IMessage<CMsgServerToGCMatchConnectionStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCMatchConnectionStats> _parser = new pb::MessageParser<CMsgServerToGCMatchConnectionStats>(() => new CMsgServerToGCMatchConnectionStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCMatchConnectionStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchConnectionStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchConnectionStats(CMsgServerToGCMatchConnectionStats other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      regionId_ = other.regionId_;
      leagueId_ = other.leagueId_;
      players_ = other.players_.Clone();
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchConnectionStats Clone() {
      return new CMsgServerToGCMatchConnectionStats(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "region_id" field.</summary>
    public const int RegionIdFieldNumber = 2;
    private readonly static uint RegionIdDefaultValue = 0;

    private uint regionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RegionId {
      get { if ((_hasBits0 & 2) != 0) { return regionId_; } else { return RegionIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        regionId_ = value;
      }
    }
    /// <summary>Gets whether the "region_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegionId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "region_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegionId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "league_id" field.</summary>
    public const int LeagueIdFieldNumber = 3;
    private readonly static uint LeagueIdDefaultValue = 0;

    private uint leagueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeagueId {
      get { if ((_hasBits0 & 4) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leagueId_ = value;
      }
    }
    /// <summary>Gets whether the "league_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "league_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCMatchConnectionStats.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CMsgServerToGCMatchConnectionStats.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchConnectionStats.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchConnectionStats.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchConnectionStats.Types.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 5;
    private readonly static uint ClusterIdDefaultValue = 0;

    private uint clusterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClusterId {
      get { if ((_hasBits0 & 8) != 0) { return clusterId_; } else { return ClusterIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        clusterId_ = value;
      }
    }
    /// <summary>Gets whether the "cluster_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClusterId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cluster_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClusterId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCMatchConnectionStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCMatchConnectionStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (RegionId != other.RegionId) return false;
      if (LeagueId != other.LeagueId) return false;
      if(!players_.Equals(other.players_)) return false;
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasRegionId) hash ^= RegionId.GetHashCode();
      if (HasLeagueId) hash ^= LeagueId.GetHashCode();
      hash ^= players_.GetHashCode();
      if (HasClusterId) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasRegionId) {
        output.WriteRawTag(16);
        output.WriteUInt32(RegionId);
      }
      if (HasLeagueId) {
        output.WriteRawTag(24);
        output.WriteUInt32(LeagueId);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (HasClusterId) {
        output.WriteRawTag(40);
        output.WriteUInt32(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasRegionId) {
        output.WriteRawTag(16);
        output.WriteUInt32(RegionId);
      }
      if (HasLeagueId) {
        output.WriteRawTag(24);
        output.WriteUInt32(LeagueId);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      if (HasClusterId) {
        output.WriteRawTag(40);
        output.WriteUInt32(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasRegionId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegionId);
      }
      if (HasLeagueId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (HasClusterId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCMatchConnectionStats other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasRegionId) {
        RegionId = other.RegionId;
      }
      if (other.HasLeagueId) {
        LeagueId = other.LeagueId;
      }
      players_.Add(other.players_);
      if (other.HasClusterId) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            RegionId = input.ReadUInt32();
            break;
          }
          case 24: {
            LeagueId = input.ReadUInt32();
            break;
          }
          case 34: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 40: {
            ClusterId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            RegionId = input.ReadUInt32();
            break;
          }
          case 24: {
            LeagueId = input.ReadUInt32();
            break;
          }
          case 34: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 40: {
            ClusterId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCMatchConnectionStats message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCMatchConnectionStats.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          ip_ = other.ip_;
          avgPingMs_ = other.avgPingMs_;
          packetLoss_ = other.packetLoss_;
          pingDeviation_ = other.pingDeviation_;
          fullResends_ = other.fullResends_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "ip" field.</summary>
        public const int IpFieldNumber = 2;
        private readonly static uint IpDefaultValue = 0;

        private uint ip_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Ip {
          get { if ((_hasBits0 & 2) != 0) { return ip_; } else { return IpDefaultValue; } }
          set {
            _hasBits0 |= 2;
            ip_ = value;
          }
        }
        /// <summary>Gets whether the "ip" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIp {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "ip" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIp() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "avg_ping_ms" field.</summary>
        public const int AvgPingMsFieldNumber = 3;
        private readonly static uint AvgPingMsDefaultValue = 0;

        private uint avgPingMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AvgPingMs {
          get { if ((_hasBits0 & 4) != 0) { return avgPingMs_; } else { return AvgPingMsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            avgPingMs_ = value;
          }
        }
        /// <summary>Gets whether the "avg_ping_ms" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvgPingMs {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "avg_ping_ms" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvgPingMs() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "packet_loss" field.</summary>
        public const int PacketLossFieldNumber = 5;
        private readonly static float PacketLossDefaultValue = 0F;

        private float packetLoss_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PacketLoss {
          get { if ((_hasBits0 & 8) != 0) { return packetLoss_; } else { return PacketLossDefaultValue; } }
          set {
            _hasBits0 |= 8;
            packetLoss_ = value;
          }
        }
        /// <summary>Gets whether the "packet_loss" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPacketLoss {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "packet_loss" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPacketLoss() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "ping_deviation" field.</summary>
        public const int PingDeviationFieldNumber = 6;
        private readonly static float PingDeviationDefaultValue = 0F;

        private float pingDeviation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PingDeviation {
          get { if ((_hasBits0 & 16) != 0) { return pingDeviation_; } else { return PingDeviationDefaultValue; } }
          set {
            _hasBits0 |= 16;
            pingDeviation_ = value;
          }
        }
        /// <summary>Gets whether the "ping_deviation" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPingDeviation {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "ping_deviation" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPingDeviation() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "full_resends" field.</summary>
        public const int FullResendsFieldNumber = 7;
        private readonly static uint FullResendsDefaultValue = 0;

        private uint fullResends_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FullResends {
          get { if ((_hasBits0 & 32) != 0) { return fullResends_; } else { return FullResendsDefaultValue; } }
          set {
            _hasBits0 |= 32;
            fullResends_ = value;
          }
        }
        /// <summary>Gets whether the "full_resends" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFullResends {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "full_resends" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFullResends() {
          _hasBits0 &= ~32;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (Ip != other.Ip) return false;
          if (AvgPingMs != other.AvgPingMs) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PacketLoss, other.PacketLoss)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PingDeviation, other.PingDeviation)) return false;
          if (FullResends != other.FullResends) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasIp) hash ^= Ip.GetHashCode();
          if (HasAvgPingMs) hash ^= AvgPingMs.GetHashCode();
          if (HasPacketLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PacketLoss);
          if (HasPingDeviation) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PingDeviation);
          if (HasFullResends) hash ^= FullResends.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasIp) {
            output.WriteRawTag(21);
            output.WriteFixed32(Ip);
          }
          if (HasAvgPingMs) {
            output.WriteRawTag(24);
            output.WriteUInt32(AvgPingMs);
          }
          if (HasPacketLoss) {
            output.WriteRawTag(45);
            output.WriteFloat(PacketLoss);
          }
          if (HasPingDeviation) {
            output.WriteRawTag(53);
            output.WriteFloat(PingDeviation);
          }
          if (HasFullResends) {
            output.WriteRawTag(56);
            output.WriteUInt32(FullResends);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasIp) {
            output.WriteRawTag(21);
            output.WriteFixed32(Ip);
          }
          if (HasAvgPingMs) {
            output.WriteRawTag(24);
            output.WriteUInt32(AvgPingMs);
          }
          if (HasPacketLoss) {
            output.WriteRawTag(45);
            output.WriteFloat(PacketLoss);
          }
          if (HasPingDeviation) {
            output.WriteRawTag(53);
            output.WriteFloat(PingDeviation);
          }
          if (HasFullResends) {
            output.WriteRawTag(56);
            output.WriteUInt32(FullResends);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasIp) {
            size += 1 + 4;
          }
          if (HasAvgPingMs) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgPingMs);
          }
          if (HasPacketLoss) {
            size += 1 + 4;
          }
          if (HasPingDeviation) {
            size += 1 + 4;
          }
          if (HasFullResends) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FullResends);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasIp) {
            Ip = other.Ip;
          }
          if (other.HasAvgPingMs) {
            AvgPingMs = other.AvgPingMs;
          }
          if (other.HasPacketLoss) {
            PacketLoss = other.PacketLoss;
          }
          if (other.HasPingDeviation) {
            PingDeviation = other.PingDeviation;
          }
          if (other.HasFullResends) {
            FullResends = other.FullResends;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 21: {
                Ip = input.ReadFixed32();
                break;
              }
              case 24: {
                AvgPingMs = input.ReadUInt32();
                break;
              }
              case 45: {
                PacketLoss = input.ReadFloat();
                break;
              }
              case 53: {
                PingDeviation = input.ReadFloat();
                break;
              }
              case 56: {
                FullResends = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 21: {
                Ip = input.ReadFixed32();
                break;
              }
              case 24: {
                AvgPingMs = input.ReadUInt32();
                break;
              }
              case 45: {
                PacketLoss = input.ReadFloat();
                break;
              }
              case 53: {
                PingDeviation = input.ReadFloat();
                break;
              }
              case 56: {
                FullResends = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerGCUpdateSpectatorCount : pb::IMessage<CMsgServerGCUpdateSpectatorCount>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerGCUpdateSpectatorCount> _parser = new pb::MessageParser<CMsgServerGCUpdateSpectatorCount>(() => new CMsgServerGCUpdateSpectatorCount());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerGCUpdateSpectatorCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerGCUpdateSpectatorCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerGCUpdateSpectatorCount(CMsgServerGCUpdateSpectatorCount other) : this() {
      _hasBits0 = other._hasBits0;
      spectatorCount_ = other.spectatorCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerGCUpdateSpectatorCount Clone() {
      return new CMsgServerGCUpdateSpectatorCount(this);
    }

    /// <summary>Field number for the "spectator_count" field.</summary>
    public const int SpectatorCountFieldNumber = 1;
    private readonly static uint SpectatorCountDefaultValue = 0;

    private uint spectatorCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpectatorCount {
      get { if ((_hasBits0 & 1) != 0) { return spectatorCount_; } else { return SpectatorCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        spectatorCount_ = value;
      }
    }
    /// <summary>Gets whether the "spectator_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpectatorCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "spectator_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpectatorCount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerGCUpdateSpectatorCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerGCUpdateSpectatorCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpectatorCount != other.SpectatorCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSpectatorCount) hash ^= SpectatorCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSpectatorCount) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpectatorCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSpectatorCount) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpectatorCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSpectatorCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpectatorCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerGCUpdateSpectatorCount other) {
      if (other == null) {
        return;
      }
      if (other.HasSpectatorCount) {
        SpectatorCount = other.SpectatorCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpectatorCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpectatorCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSerializedCombatLog : pb::IMessage<CSerializedCombatLog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSerializedCombatLog> _parser = new pb::MessageParser<CSerializedCombatLog>(() => new CSerializedCombatLog());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSerializedCombatLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSerializedCombatLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSerializedCombatLog(CSerializedCombatLog other) : this() {
      _hasBits0 = other._hasBits0;
      version_ = other.version_;
      dictionary_ = other.dictionary_ != null ? other.dictionary_.Clone() : null;
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSerializedCombatLog Clone() {
      return new CSerializedCombatLog(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private readonly static uint VersionDefaultValue = 0;

    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { if ((_hasBits0 & 1) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersion() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "dictionary" field.</summary>
    public const int DictionaryFieldNumber = 2;
    private global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary dictionary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary Dictionary {
      get { return dictionary_; }
      set {
        dictionary_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry> entries_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSerializedCombatLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSerializedCombatLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Dictionary, other.Dictionary)) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVersion) hash ^= Version.GetHashCode();
      if (dictionary_ != null) hash ^= Dictionary.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (dictionary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Dictionary);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (dictionary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Dictionary);
      }
      entries_.WriteTo(ref output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (dictionary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dictionary);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSerializedCombatLog other) {
      if (other == null) {
        return;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.dictionary_ != null) {
        if (dictionary_ == null) {
          Dictionary = new global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary();
        }
        Dictionary.MergeFrom(other.Dictionary);
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            if (dictionary_ == null) {
              Dictionary = new global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary();
            }
            input.ReadMessage(Dictionary);
            break;
          }
          case 26: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            if (dictionary_ == null) {
              Dictionary = new global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary();
            }
            input.ReadMessage(Dictionary);
            break;
          }
          case 26: {
            entries_.AddEntriesFrom(ref input, _repeated_entries_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CSerializedCombatLog message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Dictionary : pb::IMessage<Dictionary>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Dictionary> _parser = new pb::MessageParser<Dictionary>(() => new Dictionary());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Dictionary> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CSerializedCombatLog.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Dictionary() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Dictionary(Dictionary other) : this() {
          strings_ = other.strings_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Dictionary Clone() {
          return new Dictionary(this);
        }

        /// <summary>Field number for the "strings" field.</summary>
        public const int StringsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary.Types.DictString> _repeated_strings_codec
            = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary.Types.DictString.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary.Types.DictString> strings_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary.Types.DictString>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary.Types.DictString> Strings {
          get { return strings_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Dictionary);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Dictionary other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!strings_.Equals(other.strings_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= strings_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          strings_.WriteTo(output, _repeated_strings_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          strings_.WriteTo(ref output, _repeated_strings_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += strings_.CalculateSize(_repeated_strings_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Dictionary other) {
          if (other == null) {
            return;
          }
          strings_.Add(other.strings_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                strings_.AddEntriesFrom(input, _repeated_strings_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                strings_.AddEntriesFrom(ref input, _repeated_strings_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Dictionary message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class DictString : pb::IMessage<DictString>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<DictString> _parser = new pb::MessageParser<DictString>(() => new DictString());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<DictString> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CSerializedCombatLog.Types.Dictionary.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DictString() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DictString(DictString other) : this() {
              _hasBits0 = other._hasBits0;
              id_ = other.id_;
              value_ = other.value_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DictString Clone() {
              return new DictString(this);
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 1;
            private readonly static uint IdDefaultValue = 0;

            private uint id_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Id {
              get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                id_ = value;
              }
            }
            /// <summary>Gets whether the "id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 2;
            private readonly static string ValueDefaultValue = "";

            private string value_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Value {
              get { return value_ ?? ValueDefaultValue; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "value" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasValue {
              get { return value_ != null; }
            }
            /// <summary>Clears the value of the "value" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearValue() {
              value_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as DictString);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(DictString other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Id != other.Id) return false;
              if (Value != other.Value) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasId) hash ^= Id.GetHashCode();
              if (HasValue) hash ^= Value.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasId) {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
              }
              if (HasValue) {
                output.WriteRawTag(18);
                output.WriteString(Value);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasId) {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
              }
              if (HasValue) {
                output.WriteRawTag(18);
                output.WriteString(Value);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
              }
              if (HasValue) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(DictString other) {
              if (other == null) {
                return;
              }
              if (other.HasId) {
                Id = other.Id;
              }
              if (other.HasValue) {
                Value = other.Value;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Id = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    Value = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Id = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    Value = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCVictoryPredictions : pb::IMessage<CMsgServerToGCVictoryPredictions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCVictoryPredictions> _parser = new pb::MessageParser<CMsgServerToGCVictoryPredictions>(() => new CMsgServerToGCVictoryPredictions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCVictoryPredictions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCVictoryPredictions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCVictoryPredictions(CMsgServerToGCVictoryPredictions other) : this() {
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCVictoryPredictions Clone() {
      return new CMsgServerToGCVictoryPredictions(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.Record> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.Record.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.Record> records_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.Record> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCVictoryPredictions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCVictoryPredictions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      records_.WriteTo(output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      records_.WriteTo(ref output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCVictoryPredictions other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            records_.AddEntriesFrom(ref input, _repeated_records_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCVictoryPredictions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PredictionItem : pb::IMessage<PredictionItem>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PredictionItem> _parser = new pb::MessageParser<PredictionItem>(() => new PredictionItem());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PredictionItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PredictionItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PredictionItem(PredictionItem other) : this() {
          _hasBits0 = other._hasBits0;
          itemId_ = other.itemId_;
          itemDef_ = other.itemDef_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PredictionItem Clone() {
          return new PredictionItem(this);
        }

        /// <summary>Field number for the "item_id" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private readonly static ulong ItemIdDefaultValue = 0UL;

        private ulong itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ItemId {
          get { if ((_hasBits0 & 1) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            itemId_ = value;
          }
        }
        /// <summary>Gets whether the "item_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItemId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "item_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItemId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "item_def" field.</summary>
        public const int ItemDefFieldNumber = 2;
        private readonly static uint ItemDefDefaultValue = 0;

        private uint itemDef_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemDef {
          get { if ((_hasBits0 & 2) != 0) { return itemDef_; } else { return ItemDefDefaultValue; } }
          set {
            _hasBits0 |= 2;
            itemDef_ = value;
          }
        }
        /// <summary>Gets whether the "item_def" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItemDef {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "item_def" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItemDef() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PredictionItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PredictionItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemId != other.ItemId) return false;
          if (ItemDef != other.ItemDef) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasItemId) hash ^= ItemId.GetHashCode();
          if (HasItemDef) hash ^= ItemDef.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasItemId) {
            output.WriteRawTag(8);
            output.WriteUInt64(ItemId);
          }
          if (HasItemDef) {
            output.WriteRawTag(16);
            output.WriteUInt32(ItemDef);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasItemId) {
            output.WriteRawTag(8);
            output.WriteUInt64(ItemId);
          }
          if (HasItemDef) {
            output.WriteRawTag(16);
            output.WriteUInt32(ItemDef);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasItemId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
          }
          if (HasItemDef) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDef);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PredictionItem other) {
          if (other == null) {
            return;
          }
          if (other.HasItemId) {
            ItemId = other.ItemId;
          }
          if (other.HasItemDef) {
            ItemDef = other.ItemDef;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemId = input.ReadUInt64();
                break;
              }
              case 16: {
                ItemDef = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ItemId = input.ReadUInt64();
                break;
              }
              case 16: {
                ItemDef = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Record : pb::IMessage<Record>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Record> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record(Record other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          itemIds_ = other.itemIds_.Clone();
          predictionItems_ = other.predictionItems_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record Clone() {
          return new Record(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "item_ids" field.</summary>
        public const int ItemIdsFieldNumber = 5;
        private static readonly pb::FieldCodec<ulong> _repeated_itemIds_codec
            = pb::FieldCodec.ForUInt64(40);
        private readonly pbc::RepeatedField<ulong> itemIds_ = new pbc::RepeatedField<ulong>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ulong> ItemIds {
          get { return itemIds_; }
        }

        /// <summary>Field number for the "prediction_items" field.</summary>
        public const int PredictionItemsFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.PredictionItem> _repeated_predictionItems_codec
            = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.PredictionItem.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.PredictionItem> predictionItems_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.PredictionItem>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCVictoryPredictions.Types.PredictionItem> PredictionItems {
          get { return predictionItems_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Record);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Record other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if(!itemIds_.Equals(other.itemIds_)) return false;
          if(!predictionItems_.Equals(other.predictionItems_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          hash ^= itemIds_.GetHashCode();
          hash ^= predictionItems_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          itemIds_.WriteTo(output, _repeated_itemIds_codec);
          predictionItems_.WriteTo(output, _repeated_predictionItems_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          itemIds_.WriteTo(ref output, _repeated_itemIds_codec);
          predictionItems_.WriteTo(ref output, _repeated_predictionItems_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          size += itemIds_.CalculateSize(_repeated_itemIds_codec);
          size += predictionItems_.CalculateSize(_repeated_predictionItems_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Record other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          itemIds_.Add(other.itemIds_);
          predictionItems_.Add(other.predictionItems_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 42:
              case 40: {
                itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
                break;
              }
              case 50: {
                predictionItems_.AddEntriesFrom(input, _repeated_predictionItems_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 42:
              case 40: {
                itemIds_.AddEntriesFrom(ref input, _repeated_itemIds_codec);
                break;
              }
              case 50: {
                predictionItems_.AddEntriesFrom(ref input, _repeated_predictionItems_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCRequestStatus : pb::IMessage<CMsgServerToGCRequestStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCRequestStatus> _parser = new pb::MessageParser<CMsgServerToGCRequestStatus>(() => new CMsgServerToGCRequestStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCRequestStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestStatus(CMsgServerToGCRequestStatus other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestStatus Clone() {
      return new CMsgServerToGCRequestStatus(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCRequestStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCRequestStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCRequestStatus other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCRequestStatus_Response : pb::IMessage<CMsgServerToGCRequestStatus_Response>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCRequestStatus_Response> _parser = new pb::MessageParser<CMsgServerToGCRequestStatus_Response>(() => new CMsgServerToGCRequestStatus_Response());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCRequestStatus_Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestStatus_Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestStatus_Response(CMsgServerToGCRequestStatus_Response other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestStatus_Response Clone() {
      return new CMsgServerToGCRequestStatus_Response(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static uint ResponseDefaultValue = 0;

    private uint response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCRequestStatus_Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCRequestStatus_Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteUInt32(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteUInt32(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCRequestStatus_Response other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToServerEvaluateToxicChat : pb::IMessage<CMsgGCToServerEvaluateToxicChat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerEvaluateToxicChat> _parser = new pb::MessageParser<CMsgGCToServerEvaluateToxicChat>(() => new CMsgGCToServerEvaluateToxicChat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerEvaluateToxicChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerEvaluateToxicChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerEvaluateToxicChat(CMsgGCToServerEvaluateToxicChat other) : this() {
      _hasBits0 = other._hasBits0;
      targetAccountId_ = other.targetAccountId_;
      reporterAccountId_ = other.reporterAccountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerEvaluateToxicChat Clone() {
      return new CMsgGCToServerEvaluateToxicChat(this);
    }

    /// <summary>Field number for the "target_account_id" field.</summary>
    public const int TargetAccountIdFieldNumber = 1;
    private readonly static uint TargetAccountIdDefaultValue = 0;

    private uint targetAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetAccountId {
      get { if ((_hasBits0 & 1) != 0) { return targetAccountId_; } else { return TargetAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        targetAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "target_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "target_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reporter_account_id" field.</summary>
    public const int ReporterAccountIdFieldNumber = 2;
    private readonly static uint ReporterAccountIdDefaultValue = 0;

    private uint reporterAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReporterAccountId {
      get { if ((_hasBits0 & 2) != 0) { return reporterAccountId_; } else { return ReporterAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reporterAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "reporter_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReporterAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reporter_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReporterAccountId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerEvaluateToxicChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerEvaluateToxicChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetAccountId != other.TargetAccountId) return false;
      if (ReporterAccountId != other.ReporterAccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetAccountId) hash ^= TargetAccountId.GetHashCode();
      if (HasReporterAccountId) hash ^= ReporterAccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTargetAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetAccountId);
      }
      if (HasReporterAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReporterAccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTargetAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetAccountId);
      }
      if (HasReporterAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReporterAccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetAccountId);
      }
      if (HasReporterAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReporterAccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerEvaluateToxicChat other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetAccountId) {
        TargetAccountId = other.TargetAccountId;
      }
      if (other.HasReporterAccountId) {
        ReporterAccountId = other.ReporterAccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            ReporterAccountId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TargetAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            ReporterAccountId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCEvaluateToxicChat : pb::IMessage<CMsgServerToGCEvaluateToxicChat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCEvaluateToxicChat> _parser = new pb::MessageParser<CMsgServerToGCEvaluateToxicChat>(() => new CMsgServerToGCEvaluateToxicChat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCEvaluateToxicChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCEvaluateToxicChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCEvaluateToxicChat(CMsgServerToGCEvaluateToxicChat other) : this() {
      _hasBits0 = other._hasBits0;
      targetAccountId_ = other.targetAccountId_;
      reporterAccountId_ = other.reporterAccountId_;
      matchId_ = other.matchId_;
      timestamp_ = other.timestamp_.Clone();
      line_ = other.line_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCEvaluateToxicChat Clone() {
      return new CMsgServerToGCEvaluateToxicChat(this);
    }

    /// <summary>Field number for the "target_account_id" field.</summary>
    public const int TargetAccountIdFieldNumber = 1;
    private readonly static uint TargetAccountIdDefaultValue = 0;

    private uint targetAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetAccountId {
      get { if ((_hasBits0 & 1) != 0) { return targetAccountId_; } else { return TargetAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        targetAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "target_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "target_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reporter_account_id" field.</summary>
    public const int ReporterAccountIdFieldNumber = 2;
    private readonly static uint ReporterAccountIdDefaultValue = 0;

    private uint reporterAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReporterAccountId {
      get { if ((_hasBits0 & 2) != 0) { return reporterAccountId_; } else { return ReporterAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reporterAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "reporter_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReporterAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reporter_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReporterAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 3;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 4) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_timestamp_codec
        = pb::FieldCodec.ForUInt32(32);
    private readonly pbc::RepeatedField<uint> timestamp_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Timestamp {
      get { return timestamp_; }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_line_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> line_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Line {
      get { return line_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCEvaluateToxicChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCEvaluateToxicChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetAccountId != other.TargetAccountId) return false;
      if (ReporterAccountId != other.ReporterAccountId) return false;
      if (MatchId != other.MatchId) return false;
      if(!timestamp_.Equals(other.timestamp_)) return false;
      if(!line_.Equals(other.line_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetAccountId) hash ^= TargetAccountId.GetHashCode();
      if (HasReporterAccountId) hash ^= ReporterAccountId.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      hash ^= timestamp_.GetHashCode();
      hash ^= line_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTargetAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetAccountId);
      }
      if (HasReporterAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReporterAccountId);
      }
      if (HasMatchId) {
        output.WriteRawTag(25);
        output.WriteFixed64(MatchId);
      }
      timestamp_.WriteTo(output, _repeated_timestamp_codec);
      line_.WriteTo(output, _repeated_line_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTargetAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetAccountId);
      }
      if (HasReporterAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReporterAccountId);
      }
      if (HasMatchId) {
        output.WriteRawTag(25);
        output.WriteFixed64(MatchId);
      }
      timestamp_.WriteTo(ref output, _repeated_timestamp_codec);
      line_.WriteTo(ref output, _repeated_line_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetAccountId);
      }
      if (HasReporterAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReporterAccountId);
      }
      if (HasMatchId) {
        size += 1 + 8;
      }
      size += timestamp_.CalculateSize(_repeated_timestamp_codec);
      size += line_.CalculateSize(_repeated_line_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCEvaluateToxicChat other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetAccountId) {
        TargetAccountId = other.TargetAccountId;
      }
      if (other.HasReporterAccountId) {
        ReporterAccountId = other.ReporterAccountId;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      timestamp_.Add(other.timestamp_);
      line_.Add(other.line_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            ReporterAccountId = input.ReadUInt32();
            break;
          }
          case 25: {
            MatchId = input.ReadFixed64();
            break;
          }
          case 34:
          case 32: {
            timestamp_.AddEntriesFrom(input, _repeated_timestamp_codec);
            break;
          }
          case 42: {
            line_.AddEntriesFrom(input, _repeated_line_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TargetAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            ReporterAccountId = input.ReadUInt32();
            break;
          }
          case 25: {
            MatchId = input.ReadFixed64();
            break;
          }
          case 34:
          case 32: {
            timestamp_.AddEntriesFrom(ref input, _repeated_timestamp_codec);
            break;
          }
          case 42: {
            line_.AddEntriesFrom(ref input, _repeated_line_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCEvaluateToxicChatResponse : pb::IMessage<CMsgServerToGCEvaluateToxicChatResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCEvaluateToxicChatResponse> _parser = new pb::MessageParser<CMsgServerToGCEvaluateToxicChatResponse>(() => new CMsgServerToGCEvaluateToxicChatResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCEvaluateToxicChatResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCEvaluateToxicChatResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCEvaluateToxicChatResponse(CMsgServerToGCEvaluateToxicChatResponse other) : this() {
      _hasBits0 = other._hasBits0;
      targetAccountId_ = other.targetAccountId_;
      reporterAccountId_ = other.reporterAccountId_;
      banReason_ = other.banReason_;
      banDuration_ = other.banDuration_;
      toxicityScore_ = other.toxicityScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCEvaluateToxicChatResponse Clone() {
      return new CMsgServerToGCEvaluateToxicChatResponse(this);
    }

    /// <summary>Field number for the "target_account_id" field.</summary>
    public const int TargetAccountIdFieldNumber = 1;
    private readonly static uint TargetAccountIdDefaultValue = 0;

    private uint targetAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetAccountId {
      get { if ((_hasBits0 & 1) != 0) { return targetAccountId_; } else { return TargetAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        targetAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "target_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "target_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reporter_account_id" field.</summary>
    public const int ReporterAccountIdFieldNumber = 2;
    private readonly static uint ReporterAccountIdDefaultValue = 0;

    private uint reporterAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReporterAccountId {
      get { if ((_hasBits0 & 2) != 0) { return reporterAccountId_; } else { return ReporterAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reporterAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "reporter_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReporterAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reporter_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReporterAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ban_reason" field.</summary>
    public const int BanReasonFieldNumber = 3;
    private readonly static uint BanReasonDefaultValue = 0;

    private uint banReason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BanReason {
      get { if ((_hasBits0 & 4) != 0) { return banReason_; } else { return BanReasonDefaultValue; } }
      set {
        _hasBits0 |= 4;
        banReason_ = value;
      }
    }
    /// <summary>Gets whether the "ban_reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBanReason {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ban_reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBanReason() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ban_duration" field.</summary>
    public const int BanDurationFieldNumber = 4;
    private readonly static uint BanDurationDefaultValue = 0;

    private uint banDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BanDuration {
      get { if ((_hasBits0 & 8) != 0) { return banDuration_; } else { return BanDurationDefaultValue; } }
      set {
        _hasBits0 |= 8;
        banDuration_ = value;
      }
    }
    /// <summary>Gets whether the "ban_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBanDuration {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ban_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBanDuration() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "toxicity_score" field.</summary>
    public const int ToxicityScoreFieldNumber = 5;
    private readonly static float ToxicityScoreDefaultValue = 0F;

    private float toxicityScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ToxicityScore {
      get { if ((_hasBits0 & 16) != 0) { return toxicityScore_; } else { return ToxicityScoreDefaultValue; } }
      set {
        _hasBits0 |= 16;
        toxicityScore_ = value;
      }
    }
    /// <summary>Gets whether the "toxicity_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToxicityScore {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "toxicity_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToxicityScore() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCEvaluateToxicChatResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCEvaluateToxicChatResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetAccountId != other.TargetAccountId) return false;
      if (ReporterAccountId != other.ReporterAccountId) return false;
      if (BanReason != other.BanReason) return false;
      if (BanDuration != other.BanDuration) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ToxicityScore, other.ToxicityScore)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetAccountId) hash ^= TargetAccountId.GetHashCode();
      if (HasReporterAccountId) hash ^= ReporterAccountId.GetHashCode();
      if (HasBanReason) hash ^= BanReason.GetHashCode();
      if (HasBanDuration) hash ^= BanDuration.GetHashCode();
      if (HasToxicityScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ToxicityScore);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTargetAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetAccountId);
      }
      if (HasReporterAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReporterAccountId);
      }
      if (HasBanReason) {
        output.WriteRawTag(24);
        output.WriteUInt32(BanReason);
      }
      if (HasBanDuration) {
        output.WriteRawTag(32);
        output.WriteUInt32(BanDuration);
      }
      if (HasToxicityScore) {
        output.WriteRawTag(45);
        output.WriteFloat(ToxicityScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTargetAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetAccountId);
      }
      if (HasReporterAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReporterAccountId);
      }
      if (HasBanReason) {
        output.WriteRawTag(24);
        output.WriteUInt32(BanReason);
      }
      if (HasBanDuration) {
        output.WriteRawTag(32);
        output.WriteUInt32(BanDuration);
      }
      if (HasToxicityScore) {
        output.WriteRawTag(45);
        output.WriteFloat(ToxicityScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetAccountId);
      }
      if (HasReporterAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReporterAccountId);
      }
      if (HasBanReason) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BanReason);
      }
      if (HasBanDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BanDuration);
      }
      if (HasToxicityScore) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCEvaluateToxicChatResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetAccountId) {
        TargetAccountId = other.TargetAccountId;
      }
      if (other.HasReporterAccountId) {
        ReporterAccountId = other.ReporterAccountId;
      }
      if (other.HasBanReason) {
        BanReason = other.BanReason;
      }
      if (other.HasBanDuration) {
        BanDuration = other.BanDuration;
      }
      if (other.HasToxicityScore) {
        ToxicityScore = other.ToxicityScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            ReporterAccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            BanReason = input.ReadUInt32();
            break;
          }
          case 32: {
            BanDuration = input.ReadUInt32();
            break;
          }
          case 45: {
            ToxicityScore = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TargetAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            ReporterAccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            BanReason = input.ReadUInt32();
            break;
          }
          case 32: {
            BanDuration = input.ReadUInt32();
            break;
          }
          case 45: {
            ToxicityScore = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSignOutAssassinMiniGameInfo : pb::IMessage<CMsgSignOutAssassinMiniGameInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutAssassinMiniGameInfo> _parser = new pb::MessageParser<CMsgSignOutAssassinMiniGameInfo>(() => new CMsgSignOutAssassinMiniGameInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutAssassinMiniGameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutAssassinMiniGameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutAssassinMiniGameInfo(CMsgSignOutAssassinMiniGameInfo other) : this() {
      _hasBits0 = other._hasBits0;
      winningPlayers_ = other.winningPlayers_.Clone();
      losingPlayers_ = other.losingPlayers_.Clone();
      arcanaOwners_ = other.arcanaOwners_.Clone();
      assassinWon_ = other.assassinWon_;
      targetHeroId_ = other.targetHeroId_;
      contractCompleted_ = other.contractCompleted_;
      contractCompleteTime_ = other.contractCompleteTime_;
      paIsRadiant_ = other.paIsRadiant_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutAssassinMiniGameInfo Clone() {
      return new CMsgSignOutAssassinMiniGameInfo(this);
    }

    /// <summary>Field number for the "winning_players" field.</summary>
    public const int WinningPlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_winningPlayers_codec
        = pb::FieldCodec.ForFixed64(9);
    private readonly pbc::RepeatedField<ulong> winningPlayers_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> WinningPlayers {
      get { return winningPlayers_; }
    }

    /// <summary>Field number for the "losing_players" field.</summary>
    public const int LosingPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_losingPlayers_codec
        = pb::FieldCodec.ForFixed64(17);
    private readonly pbc::RepeatedField<ulong> losingPlayers_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> LosingPlayers {
      get { return losingPlayers_; }
    }

    /// <summary>Field number for the "arcana_owners" field.</summary>
    public const int ArcanaOwnersFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_arcanaOwners_codec
        = pb::FieldCodec.ForFixed64(25);
    private readonly pbc::RepeatedField<ulong> arcanaOwners_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ArcanaOwners {
      get { return arcanaOwners_; }
    }

    /// <summary>Field number for the "assassin_won" field.</summary>
    public const int AssassinWonFieldNumber = 4;
    private readonly static bool AssassinWonDefaultValue = false;

    private bool assassinWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AssassinWon {
      get { if ((_hasBits0 & 1) != 0) { return assassinWon_; } else { return AssassinWonDefaultValue; } }
      set {
        _hasBits0 |= 1;
        assassinWon_ = value;
      }
    }
    /// <summary>Gets whether the "assassin_won" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssassinWon {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "assassin_won" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssassinWon() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_hero_id" field.</summary>
    public const int TargetHeroIdFieldNumber = 5;
    private readonly static int TargetHeroIdDefaultValue = 0;

    private int targetHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetHeroId {
      get { if ((_hasBits0 & 2) != 0) { return targetHeroId_; } else { return TargetHeroIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetHeroId_ = value;
      }
    }
    /// <summary>Gets whether the "target_hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetHeroId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetHeroId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "contract_completed" field.</summary>
    public const int ContractCompletedFieldNumber = 6;
    private readonly static bool ContractCompletedDefaultValue = false;

    private bool contractCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ContractCompleted {
      get { if ((_hasBits0 & 4) != 0) { return contractCompleted_; } else { return ContractCompletedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        contractCompleted_ = value;
      }
    }
    /// <summary>Gets whether the "contract_completed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContractCompleted {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "contract_completed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContractCompleted() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "contract_complete_time" field.</summary>
    public const int ContractCompleteTimeFieldNumber = 7;
    private readonly static float ContractCompleteTimeDefaultValue = 0F;

    private float contractCompleteTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ContractCompleteTime {
      get { if ((_hasBits0 & 8) != 0) { return contractCompleteTime_; } else { return ContractCompleteTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        contractCompleteTime_ = value;
      }
    }
    /// <summary>Gets whether the "contract_complete_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContractCompleteTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "contract_complete_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContractCompleteTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pa_is_radiant" field.</summary>
    public const int PaIsRadiantFieldNumber = 8;
    private readonly static bool PaIsRadiantDefaultValue = false;

    private bool paIsRadiant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PaIsRadiant {
      get { if ((_hasBits0 & 16) != 0) { return paIsRadiant_; } else { return PaIsRadiantDefaultValue; } }
      set {
        _hasBits0 |= 16;
        paIsRadiant_ = value;
      }
    }
    /// <summary>Gets whether the "pa_is_radiant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPaIsRadiant {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "pa_is_radiant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPaIsRadiant() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutAssassinMiniGameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutAssassinMiniGameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!winningPlayers_.Equals(other.winningPlayers_)) return false;
      if(!losingPlayers_.Equals(other.losingPlayers_)) return false;
      if(!arcanaOwners_.Equals(other.arcanaOwners_)) return false;
      if (AssassinWon != other.AssassinWon) return false;
      if (TargetHeroId != other.TargetHeroId) return false;
      if (ContractCompleted != other.ContractCompleted) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContractCompleteTime, other.ContractCompleteTime)) return false;
      if (PaIsRadiant != other.PaIsRadiant) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= winningPlayers_.GetHashCode();
      hash ^= losingPlayers_.GetHashCode();
      hash ^= arcanaOwners_.GetHashCode();
      if (HasAssassinWon) hash ^= AssassinWon.GetHashCode();
      if (HasTargetHeroId) hash ^= TargetHeroId.GetHashCode();
      if (HasContractCompleted) hash ^= ContractCompleted.GetHashCode();
      if (HasContractCompleteTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContractCompleteTime);
      if (HasPaIsRadiant) hash ^= PaIsRadiant.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      winningPlayers_.WriteTo(output, _repeated_winningPlayers_codec);
      losingPlayers_.WriteTo(output, _repeated_losingPlayers_codec);
      arcanaOwners_.WriteTo(output, _repeated_arcanaOwners_codec);
      if (HasAssassinWon) {
        output.WriteRawTag(32);
        output.WriteBool(AssassinWon);
      }
      if (HasTargetHeroId) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetHeroId);
      }
      if (HasContractCompleted) {
        output.WriteRawTag(48);
        output.WriteBool(ContractCompleted);
      }
      if (HasContractCompleteTime) {
        output.WriteRawTag(61);
        output.WriteFloat(ContractCompleteTime);
      }
      if (HasPaIsRadiant) {
        output.WriteRawTag(64);
        output.WriteBool(PaIsRadiant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      winningPlayers_.WriteTo(ref output, _repeated_winningPlayers_codec);
      losingPlayers_.WriteTo(ref output, _repeated_losingPlayers_codec);
      arcanaOwners_.WriteTo(ref output, _repeated_arcanaOwners_codec);
      if (HasAssassinWon) {
        output.WriteRawTag(32);
        output.WriteBool(AssassinWon);
      }
      if (HasTargetHeroId) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetHeroId);
      }
      if (HasContractCompleted) {
        output.WriteRawTag(48);
        output.WriteBool(ContractCompleted);
      }
      if (HasContractCompleteTime) {
        output.WriteRawTag(61);
        output.WriteFloat(ContractCompleteTime);
      }
      if (HasPaIsRadiant) {
        output.WriteRawTag(64);
        output.WriteBool(PaIsRadiant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += winningPlayers_.CalculateSize(_repeated_winningPlayers_codec);
      size += losingPlayers_.CalculateSize(_repeated_losingPlayers_codec);
      size += arcanaOwners_.CalculateSize(_repeated_arcanaOwners_codec);
      if (HasAssassinWon) {
        size += 1 + 1;
      }
      if (HasTargetHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetHeroId);
      }
      if (HasContractCompleted) {
        size += 1 + 1;
      }
      if (HasContractCompleteTime) {
        size += 1 + 4;
      }
      if (HasPaIsRadiant) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutAssassinMiniGameInfo other) {
      if (other == null) {
        return;
      }
      winningPlayers_.Add(other.winningPlayers_);
      losingPlayers_.Add(other.losingPlayers_);
      arcanaOwners_.Add(other.arcanaOwners_);
      if (other.HasAssassinWon) {
        AssassinWon = other.AssassinWon;
      }
      if (other.HasTargetHeroId) {
        TargetHeroId = other.TargetHeroId;
      }
      if (other.HasContractCompleted) {
        ContractCompleted = other.ContractCompleted;
      }
      if (other.HasContractCompleteTime) {
        ContractCompleteTime = other.ContractCompleteTime;
      }
      if (other.HasPaIsRadiant) {
        PaIsRadiant = other.PaIsRadiant;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            winningPlayers_.AddEntriesFrom(input, _repeated_winningPlayers_codec);
            break;
          }
          case 18:
          case 17: {
            losingPlayers_.AddEntriesFrom(input, _repeated_losingPlayers_codec);
            break;
          }
          case 26:
          case 25: {
            arcanaOwners_.AddEntriesFrom(input, _repeated_arcanaOwners_codec);
            break;
          }
          case 32: {
            AssassinWon = input.ReadBool();
            break;
          }
          case 40: {
            TargetHeroId = input.ReadInt32();
            break;
          }
          case 48: {
            ContractCompleted = input.ReadBool();
            break;
          }
          case 61: {
            ContractCompleteTime = input.ReadFloat();
            break;
          }
          case 64: {
            PaIsRadiant = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 9: {
            winningPlayers_.AddEntriesFrom(ref input, _repeated_winningPlayers_codec);
            break;
          }
          case 18:
          case 17: {
            losingPlayers_.AddEntriesFrom(ref input, _repeated_losingPlayers_codec);
            break;
          }
          case 26:
          case 25: {
            arcanaOwners_.AddEntriesFrom(ref input, _repeated_arcanaOwners_codec);
            break;
          }
          case 32: {
            AssassinWon = input.ReadBool();
            break;
          }
          case 40: {
            TargetHeroId = input.ReadInt32();
            break;
          }
          case 48: {
            ContractCompleted = input.ReadBool();
            break;
          }
          case 61: {
            ContractCompleteTime = input.ReadFloat();
            break;
          }
          case 64: {
            PaIsRadiant = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCKillSummaries : pb::IMessage<CMsgServerToGCKillSummaries>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCKillSummaries> _parser = new pb::MessageParser<CMsgServerToGCKillSummaries>(() => new CMsgServerToGCKillSummaries());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCKillSummaries> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCKillSummaries() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCKillSummaries(CMsgServerToGCKillSummaries other) : this() {
      _hasBits0 = other._hasBits0;
      ingameeventId_ = other.ingameeventId_;
      summaries_ = other.summaries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCKillSummaries Clone() {
      return new CMsgServerToGCKillSummaries(this);
    }

    /// <summary>Field number for the "ingameevent_id" field.</summary>
    public const int IngameeventIdFieldNumber = 1;
    private readonly static uint IngameeventIdDefaultValue = 0;

    private uint ingameeventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IngameeventId {
      get { if ((_hasBits0 & 1) != 0) { return ingameeventId_; } else { return IngameeventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ingameeventId_ = value;
      }
    }
    /// <summary>Gets whether the "ingameevent_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIngameeventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ingameevent_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIngameeventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "summaries" field.</summary>
    public const int SummariesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCKillSummaries.Types.KillSummary> _repeated_summaries_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgServerToGCKillSummaries.Types.KillSummary.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCKillSummaries.Types.KillSummary> summaries_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCKillSummaries.Types.KillSummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCKillSummaries.Types.KillSummary> Summaries {
      get { return summaries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCKillSummaries);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCKillSummaries other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IngameeventId != other.IngameeventId) return false;
      if(!summaries_.Equals(other.summaries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIngameeventId) hash ^= IngameeventId.GetHashCode();
      hash ^= summaries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIngameeventId) {
        output.WriteRawTag(8);
        output.WriteUInt32(IngameeventId);
      }
      summaries_.WriteTo(output, _repeated_summaries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIngameeventId) {
        output.WriteRawTag(8);
        output.WriteUInt32(IngameeventId);
      }
      summaries_.WriteTo(ref output, _repeated_summaries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIngameeventId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IngameeventId);
      }
      size += summaries_.CalculateSize(_repeated_summaries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCKillSummaries other) {
      if (other == null) {
        return;
      }
      if (other.HasIngameeventId) {
        IngameeventId = other.IngameeventId;
      }
      summaries_.Add(other.summaries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IngameeventId = input.ReadUInt32();
            break;
          }
          case 18: {
            summaries_.AddEntriesFrom(input, _repeated_summaries_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IngameeventId = input.ReadUInt32();
            break;
          }
          case 18: {
            summaries_.AddEntriesFrom(ref input, _repeated_summaries_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCKillSummaries message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class KillSummary : pb::IMessage<KillSummary>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<KillSummary> _parser = new pb::MessageParser<KillSummary>(() => new KillSummary());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KillSummary> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCKillSummaries.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KillSummary() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KillSummary(KillSummary other) : this() {
          _hasBits0 = other._hasBits0;
          killerHeroId_ = other.killerHeroId_;
          victimHeroId_ = other.victimHeroId_;
          killCount_ = other.killCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KillSummary Clone() {
          return new KillSummary(this);
        }

        /// <summary>Field number for the "killer_hero_id" field.</summary>
        public const int KillerHeroIdFieldNumber = 1;
        private readonly static uint KillerHeroIdDefaultValue = 0;

        private uint killerHeroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint KillerHeroId {
          get { if ((_hasBits0 & 1) != 0) { return killerHeroId_; } else { return KillerHeroIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            killerHeroId_ = value;
          }
        }
        /// <summary>Gets whether the "killer_hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKillerHeroId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "killer_hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKillerHeroId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "victim_hero_id" field.</summary>
        public const int VictimHeroIdFieldNumber = 2;
        private readonly static uint VictimHeroIdDefaultValue = 0;

        private uint victimHeroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint VictimHeroId {
          get { if ((_hasBits0 & 2) != 0) { return victimHeroId_; } else { return VictimHeroIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            victimHeroId_ = value;
          }
        }
        /// <summary>Gets whether the "victim_hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVictimHeroId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "victim_hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVictimHeroId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "kill_count" field.</summary>
        public const int KillCountFieldNumber = 3;
        private readonly static uint KillCountDefaultValue = 0;

        private uint killCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint KillCount {
          get { if ((_hasBits0 & 4) != 0) { return killCount_; } else { return KillCountDefaultValue; } }
          set {
            _hasBits0 |= 4;
            killCount_ = value;
          }
        }
        /// <summary>Gets whether the "kill_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKillCount {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "kill_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKillCount() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KillSummary);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KillSummary other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (KillerHeroId != other.KillerHeroId) return false;
          if (VictimHeroId != other.VictimHeroId) return false;
          if (KillCount != other.KillCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasKillerHeroId) hash ^= KillerHeroId.GetHashCode();
          if (HasVictimHeroId) hash ^= VictimHeroId.GetHashCode();
          if (HasKillCount) hash ^= KillCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasKillerHeroId) {
            output.WriteRawTag(8);
            output.WriteUInt32(KillerHeroId);
          }
          if (HasVictimHeroId) {
            output.WriteRawTag(16);
            output.WriteUInt32(VictimHeroId);
          }
          if (HasKillCount) {
            output.WriteRawTag(24);
            output.WriteUInt32(KillCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasKillerHeroId) {
            output.WriteRawTag(8);
            output.WriteUInt32(KillerHeroId);
          }
          if (HasVictimHeroId) {
            output.WriteRawTag(16);
            output.WriteUInt32(VictimHeroId);
          }
          if (HasKillCount) {
            output.WriteRawTag(24);
            output.WriteUInt32(KillCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasKillerHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillerHeroId);
          }
          if (HasVictimHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VictimHeroId);
          }
          if (HasKillCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KillSummary other) {
          if (other == null) {
            return;
          }
          if (other.HasKillerHeroId) {
            KillerHeroId = other.KillerHeroId;
          }
          if (other.HasVictimHeroId) {
            VictimHeroId = other.VictimHeroId;
          }
          if (other.HasKillCount) {
            KillCount = other.KillCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                KillerHeroId = input.ReadUInt32();
                break;
              }
              case 16: {
                VictimHeroId = input.ReadUInt32();
                break;
              }
              case 24: {
                KillCount = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                KillerHeroId = input.ReadUInt32();
                break;
              }
              case 16: {
                VictimHeroId = input.ReadUInt32();
                break;
              }
              case 24: {
                KillCount = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCLockCharmTrading : pb::IMessage<CMsgServerToGCLockCharmTrading>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCLockCharmTrading> _parser = new pb::MessageParser<CMsgServerToGCLockCharmTrading>(() => new CMsgServerToGCLockCharmTrading());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCLockCharmTrading> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCLockCharmTrading() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCLockCharmTrading(CMsgServerToGCLockCharmTrading other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCLockCharmTrading Clone() {
      return new CMsgServerToGCLockCharmTrading(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private readonly static ulong ItemIdDefaultValue = 0UL;

    private ulong itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemId {
      get { if ((_hasBits0 & 2) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        itemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCLockCharmTrading);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCLockCharmTrading other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCLockCharmTrading other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSignOutUpdatePlayerChallenge : pb::IMessage<CMsgSignOutUpdatePlayerChallenge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutUpdatePlayerChallenge> _parser = new pb::MessageParser<CMsgSignOutUpdatePlayerChallenge>(() => new CMsgSignOutUpdatePlayerChallenge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutUpdatePlayerChallenge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutUpdatePlayerChallenge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutUpdatePlayerChallenge(CMsgSignOutUpdatePlayerChallenge other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      completed_ = other.completed_.Clone();
      rerolled_ = other.rerolled_.Clone();
      matchId_ = other.matchId_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutUpdatePlayerChallenge Clone() {
      return new CMsgSignOutUpdatePlayerChallenge(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "completed" field.</summary>
    public const int CompletedFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge> _repeated_completed_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge> completed_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge> Completed {
      get { return completed_; }
    }

    /// <summary>Field number for the "rerolled" field.</summary>
    public const int RerolledFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge> _repeated_rerolled_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge> rerolled_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Types.Challenge> Rerolled {
      get { return rerolled_; }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 4;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 2) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 5;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutUpdatePlayerChallenge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutUpdatePlayerChallenge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if(!completed_.Equals(other.completed_)) return false;
      if(!rerolled_.Equals(other.rerolled_)) return false;
      if (MatchId != other.MatchId) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      hash ^= completed_.GetHashCode();
      hash ^= rerolled_.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      completed_.WriteTo(output, _repeated_completed_codec);
      rerolled_.WriteTo(output, _repeated_rerolled_codec);
      if (HasMatchId) {
        output.WriteRawTag(32);
        output.WriteUInt64(MatchId);
      }
      if (HasHeroId) {
        output.WriteRawTag(40);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      completed_.WriteTo(ref output, _repeated_completed_codec);
      rerolled_.WriteTo(ref output, _repeated_rerolled_codec);
      if (HasMatchId) {
        output.WriteRawTag(32);
        output.WriteUInt64(MatchId);
      }
      if (HasHeroId) {
        output.WriteRawTag(40);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      size += completed_.CalculateSize(_repeated_completed_codec);
      size += rerolled_.CalculateSize(_repeated_rerolled_codec);
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutUpdatePlayerChallenge other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      completed_.Add(other.completed_);
      rerolled_.Add(other.rerolled_);
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            completed_.AddEntriesFrom(input, _repeated_completed_codec);
            break;
          }
          case 26: {
            rerolled_.AddEntriesFrom(input, _repeated_rerolled_codec);
            break;
          }
          case 32: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 40: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            completed_.AddEntriesFrom(ref input, _repeated_completed_codec);
            break;
          }
          case 26: {
            rerolled_.AddEntriesFrom(ref input, _repeated_rerolled_codec);
            break;
          }
          case 32: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 40: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutUpdatePlayerChallenge message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Challenge : pb::IMessage<Challenge>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Challenge> _parser = new pb::MessageParser<Challenge>(() => new Challenge());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Challenge> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutUpdatePlayerChallenge.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Challenge() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Challenge(Challenge other) : this() {
          _hasBits0 = other._hasBits0;
          eventId_ = other.eventId_;
          slotId_ = other.slotId_;
          sequenceId_ = other.sequenceId_;
          progress_ = other.progress_;
          challengeRank_ = other.challengeRank_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Challenge Clone() {
          return new Challenge(this);
        }

        /// <summary>Field number for the "event_id" field.</summary>
        public const int EventIdFieldNumber = 1;
        private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

        private global::Steam.Protos.Dota2.EEvent eventId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.EEvent EventId {
          get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            eventId_ = value;
          }
        }
        /// <summary>Gets whether the "event_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEventId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "event_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEventId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "slot_id" field.</summary>
        public const int SlotIdFieldNumber = 2;
        private readonly static uint SlotIdDefaultValue = 0;

        private uint slotId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SlotId {
          get { if ((_hasBits0 & 2) != 0) { return slotId_; } else { return SlotIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            slotId_ = value;
          }
        }
        /// <summary>Gets whether the "slot_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSlotId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "slot_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSlotId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "sequence_id" field.</summary>
        public const int SequenceIdFieldNumber = 3;
        private readonly static uint SequenceIdDefaultValue = 0;

        private uint sequenceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SequenceId {
          get { if ((_hasBits0 & 4) != 0) { return sequenceId_; } else { return SequenceIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            sequenceId_ = value;
          }
        }
        /// <summary>Gets whether the "sequence_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSequenceId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "sequence_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSequenceId() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "progress" field.</summary>
        public const int ProgressFieldNumber = 4;
        private readonly static uint ProgressDefaultValue = 0;

        private uint progress_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Progress {
          get { if ((_hasBits0 & 8) != 0) { return progress_; } else { return ProgressDefaultValue; } }
          set {
            _hasBits0 |= 8;
            progress_ = value;
          }
        }
        /// <summary>Gets whether the "progress" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProgress {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "progress" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProgress() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "challenge_rank" field.</summary>
        public const int ChallengeRankFieldNumber = 5;
        private readonly static uint ChallengeRankDefaultValue = 0;

        private uint challengeRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChallengeRank {
          get { if ((_hasBits0 & 16) != 0) { return challengeRank_; } else { return ChallengeRankDefaultValue; } }
          set {
            _hasBits0 |= 16;
            challengeRank_ = value;
          }
        }
        /// <summary>Gets whether the "challenge_rank" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChallengeRank {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "challenge_rank" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChallengeRank() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Challenge);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Challenge other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EventId != other.EventId) return false;
          if (SlotId != other.SlotId) return false;
          if (SequenceId != other.SequenceId) return false;
          if (Progress != other.Progress) return false;
          if (ChallengeRank != other.ChallengeRank) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasEventId) hash ^= EventId.GetHashCode();
          if (HasSlotId) hash ^= SlotId.GetHashCode();
          if (HasSequenceId) hash ^= SequenceId.GetHashCode();
          if (HasProgress) hash ^= Progress.GetHashCode();
          if (HasChallengeRank) hash ^= ChallengeRank.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasEventId) {
            output.WriteRawTag(8);
            output.WriteEnum((int) EventId);
          }
          if (HasSlotId) {
            output.WriteRawTag(16);
            output.WriteUInt32(SlotId);
          }
          if (HasSequenceId) {
            output.WriteRawTag(24);
            output.WriteUInt32(SequenceId);
          }
          if (HasProgress) {
            output.WriteRawTag(32);
            output.WriteUInt32(Progress);
          }
          if (HasChallengeRank) {
            output.WriteRawTag(40);
            output.WriteUInt32(ChallengeRank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasEventId) {
            output.WriteRawTag(8);
            output.WriteEnum((int) EventId);
          }
          if (HasSlotId) {
            output.WriteRawTag(16);
            output.WriteUInt32(SlotId);
          }
          if (HasSequenceId) {
            output.WriteRawTag(24);
            output.WriteUInt32(SequenceId);
          }
          if (HasProgress) {
            output.WriteRawTag(32);
            output.WriteUInt32(Progress);
          }
          if (HasChallengeRank) {
            output.WriteRawTag(40);
            output.WriteUInt32(ChallengeRank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasEventId) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
          }
          if (HasSlotId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
          }
          if (HasSequenceId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceId);
          }
          if (HasProgress) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
          }
          if (HasChallengeRank) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeRank);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Challenge other) {
          if (other == null) {
            return;
          }
          if (other.HasEventId) {
            EventId = other.EventId;
          }
          if (other.HasSlotId) {
            SlotId = other.SlotId;
          }
          if (other.HasSequenceId) {
            SequenceId = other.SequenceId;
          }
          if (other.HasProgress) {
            Progress = other.Progress;
          }
          if (other.HasChallengeRank) {
            ChallengeRank = other.ChallengeRank;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
                break;
              }
              case 16: {
                SlotId = input.ReadUInt32();
                break;
              }
              case 24: {
                SequenceId = input.ReadUInt32();
                break;
              }
              case 32: {
                Progress = input.ReadUInt32();
                break;
              }
              case 40: {
                ChallengeRank = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
                break;
              }
              case 16: {
                SlotId = input.ReadUInt32();
                break;
              }
              case 24: {
                SequenceId = input.ReadUInt32();
                break;
              }
              case 32: {
                Progress = input.ReadUInt32();
                break;
              }
              case 40: {
                ChallengeRank = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCRerollPlayerChallenge : pb::IMessage<CMsgServerToGCRerollPlayerChallenge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCRerollPlayerChallenge> _parser = new pb::MessageParser<CMsgServerToGCRerollPlayerChallenge>(() => new CMsgServerToGCRerollPlayerChallenge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCRerollPlayerChallenge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRerollPlayerChallenge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRerollPlayerChallenge(CMsgServerToGCRerollPlayerChallenge other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      rerollMsg_ = other.rerollMsg_ != null ? other.rerollMsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRerollPlayerChallenge Clone() {
      return new CMsgServerToGCRerollPlayerChallenge(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reroll_msg" field.</summary>
    public const int RerollMsgFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgClientToGCRerollPlayerChallenge rerollMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCRerollPlayerChallenge RerollMsg {
      get { return rerollMsg_; }
      set {
        rerollMsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCRerollPlayerChallenge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCRerollPlayerChallenge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (!object.Equals(RerollMsg, other.RerollMsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (rerollMsg_ != null) hash ^= RerollMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (rerollMsg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RerollMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (rerollMsg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RerollMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (rerollMsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RerollMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCRerollPlayerChallenge other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.rerollMsg_ != null) {
        if (rerollMsg_ == null) {
          RerollMsg = new global::Steam.Protos.Dota2.CMsgClientToGCRerollPlayerChallenge();
        }
        RerollMsg.MergeFrom(other.RerollMsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (rerollMsg_ == null) {
              RerollMsg = new global::Steam.Protos.Dota2.CMsgClientToGCRerollPlayerChallenge();
            }
            input.ReadMessage(RerollMsg);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (rerollMsg_ == null) {
              RerollMsg = new global::Steam.Protos.Dota2.CMsgClientToGCRerollPlayerChallenge();
            }
            input.ReadMessage(RerollMsg);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSpendWager : pb::IMessage<CMsgSpendWager>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSpendWager> _parser = new pb::MessageParser<CMsgSpendWager>(() => new CMsgSpendWager());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSpendWager> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSpendWager() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSpendWager(CMsgSpendWager other) : this() {
      _hasBits0 = other._hasBits0;
      players_ = other.players_.Clone();
      eventId_ = other.eventId_;
      timestamp_ = other.timestamp_;
      matchId_ = other.matchId_;
      serverSteamId_ = other.serverSteamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSpendWager Clone() {
      return new CMsgSpendWager(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSpendWager.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSpendWager.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSpendWager.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSpendWager.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSpendWager.Types.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private readonly static uint TimestampDefaultValue = 0;

    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { if ((_hasBits0 & 2) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 4;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 4) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "server_steam_id" field.</summary>
    public const int ServerSteamIdFieldNumber = 5;
    private readonly static ulong ServerSteamIdDefaultValue = 0UL;

    private ulong serverSteamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerSteamId {
      get { if ((_hasBits0 & 8) != 0) { return serverSteamId_; } else { return ServerSteamIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        serverSteamId_ = value;
      }
    }
    /// <summary>Gets whether the "server_steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerSteamId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "server_steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerSteamId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSpendWager);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSpendWager other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (EventId != other.EventId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (MatchId != other.MatchId) return false;
      if (ServerSteamId != other.ServerSteamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasServerSteamId) hash ^= ServerSteamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(24);
        output.WriteUInt32(Timestamp);
      }
      if (HasMatchId) {
        output.WriteRawTag(32);
        output.WriteUInt64(MatchId);
      }
      if (HasServerSteamId) {
        output.WriteRawTag(40);
        output.WriteUInt64(ServerSteamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(24);
        output.WriteUInt32(Timestamp);
      }
      if (HasMatchId) {
        output.WriteRawTag(32);
        output.WriteUInt64(MatchId);
      }
      if (HasServerSteamId) {
        output.WriteRawTag(40);
        output.WriteUInt64(ServerSteamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasServerSteamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerSteamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSpendWager other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasServerSteamId) {
        ServerSteamId = other.ServerSteamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 32: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 40: {
            ServerSteamId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 32: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 40: {
            ServerSteamId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSpendWager message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSpendWager.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          wager_ = other.wager_;
          wagerTokenItemId_ = other.wagerTokenItemId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "wager" field.</summary>
        public const int WagerFieldNumber = 2;
        private readonly static uint WagerDefaultValue = 0;

        private uint wager_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Wager {
          get { if ((_hasBits0 & 2) != 0) { return wager_; } else { return WagerDefaultValue; } }
          set {
            _hasBits0 |= 2;
            wager_ = value;
          }
        }
        /// <summary>Gets whether the "wager" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWager {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "wager" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWager() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "wager_token_item_id" field.</summary>
        public const int WagerTokenItemIdFieldNumber = 3;
        private readonly static ulong WagerTokenItemIdDefaultValue = 0UL;

        private ulong wagerTokenItemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong WagerTokenItemId {
          get { if ((_hasBits0 & 4) != 0) { return wagerTokenItemId_; } else { return WagerTokenItemIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            wagerTokenItemId_ = value;
          }
        }
        /// <summary>Gets whether the "wager_token_item_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWagerTokenItemId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "wager_token_item_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWagerTokenItemId() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (Wager != other.Wager) return false;
          if (WagerTokenItemId != other.WagerTokenItemId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasWager) hash ^= Wager.GetHashCode();
          if (HasWagerTokenItemId) hash ^= WagerTokenItemId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasWager) {
            output.WriteRawTag(16);
            output.WriteUInt32(Wager);
          }
          if (HasWagerTokenItemId) {
            output.WriteRawTag(24);
            output.WriteUInt64(WagerTokenItemId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasWager) {
            output.WriteRawTag(16);
            output.WriteUInt32(Wager);
          }
          if (HasWagerTokenItemId) {
            output.WriteRawTag(24);
            output.WriteUInt64(WagerTokenItemId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasWager) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Wager);
          }
          if (HasWagerTokenItemId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WagerTokenItemId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasWager) {
            Wager = other.Wager;
          }
          if (other.HasWagerTokenItemId) {
            WagerTokenItemId = other.WagerTokenItemId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                Wager = input.ReadUInt32();
                break;
              }
              case 24: {
                WagerTokenItemId = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                Wager = input.ReadUInt32();
                break;
              }
              case 24: {
                WagerTokenItemId = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSignOutXPCoins : pb::IMessage<CMsgSignOutXPCoins>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutXPCoins> _parser = new pb::MessageParser<CMsgSignOutXPCoins>(() => new CMsgSignOutXPCoins());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutXPCoins> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutXPCoins() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutXPCoins(CMsgSignOutXPCoins other) : this() {
      _hasBits0 = other._hasBits0;
      players_ = other.players_.Clone();
      eventId_ = other.eventId_;
      matchId_ = other.matchId_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutXPCoins Clone() {
      return new CMsgSignOutXPCoins(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutXPCoins.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSignOutXPCoins.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutXPCoins.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutXPCoins.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutXPCoins.Types.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 3;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 2) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private readonly static uint TimestampDefaultValue = 0;

    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { if ((_hasBits0 & 4) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutXPCoins);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutXPCoins other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (EventId != other.EventId) return false;
      if (MatchId != other.MatchId) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasMatchId) {
        output.WriteRawTag(24);
        output.WriteUInt64(MatchId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(32);
        output.WriteUInt32(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasMatchId) {
        output.WriteRawTag(24);
        output.WriteUInt64(MatchId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(32);
        output.WriteUInt32(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutXPCoins other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutXPCoins message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutXPCoins.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          xpGained_ = other.xpGained_;
          coinsSpent_ = other.coinsSpent_;
          wagerTokenItemId_ = other.wagerTokenItemId_;
          rankWager_ = other.rankWager_;
          wagerStreak_ = other.wagerStreak_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "xp_gained" field.</summary>
        public const int XpGainedFieldNumber = 2;
        private readonly static uint XpGainedDefaultValue = 0;

        private uint xpGained_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint XpGained {
          get { if ((_hasBits0 & 2) != 0) { return xpGained_; } else { return XpGainedDefaultValue; } }
          set {
            _hasBits0 |= 2;
            xpGained_ = value;
          }
        }
        /// <summary>Gets whether the "xp_gained" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasXpGained {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "xp_gained" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearXpGained() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "coins_spent" field.</summary>
        public const int CoinsSpentFieldNumber = 3;
        private readonly static uint CoinsSpentDefaultValue = 0;

        private uint coinsSpent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CoinsSpent {
          get { if ((_hasBits0 & 4) != 0) { return coinsSpent_; } else { return CoinsSpentDefaultValue; } }
          set {
            _hasBits0 |= 4;
            coinsSpent_ = value;
          }
        }
        /// <summary>Gets whether the "coins_spent" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCoinsSpent {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "coins_spent" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCoinsSpent() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "wager_token_item_id" field.</summary>
        public const int WagerTokenItemIdFieldNumber = 4;
        private readonly static ulong WagerTokenItemIdDefaultValue = 0UL;

        private ulong wagerTokenItemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong WagerTokenItemId {
          get { if ((_hasBits0 & 8) != 0) { return wagerTokenItemId_; } else { return WagerTokenItemIdDefaultValue; } }
          set {
            _hasBits0 |= 8;
            wagerTokenItemId_ = value;
          }
        }
        /// <summary>Gets whether the "wager_token_item_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWagerTokenItemId {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "wager_token_item_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWagerTokenItemId() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "rank_wager" field.</summary>
        public const int RankWagerFieldNumber = 5;
        private readonly static uint RankWagerDefaultValue = 0;

        private uint rankWager_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RankWager {
          get { if ((_hasBits0 & 16) != 0) { return rankWager_; } else { return RankWagerDefaultValue; } }
          set {
            _hasBits0 |= 16;
            rankWager_ = value;
          }
        }
        /// <summary>Gets whether the "rank_wager" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRankWager {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "rank_wager" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRankWager() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "wager_streak" field.</summary>
        public const int WagerStreakFieldNumber = 6;
        private readonly static uint WagerStreakDefaultValue = 0;

        private uint wagerStreak_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WagerStreak {
          get { if ((_hasBits0 & 32) != 0) { return wagerStreak_; } else { return WagerStreakDefaultValue; } }
          set {
            _hasBits0 |= 32;
            wagerStreak_ = value;
          }
        }
        /// <summary>Gets whether the "wager_streak" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWagerStreak {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "wager_streak" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWagerStreak() {
          _hasBits0 &= ~32;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (XpGained != other.XpGained) return false;
          if (CoinsSpent != other.CoinsSpent) return false;
          if (WagerTokenItemId != other.WagerTokenItemId) return false;
          if (RankWager != other.RankWager) return false;
          if (WagerStreak != other.WagerStreak) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasXpGained) hash ^= XpGained.GetHashCode();
          if (HasCoinsSpent) hash ^= CoinsSpent.GetHashCode();
          if (HasWagerTokenItemId) hash ^= WagerTokenItemId.GetHashCode();
          if (HasRankWager) hash ^= RankWager.GetHashCode();
          if (HasWagerStreak) hash ^= WagerStreak.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasXpGained) {
            output.WriteRawTag(16);
            output.WriteUInt32(XpGained);
          }
          if (HasCoinsSpent) {
            output.WriteRawTag(24);
            output.WriteUInt32(CoinsSpent);
          }
          if (HasWagerTokenItemId) {
            output.WriteRawTag(32);
            output.WriteUInt64(WagerTokenItemId);
          }
          if (HasRankWager) {
            output.WriteRawTag(40);
            output.WriteUInt32(RankWager);
          }
          if (HasWagerStreak) {
            output.WriteRawTag(48);
            output.WriteUInt32(WagerStreak);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasXpGained) {
            output.WriteRawTag(16);
            output.WriteUInt32(XpGained);
          }
          if (HasCoinsSpent) {
            output.WriteRawTag(24);
            output.WriteUInt32(CoinsSpent);
          }
          if (HasWagerTokenItemId) {
            output.WriteRawTag(32);
            output.WriteUInt64(WagerTokenItemId);
          }
          if (HasRankWager) {
            output.WriteRawTag(40);
            output.WriteUInt32(RankWager);
          }
          if (HasWagerStreak) {
            output.WriteRawTag(48);
            output.WriteUInt32(WagerStreak);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasXpGained) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(XpGained);
          }
          if (HasCoinsSpent) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoinsSpent);
          }
          if (HasWagerTokenItemId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WagerTokenItemId);
          }
          if (HasRankWager) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankWager);
          }
          if (HasWagerStreak) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WagerStreak);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasXpGained) {
            XpGained = other.XpGained;
          }
          if (other.HasCoinsSpent) {
            CoinsSpent = other.CoinsSpent;
          }
          if (other.HasWagerTokenItemId) {
            WagerTokenItemId = other.WagerTokenItemId;
          }
          if (other.HasRankWager) {
            RankWager = other.RankWager;
          }
          if (other.HasWagerStreak) {
            WagerStreak = other.WagerStreak;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                XpGained = input.ReadUInt32();
                break;
              }
              case 24: {
                CoinsSpent = input.ReadUInt32();
                break;
              }
              case 32: {
                WagerTokenItemId = input.ReadUInt64();
                break;
              }
              case 40: {
                RankWager = input.ReadUInt32();
                break;
              }
              case 48: {
                WagerStreak = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                XpGained = input.ReadUInt32();
                break;
              }
              case 24: {
                CoinsSpent = input.ReadUInt32();
                break;
              }
              case 32: {
                WagerTokenItemId = input.ReadUInt64();
                break;
              }
              case 40: {
                RankWager = input.ReadUInt32();
                break;
              }
              case 48: {
                WagerStreak = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSignOutBounties : pb::IMessage<CMsgSignOutBounties>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutBounties> _parser = new pb::MessageParser<CMsgSignOutBounties>(() => new CMsgSignOutBounties());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutBounties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutBounties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutBounties(CMsgSignOutBounties other) : this() {
      _hasBits0 = other._hasBits0;
      bounties_ = other.bounties_.Clone();
      eventId_ = other.eventId_;
      matchId_ = other.matchId_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutBounties Clone() {
      return new CMsgSignOutBounties(this);
    }

    /// <summary>Field number for the "bounties" field.</summary>
    public const int BountiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutBounties.Types.Bounty> _repeated_bounties_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSignOutBounties.Types.Bounty.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutBounties.Types.Bounty> bounties_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutBounties.Types.Bounty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutBounties.Types.Bounty> Bounties {
      get { return bounties_; }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 3;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 2) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private readonly static uint TimestampDefaultValue = 0;

    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { if ((_hasBits0 & 4) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutBounties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutBounties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bounties_.Equals(other.bounties_)) return false;
      if (EventId != other.EventId) return false;
      if (MatchId != other.MatchId) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bounties_.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      bounties_.WriteTo(output, _repeated_bounties_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasMatchId) {
        output.WriteRawTag(24);
        output.WriteUInt64(MatchId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(32);
        output.WriteUInt32(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      bounties_.WriteTo(ref output, _repeated_bounties_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasMatchId) {
        output.WriteRawTag(24);
        output.WriteUInt64(MatchId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(32);
        output.WriteUInt32(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bounties_.CalculateSize(_repeated_bounties_codec);
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutBounties other) {
      if (other == null) {
        return;
      }
      bounties_.Add(other.bounties_);
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bounties_.AddEntriesFrom(input, _repeated_bounties_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bounties_.AddEntriesFrom(ref input, _repeated_bounties_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutBounties message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Bounty : pb::IMessage<Bounty>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Bounty> _parser = new pb::MessageParser<Bounty>(() => new Bounty());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Bounty> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutBounties.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bounty() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bounty(Bounty other) : this() {
          _hasBits0 = other._hasBits0;
          issuerAccountId_ = other.issuerAccountId_;
          completerAccountId_ = other.completerAccountId_;
          targetAccountId_ = other.targetAccountId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bounty Clone() {
          return new Bounty(this);
        }

        /// <summary>Field number for the "issuer_account_id" field.</summary>
        public const int IssuerAccountIdFieldNumber = 1;
        private readonly static uint IssuerAccountIdDefaultValue = 0;

        private uint issuerAccountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint IssuerAccountId {
          get { if ((_hasBits0 & 1) != 0) { return issuerAccountId_; } else { return IssuerAccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            issuerAccountId_ = value;
          }
        }
        /// <summary>Gets whether the "issuer_account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIssuerAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "issuer_account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIssuerAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "completer_account_id" field.</summary>
        public const int CompleterAccountIdFieldNumber = 2;
        private readonly static uint CompleterAccountIdDefaultValue = 0;

        private uint completerAccountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CompleterAccountId {
          get { if ((_hasBits0 & 2) != 0) { return completerAccountId_; } else { return CompleterAccountIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            completerAccountId_ = value;
          }
        }
        /// <summary>Gets whether the "completer_account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCompleterAccountId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "completer_account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCompleterAccountId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "target_account_id" field.</summary>
        public const int TargetAccountIdFieldNumber = 3;
        private readonly static uint TargetAccountIdDefaultValue = 0;

        private uint targetAccountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TargetAccountId {
          get { if ((_hasBits0 & 4) != 0) { return targetAccountId_; } else { return TargetAccountIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            targetAccountId_ = value;
          }
        }
        /// <summary>Gets whether the "target_account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTargetAccountId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "target_account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTargetAccountId() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Bounty);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Bounty other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (IssuerAccountId != other.IssuerAccountId) return false;
          if (CompleterAccountId != other.CompleterAccountId) return false;
          if (TargetAccountId != other.TargetAccountId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasIssuerAccountId) hash ^= IssuerAccountId.GetHashCode();
          if (HasCompleterAccountId) hash ^= CompleterAccountId.GetHashCode();
          if (HasTargetAccountId) hash ^= TargetAccountId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasIssuerAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(IssuerAccountId);
          }
          if (HasCompleterAccountId) {
            output.WriteRawTag(16);
            output.WriteUInt32(CompleterAccountId);
          }
          if (HasTargetAccountId) {
            output.WriteRawTag(24);
            output.WriteUInt32(TargetAccountId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasIssuerAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(IssuerAccountId);
          }
          if (HasCompleterAccountId) {
            output.WriteRawTag(16);
            output.WriteUInt32(CompleterAccountId);
          }
          if (HasTargetAccountId) {
            output.WriteRawTag(24);
            output.WriteUInt32(TargetAccountId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasIssuerAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IssuerAccountId);
          }
          if (HasCompleterAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CompleterAccountId);
          }
          if (HasTargetAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetAccountId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Bounty other) {
          if (other == null) {
            return;
          }
          if (other.HasIssuerAccountId) {
            IssuerAccountId = other.IssuerAccountId;
          }
          if (other.HasCompleterAccountId) {
            CompleterAccountId = other.CompleterAccountId;
          }
          if (other.HasTargetAccountId) {
            TargetAccountId = other.TargetAccountId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                IssuerAccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                CompleterAccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                TargetAccountId = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                IssuerAccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                CompleterAccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                TargetAccountId = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSignOutCommunityGoalProgress : pb::IMessage<CMsgSignOutCommunityGoalProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutCommunityGoalProgress> _parser = new pb::MessageParser<CMsgSignOutCommunityGoalProgress>(() => new CMsgSignOutCommunityGoalProgress());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutCommunityGoalProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutCommunityGoalProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutCommunityGoalProgress(CMsgSignOutCommunityGoalProgress other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      eventIncrements_ = other.eventIncrements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutCommunityGoalProgress Clone() {
      return new CMsgSignOutCommunityGoalProgress(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "event_increments" field.</summary>
    public const int EventIncrementsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutCommunityGoalProgress.Types.EventGoalIncrement> _repeated_eventIncrements_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgSignOutCommunityGoalProgress.Types.EventGoalIncrement.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCommunityGoalProgress.Types.EventGoalIncrement> eventIncrements_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCommunityGoalProgress.Types.EventGoalIncrement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCommunityGoalProgress.Types.EventGoalIncrement> EventIncrements {
      get { return eventIncrements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutCommunityGoalProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutCommunityGoalProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if(!eventIncrements_.Equals(other.eventIncrements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      hash ^= eventIncrements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      eventIncrements_.WriteTo(output, _repeated_eventIncrements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      eventIncrements_.WriteTo(ref output, _repeated_eventIncrements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      size += eventIncrements_.CalculateSize(_repeated_eventIncrements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutCommunityGoalProgress other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      eventIncrements_.Add(other.eventIncrements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 18: {
            eventIncrements_.AddEntriesFrom(input, _repeated_eventIncrements_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 18: {
            eventIncrements_.AddEntriesFrom(ref input, _repeated_eventIncrements_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutCommunityGoalProgress message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EventGoalIncrement : pb::IMessage<EventGoalIncrement>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<EventGoalIncrement> _parser = new pb::MessageParser<EventGoalIncrement>(() => new EventGoalIncrement());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EventGoalIncrement> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutCommunityGoalProgress.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventGoalIncrement() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventGoalIncrement(EventGoalIncrement other) : this() {
          _hasBits0 = other._hasBits0;
          eventGoalId_ = other.eventGoalId_;
          incrementAmount_ = other.incrementAmount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventGoalIncrement Clone() {
          return new EventGoalIncrement(this);
        }

        /// <summary>Field number for the "event_goal_id" field.</summary>
        public const int EventGoalIdFieldNumber = 1;
        private readonly static uint EventGoalIdDefaultValue = 0;

        private uint eventGoalId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EventGoalId {
          get { if ((_hasBits0 & 1) != 0) { return eventGoalId_; } else { return EventGoalIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            eventGoalId_ = value;
          }
        }
        /// <summary>Gets whether the "event_goal_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEventGoalId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "event_goal_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEventGoalId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "increment_amount" field.</summary>
        public const int IncrementAmountFieldNumber = 2;
        private readonly static uint IncrementAmountDefaultValue = 0;

        private uint incrementAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint IncrementAmount {
          get { if ((_hasBits0 & 2) != 0) { return incrementAmount_; } else { return IncrementAmountDefaultValue; } }
          set {
            _hasBits0 |= 2;
            incrementAmount_ = value;
          }
        }
        /// <summary>Gets whether the "increment_amount" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIncrementAmount {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "increment_amount" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIncrementAmount() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EventGoalIncrement);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EventGoalIncrement other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EventGoalId != other.EventGoalId) return false;
          if (IncrementAmount != other.IncrementAmount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasEventGoalId) hash ^= EventGoalId.GetHashCode();
          if (HasIncrementAmount) hash ^= IncrementAmount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasEventGoalId) {
            output.WriteRawTag(8);
            output.WriteUInt32(EventGoalId);
          }
          if (HasIncrementAmount) {
            output.WriteRawTag(16);
            output.WriteUInt32(IncrementAmount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasEventGoalId) {
            output.WriteRawTag(8);
            output.WriteUInt32(EventGoalId);
          }
          if (HasIncrementAmount) {
            output.WriteRawTag(16);
            output.WriteUInt32(IncrementAmount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasEventGoalId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventGoalId);
          }
          if (HasIncrementAmount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IncrementAmount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EventGoalIncrement other) {
          if (other == null) {
            return;
          }
          if (other.HasEventGoalId) {
            EventGoalId = other.EventGoalId;
          }
          if (other.HasIncrementAmount) {
            IncrementAmount = other.IncrementAmount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                EventGoalId = input.ReadUInt32();
                break;
              }
              case 16: {
                IncrementAmount = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                EventGoalId = input.ReadUInt32();
                break;
              }
              case 16: {
                IncrementAmount = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCCloseCompendiumInGamePredictionVoting : pb::IMessage<CMsgServerToGCCloseCompendiumInGamePredictionVoting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCCloseCompendiumInGamePredictionVoting> _parser = new pb::MessageParser<CMsgServerToGCCloseCompendiumInGamePredictionVoting>(() => new CMsgServerToGCCloseCompendiumInGamePredictionVoting());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCCloseCompendiumInGamePredictionVoting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCloseCompendiumInGamePredictionVoting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCloseCompendiumInGamePredictionVoting(CMsgServerToGCCloseCompendiumInGamePredictionVoting other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      hltvDelay_ = other.hltvDelay_;
      leagueId_ = other.leagueId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCloseCompendiumInGamePredictionVoting Clone() {
      return new CMsgServerToGCCloseCompendiumInGamePredictionVoting(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hltv_delay" field.</summary>
    public const int HltvDelayFieldNumber = 2;
    private readonly static uint HltvDelayDefaultValue = 0;

    private uint hltvDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HltvDelay {
      get { if ((_hasBits0 & 2) != 0) { return hltvDelay_; } else { return HltvDelayDefaultValue; } }
      set {
        _hasBits0 |= 2;
        hltvDelay_ = value;
      }
    }
    /// <summary>Gets whether the "hltv_delay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHltvDelay {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hltv_delay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHltvDelay() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "league_id" field.</summary>
    public const int LeagueIdFieldNumber = 3;
    private readonly static uint LeagueIdDefaultValue = 0;

    private uint leagueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeagueId {
      get { if ((_hasBits0 & 4) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leagueId_ = value;
      }
    }
    /// <summary>Gets whether the "league_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "league_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCCloseCompendiumInGamePredictionVoting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCCloseCompendiumInGamePredictionVoting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (HltvDelay != other.HltvDelay) return false;
      if (LeagueId != other.LeagueId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasHltvDelay) hash ^= HltvDelay.GetHashCode();
      if (HasLeagueId) hash ^= LeagueId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasHltvDelay) {
        output.WriteRawTag(16);
        output.WriteUInt32(HltvDelay);
      }
      if (HasLeagueId) {
        output.WriteRawTag(24);
        output.WriteUInt32(LeagueId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasHltvDelay) {
        output.WriteRawTag(16);
        output.WriteUInt32(HltvDelay);
      }
      if (HasLeagueId) {
        output.WriteRawTag(24);
        output.WriteUInt32(LeagueId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasHltvDelay) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HltvDelay);
      }
      if (HasLeagueId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCCloseCompendiumInGamePredictionVoting other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasHltvDelay) {
        HltvDelay = other.HltvDelay;
      }
      if (other.HasLeagueId) {
        LeagueId = other.LeagueId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            HltvDelay = input.ReadUInt32();
            break;
          }
          case 24: {
            LeagueId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            HltvDelay = input.ReadUInt32();
            break;
          }
          case 24: {
            LeagueId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse : pb::IMessage<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse> _parser = new pb::MessageParser<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse>(() => new CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse Clone() {
      return new CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static bool ResultDefaultValue = false;

    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCCompendiumInGamePredictionResults : pb::IMessage<CMsgServerToGCCompendiumInGamePredictionResults>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCCompendiumInGamePredictionResults> _parser = new pb::MessageParser<CMsgServerToGCCompendiumInGamePredictionResults>(() => new CMsgServerToGCCompendiumInGamePredictionResults());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCCompendiumInGamePredictionResults> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCompendiumInGamePredictionResults() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCompendiumInGamePredictionResults(CMsgServerToGCCompendiumInGamePredictionResults other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      results_ = other.results_.Clone();
      leagueId_ = other.leagueId_;
      leagueNodeId_ = other.leagueNodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCompendiumInGamePredictionResults Clone() {
      return new CMsgServerToGCCompendiumInGamePredictionResults(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults.Types.PredictionResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults.Types.PredictionResult.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults.Types.PredictionResult> results_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults.Types.PredictionResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults.Types.PredictionResult> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "league_id" field.</summary>
    public const int LeagueIdFieldNumber = 3;
    private readonly static uint LeagueIdDefaultValue = 0;

    private uint leagueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeagueId {
      get { if ((_hasBits0 & 2) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leagueId_ = value;
      }
    }
    /// <summary>Gets whether the "league_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "league_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "league_node_id" field.</summary>
    public const int LeagueNodeIdFieldNumber = 4;
    private readonly static uint LeagueNodeIdDefaultValue = 0;

    private uint leagueNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeagueNodeId {
      get { if ((_hasBits0 & 4) != 0) { return leagueNodeId_; } else { return LeagueNodeIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leagueNodeId_ = value;
      }
    }
    /// <summary>Gets whether the "league_node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueNodeId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "league_node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueNodeId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCCompendiumInGamePredictionResults);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCCompendiumInGamePredictionResults other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!results_.Equals(other.results_)) return false;
      if (LeagueId != other.LeagueId) return false;
      if (LeagueNodeId != other.LeagueNodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      hash ^= results_.GetHashCode();
      if (HasLeagueId) hash ^= LeagueId.GetHashCode();
      if (HasLeagueNodeId) hash ^= LeagueNodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (HasLeagueId) {
        output.WriteRawTag(24);
        output.WriteUInt32(LeagueId);
      }
      if (HasLeagueNodeId) {
        output.WriteRawTag(32);
        output.WriteUInt32(LeagueNodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      results_.WriteTo(ref output, _repeated_results_codec);
      if (HasLeagueId) {
        output.WriteRawTag(24);
        output.WriteUInt32(LeagueId);
      }
      if (HasLeagueNodeId) {
        output.WriteRawTag(32);
        output.WriteUInt32(LeagueNodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (HasLeagueId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
      }
      if (HasLeagueNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueNodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCCompendiumInGamePredictionResults other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      results_.Add(other.results_);
      if (other.HasLeagueId) {
        LeagueId = other.LeagueId;
      }
      if (other.HasLeagueNodeId) {
        LeagueNodeId = other.LeagueNodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 24: {
            LeagueId = input.ReadUInt32();
            break;
          }
          case 32: {
            LeagueNodeId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(ref input, _repeated_results_codec);
            break;
          }
          case 24: {
            LeagueId = input.ReadUInt32();
            break;
          }
          case 32: {
            LeagueNodeId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCCompendiumInGamePredictionResults message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PredictionResult : pb::IMessage<PredictionResult>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PredictionResult> _parser = new pb::MessageParser<PredictionResult>(() => new PredictionResult());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PredictionResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PredictionResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PredictionResult(PredictionResult other) : this() {
          _hasBits0 = other._hasBits0;
          predictionId_ = other.predictionId_;
          predictionValue_ = other.predictionValue_;
          predictionValueIsMask_ = other.predictionValueIsMask_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PredictionResult Clone() {
          return new PredictionResult(this);
        }

        /// <summary>Field number for the "prediction_id" field.</summary>
        public const int PredictionIdFieldNumber = 1;
        private readonly static uint PredictionIdDefaultValue = 0;

        private uint predictionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PredictionId {
          get { if ((_hasBits0 & 1) != 0) { return predictionId_; } else { return PredictionIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            predictionId_ = value;
          }
        }
        /// <summary>Gets whether the "prediction_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPredictionId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "prediction_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPredictionId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "prediction_value" field.</summary>
        public const int PredictionValueFieldNumber = 2;
        private readonly static uint PredictionValueDefaultValue = 0;

        private uint predictionValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PredictionValue {
          get { if ((_hasBits0 & 2) != 0) { return predictionValue_; } else { return PredictionValueDefaultValue; } }
          set {
            _hasBits0 |= 2;
            predictionValue_ = value;
          }
        }
        /// <summary>Gets whether the "prediction_value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPredictionValue {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "prediction_value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPredictionValue() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "prediction_value_is_mask" field.</summary>
        public const int PredictionValueIsMaskFieldNumber = 3;
        private readonly static bool PredictionValueIsMaskDefaultValue = false;

        private bool predictionValueIsMask_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool PredictionValueIsMask {
          get { if ((_hasBits0 & 4) != 0) { return predictionValueIsMask_; } else { return PredictionValueIsMaskDefaultValue; } }
          set {
            _hasBits0 |= 4;
            predictionValueIsMask_ = value;
          }
        }
        /// <summary>Gets whether the "prediction_value_is_mask" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPredictionValueIsMask {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "prediction_value_is_mask" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPredictionValueIsMask() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PredictionResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PredictionResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PredictionId != other.PredictionId) return false;
          if (PredictionValue != other.PredictionValue) return false;
          if (PredictionValueIsMask != other.PredictionValueIsMask) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPredictionId) hash ^= PredictionId.GetHashCode();
          if (HasPredictionValue) hash ^= PredictionValue.GetHashCode();
          if (HasPredictionValueIsMask) hash ^= PredictionValueIsMask.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPredictionId) {
            output.WriteRawTag(8);
            output.WriteUInt32(PredictionId);
          }
          if (HasPredictionValue) {
            output.WriteRawTag(16);
            output.WriteUInt32(PredictionValue);
          }
          if (HasPredictionValueIsMask) {
            output.WriteRawTag(24);
            output.WriteBool(PredictionValueIsMask);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPredictionId) {
            output.WriteRawTag(8);
            output.WriteUInt32(PredictionId);
          }
          if (HasPredictionValue) {
            output.WriteRawTag(16);
            output.WriteUInt32(PredictionValue);
          }
          if (HasPredictionValueIsMask) {
            output.WriteRawTag(24);
            output.WriteBool(PredictionValueIsMask);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPredictionId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PredictionId);
          }
          if (HasPredictionValue) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PredictionValue);
          }
          if (HasPredictionValueIsMask) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PredictionResult other) {
          if (other == null) {
            return;
          }
          if (other.HasPredictionId) {
            PredictionId = other.PredictionId;
          }
          if (other.HasPredictionValue) {
            PredictionValue = other.PredictionValue;
          }
          if (other.HasPredictionValueIsMask) {
            PredictionValueIsMask = other.PredictionValueIsMask;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PredictionId = input.ReadUInt32();
                break;
              }
              case 16: {
                PredictionValue = input.ReadUInt32();
                break;
              }
              case 24: {
                PredictionValueIsMask = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PredictionId = input.ReadUInt32();
                break;
              }
              case 16: {
                PredictionValue = input.ReadUInt32();
                break;
              }
              case 24: {
                PredictionValueIsMask = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCCompendiumChosenInGamePredictions : pb::IMessage<CMsgServerToGCCompendiumChosenInGamePredictions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCCompendiumChosenInGamePredictions> _parser = new pb::MessageParser<CMsgServerToGCCompendiumChosenInGamePredictions>(() => new CMsgServerToGCCompendiumChosenInGamePredictions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCCompendiumChosenInGamePredictions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCompendiumChosenInGamePredictions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCompendiumChosenInGamePredictions(CMsgServerToGCCompendiumChosenInGamePredictions other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      predictionsChosen_ = other.predictionsChosen_.Clone();
      leagueId_ = other.leagueId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCompendiumChosenInGamePredictions Clone() {
      return new CMsgServerToGCCompendiumChosenInGamePredictions(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "predictions_chosen" field.</summary>
    public const int PredictionsChosenFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCCompendiumChosenInGamePredictions.Types.Prediction> _repeated_predictionsChosen_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgServerToGCCompendiumChosenInGamePredictions.Types.Prediction.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCCompendiumChosenInGamePredictions.Types.Prediction> predictionsChosen_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCCompendiumChosenInGamePredictions.Types.Prediction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCCompendiumChosenInGamePredictions.Types.Prediction> PredictionsChosen {
      get { return predictionsChosen_; }
    }

    /// <summary>Field number for the "league_id" field.</summary>
    public const int LeagueIdFieldNumber = 3;
    private readonly static uint LeagueIdDefaultValue = 0;

    private uint leagueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeagueId {
      get { if ((_hasBits0 & 2) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leagueId_ = value;
      }
    }
    /// <summary>Gets whether the "league_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "league_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCCompendiumChosenInGamePredictions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCCompendiumChosenInGamePredictions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!predictionsChosen_.Equals(other.predictionsChosen_)) return false;
      if (LeagueId != other.LeagueId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      hash ^= predictionsChosen_.GetHashCode();
      if (HasLeagueId) hash ^= LeagueId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      predictionsChosen_.WriteTo(output, _repeated_predictionsChosen_codec);
      if (HasLeagueId) {
        output.WriteRawTag(24);
        output.WriteUInt32(LeagueId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      predictionsChosen_.WriteTo(ref output, _repeated_predictionsChosen_codec);
      if (HasLeagueId) {
        output.WriteRawTag(24);
        output.WriteUInt32(LeagueId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      size += predictionsChosen_.CalculateSize(_repeated_predictionsChosen_codec);
      if (HasLeagueId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCCompendiumChosenInGamePredictions other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      predictionsChosen_.Add(other.predictionsChosen_);
      if (other.HasLeagueId) {
        LeagueId = other.LeagueId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 18: {
            predictionsChosen_.AddEntriesFrom(input, _repeated_predictionsChosen_codec);
            break;
          }
          case 24: {
            LeagueId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 18: {
            predictionsChosen_.AddEntriesFrom(ref input, _repeated_predictionsChosen_codec);
            break;
          }
          case 24: {
            LeagueId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCCompendiumChosenInGamePredictions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Prediction : pb::IMessage<Prediction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Prediction> _parser = new pb::MessageParser<Prediction>(() => new Prediction());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Prediction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCCompendiumChosenInGamePredictions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction(Prediction other) : this() {
          _hasBits0 = other._hasBits0;
          predictionId_ = other.predictionId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction Clone() {
          return new Prediction(this);
        }

        /// <summary>Field number for the "prediction_id" field.</summary>
        public const int PredictionIdFieldNumber = 1;
        private readonly static uint PredictionIdDefaultValue = 0;

        private uint predictionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PredictionId {
          get { if ((_hasBits0 & 1) != 0) { return predictionId_; } else { return PredictionIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            predictionId_ = value;
          }
        }
        /// <summary>Gets whether the "prediction_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPredictionId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "prediction_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPredictionId() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Prediction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Prediction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PredictionId != other.PredictionId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPredictionId) hash ^= PredictionId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPredictionId) {
            output.WriteRawTag(8);
            output.WriteUInt32(PredictionId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPredictionId) {
            output.WriteRawTag(8);
            output.WriteUInt32(PredictionId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPredictionId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PredictionId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Prediction other) {
          if (other == null) {
            return;
          }
          if (other.HasPredictionId) {
            PredictionId = other.PredictionId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PredictionId = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PredictionId = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGCToGCCompendiumInGamePredictionResults : pb::IMessage<CMsgGCToGCCompendiumInGamePredictionResults>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToGCCompendiumInGamePredictionResults> _parser = new pb::MessageParser<CMsgGCToGCCompendiumInGamePredictionResults>(() => new CMsgGCToGCCompendiumInGamePredictionResults());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToGCCompendiumInGamePredictionResults> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCCompendiumInGamePredictionResults() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCCompendiumInGamePredictionResults(CMsgGCToGCCompendiumInGamePredictionResults other) : this() {
      results_ = other.results_ != null ? other.results_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCCompendiumInGamePredictionResults Clone() {
      return new CMsgGCToGCCompendiumInGamePredictionResults(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults results_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults Results {
      get { return results_; }
      set {
        results_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToGCCompendiumInGamePredictionResults);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToGCCompendiumInGamePredictionResults other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Results, other.Results)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (results_ != null) hash ^= Results.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (results_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Results);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (results_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Results);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (results_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToGCCompendiumInGamePredictionResults other) {
      if (other == null) {
        return;
      }
      if (other.results_ != null) {
        if (results_ == null) {
          Results = new global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults();
        }
        Results.MergeFrom(other.Results);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (results_ == null) {
              Results = new global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults();
            }
            input.ReadMessage(Results);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (results_ == null) {
              Results = new global::Steam.Protos.Dota2.CMsgServerToGCCompendiumInGamePredictionResults();
            }
            input.ReadMessage(Results);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCMatchPlayerItemPurchaseHistory : pb::IMessage<CMsgServerToGCMatchPlayerItemPurchaseHistory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCMatchPlayerItemPurchaseHistory> _parser = new pb::MessageParser<CMsgServerToGCMatchPlayerItemPurchaseHistory>(() => new CMsgServerToGCMatchPlayerItemPurchaseHistory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCMatchPlayerItemPurchaseHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchPlayerItemPurchaseHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchPlayerItemPurchaseHistory(CMsgServerToGCMatchPlayerItemPurchaseHistory other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      mmr_ = other.mmr_;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchPlayerItemPurchaseHistory Clone() {
      return new CMsgServerToGCMatchPlayerItemPurchaseHistory(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "mmr" field.</summary>
    public const int MmrFieldNumber = 2;
    private readonly static uint MmrDefaultValue = 0;

    private uint mmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mmr {
      get { if ((_hasBits0 & 2) != 0) { return mmr_; } else { return MmrDefaultValue; } }
      set {
        _hasBits0 |= 2;
        mmr_ = value;
      }
    }
    /// <summary>Gets whether the "mmr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMmr {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "mmr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMmr() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCMatchPlayerItemPurchaseHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCMatchPlayerItemPurchaseHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Mmr != other.Mmr) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasMmr) hash ^= Mmr.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasMmr) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mmr);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasMmr) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mmr);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasMmr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mmr);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCMatchPlayerItemPurchaseHistory other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasMmr) {
        Mmr = other.Mmr;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCMatchPlayerItemPurchaseHistory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ItemPurchase : pb::IMessage<ItemPurchase>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ItemPurchase> _parser = new pb::MessageParser<ItemPurchase>(() => new ItemPurchase());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemPurchase> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemPurchase() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemPurchase(ItemPurchase other) : this() {
          _hasBits0 = other._hasBits0;
          item_ = other.item_;
          gold_ = other.gold_;
          netWorth_ = other.netWorth_;
          gameTime_ = other.gameTime_;
          inventoryItems_ = other.inventoryItems_.Clone();
          talentsSkilled_ = other.talentsSkilled_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemPurchase Clone() {
          return new ItemPurchase(this);
        }

        /// <summary>Field number for the "item" field.</summary>
        public const int ItemFieldNumber = 1;
        private readonly static int ItemDefaultValue = -1;

        private int item_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item {
          get { if ((_hasBits0 & 1) != 0) { return item_; } else { return ItemDefaultValue; } }
          set {
            _hasBits0 |= 1;
            item_ = value;
          }
        }
        /// <summary>Gets whether the "item" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "item" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "gold" field.</summary>
        public const int GoldFieldNumber = 2;
        private readonly static uint GoldDefaultValue = 0;

        private uint gold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Gold {
          get { if ((_hasBits0 & 2) != 0) { return gold_; } else { return GoldDefaultValue; } }
          set {
            _hasBits0 |= 2;
            gold_ = value;
          }
        }
        /// <summary>Gets whether the "gold" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGold {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "gold" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGold() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "net_worth" field.</summary>
        public const int NetWorthFieldNumber = 3;
        private readonly static uint NetWorthDefaultValue = 0;

        private uint netWorth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NetWorth {
          get { if ((_hasBits0 & 4) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
          set {
            _hasBits0 |= 4;
            netWorth_ = value;
          }
        }
        /// <summary>Gets whether the "net_worth" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNetWorth {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "net_worth" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNetWorth() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "game_time" field.</summary>
        public const int GameTimeFieldNumber = 4;
        private readonly static uint GameTimeDefaultValue = 0;

        private uint gameTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameTime {
          get { if ((_hasBits0 & 8) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
          set {
            _hasBits0 |= 8;
            gameTime_ = value;
          }
        }
        /// <summary>Gets whether the "game_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameTime {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "game_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameTime() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "inventory_items" field.</summary>
        public const int InventoryItemsFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_inventoryItems_codec
            = pb::FieldCodec.ForInt32(40);
        private readonly pbc::RepeatedField<int> inventoryItems_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> InventoryItems {
          get { return inventoryItems_; }
        }

        /// <summary>Field number for the "talents_skilled" field.</summary>
        public const int TalentsSkilledFieldNumber = 7;
        private static readonly pb::FieldCodec<bool> _repeated_talentsSkilled_codec
            = pb::FieldCodec.ForBool(56);
        private readonly pbc::RepeatedField<bool> talentsSkilled_ = new pbc::RepeatedField<bool>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<bool> TalentsSkilled {
          get { return talentsSkilled_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ItemPurchase);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ItemPurchase other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Item != other.Item) return false;
          if (Gold != other.Gold) return false;
          if (NetWorth != other.NetWorth) return false;
          if (GameTime != other.GameTime) return false;
          if(!inventoryItems_.Equals(other.inventoryItems_)) return false;
          if(!talentsSkilled_.Equals(other.talentsSkilled_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasItem) hash ^= Item.GetHashCode();
          if (HasGold) hash ^= Gold.GetHashCode();
          if (HasNetWorth) hash ^= NetWorth.GetHashCode();
          if (HasGameTime) hash ^= GameTime.GetHashCode();
          hash ^= inventoryItems_.GetHashCode();
          hash ^= talentsSkilled_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasItem) {
            output.WriteRawTag(8);
            output.WriteInt32(Item);
          }
          if (HasGold) {
            output.WriteRawTag(16);
            output.WriteUInt32(Gold);
          }
          if (HasNetWorth) {
            output.WriteRawTag(24);
            output.WriteUInt32(NetWorth);
          }
          if (HasGameTime) {
            output.WriteRawTag(32);
            output.WriteUInt32(GameTime);
          }
          inventoryItems_.WriteTo(output, _repeated_inventoryItems_codec);
          talentsSkilled_.WriteTo(output, _repeated_talentsSkilled_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasItem) {
            output.WriteRawTag(8);
            output.WriteInt32(Item);
          }
          if (HasGold) {
            output.WriteRawTag(16);
            output.WriteUInt32(Gold);
          }
          if (HasNetWorth) {
            output.WriteRawTag(24);
            output.WriteUInt32(NetWorth);
          }
          if (HasGameTime) {
            output.WriteRawTag(32);
            output.WriteUInt32(GameTime);
          }
          inventoryItems_.WriteTo(ref output, _repeated_inventoryItems_codec);
          talentsSkilled_.WriteTo(ref output, _repeated_talentsSkilled_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasItem) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item);
          }
          if (HasGold) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gold);
          }
          if (HasNetWorth) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
          }
          if (HasGameTime) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameTime);
          }
          size += inventoryItems_.CalculateSize(_repeated_inventoryItems_codec);
          size += talentsSkilled_.CalculateSize(_repeated_talentsSkilled_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ItemPurchase other) {
          if (other == null) {
            return;
          }
          if (other.HasItem) {
            Item = other.Item;
          }
          if (other.HasGold) {
            Gold = other.Gold;
          }
          if (other.HasNetWorth) {
            NetWorth = other.NetWorth;
          }
          if (other.HasGameTime) {
            GameTime = other.GameTime;
          }
          inventoryItems_.Add(other.inventoryItems_);
          talentsSkilled_.Add(other.talentsSkilled_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Item = input.ReadInt32();
                break;
              }
              case 16: {
                Gold = input.ReadUInt32();
                break;
              }
              case 24: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 32: {
                GameTime = input.ReadUInt32();
                break;
              }
              case 42:
              case 40: {
                inventoryItems_.AddEntriesFrom(input, _repeated_inventoryItems_codec);
                break;
              }
              case 58:
              case 56: {
                talentsSkilled_.AddEntriesFrom(input, _repeated_talentsSkilled_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Item = input.ReadInt32();
                break;
              }
              case 16: {
                Gold = input.ReadUInt32();
                break;
              }
              case 24: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 32: {
                GameTime = input.ReadUInt32();
                break;
              }
              case 42:
              case 40: {
                inventoryItems_.AddEntriesFrom(ref input, _repeated_inventoryItems_codec);
                break;
              }
              case 58:
              case 56: {
                talentsSkilled_.AddEntriesFrom(ref input, _repeated_talentsSkilled_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          playerSlot_ = other.playerSlot_;
          accountId_ = other.accountId_;
          heroId_ = other.heroId_;
          alliedHeroIds_ = other.alliedHeroIds_.Clone();
          enemyHeroIds_ = other.enemyHeroIds_.Clone();
          itemPurchases_ = other.itemPurchases_.Clone();
          lane_ = other.lane_;
          isWinner_ = other.isWinner_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "player_slot" field.</summary>
        public const int PlayerSlotFieldNumber = 1;
        private readonly static uint PlayerSlotDefaultValue = 0;

        private uint playerSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerSlot {
          get { if ((_hasBits0 & 1) != 0) { return playerSlot_; } else { return PlayerSlotDefaultValue; } }
          set {
            _hasBits0 |= 1;
            playerSlot_ = value;
          }
        }
        /// <summary>Gets whether the "player_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerSlot {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerSlot() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 2;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 2) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 3;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "allied_hero_ids" field.</summary>
        public const int AlliedHeroIdsFieldNumber = 4;
        private static readonly pb::FieldCodec<int> _repeated_alliedHeroIds_codec
            = pb::FieldCodec.ForInt32(32);
        private readonly pbc::RepeatedField<int> alliedHeroIds_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> AlliedHeroIds {
          get { return alliedHeroIds_; }
        }

        /// <summary>Field number for the "enemy_hero_ids" field.</summary>
        public const int EnemyHeroIdsFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_enemyHeroIds_codec
            = pb::FieldCodec.ForInt32(40);
        private readonly pbc::RepeatedField<int> enemyHeroIds_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> EnemyHeroIds {
          get { return enemyHeroIds_; }
        }

        /// <summary>Field number for the "item_purchases" field.</summary>
        public const int ItemPurchasesFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.ItemPurchase> _repeated_itemPurchases_codec
            = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.ItemPurchase.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.ItemPurchase> itemPurchases_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.ItemPurchase>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerItemPurchaseHistory.Types.ItemPurchase> ItemPurchases {
          get { return itemPurchases_; }
        }

        /// <summary>Field number for the "lane" field.</summary>
        public const int LaneFieldNumber = 7;
        private readonly static uint LaneDefaultValue = 0;

        private uint lane_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Lane {
          get { if ((_hasBits0 & 8) != 0) { return lane_; } else { return LaneDefaultValue; } }
          set {
            _hasBits0 |= 8;
            lane_ = value;
          }
        }
        /// <summary>Gets whether the "lane" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLane {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "lane" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLane() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "is_winner" field.</summary>
        public const int IsWinnerFieldNumber = 8;
        private readonly static bool IsWinnerDefaultValue = false;

        private bool isWinner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsWinner {
          get { if ((_hasBits0 & 16) != 0) { return isWinner_; } else { return IsWinnerDefaultValue; } }
          set {
            _hasBits0 |= 16;
            isWinner_ = value;
          }
        }
        /// <summary>Gets whether the "is_winner" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsWinner {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "is_winner" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsWinner() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerSlot != other.PlayerSlot) return false;
          if (AccountId != other.AccountId) return false;
          if (HeroId != other.HeroId) return false;
          if(!alliedHeroIds_.Equals(other.alliedHeroIds_)) return false;
          if(!enemyHeroIds_.Equals(other.enemyHeroIds_)) return false;
          if(!itemPurchases_.Equals(other.itemPurchases_)) return false;
          if (Lane != other.Lane) return false;
          if (IsWinner != other.IsWinner) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPlayerSlot) hash ^= PlayerSlot.GetHashCode();
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          hash ^= alliedHeroIds_.GetHashCode();
          hash ^= enemyHeroIds_.GetHashCode();
          hash ^= itemPurchases_.GetHashCode();
          if (HasLane) hash ^= Lane.GetHashCode();
          if (HasIsWinner) hash ^= IsWinner.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPlayerSlot) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlayerSlot);
          }
          if (HasAccountId) {
            output.WriteRawTag(16);
            output.WriteUInt32(AccountId);
          }
          if (HasHeroId) {
            output.WriteRawTag(24);
            output.WriteInt32(HeroId);
          }
          alliedHeroIds_.WriteTo(output, _repeated_alliedHeroIds_codec);
          enemyHeroIds_.WriteTo(output, _repeated_enemyHeroIds_codec);
          itemPurchases_.WriteTo(output, _repeated_itemPurchases_codec);
          if (HasLane) {
            output.WriteRawTag(56);
            output.WriteUInt32(Lane);
          }
          if (HasIsWinner) {
            output.WriteRawTag(64);
            output.WriteBool(IsWinner);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPlayerSlot) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlayerSlot);
          }
          if (HasAccountId) {
            output.WriteRawTag(16);
            output.WriteUInt32(AccountId);
          }
          if (HasHeroId) {
            output.WriteRawTag(24);
            output.WriteInt32(HeroId);
          }
          alliedHeroIds_.WriteTo(ref output, _repeated_alliedHeroIds_codec);
          enemyHeroIds_.WriteTo(ref output, _repeated_enemyHeroIds_codec);
          itemPurchases_.WriteTo(ref output, _repeated_itemPurchases_codec);
          if (HasLane) {
            output.WriteRawTag(56);
            output.WriteUInt32(Lane);
          }
          if (HasIsWinner) {
            output.WriteRawTag(64);
            output.WriteBool(IsWinner);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPlayerSlot) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
          }
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          size += alliedHeroIds_.CalculateSize(_repeated_alliedHeroIds_codec);
          size += enemyHeroIds_.CalculateSize(_repeated_enemyHeroIds_codec);
          size += itemPurchases_.CalculateSize(_repeated_itemPurchases_codec);
          if (HasLane) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lane);
          }
          if (HasIsWinner) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasPlayerSlot) {
            PlayerSlot = other.PlayerSlot;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          alliedHeroIds_.Add(other.alliedHeroIds_);
          enemyHeroIds_.Add(other.enemyHeroIds_);
          itemPurchases_.Add(other.itemPurchases_);
          if (other.HasLane) {
            Lane = other.Lane;
          }
          if (other.HasIsWinner) {
            IsWinner = other.IsWinner;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 16: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadInt32();
                break;
              }
              case 34:
              case 32: {
                alliedHeroIds_.AddEntriesFrom(input, _repeated_alliedHeroIds_codec);
                break;
              }
              case 42:
              case 40: {
                enemyHeroIds_.AddEntriesFrom(input, _repeated_enemyHeroIds_codec);
                break;
              }
              case 50: {
                itemPurchases_.AddEntriesFrom(input, _repeated_itemPurchases_codec);
                break;
              }
              case 56: {
                Lane = input.ReadUInt32();
                break;
              }
              case 64: {
                IsWinner = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 16: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadInt32();
                break;
              }
              case 34:
              case 32: {
                alliedHeroIds_.AddEntriesFrom(ref input, _repeated_alliedHeroIds_codec);
                break;
              }
              case 42:
              case 40: {
                enemyHeroIds_.AddEntriesFrom(ref input, _repeated_enemyHeroIds_codec);
                break;
              }
              case 50: {
                itemPurchases_.AddEntriesFrom(ref input, _repeated_itemPurchases_codec);
                break;
              }
              case 56: {
                Lane = input.ReadUInt32();
                break;
              }
              case 64: {
                IsWinner = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCMatchPlayerNeutralItemEquipHistory : pb::IMessage<CMsgServerToGCMatchPlayerNeutralItemEquipHistory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCMatchPlayerNeutralItemEquipHistory> _parser = new pb::MessageParser<CMsgServerToGCMatchPlayerNeutralItemEquipHistory>(() => new CMsgServerToGCMatchPlayerNeutralItemEquipHistory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCMatchPlayerNeutralItemEquipHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchPlayerNeutralItemEquipHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchPlayerNeutralItemEquipHistory(CMsgServerToGCMatchPlayerNeutralItemEquipHistory other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchPlayerNeutralItemEquipHistory Clone() {
      return new CMsgServerToGCMatchPlayerNeutralItemEquipHistory(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCMatchPlayerNeutralItemEquipHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCMatchPlayerNeutralItemEquipHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCMatchPlayerNeutralItemEquipHistory other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCMatchPlayerNeutralItemEquipHistory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ItemEquip : pb::IMessage<ItemEquip>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ItemEquip> _parser = new pb::MessageParser<ItemEquip>(() => new ItemEquip());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemEquip> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemEquip() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemEquip(ItemEquip other) : this() {
          _hasBits0 = other._hasBits0;
          item_ = other.item_;
          gameTime_ = other.gameTime_;
          inventoryItems_ = other.inventoryItems_.Clone();
          talentsSkilled_ = other.talentsSkilled_.Clone();
          availableNeutralItems_ = other.availableNeutralItems_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemEquip Clone() {
          return new ItemEquip(this);
        }

        /// <summary>Field number for the "item" field.</summary>
        public const int ItemFieldNumber = 1;
        private readonly static int ItemDefaultValue = -1;

        private int item_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item {
          get { if ((_hasBits0 & 1) != 0) { return item_; } else { return ItemDefaultValue; } }
          set {
            _hasBits0 |= 1;
            item_ = value;
          }
        }
        /// <summary>Gets whether the "item" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "item" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "game_time" field.</summary>
        public const int GameTimeFieldNumber = 2;
        private readonly static uint GameTimeDefaultValue = 0;

        private uint gameTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameTime {
          get { if ((_hasBits0 & 2) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            gameTime_ = value;
          }
        }
        /// <summary>Gets whether the "game_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameTime {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "game_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameTime() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "inventory_items" field.</summary>
        public const int InventoryItemsFieldNumber = 3;
        private static readonly pb::FieldCodec<int> _repeated_inventoryItems_codec
            = pb::FieldCodec.ForInt32(24);
        private readonly pbc::RepeatedField<int> inventoryItems_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> InventoryItems {
          get { return inventoryItems_; }
        }

        /// <summary>Field number for the "talents_skilled" field.</summary>
        public const int TalentsSkilledFieldNumber = 4;
        private static readonly pb::FieldCodec<bool> _repeated_talentsSkilled_codec
            = pb::FieldCodec.ForBool(32);
        private readonly pbc::RepeatedField<bool> talentsSkilled_ = new pbc::RepeatedField<bool>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<bool> TalentsSkilled {
          get { return talentsSkilled_; }
        }

        /// <summary>Field number for the "available_neutral_items" field.</summary>
        public const int AvailableNeutralItemsFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_availableNeutralItems_codec
            = pb::FieldCodec.ForInt32(40);
        private readonly pbc::RepeatedField<int> availableNeutralItems_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> AvailableNeutralItems {
          get { return availableNeutralItems_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ItemEquip);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ItemEquip other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Item != other.Item) return false;
          if (GameTime != other.GameTime) return false;
          if(!inventoryItems_.Equals(other.inventoryItems_)) return false;
          if(!talentsSkilled_.Equals(other.talentsSkilled_)) return false;
          if(!availableNeutralItems_.Equals(other.availableNeutralItems_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasItem) hash ^= Item.GetHashCode();
          if (HasGameTime) hash ^= GameTime.GetHashCode();
          hash ^= inventoryItems_.GetHashCode();
          hash ^= talentsSkilled_.GetHashCode();
          hash ^= availableNeutralItems_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasItem) {
            output.WriteRawTag(8);
            output.WriteInt32(Item);
          }
          if (HasGameTime) {
            output.WriteRawTag(16);
            output.WriteUInt32(GameTime);
          }
          inventoryItems_.WriteTo(output, _repeated_inventoryItems_codec);
          talentsSkilled_.WriteTo(output, _repeated_talentsSkilled_codec);
          availableNeutralItems_.WriteTo(output, _repeated_availableNeutralItems_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasItem) {
            output.WriteRawTag(8);
            output.WriteInt32(Item);
          }
          if (HasGameTime) {
            output.WriteRawTag(16);
            output.WriteUInt32(GameTime);
          }
          inventoryItems_.WriteTo(ref output, _repeated_inventoryItems_codec);
          talentsSkilled_.WriteTo(ref output, _repeated_talentsSkilled_codec);
          availableNeutralItems_.WriteTo(ref output, _repeated_availableNeutralItems_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasItem) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item);
          }
          if (HasGameTime) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameTime);
          }
          size += inventoryItems_.CalculateSize(_repeated_inventoryItems_codec);
          size += talentsSkilled_.CalculateSize(_repeated_talentsSkilled_codec);
          size += availableNeutralItems_.CalculateSize(_repeated_availableNeutralItems_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ItemEquip other) {
          if (other == null) {
            return;
          }
          if (other.HasItem) {
            Item = other.Item;
          }
          if (other.HasGameTime) {
            GameTime = other.GameTime;
          }
          inventoryItems_.Add(other.inventoryItems_);
          talentsSkilled_.Add(other.talentsSkilled_);
          availableNeutralItems_.Add(other.availableNeutralItems_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Item = input.ReadInt32();
                break;
              }
              case 16: {
                GameTime = input.ReadUInt32();
                break;
              }
              case 26:
              case 24: {
                inventoryItems_.AddEntriesFrom(input, _repeated_inventoryItems_codec);
                break;
              }
              case 34:
              case 32: {
                talentsSkilled_.AddEntriesFrom(input, _repeated_talentsSkilled_codec);
                break;
              }
              case 42:
              case 40: {
                availableNeutralItems_.AddEntriesFrom(input, _repeated_availableNeutralItems_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Item = input.ReadInt32();
                break;
              }
              case 16: {
                GameTime = input.ReadUInt32();
                break;
              }
              case 26:
              case 24: {
                inventoryItems_.AddEntriesFrom(ref input, _repeated_inventoryItems_codec);
                break;
              }
              case 34:
              case 32: {
                talentsSkilled_.AddEntriesFrom(ref input, _repeated_talentsSkilled_codec);
                break;
              }
              case 42:
              case 40: {
                availableNeutralItems_.AddEntriesFrom(ref input, _repeated_availableNeutralItems_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          alliedHeroIds_ = other.alliedHeroIds_.Clone();
          enemyHeroIds_ = other.enemyHeroIds_.Clone();
          itemEquips_ = other.itemEquips_.Clone();
          isWinner_ = other.isWinner_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "allied_hero_ids" field.</summary>
        public const int AlliedHeroIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<int> _repeated_alliedHeroIds_codec
            = pb::FieldCodec.ForInt32(16);
        private readonly pbc::RepeatedField<int> alliedHeroIds_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> AlliedHeroIds {
          get { return alliedHeroIds_; }
        }

        /// <summary>Field number for the "enemy_hero_ids" field.</summary>
        public const int EnemyHeroIdsFieldNumber = 3;
        private static readonly pb::FieldCodec<int> _repeated_enemyHeroIds_codec
            = pb::FieldCodec.ForInt32(24);
        private readonly pbc::RepeatedField<int> enemyHeroIds_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> EnemyHeroIds {
          get { return enemyHeroIds_; }
        }

        /// <summary>Field number for the "item_equips" field.</summary>
        public const int ItemEquipsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.ItemEquip> _repeated_itemEquips_codec
            = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.ItemEquip.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.ItemEquip> itemEquips_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.ItemEquip>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Types.ItemEquip> ItemEquips {
          get { return itemEquips_; }
        }

        /// <summary>Field number for the "is_winner" field.</summary>
        public const int IsWinnerFieldNumber = 5;
        private readonly static bool IsWinnerDefaultValue = false;

        private bool isWinner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsWinner {
          get { if ((_hasBits0 & 2) != 0) { return isWinner_; } else { return IsWinnerDefaultValue; } }
          set {
            _hasBits0 |= 2;
            isWinner_ = value;
          }
        }
        /// <summary>Gets whether the "is_winner" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsWinner {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "is_winner" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsWinner() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if(!alliedHeroIds_.Equals(other.alliedHeroIds_)) return false;
          if(!enemyHeroIds_.Equals(other.enemyHeroIds_)) return false;
          if(!itemEquips_.Equals(other.itemEquips_)) return false;
          if (IsWinner != other.IsWinner) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          hash ^= alliedHeroIds_.GetHashCode();
          hash ^= enemyHeroIds_.GetHashCode();
          hash ^= itemEquips_.GetHashCode();
          if (HasIsWinner) hash ^= IsWinner.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          alliedHeroIds_.WriteTo(output, _repeated_alliedHeroIds_codec);
          enemyHeroIds_.WriteTo(output, _repeated_enemyHeroIds_codec);
          itemEquips_.WriteTo(output, _repeated_itemEquips_codec);
          if (HasIsWinner) {
            output.WriteRawTag(40);
            output.WriteBool(IsWinner);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          alliedHeroIds_.WriteTo(ref output, _repeated_alliedHeroIds_codec);
          enemyHeroIds_.WriteTo(ref output, _repeated_enemyHeroIds_codec);
          itemEquips_.WriteTo(ref output, _repeated_itemEquips_codec);
          if (HasIsWinner) {
            output.WriteRawTag(40);
            output.WriteBool(IsWinner);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          size += alliedHeroIds_.CalculateSize(_repeated_alliedHeroIds_codec);
          size += enemyHeroIds_.CalculateSize(_repeated_enemyHeroIds_codec);
          size += itemEquips_.CalculateSize(_repeated_itemEquips_codec);
          if (HasIsWinner) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          alliedHeroIds_.Add(other.alliedHeroIds_);
          enemyHeroIds_.Add(other.enemyHeroIds_);
          itemEquips_.Add(other.itemEquips_);
          if (other.HasIsWinner) {
            IsWinner = other.IsWinner;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                alliedHeroIds_.AddEntriesFrom(input, _repeated_alliedHeroIds_codec);
                break;
              }
              case 26:
              case 24: {
                enemyHeroIds_.AddEntriesFrom(input, _repeated_enemyHeroIds_codec);
                break;
              }
              case 34: {
                itemEquips_.AddEntriesFrom(input, _repeated_itemEquips_codec);
                break;
              }
              case 40: {
                IsWinner = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                alliedHeroIds_.AddEntriesFrom(ref input, _repeated_alliedHeroIds_codec);
                break;
              }
              case 26:
              case 24: {
                enemyHeroIds_.AddEntriesFrom(ref input, _repeated_enemyHeroIds_codec);
                break;
              }
              case 34: {
                itemEquips_.AddEntriesFrom(ref input, _repeated_itemEquips_codec);
                break;
              }
              case 40: {
                IsWinner = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCMatchStateHistory : pb::IMessage<CMsgServerToGCMatchStateHistory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCMatchStateHistory> _parser = new pb::MessageParser<CMsgServerToGCMatchStateHistory>(() => new CMsgServerToGCMatchStateHistory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCMatchStateHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchStateHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchStateHistory(CMsgServerToGCMatchStateHistory other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      radiantWon_ = other.radiantWon_;
      mmr_ = other.mmr_;
      matchStates_ = other.matchStates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCMatchStateHistory Clone() {
      return new CMsgServerToGCMatchStateHistory(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "radiant_won" field.</summary>
    public const int RadiantWonFieldNumber = 2;
    private readonly static bool RadiantWonDefaultValue = false;

    private bool radiantWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RadiantWon {
      get { if ((_hasBits0 & 2) != 0) { return radiantWon_; } else { return RadiantWonDefaultValue; } }
      set {
        _hasBits0 |= 2;
        radiantWon_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_won" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantWon {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "radiant_won" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantWon() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "mmr" field.</summary>
    public const int MmrFieldNumber = 3;
    private readonly static uint MmrDefaultValue = 0;

    private uint mmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mmr {
      get { if ((_hasBits0 & 4) != 0) { return mmr_; } else { return MmrDefaultValue; } }
      set {
        _hasBits0 |= 4;
        mmr_ = value;
      }
    }
    /// <summary>Gets whether the "mmr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMmr {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mmr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMmr() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "match_states" field.</summary>
    public const int MatchStatesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState> _repeated_matchStates_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState> matchStates_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState> MatchStates {
      get { return matchStates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCMatchStateHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCMatchStateHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (RadiantWon != other.RadiantWon) return false;
      if (Mmr != other.Mmr) return false;
      if(!matchStates_.Equals(other.matchStates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasRadiantWon) hash ^= RadiantWon.GetHashCode();
      if (HasMmr) hash ^= Mmr.GetHashCode();
      hash ^= matchStates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasRadiantWon) {
        output.WriteRawTag(16);
        output.WriteBool(RadiantWon);
      }
      if (HasMmr) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mmr);
      }
      matchStates_.WriteTo(output, _repeated_matchStates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasRadiantWon) {
        output.WriteRawTag(16);
        output.WriteBool(RadiantWon);
      }
      if (HasMmr) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mmr);
      }
      matchStates_.WriteTo(ref output, _repeated_matchStates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasRadiantWon) {
        size += 1 + 1;
      }
      if (HasMmr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mmr);
      }
      size += matchStates_.CalculateSize(_repeated_matchStates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCMatchStateHistory other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasRadiantWon) {
        RadiantWon = other.RadiantWon;
      }
      if (other.HasMmr) {
        Mmr = other.Mmr;
      }
      matchStates_.Add(other.matchStates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            RadiantWon = input.ReadBool();
            break;
          }
          case 24: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 34: {
            matchStates_.AddEntriesFrom(input, _repeated_matchStates_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            RadiantWon = input.ReadBool();
            break;
          }
          case 24: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 34: {
            matchStates_.AddEntriesFrom(ref input, _repeated_matchStates_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCMatchStateHistory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerState : pb::IMessage<PlayerState>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState(PlayerState other) : this() {
          _hasBits0 = other._hasBits0;
          heroId_ = other.heroId_;
          netWorth_ = other.netWorth_;
          level_ = other.level_;
          deaths_ = other.deaths_;
          respawnTime_ = other.respawnTime_;
          hasBuyback_ = other.hasBuyback_;
          hasAegis_ = other.hasAegis_;
          hasRapier_ = other.hasRapier_;
          distance_ = other.distance_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState Clone() {
          return new PlayerState(this);
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 1;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "net_worth" field.</summary>
        public const int NetWorthFieldNumber = 2;
        private readonly static uint NetWorthDefaultValue = 0;

        private uint netWorth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NetWorth {
          get { if ((_hasBits0 & 2) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
          set {
            _hasBits0 |= 2;
            netWorth_ = value;
          }
        }
        /// <summary>Gets whether the "net_worth" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNetWorth {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "net_worth" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNetWorth() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 3;
        private readonly static uint LevelDefaultValue = 0;

        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { if ((_hasBits0 & 4) != 0) { return level_; } else { return LevelDefaultValue; } }
          set {
            _hasBits0 |= 4;
            level_ = value;
          }
        }
        /// <summary>Gets whether the "level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLevel {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLevel() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "deaths" field.</summary>
        public const int DeathsFieldNumber = 4;
        private readonly static uint DeathsDefaultValue = 0;

        private uint deaths_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Deaths {
          get { if ((_hasBits0 & 8) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
          set {
            _hasBits0 |= 8;
            deaths_ = value;
          }
        }
        /// <summary>Gets whether the "deaths" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeaths {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "deaths" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeaths() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "respawn_time" field.</summary>
        public const int RespawnTimeFieldNumber = 5;
        private readonly static uint RespawnTimeDefaultValue = 0;

        private uint respawnTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RespawnTime {
          get { if ((_hasBits0 & 16) != 0) { return respawnTime_; } else { return RespawnTimeDefaultValue; } }
          set {
            _hasBits0 |= 16;
            respawnTime_ = value;
          }
        }
        /// <summary>Gets whether the "respawn_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRespawnTime {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "respawn_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRespawnTime() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "has_buyback" field.</summary>
        public const int HasBuybackFieldNumber = 6;
        private readonly static bool HasBuybackDefaultValue = false;

        private bool hasBuyback_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuyback {
          get { if ((_hasBits0 & 32) != 0) { return hasBuyback_; } else { return HasBuybackDefaultValue; } }
          set {
            _hasBits0 |= 32;
            hasBuyback_ = value;
          }
        }
        /// <summary>Gets whether the "has_buyback" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasBuyback {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "has_buyback" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasBuyback() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "has_aegis" field.</summary>
        public const int HasAegisFieldNumber = 7;
        private readonly static bool HasAegisDefaultValue = false;

        private bool hasAegis_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAegis {
          get { if ((_hasBits0 & 64) != 0) { return hasAegis_; } else { return HasAegisDefaultValue; } }
          set {
            _hasBits0 |= 64;
            hasAegis_ = value;
          }
        }
        /// <summary>Gets whether the "has_aegis" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasAegis {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "has_aegis" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasAegis() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "has_rapier" field.</summary>
        public const int HasRapierFieldNumber = 8;
        private readonly static bool HasRapierDefaultValue = false;

        private bool hasRapier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRapier {
          get { if ((_hasBits0 & 128) != 0) { return hasRapier_; } else { return HasRapierDefaultValue; } }
          set {
            _hasBits0 |= 128;
            hasRapier_ = value;
          }
        }
        /// <summary>Gets whether the "has_rapier" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasRapier {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "has_rapier" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasRapier() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 9;
        private readonly static uint DistanceDefaultValue = 0;

        private uint distance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Distance {
          get { if ((_hasBits0 & 256) != 0) { return distance_; } else { return DistanceDefaultValue; } }
          set {
            _hasBits0 |= 256;
            distance_ = value;
          }
        }
        /// <summary>Gets whether the "distance" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDistance {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "distance" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDistance() {
          _hasBits0 &= ~256;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HeroId != other.HeroId) return false;
          if (NetWorth != other.NetWorth) return false;
          if (Level != other.Level) return false;
          if (Deaths != other.Deaths) return false;
          if (RespawnTime != other.RespawnTime) return false;
          if (HasBuyback != other.HasBuyback) return false;
          if (HasAegis != other.HasAegis) return false;
          if (HasRapier != other.HasRapier) return false;
          if (Distance != other.Distance) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasNetWorth) hash ^= NetWorth.GetHashCode();
          if (HasLevel) hash ^= Level.GetHashCode();
          if (HasDeaths) hash ^= Deaths.GetHashCode();
          if (HasRespawnTime) hash ^= RespawnTime.GetHashCode();
          if (HasHasBuyback) hash ^= HasBuyback.GetHashCode();
          if (HasHasAegis) hash ^= HasAegis.GetHashCode();
          if (HasHasRapier) hash ^= HasRapier.GetHashCode();
          if (HasDistance) hash ^= Distance.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasHeroId) {
            output.WriteRawTag(8);
            output.WriteInt32(HeroId);
          }
          if (HasNetWorth) {
            output.WriteRawTag(16);
            output.WriteUInt32(NetWorth);
          }
          if (HasLevel) {
            output.WriteRawTag(24);
            output.WriteUInt32(Level);
          }
          if (HasDeaths) {
            output.WriteRawTag(32);
            output.WriteUInt32(Deaths);
          }
          if (HasRespawnTime) {
            output.WriteRawTag(40);
            output.WriteUInt32(RespawnTime);
          }
          if (HasHasBuyback) {
            output.WriteRawTag(48);
            output.WriteBool(HasBuyback);
          }
          if (HasHasAegis) {
            output.WriteRawTag(56);
            output.WriteBool(HasAegis);
          }
          if (HasHasRapier) {
            output.WriteRawTag(64);
            output.WriteBool(HasRapier);
          }
          if (HasDistance) {
            output.WriteRawTag(72);
            output.WriteUInt32(Distance);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasHeroId) {
            output.WriteRawTag(8);
            output.WriteInt32(HeroId);
          }
          if (HasNetWorth) {
            output.WriteRawTag(16);
            output.WriteUInt32(NetWorth);
          }
          if (HasLevel) {
            output.WriteRawTag(24);
            output.WriteUInt32(Level);
          }
          if (HasDeaths) {
            output.WriteRawTag(32);
            output.WriteUInt32(Deaths);
          }
          if (HasRespawnTime) {
            output.WriteRawTag(40);
            output.WriteUInt32(RespawnTime);
          }
          if (HasHasBuyback) {
            output.WriteRawTag(48);
            output.WriteBool(HasBuyback);
          }
          if (HasHasAegis) {
            output.WriteRawTag(56);
            output.WriteBool(HasAegis);
          }
          if (HasHasRapier) {
            output.WriteRawTag(64);
            output.WriteBool(HasRapier);
          }
          if (HasDistance) {
            output.WriteRawTag(72);
            output.WriteUInt32(Distance);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasNetWorth) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
          }
          if (HasLevel) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (HasDeaths) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
          }
          if (HasRespawnTime) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RespawnTime);
          }
          if (HasHasBuyback) {
            size += 1 + 1;
          }
          if (HasHasAegis) {
            size += 1 + 1;
          }
          if (HasHasRapier) {
            size += 1 + 1;
          }
          if (HasDistance) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Distance);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerState other) {
          if (other == null) {
            return;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasNetWorth) {
            NetWorth = other.NetWorth;
          }
          if (other.HasLevel) {
            Level = other.Level;
          }
          if (other.HasDeaths) {
            Deaths = other.Deaths;
          }
          if (other.HasRespawnTime) {
            RespawnTime = other.RespawnTime;
          }
          if (other.HasHasBuyback) {
            HasBuyback = other.HasBuyback;
          }
          if (other.HasHasAegis) {
            HasAegis = other.HasAegis;
          }
          if (other.HasHasRapier) {
            HasRapier = other.HasRapier;
          }
          if (other.HasDistance) {
            Distance = other.Distance;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                HeroId = input.ReadInt32();
                break;
              }
              case 16: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 24: {
                Level = input.ReadUInt32();
                break;
              }
              case 32: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 40: {
                RespawnTime = input.ReadUInt32();
                break;
              }
              case 48: {
                HasBuyback = input.ReadBool();
                break;
              }
              case 56: {
                HasAegis = input.ReadBool();
                break;
              }
              case 64: {
                HasRapier = input.ReadBool();
                break;
              }
              case 72: {
                Distance = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                HeroId = input.ReadInt32();
                break;
              }
              case 16: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 24: {
                Level = input.ReadUInt32();
                break;
              }
              case 32: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 40: {
                RespawnTime = input.ReadUInt32();
                break;
              }
              case 48: {
                HasBuyback = input.ReadBool();
                break;
              }
              case 56: {
                HasAegis = input.ReadBool();
                break;
              }
              case 64: {
                HasRapier = input.ReadBool();
                break;
              }
              case 72: {
                Distance = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class TeamState : pb::IMessage<TeamState>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TeamState> _parser = new pb::MessageParser<TeamState>(() => new TeamState());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TeamState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamState(TeamState other) : this() {
          _hasBits0 = other._hasBits0;
          team_ = other.team_;
          playerStates_ = other.playerStates_.Clone();
          towerHealthPct_ = other.towerHealthPct_.Clone();
          barracksHealthPct_ = other.barracksHealthPct_.Clone();
          ancientHealthPct_ = other.ancientHealthPct_;
          glyphCooldown_ = other.glyphCooldown_;
          kills_ = other.kills_;
          creepDistanceSafe_ = other.creepDistanceSafe_;
          creepDistanceMid_ = other.creepDistanceMid_;
          creepDistanceOff_ = other.creepDistanceOff_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamState Clone() {
          return new TeamState(this);
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 1;
        private readonly static uint TeamDefaultValue = 0;

        private uint team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team {
          get { if ((_hasBits0 & 1) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 1;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "player_states" field.</summary>
        public const int PlayerStatesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.PlayerState> _repeated_playerStates_codec
            = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.PlayerState.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.PlayerState> playerStates_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.PlayerState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.PlayerState> PlayerStates {
          get { return playerStates_; }
        }

        /// <summary>Field number for the "tower_health_pct" field.</summary>
        public const int TowerHealthPctFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_towerHealthPct_codec
            = pb::FieldCodec.ForUInt32(24);
        private readonly pbc::RepeatedField<uint> towerHealthPct_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> TowerHealthPct {
          get { return towerHealthPct_; }
        }

        /// <summary>Field number for the "barracks_health_pct" field.</summary>
        public const int BarracksHealthPctFieldNumber = 4;
        private static readonly pb::FieldCodec<uint> _repeated_barracksHealthPct_codec
            = pb::FieldCodec.ForUInt32(32);
        private readonly pbc::RepeatedField<uint> barracksHealthPct_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> BarracksHealthPct {
          get { return barracksHealthPct_; }
        }

        /// <summary>Field number for the "ancient_health_pct" field.</summary>
        public const int AncientHealthPctFieldNumber = 5;
        private readonly static uint AncientHealthPctDefaultValue = 0;

        private uint ancientHealthPct_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AncientHealthPct {
          get { if ((_hasBits0 & 2) != 0) { return ancientHealthPct_; } else { return AncientHealthPctDefaultValue; } }
          set {
            _hasBits0 |= 2;
            ancientHealthPct_ = value;
          }
        }
        /// <summary>Gets whether the "ancient_health_pct" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAncientHealthPct {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "ancient_health_pct" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAncientHealthPct() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "glyph_cooldown" field.</summary>
        public const int GlyphCooldownFieldNumber = 6;
        private readonly static uint GlyphCooldownDefaultValue = 0;

        private uint glyphCooldown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GlyphCooldown {
          get { if ((_hasBits0 & 4) != 0) { return glyphCooldown_; } else { return GlyphCooldownDefaultValue; } }
          set {
            _hasBits0 |= 4;
            glyphCooldown_ = value;
          }
        }
        /// <summary>Gets whether the "glyph_cooldown" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGlyphCooldown {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "glyph_cooldown" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGlyphCooldown() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 7;
        private readonly static uint KillsDefaultValue = 0;

        private uint kills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Kills {
          get { if ((_hasBits0 & 8) != 0) { return kills_; } else { return KillsDefaultValue; } }
          set {
            _hasBits0 |= 8;
            kills_ = value;
          }
        }
        /// <summary>Gets whether the "kills" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKills {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "kills" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKills() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "creep_distance_safe" field.</summary>
        public const int CreepDistanceSafeFieldNumber = 8;
        private readonly static uint CreepDistanceSafeDefaultValue = 0;

        private uint creepDistanceSafe_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreepDistanceSafe {
          get { if ((_hasBits0 & 16) != 0) { return creepDistanceSafe_; } else { return CreepDistanceSafeDefaultValue; } }
          set {
            _hasBits0 |= 16;
            creepDistanceSafe_ = value;
          }
        }
        /// <summary>Gets whether the "creep_distance_safe" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreepDistanceSafe {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "creep_distance_safe" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreepDistanceSafe() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "creep_distance_mid" field.</summary>
        public const int CreepDistanceMidFieldNumber = 9;
        private readonly static uint CreepDistanceMidDefaultValue = 0;

        private uint creepDistanceMid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreepDistanceMid {
          get { if ((_hasBits0 & 32) != 0) { return creepDistanceMid_; } else { return CreepDistanceMidDefaultValue; } }
          set {
            _hasBits0 |= 32;
            creepDistanceMid_ = value;
          }
        }
        /// <summary>Gets whether the "creep_distance_mid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreepDistanceMid {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "creep_distance_mid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreepDistanceMid() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "creep_distance_off" field.</summary>
        public const int CreepDistanceOffFieldNumber = 10;
        private readonly static uint CreepDistanceOffDefaultValue = 0;

        private uint creepDistanceOff_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreepDistanceOff {
          get { if ((_hasBits0 & 64) != 0) { return creepDistanceOff_; } else { return CreepDistanceOffDefaultValue; } }
          set {
            _hasBits0 |= 64;
            creepDistanceOff_ = value;
          }
        }
        /// <summary>Gets whether the "creep_distance_off" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreepDistanceOff {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "creep_distance_off" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreepDistanceOff() {
          _hasBits0 &= ~64;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TeamState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TeamState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Team != other.Team) return false;
          if(!playerStates_.Equals(other.playerStates_)) return false;
          if(!towerHealthPct_.Equals(other.towerHealthPct_)) return false;
          if(!barracksHealthPct_.Equals(other.barracksHealthPct_)) return false;
          if (AncientHealthPct != other.AncientHealthPct) return false;
          if (GlyphCooldown != other.GlyphCooldown) return false;
          if (Kills != other.Kills) return false;
          if (CreepDistanceSafe != other.CreepDistanceSafe) return false;
          if (CreepDistanceMid != other.CreepDistanceMid) return false;
          if (CreepDistanceOff != other.CreepDistanceOff) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTeam) hash ^= Team.GetHashCode();
          hash ^= playerStates_.GetHashCode();
          hash ^= towerHealthPct_.GetHashCode();
          hash ^= barracksHealthPct_.GetHashCode();
          if (HasAncientHealthPct) hash ^= AncientHealthPct.GetHashCode();
          if (HasGlyphCooldown) hash ^= GlyphCooldown.GetHashCode();
          if (HasKills) hash ^= Kills.GetHashCode();
          if (HasCreepDistanceSafe) hash ^= CreepDistanceSafe.GetHashCode();
          if (HasCreepDistanceMid) hash ^= CreepDistanceMid.GetHashCode();
          if (HasCreepDistanceOff) hash ^= CreepDistanceOff.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasTeam) {
            output.WriteRawTag(8);
            output.WriteUInt32(Team);
          }
          playerStates_.WriteTo(output, _repeated_playerStates_codec);
          towerHealthPct_.WriteTo(output, _repeated_towerHealthPct_codec);
          barracksHealthPct_.WriteTo(output, _repeated_barracksHealthPct_codec);
          if (HasAncientHealthPct) {
            output.WriteRawTag(40);
            output.WriteUInt32(AncientHealthPct);
          }
          if (HasGlyphCooldown) {
            output.WriteRawTag(48);
            output.WriteUInt32(GlyphCooldown);
          }
          if (HasKills) {
            output.WriteRawTag(56);
            output.WriteUInt32(Kills);
          }
          if (HasCreepDistanceSafe) {
            output.WriteRawTag(64);
            output.WriteUInt32(CreepDistanceSafe);
          }
          if (HasCreepDistanceMid) {
            output.WriteRawTag(72);
            output.WriteUInt32(CreepDistanceMid);
          }
          if (HasCreepDistanceOff) {
            output.WriteRawTag(80);
            output.WriteUInt32(CreepDistanceOff);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasTeam) {
            output.WriteRawTag(8);
            output.WriteUInt32(Team);
          }
          playerStates_.WriteTo(ref output, _repeated_playerStates_codec);
          towerHealthPct_.WriteTo(ref output, _repeated_towerHealthPct_codec);
          barracksHealthPct_.WriteTo(ref output, _repeated_barracksHealthPct_codec);
          if (HasAncientHealthPct) {
            output.WriteRawTag(40);
            output.WriteUInt32(AncientHealthPct);
          }
          if (HasGlyphCooldown) {
            output.WriteRawTag(48);
            output.WriteUInt32(GlyphCooldown);
          }
          if (HasKills) {
            output.WriteRawTag(56);
            output.WriteUInt32(Kills);
          }
          if (HasCreepDistanceSafe) {
            output.WriteRawTag(64);
            output.WriteUInt32(CreepDistanceSafe);
          }
          if (HasCreepDistanceMid) {
            output.WriteRawTag(72);
            output.WriteUInt32(CreepDistanceMid);
          }
          if (HasCreepDistanceOff) {
            output.WriteRawTag(80);
            output.WriteUInt32(CreepDistanceOff);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
          }
          size += playerStates_.CalculateSize(_repeated_playerStates_codec);
          size += towerHealthPct_.CalculateSize(_repeated_towerHealthPct_codec);
          size += barracksHealthPct_.CalculateSize(_repeated_barracksHealthPct_codec);
          if (HasAncientHealthPct) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AncientHealthPct);
          }
          if (HasGlyphCooldown) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlyphCooldown);
          }
          if (HasKills) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
          }
          if (HasCreepDistanceSafe) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreepDistanceSafe);
          }
          if (HasCreepDistanceMid) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreepDistanceMid);
          }
          if (HasCreepDistanceOff) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreepDistanceOff);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TeamState other) {
          if (other == null) {
            return;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          playerStates_.Add(other.playerStates_);
          towerHealthPct_.Add(other.towerHealthPct_);
          barracksHealthPct_.Add(other.barracksHealthPct_);
          if (other.HasAncientHealthPct) {
            AncientHealthPct = other.AncientHealthPct;
          }
          if (other.HasGlyphCooldown) {
            GlyphCooldown = other.GlyphCooldown;
          }
          if (other.HasKills) {
            Kills = other.Kills;
          }
          if (other.HasCreepDistanceSafe) {
            CreepDistanceSafe = other.CreepDistanceSafe;
          }
          if (other.HasCreepDistanceMid) {
            CreepDistanceMid = other.CreepDistanceMid;
          }
          if (other.HasCreepDistanceOff) {
            CreepDistanceOff = other.CreepDistanceOff;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Team = input.ReadUInt32();
                break;
              }
              case 18: {
                playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
                break;
              }
              case 26:
              case 24: {
                towerHealthPct_.AddEntriesFrom(input, _repeated_towerHealthPct_codec);
                break;
              }
              case 34:
              case 32: {
                barracksHealthPct_.AddEntriesFrom(input, _repeated_barracksHealthPct_codec);
                break;
              }
              case 40: {
                AncientHealthPct = input.ReadUInt32();
                break;
              }
              case 48: {
                GlyphCooldown = input.ReadUInt32();
                break;
              }
              case 56: {
                Kills = input.ReadUInt32();
                break;
              }
              case 64: {
                CreepDistanceSafe = input.ReadUInt32();
                break;
              }
              case 72: {
                CreepDistanceMid = input.ReadUInt32();
                break;
              }
              case 80: {
                CreepDistanceOff = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Team = input.ReadUInt32();
                break;
              }
              case 18: {
                playerStates_.AddEntriesFrom(ref input, _repeated_playerStates_codec);
                break;
              }
              case 26:
              case 24: {
                towerHealthPct_.AddEntriesFrom(ref input, _repeated_towerHealthPct_codec);
                break;
              }
              case 34:
              case 32: {
                barracksHealthPct_.AddEntriesFrom(ref input, _repeated_barracksHealthPct_codec);
                break;
              }
              case 40: {
                AncientHealthPct = input.ReadUInt32();
                break;
              }
              case 48: {
                GlyphCooldown = input.ReadUInt32();
                break;
              }
              case 56: {
                Kills = input.ReadUInt32();
                break;
              }
              case 64: {
                CreepDistanceSafe = input.ReadUInt32();
                break;
              }
              case 72: {
                CreepDistanceMid = input.ReadUInt32();
                break;
              }
              case 80: {
                CreepDistanceOff = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class MatchState : pb::IMessage<MatchState>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MatchState> _parser = new pb::MessageParser<MatchState>(() => new MatchState());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchState(MatchState other) : this() {
          _hasBits0 = other._hasBits0;
          gameTime_ = other.gameTime_;
          radiantState_ = other.radiantState_ != null ? other.radiantState_.Clone() : null;
          direState_ = other.direState_ != null ? other.direState_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchState Clone() {
          return new MatchState(this);
        }

        /// <summary>Field number for the "game_time" field.</summary>
        public const int GameTimeFieldNumber = 1;
        private readonly static uint GameTimeDefaultValue = 0;

        private uint gameTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameTime {
          get { if ((_hasBits0 & 1) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            gameTime_ = value;
          }
        }
        /// <summary>Gets whether the "game_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameTime {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "game_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameTime() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "radiant_state" field.</summary>
        public const int RadiantStateFieldNumber = 2;
        private global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState radiantState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState RadiantState {
          get { return radiantState_; }
          set {
            radiantState_ = value;
          }
        }

        /// <summary>Field number for the "dire_state" field.</summary>
        public const int DireStateFieldNumber = 3;
        private global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState direState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState DireState {
          get { return direState_; }
          set {
            direState_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MatchState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GameTime != other.GameTime) return false;
          if (!object.Equals(RadiantState, other.RadiantState)) return false;
          if (!object.Equals(DireState, other.DireState)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasGameTime) hash ^= GameTime.GetHashCode();
          if (radiantState_ != null) hash ^= RadiantState.GetHashCode();
          if (direState_ != null) hash ^= DireState.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasGameTime) {
            output.WriteRawTag(8);
            output.WriteUInt32(GameTime);
          }
          if (radiantState_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(RadiantState);
          }
          if (direState_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(DireState);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasGameTime) {
            output.WriteRawTag(8);
            output.WriteUInt32(GameTime);
          }
          if (radiantState_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(RadiantState);
          }
          if (direState_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(DireState);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasGameTime) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameTime);
          }
          if (radiantState_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RadiantState);
          }
          if (direState_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DireState);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchState other) {
          if (other == null) {
            return;
          }
          if (other.HasGameTime) {
            GameTime = other.GameTime;
          }
          if (other.radiantState_ != null) {
            if (radiantState_ == null) {
              RadiantState = new global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState();
            }
            RadiantState.MergeFrom(other.RadiantState);
          }
          if (other.direState_ != null) {
            if (direState_ == null) {
              DireState = new global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState();
            }
            DireState.MergeFrom(other.DireState);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                GameTime = input.ReadUInt32();
                break;
              }
              case 18: {
                if (radiantState_ == null) {
                  RadiantState = new global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState();
                }
                input.ReadMessage(RadiantState);
                break;
              }
              case 26: {
                if (direState_ == null) {
                  DireState = new global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState();
                }
                input.ReadMessage(DireState);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                GameTime = input.ReadUInt32();
                break;
              }
              case 18: {
                if (radiantState_ == null) {
                  RadiantState = new global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState();
                }
                input.ReadMessage(RadiantState);
                break;
              }
              case 26: {
                if (direState_ == null) {
                  DireState = new global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.TeamState();
                }
                input.ReadMessage(DireState);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgMatchStateSteamMLEntry : pb::IMessage<CMsgMatchStateSteamMLEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgMatchStateSteamMLEntry> _parser = new pb::MessageParser<CMsgMatchStateSteamMLEntry>(() => new CMsgMatchStateSteamMLEntry());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgMatchStateSteamMLEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchStateSteamMLEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchStateSteamMLEntry(CMsgMatchStateSteamMLEntry other) : this() {
      _hasBits0 = other._hasBits0;
      matchState_ = other.matchState_ != null ? other.matchState_.Clone() : null;
      mmr_ = other.mmr_;
      radiantWon_ = other.radiantWon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchStateSteamMLEntry Clone() {
      return new CMsgMatchStateSteamMLEntry(this);
    }

    /// <summary>Field number for the "match_state" field.</summary>
    public const int MatchStateFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState matchState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState MatchState {
      get { return matchState_; }
      set {
        matchState_ = value;
      }
    }

    /// <summary>Field number for the "mmr" field.</summary>
    public const int MmrFieldNumber = 2;
    private readonly static uint MmrDefaultValue = 0;

    private uint mmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mmr {
      get { if ((_hasBits0 & 1) != 0) { return mmr_; } else { return MmrDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mmr_ = value;
      }
    }
    /// <summary>Gets whether the "mmr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMmr {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mmr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMmr() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "radiant_won" field.</summary>
    public const int RadiantWonFieldNumber = 3;
    private readonly static bool RadiantWonDefaultValue = false;

    private bool radiantWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RadiantWon {
      get { if ((_hasBits0 & 2) != 0) { return radiantWon_; } else { return RadiantWonDefaultValue; } }
      set {
        _hasBits0 |= 2;
        radiantWon_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_won" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantWon {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "radiant_won" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantWon() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgMatchStateSteamMLEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgMatchStateSteamMLEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MatchState, other.MatchState)) return false;
      if (Mmr != other.Mmr) return false;
      if (RadiantWon != other.RadiantWon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (matchState_ != null) hash ^= MatchState.GetHashCode();
      if (HasMmr) hash ^= Mmr.GetHashCode();
      if (HasRadiantWon) hash ^= RadiantWon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (matchState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MatchState);
      }
      if (HasMmr) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mmr);
      }
      if (HasRadiantWon) {
        output.WriteRawTag(24);
        output.WriteBool(RadiantWon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (matchState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MatchState);
      }
      if (HasMmr) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mmr);
      }
      if (HasRadiantWon) {
        output.WriteRawTag(24);
        output.WriteBool(RadiantWon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (matchState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchState);
      }
      if (HasMmr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mmr);
      }
      if (HasRadiantWon) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgMatchStateSteamMLEntry other) {
      if (other == null) {
        return;
      }
      if (other.matchState_ != null) {
        if (matchState_ == null) {
          MatchState = new global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState();
        }
        MatchState.MergeFrom(other.MatchState);
      }
      if (other.HasMmr) {
        Mmr = other.Mmr;
      }
      if (other.HasRadiantWon) {
        RadiantWon = other.RadiantWon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (matchState_ == null) {
              MatchState = new global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState();
            }
            input.ReadMessage(MatchState);
            break;
          }
          case 16: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 24: {
            RadiantWon = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (matchState_ == null) {
              MatchState = new global::Steam.Protos.Dota2.CMsgServerToGCMatchStateHistory.Types.MatchState();
            }
            input.ReadMessage(MatchState);
            break;
          }
          case 16: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 24: {
            RadiantWon = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLaneSelectionSteamMLEntry : pb::IMessage<CMsgLaneSelectionSteamMLEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLaneSelectionSteamMLEntry> _parser = new pb::MessageParser<CMsgLaneSelectionSteamMLEntry>(() => new CMsgLaneSelectionSteamMLEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLaneSelectionSteamMLEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLaneSelectionSteamMLEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLaneSelectionSteamMLEntry(CMsgLaneSelectionSteamMLEntry other) : this() {
      heroIds_ = other.heroIds_.Clone();
      lanes_ = other.lanes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLaneSelectionSteamMLEntry Clone() {
      return new CMsgLaneSelectionSteamMLEntry(this);
    }

    /// <summary>Field number for the "hero_ids" field.</summary>
    public const int HeroIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_heroIds_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> heroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroIds {
      get { return heroIds_; }
    }

    /// <summary>Field number for the "lanes" field.</summary>
    public const int LanesFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_lanes_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> lanes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Lanes {
      get { return lanes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLaneSelectionSteamMLEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLaneSelectionSteamMLEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroIds_.Equals(other.heroIds_)) return false;
      if(!lanes_.Equals(other.lanes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroIds_.GetHashCode();
      hash ^= lanes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      heroIds_.WriteTo(output, _repeated_heroIds_codec);
      lanes_.WriteTo(output, _repeated_lanes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      heroIds_.WriteTo(ref output, _repeated_heroIds_codec);
      lanes_.WriteTo(ref output, _repeated_lanes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroIds_.CalculateSize(_repeated_heroIds_codec);
      size += lanes_.CalculateSize(_repeated_lanes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLaneSelectionSteamMLEntry other) {
      if (other == null) {
        return;
      }
      heroIds_.Add(other.heroIds_);
      lanes_.Add(other.lanes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            heroIds_.AddEntriesFrom(input, _repeated_heroIds_codec);
            break;
          }
          case 18:
          case 16: {
            lanes_.AddEntriesFrom(input, _repeated_lanes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            heroIds_.AddEntriesFrom(ref input, _repeated_heroIds_codec);
            break;
          }
          case 18:
          case 16: {
            lanes_.AddEntriesFrom(ref input, _repeated_lanes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgAbilitySelectionSteamMLEntry : pb::IMessage<CMsgAbilitySelectionSteamMLEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgAbilitySelectionSteamMLEntry> _parser = new pb::MessageParser<CMsgAbilitySelectionSteamMLEntry>(() => new CMsgAbilitySelectionSteamMLEntry());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgAbilitySelectionSteamMLEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAbilitySelectionSteamMLEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAbilitySelectionSteamMLEntry(CMsgAbilitySelectionSteamMLEntry other) : this() {
      _hasBits0 = other._hasBits0;
      mmr_ = other.mmr_;
      heroId_ = other.heroId_;
      enemyHeroIds_ = other.enemyHeroIds_.Clone();
      lane_ = other.lane_;
      abilities_ = other.abilities_.Clone();
      selectedAbility_ = other.selectedAbility_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAbilitySelectionSteamMLEntry Clone() {
      return new CMsgAbilitySelectionSteamMLEntry(this);
    }

    /// <summary>Field number for the "mmr" field.</summary>
    public const int MmrFieldNumber = 1;
    private readonly static uint MmrDefaultValue = 0;

    private uint mmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mmr {
      get { if ((_hasBits0 & 1) != 0) { return mmr_; } else { return MmrDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mmr_ = value;
      }
    }
    /// <summary>Gets whether the "mmr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMmr {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mmr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMmr() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "enemy_hero_ids" field.</summary>
    public const int EnemyHeroIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_enemyHeroIds_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> enemyHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EnemyHeroIds {
      get { return enemyHeroIds_; }
    }

    /// <summary>Field number for the "lane" field.</summary>
    public const int LaneFieldNumber = 4;
    private readonly static uint LaneDefaultValue = 0;

    private uint lane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lane {
      get { if ((_hasBits0 & 4) != 0) { return lane_; } else { return LaneDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lane_ = value;
      }
    }
    /// <summary>Gets whether the "lane" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLane {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lane" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLane() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_abilities_codec
        = pb::FieldCodec.ForInt32(40);
    private readonly pbc::RepeatedField<int> abilities_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Abilities {
      get { return abilities_; }
    }

    /// <summary>Field number for the "selected_ability" field.</summary>
    public const int SelectedAbilityFieldNumber = 6;
    private readonly static int SelectedAbilityDefaultValue = -1;

    private int selectedAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectedAbility {
      get { if ((_hasBits0 & 8) != 0) { return selectedAbility_; } else { return SelectedAbilityDefaultValue; } }
      set {
        _hasBits0 |= 8;
        selectedAbility_ = value;
      }
    }
    /// <summary>Gets whether the "selected_ability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSelectedAbility {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "selected_ability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSelectedAbility() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgAbilitySelectionSteamMLEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgAbilitySelectionSteamMLEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mmr != other.Mmr) return false;
      if (HeroId != other.HeroId) return false;
      if(!enemyHeroIds_.Equals(other.enemyHeroIds_)) return false;
      if (Lane != other.Lane) return false;
      if(!abilities_.Equals(other.abilities_)) return false;
      if (SelectedAbility != other.SelectedAbility) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMmr) hash ^= Mmr.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      hash ^= enemyHeroIds_.GetHashCode();
      if (HasLane) hash ^= Lane.GetHashCode();
      hash ^= abilities_.GetHashCode();
      if (HasSelectedAbility) hash ^= SelectedAbility.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mmr);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      enemyHeroIds_.WriteTo(output, _repeated_enemyHeroIds_codec);
      if (HasLane) {
        output.WriteRawTag(32);
        output.WriteUInt32(Lane);
      }
      abilities_.WriteTo(output, _repeated_abilities_codec);
      if (HasSelectedAbility) {
        output.WriteRawTag(48);
        output.WriteInt32(SelectedAbility);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mmr);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      enemyHeroIds_.WriteTo(ref output, _repeated_enemyHeroIds_codec);
      if (HasLane) {
        output.WriteRawTag(32);
        output.WriteUInt32(Lane);
      }
      abilities_.WriteTo(ref output, _repeated_abilities_codec);
      if (HasSelectedAbility) {
        output.WriteRawTag(48);
        output.WriteInt32(SelectedAbility);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMmr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mmr);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      size += enemyHeroIds_.CalculateSize(_repeated_enemyHeroIds_codec);
      if (HasLane) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lane);
      }
      size += abilities_.CalculateSize(_repeated_abilities_codec);
      if (HasSelectedAbility) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectedAbility);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgAbilitySelectionSteamMLEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasMmr) {
        Mmr = other.Mmr;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      enemyHeroIds_.Add(other.enemyHeroIds_);
      if (other.HasLane) {
        Lane = other.Lane;
      }
      abilities_.Add(other.abilities_);
      if (other.HasSelectedAbility) {
        SelectedAbility = other.SelectedAbility;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            enemyHeroIds_.AddEntriesFrom(input, _repeated_enemyHeroIds_codec);
            break;
          }
          case 32: {
            Lane = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
            break;
          }
          case 48: {
            SelectedAbility = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            enemyHeroIds_.AddEntriesFrom(ref input, _repeated_enemyHeroIds_codec);
            break;
          }
          case 32: {
            Lane = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            abilities_.AddEntriesFrom(ref input, _repeated_abilities_codec);
            break;
          }
          case 48: {
            SelectedAbility = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgItemPurchasePregameSteamMLEntry : pb::IMessage<CMsgItemPurchasePregameSteamMLEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgItemPurchasePregameSteamMLEntry> _parser = new pb::MessageParser<CMsgItemPurchasePregameSteamMLEntry>(() => new CMsgItemPurchasePregameSteamMLEntry());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgItemPurchasePregameSteamMLEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemPurchasePregameSteamMLEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemPurchasePregameSteamMLEntry(CMsgItemPurchasePregameSteamMLEntry other) : this() {
      _hasBits0 = other._hasBits0;
      mmr_ = other.mmr_;
      lane_ = other.lane_;
      balance_ = other.balance_;
      heroId_ = other.heroId_;
      alliedHeroIds_ = other.alliedHeroIds_.Clone();
      enemyHeroIds_ = other.enemyHeroIds_.Clone();
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemPurchasePregameSteamMLEntry Clone() {
      return new CMsgItemPurchasePregameSteamMLEntry(this);
    }

    /// <summary>Field number for the "mmr" field.</summary>
    public const int MmrFieldNumber = 1;
    private readonly static uint MmrDefaultValue = 0;

    private uint mmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mmr {
      get { if ((_hasBits0 & 1) != 0) { return mmr_; } else { return MmrDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mmr_ = value;
      }
    }
    /// <summary>Gets whether the "mmr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMmr {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mmr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMmr() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lane" field.</summary>
    public const int LaneFieldNumber = 2;
    private readonly static uint LaneDefaultValue = 0;

    private uint lane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lane {
      get { if ((_hasBits0 & 2) != 0) { return lane_; } else { return LaneDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lane_ = value;
      }
    }
    /// <summary>Gets whether the "lane" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLane {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lane" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLane() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 3;
    private readonly static float BalanceDefaultValue = 0F;

    private float balance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Balance {
      get { if ((_hasBits0 & 4) != 0) { return balance_; } else { return BalanceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        balance_ = value;
      }
    }
    /// <summary>Gets whether the "balance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBalance {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "balance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBalance() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 8) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "allied_hero_ids" field.</summary>
    public const int AlliedHeroIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_alliedHeroIds_codec
        = pb::FieldCodec.ForInt32(40);
    private readonly pbc::RepeatedField<int> alliedHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AlliedHeroIds {
      get { return alliedHeroIds_; }
    }

    /// <summary>Field number for the "enemy_hero_ids" field.</summary>
    public const int EnemyHeroIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_enemyHeroIds_codec
        = pb::FieldCodec.ForInt32(48);
    private readonly pbc::RepeatedField<int> enemyHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EnemyHeroIds {
      get { return enemyHeroIds_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_items_codec
        = pb::FieldCodec.ForInt32(56);
    private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgItemPurchasePregameSteamMLEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgItemPurchasePregameSteamMLEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mmr != other.Mmr) return false;
      if (Lane != other.Lane) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Balance, other.Balance)) return false;
      if (HeroId != other.HeroId) return false;
      if(!alliedHeroIds_.Equals(other.alliedHeroIds_)) return false;
      if(!enemyHeroIds_.Equals(other.enemyHeroIds_)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMmr) hash ^= Mmr.GetHashCode();
      if (HasLane) hash ^= Lane.GetHashCode();
      if (HasBalance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Balance);
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      hash ^= alliedHeroIds_.GetHashCode();
      hash ^= enemyHeroIds_.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mmr);
      }
      if (HasLane) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lane);
      }
      if (HasBalance) {
        output.WriteRawTag(29);
        output.WriteFloat(Balance);
      }
      if (HasHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(HeroId);
      }
      alliedHeroIds_.WriteTo(output, _repeated_alliedHeroIds_codec);
      enemyHeroIds_.WriteTo(output, _repeated_enemyHeroIds_codec);
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mmr);
      }
      if (HasLane) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lane);
      }
      if (HasBalance) {
        output.WriteRawTag(29);
        output.WriteFloat(Balance);
      }
      if (HasHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(HeroId);
      }
      alliedHeroIds_.WriteTo(ref output, _repeated_alliedHeroIds_codec);
      enemyHeroIds_.WriteTo(ref output, _repeated_enemyHeroIds_codec);
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMmr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mmr);
      }
      if (HasLane) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lane);
      }
      if (HasBalance) {
        size += 1 + 4;
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      size += alliedHeroIds_.CalculateSize(_repeated_alliedHeroIds_codec);
      size += enemyHeroIds_.CalculateSize(_repeated_enemyHeroIds_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgItemPurchasePregameSteamMLEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasMmr) {
        Mmr = other.Mmr;
      }
      if (other.HasLane) {
        Lane = other.Lane;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      alliedHeroIds_.Add(other.alliedHeroIds_);
      enemyHeroIds_.Add(other.enemyHeroIds_);
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 16: {
            Lane = input.ReadUInt32();
            break;
          }
          case 29: {
            Balance = input.ReadFloat();
            break;
          }
          case 32: {
            HeroId = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            alliedHeroIds_.AddEntriesFrom(input, _repeated_alliedHeroIds_codec);
            break;
          }
          case 50:
          case 48: {
            enemyHeroIds_.AddEntriesFrom(input, _repeated_enemyHeroIds_codec);
            break;
          }
          case 58:
          case 56: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 16: {
            Lane = input.ReadUInt32();
            break;
          }
          case 29: {
            Balance = input.ReadFloat();
            break;
          }
          case 32: {
            HeroId = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            alliedHeroIds_.AddEntriesFrom(ref input, _repeated_alliedHeroIds_codec);
            break;
          }
          case 50:
          case 48: {
            enemyHeroIds_.AddEntriesFrom(ref input, _repeated_enemyHeroIds_codec);
            break;
          }
          case 58:
          case 56: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgItemPurchaseSteamMLEntry : pb::IMessage<CMsgItemPurchaseSteamMLEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgItemPurchaseSteamMLEntry> _parser = new pb::MessageParser<CMsgItemPurchaseSteamMLEntry>(() => new CMsgItemPurchaseSteamMLEntry());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgItemPurchaseSteamMLEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemPurchaseSteamMLEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemPurchaseSteamMLEntry(CMsgItemPurchaseSteamMLEntry other) : this() {
      _hasBits0 = other._hasBits0;
      mmr_ = other.mmr_;
      lane_ = other.lane_;
      heroId_ = other.heroId_;
      alliedHeroIds_ = other.alliedHeroIds_.Clone();
      enemyHeroIds_ = other.enemyHeroIds_.Clone();
      items_ = other.items_.Clone();
      itemsToBePurchased_ = other.itemsToBePurchased_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemPurchaseSteamMLEntry Clone() {
      return new CMsgItemPurchaseSteamMLEntry(this);
    }

    /// <summary>Field number for the "mmr" field.</summary>
    public const int MmrFieldNumber = 1;
    private readonly static uint MmrDefaultValue = 0;

    private uint mmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mmr {
      get { if ((_hasBits0 & 1) != 0) { return mmr_; } else { return MmrDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mmr_ = value;
      }
    }
    /// <summary>Gets whether the "mmr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMmr {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mmr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMmr() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lane" field.</summary>
    public const int LaneFieldNumber = 2;
    private readonly static uint LaneDefaultValue = 0;

    private uint lane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lane {
      get { if ((_hasBits0 & 2) != 0) { return lane_; } else { return LaneDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lane_ = value;
      }
    }
    /// <summary>Gets whether the "lane" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLane {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lane" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLane() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "allied_hero_ids" field.</summary>
    public const int AlliedHeroIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_alliedHeroIds_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> alliedHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AlliedHeroIds {
      get { return alliedHeroIds_; }
    }

    /// <summary>Field number for the "enemy_hero_ids" field.</summary>
    public const int EnemyHeroIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_enemyHeroIds_codec
        = pb::FieldCodec.ForInt32(40);
    private readonly pbc::RepeatedField<int> enemyHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EnemyHeroIds {
      get { return enemyHeroIds_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_items_codec
        = pb::FieldCodec.ForInt32(48);
    private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "items_to_be_purchased" field.</summary>
    public const int ItemsToBePurchasedFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_itemsToBePurchased_codec
        = pb::FieldCodec.ForInt32(56);
    private readonly pbc::RepeatedField<int> itemsToBePurchased_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemsToBePurchased {
      get { return itemsToBePurchased_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgItemPurchaseSteamMLEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgItemPurchaseSteamMLEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mmr != other.Mmr) return false;
      if (Lane != other.Lane) return false;
      if (HeroId != other.HeroId) return false;
      if(!alliedHeroIds_.Equals(other.alliedHeroIds_)) return false;
      if(!enemyHeroIds_.Equals(other.enemyHeroIds_)) return false;
      if(!items_.Equals(other.items_)) return false;
      if(!itemsToBePurchased_.Equals(other.itemsToBePurchased_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMmr) hash ^= Mmr.GetHashCode();
      if (HasLane) hash ^= Lane.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      hash ^= alliedHeroIds_.GetHashCode();
      hash ^= enemyHeroIds_.GetHashCode();
      hash ^= items_.GetHashCode();
      hash ^= itemsToBePurchased_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mmr);
      }
      if (HasLane) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lane);
      }
      if (HasHeroId) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroId);
      }
      alliedHeroIds_.WriteTo(output, _repeated_alliedHeroIds_codec);
      enemyHeroIds_.WriteTo(output, _repeated_enemyHeroIds_codec);
      items_.WriteTo(output, _repeated_items_codec);
      itemsToBePurchased_.WriteTo(output, _repeated_itemsToBePurchased_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mmr);
      }
      if (HasLane) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lane);
      }
      if (HasHeroId) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroId);
      }
      alliedHeroIds_.WriteTo(ref output, _repeated_alliedHeroIds_codec);
      enemyHeroIds_.WriteTo(ref output, _repeated_enemyHeroIds_codec);
      items_.WriteTo(ref output, _repeated_items_codec);
      itemsToBePurchased_.WriteTo(ref output, _repeated_itemsToBePurchased_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMmr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mmr);
      }
      if (HasLane) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lane);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      size += alliedHeroIds_.CalculateSize(_repeated_alliedHeroIds_codec);
      size += enemyHeroIds_.CalculateSize(_repeated_enemyHeroIds_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      size += itemsToBePurchased_.CalculateSize(_repeated_itemsToBePurchased_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgItemPurchaseSteamMLEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasMmr) {
        Mmr = other.Mmr;
      }
      if (other.HasLane) {
        Lane = other.Lane;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      alliedHeroIds_.Add(other.alliedHeroIds_);
      enemyHeroIds_.Add(other.enemyHeroIds_);
      items_.Add(other.items_);
      itemsToBePurchased_.Add(other.itemsToBePurchased_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 16: {
            Lane = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            alliedHeroIds_.AddEntriesFrom(input, _repeated_alliedHeroIds_codec);
            break;
          }
          case 42:
          case 40: {
            enemyHeroIds_.AddEntriesFrom(input, _repeated_enemyHeroIds_codec);
            break;
          }
          case 50:
          case 48: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 58:
          case 56: {
            itemsToBePurchased_.AddEntriesFrom(input, _repeated_itemsToBePurchased_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 16: {
            Lane = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            alliedHeroIds_.AddEntriesFrom(ref input, _repeated_alliedHeroIds_codec);
            break;
          }
          case 42:
          case 40: {
            enemyHeroIds_.AddEntriesFrom(ref input, _repeated_enemyHeroIds_codec);
            break;
          }
          case 50:
          case 48: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
          case 58:
          case 56: {
            itemsToBePurchased_.AddEntriesFrom(ref input, _repeated_itemsToBePurchased_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgItemPurchaseSequenceSteamMLEntry : pb::IMessage<CMsgItemPurchaseSequenceSteamMLEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgItemPurchaseSequenceSteamMLEntry> _parser = new pb::MessageParser<CMsgItemPurchaseSequenceSteamMLEntry>(() => new CMsgItemPurchaseSequenceSteamMLEntry());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgItemPurchaseSequenceSteamMLEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemPurchaseSequenceSteamMLEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemPurchaseSequenceSteamMLEntry(CMsgItemPurchaseSequenceSteamMLEntry other) : this() {
      _hasBits0 = other._hasBits0;
      mmr_ = other.mmr_;
      lane_ = other.lane_;
      heroId_ = other.heroId_;
      alliedHeroIds_ = other.alliedHeroIds_.Clone();
      enemyHeroIds_ = other.enemyHeroIds_.Clone();
      items_ = other.items_.Clone();
      itemToBePurchased_ = other.itemToBePurchased_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemPurchaseSequenceSteamMLEntry Clone() {
      return new CMsgItemPurchaseSequenceSteamMLEntry(this);
    }

    /// <summary>Field number for the "mmr" field.</summary>
    public const int MmrFieldNumber = 1;
    private readonly static uint MmrDefaultValue = 0;

    private uint mmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mmr {
      get { if ((_hasBits0 & 1) != 0) { return mmr_; } else { return MmrDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mmr_ = value;
      }
    }
    /// <summary>Gets whether the "mmr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMmr {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mmr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMmr() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lane" field.</summary>
    public const int LaneFieldNumber = 2;
    private readonly static uint LaneDefaultValue = 0;

    private uint lane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lane {
      get { if ((_hasBits0 & 2) != 0) { return lane_; } else { return LaneDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lane_ = value;
      }
    }
    /// <summary>Gets whether the "lane" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLane {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lane" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLane() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "allied_hero_ids" field.</summary>
    public const int AlliedHeroIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_alliedHeroIds_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> alliedHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AlliedHeroIds {
      get { return alliedHeroIds_; }
    }

    /// <summary>Field number for the "enemy_hero_ids" field.</summary>
    public const int EnemyHeroIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_enemyHeroIds_codec
        = pb::FieldCodec.ForInt32(40);
    private readonly pbc::RepeatedField<int> enemyHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EnemyHeroIds {
      get { return enemyHeroIds_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_items_codec
        = pb::FieldCodec.ForInt32(48);
    private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "item_to_be_purchased" field.</summary>
    public const int ItemToBePurchasedFieldNumber = 7;
    private readonly static int ItemToBePurchasedDefaultValue = -1;

    private int itemToBePurchased_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemToBePurchased {
      get { if ((_hasBits0 & 8) != 0) { return itemToBePurchased_; } else { return ItemToBePurchasedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        itemToBePurchased_ = value;
      }
    }
    /// <summary>Gets whether the "item_to_be_purchased" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemToBePurchased {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "item_to_be_purchased" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemToBePurchased() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgItemPurchaseSequenceSteamMLEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgItemPurchaseSequenceSteamMLEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mmr != other.Mmr) return false;
      if (Lane != other.Lane) return false;
      if (HeroId != other.HeroId) return false;
      if(!alliedHeroIds_.Equals(other.alliedHeroIds_)) return false;
      if(!enemyHeroIds_.Equals(other.enemyHeroIds_)) return false;
      if(!items_.Equals(other.items_)) return false;
      if (ItemToBePurchased != other.ItemToBePurchased) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMmr) hash ^= Mmr.GetHashCode();
      if (HasLane) hash ^= Lane.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      hash ^= alliedHeroIds_.GetHashCode();
      hash ^= enemyHeroIds_.GetHashCode();
      hash ^= items_.GetHashCode();
      if (HasItemToBePurchased) hash ^= ItemToBePurchased.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mmr);
      }
      if (HasLane) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lane);
      }
      if (HasHeroId) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroId);
      }
      alliedHeroIds_.WriteTo(output, _repeated_alliedHeroIds_codec);
      enemyHeroIds_.WriteTo(output, _repeated_enemyHeroIds_codec);
      items_.WriteTo(output, _repeated_items_codec);
      if (HasItemToBePurchased) {
        output.WriteRawTag(56);
        output.WriteInt32(ItemToBePurchased);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mmr);
      }
      if (HasLane) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lane);
      }
      if (HasHeroId) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroId);
      }
      alliedHeroIds_.WriteTo(ref output, _repeated_alliedHeroIds_codec);
      enemyHeroIds_.WriteTo(ref output, _repeated_enemyHeroIds_codec);
      items_.WriteTo(ref output, _repeated_items_codec);
      if (HasItemToBePurchased) {
        output.WriteRawTag(56);
        output.WriteInt32(ItemToBePurchased);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMmr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mmr);
      }
      if (HasLane) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lane);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      size += alliedHeroIds_.CalculateSize(_repeated_alliedHeroIds_codec);
      size += enemyHeroIds_.CalculateSize(_repeated_enemyHeroIds_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      if (HasItemToBePurchased) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemToBePurchased);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgItemPurchaseSequenceSteamMLEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasMmr) {
        Mmr = other.Mmr;
      }
      if (other.HasLane) {
        Lane = other.Lane;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      alliedHeroIds_.Add(other.alliedHeroIds_);
      enemyHeroIds_.Add(other.enemyHeroIds_);
      items_.Add(other.items_);
      if (other.HasItemToBePurchased) {
        ItemToBePurchased = other.ItemToBePurchased;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 16: {
            Lane = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            alliedHeroIds_.AddEntriesFrom(input, _repeated_alliedHeroIds_codec);
            break;
          }
          case 42:
          case 40: {
            enemyHeroIds_.AddEntriesFrom(input, _repeated_enemyHeroIds_codec);
            break;
          }
          case 50:
          case 48: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 56: {
            ItemToBePurchased = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mmr = input.ReadUInt32();
            break;
          }
          case 16: {
            Lane = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            alliedHeroIds_.AddEntriesFrom(ref input, _repeated_alliedHeroIds_codec);
            break;
          }
          case 42:
          case 40: {
            enemyHeroIds_.AddEntriesFrom(ref input, _repeated_enemyHeroIds_codec);
            break;
          }
          case 50:
          case 48: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
          case 56: {
            ItemToBePurchased = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCCavernCrawlIsHeroActive : pb::IMessage<CMsgServerToGCCavernCrawlIsHeroActive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCCavernCrawlIsHeroActive> _parser = new pb::MessageParser<CMsgServerToGCCavernCrawlIsHeroActive>(() => new CMsgServerToGCCavernCrawlIsHeroActive());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCCavernCrawlIsHeroActive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCavernCrawlIsHeroActive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCavernCrawlIsHeroActive(CMsgServerToGCCavernCrawlIsHeroActive other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      accountId_ = other.accountId_;
      preferredMapVariant_ = other.preferredMapVariant_;
      heroId_ = other.heroId_;
      turboMode_ = other.turboMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCavernCrawlIsHeroActive Clone() {
      return new CMsgServerToGCCavernCrawlIsHeroActive(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static uint EventIdDefaultValue = 0;

    private uint eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 2) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "preferred_map_variant" field.</summary>
    public const int PreferredMapVariantFieldNumber = 3;
    private readonly static uint PreferredMapVariantDefaultValue = 255;

    private uint preferredMapVariant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PreferredMapVariant {
      get { if ((_hasBits0 & 4) != 0) { return preferredMapVariant_; } else { return PreferredMapVariantDefaultValue; } }
      set {
        _hasBits0 |= 4;
        preferredMapVariant_ = value;
      }
    }
    /// <summary>Gets whether the "preferred_map_variant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreferredMapVariant {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "preferred_map_variant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreferredMapVariant() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 8) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "turbo_mode" field.</summary>
    public const int TurboModeFieldNumber = 5;
    private readonly static bool TurboModeDefaultValue = false;

    private bool turboMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TurboMode {
      get { if ((_hasBits0 & 16) != 0) { return turboMode_; } else { return TurboModeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        turboMode_ = value;
      }
    }
    /// <summary>Gets whether the "turbo_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTurboMode {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "turbo_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTurboMode() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCCavernCrawlIsHeroActive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCCavernCrawlIsHeroActive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (AccountId != other.AccountId) return false;
      if (PreferredMapVariant != other.PreferredMapVariant) return false;
      if (HeroId != other.HeroId) return false;
      if (TurboMode != other.TurboMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasPreferredMapVariant) hash ^= PreferredMapVariant.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasTurboMode) hash ^= TurboMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteUInt32(EventId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(AccountId);
      }
      if (HasPreferredMapVariant) {
        output.WriteRawTag(24);
        output.WriteUInt32(PreferredMapVariant);
      }
      if (HasHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(HeroId);
      }
      if (HasTurboMode) {
        output.WriteRawTag(40);
        output.WriteBool(TurboMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteUInt32(EventId);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(AccountId);
      }
      if (HasPreferredMapVariant) {
        output.WriteRawTag(24);
        output.WriteUInt32(PreferredMapVariant);
      }
      if (HasHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(HeroId);
      }
      if (HasTurboMode) {
        output.WriteRawTag(40);
        output.WriteBool(TurboMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasPreferredMapVariant) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreferredMapVariant);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasTurboMode) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCCavernCrawlIsHeroActive other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasPreferredMapVariant) {
        PreferredMapVariant = other.PreferredMapVariant;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasTurboMode) {
        TurboMode = other.TurboMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventId = input.ReadUInt32();
            break;
          }
          case 16: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            PreferredMapVariant = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadInt32();
            break;
          }
          case 40: {
            TurboMode = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EventId = input.ReadUInt32();
            break;
          }
          case 16: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            PreferredMapVariant = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadInt32();
            break;
          }
          case 40: {
            TurboMode = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCPlayerChallengeHistory : pb::IMessage<CMsgServerToGCPlayerChallengeHistory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCPlayerChallengeHistory> _parser = new pb::MessageParser<CMsgServerToGCPlayerChallengeHistory>(() => new CMsgServerToGCPlayerChallengeHistory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCPlayerChallengeHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCPlayerChallengeHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCPlayerChallengeHistory(CMsgServerToGCPlayerChallengeHistory other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      averageRank_ = other.averageRank_;
      challengeRecords_ = other.challengeRecords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCPlayerChallengeHistory Clone() {
      return new CMsgServerToGCPlayerChallengeHistory(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "average_rank" field.</summary>
    public const int AverageRankFieldNumber = 2;
    private readonly static uint AverageRankDefaultValue = 0;

    private uint averageRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AverageRank {
      get { if ((_hasBits0 & 2) != 0) { return averageRank_; } else { return AverageRankDefaultValue; } }
      set {
        _hasBits0 |= 2;
        averageRank_ = value;
      }
    }
    /// <summary>Gets whether the "average_rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAverageRank {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "average_rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAverageRank() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "challenge_records" field.</summary>
    public const int ChallengeRecordsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCPlayerChallengeHistory.Types.PlayerChallenge> _repeated_challengeRecords_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgServerToGCPlayerChallengeHistory.Types.PlayerChallenge.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCPlayerChallengeHistory.Types.PlayerChallenge> challengeRecords_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCPlayerChallengeHistory.Types.PlayerChallenge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCPlayerChallengeHistory.Types.PlayerChallenge> ChallengeRecords {
      get { return challengeRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCPlayerChallengeHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCPlayerChallengeHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (AverageRank != other.AverageRank) return false;
      if(!challengeRecords_.Equals(other.challengeRecords_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasAverageRank) hash ^= AverageRank.GetHashCode();
      hash ^= challengeRecords_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasAverageRank) {
        output.WriteRawTag(16);
        output.WriteUInt32(AverageRank);
      }
      challengeRecords_.WriteTo(output, _repeated_challengeRecords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasAverageRank) {
        output.WriteRawTag(16);
        output.WriteUInt32(AverageRank);
      }
      challengeRecords_.WriteTo(ref output, _repeated_challengeRecords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasAverageRank) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AverageRank);
      }
      size += challengeRecords_.CalculateSize(_repeated_challengeRecords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCPlayerChallengeHistory other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasAverageRank) {
        AverageRank = other.AverageRank;
      }
      challengeRecords_.Add(other.challengeRecords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            AverageRank = input.ReadUInt32();
            break;
          }
          case 26: {
            challengeRecords_.AddEntriesFrom(input, _repeated_challengeRecords_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            AverageRank = input.ReadUInt32();
            break;
          }
          case 26: {
            challengeRecords_.AddEntriesFrom(ref input, _repeated_challengeRecords_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCPlayerChallengeHistory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerChallenge : pb::IMessage<PlayerChallenge>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerChallenge> _parser = new pb::MessageParser<PlayerChallenge>(() => new PlayerChallenge());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerChallenge> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCPlayerChallengeHistory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerChallenge() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerChallenge(PlayerChallenge other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          challengeType_ = other.challengeType_;
          challengeId1_ = other.challengeId1_;
          challengeId2_ = other.challengeId2_;
          progressValueStart_ = other.progressValueStart_;
          progressValueEnd_ = other.progressValueEnd_;
          teamWon_ = other.teamWon_;
          auditData_ = other.auditData_;
          heroId_ = other.heroId_;
          rankCompleted_ = other.rankCompleted_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerChallenge Clone() {
          return new PlayerChallenge(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "challenge_type" field.</summary>
        public const int ChallengeTypeFieldNumber = 2;
        private readonly static global::Steam.Protos.Dota2.EPlayerChallengeHistoryType ChallengeTypeDefaultValue = global::Steam.Protos.Dota2.EPlayerChallengeHistoryType.KEplayerChallengeHistoryTypeInvalid;

        private global::Steam.Protos.Dota2.EPlayerChallengeHistoryType challengeType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.EPlayerChallengeHistoryType ChallengeType {
          get { if ((_hasBits0 & 2) != 0) { return challengeType_; } else { return ChallengeTypeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            challengeType_ = value;
          }
        }
        /// <summary>Gets whether the "challenge_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChallengeType {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "challenge_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChallengeType() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "challenge_id1" field.</summary>
        public const int ChallengeId1FieldNumber = 3;
        private readonly static uint ChallengeId1DefaultValue = 0;

        private uint challengeId1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChallengeId1 {
          get { if ((_hasBits0 & 4) != 0) { return challengeId1_; } else { return ChallengeId1DefaultValue; } }
          set {
            _hasBits0 |= 4;
            challengeId1_ = value;
          }
        }
        /// <summary>Gets whether the "challenge_id1" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChallengeId1 {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "challenge_id1" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChallengeId1() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "challenge_id2" field.</summary>
        public const int ChallengeId2FieldNumber = 4;
        private readonly static uint ChallengeId2DefaultValue = 0;

        private uint challengeId2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChallengeId2 {
          get { if ((_hasBits0 & 8) != 0) { return challengeId2_; } else { return ChallengeId2DefaultValue; } }
          set {
            _hasBits0 |= 8;
            challengeId2_ = value;
          }
        }
        /// <summary>Gets whether the "challenge_id2" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChallengeId2 {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "challenge_id2" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChallengeId2() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "progress_value_start" field.</summary>
        public const int ProgressValueStartFieldNumber = 5;
        private readonly static uint ProgressValueStartDefaultValue = 0;

        private uint progressValueStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ProgressValueStart {
          get { if ((_hasBits0 & 16) != 0) { return progressValueStart_; } else { return ProgressValueStartDefaultValue; } }
          set {
            _hasBits0 |= 16;
            progressValueStart_ = value;
          }
        }
        /// <summary>Gets whether the "progress_value_start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProgressValueStart {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "progress_value_start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProgressValueStart() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "progress_value_end" field.</summary>
        public const int ProgressValueEndFieldNumber = 6;
        private readonly static uint ProgressValueEndDefaultValue = 0;

        private uint progressValueEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ProgressValueEnd {
          get { if ((_hasBits0 & 32) != 0) { return progressValueEnd_; } else { return ProgressValueEndDefaultValue; } }
          set {
            _hasBits0 |= 32;
            progressValueEnd_ = value;
          }
        }
        /// <summary>Gets whether the "progress_value_end" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProgressValueEnd {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "progress_value_end" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProgressValueEnd() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "team_won" field.</summary>
        public const int TeamWonFieldNumber = 7;
        private readonly static bool TeamWonDefaultValue = false;

        private bool teamWon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TeamWon {
          get { if ((_hasBits0 & 64) != 0) { return teamWon_; } else { return TeamWonDefaultValue; } }
          set {
            _hasBits0 |= 64;
            teamWon_ = value;
          }
        }
        /// <summary>Gets whether the "team_won" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamWon {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "team_won" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamWon() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "audit_data" field.</summary>
        public const int AuditDataFieldNumber = 8;
        private readonly static ulong AuditDataDefaultValue = 0UL;

        private ulong auditData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong AuditData {
          get { if ((_hasBits0 & 128) != 0) { return auditData_; } else { return AuditDataDefaultValue; } }
          set {
            _hasBits0 |= 128;
            auditData_ = value;
          }
        }
        /// <summary>Gets whether the "audit_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAuditData {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "audit_data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAuditData() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 9;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 256) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 256;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "rank_completed" field.</summary>
        public const int RankCompletedFieldNumber = 10;
        private readonly static uint RankCompletedDefaultValue = 0;

        private uint rankCompleted_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RankCompleted {
          get { if ((_hasBits0 & 512) != 0) { return rankCompleted_; } else { return RankCompletedDefaultValue; } }
          set {
            _hasBits0 |= 512;
            rankCompleted_ = value;
          }
        }
        /// <summary>Gets whether the "rank_completed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRankCompleted {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "rank_completed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRankCompleted() {
          _hasBits0 &= ~512;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerChallenge);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerChallenge other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (ChallengeType != other.ChallengeType) return false;
          if (ChallengeId1 != other.ChallengeId1) return false;
          if (ChallengeId2 != other.ChallengeId2) return false;
          if (ProgressValueStart != other.ProgressValueStart) return false;
          if (ProgressValueEnd != other.ProgressValueEnd) return false;
          if (TeamWon != other.TeamWon) return false;
          if (AuditData != other.AuditData) return false;
          if (HeroId != other.HeroId) return false;
          if (RankCompleted != other.RankCompleted) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasChallengeType) hash ^= ChallengeType.GetHashCode();
          if (HasChallengeId1) hash ^= ChallengeId1.GetHashCode();
          if (HasChallengeId2) hash ^= ChallengeId2.GetHashCode();
          if (HasProgressValueStart) hash ^= ProgressValueStart.GetHashCode();
          if (HasProgressValueEnd) hash ^= ProgressValueEnd.GetHashCode();
          if (HasTeamWon) hash ^= TeamWon.GetHashCode();
          if (HasAuditData) hash ^= AuditData.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasRankCompleted) hash ^= RankCompleted.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasChallengeType) {
            output.WriteRawTag(16);
            output.WriteEnum((int) ChallengeType);
          }
          if (HasChallengeId1) {
            output.WriteRawTag(24);
            output.WriteUInt32(ChallengeId1);
          }
          if (HasChallengeId2) {
            output.WriteRawTag(32);
            output.WriteUInt32(ChallengeId2);
          }
          if (HasProgressValueStart) {
            output.WriteRawTag(40);
            output.WriteUInt32(ProgressValueStart);
          }
          if (HasProgressValueEnd) {
            output.WriteRawTag(48);
            output.WriteUInt32(ProgressValueEnd);
          }
          if (HasTeamWon) {
            output.WriteRawTag(56);
            output.WriteBool(TeamWon);
          }
          if (HasAuditData) {
            output.WriteRawTag(64);
            output.WriteUInt64(AuditData);
          }
          if (HasHeroId) {
            output.WriteRawTag(72);
            output.WriteInt32(HeroId);
          }
          if (HasRankCompleted) {
            output.WriteRawTag(80);
            output.WriteUInt32(RankCompleted);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasChallengeType) {
            output.WriteRawTag(16);
            output.WriteEnum((int) ChallengeType);
          }
          if (HasChallengeId1) {
            output.WriteRawTag(24);
            output.WriteUInt32(ChallengeId1);
          }
          if (HasChallengeId2) {
            output.WriteRawTag(32);
            output.WriteUInt32(ChallengeId2);
          }
          if (HasProgressValueStart) {
            output.WriteRawTag(40);
            output.WriteUInt32(ProgressValueStart);
          }
          if (HasProgressValueEnd) {
            output.WriteRawTag(48);
            output.WriteUInt32(ProgressValueEnd);
          }
          if (HasTeamWon) {
            output.WriteRawTag(56);
            output.WriteBool(TeamWon);
          }
          if (HasAuditData) {
            output.WriteRawTag(64);
            output.WriteUInt64(AuditData);
          }
          if (HasHeroId) {
            output.WriteRawTag(72);
            output.WriteInt32(HeroId);
          }
          if (HasRankCompleted) {
            output.WriteRawTag(80);
            output.WriteUInt32(RankCompleted);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasChallengeType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChallengeType);
          }
          if (HasChallengeId1) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeId1);
          }
          if (HasChallengeId2) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeId2);
          }
          if (HasProgressValueStart) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProgressValueStart);
          }
          if (HasProgressValueEnd) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProgressValueEnd);
          }
          if (HasTeamWon) {
            size += 1 + 1;
          }
          if (HasAuditData) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuditData);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasRankCompleted) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankCompleted);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerChallenge other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasChallengeType) {
            ChallengeType = other.ChallengeType;
          }
          if (other.HasChallengeId1) {
            ChallengeId1 = other.ChallengeId1;
          }
          if (other.HasChallengeId2) {
            ChallengeId2 = other.ChallengeId2;
          }
          if (other.HasProgressValueStart) {
            ProgressValueStart = other.ProgressValueStart;
          }
          if (other.HasProgressValueEnd) {
            ProgressValueEnd = other.ProgressValueEnd;
          }
          if (other.HasTeamWon) {
            TeamWon = other.TeamWon;
          }
          if (other.HasAuditData) {
            AuditData = other.AuditData;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasRankCompleted) {
            RankCompleted = other.RankCompleted;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                ChallengeType = (global::Steam.Protos.Dota2.EPlayerChallengeHistoryType) input.ReadEnum();
                break;
              }
              case 24: {
                ChallengeId1 = input.ReadUInt32();
                break;
              }
              case 32: {
                ChallengeId2 = input.ReadUInt32();
                break;
              }
              case 40: {
                ProgressValueStart = input.ReadUInt32();
                break;
              }
              case 48: {
                ProgressValueEnd = input.ReadUInt32();
                break;
              }
              case 56: {
                TeamWon = input.ReadBool();
                break;
              }
              case 64: {
                AuditData = input.ReadUInt64();
                break;
              }
              case 72: {
                HeroId = input.ReadInt32();
                break;
              }
              case 80: {
                RankCompleted = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                ChallengeType = (global::Steam.Protos.Dota2.EPlayerChallengeHistoryType) input.ReadEnum();
                break;
              }
              case 24: {
                ChallengeId1 = input.ReadUInt32();
                break;
              }
              case 32: {
                ChallengeId2 = input.ReadUInt32();
                break;
              }
              case 40: {
                ProgressValueStart = input.ReadUInt32();
                break;
              }
              case 48: {
                ProgressValueEnd = input.ReadUInt32();
                break;
              }
              case 56: {
                TeamWon = input.ReadBool();
                break;
              }
              case 64: {
                AuditData = input.ReadUInt64();
                break;
              }
              case 72: {
                HeroId = input.ReadInt32();
                break;
              }
              case 80: {
                RankCompleted = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCCavernCrawlIsHeroActiveResponse : pb::IMessage<CMsgServerToGCCavernCrawlIsHeroActiveResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCCavernCrawlIsHeroActiveResponse> _parser = new pb::MessageParser<CMsgServerToGCCavernCrawlIsHeroActiveResponse>(() => new CMsgServerToGCCavernCrawlIsHeroActiveResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCCavernCrawlIsHeroActiveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCavernCrawlIsHeroActiveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCavernCrawlIsHeroActiveResponse(CMsgServerToGCCavernCrawlIsHeroActiveResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      mapVariant_ = other.mapVariant_;
      potentialWinnings_ = other.potentialWinnings_;
      mapResults_ = other.mapResults_.Clone();
      potentialPlusShardWinnings_ = other.potentialPlusShardWinnings_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCCavernCrawlIsHeroActiveResponse Clone() {
      return new CMsgServerToGCCavernCrawlIsHeroActiveResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static bool ResultDefaultValue = false;

    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "map_variant" field.</summary>
    public const int MapVariantFieldNumber = 5;
    private readonly static uint MapVariantDefaultValue = 255;

    private uint mapVariant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapVariant {
      get { if ((_hasBits0 & 8) != 0) { return mapVariant_; } else { return MapVariantDefaultValue; } }
      set {
        _hasBits0 |= 8;
        mapVariant_ = value;
      }
    }
    /// <summary>Gets whether the "map_variant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMapVariant {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "map_variant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMapVariant() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "potential_winnings" field.</summary>
    public const int PotentialWinningsFieldNumber = 2;
    private readonly static uint PotentialWinningsDefaultValue = 0;

    private uint potentialWinnings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PotentialWinnings {
      get { if ((_hasBits0 & 2) != 0) { return potentialWinnings_; } else { return PotentialWinningsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        potentialWinnings_ = value;
      }
    }
    /// <summary>Gets whether the "potential_winnings" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPotentialWinnings {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "potential_winnings" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPotentialWinnings() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "map_results" field.</summary>
    public const int MapResultsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActiveResponse.Types.MapResults> _repeated_mapResults_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActiveResponse.Types.MapResults.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActiveResponse.Types.MapResults> mapResults_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActiveResponse.Types.MapResults>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActiveResponse.Types.MapResults> MapResults {
      get { return mapResults_; }
    }

    /// <summary>Field number for the "potential_plus_shard_winnings" field.</summary>
    public const int PotentialPlusShardWinningsFieldNumber = 4;
    private readonly static uint PotentialPlusShardWinningsDefaultValue = 0;

    private uint potentialPlusShardWinnings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PotentialPlusShardWinnings {
      get { if ((_hasBits0 & 4) != 0) { return potentialPlusShardWinnings_; } else { return PotentialPlusShardWinningsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        potentialPlusShardWinnings_ = value;
      }
    }
    /// <summary>Gets whether the "potential_plus_shard_winnings" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPotentialPlusShardWinnings {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "potential_plus_shard_winnings" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPotentialPlusShardWinnings() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCCavernCrawlIsHeroActiveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCCavernCrawlIsHeroActiveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (MapVariant != other.MapVariant) return false;
      if (PotentialWinnings != other.PotentialWinnings) return false;
      if(!mapResults_.Equals(other.mapResults_)) return false;
      if (PotentialPlusShardWinnings != other.PotentialPlusShardWinnings) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (HasMapVariant) hash ^= MapVariant.GetHashCode();
      if (HasPotentialWinnings) hash ^= PotentialWinnings.GetHashCode();
      hash ^= mapResults_.GetHashCode();
      if (HasPotentialPlusShardWinnings) hash ^= PotentialPlusShardWinnings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (HasPotentialWinnings) {
        output.WriteRawTag(16);
        output.WriteUInt32(PotentialWinnings);
      }
      mapResults_.WriteTo(output, _repeated_mapResults_codec);
      if (HasPotentialPlusShardWinnings) {
        output.WriteRawTag(32);
        output.WriteUInt32(PotentialPlusShardWinnings);
      }
      if (HasMapVariant) {
        output.WriteRawTag(40);
        output.WriteUInt32(MapVariant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (HasPotentialWinnings) {
        output.WriteRawTag(16);
        output.WriteUInt32(PotentialWinnings);
      }
      mapResults_.WriteTo(ref output, _repeated_mapResults_codec);
      if (HasPotentialPlusShardWinnings) {
        output.WriteRawTag(32);
        output.WriteUInt32(PotentialPlusShardWinnings);
      }
      if (HasMapVariant) {
        output.WriteRawTag(40);
        output.WriteUInt32(MapVariant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + 1;
      }
      if (HasMapVariant) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapVariant);
      }
      if (HasPotentialWinnings) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PotentialWinnings);
      }
      size += mapResults_.CalculateSize(_repeated_mapResults_codec);
      if (HasPotentialPlusShardWinnings) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PotentialPlusShardWinnings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCCavernCrawlIsHeroActiveResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasMapVariant) {
        MapVariant = other.MapVariant;
      }
      if (other.HasPotentialWinnings) {
        PotentialWinnings = other.PotentialWinnings;
      }
      mapResults_.Add(other.mapResults_);
      if (other.HasPotentialPlusShardWinnings) {
        PotentialPlusShardWinnings = other.PotentialPlusShardWinnings;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 16: {
            PotentialWinnings = input.ReadUInt32();
            break;
          }
          case 26: {
            mapResults_.AddEntriesFrom(input, _repeated_mapResults_codec);
            break;
          }
          case 32: {
            PotentialPlusShardWinnings = input.ReadUInt32();
            break;
          }
          case 40: {
            MapVariant = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 16: {
            PotentialWinnings = input.ReadUInt32();
            break;
          }
          case 26: {
            mapResults_.AddEntriesFrom(ref input, _repeated_mapResults_codec);
            break;
          }
          case 32: {
            PotentialPlusShardWinnings = input.ReadUInt32();
            break;
          }
          case 40: {
            MapVariant = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCCavernCrawlIsHeroActiveResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MapResults : pb::IMessage<MapResults>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MapResults> _parser = new pb::MessageParser<MapResults>(() => new MapResults());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MapResults> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCCavernCrawlIsHeroActiveResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapResults() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapResults(MapResults other) : this() {
          _hasBits0 = other._hasBits0;
          pathIdCompleted_ = other.pathIdCompleted_;
          roomIdClaimed_ = other.roomIdClaimed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapResults Clone() {
          return new MapResults(this);
        }

        /// <summary>Field number for the "path_id_completed" field.</summary>
        public const int PathIdCompletedFieldNumber = 1;
        private readonly static uint PathIdCompletedDefaultValue = 255;

        private uint pathIdCompleted_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PathIdCompleted {
          get { if ((_hasBits0 & 1) != 0) { return pathIdCompleted_; } else { return PathIdCompletedDefaultValue; } }
          set {
            _hasBits0 |= 1;
            pathIdCompleted_ = value;
          }
        }
        /// <summary>Gets whether the "path_id_completed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPathIdCompleted {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "path_id_completed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPathIdCompleted() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "room_id_claimed" field.</summary>
        public const int RoomIdClaimedFieldNumber = 2;
        private readonly static uint RoomIdClaimedDefaultValue = 255;

        private uint roomIdClaimed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RoomIdClaimed {
          get { if ((_hasBits0 & 2) != 0) { return roomIdClaimed_; } else { return RoomIdClaimedDefaultValue; } }
          set {
            _hasBits0 |= 2;
            roomIdClaimed_ = value;
          }
        }
        /// <summary>Gets whether the "room_id_claimed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRoomIdClaimed {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "room_id_claimed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRoomIdClaimed() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MapResults);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MapResults other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PathIdCompleted != other.PathIdCompleted) return false;
          if (RoomIdClaimed != other.RoomIdClaimed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPathIdCompleted) hash ^= PathIdCompleted.GetHashCode();
          if (HasRoomIdClaimed) hash ^= RoomIdClaimed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPathIdCompleted) {
            output.WriteRawTag(8);
            output.WriteUInt32(PathIdCompleted);
          }
          if (HasRoomIdClaimed) {
            output.WriteRawTag(16);
            output.WriteUInt32(RoomIdClaimed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPathIdCompleted) {
            output.WriteRawTag(8);
            output.WriteUInt32(PathIdCompleted);
          }
          if (HasRoomIdClaimed) {
            output.WriteRawTag(16);
            output.WriteUInt32(RoomIdClaimed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPathIdCompleted) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PathIdCompleted);
          }
          if (HasRoomIdClaimed) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomIdClaimed);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MapResults other) {
          if (other == null) {
            return;
          }
          if (other.HasPathIdCompleted) {
            PathIdCompleted = other.PathIdCompleted;
          }
          if (other.HasRoomIdClaimed) {
            RoomIdClaimed = other.RoomIdClaimed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PathIdCompleted = input.ReadUInt32();
                break;
              }
              case 16: {
                RoomIdClaimed = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PathIdCompleted = input.ReadUInt32();
                break;
              }
              case 16: {
                RoomIdClaimed = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgNeutralItemStats : pb::IMessage<CMsgNeutralItemStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgNeutralItemStats> _parser = new pb::MessageParser<CMsgNeutralItemStats>(() => new CMsgNeutralItemStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgNeutralItemStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgNeutralItemStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgNeutralItemStats(CMsgNeutralItemStats other) : this() {
      neutralItems_ = other.neutralItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgNeutralItemStats Clone() {
      return new CMsgNeutralItemStats(this);
    }

    /// <summary>Field number for the "neutral_items" field.</summary>
    public const int NeutralItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgNeutralItemStats.Types.NeutralItem> _repeated_neutralItems_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgNeutralItemStats.Types.NeutralItem.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgNeutralItemStats.Types.NeutralItem> neutralItems_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgNeutralItemStats.Types.NeutralItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgNeutralItemStats.Types.NeutralItem> NeutralItems {
      get { return neutralItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgNeutralItemStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgNeutralItemStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!neutralItems_.Equals(other.neutralItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= neutralItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      neutralItems_.WriteTo(output, _repeated_neutralItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      neutralItems_.WriteTo(ref output, _repeated_neutralItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += neutralItems_.CalculateSize(_repeated_neutralItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgNeutralItemStats other) {
      if (other == null) {
        return;
      }
      neutralItems_.Add(other.neutralItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            neutralItems_.AddEntriesFrom(input, _repeated_neutralItems_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            neutralItems_.AddEntriesFrom(ref input, _repeated_neutralItems_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgNeutralItemStats message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class NeutralItem : pb::IMessage<NeutralItem>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<NeutralItem> _parser = new pb::MessageParser<NeutralItem>(() => new NeutralItem());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NeutralItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgNeutralItemStats.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NeutralItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NeutralItem(NeutralItem other) : this() {
          _hasBits0 = other._hasBits0;
          itemId_ = other.itemId_;
          timeDropped_ = other.timeDropped_;
          team_ = other.team_;
          timeLastEquipped_ = other.timeLastEquipped_;
          timeLastUnequipped_ = other.timeLastUnequipped_;
          durationEquipped_ = other.durationEquipped_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NeutralItem Clone() {
          return new NeutralItem(this);
        }

        /// <summary>Field number for the "item_id" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private readonly static int ItemIdDefaultValue = -1;

        private int itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ItemId {
          get { if ((_hasBits0 & 1) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            itemId_ = value;
          }
        }
        /// <summary>Gets whether the "item_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItemId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "item_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItemId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "time_dropped" field.</summary>
        public const int TimeDroppedFieldNumber = 2;
        private readonly static uint TimeDroppedDefaultValue = 0;

        private uint timeDropped_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeDropped {
          get { if ((_hasBits0 & 2) != 0) { return timeDropped_; } else { return TimeDroppedDefaultValue; } }
          set {
            _hasBits0 |= 2;
            timeDropped_ = value;
          }
        }
        /// <summary>Gets whether the "time_dropped" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimeDropped {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "time_dropped" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimeDropped() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 3;
        private readonly static uint TeamDefaultValue = 0;

        private uint team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team {
          get { if ((_hasBits0 & 4) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 4;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "time_last_equipped" field.</summary>
        public const int TimeLastEquippedFieldNumber = 4;
        private readonly static uint TimeLastEquippedDefaultValue = 0;

        private uint timeLastEquipped_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeLastEquipped {
          get { if ((_hasBits0 & 8) != 0) { return timeLastEquipped_; } else { return TimeLastEquippedDefaultValue; } }
          set {
            _hasBits0 |= 8;
            timeLastEquipped_ = value;
          }
        }
        /// <summary>Gets whether the "time_last_equipped" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimeLastEquipped {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "time_last_equipped" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimeLastEquipped() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "time_last_unequipped" field.</summary>
        public const int TimeLastUnequippedFieldNumber = 5;
        private readonly static uint TimeLastUnequippedDefaultValue = 0;

        private uint timeLastUnequipped_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeLastUnequipped {
          get { if ((_hasBits0 & 16) != 0) { return timeLastUnequipped_; } else { return TimeLastUnequippedDefaultValue; } }
          set {
            _hasBits0 |= 16;
            timeLastUnequipped_ = value;
          }
        }
        /// <summary>Gets whether the "time_last_unequipped" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimeLastUnequipped {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "time_last_unequipped" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimeLastUnequipped() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "duration_equipped" field.</summary>
        public const int DurationEquippedFieldNumber = 6;
        private readonly static uint DurationEquippedDefaultValue = 0;

        private uint durationEquipped_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DurationEquipped {
          get { if ((_hasBits0 & 32) != 0) { return durationEquipped_; } else { return DurationEquippedDefaultValue; } }
          set {
            _hasBits0 |= 32;
            durationEquipped_ = value;
          }
        }
        /// <summary>Gets whether the "duration_equipped" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDurationEquipped {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "duration_equipped" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDurationEquipped() {
          _hasBits0 &= ~32;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NeutralItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NeutralItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemId != other.ItemId) return false;
          if (TimeDropped != other.TimeDropped) return false;
          if (Team != other.Team) return false;
          if (TimeLastEquipped != other.TimeLastEquipped) return false;
          if (TimeLastUnequipped != other.TimeLastUnequipped) return false;
          if (DurationEquipped != other.DurationEquipped) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasItemId) hash ^= ItemId.GetHashCode();
          if (HasTimeDropped) hash ^= TimeDropped.GetHashCode();
          if (HasTeam) hash ^= Team.GetHashCode();
          if (HasTimeLastEquipped) hash ^= TimeLastEquipped.GetHashCode();
          if (HasTimeLastUnequipped) hash ^= TimeLastUnequipped.GetHashCode();
          if (HasDurationEquipped) hash ^= DurationEquipped.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasItemId) {
            output.WriteRawTag(8);
            output.WriteInt32(ItemId);
          }
          if (HasTimeDropped) {
            output.WriteRawTag(16);
            output.WriteUInt32(TimeDropped);
          }
          if (HasTeam) {
            output.WriteRawTag(24);
            output.WriteUInt32(Team);
          }
          if (HasTimeLastEquipped) {
            output.WriteRawTag(32);
            output.WriteUInt32(TimeLastEquipped);
          }
          if (HasTimeLastUnequipped) {
            output.WriteRawTag(40);
            output.WriteUInt32(TimeLastUnequipped);
          }
          if (HasDurationEquipped) {
            output.WriteRawTag(48);
            output.WriteUInt32(DurationEquipped);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasItemId) {
            output.WriteRawTag(8);
            output.WriteInt32(ItemId);
          }
          if (HasTimeDropped) {
            output.WriteRawTag(16);
            output.WriteUInt32(TimeDropped);
          }
          if (HasTeam) {
            output.WriteRawTag(24);
            output.WriteUInt32(Team);
          }
          if (HasTimeLastEquipped) {
            output.WriteRawTag(32);
            output.WriteUInt32(TimeLastEquipped);
          }
          if (HasTimeLastUnequipped) {
            output.WriteRawTag(40);
            output.WriteUInt32(TimeLastUnequipped);
          }
          if (HasDurationEquipped) {
            output.WriteRawTag(48);
            output.WriteUInt32(DurationEquipped);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasItemId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
          }
          if (HasTimeDropped) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeDropped);
          }
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
          }
          if (HasTimeLastEquipped) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLastEquipped);
          }
          if (HasTimeLastUnequipped) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLastUnequipped);
          }
          if (HasDurationEquipped) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DurationEquipped);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NeutralItem other) {
          if (other == null) {
            return;
          }
          if (other.HasItemId) {
            ItemId = other.ItemId;
          }
          if (other.HasTimeDropped) {
            TimeDropped = other.TimeDropped;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          if (other.HasTimeLastEquipped) {
            TimeLastEquipped = other.TimeLastEquipped;
          }
          if (other.HasTimeLastUnequipped) {
            TimeLastUnequipped = other.TimeLastUnequipped;
          }
          if (other.HasDurationEquipped) {
            DurationEquipped = other.DurationEquipped;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemId = input.ReadInt32();
                break;
              }
              case 16: {
                TimeDropped = input.ReadUInt32();
                break;
              }
              case 24: {
                Team = input.ReadUInt32();
                break;
              }
              case 32: {
                TimeLastEquipped = input.ReadUInt32();
                break;
              }
              case 40: {
                TimeLastUnequipped = input.ReadUInt32();
                break;
              }
              case 48: {
                DurationEquipped = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ItemId = input.ReadInt32();
                break;
              }
              case 16: {
                TimeDropped = input.ReadUInt32();
                break;
              }
              case 24: {
                Team = input.ReadUInt32();
                break;
              }
              case 32: {
                TimeLastEquipped = input.ReadUInt32();
                break;
              }
              case 40: {
                TimeLastUnequipped = input.ReadUInt32();
                break;
              }
              case 48: {
                DurationEquipped = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGCToServerLobbyHeroBanRates : pb::IMessage<CMsgGCToServerLobbyHeroBanRates>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerLobbyHeroBanRates> _parser = new pb::MessageParser<CMsgGCToServerLobbyHeroBanRates>(() => new CMsgGCToServerLobbyHeroBanRates());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerLobbyHeroBanRates> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerLobbyHeroBanRates() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerLobbyHeroBanRates(CMsgGCToServerLobbyHeroBanRates other) : this() {
      banData_ = other.banData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerLobbyHeroBanRates Clone() {
      return new CMsgGCToServerLobbyHeroBanRates(this);
    }

    /// <summary>Field number for the "ban_data" field.</summary>
    public const int BanDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGCToServerLobbyHeroBanRates.Types.HeroBanEntry> _repeated_banData_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGCToServerLobbyHeroBanRates.Types.HeroBanEntry.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCToServerLobbyHeroBanRates.Types.HeroBanEntry> banData_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCToServerLobbyHeroBanRates.Types.HeroBanEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCToServerLobbyHeroBanRates.Types.HeroBanEntry> BanData {
      get { return banData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerLobbyHeroBanRates);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerLobbyHeroBanRates other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!banData_.Equals(other.banData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= banData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      banData_.WriteTo(output, _repeated_banData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      banData_.WriteTo(ref output, _repeated_banData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += banData_.CalculateSize(_repeated_banData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerLobbyHeroBanRates other) {
      if (other == null) {
        return;
      }
      banData_.Add(other.banData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            banData_.AddEntriesFrom(input, _repeated_banData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            banData_.AddEntriesFrom(ref input, _repeated_banData_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGCToServerLobbyHeroBanRates message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class HeroBanEntry : pb::IMessage<HeroBanEntry>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<HeroBanEntry> _parser = new pb::MessageParser<HeroBanEntry>(() => new HeroBanEntry());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HeroBanEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGCToServerLobbyHeroBanRates.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroBanEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroBanEntry(HeroBanEntry other) : this() {
          _hasBits0 = other._hasBits0;
          heroId_ = other.heroId_;
          banCount_ = other.banCount_;
          pickCount_ = other.pickCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroBanEntry Clone() {
          return new HeroBanEntry(this);
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 1;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "ban_count" field.</summary>
        public const int BanCountFieldNumber = 2;
        private readonly static uint BanCountDefaultValue = 0;

        private uint banCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BanCount {
          get { if ((_hasBits0 & 2) != 0) { return banCount_; } else { return BanCountDefaultValue; } }
          set {
            _hasBits0 |= 2;
            banCount_ = value;
          }
        }
        /// <summary>Gets whether the "ban_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBanCount {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "ban_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBanCount() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "pick_count" field.</summary>
        public const int PickCountFieldNumber = 3;
        private readonly static uint PickCountDefaultValue = 0;

        private uint pickCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PickCount {
          get { if ((_hasBits0 & 4) != 0) { return pickCount_; } else { return PickCountDefaultValue; } }
          set {
            _hasBits0 |= 4;
            pickCount_ = value;
          }
        }
        /// <summary>Gets whether the "pick_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPickCount {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "pick_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPickCount() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HeroBanEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HeroBanEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HeroId != other.HeroId) return false;
          if (BanCount != other.BanCount) return false;
          if (PickCount != other.PickCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasBanCount) hash ^= BanCount.GetHashCode();
          if (HasPickCount) hash ^= PickCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasHeroId) {
            output.WriteRawTag(8);
            output.WriteInt32(HeroId);
          }
          if (HasBanCount) {
            output.WriteRawTag(16);
            output.WriteUInt32(BanCount);
          }
          if (HasPickCount) {
            output.WriteRawTag(24);
            output.WriteUInt32(PickCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasHeroId) {
            output.WriteRawTag(8);
            output.WriteInt32(HeroId);
          }
          if (HasBanCount) {
            output.WriteRawTag(16);
            output.WriteUInt32(BanCount);
          }
          if (HasPickCount) {
            output.WriteRawTag(24);
            output.WriteUInt32(PickCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasBanCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BanCount);
          }
          if (HasPickCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PickCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HeroBanEntry other) {
          if (other == null) {
            return;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasBanCount) {
            BanCount = other.BanCount;
          }
          if (other.HasPickCount) {
            PickCount = other.PickCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                HeroId = input.ReadInt32();
                break;
              }
              case 16: {
                BanCount = input.ReadUInt32();
                break;
              }
              case 24: {
                PickCount = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                HeroId = input.ReadInt32();
                break;
              }
              case 16: {
                BanCount = input.ReadUInt32();
                break;
              }
              case 24: {
                PickCount = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSignOutGuildContractProgress : pb::IMessage<CMsgSignOutGuildContractProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutGuildContractProgress> _parser = new pb::MessageParser<CMsgSignOutGuildContractProgress>(() => new CMsgSignOutGuildContractProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutGuildContractProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutGuildContractProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutGuildContractProgress(CMsgSignOutGuildContractProgress other) : this() {
      playerContracts_ = other.playerContracts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutGuildContractProgress Clone() {
      return new CMsgSignOutGuildContractProgress(this);
    }

    /// <summary>Field number for the "player_contracts" field.</summary>
    public const int PlayerContractsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.PlayerContract> _repeated_playerContracts_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.PlayerContract.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.PlayerContract> playerContracts_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.PlayerContract>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.PlayerContract> PlayerContracts {
      get { return playerContracts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutGuildContractProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutGuildContractProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerContracts_.Equals(other.playerContracts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerContracts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      playerContracts_.WriteTo(output, _repeated_playerContracts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      playerContracts_.WriteTo(ref output, _repeated_playerContracts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerContracts_.CalculateSize(_repeated_playerContracts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutGuildContractProgress other) {
      if (other == null) {
        return;
      }
      playerContracts_.Add(other.playerContracts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerContracts_.AddEntriesFrom(input, _repeated_playerContracts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            playerContracts_.AddEntriesFrom(ref input, _repeated_playerContracts_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutGuildContractProgress message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CompletedGuildEventContracts : pb::IMessage<CompletedGuildEventContracts>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CompletedGuildEventContracts> _parser = new pb::MessageParser<CompletedGuildEventContracts>(() => new CompletedGuildEventContracts());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CompletedGuildEventContracts> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CompletedGuildEventContracts() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CompletedGuildEventContracts(CompletedGuildEventContracts other) : this() {
          _hasBits0 = other._hasBits0;
          guildId_ = other.guildId_;
          eventId_ = other.eventId_;
          contracts_ = other.contracts_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CompletedGuildEventContracts Clone() {
          return new CompletedGuildEventContracts(this);
        }

        /// <summary>Field number for the "guild_id" field.</summary>
        public const int GuildIdFieldNumber = 1;
        private readonly static uint GuildIdDefaultValue = 0;

        private uint guildId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GuildId {
          get { if ((_hasBits0 & 1) != 0) { return guildId_; } else { return GuildIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            guildId_ = value;
          }
        }
        /// <summary>Gets whether the "guild_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGuildId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "guild_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGuildId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "event_id" field.</summary>
        public const int EventIdFieldNumber = 2;
        private readonly static uint EventIdDefaultValue = 0;

        private uint eventId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EventId {
          get { if ((_hasBits0 & 2) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            eventId_ = value;
          }
        }
        /// <summary>Gets whether the "event_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEventId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "event_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEventId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "contracts" field.</summary>
        public const int ContractsFieldNumber = 3;
        private static readonly pb::FieldCodec<ulong> _repeated_contracts_codec
            = pb::FieldCodec.ForUInt64(24);
        private readonly pbc::RepeatedField<ulong> contracts_ = new pbc::RepeatedField<ulong>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ulong> Contracts {
          get { return contracts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CompletedGuildEventContracts);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CompletedGuildEventContracts other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GuildId != other.GuildId) return false;
          if (EventId != other.EventId) return false;
          if(!contracts_.Equals(other.contracts_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasGuildId) hash ^= GuildId.GetHashCode();
          if (HasEventId) hash ^= EventId.GetHashCode();
          hash ^= contracts_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasGuildId) {
            output.WriteRawTag(8);
            output.WriteUInt32(GuildId);
          }
          if (HasEventId) {
            output.WriteRawTag(16);
            output.WriteUInt32(EventId);
          }
          contracts_.WriteTo(output, _repeated_contracts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasGuildId) {
            output.WriteRawTag(8);
            output.WriteUInt32(GuildId);
          }
          if (HasEventId) {
            output.WriteRawTag(16);
            output.WriteUInt32(EventId);
          }
          contracts_.WriteTo(ref output, _repeated_contracts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasGuildId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildId);
          }
          if (HasEventId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
          }
          size += contracts_.CalculateSize(_repeated_contracts_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CompletedGuildEventContracts other) {
          if (other == null) {
            return;
          }
          if (other.HasGuildId) {
            GuildId = other.GuildId;
          }
          if (other.HasEventId) {
            EventId = other.EventId;
          }
          contracts_.Add(other.contracts_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                GuildId = input.ReadUInt32();
                break;
              }
              case 16: {
                EventId = input.ReadUInt32();
                break;
              }
              case 26:
              case 24: {
                contracts_.AddEntriesFrom(input, _repeated_contracts_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                GuildId = input.ReadUInt32();
                break;
              }
              case 16: {
                EventId = input.ReadUInt32();
                break;
              }
              case 26:
              case 24: {
                contracts_.AddEntriesFrom(ref input, _repeated_contracts_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PlayerContract : pb::IMessage<PlayerContract>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerContract> _parser = new pb::MessageParser<PlayerContract>(() => new PlayerContract());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerContract> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerContract() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerContract(PlayerContract other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          completedContracts_ = other.completedContracts_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerContract Clone() {
          return new PlayerContract(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "completed_contracts" field.</summary>
        public const int CompletedContractsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.CompletedGuildEventContracts> _repeated_completedContracts_codec
            = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.CompletedGuildEventContracts.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.CompletedGuildEventContracts> completedContracts_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.CompletedGuildEventContracts>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGuildContractProgress.Types.CompletedGuildEventContracts> CompletedContracts {
          get { return completedContracts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerContract);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerContract other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if(!completedContracts_.Equals(other.completedContracts_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          hash ^= completedContracts_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          completedContracts_.WriteTo(output, _repeated_completedContracts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          completedContracts_.WriteTo(ref output, _repeated_completedContracts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          size += completedContracts_.CalculateSize(_repeated_completedContracts_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerContract other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          completedContracts_.Add(other.completedContracts_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                completedContracts_.AddEntriesFrom(input, _repeated_completedContracts_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                completedContracts_.AddEntriesFrom(ref input, _repeated_completedContracts_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSignOutGuildChallengeProgress : pb::IMessage<CMsgSignOutGuildChallengeProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutGuildChallengeProgress> _parser = new pb::MessageParser<CMsgSignOutGuildChallengeProgress>(() => new CMsgSignOutGuildChallengeProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutGuildChallengeProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutGuildChallengeProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutGuildChallengeProgress(CMsgSignOutGuildChallengeProgress other) : this() {
      guildChallengesProgresses_ = other.guildChallengesProgresses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutGuildChallengeProgress Clone() {
      return new CMsgSignOutGuildChallengeProgress(this);
    }

    /// <summary>Field number for the "guild_challenges_progresses" field.</summary>
    public const int GuildChallengesProgressesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutGuildChallengeProgress.Types.ChallengeProgress> _repeated_guildChallengesProgresses_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSignOutGuildChallengeProgress.Types.ChallengeProgress.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGuildChallengeProgress.Types.ChallengeProgress> guildChallengesProgresses_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGuildChallengeProgress.Types.ChallengeProgress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutGuildChallengeProgress.Types.ChallengeProgress> GuildChallengesProgresses {
      get { return guildChallengesProgresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutGuildChallengeProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutGuildChallengeProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!guildChallengesProgresses_.Equals(other.guildChallengesProgresses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= guildChallengesProgresses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      guildChallengesProgresses_.WriteTo(output, _repeated_guildChallengesProgresses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      guildChallengesProgresses_.WriteTo(ref output, _repeated_guildChallengesProgresses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guildChallengesProgresses_.CalculateSize(_repeated_guildChallengesProgresses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutGuildChallengeProgress other) {
      if (other == null) {
        return;
      }
      guildChallengesProgresses_.Add(other.guildChallengesProgresses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            guildChallengesProgresses_.AddEntriesFrom(input, _repeated_guildChallengesProgresses_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            guildChallengesProgresses_.AddEntriesFrom(ref input, _repeated_guildChallengesProgresses_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutGuildChallengeProgress message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ChallengeProgress : pb::IMessage<ChallengeProgress>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ChallengeProgress> _parser = new pb::MessageParser<ChallengeProgress>(() => new ChallengeProgress());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChallengeProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutGuildChallengeProgress.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChallengeProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChallengeProgress(ChallengeProgress other) : this() {
          _hasBits0 = other._hasBits0;
          guildId_ = other.guildId_;
          eventId_ = other.eventId_;
          challengeInstanceId_ = other.challengeInstanceId_;
          challengeInstanceTimestamp_ = other.challengeInstanceTimestamp_;
          challengePeriodSerial_ = other.challengePeriodSerial_;
          progress_ = other.progress_;
          challengeParameter_ = other.challengeParameter_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChallengeProgress Clone() {
          return new ChallengeProgress(this);
        }

        /// <summary>Field number for the "guild_id" field.</summary>
        public const int GuildIdFieldNumber = 1;
        private readonly static uint GuildIdDefaultValue = 0;

        private uint guildId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GuildId {
          get { if ((_hasBits0 & 1) != 0) { return guildId_; } else { return GuildIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            guildId_ = value;
          }
        }
        /// <summary>Gets whether the "guild_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGuildId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "guild_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGuildId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "event_id" field.</summary>
        public const int EventIdFieldNumber = 2;
        private readonly static uint EventIdDefaultValue = 0;

        private uint eventId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EventId {
          get { if ((_hasBits0 & 2) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            eventId_ = value;
          }
        }
        /// <summary>Gets whether the "event_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEventId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "event_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEventId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "challenge_instance_id" field.</summary>
        public const int ChallengeInstanceIdFieldNumber = 3;
        private readonly static uint ChallengeInstanceIdDefaultValue = 0;

        private uint challengeInstanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChallengeInstanceId {
          get { if ((_hasBits0 & 4) != 0) { return challengeInstanceId_; } else { return ChallengeInstanceIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            challengeInstanceId_ = value;
          }
        }
        /// <summary>Gets whether the "challenge_instance_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChallengeInstanceId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "challenge_instance_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChallengeInstanceId() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "challenge_instance_timestamp" field.</summary>
        public const int ChallengeInstanceTimestampFieldNumber = 4;
        private readonly static uint ChallengeInstanceTimestampDefaultValue = 0;

        private uint challengeInstanceTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChallengeInstanceTimestamp {
          get { if ((_hasBits0 & 8) != 0) { return challengeInstanceTimestamp_; } else { return ChallengeInstanceTimestampDefaultValue; } }
          set {
            _hasBits0 |= 8;
            challengeInstanceTimestamp_ = value;
          }
        }
        /// <summary>Gets whether the "challenge_instance_timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChallengeInstanceTimestamp {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "challenge_instance_timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChallengeInstanceTimestamp() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "challenge_period_serial" field.</summary>
        public const int ChallengePeriodSerialFieldNumber = 5;
        private readonly static uint ChallengePeriodSerialDefaultValue = 0;

        private uint challengePeriodSerial_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChallengePeriodSerial {
          get { if ((_hasBits0 & 16) != 0) { return challengePeriodSerial_; } else { return ChallengePeriodSerialDefaultValue; } }
          set {
            _hasBits0 |= 16;
            challengePeriodSerial_ = value;
          }
        }
        /// <summary>Gets whether the "challenge_period_serial" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChallengePeriodSerial {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "challenge_period_serial" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChallengePeriodSerial() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "progress" field.</summary>
        public const int ProgressFieldNumber = 6;
        private readonly static uint ProgressDefaultValue = 0;

        private uint progress_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Progress {
          get { if ((_hasBits0 & 32) != 0) { return progress_; } else { return ProgressDefaultValue; } }
          set {
            _hasBits0 |= 32;
            progress_ = value;
          }
        }
        /// <summary>Gets whether the "progress" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProgress {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "progress" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProgress() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "challenge_parameter" field.</summary>
        public const int ChallengeParameterFieldNumber = 7;
        private readonly static uint ChallengeParameterDefaultValue = 0;

        private uint challengeParameter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChallengeParameter {
          get { if ((_hasBits0 & 64) != 0) { return challengeParameter_; } else { return ChallengeParameterDefaultValue; } }
          set {
            _hasBits0 |= 64;
            challengeParameter_ = value;
          }
        }
        /// <summary>Gets whether the "challenge_parameter" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChallengeParameter {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "challenge_parameter" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChallengeParameter() {
          _hasBits0 &= ~64;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChallengeProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChallengeProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GuildId != other.GuildId) return false;
          if (EventId != other.EventId) return false;
          if (ChallengeInstanceId != other.ChallengeInstanceId) return false;
          if (ChallengeInstanceTimestamp != other.ChallengeInstanceTimestamp) return false;
          if (ChallengePeriodSerial != other.ChallengePeriodSerial) return false;
          if (Progress != other.Progress) return false;
          if (ChallengeParameter != other.ChallengeParameter) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasGuildId) hash ^= GuildId.GetHashCode();
          if (HasEventId) hash ^= EventId.GetHashCode();
          if (HasChallengeInstanceId) hash ^= ChallengeInstanceId.GetHashCode();
          if (HasChallengeInstanceTimestamp) hash ^= ChallengeInstanceTimestamp.GetHashCode();
          if (HasChallengePeriodSerial) hash ^= ChallengePeriodSerial.GetHashCode();
          if (HasProgress) hash ^= Progress.GetHashCode();
          if (HasChallengeParameter) hash ^= ChallengeParameter.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasGuildId) {
            output.WriteRawTag(8);
            output.WriteUInt32(GuildId);
          }
          if (HasEventId) {
            output.WriteRawTag(16);
            output.WriteUInt32(EventId);
          }
          if (HasChallengeInstanceId) {
            output.WriteRawTag(24);
            output.WriteUInt32(ChallengeInstanceId);
          }
          if (HasChallengeInstanceTimestamp) {
            output.WriteRawTag(32);
            output.WriteUInt32(ChallengeInstanceTimestamp);
          }
          if (HasChallengePeriodSerial) {
            output.WriteRawTag(40);
            output.WriteUInt32(ChallengePeriodSerial);
          }
          if (HasProgress) {
            output.WriteRawTag(48);
            output.WriteUInt32(Progress);
          }
          if (HasChallengeParameter) {
            output.WriteRawTag(56);
            output.WriteUInt32(ChallengeParameter);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasGuildId) {
            output.WriteRawTag(8);
            output.WriteUInt32(GuildId);
          }
          if (HasEventId) {
            output.WriteRawTag(16);
            output.WriteUInt32(EventId);
          }
          if (HasChallengeInstanceId) {
            output.WriteRawTag(24);
            output.WriteUInt32(ChallengeInstanceId);
          }
          if (HasChallengeInstanceTimestamp) {
            output.WriteRawTag(32);
            output.WriteUInt32(ChallengeInstanceTimestamp);
          }
          if (HasChallengePeriodSerial) {
            output.WriteRawTag(40);
            output.WriteUInt32(ChallengePeriodSerial);
          }
          if (HasProgress) {
            output.WriteRawTag(48);
            output.WriteUInt32(Progress);
          }
          if (HasChallengeParameter) {
            output.WriteRawTag(56);
            output.WriteUInt32(ChallengeParameter);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasGuildId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildId);
          }
          if (HasEventId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
          }
          if (HasChallengeInstanceId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeInstanceId);
          }
          if (HasChallengeInstanceTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeInstanceTimestamp);
          }
          if (HasChallengePeriodSerial) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengePeriodSerial);
          }
          if (HasProgress) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
          }
          if (HasChallengeParameter) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeParameter);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChallengeProgress other) {
          if (other == null) {
            return;
          }
          if (other.HasGuildId) {
            GuildId = other.GuildId;
          }
          if (other.HasEventId) {
            EventId = other.EventId;
          }
          if (other.HasChallengeInstanceId) {
            ChallengeInstanceId = other.ChallengeInstanceId;
          }
          if (other.HasChallengeInstanceTimestamp) {
            ChallengeInstanceTimestamp = other.ChallengeInstanceTimestamp;
          }
          if (other.HasChallengePeriodSerial) {
            ChallengePeriodSerial = other.ChallengePeriodSerial;
          }
          if (other.HasProgress) {
            Progress = other.Progress;
          }
          if (other.HasChallengeParameter) {
            ChallengeParameter = other.ChallengeParameter;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                GuildId = input.ReadUInt32();
                break;
              }
              case 16: {
                EventId = input.ReadUInt32();
                break;
              }
              case 24: {
                ChallengeInstanceId = input.ReadUInt32();
                break;
              }
              case 32: {
                ChallengeInstanceTimestamp = input.ReadUInt32();
                break;
              }
              case 40: {
                ChallengePeriodSerial = input.ReadUInt32();
                break;
              }
              case 48: {
                Progress = input.ReadUInt32();
                break;
              }
              case 56: {
                ChallengeParameter = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                GuildId = input.ReadUInt32();
                break;
              }
              case 16: {
                EventId = input.ReadUInt32();
                break;
              }
              case 24: {
                ChallengeInstanceId = input.ReadUInt32();
                break;
              }
              case 32: {
                ChallengeInstanceTimestamp = input.ReadUInt32();
                break;
              }
              case 40: {
                ChallengePeriodSerial = input.ReadUInt32();
                break;
              }
              case 48: {
                Progress = input.ReadUInt32();
                break;
              }
              case 56: {
                ChallengeParameter = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSignOutMVPStats : pb::IMessage<CMsgSignOutMVPStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutMVPStats> _parser = new pb::MessageParser<CMsgSignOutMVPStats>(() => new CMsgSignOutMVPStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutMVPStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutMVPStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutMVPStats(CMsgSignOutMVPStats other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      gameMode_ = other.gameMode_;
      winningTeam_ = other.winningTeam_;
      gameTime_ = other.gameTime_;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutMVPStats Clone() {
      return new CMsgSignOutMVPStats(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 2;
    private readonly static uint GameModeDefaultValue = 0;

    private uint gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameMode {
      get { if ((_hasBits0 & 2) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameMode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameMode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "winning_team" field.</summary>
    public const int WinningTeamFieldNumber = 3;
    private readonly static uint WinningTeamDefaultValue = 0;

    private uint winningTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinningTeam {
      get { if ((_hasBits0 & 4) != 0) { return winningTeam_; } else { return WinningTeamDefaultValue; } }
      set {
        _hasBits0 |= 4;
        winningTeam_ = value;
      }
    }
    /// <summary>Gets whether the "winning_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWinningTeam {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "winning_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWinningTeam() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 4;
    private readonly static float GameTimeDefaultValue = 0F;

    private float gameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameTime {
      get { if ((_hasBits0 & 8) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gameTime_ = value;
      }
    }
    /// <summary>Gets whether the "game_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "game_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(42, global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutMVPStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutMVPStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (GameMode != other.GameMode) return false;
      if (WinningTeam != other.WinningTeam) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameTime, other.GameTime)) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasWinningTeam) hash ^= WinningTeam.GetHashCode();
      if (HasGameTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameTime);
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasGameMode) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameMode);
      }
      if (HasWinningTeam) {
        output.WriteRawTag(24);
        output.WriteUInt32(WinningTeam);
      }
      if (HasGameTime) {
        output.WriteRawTag(37);
        output.WriteFloat(GameTime);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasGameMode) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameMode);
      }
      if (HasWinningTeam) {
        output.WriteRawTag(24);
        output.WriteUInt32(WinningTeam);
      }
      if (HasGameTime) {
        output.WriteRawTag(37);
        output.WriteFloat(GameTime);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasGameMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameMode);
      }
      if (HasWinningTeam) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinningTeam);
      }
      if (HasGameTime) {
        size += 1 + 4;
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutMVPStats other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasWinningTeam) {
        WinningTeam = other.WinningTeam;
      }
      if (other.HasGameTime) {
        GameTime = other.GameTime;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            GameMode = input.ReadUInt32();
            break;
          }
          case 24: {
            WinningTeam = input.ReadUInt32();
            break;
          }
          case 37: {
            GameTime = input.ReadFloat();
            break;
          }
          case 42: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            GameMode = input.ReadUInt32();
            break;
          }
          case 24: {
            WinningTeam = input.ReadUInt32();
            break;
          }
          case 37: {
            GameTime = input.ReadFloat();
            break;
          }
          case 42: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutMVPStats message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          teamId_ = other.teamId_;
          teamNetworthRank_ = other.teamNetworthRank_;
          accountId_ = other.accountId_;
          playerSlot_ = other.playerSlot_;
          rank_ = other.rank_;
          heroId_ = other.heroId_;
          role_ = other.role_;
          kills_ = other.kills_;
          deaths_ = other.deaths_;
          assists_ = other.assists_;
          xp_ = other.xp_;
          netWorth_ = other.netWorth_;
          supportGoldSpent_ = other.supportGoldSpent_;
          wardsPlaced_ = other.wardsPlaced_;
          wardsSpottedForDewarding_ = other.wardsSpottedForDewarding_;
          campsStacked_ = other.campsStacked_;
          lastHits_ = other.lastHits_;
          denies_ = other.denies_;
          buildingDamage_ = other.buildingDamage_;
          otherDamage_ = other.otherDamage_;
          tripleKills_ = other.tripleKills_;
          rampages_ = other.rampages_;
          firstBlood_ = other.firstBlood_;
          killEaterEvents_ = other.killEaterEvents_.Clone();
          highestKillstreak_ = other.highestKillstreak_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "team_id" field.</summary>
        public const int TeamIdFieldNumber = 1;
        private readonly static uint TeamIdDefaultValue = 0;

        private uint teamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamId {
          get { if ((_hasBits0 & 1) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            teamId_ = value;
          }
        }
        /// <summary>Gets whether the "team_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "team_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "team_networth_rank" field.</summary>
        public const int TeamNetworthRankFieldNumber = 2;
        private readonly static uint TeamNetworthRankDefaultValue = 0;

        private uint teamNetworthRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamNetworthRank {
          get { if ((_hasBits0 & 2) != 0) { return teamNetworthRank_; } else { return TeamNetworthRankDefaultValue; } }
          set {
            _hasBits0 |= 2;
            teamNetworthRank_ = value;
          }
        }
        /// <summary>Gets whether the "team_networth_rank" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamNetworthRank {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "team_networth_rank" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamNetworthRank() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 3;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 4) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "player_slot" field.</summary>
        public const int PlayerSlotFieldNumber = 32;
        private readonly static uint PlayerSlotDefaultValue = 0;

        private uint playerSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerSlot {
          get { if ((_hasBits0 & 2097152) != 0) { return playerSlot_; } else { return PlayerSlotDefaultValue; } }
          set {
            _hasBits0 |= 2097152;
            playerSlot_ = value;
          }
        }
        /// <summary>Gets whether the "player_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerSlot {
          get { return (_hasBits0 & 2097152) != 0; }
        }
        /// <summary>Clears the value of the "player_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerSlot() {
          _hasBits0 &= ~2097152;
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 33;
        private readonly static uint RankDefaultValue = 0;

        private uint rank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Rank {
          get { if ((_hasBits0 & 4194304) != 0) { return rank_; } else { return RankDefaultValue; } }
          set {
            _hasBits0 |= 4194304;
            rank_ = value;
          }
        }
        /// <summary>Gets whether the "rank" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRank {
          get { return (_hasBits0 & 4194304) != 0; }
        }
        /// <summary>Clears the value of the "rank" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRank() {
          _hasBits0 &= ~4194304;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 4;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 8) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 8;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "role" field.</summary>
        public const int RoleFieldNumber = 5;
        private readonly static uint RoleDefaultValue = 0;

        private uint role_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Role {
          get { if ((_hasBits0 & 16) != 0) { return role_; } else { return RoleDefaultValue; } }
          set {
            _hasBits0 |= 16;
            role_ = value;
          }
        }
        /// <summary>Gets whether the "role" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRole {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "role" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRole() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 6;
        private readonly static int KillsDefaultValue = 0;

        private int kills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Kills {
          get { if ((_hasBits0 & 32) != 0) { return kills_; } else { return KillsDefaultValue; } }
          set {
            _hasBits0 |= 32;
            kills_ = value;
          }
        }
        /// <summary>Gets whether the "kills" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKills {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "kills" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKills() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "deaths" field.</summary>
        public const int DeathsFieldNumber = 7;
        private readonly static int DeathsDefaultValue = 0;

        private int deaths_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Deaths {
          get { if ((_hasBits0 & 64) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
          set {
            _hasBits0 |= 64;
            deaths_ = value;
          }
        }
        /// <summary>Gets whether the "deaths" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeaths {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "deaths" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeaths() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "assists" field.</summary>
        public const int AssistsFieldNumber = 8;
        private readonly static int AssistsDefaultValue = 0;

        private int assists_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Assists {
          get { if ((_hasBits0 & 128) != 0) { return assists_; } else { return AssistsDefaultValue; } }
          set {
            _hasBits0 |= 128;
            assists_ = value;
          }
        }
        /// <summary>Gets whether the "assists" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAssists {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "assists" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAssists() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "xp" field.</summary>
        public const int XpFieldNumber = 9;
        private readonly static int XpDefaultValue = 0;

        private int xp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Xp {
          get { if ((_hasBits0 & 256) != 0) { return xp_; } else { return XpDefaultValue; } }
          set {
            _hasBits0 |= 256;
            xp_ = value;
          }
        }
        /// <summary>Gets whether the "xp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasXp {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "xp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearXp() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "net_worth" field.</summary>
        public const int NetWorthFieldNumber = 10;
        private readonly static int NetWorthDefaultValue = 0;

        private int netWorth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NetWorth {
          get { if ((_hasBits0 & 512) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
          set {
            _hasBits0 |= 512;
            netWorth_ = value;
          }
        }
        /// <summary>Gets whether the "net_worth" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNetWorth {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "net_worth" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNetWorth() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "support_gold_spent" field.</summary>
        public const int SupportGoldSpentFieldNumber = 12;
        private readonly static int SupportGoldSpentDefaultValue = 0;

        private int supportGoldSpent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SupportGoldSpent {
          get { if ((_hasBits0 & 1024) != 0) { return supportGoldSpent_; } else { return SupportGoldSpentDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            supportGoldSpent_ = value;
          }
        }
        /// <summary>Gets whether the "support_gold_spent" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSupportGoldSpent {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "support_gold_spent" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSupportGoldSpent() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "wards_placed" field.</summary>
        public const int WardsPlacedFieldNumber = 13;
        private readonly static int WardsPlacedDefaultValue = 0;

        private int wardsPlaced_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WardsPlaced {
          get { if ((_hasBits0 & 2048) != 0) { return wardsPlaced_; } else { return WardsPlacedDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            wardsPlaced_ = value;
          }
        }
        /// <summary>Gets whether the "wards_placed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWardsPlaced {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "wards_placed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWardsPlaced() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "wards_spotted_for_dewarding" field.</summary>
        public const int WardsSpottedForDewardingFieldNumber = 14;
        private readonly static int WardsSpottedForDewardingDefaultValue = 0;

        private int wardsSpottedForDewarding_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WardsSpottedForDewarding {
          get { if ((_hasBits0 & 4096) != 0) { return wardsSpottedForDewarding_; } else { return WardsSpottedForDewardingDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            wardsSpottedForDewarding_ = value;
          }
        }
        /// <summary>Gets whether the "wards_spotted_for_dewarding" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWardsSpottedForDewarding {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "wards_spotted_for_dewarding" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWardsSpottedForDewarding() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "camps_stacked" field.</summary>
        public const int CampsStackedFieldNumber = 15;
        private readonly static int CampsStackedDefaultValue = 0;

        private int campsStacked_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CampsStacked {
          get { if ((_hasBits0 & 8192) != 0) { return campsStacked_; } else { return CampsStackedDefaultValue; } }
          set {
            _hasBits0 |= 8192;
            campsStacked_ = value;
          }
        }
        /// <summary>Gets whether the "camps_stacked" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCampsStacked {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "camps_stacked" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCampsStacked() {
          _hasBits0 &= ~8192;
        }

        /// <summary>Field number for the "last_hits" field.</summary>
        public const int LastHitsFieldNumber = 16;
        private readonly static int LastHitsDefaultValue = 0;

        private int lastHits_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LastHits {
          get { if ((_hasBits0 & 16384) != 0) { return lastHits_; } else { return LastHitsDefaultValue; } }
          set {
            _hasBits0 |= 16384;
            lastHits_ = value;
          }
        }
        /// <summary>Gets whether the "last_hits" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLastHits {
          get { return (_hasBits0 & 16384) != 0; }
        }
        /// <summary>Clears the value of the "last_hits" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLastHits() {
          _hasBits0 &= ~16384;
        }

        /// <summary>Field number for the "denies" field.</summary>
        public const int DeniesFieldNumber = 17;
        private readonly static int DeniesDefaultValue = 0;

        private int denies_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Denies {
          get { if ((_hasBits0 & 32768) != 0) { return denies_; } else { return DeniesDefaultValue; } }
          set {
            _hasBits0 |= 32768;
            denies_ = value;
          }
        }
        /// <summary>Gets whether the "denies" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDenies {
          get { return (_hasBits0 & 32768) != 0; }
        }
        /// <summary>Clears the value of the "denies" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDenies() {
          _hasBits0 &= ~32768;
        }

        /// <summary>Field number for the "building_damage" field.</summary>
        public const int BuildingDamageFieldNumber = 19;
        private readonly static int BuildingDamageDefaultValue = 0;

        private int buildingDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BuildingDamage {
          get { if ((_hasBits0 & 65536) != 0) { return buildingDamage_; } else { return BuildingDamageDefaultValue; } }
          set {
            _hasBits0 |= 65536;
            buildingDamage_ = value;
          }
        }
        /// <summary>Gets whether the "building_damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuildingDamage {
          get { return (_hasBits0 & 65536) != 0; }
        }
        /// <summary>Clears the value of the "building_damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuildingDamage() {
          _hasBits0 &= ~65536;
        }

        /// <summary>Field number for the "other_damage" field.</summary>
        public const int OtherDamageFieldNumber = 20;
        private readonly static int OtherDamageDefaultValue = 0;

        private int otherDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int OtherDamage {
          get { if ((_hasBits0 & 131072) != 0) { return otherDamage_; } else { return OtherDamageDefaultValue; } }
          set {
            _hasBits0 |= 131072;
            otherDamage_ = value;
          }
        }
        /// <summary>Gets whether the "other_damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOtherDamage {
          get { return (_hasBits0 & 131072) != 0; }
        }
        /// <summary>Clears the value of the "other_damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOtherDamage() {
          _hasBits0 &= ~131072;
        }

        /// <summary>Field number for the "triple_kills" field.</summary>
        public const int TripleKillsFieldNumber = 26;
        private readonly static int TripleKillsDefaultValue = 0;

        private int tripleKills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TripleKills {
          get { if ((_hasBits0 & 262144) != 0) { return tripleKills_; } else { return TripleKillsDefaultValue; } }
          set {
            _hasBits0 |= 262144;
            tripleKills_ = value;
          }
        }
        /// <summary>Gets whether the "triple_kills" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTripleKills {
          get { return (_hasBits0 & 262144) != 0; }
        }
        /// <summary>Clears the value of the "triple_kills" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTripleKills() {
          _hasBits0 &= ~262144;
        }

        /// <summary>Field number for the "rampages" field.</summary>
        public const int RampagesFieldNumber = 28;
        private readonly static int RampagesDefaultValue = 0;

        private int rampages_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Rampages {
          get { if ((_hasBits0 & 524288) != 0) { return rampages_; } else { return RampagesDefaultValue; } }
          set {
            _hasBits0 |= 524288;
            rampages_ = value;
          }
        }
        /// <summary>Gets whether the "rampages" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRampages {
          get { return (_hasBits0 & 524288) != 0; }
        }
        /// <summary>Clears the value of the "rampages" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRampages() {
          _hasBits0 &= ~524288;
        }

        /// <summary>Field number for the "first_blood" field.</summary>
        public const int FirstBloodFieldNumber = 31;
        private readonly static int FirstBloodDefaultValue = 0;

        private int firstBlood_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FirstBlood {
          get { if ((_hasBits0 & 1048576) != 0) { return firstBlood_; } else { return FirstBloodDefaultValue; } }
          set {
            _hasBits0 |= 1048576;
            firstBlood_ = value;
          }
        }
        /// <summary>Gets whether the "first_blood" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFirstBlood {
          get { return (_hasBits0 & 1048576) != 0; }
        }
        /// <summary>Clears the value of the "first_blood" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFirstBlood() {
          _hasBits0 &= ~1048576;
        }

        /// <summary>Field number for the "kill_eater_events" field.</summary>
        public const int KillEaterEventsFieldNumber = 34;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player.Types.KillEaterEvent> _repeated_killEaterEvents_codec
            = pb::FieldCodec.ForMessage(274, global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player.Types.KillEaterEvent.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player.Types.KillEaterEvent> killEaterEvents_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player.Types.KillEaterEvent>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player.Types.KillEaterEvent> KillEaterEvents {
          get { return killEaterEvents_; }
        }

        /// <summary>Field number for the "highest_killstreak" field.</summary>
        public const int HighestKillstreakFieldNumber = 35;
        private readonly static uint HighestKillstreakDefaultValue = 0;

        private uint highestKillstreak_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HighestKillstreak {
          get { if ((_hasBits0 & 8388608) != 0) { return highestKillstreak_; } else { return HighestKillstreakDefaultValue; } }
          set {
            _hasBits0 |= 8388608;
            highestKillstreak_ = value;
          }
        }
        /// <summary>Gets whether the "highest_killstreak" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHighestKillstreak {
          get { return (_hasBits0 & 8388608) != 0; }
        }
        /// <summary>Clears the value of the "highest_killstreak" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHighestKillstreak() {
          _hasBits0 &= ~8388608;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TeamId != other.TeamId) return false;
          if (TeamNetworthRank != other.TeamNetworthRank) return false;
          if (AccountId != other.AccountId) return false;
          if (PlayerSlot != other.PlayerSlot) return false;
          if (Rank != other.Rank) return false;
          if (HeroId != other.HeroId) return false;
          if (Role != other.Role) return false;
          if (Kills != other.Kills) return false;
          if (Deaths != other.Deaths) return false;
          if (Assists != other.Assists) return false;
          if (Xp != other.Xp) return false;
          if (NetWorth != other.NetWorth) return false;
          if (SupportGoldSpent != other.SupportGoldSpent) return false;
          if (WardsPlaced != other.WardsPlaced) return false;
          if (WardsSpottedForDewarding != other.WardsSpottedForDewarding) return false;
          if (CampsStacked != other.CampsStacked) return false;
          if (LastHits != other.LastHits) return false;
          if (Denies != other.Denies) return false;
          if (BuildingDamage != other.BuildingDamage) return false;
          if (OtherDamage != other.OtherDamage) return false;
          if (TripleKills != other.TripleKills) return false;
          if (Rampages != other.Rampages) return false;
          if (FirstBlood != other.FirstBlood) return false;
          if(!killEaterEvents_.Equals(other.killEaterEvents_)) return false;
          if (HighestKillstreak != other.HighestKillstreak) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTeamId) hash ^= TeamId.GetHashCode();
          if (HasTeamNetworthRank) hash ^= TeamNetworthRank.GetHashCode();
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasPlayerSlot) hash ^= PlayerSlot.GetHashCode();
          if (HasRank) hash ^= Rank.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasRole) hash ^= Role.GetHashCode();
          if (HasKills) hash ^= Kills.GetHashCode();
          if (HasDeaths) hash ^= Deaths.GetHashCode();
          if (HasAssists) hash ^= Assists.GetHashCode();
          if (HasXp) hash ^= Xp.GetHashCode();
          if (HasNetWorth) hash ^= NetWorth.GetHashCode();
          if (HasSupportGoldSpent) hash ^= SupportGoldSpent.GetHashCode();
          if (HasWardsPlaced) hash ^= WardsPlaced.GetHashCode();
          if (HasWardsSpottedForDewarding) hash ^= WardsSpottedForDewarding.GetHashCode();
          if (HasCampsStacked) hash ^= CampsStacked.GetHashCode();
          if (HasLastHits) hash ^= LastHits.GetHashCode();
          if (HasDenies) hash ^= Denies.GetHashCode();
          if (HasBuildingDamage) hash ^= BuildingDamage.GetHashCode();
          if (HasOtherDamage) hash ^= OtherDamage.GetHashCode();
          if (HasTripleKills) hash ^= TripleKills.GetHashCode();
          if (HasRampages) hash ^= Rampages.GetHashCode();
          if (HasFirstBlood) hash ^= FirstBlood.GetHashCode();
          hash ^= killEaterEvents_.GetHashCode();
          if (HasHighestKillstreak) hash ^= HighestKillstreak.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasTeamId) {
            output.WriteRawTag(8);
            output.WriteUInt32(TeamId);
          }
          if (HasTeamNetworthRank) {
            output.WriteRawTag(16);
            output.WriteUInt32(TeamNetworthRank);
          }
          if (HasAccountId) {
            output.WriteRawTag(24);
            output.WriteUInt32(AccountId);
          }
          if (HasHeroId) {
            output.WriteRawTag(32);
            output.WriteInt32(HeroId);
          }
          if (HasRole) {
            output.WriteRawTag(40);
            output.WriteUInt32(Role);
          }
          if (HasKills) {
            output.WriteRawTag(48);
            output.WriteInt32(Kills);
          }
          if (HasDeaths) {
            output.WriteRawTag(56);
            output.WriteInt32(Deaths);
          }
          if (HasAssists) {
            output.WriteRawTag(64);
            output.WriteInt32(Assists);
          }
          if (HasXp) {
            output.WriteRawTag(72);
            output.WriteInt32(Xp);
          }
          if (HasNetWorth) {
            output.WriteRawTag(80);
            output.WriteInt32(NetWorth);
          }
          if (HasSupportGoldSpent) {
            output.WriteRawTag(96);
            output.WriteInt32(SupportGoldSpent);
          }
          if (HasWardsPlaced) {
            output.WriteRawTag(104);
            output.WriteInt32(WardsPlaced);
          }
          if (HasWardsSpottedForDewarding) {
            output.WriteRawTag(112);
            output.WriteInt32(WardsSpottedForDewarding);
          }
          if (HasCampsStacked) {
            output.WriteRawTag(120);
            output.WriteInt32(CampsStacked);
          }
          if (HasLastHits) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(LastHits);
          }
          if (HasDenies) {
            output.WriteRawTag(136, 1);
            output.WriteInt32(Denies);
          }
          if (HasBuildingDamage) {
            output.WriteRawTag(152, 1);
            output.WriteInt32(BuildingDamage);
          }
          if (HasOtherDamage) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(OtherDamage);
          }
          if (HasTripleKills) {
            output.WriteRawTag(208, 1);
            output.WriteInt32(TripleKills);
          }
          if (HasRampages) {
            output.WriteRawTag(224, 1);
            output.WriteInt32(Rampages);
          }
          if (HasFirstBlood) {
            output.WriteRawTag(248, 1);
            output.WriteInt32(FirstBlood);
          }
          if (HasPlayerSlot) {
            output.WriteRawTag(128, 2);
            output.WriteUInt32(PlayerSlot);
          }
          if (HasRank) {
            output.WriteRawTag(136, 2);
            output.WriteUInt32(Rank);
          }
          killEaterEvents_.WriteTo(output, _repeated_killEaterEvents_codec);
          if (HasHighestKillstreak) {
            output.WriteRawTag(152, 2);
            output.WriteUInt32(HighestKillstreak);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasTeamId) {
            output.WriteRawTag(8);
            output.WriteUInt32(TeamId);
          }
          if (HasTeamNetworthRank) {
            output.WriteRawTag(16);
            output.WriteUInt32(TeamNetworthRank);
          }
          if (HasAccountId) {
            output.WriteRawTag(24);
            output.WriteUInt32(AccountId);
          }
          if (HasHeroId) {
            output.WriteRawTag(32);
            output.WriteInt32(HeroId);
          }
          if (HasRole) {
            output.WriteRawTag(40);
            output.WriteUInt32(Role);
          }
          if (HasKills) {
            output.WriteRawTag(48);
            output.WriteInt32(Kills);
          }
          if (HasDeaths) {
            output.WriteRawTag(56);
            output.WriteInt32(Deaths);
          }
          if (HasAssists) {
            output.WriteRawTag(64);
            output.WriteInt32(Assists);
          }
          if (HasXp) {
            output.WriteRawTag(72);
            output.WriteInt32(Xp);
          }
          if (HasNetWorth) {
            output.WriteRawTag(80);
            output.WriteInt32(NetWorth);
          }
          if (HasSupportGoldSpent) {
            output.WriteRawTag(96);
            output.WriteInt32(SupportGoldSpent);
          }
          if (HasWardsPlaced) {
            output.WriteRawTag(104);
            output.WriteInt32(WardsPlaced);
          }
          if (HasWardsSpottedForDewarding) {
            output.WriteRawTag(112);
            output.WriteInt32(WardsSpottedForDewarding);
          }
          if (HasCampsStacked) {
            output.WriteRawTag(120);
            output.WriteInt32(CampsStacked);
          }
          if (HasLastHits) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(LastHits);
          }
          if (HasDenies) {
            output.WriteRawTag(136, 1);
            output.WriteInt32(Denies);
          }
          if (HasBuildingDamage) {
            output.WriteRawTag(152, 1);
            output.WriteInt32(BuildingDamage);
          }
          if (HasOtherDamage) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(OtherDamage);
          }
          if (HasTripleKills) {
            output.WriteRawTag(208, 1);
            output.WriteInt32(TripleKills);
          }
          if (HasRampages) {
            output.WriteRawTag(224, 1);
            output.WriteInt32(Rampages);
          }
          if (HasFirstBlood) {
            output.WriteRawTag(248, 1);
            output.WriteInt32(FirstBlood);
          }
          if (HasPlayerSlot) {
            output.WriteRawTag(128, 2);
            output.WriteUInt32(PlayerSlot);
          }
          if (HasRank) {
            output.WriteRawTag(136, 2);
            output.WriteUInt32(Rank);
          }
          killEaterEvents_.WriteTo(ref output, _repeated_killEaterEvents_codec);
          if (HasHighestKillstreak) {
            output.WriteRawTag(152, 2);
            output.WriteUInt32(HighestKillstreak);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTeamId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
          }
          if (HasTeamNetworthRank) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamNetworthRank);
          }
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasPlayerSlot) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
          }
          if (HasRank) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasRole) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Role);
          }
          if (HasKills) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kills);
          }
          if (HasDeaths) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deaths);
          }
          if (HasAssists) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assists);
          }
          if (HasXp) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Xp);
          }
          if (HasNetWorth) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetWorth);
          }
          if (HasSupportGoldSpent) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SupportGoldSpent);
          }
          if (HasWardsPlaced) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WardsPlaced);
          }
          if (HasWardsSpottedForDewarding) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WardsSpottedForDewarding);
          }
          if (HasCampsStacked) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CampsStacked);
          }
          if (HasLastHits) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastHits);
          }
          if (HasDenies) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Denies);
          }
          if (HasBuildingDamage) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuildingDamage);
          }
          if (HasOtherDamage) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(OtherDamage);
          }
          if (HasTripleKills) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(TripleKills);
          }
          if (HasRampages) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Rampages);
          }
          if (HasFirstBlood) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(FirstBlood);
          }
          size += killEaterEvents_.CalculateSize(_repeated_killEaterEvents_codec);
          if (HasHighestKillstreak) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HighestKillstreak);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasTeamId) {
            TeamId = other.TeamId;
          }
          if (other.HasTeamNetworthRank) {
            TeamNetworthRank = other.TeamNetworthRank;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasPlayerSlot) {
            PlayerSlot = other.PlayerSlot;
          }
          if (other.HasRank) {
            Rank = other.Rank;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasRole) {
            Role = other.Role;
          }
          if (other.HasKills) {
            Kills = other.Kills;
          }
          if (other.HasDeaths) {
            Deaths = other.Deaths;
          }
          if (other.HasAssists) {
            Assists = other.Assists;
          }
          if (other.HasXp) {
            Xp = other.Xp;
          }
          if (other.HasNetWorth) {
            NetWorth = other.NetWorth;
          }
          if (other.HasSupportGoldSpent) {
            SupportGoldSpent = other.SupportGoldSpent;
          }
          if (other.HasWardsPlaced) {
            WardsPlaced = other.WardsPlaced;
          }
          if (other.HasWardsSpottedForDewarding) {
            WardsSpottedForDewarding = other.WardsSpottedForDewarding;
          }
          if (other.HasCampsStacked) {
            CampsStacked = other.CampsStacked;
          }
          if (other.HasLastHits) {
            LastHits = other.LastHits;
          }
          if (other.HasDenies) {
            Denies = other.Denies;
          }
          if (other.HasBuildingDamage) {
            BuildingDamage = other.BuildingDamage;
          }
          if (other.HasOtherDamage) {
            OtherDamage = other.OtherDamage;
          }
          if (other.HasTripleKills) {
            TripleKills = other.TripleKills;
          }
          if (other.HasRampages) {
            Rampages = other.Rampages;
          }
          if (other.HasFirstBlood) {
            FirstBlood = other.FirstBlood;
          }
          killEaterEvents_.Add(other.killEaterEvents_);
          if (other.HasHighestKillstreak) {
            HighestKillstreak = other.HighestKillstreak;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TeamId = input.ReadUInt32();
                break;
              }
              case 16: {
                TeamNetworthRank = input.ReadUInt32();
                break;
              }
              case 24: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 32: {
                HeroId = input.ReadInt32();
                break;
              }
              case 40: {
                Role = input.ReadUInt32();
                break;
              }
              case 48: {
                Kills = input.ReadInt32();
                break;
              }
              case 56: {
                Deaths = input.ReadInt32();
                break;
              }
              case 64: {
                Assists = input.ReadInt32();
                break;
              }
              case 72: {
                Xp = input.ReadInt32();
                break;
              }
              case 80: {
                NetWorth = input.ReadInt32();
                break;
              }
              case 96: {
                SupportGoldSpent = input.ReadInt32();
                break;
              }
              case 104: {
                WardsPlaced = input.ReadInt32();
                break;
              }
              case 112: {
                WardsSpottedForDewarding = input.ReadInt32();
                break;
              }
              case 120: {
                CampsStacked = input.ReadInt32();
                break;
              }
              case 128: {
                LastHits = input.ReadInt32();
                break;
              }
              case 136: {
                Denies = input.ReadInt32();
                break;
              }
              case 152: {
                BuildingDamage = input.ReadInt32();
                break;
              }
              case 160: {
                OtherDamage = input.ReadInt32();
                break;
              }
              case 208: {
                TripleKills = input.ReadInt32();
                break;
              }
              case 224: {
                Rampages = input.ReadInt32();
                break;
              }
              case 248: {
                FirstBlood = input.ReadInt32();
                break;
              }
              case 256: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 264: {
                Rank = input.ReadUInt32();
                break;
              }
              case 274: {
                killEaterEvents_.AddEntriesFrom(input, _repeated_killEaterEvents_codec);
                break;
              }
              case 280: {
                HighestKillstreak = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                TeamId = input.ReadUInt32();
                break;
              }
              case 16: {
                TeamNetworthRank = input.ReadUInt32();
                break;
              }
              case 24: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 32: {
                HeroId = input.ReadInt32();
                break;
              }
              case 40: {
                Role = input.ReadUInt32();
                break;
              }
              case 48: {
                Kills = input.ReadInt32();
                break;
              }
              case 56: {
                Deaths = input.ReadInt32();
                break;
              }
              case 64: {
                Assists = input.ReadInt32();
                break;
              }
              case 72: {
                Xp = input.ReadInt32();
                break;
              }
              case 80: {
                NetWorth = input.ReadInt32();
                break;
              }
              case 96: {
                SupportGoldSpent = input.ReadInt32();
                break;
              }
              case 104: {
                WardsPlaced = input.ReadInt32();
                break;
              }
              case 112: {
                WardsSpottedForDewarding = input.ReadInt32();
                break;
              }
              case 120: {
                CampsStacked = input.ReadInt32();
                break;
              }
              case 128: {
                LastHits = input.ReadInt32();
                break;
              }
              case 136: {
                Denies = input.ReadInt32();
                break;
              }
              case 152: {
                BuildingDamage = input.ReadInt32();
                break;
              }
              case 160: {
                OtherDamage = input.ReadInt32();
                break;
              }
              case 208: {
                TripleKills = input.ReadInt32();
                break;
              }
              case 224: {
                Rampages = input.ReadInt32();
                break;
              }
              case 248: {
                FirstBlood = input.ReadInt32();
                break;
              }
              case 256: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 264: {
                Rank = input.ReadUInt32();
                break;
              }
              case 274: {
                killEaterEvents_.AddEntriesFrom(ref input, _repeated_killEaterEvents_codec);
                break;
              }
              case 280: {
                HighestKillstreak = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Player message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class KillEaterEvent : pb::IMessage<KillEaterEvent>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<KillEaterEvent> _parser = new pb::MessageParser<KillEaterEvent>(() => new KillEaterEvent());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KillEaterEvent> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgSignOutMVPStats.Types.Player.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KillEaterEvent() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KillEaterEvent(KillEaterEvent other) : this() {
              _hasBits0 = other._hasBits0;
              eventType_ = other.eventType_;
              amount_ = other.amount_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KillEaterEvent Clone() {
              return new KillEaterEvent(this);
            }

            /// <summary>Field number for the "event_type" field.</summary>
            public const int EventTypeFieldNumber = 1;
            private readonly static uint EventTypeDefaultValue = 0;

            private uint eventType_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EventType {
              get { if ((_hasBits0 & 1) != 0) { return eventType_; } else { return EventTypeDefaultValue; } }
              set {
                _hasBits0 |= 1;
                eventType_ = value;
              }
            }
            /// <summary>Gets whether the "event_type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasEventType {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "event_type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearEventType() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "amount" field.</summary>
            public const int AmountFieldNumber = 2;
            private readonly static uint AmountDefaultValue = 0;

            private uint amount_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Amount {
              get { if ((_hasBits0 & 2) != 0) { return amount_; } else { return AmountDefaultValue; } }
              set {
                _hasBits0 |= 2;
                amount_ = value;
              }
            }
            /// <summary>Gets whether the "amount" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasAmount {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "amount" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearAmount() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KillEaterEvent);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KillEaterEvent other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (EventType != other.EventType) return false;
              if (Amount != other.Amount) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasEventType) hash ^= EventType.GetHashCode();
              if (HasAmount) hash ^= Amount.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasEventType) {
                output.WriteRawTag(8);
                output.WriteUInt32(EventType);
              }
              if (HasAmount) {
                output.WriteRawTag(16);
                output.WriteUInt32(Amount);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasEventType) {
                output.WriteRawTag(8);
                output.WriteUInt32(EventType);
              }
              if (HasAmount) {
                output.WriteRawTag(16);
                output.WriteUInt32(Amount);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasEventType) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventType);
              }
              if (HasAmount) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KillEaterEvent other) {
              if (other == null) {
                return;
              }
              if (other.HasEventType) {
                EventType = other.EventType;
              }
              if (other.HasAmount) {
                Amount = other.Amount;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    EventType = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Amount = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    EventType = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Amount = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCGetGuildContracts : pb::IMessage<CMsgServerToGCGetGuildContracts>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCGetGuildContracts> _parser = new pb::MessageParser<CMsgServerToGCGetGuildContracts>(() => new CMsgServerToGCGetGuildContracts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCGetGuildContracts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetGuildContracts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetGuildContracts(CMsgServerToGCGetGuildContracts other) : this() {
      accountIds_ = other.accountIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetGuildContracts Clone() {
      return new CMsgServerToGCGetGuildContracts(this);
    }

    /// <summary>Field number for the "account_ids" field.</summary>
    public const int AccountIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_accountIds_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> accountIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AccountIds {
      get { return accountIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCGetGuildContracts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCGetGuildContracts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accountIds_.Equals(other.accountIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accountIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accountIds_.WriteTo(output, _repeated_accountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accountIds_.WriteTo(ref output, _repeated_accountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accountIds_.CalculateSize(_repeated_accountIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCGetGuildContracts other) {
      if (other == null) {
        return;
      }
      accountIds_.Add(other.accountIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            accountIds_.AddEntriesFrom(input, _repeated_accountIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            accountIds_.AddEntriesFrom(ref input, _repeated_accountIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCGetGuildContractsResponse : pb::IMessage<CMsgServerToGCGetGuildContractsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCGetGuildContractsResponse> _parser = new pb::MessageParser<CMsgServerToGCGetGuildContractsResponse>(() => new CMsgServerToGCGetGuildContractsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCGetGuildContractsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetGuildContractsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetGuildContractsResponse(CMsgServerToGCGetGuildContractsResponse other) : this() {
      playerContracts_ = other.playerContracts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetGuildContractsResponse Clone() {
      return new CMsgServerToGCGetGuildContractsResponse(this);
    }

    /// <summary>Field number for the "player_contracts" field.</summary>
    public const int PlayerContractsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.Player> _repeated_playerContracts_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.Player> playerContracts_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.Player> PlayerContracts {
      get { return playerContracts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCGetGuildContractsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCGetGuildContractsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerContracts_.Equals(other.playerContracts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerContracts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      playerContracts_.WriteTo(output, _repeated_playerContracts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      playerContracts_.WriteTo(ref output, _repeated_playerContracts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerContracts_.CalculateSize(_repeated_playerContracts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCGetGuildContractsResponse other) {
      if (other == null) {
        return;
      }
      playerContracts_.Add(other.playerContracts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerContracts_.AddEntriesFrom(input, _repeated_playerContracts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            playerContracts_.AddEntriesFrom(ref input, _repeated_playerContracts_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCGetGuildContractsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ContractDetails : pb::IMessage<ContractDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ContractDetails> _parser = new pb::MessageParser<ContractDetails>(() => new ContractDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ContractDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContractDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContractDetails(ContractDetails other) : this() {
          _hasBits0 = other._hasBits0;
          contractId_ = other.contractId_;
          challengeInstanceId_ = other.challengeInstanceId_;
          challengeParameter_ = other.challengeParameter_;
          contractStars_ = other.contractStars_;
          contractSlot_ = other.contractSlot_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContractDetails Clone() {
          return new ContractDetails(this);
        }

        /// <summary>Field number for the "contract_id" field.</summary>
        public const int ContractIdFieldNumber = 1;
        private readonly static ulong ContractIdDefaultValue = 0UL;

        private ulong contractId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ContractId {
          get { if ((_hasBits0 & 1) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            contractId_ = value;
          }
        }
        /// <summary>Gets whether the "contract_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContractId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "contract_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContractId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "challenge_instance_id" field.</summary>
        public const int ChallengeInstanceIdFieldNumber = 2;
        private readonly static uint ChallengeInstanceIdDefaultValue = 0;

        private uint challengeInstanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChallengeInstanceId {
          get { if ((_hasBits0 & 2) != 0) { return challengeInstanceId_; } else { return ChallengeInstanceIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            challengeInstanceId_ = value;
          }
        }
        /// <summary>Gets whether the "challenge_instance_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChallengeInstanceId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "challenge_instance_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChallengeInstanceId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "challenge_parameter" field.</summary>
        public const int ChallengeParameterFieldNumber = 3;
        private readonly static uint ChallengeParameterDefaultValue = 0;

        private uint challengeParameter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChallengeParameter {
          get { if ((_hasBits0 & 4) != 0) { return challengeParameter_; } else { return ChallengeParameterDefaultValue; } }
          set {
            _hasBits0 |= 4;
            challengeParameter_ = value;
          }
        }
        /// <summary>Gets whether the "challenge_parameter" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChallengeParameter {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "challenge_parameter" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChallengeParameter() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "contract_stars" field.</summary>
        public const int ContractStarsFieldNumber = 4;
        private readonly static uint ContractStarsDefaultValue = 0;

        private uint contractStars_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ContractStars {
          get { if ((_hasBits0 & 8) != 0) { return contractStars_; } else { return ContractStarsDefaultValue; } }
          set {
            _hasBits0 |= 8;
            contractStars_ = value;
          }
        }
        /// <summary>Gets whether the "contract_stars" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContractStars {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "contract_stars" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContractStars() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "contract_slot" field.</summary>
        public const int ContractSlotFieldNumber = 5;
        private readonly static uint ContractSlotDefaultValue = 0;

        private uint contractSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ContractSlot {
          get { if ((_hasBits0 & 16) != 0) { return contractSlot_; } else { return ContractSlotDefaultValue; } }
          set {
            _hasBits0 |= 16;
            contractSlot_ = value;
          }
        }
        /// <summary>Gets whether the "contract_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContractSlot {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "contract_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContractSlot() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ContractDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ContractDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ContractId != other.ContractId) return false;
          if (ChallengeInstanceId != other.ChallengeInstanceId) return false;
          if (ChallengeParameter != other.ChallengeParameter) return false;
          if (ContractStars != other.ContractStars) return false;
          if (ContractSlot != other.ContractSlot) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasContractId) hash ^= ContractId.GetHashCode();
          if (HasChallengeInstanceId) hash ^= ChallengeInstanceId.GetHashCode();
          if (HasChallengeParameter) hash ^= ChallengeParameter.GetHashCode();
          if (HasContractStars) hash ^= ContractStars.GetHashCode();
          if (HasContractSlot) hash ^= ContractSlot.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasContractId) {
            output.WriteRawTag(8);
            output.WriteUInt64(ContractId);
          }
          if (HasChallengeInstanceId) {
            output.WriteRawTag(16);
            output.WriteUInt32(ChallengeInstanceId);
          }
          if (HasChallengeParameter) {
            output.WriteRawTag(24);
            output.WriteUInt32(ChallengeParameter);
          }
          if (HasContractStars) {
            output.WriteRawTag(32);
            output.WriteUInt32(ContractStars);
          }
          if (HasContractSlot) {
            output.WriteRawTag(40);
            output.WriteUInt32(ContractSlot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasContractId) {
            output.WriteRawTag(8);
            output.WriteUInt64(ContractId);
          }
          if (HasChallengeInstanceId) {
            output.WriteRawTag(16);
            output.WriteUInt32(ChallengeInstanceId);
          }
          if (HasChallengeParameter) {
            output.WriteRawTag(24);
            output.WriteUInt32(ChallengeParameter);
          }
          if (HasContractStars) {
            output.WriteRawTag(32);
            output.WriteUInt32(ContractStars);
          }
          if (HasContractSlot) {
            output.WriteRawTag(40);
            output.WriteUInt32(ContractSlot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasContractId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ContractId);
          }
          if (HasChallengeInstanceId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeInstanceId);
          }
          if (HasChallengeParameter) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeParameter);
          }
          if (HasContractStars) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractStars);
          }
          if (HasContractSlot) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractSlot);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ContractDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasContractId) {
            ContractId = other.ContractId;
          }
          if (other.HasChallengeInstanceId) {
            ChallengeInstanceId = other.ChallengeInstanceId;
          }
          if (other.HasChallengeParameter) {
            ChallengeParameter = other.ChallengeParameter;
          }
          if (other.HasContractStars) {
            ContractStars = other.ContractStars;
          }
          if (other.HasContractSlot) {
            ContractSlot = other.ContractSlot;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ContractId = input.ReadUInt64();
                break;
              }
              case 16: {
                ChallengeInstanceId = input.ReadUInt32();
                break;
              }
              case 24: {
                ChallengeParameter = input.ReadUInt32();
                break;
              }
              case 32: {
                ContractStars = input.ReadUInt32();
                break;
              }
              case 40: {
                ContractSlot = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ContractId = input.ReadUInt64();
                break;
              }
              case 16: {
                ChallengeInstanceId = input.ReadUInt32();
                break;
              }
              case 24: {
                ChallengeParameter = input.ReadUInt32();
                break;
              }
              case 32: {
                ContractStars = input.ReadUInt32();
                break;
              }
              case 40: {
                ContractSlot = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          guildId_ = other.guildId_;
          eventId_ = other.eventId_;
          contracts_ = other.contracts_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "guild_id" field.</summary>
        public const int GuildIdFieldNumber = 2;
        private readonly static uint GuildIdDefaultValue = 0;

        private uint guildId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GuildId {
          get { if ((_hasBits0 & 2) != 0) { return guildId_; } else { return GuildIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            guildId_ = value;
          }
        }
        /// <summary>Gets whether the "guild_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGuildId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "guild_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGuildId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "event_id" field.</summary>
        public const int EventIdFieldNumber = 3;
        private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

        private global::Steam.Protos.Dota2.EEvent eventId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.EEvent EventId {
          get { if ((_hasBits0 & 4) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            eventId_ = value;
          }
        }
        /// <summary>Gets whether the "event_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEventId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "event_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEventId() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "contracts" field.</summary>
        public const int ContractsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.ContractDetails> _repeated_contracts_codec
            = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.ContractDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.ContractDetails> contracts_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.ContractDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCGetGuildContractsResponse.Types.ContractDetails> Contracts {
          get { return contracts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (GuildId != other.GuildId) return false;
          if (EventId != other.EventId) return false;
          if(!contracts_.Equals(other.contracts_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasGuildId) hash ^= GuildId.GetHashCode();
          if (HasEventId) hash ^= EventId.GetHashCode();
          hash ^= contracts_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasGuildId) {
            output.WriteRawTag(16);
            output.WriteUInt32(GuildId);
          }
          if (HasEventId) {
            output.WriteRawTag(24);
            output.WriteEnum((int) EventId);
          }
          contracts_.WriteTo(output, _repeated_contracts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasGuildId) {
            output.WriteRawTag(16);
            output.WriteUInt32(GuildId);
          }
          if (HasEventId) {
            output.WriteRawTag(24);
            output.WriteEnum((int) EventId);
          }
          contracts_.WriteTo(ref output, _repeated_contracts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasGuildId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildId);
          }
          if (HasEventId) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
          }
          size += contracts_.CalculateSize(_repeated_contracts_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasGuildId) {
            GuildId = other.GuildId;
          }
          if (other.HasEventId) {
            EventId = other.EventId;
          }
          contracts_.Add(other.contracts_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                GuildId = input.ReadUInt32();
                break;
              }
              case 24: {
                EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
                break;
              }
              case 34: {
                contracts_.AddEntriesFrom(input, _repeated_contracts_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                GuildId = input.ReadUInt32();
                break;
              }
              case 24: {
                EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
                break;
              }
              case 34: {
                contracts_.AddEntriesFrom(ref input, _repeated_contracts_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgMatchDiretideCandy : pb::IMessage<CMsgMatchDiretideCandy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgMatchDiretideCandy> _parser = new pb::MessageParser<CMsgMatchDiretideCandy>(() => new CMsgMatchDiretideCandy());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgMatchDiretideCandy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchDiretideCandy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchDiretideCandy(CMsgMatchDiretideCandy other) : this() {
      _hasBits0 = other._hasBits0;
      playerCandyData_ = other.playerCandyData_.Clone();
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchDiretideCandy Clone() {
      return new CMsgMatchDiretideCandy(this);
    }

    /// <summary>Field number for the "player_candy_data" field.</summary>
    public const int PlayerCandyDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.PlayerCandy> _repeated_playerCandyData_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.PlayerCandy.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.PlayerCandy> playerCandyData_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.PlayerCandy>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.PlayerCandy> PlayerCandyData {
      get { return playerCandyData_; }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgMatchDiretideCandy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgMatchDiretideCandy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerCandyData_.Equals(other.playerCandyData_)) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerCandyData_.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      playerCandyData_.WriteTo(output, _repeated_playerCandyData_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      playerCandyData_.WriteTo(ref output, _repeated_playerCandyData_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerCandyData_.CalculateSize(_repeated_playerCandyData_codec);
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgMatchDiretideCandy other) {
      if (other == null) {
        return;
      }
      playerCandyData_.Add(other.playerCandyData_);
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerCandyData_.AddEntriesFrom(input, _repeated_playerCandyData_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            playerCandyData_.AddEntriesFrom(ref input, _repeated_playerCandyData_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgMatchDiretideCandy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CandyDetails : pb::IMessage<CandyDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CandyDetails> _parser = new pb::MessageParser<CandyDetails>(() => new CandyDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CandyDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CandyDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CandyDetails(CandyDetails other) : this() {
          _hasBits0 = other._hasBits0;
          amount_ = other.amount_;
          audit_ = other.audit_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CandyDetails Clone() {
          return new CandyDetails(this);
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 1;
        private readonly static uint AmountDefaultValue = 0;

        private uint amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Amount {
          get { if ((_hasBits0 & 1) != 0) { return amount_; } else { return AmountDefaultValue; } }
          set {
            _hasBits0 |= 1;
            amount_ = value;
          }
        }
        /// <summary>Gets whether the "amount" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAmount {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "amount" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAmount() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "audit" field.</summary>
        public const int AuditFieldNumber = 2;
        private readonly static uint AuditDefaultValue = 0;

        private uint audit_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Audit {
          get { if ((_hasBits0 & 2) != 0) { return audit_; } else { return AuditDefaultValue; } }
          set {
            _hasBits0 |= 2;
            audit_ = value;
          }
        }
        /// <summary>Gets whether the "audit" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAudit {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "audit" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAudit() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CandyDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CandyDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Amount != other.Amount) return false;
          if (Audit != other.Audit) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAmount) hash ^= Amount.GetHashCode();
          if (HasAudit) hash ^= Audit.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAmount) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (HasAudit) {
            output.WriteRawTag(16);
            output.WriteUInt32(Audit);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAmount) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (HasAudit) {
            output.WriteRawTag(16);
            output.WriteUInt32(Audit);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAmount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (HasAudit) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Audit);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CandyDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasAmount) {
            Amount = other.Amount;
          }
          if (other.HasAudit) {
            Audit = other.Audit;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 16: {
                Audit = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 16: {
                Audit = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PlayerCandy : pb::IMessage<PlayerCandy>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerCandy> _parser = new pb::MessageParser<PlayerCandy>(() => new PlayerCandy());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerCandy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCandy() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCandy(PlayerCandy other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          candyAmount_ = other.candyAmount_;
          consumesPeriodicResource_ = other.consumesPeriodicResource_;
          candyBreakdown_ = other.candyBreakdown_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCandy Clone() {
          return new PlayerCandy(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "candy_amount" field.</summary>
        public const int CandyAmountFieldNumber = 3;
        private readonly static uint CandyAmountDefaultValue = 0;

        private uint candyAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CandyAmount {
          get { if ((_hasBits0 & 2) != 0) { return candyAmount_; } else { return CandyAmountDefaultValue; } }
          set {
            _hasBits0 |= 2;
            candyAmount_ = value;
          }
        }
        /// <summary>Gets whether the "candy_amount" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCandyAmount {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "candy_amount" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCandyAmount() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "consumes_periodic_resource" field.</summary>
        public const int ConsumesPeriodicResourceFieldNumber = 4;
        private readonly static bool ConsumesPeriodicResourceDefaultValue = false;

        private bool consumesPeriodicResource_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ConsumesPeriodicResource {
          get { if ((_hasBits0 & 4) != 0) { return consumesPeriodicResource_; } else { return ConsumesPeriodicResourceDefaultValue; } }
          set {
            _hasBits0 |= 4;
            consumesPeriodicResource_ = value;
          }
        }
        /// <summary>Gets whether the "consumes_periodic_resource" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasConsumesPeriodicResource {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "consumes_periodic_resource" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearConsumesPeriodicResource() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "candy_breakdown" field.</summary>
        public const int CandyBreakdownFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.CandyDetails> _repeated_candyBreakdown_codec
            = pb::FieldCodec.ForMessage(42, global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.CandyDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.CandyDetails> candyBreakdown_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.CandyDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchDiretideCandy.Types.CandyDetails> CandyBreakdown {
          get { return candyBreakdown_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerCandy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerCandy other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (CandyAmount != other.CandyAmount) return false;
          if (ConsumesPeriodicResource != other.ConsumesPeriodicResource) return false;
          if(!candyBreakdown_.Equals(other.candyBreakdown_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasCandyAmount) hash ^= CandyAmount.GetHashCode();
          if (HasConsumesPeriodicResource) hash ^= ConsumesPeriodicResource.GetHashCode();
          hash ^= candyBreakdown_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasCandyAmount) {
            output.WriteRawTag(24);
            output.WriteUInt32(CandyAmount);
          }
          if (HasConsumesPeriodicResource) {
            output.WriteRawTag(32);
            output.WriteBool(ConsumesPeriodicResource);
          }
          candyBreakdown_.WriteTo(output, _repeated_candyBreakdown_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasCandyAmount) {
            output.WriteRawTag(24);
            output.WriteUInt32(CandyAmount);
          }
          if (HasConsumesPeriodicResource) {
            output.WriteRawTag(32);
            output.WriteBool(ConsumesPeriodicResource);
          }
          candyBreakdown_.WriteTo(ref output, _repeated_candyBreakdown_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasCandyAmount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CandyAmount);
          }
          if (HasConsumesPeriodicResource) {
            size += 1 + 1;
          }
          size += candyBreakdown_.CalculateSize(_repeated_candyBreakdown_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerCandy other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasCandyAmount) {
            CandyAmount = other.CandyAmount;
          }
          if (other.HasConsumesPeriodicResource) {
            ConsumesPeriodicResource = other.ConsumesPeriodicResource;
          }
          candyBreakdown_.Add(other.candyBreakdown_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                CandyAmount = input.ReadUInt32();
                break;
              }
              case 32: {
                ConsumesPeriodicResource = input.ReadBool();
                break;
              }
              case 42: {
                candyBreakdown_.AddEntriesFrom(input, _repeated_candyBreakdown_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                CandyAmount = input.ReadUInt32();
                break;
              }
              case 32: {
                ConsumesPeriodicResource = input.ReadBool();
                break;
              }
              case 42: {
                candyBreakdown_.AddEntriesFrom(ref input, _repeated_candyBreakdown_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGCToServerCheerData : pb::IMessage<CMsgGCToServerCheerData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerCheerData> _parser = new pb::MessageParser<CMsgGCToServerCheerData>(() => new CMsgGCToServerCheerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerCheerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerCheerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerCheerData(CMsgGCToServerCheerData other) : this() {
      cheerTypes_ = other.cheerTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerCheerData Clone() {
      return new CMsgGCToServerCheerData(this);
    }

    /// <summary>Field number for the "cheer_types" field.</summary>
    public const int CheerTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGCToServerCheerData.Types.CheerTypeCount> _repeated_cheerTypes_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGCToServerCheerData.Types.CheerTypeCount.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCToServerCheerData.Types.CheerTypeCount> cheerTypes_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCToServerCheerData.Types.CheerTypeCount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCToServerCheerData.Types.CheerTypeCount> CheerTypes {
      get { return cheerTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerCheerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerCheerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cheerTypes_.Equals(other.cheerTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cheerTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cheerTypes_.WriteTo(output, _repeated_cheerTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cheerTypes_.WriteTo(ref output, _repeated_cheerTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cheerTypes_.CalculateSize(_repeated_cheerTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerCheerData other) {
      if (other == null) {
        return;
      }
      cheerTypes_.Add(other.cheerTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cheerTypes_.AddEntriesFrom(input, _repeated_cheerTypes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cheerTypes_.AddEntriesFrom(ref input, _repeated_cheerTypes_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGCToServerCheerData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CheerTypeCount : pb::IMessage<CheerTypeCount>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CheerTypeCount> _parser = new pb::MessageParser<CheerTypeCount>(() => new CheerTypeCount());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CheerTypeCount> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGCToServerCheerData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheerTypeCount() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheerTypeCount(CheerTypeCount other) : this() {
          _hasBits0 = other._hasBits0;
          cheerType_ = other.cheerType_;
          cheerCount_ = other.cheerCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheerTypeCount Clone() {
          return new CheerTypeCount(this);
        }

        /// <summary>Field number for the "cheer_type" field.</summary>
        public const int CheerTypeFieldNumber = 1;
        private readonly static uint CheerTypeDefaultValue = 0;

        private uint cheerType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CheerType {
          get { if ((_hasBits0 & 1) != 0) { return cheerType_; } else { return CheerTypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            cheerType_ = value;
          }
        }
        /// <summary>Gets whether the "cheer_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCheerType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "cheer_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCheerType() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "cheer_count" field.</summary>
        public const int CheerCountFieldNumber = 2;
        private readonly static uint CheerCountDefaultValue = 0;

        private uint cheerCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CheerCount {
          get { if ((_hasBits0 & 2) != 0) { return cheerCount_; } else { return CheerCountDefaultValue; } }
          set {
            _hasBits0 |= 2;
            cheerCount_ = value;
          }
        }
        /// <summary>Gets whether the "cheer_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCheerCount {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "cheer_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCheerCount() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CheerTypeCount);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CheerTypeCount other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CheerType != other.CheerType) return false;
          if (CheerCount != other.CheerCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCheerType) hash ^= CheerType.GetHashCode();
          if (HasCheerCount) hash ^= CheerCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasCheerType) {
            output.WriteRawTag(8);
            output.WriteUInt32(CheerType);
          }
          if (HasCheerCount) {
            output.WriteRawTag(16);
            output.WriteUInt32(CheerCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasCheerType) {
            output.WriteRawTag(8);
            output.WriteUInt32(CheerType);
          }
          if (HasCheerCount) {
            output.WriteRawTag(16);
            output.WriteUInt32(CheerCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCheerType) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CheerType);
          }
          if (HasCheerCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CheerCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CheerTypeCount other) {
          if (other == null) {
            return;
          }
          if (other.HasCheerType) {
            CheerType = other.CheerType;
          }
          if (other.HasCheerCount) {
            CheerCount = other.CheerCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CheerType = input.ReadUInt32();
                break;
              }
              case 16: {
                CheerCount = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                CheerType = input.ReadUInt32();
                break;
              }
              case 16: {
                CheerCount = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgCheerConfig : pb::IMessage<CMsgCheerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgCheerConfig> _parser = new pb::MessageParser<CMsgCheerConfig>(() => new CMsgCheerConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgCheerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCheerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCheerConfig(CMsgCheerConfig other) : this() {
      _hasBits0 = other._hasBits0;
      cheersEnabled_ = other.cheersEnabled_;
      isValidLeagueId_ = other.isValidLeagueId_;
      windowDuration_ = other.windowDuration_;
      windowBucketCount_ = other.windowBucketCount_;
      crowdLevelPushTime_ = other.crowdLevelPushTime_;
      crowdLevelLow_ = other.crowdLevelLow_;
      crowdLevelMedium_ = other.crowdLevelMedium_;
      crowdLevelHigh_ = other.crowdLevelHigh_;
      cheerScaleStart_ = other.cheerScaleStart_;
      cheerScaleSpeed_ = other.cheerScaleSpeed_;
      cheerScalePushMark_ = other.cheerScalePushMark_;
      cheerScalePullMark_ = other.cheerScalePullMark_;
      cheerScalePctOfMaxCpsClamp_ = other.cheerScalePctOfMaxCpsClamp_;
      cheerScaleDampenerValue_ = other.cheerScaleDampenerValue_;
      cheerScaleDampenerLerpTime_ = other.cheerScaleDampenerLerpTime_;
      cheerFactorBronze_ = other.cheerFactorBronze_;
      cheerFactorSilver_ = other.cheerFactorSilver_;
      cheerFactorGold_ = other.cheerFactorGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCheerConfig Clone() {
      return new CMsgCheerConfig(this);
    }

    /// <summary>Field number for the "cheers_enabled" field.</summary>
    public const int CheersEnabledFieldNumber = 1;
    private readonly static bool CheersEnabledDefaultValue = false;

    private bool cheersEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheersEnabled {
      get { if ((_hasBits0 & 1) != 0) { return cheersEnabled_; } else { return CheersEnabledDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cheersEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "cheers_enabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheersEnabled {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cheers_enabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheersEnabled() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_valid_league_id" field.</summary>
    public const int IsValidLeagueIdFieldNumber = 2;
    private readonly static bool IsValidLeagueIdDefaultValue = false;

    private bool isValidLeagueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValidLeagueId {
      get { if ((_hasBits0 & 2) != 0) { return isValidLeagueId_; } else { return IsValidLeagueIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isValidLeagueId_ = value;
      }
    }
    /// <summary>Gets whether the "is_valid_league_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsValidLeagueId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_valid_league_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsValidLeagueId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "window_duration" field.</summary>
    public const int WindowDurationFieldNumber = 3;
    private readonly static float WindowDurationDefaultValue = 0F;

    private float windowDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WindowDuration {
      get { if ((_hasBits0 & 4) != 0) { return windowDuration_; } else { return WindowDurationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        windowDuration_ = value;
      }
    }
    /// <summary>Gets whether the "window_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWindowDuration {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "window_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWindowDuration() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "window_bucket_count" field.</summary>
    public const int WindowBucketCountFieldNumber = 4;
    private readonly static uint WindowBucketCountDefaultValue = 0;

    private uint windowBucketCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WindowBucketCount {
      get { if ((_hasBits0 & 8) != 0) { return windowBucketCount_; } else { return WindowBucketCountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        windowBucketCount_ = value;
      }
    }
    /// <summary>Gets whether the "window_bucket_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWindowBucketCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "window_bucket_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWindowBucketCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "crowd_level_push_time" field.</summary>
    public const int CrowdLevelPushTimeFieldNumber = 6;
    private readonly static float CrowdLevelPushTimeDefaultValue = 0F;

    private float crowdLevelPushTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrowdLevelPushTime {
      get { if ((_hasBits0 & 16) != 0) { return crowdLevelPushTime_; } else { return CrowdLevelPushTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        crowdLevelPushTime_ = value;
      }
    }
    /// <summary>Gets whether the "crowd_level_push_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCrowdLevelPushTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "crowd_level_push_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCrowdLevelPushTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "crowd_level_low" field.</summary>
    public const int CrowdLevelLowFieldNumber = 10;
    private readonly static uint CrowdLevelLowDefaultValue = 0;

    private uint crowdLevelLow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CrowdLevelLow {
      get { if ((_hasBits0 & 32) != 0) { return crowdLevelLow_; } else { return CrowdLevelLowDefaultValue; } }
      set {
        _hasBits0 |= 32;
        crowdLevelLow_ = value;
      }
    }
    /// <summary>Gets whether the "crowd_level_low" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCrowdLevelLow {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "crowd_level_low" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCrowdLevelLow() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "crowd_level_medium" field.</summary>
    public const int CrowdLevelMediumFieldNumber = 11;
    private readonly static uint CrowdLevelMediumDefaultValue = 0;

    private uint crowdLevelMedium_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CrowdLevelMedium {
      get { if ((_hasBits0 & 64) != 0) { return crowdLevelMedium_; } else { return CrowdLevelMediumDefaultValue; } }
      set {
        _hasBits0 |= 64;
        crowdLevelMedium_ = value;
      }
    }
    /// <summary>Gets whether the "crowd_level_medium" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCrowdLevelMedium {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "crowd_level_medium" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCrowdLevelMedium() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "crowd_level_high" field.</summary>
    public const int CrowdLevelHighFieldNumber = 12;
    private readonly static uint CrowdLevelHighDefaultValue = 0;

    private uint crowdLevelHigh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CrowdLevelHigh {
      get { if ((_hasBits0 & 128) != 0) { return crowdLevelHigh_; } else { return CrowdLevelHighDefaultValue; } }
      set {
        _hasBits0 |= 128;
        crowdLevelHigh_ = value;
      }
    }
    /// <summary>Gets whether the "crowd_level_high" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCrowdLevelHigh {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "crowd_level_high" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCrowdLevelHigh() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "cheer_scale_start" field.</summary>
    public const int CheerScaleStartFieldNumber = 13;
    private readonly static float CheerScaleStartDefaultValue = 0F;

    private float cheerScaleStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheerScaleStart {
      get { if ((_hasBits0 & 256) != 0) { return cheerScaleStart_; } else { return CheerScaleStartDefaultValue; } }
      set {
        _hasBits0 |= 256;
        cheerScaleStart_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_scale_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerScaleStart {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "cheer_scale_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerScaleStart() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "cheer_scale_speed" field.</summary>
    public const int CheerScaleSpeedFieldNumber = 14;
    private readonly static float CheerScaleSpeedDefaultValue = 0F;

    private float cheerScaleSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheerScaleSpeed {
      get { if ((_hasBits0 & 512) != 0) { return cheerScaleSpeed_; } else { return CheerScaleSpeedDefaultValue; } }
      set {
        _hasBits0 |= 512;
        cheerScaleSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_scale_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerScaleSpeed {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "cheer_scale_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerScaleSpeed() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "cheer_scale_push_mark" field.</summary>
    public const int CheerScalePushMarkFieldNumber = 15;
    private readonly static uint CheerScalePushMarkDefaultValue = 0;

    private uint cheerScalePushMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CheerScalePushMark {
      get { if ((_hasBits0 & 1024) != 0) { return cheerScalePushMark_; } else { return CheerScalePushMarkDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        cheerScalePushMark_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_scale_push_mark" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerScalePushMark {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "cheer_scale_push_mark" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerScalePushMark() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "cheer_scale_pull_mark" field.</summary>
    public const int CheerScalePullMarkFieldNumber = 16;
    private readonly static uint CheerScalePullMarkDefaultValue = 0;

    private uint cheerScalePullMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CheerScalePullMark {
      get { if ((_hasBits0 & 2048) != 0) { return cheerScalePullMark_; } else { return CheerScalePullMarkDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        cheerScalePullMark_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_scale_pull_mark" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerScalePullMark {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "cheer_scale_pull_mark" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerScalePullMark() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "cheer_scale_pct_of_max_cps_clamp" field.</summary>
    public const int CheerScalePctOfMaxCpsClampFieldNumber = 17;
    private readonly static float CheerScalePctOfMaxCpsClampDefaultValue = 0F;

    private float cheerScalePctOfMaxCpsClamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheerScalePctOfMaxCpsClamp {
      get { if ((_hasBits0 & 4096) != 0) { return cheerScalePctOfMaxCpsClamp_; } else { return CheerScalePctOfMaxCpsClampDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        cheerScalePctOfMaxCpsClamp_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_scale_pct_of_max_cps_clamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerScalePctOfMaxCpsClamp {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "cheer_scale_pct_of_max_cps_clamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerScalePctOfMaxCpsClamp() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "cheer_scale_dampener_value" field.</summary>
    public const int CheerScaleDampenerValueFieldNumber = 21;
    private readonly static float CheerScaleDampenerValueDefaultValue = 0F;

    private float cheerScaleDampenerValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheerScaleDampenerValue {
      get { if ((_hasBits0 & 65536) != 0) { return cheerScaleDampenerValue_; } else { return CheerScaleDampenerValueDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        cheerScaleDampenerValue_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_scale_dampener_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerScaleDampenerValue {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "cheer_scale_dampener_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerScaleDampenerValue() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "cheer_scale_dampener_lerp_time" field.</summary>
    public const int CheerScaleDampenerLerpTimeFieldNumber = 22;
    private readonly static uint CheerScaleDampenerLerpTimeDefaultValue = 0;

    private uint cheerScaleDampenerLerpTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CheerScaleDampenerLerpTime {
      get { if ((_hasBits0 & 131072) != 0) { return cheerScaleDampenerLerpTime_; } else { return CheerScaleDampenerLerpTimeDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        cheerScaleDampenerLerpTime_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_scale_dampener_lerp_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerScaleDampenerLerpTime {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "cheer_scale_dampener_lerp_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerScaleDampenerLerpTime() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "cheer_factor_bronze" field.</summary>
    public const int CheerFactorBronzeFieldNumber = 18;
    private readonly static float CheerFactorBronzeDefaultValue = 0F;

    private float cheerFactorBronze_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheerFactorBronze {
      get { if ((_hasBits0 & 8192) != 0) { return cheerFactorBronze_; } else { return CheerFactorBronzeDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        cheerFactorBronze_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_factor_bronze" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerFactorBronze {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "cheer_factor_bronze" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerFactorBronze() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "cheer_factor_silver" field.</summary>
    public const int CheerFactorSilverFieldNumber = 19;
    private readonly static float CheerFactorSilverDefaultValue = 0F;

    private float cheerFactorSilver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheerFactorSilver {
      get { if ((_hasBits0 & 16384) != 0) { return cheerFactorSilver_; } else { return CheerFactorSilverDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        cheerFactorSilver_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_factor_silver" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerFactorSilver {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "cheer_factor_silver" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerFactorSilver() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "cheer_factor_gold" field.</summary>
    public const int CheerFactorGoldFieldNumber = 20;
    private readonly static float CheerFactorGoldDefaultValue = 0F;

    private float cheerFactorGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheerFactorGold {
      get { if ((_hasBits0 & 32768) != 0) { return cheerFactorGold_; } else { return CheerFactorGoldDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        cheerFactorGold_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_factor_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerFactorGold {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "cheer_factor_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerFactorGold() {
      _hasBits0 &= ~32768;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgCheerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgCheerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CheersEnabled != other.CheersEnabled) return false;
      if (IsValidLeagueId != other.IsValidLeagueId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WindowDuration, other.WindowDuration)) return false;
      if (WindowBucketCount != other.WindowBucketCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrowdLevelPushTime, other.CrowdLevelPushTime)) return false;
      if (CrowdLevelLow != other.CrowdLevelLow) return false;
      if (CrowdLevelMedium != other.CrowdLevelMedium) return false;
      if (CrowdLevelHigh != other.CrowdLevelHigh) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheerScaleStart, other.CheerScaleStart)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheerScaleSpeed, other.CheerScaleSpeed)) return false;
      if (CheerScalePushMark != other.CheerScalePushMark) return false;
      if (CheerScalePullMark != other.CheerScalePullMark) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheerScalePctOfMaxCpsClamp, other.CheerScalePctOfMaxCpsClamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheerScaleDampenerValue, other.CheerScaleDampenerValue)) return false;
      if (CheerScaleDampenerLerpTime != other.CheerScaleDampenerLerpTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheerFactorBronze, other.CheerFactorBronze)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheerFactorSilver, other.CheerFactorSilver)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheerFactorGold, other.CheerFactorGold)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCheersEnabled) hash ^= CheersEnabled.GetHashCode();
      if (HasIsValidLeagueId) hash ^= IsValidLeagueId.GetHashCode();
      if (HasWindowDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WindowDuration);
      if (HasWindowBucketCount) hash ^= WindowBucketCount.GetHashCode();
      if (HasCrowdLevelPushTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrowdLevelPushTime);
      if (HasCrowdLevelLow) hash ^= CrowdLevelLow.GetHashCode();
      if (HasCrowdLevelMedium) hash ^= CrowdLevelMedium.GetHashCode();
      if (HasCrowdLevelHigh) hash ^= CrowdLevelHigh.GetHashCode();
      if (HasCheerScaleStart) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheerScaleStart);
      if (HasCheerScaleSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheerScaleSpeed);
      if (HasCheerScalePushMark) hash ^= CheerScalePushMark.GetHashCode();
      if (HasCheerScalePullMark) hash ^= CheerScalePullMark.GetHashCode();
      if (HasCheerScalePctOfMaxCpsClamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheerScalePctOfMaxCpsClamp);
      if (HasCheerScaleDampenerValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheerScaleDampenerValue);
      if (HasCheerScaleDampenerLerpTime) hash ^= CheerScaleDampenerLerpTime.GetHashCode();
      if (HasCheerFactorBronze) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheerFactorBronze);
      if (HasCheerFactorSilver) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheerFactorSilver);
      if (HasCheerFactorGold) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheerFactorGold);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCheersEnabled) {
        output.WriteRawTag(8);
        output.WriteBool(CheersEnabled);
      }
      if (HasIsValidLeagueId) {
        output.WriteRawTag(16);
        output.WriteBool(IsValidLeagueId);
      }
      if (HasWindowDuration) {
        output.WriteRawTag(29);
        output.WriteFloat(WindowDuration);
      }
      if (HasWindowBucketCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(WindowBucketCount);
      }
      if (HasCrowdLevelPushTime) {
        output.WriteRawTag(53);
        output.WriteFloat(CrowdLevelPushTime);
      }
      if (HasCrowdLevelLow) {
        output.WriteRawTag(80);
        output.WriteUInt32(CrowdLevelLow);
      }
      if (HasCrowdLevelMedium) {
        output.WriteRawTag(88);
        output.WriteUInt32(CrowdLevelMedium);
      }
      if (HasCrowdLevelHigh) {
        output.WriteRawTag(96);
        output.WriteUInt32(CrowdLevelHigh);
      }
      if (HasCheerScaleStart) {
        output.WriteRawTag(109);
        output.WriteFloat(CheerScaleStart);
      }
      if (HasCheerScaleSpeed) {
        output.WriteRawTag(117);
        output.WriteFloat(CheerScaleSpeed);
      }
      if (HasCheerScalePushMark) {
        output.WriteRawTag(120);
        output.WriteUInt32(CheerScalePushMark);
      }
      if (HasCheerScalePullMark) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(CheerScalePullMark);
      }
      if (HasCheerScalePctOfMaxCpsClamp) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(CheerScalePctOfMaxCpsClamp);
      }
      if (HasCheerFactorBronze) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(CheerFactorBronze);
      }
      if (HasCheerFactorSilver) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(CheerFactorSilver);
      }
      if (HasCheerFactorGold) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CheerFactorGold);
      }
      if (HasCheerScaleDampenerValue) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(CheerScaleDampenerValue);
      }
      if (HasCheerScaleDampenerLerpTime) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(CheerScaleDampenerLerpTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCheersEnabled) {
        output.WriteRawTag(8);
        output.WriteBool(CheersEnabled);
      }
      if (HasIsValidLeagueId) {
        output.WriteRawTag(16);
        output.WriteBool(IsValidLeagueId);
      }
      if (HasWindowDuration) {
        output.WriteRawTag(29);
        output.WriteFloat(WindowDuration);
      }
      if (HasWindowBucketCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(WindowBucketCount);
      }
      if (HasCrowdLevelPushTime) {
        output.WriteRawTag(53);
        output.WriteFloat(CrowdLevelPushTime);
      }
      if (HasCrowdLevelLow) {
        output.WriteRawTag(80);
        output.WriteUInt32(CrowdLevelLow);
      }
      if (HasCrowdLevelMedium) {
        output.WriteRawTag(88);
        output.WriteUInt32(CrowdLevelMedium);
      }
      if (HasCrowdLevelHigh) {
        output.WriteRawTag(96);
        output.WriteUInt32(CrowdLevelHigh);
      }
      if (HasCheerScaleStart) {
        output.WriteRawTag(109);
        output.WriteFloat(CheerScaleStart);
      }
      if (HasCheerScaleSpeed) {
        output.WriteRawTag(117);
        output.WriteFloat(CheerScaleSpeed);
      }
      if (HasCheerScalePushMark) {
        output.WriteRawTag(120);
        output.WriteUInt32(CheerScalePushMark);
      }
      if (HasCheerScalePullMark) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(CheerScalePullMark);
      }
      if (HasCheerScalePctOfMaxCpsClamp) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(CheerScalePctOfMaxCpsClamp);
      }
      if (HasCheerFactorBronze) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(CheerFactorBronze);
      }
      if (HasCheerFactorSilver) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(CheerFactorSilver);
      }
      if (HasCheerFactorGold) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CheerFactorGold);
      }
      if (HasCheerScaleDampenerValue) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(CheerScaleDampenerValue);
      }
      if (HasCheerScaleDampenerLerpTime) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(CheerScaleDampenerLerpTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCheersEnabled) {
        size += 1 + 1;
      }
      if (HasIsValidLeagueId) {
        size += 1 + 1;
      }
      if (HasWindowDuration) {
        size += 1 + 4;
      }
      if (HasWindowBucketCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WindowBucketCount);
      }
      if (HasCrowdLevelPushTime) {
        size += 1 + 4;
      }
      if (HasCrowdLevelLow) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CrowdLevelLow);
      }
      if (HasCrowdLevelMedium) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CrowdLevelMedium);
      }
      if (HasCrowdLevelHigh) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CrowdLevelHigh);
      }
      if (HasCheerScaleStart) {
        size += 1 + 4;
      }
      if (HasCheerScaleSpeed) {
        size += 1 + 4;
      }
      if (HasCheerScalePushMark) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CheerScalePushMark);
      }
      if (HasCheerScalePullMark) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CheerScalePullMark);
      }
      if (HasCheerScalePctOfMaxCpsClamp) {
        size += 2 + 4;
      }
      if (HasCheerScaleDampenerValue) {
        size += 2 + 4;
      }
      if (HasCheerScaleDampenerLerpTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CheerScaleDampenerLerpTime);
      }
      if (HasCheerFactorBronze) {
        size += 2 + 4;
      }
      if (HasCheerFactorSilver) {
        size += 2 + 4;
      }
      if (HasCheerFactorGold) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgCheerConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasCheersEnabled) {
        CheersEnabled = other.CheersEnabled;
      }
      if (other.HasIsValidLeagueId) {
        IsValidLeagueId = other.IsValidLeagueId;
      }
      if (other.HasWindowDuration) {
        WindowDuration = other.WindowDuration;
      }
      if (other.HasWindowBucketCount) {
        WindowBucketCount = other.WindowBucketCount;
      }
      if (other.HasCrowdLevelPushTime) {
        CrowdLevelPushTime = other.CrowdLevelPushTime;
      }
      if (other.HasCrowdLevelLow) {
        CrowdLevelLow = other.CrowdLevelLow;
      }
      if (other.HasCrowdLevelMedium) {
        CrowdLevelMedium = other.CrowdLevelMedium;
      }
      if (other.HasCrowdLevelHigh) {
        CrowdLevelHigh = other.CrowdLevelHigh;
      }
      if (other.HasCheerScaleStart) {
        CheerScaleStart = other.CheerScaleStart;
      }
      if (other.HasCheerScaleSpeed) {
        CheerScaleSpeed = other.CheerScaleSpeed;
      }
      if (other.HasCheerScalePushMark) {
        CheerScalePushMark = other.CheerScalePushMark;
      }
      if (other.HasCheerScalePullMark) {
        CheerScalePullMark = other.CheerScalePullMark;
      }
      if (other.HasCheerScalePctOfMaxCpsClamp) {
        CheerScalePctOfMaxCpsClamp = other.CheerScalePctOfMaxCpsClamp;
      }
      if (other.HasCheerScaleDampenerValue) {
        CheerScaleDampenerValue = other.CheerScaleDampenerValue;
      }
      if (other.HasCheerScaleDampenerLerpTime) {
        CheerScaleDampenerLerpTime = other.CheerScaleDampenerLerpTime;
      }
      if (other.HasCheerFactorBronze) {
        CheerFactorBronze = other.CheerFactorBronze;
      }
      if (other.HasCheerFactorSilver) {
        CheerFactorSilver = other.CheerFactorSilver;
      }
      if (other.HasCheerFactorGold) {
        CheerFactorGold = other.CheerFactorGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CheersEnabled = input.ReadBool();
            break;
          }
          case 16: {
            IsValidLeagueId = input.ReadBool();
            break;
          }
          case 29: {
            WindowDuration = input.ReadFloat();
            break;
          }
          case 32: {
            WindowBucketCount = input.ReadUInt32();
            break;
          }
          case 53: {
            CrowdLevelPushTime = input.ReadFloat();
            break;
          }
          case 80: {
            CrowdLevelLow = input.ReadUInt32();
            break;
          }
          case 88: {
            CrowdLevelMedium = input.ReadUInt32();
            break;
          }
          case 96: {
            CrowdLevelHigh = input.ReadUInt32();
            break;
          }
          case 109: {
            CheerScaleStart = input.ReadFloat();
            break;
          }
          case 117: {
            CheerScaleSpeed = input.ReadFloat();
            break;
          }
          case 120: {
            CheerScalePushMark = input.ReadUInt32();
            break;
          }
          case 128: {
            CheerScalePullMark = input.ReadUInt32();
            break;
          }
          case 141: {
            CheerScalePctOfMaxCpsClamp = input.ReadFloat();
            break;
          }
          case 149: {
            CheerFactorBronze = input.ReadFloat();
            break;
          }
          case 157: {
            CheerFactorSilver = input.ReadFloat();
            break;
          }
          case 165: {
            CheerFactorGold = input.ReadFloat();
            break;
          }
          case 173: {
            CheerScaleDampenerValue = input.ReadFloat();
            break;
          }
          case 176: {
            CheerScaleDampenerLerpTime = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CheersEnabled = input.ReadBool();
            break;
          }
          case 16: {
            IsValidLeagueId = input.ReadBool();
            break;
          }
          case 29: {
            WindowDuration = input.ReadFloat();
            break;
          }
          case 32: {
            WindowBucketCount = input.ReadUInt32();
            break;
          }
          case 53: {
            CrowdLevelPushTime = input.ReadFloat();
            break;
          }
          case 80: {
            CrowdLevelLow = input.ReadUInt32();
            break;
          }
          case 88: {
            CrowdLevelMedium = input.ReadUInt32();
            break;
          }
          case 96: {
            CrowdLevelHigh = input.ReadUInt32();
            break;
          }
          case 109: {
            CheerScaleStart = input.ReadFloat();
            break;
          }
          case 117: {
            CheerScaleSpeed = input.ReadFloat();
            break;
          }
          case 120: {
            CheerScalePushMark = input.ReadUInt32();
            break;
          }
          case 128: {
            CheerScalePullMark = input.ReadUInt32();
            break;
          }
          case 141: {
            CheerScalePctOfMaxCpsClamp = input.ReadFloat();
            break;
          }
          case 149: {
            CheerFactorBronze = input.ReadFloat();
            break;
          }
          case 157: {
            CheerFactorSilver = input.ReadFloat();
            break;
          }
          case 165: {
            CheerFactorGold = input.ReadFloat();
            break;
          }
          case 173: {
            CheerScaleDampenerValue = input.ReadFloat();
            break;
          }
          case 176: {
            CheerScaleDampenerLerpTime = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToServerCheerConfig : pb::IMessage<CMsgGCToServerCheerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerCheerConfig> _parser = new pb::MessageParser<CMsgGCToServerCheerConfig>(() => new CMsgGCToServerCheerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerCheerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerCheerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerCheerConfig(CMsgGCToServerCheerConfig other) : this() {
      cheerConfig_ = other.cheerConfig_ != null ? other.cheerConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerCheerConfig Clone() {
      return new CMsgGCToServerCheerConfig(this);
    }

    /// <summary>Field number for the "cheer_config" field.</summary>
    public const int CheerConfigFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgCheerConfig cheerConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgCheerConfig CheerConfig {
      get { return cheerConfig_; }
      set {
        cheerConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerCheerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerCheerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CheerConfig, other.CheerConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cheerConfig_ != null) hash ^= CheerConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cheerConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CheerConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cheerConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CheerConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cheerConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheerConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerCheerConfig other) {
      if (other == null) {
        return;
      }
      if (other.cheerConfig_ != null) {
        if (cheerConfig_ == null) {
          CheerConfig = new global::Steam.Protos.Dota2.CMsgCheerConfig();
        }
        CheerConfig.MergeFrom(other.CheerConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cheerConfig_ == null) {
              CheerConfig = new global::Steam.Protos.Dota2.CMsgCheerConfig();
            }
            input.ReadMessage(CheerConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cheerConfig_ == null) {
              CheerConfig = new global::Steam.Protos.Dota2.CMsgCheerConfig();
            }
            input.ReadMessage(CheerConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCGetCheerConfig : pb::IMessage<CMsgServerToGCGetCheerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCGetCheerConfig> _parser = new pb::MessageParser<CMsgServerToGCGetCheerConfig>(() => new CMsgServerToGCGetCheerConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCGetCheerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetCheerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetCheerConfig(CMsgServerToGCGetCheerConfig other) : this() {
      _hasBits0 = other._hasBits0;
      leagueId_ = other.leagueId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetCheerConfig Clone() {
      return new CMsgServerToGCGetCheerConfig(this);
    }

    /// <summary>Field number for the "league_id" field.</summary>
    public const int LeagueIdFieldNumber = 1;
    private readonly static uint LeagueIdDefaultValue = 0;

    private uint leagueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeagueId {
      get { if ((_hasBits0 & 1) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueId_ = value;
      }
    }
    /// <summary>Gets whether the "league_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "league_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCGetCheerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCGetCheerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeagueId != other.LeagueId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueId) hash ^= LeagueId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueId) {
        output.WriteRawTag(8);
        output.WriteUInt32(LeagueId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueId) {
        output.WriteRawTag(8);
        output.WriteUInt32(LeagueId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCGetCheerConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueId) {
        LeagueId = other.LeagueId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeagueId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LeagueId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCGetCheerConfigResponse : pb::IMessage<CMsgServerToGCGetCheerConfigResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCGetCheerConfigResponse> _parser = new pb::MessageParser<CMsgServerToGCGetCheerConfigResponse>(() => new CMsgServerToGCGetCheerConfigResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCGetCheerConfigResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetCheerConfigResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetCheerConfigResponse(CMsgServerToGCGetCheerConfigResponse other) : this() {
      cheerConfig_ = other.cheerConfig_ != null ? other.cheerConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetCheerConfigResponse Clone() {
      return new CMsgServerToGCGetCheerConfigResponse(this);
    }

    /// <summary>Field number for the "cheer_config" field.</summary>
    public const int CheerConfigFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgCheerConfig cheerConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgCheerConfig CheerConfig {
      get { return cheerConfig_; }
      set {
        cheerConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCGetCheerConfigResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCGetCheerConfigResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CheerConfig, other.CheerConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cheerConfig_ != null) hash ^= CheerConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cheerConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CheerConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cheerConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CheerConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cheerConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheerConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCGetCheerConfigResponse other) {
      if (other == null) {
        return;
      }
      if (other.cheerConfig_ != null) {
        if (cheerConfig_ == null) {
          CheerConfig = new global::Steam.Protos.Dota2.CMsgCheerConfig();
        }
        CheerConfig.MergeFrom(other.CheerConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (cheerConfig_ == null) {
              CheerConfig = new global::Steam.Protos.Dota2.CMsgCheerConfig();
            }
            input.ReadMessage(CheerConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (cheerConfig_ == null) {
              CheerConfig = new global::Steam.Protos.Dota2.CMsgCheerConfig();
            }
            input.ReadMessage(CheerConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToServerCheerScalesOverride : pb::IMessage<CMsgGCToServerCheerScalesOverride>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerCheerScalesOverride> _parser = new pb::MessageParser<CMsgGCToServerCheerScalesOverride>(() => new CMsgGCToServerCheerScalesOverride());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerCheerScalesOverride> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerCheerScalesOverride() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerCheerScalesOverride(CMsgGCToServerCheerScalesOverride other) : this() {
      scales_ = other.scales_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerCheerScalesOverride Clone() {
      return new CMsgGCToServerCheerScalesOverride(this);
    }

    /// <summary>Field number for the "scales" field.</summary>
    public const int ScalesFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_scales_codec
        = pb::FieldCodec.ForFloat(13);
    private readonly pbc::RepeatedField<float> scales_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Scales {
      get { return scales_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerCheerScalesOverride);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerCheerScalesOverride other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!scales_.Equals(other.scales_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= scales_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      scales_.WriteTo(output, _repeated_scales_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      scales_.WriteTo(ref output, _repeated_scales_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += scales_.CalculateSize(_repeated_scales_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerCheerScalesOverride other) {
      if (other == null) {
        return;
      }
      scales_.Add(other.scales_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            scales_.AddEntriesFrom(input, _repeated_scales_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 13: {
            scales_.AddEntriesFrom(ref input, _repeated_scales_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToServerGetCheerState : pb::IMessage<CMsgGCToServerGetCheerState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerGetCheerState> _parser = new pb::MessageParser<CMsgGCToServerGetCheerState>(() => new CMsgGCToServerGetCheerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerGetCheerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerGetCheerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerGetCheerState(CMsgGCToServerGetCheerState other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerGetCheerState Clone() {
      return new CMsgGCToServerGetCheerState(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerGetCheerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerGetCheerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerGetCheerState other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgCheerTypeState : pb::IMessage<CMsgCheerTypeState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgCheerTypeState> _parser = new pb::MessageParser<CMsgCheerTypeState>(() => new CMsgCheerTypeState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgCheerTypeState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCheerTypeState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCheerTypeState(CMsgCheerTypeState other) : this() {
      _hasBits0 = other._hasBits0;
      cheerCounts_ = other.cheerCounts_.Clone();
      maxPerSecond_ = other.maxPerSecond_;
      cheerScale_ = other.cheerScale_;
      overrideScale_ = other.overrideScale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCheerTypeState Clone() {
      return new CMsgCheerTypeState(this);
    }

    /// <summary>Field number for the "cheer_counts" field.</summary>
    public const int CheerCountsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_cheerCounts_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> cheerCounts_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CheerCounts {
      get { return cheerCounts_; }
    }

    /// <summary>Field number for the "max_per_second" field.</summary>
    public const int MaxPerSecondFieldNumber = 2;
    private readonly static float MaxPerSecondDefaultValue = 0F;

    private float maxPerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxPerSecond {
      get { if ((_hasBits0 & 1) != 0) { return maxPerSecond_; } else { return MaxPerSecondDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maxPerSecond_ = value;
      }
    }
    /// <summary>Gets whether the "max_per_second" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxPerSecond {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "max_per_second" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxPerSecond() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cheer_scale" field.</summary>
    public const int CheerScaleFieldNumber = 3;
    private readonly static float CheerScaleDefaultValue = 0F;

    private float cheerScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheerScale {
      get { if ((_hasBits0 & 2) != 0) { return cheerScale_; } else { return CheerScaleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cheerScale_ = value;
      }
    }
    /// <summary>Gets whether the "cheer_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheerScale {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cheer_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheerScale() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "override_scale" field.</summary>
    public const int OverrideScaleFieldNumber = 4;
    private readonly static float OverrideScaleDefaultValue = 0F;

    private float overrideScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OverrideScale {
      get { if ((_hasBits0 & 4) != 0) { return overrideScale_; } else { return OverrideScaleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        overrideScale_ = value;
      }
    }
    /// <summary>Gets whether the "override_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverrideScale {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "override_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverrideScale() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgCheerTypeState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgCheerTypeState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cheerCounts_.Equals(other.cheerCounts_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxPerSecond, other.MaxPerSecond)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheerScale, other.CheerScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OverrideScale, other.OverrideScale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cheerCounts_.GetHashCode();
      if (HasMaxPerSecond) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxPerSecond);
      if (HasCheerScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheerScale);
      if (HasOverrideScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OverrideScale);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cheerCounts_.WriteTo(output, _repeated_cheerCounts_codec);
      if (HasMaxPerSecond) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxPerSecond);
      }
      if (HasCheerScale) {
        output.WriteRawTag(29);
        output.WriteFloat(CheerScale);
      }
      if (HasOverrideScale) {
        output.WriteRawTag(37);
        output.WriteFloat(OverrideScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cheerCounts_.WriteTo(ref output, _repeated_cheerCounts_codec);
      if (HasMaxPerSecond) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxPerSecond);
      }
      if (HasCheerScale) {
        output.WriteRawTag(29);
        output.WriteFloat(CheerScale);
      }
      if (HasOverrideScale) {
        output.WriteRawTag(37);
        output.WriteFloat(OverrideScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cheerCounts_.CalculateSize(_repeated_cheerCounts_codec);
      if (HasMaxPerSecond) {
        size += 1 + 4;
      }
      if (HasCheerScale) {
        size += 1 + 4;
      }
      if (HasOverrideScale) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgCheerTypeState other) {
      if (other == null) {
        return;
      }
      cheerCounts_.Add(other.cheerCounts_);
      if (other.HasMaxPerSecond) {
        MaxPerSecond = other.MaxPerSecond;
      }
      if (other.HasCheerScale) {
        CheerScale = other.CheerScale;
      }
      if (other.HasOverrideScale) {
        OverrideScale = other.OverrideScale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cheerCounts_.AddEntriesFrom(input, _repeated_cheerCounts_codec);
            break;
          }
          case 21: {
            MaxPerSecond = input.ReadFloat();
            break;
          }
          case 29: {
            CheerScale = input.ReadFloat();
            break;
          }
          case 37: {
            OverrideScale = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            cheerCounts_.AddEntriesFrom(ref input, _repeated_cheerCounts_codec);
            break;
          }
          case 21: {
            MaxPerSecond = input.ReadFloat();
            break;
          }
          case 29: {
            CheerScale = input.ReadFloat();
            break;
          }
          case 37: {
            OverrideScale = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgCheerState : pb::IMessage<CMsgCheerState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgCheerState> _parser = new pb::MessageParser<CMsgCheerState>(() => new CMsgCheerState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgCheerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCheerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCheerState(CMsgCheerState other) : this() {
      _hasBits0 = other._hasBits0;
      cheerTypes_ = other.cheerTypes_.Clone();
      radiantCrowdLevel_ = other.radiantCrowdLevel_;
      direCrowdLevel_ = other.direCrowdLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCheerState Clone() {
      return new CMsgCheerState(this);
    }

    /// <summary>Field number for the "cheer_types" field.</summary>
    public const int CheerTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgCheerTypeState> _repeated_cheerTypes_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgCheerTypeState.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgCheerTypeState> cheerTypes_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgCheerTypeState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgCheerTypeState> CheerTypes {
      get { return cheerTypes_; }
    }

    /// <summary>Field number for the "radiant_crowd_level" field.</summary>
    public const int RadiantCrowdLevelFieldNumber = 2;
    private readonly static uint RadiantCrowdLevelDefaultValue = 0;

    private uint radiantCrowdLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantCrowdLevel {
      get { if ((_hasBits0 & 1) != 0) { return radiantCrowdLevel_; } else { return RadiantCrowdLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        radiantCrowdLevel_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_crowd_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantCrowdLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "radiant_crowd_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantCrowdLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "dire_crowd_level" field.</summary>
    public const int DireCrowdLevelFieldNumber = 3;
    private readonly static uint DireCrowdLevelDefaultValue = 0;

    private uint direCrowdLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireCrowdLevel {
      get { if ((_hasBits0 & 2) != 0) { return direCrowdLevel_; } else { return DireCrowdLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        direCrowdLevel_ = value;
      }
    }
    /// <summary>Gets whether the "dire_crowd_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireCrowdLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "dire_crowd_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireCrowdLevel() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgCheerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgCheerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cheerTypes_.Equals(other.cheerTypes_)) return false;
      if (RadiantCrowdLevel != other.RadiantCrowdLevel) return false;
      if (DireCrowdLevel != other.DireCrowdLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cheerTypes_.GetHashCode();
      if (HasRadiantCrowdLevel) hash ^= RadiantCrowdLevel.GetHashCode();
      if (HasDireCrowdLevel) hash ^= DireCrowdLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cheerTypes_.WriteTo(output, _repeated_cheerTypes_codec);
      if (HasRadiantCrowdLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(RadiantCrowdLevel);
      }
      if (HasDireCrowdLevel) {
        output.WriteRawTag(24);
        output.WriteUInt32(DireCrowdLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cheerTypes_.WriteTo(ref output, _repeated_cheerTypes_codec);
      if (HasRadiantCrowdLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(RadiantCrowdLevel);
      }
      if (HasDireCrowdLevel) {
        output.WriteRawTag(24);
        output.WriteUInt32(DireCrowdLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cheerTypes_.CalculateSize(_repeated_cheerTypes_codec);
      if (HasRadiantCrowdLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RadiantCrowdLevel);
      }
      if (HasDireCrowdLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DireCrowdLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgCheerState other) {
      if (other == null) {
        return;
      }
      cheerTypes_.Add(other.cheerTypes_);
      if (other.HasRadiantCrowdLevel) {
        RadiantCrowdLevel = other.RadiantCrowdLevel;
      }
      if (other.HasDireCrowdLevel) {
        DireCrowdLevel = other.DireCrowdLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cheerTypes_.AddEntriesFrom(input, _repeated_cheerTypes_codec);
            break;
          }
          case 16: {
            RadiantCrowdLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            DireCrowdLevel = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cheerTypes_.AddEntriesFrom(ref input, _repeated_cheerTypes_codec);
            break;
          }
          case 16: {
            RadiantCrowdLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            DireCrowdLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCReportCheerState : pb::IMessage<CMsgServerToGCReportCheerState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCReportCheerState> _parser = new pb::MessageParser<CMsgServerToGCReportCheerState>(() => new CMsgServerToGCReportCheerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCReportCheerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCReportCheerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCReportCheerState(CMsgServerToGCReportCheerState other) : this() {
      cheerConfig_ = other.cheerConfig_ != null ? other.cheerConfig_.Clone() : null;
      cheerState_ = other.cheerState_ != null ? other.cheerState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCReportCheerState Clone() {
      return new CMsgServerToGCReportCheerState(this);
    }

    /// <summary>Field number for the "cheer_config" field.</summary>
    public const int CheerConfigFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgCheerConfig cheerConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgCheerConfig CheerConfig {
      get { return cheerConfig_; }
      set {
        cheerConfig_ = value;
      }
    }

    /// <summary>Field number for the "cheer_state" field.</summary>
    public const int CheerStateFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgCheerState cheerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgCheerState CheerState {
      get { return cheerState_; }
      set {
        cheerState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCReportCheerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCReportCheerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CheerConfig, other.CheerConfig)) return false;
      if (!object.Equals(CheerState, other.CheerState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cheerConfig_ != null) hash ^= CheerConfig.GetHashCode();
      if (cheerState_ != null) hash ^= CheerState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cheerConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CheerConfig);
      }
      if (cheerState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CheerState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cheerConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CheerConfig);
      }
      if (cheerState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CheerState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cheerConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheerConfig);
      }
      if (cheerState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheerState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCReportCheerState other) {
      if (other == null) {
        return;
      }
      if (other.cheerConfig_ != null) {
        if (cheerConfig_ == null) {
          CheerConfig = new global::Steam.Protos.Dota2.CMsgCheerConfig();
        }
        CheerConfig.MergeFrom(other.CheerConfig);
      }
      if (other.cheerState_ != null) {
        if (cheerState_ == null) {
          CheerState = new global::Steam.Protos.Dota2.CMsgCheerState();
        }
        CheerState.MergeFrom(other.CheerState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cheerConfig_ == null) {
              CheerConfig = new global::Steam.Protos.Dota2.CMsgCheerConfig();
            }
            input.ReadMessage(CheerConfig);
            break;
          }
          case 18: {
            if (cheerState_ == null) {
              CheerState = new global::Steam.Protos.Dota2.CMsgCheerState();
            }
            input.ReadMessage(CheerState);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cheerConfig_ == null) {
              CheerConfig = new global::Steam.Protos.Dota2.CMsgCheerConfig();
            }
            input.ReadMessage(CheerConfig);
            break;
          }
          case 18: {
            if (cheerState_ == null) {
              CheerState = new global::Steam.Protos.Dota2.CMsgCheerState();
            }
            input.ReadMessage(CheerState);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCGetStickerHeroes : pb::IMessage<CMsgServerToGCGetStickerHeroes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCGetStickerHeroes> _parser = new pb::MessageParser<CMsgServerToGCGetStickerHeroes>(() => new CMsgServerToGCGetStickerHeroes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCGetStickerHeroes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetStickerHeroes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetStickerHeroes(CMsgServerToGCGetStickerHeroes other) : this() {
      accountIds_ = other.accountIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetStickerHeroes Clone() {
      return new CMsgServerToGCGetStickerHeroes(this);
    }

    /// <summary>Field number for the "account_ids" field.</summary>
    public const int AccountIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_accountIds_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> accountIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AccountIds {
      get { return accountIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCGetStickerHeroes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCGetStickerHeroes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accountIds_.Equals(other.accountIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accountIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accountIds_.WriteTo(output, _repeated_accountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accountIds_.WriteTo(ref output, _repeated_accountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accountIds_.CalculateSize(_repeated_accountIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCGetStickerHeroes other) {
      if (other == null) {
        return;
      }
      accountIds_.Add(other.accountIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            accountIds_.AddEntriesFrom(input, _repeated_accountIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            accountIds_.AddEntriesFrom(ref input, _repeated_accountIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCGetStickerHeroesResponse : pb::IMessage<CMsgServerToGCGetStickerHeroesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCGetStickerHeroesResponse> _parser = new pb::MessageParser<CMsgServerToGCGetStickerHeroesResponse>(() => new CMsgServerToGCGetStickerHeroesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCGetStickerHeroesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetStickerHeroesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetStickerHeroesResponse(CMsgServerToGCGetStickerHeroesResponse other) : this() {
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCGetStickerHeroesResponse Clone() {
      return new CMsgServerToGCGetStickerHeroesResponse(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroesResponse.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroesResponse.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroesResponse.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroesResponse.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroesResponse.Types.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCGetStickerHeroesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCGetStickerHeroesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCGetStickerHeroesResponse other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCGetStickerHeroesResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgServerToGCGetStickerHeroesResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          stickers_ = other.stickers_ != null ? other.stickers_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "stickers" field.</summary>
        public const int StickersFieldNumber = 2;
        private global::Steam.Protos.Dota2.CMsgStickerHeroes stickers_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgStickerHeroes Stickers {
          get { return stickers_; }
          set {
            stickers_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (!object.Equals(Stickers, other.Stickers)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (stickers_ != null) hash ^= Stickers.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (stickers_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Stickers);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (stickers_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Stickers);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (stickers_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stickers);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.stickers_ != null) {
            if (stickers_ == null) {
              Stickers = new global::Steam.Protos.Dota2.CMsgStickerHeroes();
            }
            Stickers.MergeFrom(other.Stickers);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (stickers_ == null) {
                  Stickers = new global::Steam.Protos.Dota2.CMsgStickerHeroes();
                }
                input.ReadMessage(Stickers);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (stickers_ == null) {
                  Stickers = new global::Steam.Protos.Dota2.CMsgStickerHeroes();
                }
                input.ReadMessage(Stickers);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSteamLearnMatchInfo : pb::IMessage<CMsgSteamLearnMatchInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnMatchInfo> _parser = new pb::MessageParser<CMsgSteamLearnMatchInfo>(() => new CMsgSteamLearnMatchInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnMatchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchInfo(CMsgSteamLearnMatchInfo other) : this() {
      _hasBits0 = other._hasBits0;
      averageMmr_ = other.averageMmr_;
      radiantWon_ = other.radiantWon_;
      duration_ = other.duration_;
      gameMode_ = other.gameMode_;
      lobbyType_ = other.lobbyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchInfo Clone() {
      return new CMsgSteamLearnMatchInfo(this);
    }

    /// <summary>Field number for the "average_mmr" field.</summary>
    public const int AverageMmrFieldNumber = 1;
    private readonly static uint AverageMmrDefaultValue = 0;

    private uint averageMmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AverageMmr {
      get { if ((_hasBits0 & 1) != 0) { return averageMmr_; } else { return AverageMmrDefaultValue; } }
      set {
        _hasBits0 |= 1;
        averageMmr_ = value;
      }
    }
    /// <summary>Gets whether the "average_mmr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAverageMmr {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "average_mmr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAverageMmr() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "radiant_won" field.</summary>
    public const int RadiantWonFieldNumber = 2;
    private readonly static bool RadiantWonDefaultValue = false;

    private bool radiantWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RadiantWon {
      get { if ((_hasBits0 & 2) != 0) { return radiantWon_; } else { return RadiantWonDefaultValue; } }
      set {
        _hasBits0 |= 2;
        radiantWon_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_won" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantWon {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "radiant_won" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantWon() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { if ((_hasBits0 & 4) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 4;
    private readonly static uint GameModeDefaultValue = 0;

    private uint gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameMode {
      get { if ((_hasBits0 & 8) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameMode {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameMode() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "lobby_type" field.</summary>
    public const int LobbyTypeFieldNumber = 5;
    private readonly static uint LobbyTypeDefaultValue = 0;

    private uint lobbyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyType {
      get { if ((_hasBits0 & 16) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        lobbyType_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "lobby_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyType() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnMatchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnMatchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AverageMmr != other.AverageMmr) return false;
      if (RadiantWon != other.RadiantWon) return false;
      if (Duration != other.Duration) return false;
      if (GameMode != other.GameMode) return false;
      if (LobbyType != other.LobbyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAverageMmr) hash ^= AverageMmr.GetHashCode();
      if (HasRadiantWon) hash ^= RadiantWon.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasLobbyType) hash ^= LobbyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAverageMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(AverageMmr);
      }
      if (HasRadiantWon) {
        output.WriteRawTag(16);
        output.WriteBool(RadiantWon);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasGameMode) {
        output.WriteRawTag(32);
        output.WriteUInt32(GameMode);
      }
      if (HasLobbyType) {
        output.WriteRawTag(40);
        output.WriteUInt32(LobbyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAverageMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(AverageMmr);
      }
      if (HasRadiantWon) {
        output.WriteRawTag(16);
        output.WriteBool(RadiantWon);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasGameMode) {
        output.WriteRawTag(32);
        output.WriteUInt32(GameMode);
      }
      if (HasLobbyType) {
        output.WriteRawTag(40);
        output.WriteUInt32(LobbyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAverageMmr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AverageMmr);
      }
      if (HasRadiantWon) {
        size += 1 + 1;
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasGameMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameMode);
      }
      if (HasLobbyType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LobbyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnMatchInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasAverageMmr) {
        AverageMmr = other.AverageMmr;
      }
      if (other.HasRadiantWon) {
        RadiantWon = other.RadiantWon;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasLobbyType) {
        LobbyType = other.LobbyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AverageMmr = input.ReadUInt32();
            break;
          }
          case 16: {
            RadiantWon = input.ReadBool();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 32: {
            GameMode = input.ReadUInt32();
            break;
          }
          case 40: {
            LobbyType = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AverageMmr = input.ReadUInt32();
            break;
          }
          case 16: {
            RadiantWon = input.ReadBool();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 32: {
            GameMode = input.ReadUInt32();
            break;
          }
          case 40: {
            LobbyType = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSteamLearnMatchInfoPlayer : pb::IMessage<CMsgSteamLearnMatchInfoPlayer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnMatchInfoPlayer> _parser = new pb::MessageParser<CMsgSteamLearnMatchInfoPlayer>(() => new CMsgSteamLearnMatchInfoPlayer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnMatchInfoPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchInfoPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchInfoPlayer(CMsgSteamLearnMatchInfoPlayer other) : this() {
      _hasBits0 = other._hasBits0;
      averageMmr_ = other.averageMmr_;
      teamWon_ = other.teamWon_;
      duration_ = other.duration_;
      gameMode_ = other.gameMode_;
      lobbyType_ = other.lobbyType_;
      playerMmr_ = other.playerMmr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchInfoPlayer Clone() {
      return new CMsgSteamLearnMatchInfoPlayer(this);
    }

    /// <summary>Field number for the "average_mmr" field.</summary>
    public const int AverageMmrFieldNumber = 1;
    private readonly static uint AverageMmrDefaultValue = 0;

    private uint averageMmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AverageMmr {
      get { if ((_hasBits0 & 1) != 0) { return averageMmr_; } else { return AverageMmrDefaultValue; } }
      set {
        _hasBits0 |= 1;
        averageMmr_ = value;
      }
    }
    /// <summary>Gets whether the "average_mmr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAverageMmr {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "average_mmr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAverageMmr() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "team_won" field.</summary>
    public const int TeamWonFieldNumber = 2;
    private readonly static bool TeamWonDefaultValue = false;

    private bool teamWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TeamWon {
      get { if ((_hasBits0 & 2) != 0) { return teamWon_; } else { return TeamWonDefaultValue; } }
      set {
        _hasBits0 |= 2;
        teamWon_ = value;
      }
    }
    /// <summary>Gets whether the "team_won" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamWon {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "team_won" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamWon() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { if ((_hasBits0 & 4) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 4;
    private readonly static uint GameModeDefaultValue = 0;

    private uint gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameMode {
      get { if ((_hasBits0 & 8) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameMode {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameMode() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "lobby_type" field.</summary>
    public const int LobbyTypeFieldNumber = 5;
    private readonly static uint LobbyTypeDefaultValue = 0;

    private uint lobbyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyType {
      get { if ((_hasBits0 & 16) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        lobbyType_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "lobby_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "player_mmr" field.</summary>
    public const int PlayerMmrFieldNumber = 6;
    private readonly static uint PlayerMmrDefaultValue = 0;

    private uint playerMmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerMmr {
      get { if ((_hasBits0 & 32) != 0) { return playerMmr_; } else { return PlayerMmrDefaultValue; } }
      set {
        _hasBits0 |= 32;
        playerMmr_ = value;
      }
    }
    /// <summary>Gets whether the "player_mmr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerMmr {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "player_mmr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerMmr() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnMatchInfoPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnMatchInfoPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AverageMmr != other.AverageMmr) return false;
      if (TeamWon != other.TeamWon) return false;
      if (Duration != other.Duration) return false;
      if (GameMode != other.GameMode) return false;
      if (LobbyType != other.LobbyType) return false;
      if (PlayerMmr != other.PlayerMmr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAverageMmr) hash ^= AverageMmr.GetHashCode();
      if (HasTeamWon) hash ^= TeamWon.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasLobbyType) hash ^= LobbyType.GetHashCode();
      if (HasPlayerMmr) hash ^= PlayerMmr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAverageMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(AverageMmr);
      }
      if (HasTeamWon) {
        output.WriteRawTag(16);
        output.WriteBool(TeamWon);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasGameMode) {
        output.WriteRawTag(32);
        output.WriteUInt32(GameMode);
      }
      if (HasLobbyType) {
        output.WriteRawTag(40);
        output.WriteUInt32(LobbyType);
      }
      if (HasPlayerMmr) {
        output.WriteRawTag(48);
        output.WriteUInt32(PlayerMmr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAverageMmr) {
        output.WriteRawTag(8);
        output.WriteUInt32(AverageMmr);
      }
      if (HasTeamWon) {
        output.WriteRawTag(16);
        output.WriteBool(TeamWon);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasGameMode) {
        output.WriteRawTag(32);
        output.WriteUInt32(GameMode);
      }
      if (HasLobbyType) {
        output.WriteRawTag(40);
        output.WriteUInt32(LobbyType);
      }
      if (HasPlayerMmr) {
        output.WriteRawTag(48);
        output.WriteUInt32(PlayerMmr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAverageMmr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AverageMmr);
      }
      if (HasTeamWon) {
        size += 1 + 1;
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasGameMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameMode);
      }
      if (HasLobbyType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LobbyType);
      }
      if (HasPlayerMmr) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerMmr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnMatchInfoPlayer other) {
      if (other == null) {
        return;
      }
      if (other.HasAverageMmr) {
        AverageMmr = other.AverageMmr;
      }
      if (other.HasTeamWon) {
        TeamWon = other.TeamWon;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasLobbyType) {
        LobbyType = other.LobbyType;
      }
      if (other.HasPlayerMmr) {
        PlayerMmr = other.PlayerMmr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AverageMmr = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamWon = input.ReadBool();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 32: {
            GameMode = input.ReadUInt32();
            break;
          }
          case 40: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 48: {
            PlayerMmr = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AverageMmr = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamWon = input.ReadBool();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 32: {
            GameMode = input.ReadUInt32();
            break;
          }
          case 40: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 48: {
            PlayerMmr = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSteamLearnMatchInfoTeam : pb::IMessage<CMsgSteamLearnMatchInfoTeam>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnMatchInfoTeam> _parser = new pb::MessageParser<CMsgSteamLearnMatchInfoTeam>(() => new CMsgSteamLearnMatchInfoTeam());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnMatchInfoTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchInfoTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchInfoTeam(CMsgSteamLearnMatchInfoTeam other) : this() {
      _hasBits0 = other._hasBits0;
      radiantPlayers_ = other.radiantPlayers_.Clone();
      direPlayers_ = other.direPlayers_.Clone();
      radiantTeamWon_ = other.radiantTeamWon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchInfoTeam Clone() {
      return new CMsgSteamLearnMatchInfoTeam(this);
    }

    /// <summary>Field number for the "radiant_players" field.</summary>
    public const int RadiantPlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player> _repeated_radiantPlayers_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player> radiantPlayers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player> RadiantPlayers {
      get { return radiantPlayers_; }
    }

    /// <summary>Field number for the "dire_players" field.</summary>
    public const int DirePlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player> _repeated_direPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player> direPlayers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Types.Player> DirePlayers {
      get { return direPlayers_; }
    }

    /// <summary>Field number for the "radiant_team_won" field.</summary>
    public const int RadiantTeamWonFieldNumber = 3;
    private readonly static bool RadiantTeamWonDefaultValue = false;

    private bool radiantTeamWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RadiantTeamWon {
      get { if ((_hasBits0 & 1) != 0) { return radiantTeamWon_; } else { return RadiantTeamWonDefaultValue; } }
      set {
        _hasBits0 |= 1;
        radiantTeamWon_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_team_won" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantTeamWon {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "radiant_team_won" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantTeamWon() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnMatchInfoTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnMatchInfoTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!radiantPlayers_.Equals(other.radiantPlayers_)) return false;
      if(!direPlayers_.Equals(other.direPlayers_)) return false;
      if (RadiantTeamWon != other.RadiantTeamWon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= radiantPlayers_.GetHashCode();
      hash ^= direPlayers_.GetHashCode();
      if (HasRadiantTeamWon) hash ^= RadiantTeamWon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      radiantPlayers_.WriteTo(output, _repeated_radiantPlayers_codec);
      direPlayers_.WriteTo(output, _repeated_direPlayers_codec);
      if (HasRadiantTeamWon) {
        output.WriteRawTag(24);
        output.WriteBool(RadiantTeamWon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      radiantPlayers_.WriteTo(ref output, _repeated_radiantPlayers_codec);
      direPlayers_.WriteTo(ref output, _repeated_direPlayers_codec);
      if (HasRadiantTeamWon) {
        output.WriteRawTag(24);
        output.WriteBool(RadiantTeamWon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += radiantPlayers_.CalculateSize(_repeated_radiantPlayers_codec);
      size += direPlayers_.CalculateSize(_repeated_direPlayers_codec);
      if (HasRadiantTeamWon) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnMatchInfoTeam other) {
      if (other == null) {
        return;
      }
      radiantPlayers_.Add(other.radiantPlayers_);
      direPlayers_.Add(other.direPlayers_);
      if (other.HasRadiantTeamWon) {
        RadiantTeamWon = other.RadiantTeamWon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            radiantPlayers_.AddEntriesFrom(input, _repeated_radiantPlayers_codec);
            break;
          }
          case 18: {
            direPlayers_.AddEntriesFrom(input, _repeated_direPlayers_codec);
            break;
          }
          case 24: {
            RadiantTeamWon = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            radiantPlayers_.AddEntriesFrom(ref input, _repeated_radiantPlayers_codec);
            break;
          }
          case 18: {
            direPlayers_.AddEntriesFrom(ref input, _repeated_direPlayers_codec);
            break;
          }
          case 24: {
            RadiantTeamWon = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSteamLearnMatchInfoTeam message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSteamLearnMatchInfoTeam.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          prematchMmr_ = other.prematchMmr_;
          prematchRankUncertainty_ = other.prematchRankUncertainty_;
          prematchBehaviorScore_ = other.prematchBehaviorScore_;
          prematchCommScore_ = other.prematchCommScore_;
          numPlayersInParty_ = other.numPlayersInParty_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "prematch_mmr" field.</summary>
        public const int PrematchMmrFieldNumber = 1;
        private readonly static uint PrematchMmrDefaultValue = 0;

        private uint prematchMmr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PrematchMmr {
          get { if ((_hasBits0 & 1) != 0) { return prematchMmr_; } else { return PrematchMmrDefaultValue; } }
          set {
            _hasBits0 |= 1;
            prematchMmr_ = value;
          }
        }
        /// <summary>Gets whether the "prematch_mmr" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPrematchMmr {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "prematch_mmr" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPrematchMmr() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "prematch_rank_uncertainty" field.</summary>
        public const int PrematchRankUncertaintyFieldNumber = 2;
        private readonly static uint PrematchRankUncertaintyDefaultValue = 0;

        private uint prematchRankUncertainty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PrematchRankUncertainty {
          get { if ((_hasBits0 & 2) != 0) { return prematchRankUncertainty_; } else { return PrematchRankUncertaintyDefaultValue; } }
          set {
            _hasBits0 |= 2;
            prematchRankUncertainty_ = value;
          }
        }
        /// <summary>Gets whether the "prematch_rank_uncertainty" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPrematchRankUncertainty {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "prematch_rank_uncertainty" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPrematchRankUncertainty() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "prematch_behavior_score" field.</summary>
        public const int PrematchBehaviorScoreFieldNumber = 3;
        private readonly static uint PrematchBehaviorScoreDefaultValue = 0;

        private uint prematchBehaviorScore_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PrematchBehaviorScore {
          get { if ((_hasBits0 & 4) != 0) { return prematchBehaviorScore_; } else { return PrematchBehaviorScoreDefaultValue; } }
          set {
            _hasBits0 |= 4;
            prematchBehaviorScore_ = value;
          }
        }
        /// <summary>Gets whether the "prematch_behavior_score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPrematchBehaviorScore {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "prematch_behavior_score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPrematchBehaviorScore() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "prematch_comm_score" field.</summary>
        public const int PrematchCommScoreFieldNumber = 4;
        private readonly static uint PrematchCommScoreDefaultValue = 0;

        private uint prematchCommScore_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PrematchCommScore {
          get { if ((_hasBits0 & 8) != 0) { return prematchCommScore_; } else { return PrematchCommScoreDefaultValue; } }
          set {
            _hasBits0 |= 8;
            prematchCommScore_ = value;
          }
        }
        /// <summary>Gets whether the "prematch_comm_score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPrematchCommScore {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "prematch_comm_score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPrematchCommScore() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "num_players_in_party" field.</summary>
        public const int NumPlayersInPartyFieldNumber = 5;
        private readonly static uint NumPlayersInPartyDefaultValue = 0;

        private uint numPlayersInParty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumPlayersInParty {
          get { if ((_hasBits0 & 16) != 0) { return numPlayersInParty_; } else { return NumPlayersInPartyDefaultValue; } }
          set {
            _hasBits0 |= 16;
            numPlayersInParty_ = value;
          }
        }
        /// <summary>Gets whether the "num_players_in_party" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNumPlayersInParty {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "num_players_in_party" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNumPlayersInParty() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PrematchMmr != other.PrematchMmr) return false;
          if (PrematchRankUncertainty != other.PrematchRankUncertainty) return false;
          if (PrematchBehaviorScore != other.PrematchBehaviorScore) return false;
          if (PrematchCommScore != other.PrematchCommScore) return false;
          if (NumPlayersInParty != other.NumPlayersInParty) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPrematchMmr) hash ^= PrematchMmr.GetHashCode();
          if (HasPrematchRankUncertainty) hash ^= PrematchRankUncertainty.GetHashCode();
          if (HasPrematchBehaviorScore) hash ^= PrematchBehaviorScore.GetHashCode();
          if (HasPrematchCommScore) hash ^= PrematchCommScore.GetHashCode();
          if (HasNumPlayersInParty) hash ^= NumPlayersInParty.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPrematchMmr) {
            output.WriteRawTag(8);
            output.WriteUInt32(PrematchMmr);
          }
          if (HasPrematchRankUncertainty) {
            output.WriteRawTag(16);
            output.WriteUInt32(PrematchRankUncertainty);
          }
          if (HasPrematchBehaviorScore) {
            output.WriteRawTag(24);
            output.WriteUInt32(PrematchBehaviorScore);
          }
          if (HasPrematchCommScore) {
            output.WriteRawTag(32);
            output.WriteUInt32(PrematchCommScore);
          }
          if (HasNumPlayersInParty) {
            output.WriteRawTag(40);
            output.WriteUInt32(NumPlayersInParty);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPrematchMmr) {
            output.WriteRawTag(8);
            output.WriteUInt32(PrematchMmr);
          }
          if (HasPrematchRankUncertainty) {
            output.WriteRawTag(16);
            output.WriteUInt32(PrematchRankUncertainty);
          }
          if (HasPrematchBehaviorScore) {
            output.WriteRawTag(24);
            output.WriteUInt32(PrematchBehaviorScore);
          }
          if (HasPrematchCommScore) {
            output.WriteRawTag(32);
            output.WriteUInt32(PrematchCommScore);
          }
          if (HasNumPlayersInParty) {
            output.WriteRawTag(40);
            output.WriteUInt32(NumPlayersInParty);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPrematchMmr) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrematchMmr);
          }
          if (HasPrematchRankUncertainty) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrematchRankUncertainty);
          }
          if (HasPrematchBehaviorScore) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrematchBehaviorScore);
          }
          if (HasPrematchCommScore) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrematchCommScore);
          }
          if (HasNumPlayersInParty) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPlayersInParty);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasPrematchMmr) {
            PrematchMmr = other.PrematchMmr;
          }
          if (other.HasPrematchRankUncertainty) {
            PrematchRankUncertainty = other.PrematchRankUncertainty;
          }
          if (other.HasPrematchBehaviorScore) {
            PrematchBehaviorScore = other.PrematchBehaviorScore;
          }
          if (other.HasPrematchCommScore) {
            PrematchCommScore = other.PrematchCommScore;
          }
          if (other.HasNumPlayersInParty) {
            NumPlayersInParty = other.NumPlayersInParty;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PrematchMmr = input.ReadUInt32();
                break;
              }
              case 16: {
                PrematchRankUncertainty = input.ReadUInt32();
                break;
              }
              case 24: {
                PrematchBehaviorScore = input.ReadUInt32();
                break;
              }
              case 32: {
                PrematchCommScore = input.ReadUInt32();
                break;
              }
              case 40: {
                NumPlayersInParty = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PrematchMmr = input.ReadUInt32();
                break;
              }
              case 16: {
                PrematchRankUncertainty = input.ReadUInt32();
                break;
              }
              case 24: {
                PrematchBehaviorScore = input.ReadUInt32();
                break;
              }
              case 32: {
                PrematchCommScore = input.ReadUInt32();
                break;
              }
              case 40: {
                NumPlayersInParty = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSteamLearnMatchHeroesV3 : pb::IMessage<CMsgSteamLearnMatchHeroesV3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnMatchHeroesV3> _parser = new pb::MessageParser<CMsgSteamLearnMatchHeroesV3>(() => new CMsgSteamLearnMatchHeroesV3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnMatchHeroesV3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchHeroesV3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchHeroesV3(CMsgSteamLearnMatchHeroesV3 other) : this() {
      radiantHeroIds_ = other.radiantHeroIds_.Clone();
      direHeroIds_ = other.direHeroIds_.Clone();
      radiantLanes_ = other.radiantLanes_.Clone();
      direLanes_ = other.direLanes_.Clone();
      radiantHeroFacets_ = other.radiantHeroFacets_.Clone();
      direHeroFacets_ = other.direHeroFacets_.Clone();
      radiantPositions_ = other.radiantPositions_.Clone();
      direPositions_ = other.direPositions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchHeroesV3 Clone() {
      return new CMsgSteamLearnMatchHeroesV3(this);
    }

    /// <summary>Field number for the "radiant_hero_ids" field.</summary>
    public const int RadiantHeroIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_radiantHeroIds_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> radiantHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RadiantHeroIds {
      get { return radiantHeroIds_; }
    }

    /// <summary>Field number for the "dire_hero_ids" field.</summary>
    public const int DireHeroIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_direHeroIds_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> direHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DireHeroIds {
      get { return direHeroIds_; }
    }

    /// <summary>Field number for the "radiant_lanes" field.</summary>
    public const int RadiantLanesFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_radiantLanes_codec
        = pb::FieldCodec.ForUInt32(24);
    private readonly pbc::RepeatedField<uint> radiantLanes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RadiantLanes {
      get { return radiantLanes_; }
    }

    /// <summary>Field number for the "dire_lanes" field.</summary>
    public const int DireLanesFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_direLanes_codec
        = pb::FieldCodec.ForUInt32(32);
    private readonly pbc::RepeatedField<uint> direLanes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DireLanes {
      get { return direLanes_; }
    }

    /// <summary>Field number for the "radiant_hero_facets" field.</summary>
    public const int RadiantHeroFacetsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_radiantHeroFacets_codec
        = pb::FieldCodec.ForUInt32(40);
    private readonly pbc::RepeatedField<uint> radiantHeroFacets_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RadiantHeroFacets {
      get { return radiantHeroFacets_; }
    }

    /// <summary>Field number for the "dire_hero_facets" field.</summary>
    public const int DireHeroFacetsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_direHeroFacets_codec
        = pb::FieldCodec.ForUInt32(48);
    private readonly pbc::RepeatedField<uint> direHeroFacets_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DireHeroFacets {
      get { return direHeroFacets_; }
    }

    /// <summary>Field number for the "radiant_positions" field.</summary>
    public const int RadiantPositionsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_radiantPositions_codec
        = pb::FieldCodec.ForUInt32(56);
    private readonly pbc::RepeatedField<uint> radiantPositions_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RadiantPositions {
      get { return radiantPositions_; }
    }

    /// <summary>Field number for the "dire_positions" field.</summary>
    public const int DirePositionsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_direPositions_codec
        = pb::FieldCodec.ForUInt32(64);
    private readonly pbc::RepeatedField<uint> direPositions_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DirePositions {
      get { return direPositions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnMatchHeroesV3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnMatchHeroesV3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!radiantHeroIds_.Equals(other.radiantHeroIds_)) return false;
      if(!direHeroIds_.Equals(other.direHeroIds_)) return false;
      if(!radiantLanes_.Equals(other.radiantLanes_)) return false;
      if(!direLanes_.Equals(other.direLanes_)) return false;
      if(!radiantHeroFacets_.Equals(other.radiantHeroFacets_)) return false;
      if(!direHeroFacets_.Equals(other.direHeroFacets_)) return false;
      if(!radiantPositions_.Equals(other.radiantPositions_)) return false;
      if(!direPositions_.Equals(other.direPositions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= radiantHeroIds_.GetHashCode();
      hash ^= direHeroIds_.GetHashCode();
      hash ^= radiantLanes_.GetHashCode();
      hash ^= direLanes_.GetHashCode();
      hash ^= radiantHeroFacets_.GetHashCode();
      hash ^= direHeroFacets_.GetHashCode();
      hash ^= radiantPositions_.GetHashCode();
      hash ^= direPositions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      radiantHeroIds_.WriteTo(output, _repeated_radiantHeroIds_codec);
      direHeroIds_.WriteTo(output, _repeated_direHeroIds_codec);
      radiantLanes_.WriteTo(output, _repeated_radiantLanes_codec);
      direLanes_.WriteTo(output, _repeated_direLanes_codec);
      radiantHeroFacets_.WriteTo(output, _repeated_radiantHeroFacets_codec);
      direHeroFacets_.WriteTo(output, _repeated_direHeroFacets_codec);
      radiantPositions_.WriteTo(output, _repeated_radiantPositions_codec);
      direPositions_.WriteTo(output, _repeated_direPositions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      radiantHeroIds_.WriteTo(ref output, _repeated_radiantHeroIds_codec);
      direHeroIds_.WriteTo(ref output, _repeated_direHeroIds_codec);
      radiantLanes_.WriteTo(ref output, _repeated_radiantLanes_codec);
      direLanes_.WriteTo(ref output, _repeated_direLanes_codec);
      radiantHeroFacets_.WriteTo(ref output, _repeated_radiantHeroFacets_codec);
      direHeroFacets_.WriteTo(ref output, _repeated_direHeroFacets_codec);
      radiantPositions_.WriteTo(ref output, _repeated_radiantPositions_codec);
      direPositions_.WriteTo(ref output, _repeated_direPositions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += radiantHeroIds_.CalculateSize(_repeated_radiantHeroIds_codec);
      size += direHeroIds_.CalculateSize(_repeated_direHeroIds_codec);
      size += radiantLanes_.CalculateSize(_repeated_radiantLanes_codec);
      size += direLanes_.CalculateSize(_repeated_direLanes_codec);
      size += radiantHeroFacets_.CalculateSize(_repeated_radiantHeroFacets_codec);
      size += direHeroFacets_.CalculateSize(_repeated_direHeroFacets_codec);
      size += radiantPositions_.CalculateSize(_repeated_radiantPositions_codec);
      size += direPositions_.CalculateSize(_repeated_direPositions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnMatchHeroesV3 other) {
      if (other == null) {
        return;
      }
      radiantHeroIds_.Add(other.radiantHeroIds_);
      direHeroIds_.Add(other.direHeroIds_);
      radiantLanes_.Add(other.radiantLanes_);
      direLanes_.Add(other.direLanes_);
      radiantHeroFacets_.Add(other.radiantHeroFacets_);
      direHeroFacets_.Add(other.direHeroFacets_);
      radiantPositions_.Add(other.radiantPositions_);
      direPositions_.Add(other.direPositions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            radiantHeroIds_.AddEntriesFrom(input, _repeated_radiantHeroIds_codec);
            break;
          }
          case 18:
          case 16: {
            direHeroIds_.AddEntriesFrom(input, _repeated_direHeroIds_codec);
            break;
          }
          case 26:
          case 24: {
            radiantLanes_.AddEntriesFrom(input, _repeated_radiantLanes_codec);
            break;
          }
          case 34:
          case 32: {
            direLanes_.AddEntriesFrom(input, _repeated_direLanes_codec);
            break;
          }
          case 42:
          case 40: {
            radiantHeroFacets_.AddEntriesFrom(input, _repeated_radiantHeroFacets_codec);
            break;
          }
          case 50:
          case 48: {
            direHeroFacets_.AddEntriesFrom(input, _repeated_direHeroFacets_codec);
            break;
          }
          case 58:
          case 56: {
            radiantPositions_.AddEntriesFrom(input, _repeated_radiantPositions_codec);
            break;
          }
          case 66:
          case 64: {
            direPositions_.AddEntriesFrom(input, _repeated_direPositions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            radiantHeroIds_.AddEntriesFrom(ref input, _repeated_radiantHeroIds_codec);
            break;
          }
          case 18:
          case 16: {
            direHeroIds_.AddEntriesFrom(ref input, _repeated_direHeroIds_codec);
            break;
          }
          case 26:
          case 24: {
            radiantLanes_.AddEntriesFrom(ref input, _repeated_radiantLanes_codec);
            break;
          }
          case 34:
          case 32: {
            direLanes_.AddEntriesFrom(ref input, _repeated_direLanes_codec);
            break;
          }
          case 42:
          case 40: {
            radiantHeroFacets_.AddEntriesFrom(ref input, _repeated_radiantHeroFacets_codec);
            break;
          }
          case 50:
          case 48: {
            direHeroFacets_.AddEntriesFrom(ref input, _repeated_direHeroFacets_codec);
            break;
          }
          case 58:
          case 56: {
            radiantPositions_.AddEntriesFrom(ref input, _repeated_radiantPositions_codec);
            break;
          }
          case 66:
          case 64: {
            direPositions_.AddEntriesFrom(ref input, _repeated_direPositions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSteamLearnMatchHeroV6 : pb::IMessage<CMsgSteamLearnMatchHeroV6>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnMatchHeroV6> _parser = new pb::MessageParser<CMsgSteamLearnMatchHeroV6>(() => new CMsgSteamLearnMatchHeroV6());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnMatchHeroV6> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchHeroV6() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchHeroV6(CMsgSteamLearnMatchHeroV6 other) : this() {
      _hasBits0 = other._hasBits0;
      heroId_ = other.heroId_;
      facet_ = other.facet_;
      heroAndFacet_ = other.heroAndFacet_;
      lane_ = other.lane_;
      position_ = other.position_;
      alliedHeroAndFacet_ = other.alliedHeroAndFacet_.Clone();
      enemyHeroAndFacet_ = other.enemyHeroAndFacet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchHeroV6 Clone() {
      return new CMsgSteamLearnMatchHeroV6(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "facet" field.</summary>
    public const int FacetFieldNumber = 2;
    private readonly static uint FacetDefaultValue = 0;

    private uint facet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Facet {
      get { if ((_hasBits0 & 2) != 0) { return facet_; } else { return FacetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        facet_ = value;
      }
    }
    /// <summary>Gets whether the "facet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFacet {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "facet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFacet() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hero_and_facet" field.</summary>
    public const int HeroAndFacetFieldNumber = 3;
    private readonly static uint HeroAndFacetDefaultValue = 0;

    private uint heroAndFacet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroAndFacet {
      get { if ((_hasBits0 & 4) != 0) { return heroAndFacet_; } else { return HeroAndFacetDefaultValue; } }
      set {
        _hasBits0 |= 4;
        heroAndFacet_ = value;
      }
    }
    /// <summary>Gets whether the "hero_and_facet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroAndFacet {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hero_and_facet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroAndFacet() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "lane" field.</summary>
    public const int LaneFieldNumber = 4;
    private readonly static uint LaneDefaultValue = 0;

    private uint lane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lane {
      get { if ((_hasBits0 & 8) != 0) { return lane_; } else { return LaneDefaultValue; } }
      set {
        _hasBits0 |= 8;
        lane_ = value;
      }
    }
    /// <summary>Gets whether the "lane" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLane {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "lane" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLane() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private readonly static uint PositionDefaultValue = 0;

    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { if ((_hasBits0 & 16) != 0) { return position_; } else { return PositionDefaultValue; } }
      set {
        _hasBits0 |= 16;
        position_ = value;
      }
    }
    /// <summary>Gets whether the "position" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosition {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "position" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "allied_hero_and_facet" field.</summary>
    public const int AlliedHeroAndFacetFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_alliedHeroAndFacet_codec
        = pb::FieldCodec.ForUInt32(48);
    private readonly pbc::RepeatedField<uint> alliedHeroAndFacet_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AlliedHeroAndFacet {
      get { return alliedHeroAndFacet_; }
    }

    /// <summary>Field number for the "enemy_hero_and_facet" field.</summary>
    public const int EnemyHeroAndFacetFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_enemyHeroAndFacet_codec
        = pb::FieldCodec.ForUInt32(56);
    private readonly pbc::RepeatedField<uint> enemyHeroAndFacet_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EnemyHeroAndFacet {
      get { return enemyHeroAndFacet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnMatchHeroV6);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnMatchHeroV6 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (Facet != other.Facet) return false;
      if (HeroAndFacet != other.HeroAndFacet) return false;
      if (Lane != other.Lane) return false;
      if (Position != other.Position) return false;
      if(!alliedHeroAndFacet_.Equals(other.alliedHeroAndFacet_)) return false;
      if(!enemyHeroAndFacet_.Equals(other.enemyHeroAndFacet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasFacet) hash ^= Facet.GetHashCode();
      if (HasHeroAndFacet) hash ^= HeroAndFacet.GetHashCode();
      if (HasLane) hash ^= Lane.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      hash ^= alliedHeroAndFacet_.GetHashCode();
      hash ^= enemyHeroAndFacet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeroId) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (HasFacet) {
        output.WriteRawTag(16);
        output.WriteUInt32(Facet);
      }
      if (HasHeroAndFacet) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroAndFacet);
      }
      if (HasLane) {
        output.WriteRawTag(32);
        output.WriteUInt32(Lane);
      }
      if (HasPosition) {
        output.WriteRawTag(40);
        output.WriteUInt32(Position);
      }
      alliedHeroAndFacet_.WriteTo(output, _repeated_alliedHeroAndFacet_codec);
      enemyHeroAndFacet_.WriteTo(output, _repeated_enemyHeroAndFacet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeroId) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (HasFacet) {
        output.WriteRawTag(16);
        output.WriteUInt32(Facet);
      }
      if (HasHeroAndFacet) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroAndFacet);
      }
      if (HasLane) {
        output.WriteRawTag(32);
        output.WriteUInt32(Lane);
      }
      if (HasPosition) {
        output.WriteRawTag(40);
        output.WriteUInt32(Position);
      }
      alliedHeroAndFacet_.WriteTo(ref output, _repeated_alliedHeroAndFacet_codec);
      enemyHeroAndFacet_.WriteTo(ref output, _repeated_enemyHeroAndFacet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasFacet) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Facet);
      }
      if (HasHeroAndFacet) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroAndFacet);
      }
      if (HasLane) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lane);
      }
      if (HasPosition) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      size += alliedHeroAndFacet_.CalculateSize(_repeated_alliedHeroAndFacet_codec);
      size += enemyHeroAndFacet_.CalculateSize(_repeated_enemyHeroAndFacet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnMatchHeroV6 other) {
      if (other == null) {
        return;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasFacet) {
        Facet = other.Facet;
      }
      if (other.HasHeroAndFacet) {
        HeroAndFacet = other.HeroAndFacet;
      }
      if (other.HasLane) {
        Lane = other.Lane;
      }
      if (other.HasPosition) {
        Position = other.Position;
      }
      alliedHeroAndFacet_.Add(other.alliedHeroAndFacet_);
      enemyHeroAndFacet_.Add(other.enemyHeroAndFacet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            Facet = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroAndFacet = input.ReadUInt32();
            break;
          }
          case 32: {
            Lane = input.ReadUInt32();
            break;
          }
          case 40: {
            Position = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            alliedHeroAndFacet_.AddEntriesFrom(input, _repeated_alliedHeroAndFacet_codec);
            break;
          }
          case 58:
          case 56: {
            enemyHeroAndFacet_.AddEntriesFrom(input, _repeated_enemyHeroAndFacet_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            Facet = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroAndFacet = input.ReadUInt32();
            break;
          }
          case 32: {
            Lane = input.ReadUInt32();
            break;
          }
          case 40: {
            Position = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            alliedHeroAndFacet_.AddEntriesFrom(ref input, _repeated_alliedHeroAndFacet_codec);
            break;
          }
          case 58:
          case 56: {
            enemyHeroAndFacet_.AddEntriesFrom(ref input, _repeated_enemyHeroAndFacet_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSteamLearnPlayerTimedStats : pb::IMessage<CMsgSteamLearnPlayerTimedStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnPlayerTimedStats> _parser = new pb::MessageParser<CMsgSteamLearnPlayerTimedStats>(() => new CMsgSteamLearnPlayerTimedStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnPlayerTimedStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPlayerTimedStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPlayerTimedStats(CMsgSteamLearnPlayerTimedStats other) : this() {
      statBuckets_ = other.statBuckets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPlayerTimedStats Clone() {
      return new CMsgSteamLearnPlayerTimedStats(this);
    }

    /// <summary>Field number for the "stat_buckets" field.</summary>
    public const int StatBucketsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSteamLearnPlayerTimedStats.Types.StatBucket> _repeated_statBuckets_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSteamLearnPlayerTimedStats.Types.StatBucket.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnPlayerTimedStats.Types.StatBucket> statBuckets_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnPlayerTimedStats.Types.StatBucket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnPlayerTimedStats.Types.StatBucket> StatBuckets {
      get { return statBuckets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnPlayerTimedStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnPlayerTimedStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!statBuckets_.Equals(other.statBuckets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= statBuckets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      statBuckets_.WriteTo(output, _repeated_statBuckets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      statBuckets_.WriteTo(ref output, _repeated_statBuckets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statBuckets_.CalculateSize(_repeated_statBuckets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnPlayerTimedStats other) {
      if (other == null) {
        return;
      }
      statBuckets_.Add(other.statBuckets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            statBuckets_.AddEntriesFrom(input, _repeated_statBuckets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            statBuckets_.AddEntriesFrom(ref input, _repeated_statBuckets_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSteamLearnPlayerTimedStats message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StatBucket : pb::IMessage<StatBucket>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<StatBucket> _parser = new pb::MessageParser<StatBucket>(() => new StatBucket());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StatBucket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSteamLearnPlayerTimedStats.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatBucket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatBucket(StatBucket other) : this() {
          _hasBits0 = other._hasBits0;
          gameTime_ = other.gameTime_;
          kills_ = other.kills_;
          deaths_ = other.deaths_;
          assists_ = other.assists_;
          experience_ = other.experience_;
          lastHits_ = other.lastHits_;
          denies_ = other.denies_;
          netWorth_ = other.netWorth_;
          idleTime_ = other.idleTime_;
          commandsIssued_ = other.commandsIssued_;
          sentryWardsPlaced_ = other.sentryWardsPlaced_;
          observerWardsPlaced_ = other.observerWardsPlaced_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatBucket Clone() {
          return new StatBucket(this);
        }

        /// <summary>Field number for the "game_time" field.</summary>
        public const int GameTimeFieldNumber = 1;
        private readonly static float GameTimeDefaultValue = 0F;

        private float gameTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float GameTime {
          get { if ((_hasBits0 & 1) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            gameTime_ = value;
          }
        }
        /// <summary>Gets whether the "game_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameTime {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "game_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameTime() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 2;
        private readonly static uint KillsDefaultValue = 0;

        private uint kills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Kills {
          get { if ((_hasBits0 & 2) != 0) { return kills_; } else { return KillsDefaultValue; } }
          set {
            _hasBits0 |= 2;
            kills_ = value;
          }
        }
        /// <summary>Gets whether the "kills" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKills {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "kills" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKills() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "deaths" field.</summary>
        public const int DeathsFieldNumber = 3;
        private readonly static uint DeathsDefaultValue = 0;

        private uint deaths_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Deaths {
          get { if ((_hasBits0 & 4) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            deaths_ = value;
          }
        }
        /// <summary>Gets whether the "deaths" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeaths {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "deaths" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeaths() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "assists" field.</summary>
        public const int AssistsFieldNumber = 4;
        private readonly static uint AssistsDefaultValue = 0;

        private uint assists_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Assists {
          get { if ((_hasBits0 & 8) != 0) { return assists_; } else { return AssistsDefaultValue; } }
          set {
            _hasBits0 |= 8;
            assists_ = value;
          }
        }
        /// <summary>Gets whether the "assists" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAssists {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "assists" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAssists() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "experience" field.</summary>
        public const int ExperienceFieldNumber = 5;
        private readonly static uint ExperienceDefaultValue = 0;

        private uint experience_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Experience {
          get { if ((_hasBits0 & 16) != 0) { return experience_; } else { return ExperienceDefaultValue; } }
          set {
            _hasBits0 |= 16;
            experience_ = value;
          }
        }
        /// <summary>Gets whether the "experience" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExperience {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "experience" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExperience() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "last_hits" field.</summary>
        public const int LastHitsFieldNumber = 6;
        private readonly static uint LastHitsDefaultValue = 0;

        private uint lastHits_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LastHits {
          get { if ((_hasBits0 & 32) != 0) { return lastHits_; } else { return LastHitsDefaultValue; } }
          set {
            _hasBits0 |= 32;
            lastHits_ = value;
          }
        }
        /// <summary>Gets whether the "last_hits" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLastHits {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "last_hits" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLastHits() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "denies" field.</summary>
        public const int DeniesFieldNumber = 7;
        private readonly static uint DeniesDefaultValue = 0;

        private uint denies_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Denies {
          get { if ((_hasBits0 & 64) != 0) { return denies_; } else { return DeniesDefaultValue; } }
          set {
            _hasBits0 |= 64;
            denies_ = value;
          }
        }
        /// <summary>Gets whether the "denies" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDenies {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "denies" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDenies() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "net_worth" field.</summary>
        public const int NetWorthFieldNumber = 8;
        private readonly static uint NetWorthDefaultValue = 0;

        private uint netWorth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NetWorth {
          get { if ((_hasBits0 & 128) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
          set {
            _hasBits0 |= 128;
            netWorth_ = value;
          }
        }
        /// <summary>Gets whether the "net_worth" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNetWorth {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "net_worth" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNetWorth() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "idle_time" field.</summary>
        public const int IdleTimeFieldNumber = 9;
        private readonly static float IdleTimeDefaultValue = 0F;

        private float idleTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float IdleTime {
          get { if ((_hasBits0 & 256) != 0) { return idleTime_; } else { return IdleTimeDefaultValue; } }
          set {
            _hasBits0 |= 256;
            idleTime_ = value;
          }
        }
        /// <summary>Gets whether the "idle_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIdleTime {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "idle_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdleTime() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "commands_issued" field.</summary>
        public const int CommandsIssuedFieldNumber = 10;
        private readonly static uint CommandsIssuedDefaultValue = 0;

        private uint commandsIssued_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CommandsIssued {
          get { if ((_hasBits0 & 512) != 0) { return commandsIssued_; } else { return CommandsIssuedDefaultValue; } }
          set {
            _hasBits0 |= 512;
            commandsIssued_ = value;
          }
        }
        /// <summary>Gets whether the "commands_issued" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCommandsIssued {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "commands_issued" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommandsIssued() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "sentry_wards_placed" field.</summary>
        public const int SentryWardsPlacedFieldNumber = 11;
        private readonly static uint SentryWardsPlacedDefaultValue = 0;

        private uint sentryWardsPlaced_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SentryWardsPlaced {
          get { if ((_hasBits0 & 1024) != 0) { return sentryWardsPlaced_; } else { return SentryWardsPlacedDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            sentryWardsPlaced_ = value;
          }
        }
        /// <summary>Gets whether the "sentry_wards_placed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSentryWardsPlaced {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "sentry_wards_placed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSentryWardsPlaced() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "observer_wards_placed" field.</summary>
        public const int ObserverWardsPlacedFieldNumber = 12;
        private readonly static uint ObserverWardsPlacedDefaultValue = 0;

        private uint observerWardsPlaced_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ObserverWardsPlaced {
          get { if ((_hasBits0 & 2048) != 0) { return observerWardsPlaced_; } else { return ObserverWardsPlacedDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            observerWardsPlaced_ = value;
          }
        }
        /// <summary>Gets whether the "observer_wards_placed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasObserverWardsPlaced {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "observer_wards_placed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearObserverWardsPlaced() {
          _hasBits0 &= ~2048;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StatBucket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StatBucket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameTime, other.GameTime)) return false;
          if (Kills != other.Kills) return false;
          if (Deaths != other.Deaths) return false;
          if (Assists != other.Assists) return false;
          if (Experience != other.Experience) return false;
          if (LastHits != other.LastHits) return false;
          if (Denies != other.Denies) return false;
          if (NetWorth != other.NetWorth) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IdleTime, other.IdleTime)) return false;
          if (CommandsIssued != other.CommandsIssued) return false;
          if (SentryWardsPlaced != other.SentryWardsPlaced) return false;
          if (ObserverWardsPlaced != other.ObserverWardsPlaced) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasGameTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameTime);
          if (HasKills) hash ^= Kills.GetHashCode();
          if (HasDeaths) hash ^= Deaths.GetHashCode();
          if (HasAssists) hash ^= Assists.GetHashCode();
          if (HasExperience) hash ^= Experience.GetHashCode();
          if (HasLastHits) hash ^= LastHits.GetHashCode();
          if (HasDenies) hash ^= Denies.GetHashCode();
          if (HasNetWorth) hash ^= NetWorth.GetHashCode();
          if (HasIdleTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IdleTime);
          if (HasCommandsIssued) hash ^= CommandsIssued.GetHashCode();
          if (HasSentryWardsPlaced) hash ^= SentryWardsPlaced.GetHashCode();
          if (HasObserverWardsPlaced) hash ^= ObserverWardsPlaced.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasGameTime) {
            output.WriteRawTag(13);
            output.WriteFloat(GameTime);
          }
          if (HasKills) {
            output.WriteRawTag(16);
            output.WriteUInt32(Kills);
          }
          if (HasDeaths) {
            output.WriteRawTag(24);
            output.WriteUInt32(Deaths);
          }
          if (HasAssists) {
            output.WriteRawTag(32);
            output.WriteUInt32(Assists);
          }
          if (HasExperience) {
            output.WriteRawTag(40);
            output.WriteUInt32(Experience);
          }
          if (HasLastHits) {
            output.WriteRawTag(48);
            output.WriteUInt32(LastHits);
          }
          if (HasDenies) {
            output.WriteRawTag(56);
            output.WriteUInt32(Denies);
          }
          if (HasNetWorth) {
            output.WriteRawTag(64);
            output.WriteUInt32(NetWorth);
          }
          if (HasIdleTime) {
            output.WriteRawTag(77);
            output.WriteFloat(IdleTime);
          }
          if (HasCommandsIssued) {
            output.WriteRawTag(80);
            output.WriteUInt32(CommandsIssued);
          }
          if (HasSentryWardsPlaced) {
            output.WriteRawTag(88);
            output.WriteUInt32(SentryWardsPlaced);
          }
          if (HasObserverWardsPlaced) {
            output.WriteRawTag(96);
            output.WriteUInt32(ObserverWardsPlaced);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasGameTime) {
            output.WriteRawTag(13);
            output.WriteFloat(GameTime);
          }
          if (HasKills) {
            output.WriteRawTag(16);
            output.WriteUInt32(Kills);
          }
          if (HasDeaths) {
            output.WriteRawTag(24);
            output.WriteUInt32(Deaths);
          }
          if (HasAssists) {
            output.WriteRawTag(32);
            output.WriteUInt32(Assists);
          }
          if (HasExperience) {
            output.WriteRawTag(40);
            output.WriteUInt32(Experience);
          }
          if (HasLastHits) {
            output.WriteRawTag(48);
            output.WriteUInt32(LastHits);
          }
          if (HasDenies) {
            output.WriteRawTag(56);
            output.WriteUInt32(Denies);
          }
          if (HasNetWorth) {
            output.WriteRawTag(64);
            output.WriteUInt32(NetWorth);
          }
          if (HasIdleTime) {
            output.WriteRawTag(77);
            output.WriteFloat(IdleTime);
          }
          if (HasCommandsIssued) {
            output.WriteRawTag(80);
            output.WriteUInt32(CommandsIssued);
          }
          if (HasSentryWardsPlaced) {
            output.WriteRawTag(88);
            output.WriteUInt32(SentryWardsPlaced);
          }
          if (HasObserverWardsPlaced) {
            output.WriteRawTag(96);
            output.WriteUInt32(ObserverWardsPlaced);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasGameTime) {
            size += 1 + 4;
          }
          if (HasKills) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
          }
          if (HasDeaths) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
          }
          if (HasAssists) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
          }
          if (HasExperience) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Experience);
          }
          if (HasLastHits) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
          }
          if (HasDenies) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Denies);
          }
          if (HasNetWorth) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
          }
          if (HasIdleTime) {
            size += 1 + 4;
          }
          if (HasCommandsIssued) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CommandsIssued);
          }
          if (HasSentryWardsPlaced) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SentryWardsPlaced);
          }
          if (HasObserverWardsPlaced) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObserverWardsPlaced);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StatBucket other) {
          if (other == null) {
            return;
          }
          if (other.HasGameTime) {
            GameTime = other.GameTime;
          }
          if (other.HasKills) {
            Kills = other.Kills;
          }
          if (other.HasDeaths) {
            Deaths = other.Deaths;
          }
          if (other.HasAssists) {
            Assists = other.Assists;
          }
          if (other.HasExperience) {
            Experience = other.Experience;
          }
          if (other.HasLastHits) {
            LastHits = other.LastHits;
          }
          if (other.HasDenies) {
            Denies = other.Denies;
          }
          if (other.HasNetWorth) {
            NetWorth = other.NetWorth;
          }
          if (other.HasIdleTime) {
            IdleTime = other.IdleTime;
          }
          if (other.HasCommandsIssued) {
            CommandsIssued = other.CommandsIssued;
          }
          if (other.HasSentryWardsPlaced) {
            SentryWardsPlaced = other.SentryWardsPlaced;
          }
          if (other.HasObserverWardsPlaced) {
            ObserverWardsPlaced = other.ObserverWardsPlaced;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                GameTime = input.ReadFloat();
                break;
              }
              case 16: {
                Kills = input.ReadUInt32();
                break;
              }
              case 24: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 32: {
                Assists = input.ReadUInt32();
                break;
              }
              case 40: {
                Experience = input.ReadUInt32();
                break;
              }
              case 48: {
                LastHits = input.ReadUInt32();
                break;
              }
              case 56: {
                Denies = input.ReadUInt32();
                break;
              }
              case 64: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 77: {
                IdleTime = input.ReadFloat();
                break;
              }
              case 80: {
                CommandsIssued = input.ReadUInt32();
                break;
              }
              case 88: {
                SentryWardsPlaced = input.ReadUInt32();
                break;
              }
              case 96: {
                ObserverWardsPlaced = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                GameTime = input.ReadFloat();
                break;
              }
              case 16: {
                Kills = input.ReadUInt32();
                break;
              }
              case 24: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 32: {
                Assists = input.ReadUInt32();
                break;
              }
              case 40: {
                Experience = input.ReadUInt32();
                break;
              }
              case 48: {
                LastHits = input.ReadUInt32();
                break;
              }
              case 56: {
                Denies = input.ReadUInt32();
                break;
              }
              case 64: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 77: {
                IdleTime = input.ReadFloat();
                break;
              }
              case 80: {
                CommandsIssued = input.ReadUInt32();
                break;
              }
              case 88: {
                SentryWardsPlaced = input.ReadUInt32();
                break;
              }
              case 96: {
                ObserverWardsPlaced = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSteamLearnMatchStateV5 : pb::IMessage<CMsgSteamLearnMatchStateV5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnMatchStateV5> _parser = new pb::MessageParser<CMsgSteamLearnMatchStateV5>(() => new CMsgSteamLearnMatchStateV5());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnMatchStateV5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchStateV5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchStateV5(CMsgSteamLearnMatchStateV5 other) : this() {
      _hasBits0 = other._hasBits0;
      gameTime_ = other.gameTime_;
      radiantState_ = other.radiantState_ != null ? other.radiantState_.Clone() : null;
      direState_ = other.direState_ != null ? other.direState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnMatchStateV5 Clone() {
      return new CMsgSteamLearnMatchStateV5(this);
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 1;
    private readonly static float GameTimeDefaultValue = 0F;

    private float gameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameTime {
      get { if ((_hasBits0 & 1) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gameTime_ = value;
      }
    }
    /// <summary>Gets whether the "game_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "game_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "radiant_state" field.</summary>
    public const int RadiantStateFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState radiantState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState RadiantState {
      get { return radiantState_; }
      set {
        radiantState_ = value;
      }
    }

    /// <summary>Field number for the "dire_state" field.</summary>
    public const int DireStateFieldNumber = 3;
    private global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState direState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState DireState {
      get { return direState_; }
      set {
        direState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnMatchStateV5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnMatchStateV5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameTime, other.GameTime)) return false;
      if (!object.Equals(RadiantState, other.RadiantState)) return false;
      if (!object.Equals(DireState, other.DireState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGameTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameTime);
      if (radiantState_ != null) hash ^= RadiantState.GetHashCode();
      if (direState_ != null) hash ^= DireState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGameTime) {
        output.WriteRawTag(13);
        output.WriteFloat(GameTime);
      }
      if (radiantState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RadiantState);
      }
      if (direState_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DireState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGameTime) {
        output.WriteRawTag(13);
        output.WriteFloat(GameTime);
      }
      if (radiantState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RadiantState);
      }
      if (direState_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DireState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGameTime) {
        size += 1 + 4;
      }
      if (radiantState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RadiantState);
      }
      if (direState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DireState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnMatchStateV5 other) {
      if (other == null) {
        return;
      }
      if (other.HasGameTime) {
        GameTime = other.GameTime;
      }
      if (other.radiantState_ != null) {
        if (radiantState_ == null) {
          RadiantState = new global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState();
        }
        RadiantState.MergeFrom(other.RadiantState);
      }
      if (other.direState_ != null) {
        if (direState_ == null) {
          DireState = new global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState();
        }
        DireState.MergeFrom(other.DireState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            GameTime = input.ReadFloat();
            break;
          }
          case 18: {
            if (radiantState_ == null) {
              RadiantState = new global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState();
            }
            input.ReadMessage(RadiantState);
            break;
          }
          case 26: {
            if (direState_ == null) {
              DireState = new global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState();
            }
            input.ReadMessage(DireState);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            GameTime = input.ReadFloat();
            break;
          }
          case 18: {
            if (radiantState_ == null) {
              RadiantState = new global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState();
            }
            input.ReadMessage(RadiantState);
            break;
          }
          case 26: {
            if (direState_ == null) {
              DireState = new global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.TeamState();
            }
            input.ReadMessage(DireState);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSteamLearnMatchStateV5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerState : pb::IMessage<PlayerState>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState(PlayerState other) : this() {
          _hasBits0 = other._hasBits0;
          heroId_ = other.heroId_;
          netWorth_ = other.netWorth_;
          level_ = other.level_;
          deaths_ = other.deaths_;
          respawnTime_ = other.respawnTime_;
          hasBuyback_ = other.hasBuyback_;
          hasAegis_ = other.hasAegis_;
          hasRapier_ = other.hasRapier_;
          distance_ = other.distance_;
          heroFacet_ = other.heroFacet_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState Clone() {
          return new PlayerState(this);
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 1;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "net_worth" field.</summary>
        public const int NetWorthFieldNumber = 2;
        private readonly static uint NetWorthDefaultValue = 0;

        private uint netWorth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NetWorth {
          get { if ((_hasBits0 & 2) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
          set {
            _hasBits0 |= 2;
            netWorth_ = value;
          }
        }
        /// <summary>Gets whether the "net_worth" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNetWorth {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "net_worth" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNetWorth() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 3;
        private readonly static uint LevelDefaultValue = 0;

        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { if ((_hasBits0 & 4) != 0) { return level_; } else { return LevelDefaultValue; } }
          set {
            _hasBits0 |= 4;
            level_ = value;
          }
        }
        /// <summary>Gets whether the "level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLevel {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLevel() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "deaths" field.</summary>
        public const int DeathsFieldNumber = 4;
        private readonly static uint DeathsDefaultValue = 0;

        private uint deaths_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Deaths {
          get { if ((_hasBits0 & 8) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
          set {
            _hasBits0 |= 8;
            deaths_ = value;
          }
        }
        /// <summary>Gets whether the "deaths" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeaths {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "deaths" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeaths() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "respawn_time" field.</summary>
        public const int RespawnTimeFieldNumber = 5;
        private readonly static uint RespawnTimeDefaultValue = 0;

        private uint respawnTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RespawnTime {
          get { if ((_hasBits0 & 16) != 0) { return respawnTime_; } else { return RespawnTimeDefaultValue; } }
          set {
            _hasBits0 |= 16;
            respawnTime_ = value;
          }
        }
        /// <summary>Gets whether the "respawn_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRespawnTime {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "respawn_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRespawnTime() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "has_buyback" field.</summary>
        public const int HasBuybackFieldNumber = 6;
        private readonly static bool HasBuybackDefaultValue = false;

        private bool hasBuyback_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuyback {
          get { if ((_hasBits0 & 32) != 0) { return hasBuyback_; } else { return HasBuybackDefaultValue; } }
          set {
            _hasBits0 |= 32;
            hasBuyback_ = value;
          }
        }
        /// <summary>Gets whether the "has_buyback" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasBuyback {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "has_buyback" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasBuyback() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "has_aegis" field.</summary>
        public const int HasAegisFieldNumber = 7;
        private readonly static bool HasAegisDefaultValue = false;

        private bool hasAegis_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAegis {
          get { if ((_hasBits0 & 64) != 0) { return hasAegis_; } else { return HasAegisDefaultValue; } }
          set {
            _hasBits0 |= 64;
            hasAegis_ = value;
          }
        }
        /// <summary>Gets whether the "has_aegis" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasAegis {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "has_aegis" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasAegis() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "has_rapier" field.</summary>
        public const int HasRapierFieldNumber = 8;
        private readonly static bool HasRapierDefaultValue = false;

        private bool hasRapier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRapier {
          get { if ((_hasBits0 & 128) != 0) { return hasRapier_; } else { return HasRapierDefaultValue; } }
          set {
            _hasBits0 |= 128;
            hasRapier_ = value;
          }
        }
        /// <summary>Gets whether the "has_rapier" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasRapier {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "has_rapier" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasRapier() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 9;
        private readonly static uint DistanceDefaultValue = 0;

        private uint distance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Distance {
          get { if ((_hasBits0 & 256) != 0) { return distance_; } else { return DistanceDefaultValue; } }
          set {
            _hasBits0 |= 256;
            distance_ = value;
          }
        }
        /// <summary>Gets whether the "distance" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDistance {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "distance" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDistance() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "hero_facet" field.</summary>
        public const int HeroFacetFieldNumber = 10;
        private readonly static uint HeroFacetDefaultValue = 0;

        private uint heroFacet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroFacet {
          get { if ((_hasBits0 & 512) != 0) { return heroFacet_; } else { return HeroFacetDefaultValue; } }
          set {
            _hasBits0 |= 512;
            heroFacet_ = value;
          }
        }
        /// <summary>Gets whether the "hero_facet" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroFacet {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "hero_facet" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroFacet() {
          _hasBits0 &= ~512;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HeroId != other.HeroId) return false;
          if (NetWorth != other.NetWorth) return false;
          if (Level != other.Level) return false;
          if (Deaths != other.Deaths) return false;
          if (RespawnTime != other.RespawnTime) return false;
          if (HasBuyback != other.HasBuyback) return false;
          if (HasAegis != other.HasAegis) return false;
          if (HasRapier != other.HasRapier) return false;
          if (Distance != other.Distance) return false;
          if (HeroFacet != other.HeroFacet) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasNetWorth) hash ^= NetWorth.GetHashCode();
          if (HasLevel) hash ^= Level.GetHashCode();
          if (HasDeaths) hash ^= Deaths.GetHashCode();
          if (HasRespawnTime) hash ^= RespawnTime.GetHashCode();
          if (HasHasBuyback) hash ^= HasBuyback.GetHashCode();
          if (HasHasAegis) hash ^= HasAegis.GetHashCode();
          if (HasHasRapier) hash ^= HasRapier.GetHashCode();
          if (HasDistance) hash ^= Distance.GetHashCode();
          if (HasHeroFacet) hash ^= HeroFacet.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasHeroId) {
            output.WriteRawTag(8);
            output.WriteInt32(HeroId);
          }
          if (HasNetWorth) {
            output.WriteRawTag(16);
            output.WriteUInt32(NetWorth);
          }
          if (HasLevel) {
            output.WriteRawTag(24);
            output.WriteUInt32(Level);
          }
          if (HasDeaths) {
            output.WriteRawTag(32);
            output.WriteUInt32(Deaths);
          }
          if (HasRespawnTime) {
            output.WriteRawTag(40);
            output.WriteUInt32(RespawnTime);
          }
          if (HasHasBuyback) {
            output.WriteRawTag(48);
            output.WriteBool(HasBuyback);
          }
          if (HasHasAegis) {
            output.WriteRawTag(56);
            output.WriteBool(HasAegis);
          }
          if (HasHasRapier) {
            output.WriteRawTag(64);
            output.WriteBool(HasRapier);
          }
          if (HasDistance) {
            output.WriteRawTag(72);
            output.WriteUInt32(Distance);
          }
          if (HasHeroFacet) {
            output.WriteRawTag(80);
            output.WriteUInt32(HeroFacet);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasHeroId) {
            output.WriteRawTag(8);
            output.WriteInt32(HeroId);
          }
          if (HasNetWorth) {
            output.WriteRawTag(16);
            output.WriteUInt32(NetWorth);
          }
          if (HasLevel) {
            output.WriteRawTag(24);
            output.WriteUInt32(Level);
          }
          if (HasDeaths) {
            output.WriteRawTag(32);
            output.WriteUInt32(Deaths);
          }
          if (HasRespawnTime) {
            output.WriteRawTag(40);
            output.WriteUInt32(RespawnTime);
          }
          if (HasHasBuyback) {
            output.WriteRawTag(48);
            output.WriteBool(HasBuyback);
          }
          if (HasHasAegis) {
            output.WriteRawTag(56);
            output.WriteBool(HasAegis);
          }
          if (HasHasRapier) {
            output.WriteRawTag(64);
            output.WriteBool(HasRapier);
          }
          if (HasDistance) {
            output.WriteRawTag(72);
            output.WriteUInt32(Distance);
          }
          if (HasHeroFacet) {
            output.WriteRawTag(80);
            output.WriteUInt32(HeroFacet);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasNetWorth) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
          }
          if (HasLevel) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (HasDeaths) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
          }
          if (HasRespawnTime) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RespawnTime);
          }
          if (HasHasBuyback) {
            size += 1 + 1;
          }
          if (HasHasAegis) {
            size += 1 + 1;
          }
          if (HasHasRapier) {
            size += 1 + 1;
          }
          if (HasDistance) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Distance);
          }
          if (HasHeroFacet) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroFacet);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerState other) {
          if (other == null) {
            return;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasNetWorth) {
            NetWorth = other.NetWorth;
          }
          if (other.HasLevel) {
            Level = other.Level;
          }
          if (other.HasDeaths) {
            Deaths = other.Deaths;
          }
          if (other.HasRespawnTime) {
            RespawnTime = other.RespawnTime;
          }
          if (other.HasHasBuyback) {
            HasBuyback = other.HasBuyback;
          }
          if (other.HasHasAegis) {
            HasAegis = other.HasAegis;
          }
          if (other.HasHasRapier) {
            HasRapier = other.HasRapier;
          }
          if (other.HasDistance) {
            Distance = other.Distance;
          }
          if (other.HasHeroFacet) {
            HeroFacet = other.HeroFacet;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                HeroId = input.ReadInt32();
                break;
              }
              case 16: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 24: {
                Level = input.ReadUInt32();
                break;
              }
              case 32: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 40: {
                RespawnTime = input.ReadUInt32();
                break;
              }
              case 48: {
                HasBuyback = input.ReadBool();
                break;
              }
              case 56: {
                HasAegis = input.ReadBool();
                break;
              }
              case 64: {
                HasRapier = input.ReadBool();
                break;
              }
              case 72: {
                Distance = input.ReadUInt32();
                break;
              }
              case 80: {
                HeroFacet = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                HeroId = input.ReadInt32();
                break;
              }
              case 16: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 24: {
                Level = input.ReadUInt32();
                break;
              }
              case 32: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 40: {
                RespawnTime = input.ReadUInt32();
                break;
              }
              case 48: {
                HasBuyback = input.ReadBool();
                break;
              }
              case 56: {
                HasAegis = input.ReadBool();
                break;
              }
              case 64: {
                HasRapier = input.ReadBool();
                break;
              }
              case 72: {
                Distance = input.ReadUInt32();
                break;
              }
              case 80: {
                HeroFacet = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class TeamState : pb::IMessage<TeamState>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TeamState> _parser = new pb::MessageParser<TeamState>(() => new TeamState());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TeamState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamState(TeamState other) : this() {
          _hasBits0 = other._hasBits0;
          team_ = other.team_;
          playerStates_ = other.playerStates_.Clone();
          towerHealthPct_ = other.towerHealthPct_.Clone();
          barracksHealthPct_ = other.barracksHealthPct_.Clone();
          ancientHealthPct_ = other.ancientHealthPct_;
          glyphCooldown_ = other.glyphCooldown_;
          kills_ = other.kills_;
          creepDistanceSafe_ = other.creepDistanceSafe_;
          creepDistanceMid_ = other.creepDistanceMid_;
          creepDistanceOff_ = other.creepDistanceOff_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamState Clone() {
          return new TeamState(this);
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 1;
        private readonly static uint TeamDefaultValue = 0;

        private uint team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team {
          get { if ((_hasBits0 & 1) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 1;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "player_states" field.</summary>
        public const int PlayerStatesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.PlayerState> _repeated_playerStates_codec
            = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.PlayerState.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.PlayerState> playerStates_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.PlayerState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnMatchStateV5.Types.PlayerState> PlayerStates {
          get { return playerStates_; }
        }

        /// <summary>Field number for the "tower_health_pct" field.</summary>
        public const int TowerHealthPctFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_towerHealthPct_codec
            = pb::FieldCodec.ForUInt32(24);
        private readonly pbc::RepeatedField<uint> towerHealthPct_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> TowerHealthPct {
          get { return towerHealthPct_; }
        }

        /// <summary>Field number for the "barracks_health_pct" field.</summary>
        public const int BarracksHealthPctFieldNumber = 4;
        private static readonly pb::FieldCodec<uint> _repeated_barracksHealthPct_codec
            = pb::FieldCodec.ForUInt32(32);
        private readonly pbc::RepeatedField<uint> barracksHealthPct_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> BarracksHealthPct {
          get { return barracksHealthPct_; }
        }

        /// <summary>Field number for the "ancient_health_pct" field.</summary>
        public const int AncientHealthPctFieldNumber = 5;
        private readonly static uint AncientHealthPctDefaultValue = 0;

        private uint ancientHealthPct_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AncientHealthPct {
          get { if ((_hasBits0 & 2) != 0) { return ancientHealthPct_; } else { return AncientHealthPctDefaultValue; } }
          set {
            _hasBits0 |= 2;
            ancientHealthPct_ = value;
          }
        }
        /// <summary>Gets whether the "ancient_health_pct" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAncientHealthPct {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "ancient_health_pct" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAncientHealthPct() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "glyph_cooldown" field.</summary>
        public const int GlyphCooldownFieldNumber = 6;
        private readonly static uint GlyphCooldownDefaultValue = 0;

        private uint glyphCooldown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GlyphCooldown {
          get { if ((_hasBits0 & 4) != 0) { return glyphCooldown_; } else { return GlyphCooldownDefaultValue; } }
          set {
            _hasBits0 |= 4;
            glyphCooldown_ = value;
          }
        }
        /// <summary>Gets whether the "glyph_cooldown" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGlyphCooldown {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "glyph_cooldown" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGlyphCooldown() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 7;
        private readonly static uint KillsDefaultValue = 0;

        private uint kills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Kills {
          get { if ((_hasBits0 & 8) != 0) { return kills_; } else { return KillsDefaultValue; } }
          set {
            _hasBits0 |= 8;
            kills_ = value;
          }
        }
        /// <summary>Gets whether the "kills" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKills {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "kills" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKills() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "creep_distance_safe" field.</summary>
        public const int CreepDistanceSafeFieldNumber = 8;
        private readonly static uint CreepDistanceSafeDefaultValue = 0;

        private uint creepDistanceSafe_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreepDistanceSafe {
          get { if ((_hasBits0 & 16) != 0) { return creepDistanceSafe_; } else { return CreepDistanceSafeDefaultValue; } }
          set {
            _hasBits0 |= 16;
            creepDistanceSafe_ = value;
          }
        }
        /// <summary>Gets whether the "creep_distance_safe" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreepDistanceSafe {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "creep_distance_safe" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreepDistanceSafe() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "creep_distance_mid" field.</summary>
        public const int CreepDistanceMidFieldNumber = 9;
        private readonly static uint CreepDistanceMidDefaultValue = 0;

        private uint creepDistanceMid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreepDistanceMid {
          get { if ((_hasBits0 & 32) != 0) { return creepDistanceMid_; } else { return CreepDistanceMidDefaultValue; } }
          set {
            _hasBits0 |= 32;
            creepDistanceMid_ = value;
          }
        }
        /// <summary>Gets whether the "creep_distance_mid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreepDistanceMid {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "creep_distance_mid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreepDistanceMid() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "creep_distance_off" field.</summary>
        public const int CreepDistanceOffFieldNumber = 10;
        private readonly static uint CreepDistanceOffDefaultValue = 0;

        private uint creepDistanceOff_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreepDistanceOff {
          get { if ((_hasBits0 & 64) != 0) { return creepDistanceOff_; } else { return CreepDistanceOffDefaultValue; } }
          set {
            _hasBits0 |= 64;
            creepDistanceOff_ = value;
          }
        }
        /// <summary>Gets whether the "creep_distance_off" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreepDistanceOff {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "creep_distance_off" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreepDistanceOff() {
          _hasBits0 &= ~64;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TeamState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TeamState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Team != other.Team) return false;
          if(!playerStates_.Equals(other.playerStates_)) return false;
          if(!towerHealthPct_.Equals(other.towerHealthPct_)) return false;
          if(!barracksHealthPct_.Equals(other.barracksHealthPct_)) return false;
          if (AncientHealthPct != other.AncientHealthPct) return false;
          if (GlyphCooldown != other.GlyphCooldown) return false;
          if (Kills != other.Kills) return false;
          if (CreepDistanceSafe != other.CreepDistanceSafe) return false;
          if (CreepDistanceMid != other.CreepDistanceMid) return false;
          if (CreepDistanceOff != other.CreepDistanceOff) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTeam) hash ^= Team.GetHashCode();
          hash ^= playerStates_.GetHashCode();
          hash ^= towerHealthPct_.GetHashCode();
          hash ^= barracksHealthPct_.GetHashCode();
          if (HasAncientHealthPct) hash ^= AncientHealthPct.GetHashCode();
          if (HasGlyphCooldown) hash ^= GlyphCooldown.GetHashCode();
          if (HasKills) hash ^= Kills.GetHashCode();
          if (HasCreepDistanceSafe) hash ^= CreepDistanceSafe.GetHashCode();
          if (HasCreepDistanceMid) hash ^= CreepDistanceMid.GetHashCode();
          if (HasCreepDistanceOff) hash ^= CreepDistanceOff.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasTeam) {
            output.WriteRawTag(8);
            output.WriteUInt32(Team);
          }
          playerStates_.WriteTo(output, _repeated_playerStates_codec);
          towerHealthPct_.WriteTo(output, _repeated_towerHealthPct_codec);
          barracksHealthPct_.WriteTo(output, _repeated_barracksHealthPct_codec);
          if (HasAncientHealthPct) {
            output.WriteRawTag(40);
            output.WriteUInt32(AncientHealthPct);
          }
          if (HasGlyphCooldown) {
            output.WriteRawTag(48);
            output.WriteUInt32(GlyphCooldown);
          }
          if (HasKills) {
            output.WriteRawTag(56);
            output.WriteUInt32(Kills);
          }
          if (HasCreepDistanceSafe) {
            output.WriteRawTag(64);
            output.WriteUInt32(CreepDistanceSafe);
          }
          if (HasCreepDistanceMid) {
            output.WriteRawTag(72);
            output.WriteUInt32(CreepDistanceMid);
          }
          if (HasCreepDistanceOff) {
            output.WriteRawTag(80);
            output.WriteUInt32(CreepDistanceOff);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasTeam) {
            output.WriteRawTag(8);
            output.WriteUInt32(Team);
          }
          playerStates_.WriteTo(ref output, _repeated_playerStates_codec);
          towerHealthPct_.WriteTo(ref output, _repeated_towerHealthPct_codec);
          barracksHealthPct_.WriteTo(ref output, _repeated_barracksHealthPct_codec);
          if (HasAncientHealthPct) {
            output.WriteRawTag(40);
            output.WriteUInt32(AncientHealthPct);
          }
          if (HasGlyphCooldown) {
            output.WriteRawTag(48);
            output.WriteUInt32(GlyphCooldown);
          }
          if (HasKills) {
            output.WriteRawTag(56);
            output.WriteUInt32(Kills);
          }
          if (HasCreepDistanceSafe) {
            output.WriteRawTag(64);
            output.WriteUInt32(CreepDistanceSafe);
          }
          if (HasCreepDistanceMid) {
            output.WriteRawTag(72);
            output.WriteUInt32(CreepDistanceMid);
          }
          if (HasCreepDistanceOff) {
            output.WriteRawTag(80);
            output.WriteUInt32(CreepDistanceOff);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
          }
          size += playerStates_.CalculateSize(_repeated_playerStates_codec);
          size += towerHealthPct_.CalculateSize(_repeated_towerHealthPct_codec);
          size += barracksHealthPct_.CalculateSize(_repeated_barracksHealthPct_codec);
          if (HasAncientHealthPct) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AncientHealthPct);
          }
          if (HasGlyphCooldown) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlyphCooldown);
          }
          if (HasKills) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
          }
          if (HasCreepDistanceSafe) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreepDistanceSafe);
          }
          if (HasCreepDistanceMid) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreepDistanceMid);
          }
          if (HasCreepDistanceOff) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreepDistanceOff);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TeamState other) {
          if (other == null) {
            return;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          playerStates_.Add(other.playerStates_);
          towerHealthPct_.Add(other.towerHealthPct_);
          barracksHealthPct_.Add(other.barracksHealthPct_);
          if (other.HasAncientHealthPct) {
            AncientHealthPct = other.AncientHealthPct;
          }
          if (other.HasGlyphCooldown) {
            GlyphCooldown = other.GlyphCooldown;
          }
          if (other.HasKills) {
            Kills = other.Kills;
          }
          if (other.HasCreepDistanceSafe) {
            CreepDistanceSafe = other.CreepDistanceSafe;
          }
          if (other.HasCreepDistanceMid) {
            CreepDistanceMid = other.CreepDistanceMid;
          }
          if (other.HasCreepDistanceOff) {
            CreepDistanceOff = other.CreepDistanceOff;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Team = input.ReadUInt32();
                break;
              }
              case 18: {
                playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
                break;
              }
              case 26:
              case 24: {
                towerHealthPct_.AddEntriesFrom(input, _repeated_towerHealthPct_codec);
                break;
              }
              case 34:
              case 32: {
                barracksHealthPct_.AddEntriesFrom(input, _repeated_barracksHealthPct_codec);
                break;
              }
              case 40: {
                AncientHealthPct = input.ReadUInt32();
                break;
              }
              case 48: {
                GlyphCooldown = input.ReadUInt32();
                break;
              }
              case 56: {
                Kills = input.ReadUInt32();
                break;
              }
              case 64: {
                CreepDistanceSafe = input.ReadUInt32();
                break;
              }
              case 72: {
                CreepDistanceMid = input.ReadUInt32();
                break;
              }
              case 80: {
                CreepDistanceOff = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Team = input.ReadUInt32();
                break;
              }
              case 18: {
                playerStates_.AddEntriesFrom(ref input, _repeated_playerStates_codec);
                break;
              }
              case 26:
              case 24: {
                towerHealthPct_.AddEntriesFrom(ref input, _repeated_towerHealthPct_codec);
                break;
              }
              case 34:
              case 32: {
                barracksHealthPct_.AddEntriesFrom(ref input, _repeated_barracksHealthPct_codec);
                break;
              }
              case 40: {
                AncientHealthPct = input.ReadUInt32();
                break;
              }
              case 48: {
                GlyphCooldown = input.ReadUInt32();
                break;
              }
              case 56: {
                Kills = input.ReadUInt32();
                break;
              }
              case 64: {
                CreepDistanceSafe = input.ReadUInt32();
                break;
              }
              case 72: {
                CreepDistanceMid = input.ReadUInt32();
                break;
              }
              case 80: {
                CreepDistanceOff = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSteamLearnItemPurchaseV7 : pb::IMessage<CMsgSteamLearnItemPurchaseV7>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnItemPurchaseV7> _parser = new pb::MessageParser<CMsgSteamLearnItemPurchaseV7>(() => new CMsgSteamLearnItemPurchaseV7());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnItemPurchaseV7> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnItemPurchaseV7() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnItemPurchaseV7(CMsgSteamLearnItemPurchaseV7 other) : this() {
      _hasBits0 = other._hasBits0;
      itemId_ = other.itemId_;
      purchaseHistory_ = other.purchaseHistory_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnItemPurchaseV7 Clone() {
      return new CMsgSteamLearnItemPurchaseV7(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private readonly static int ItemIdDefaultValue = -1;

    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { if ((_hasBits0 & 1) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "purchase_history" field.</summary>
    public const int PurchaseHistoryFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_purchaseHistory_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> purchaseHistory_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PurchaseHistory {
      get { return purchaseHistory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnItemPurchaseV7);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnItemPurchaseV7 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if(!purchaseHistory_.Equals(other.purchaseHistory_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemId) hash ^= ItemId.GetHashCode();
      hash ^= purchaseHistory_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemId) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      purchaseHistory_.WriteTo(output, _repeated_purchaseHistory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemId) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      purchaseHistory_.WriteTo(ref output, _repeated_purchaseHistory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      size += purchaseHistory_.CalculateSize(_repeated_purchaseHistory_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnItemPurchaseV7 other) {
      if (other == null) {
        return;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      purchaseHistory_.Add(other.purchaseHistory_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            purchaseHistory_.AddEntriesFrom(input, _repeated_purchaseHistory_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            purchaseHistory_.AddEntriesFrom(ref input, _repeated_purchaseHistory_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSteamLearnPreGameItemPurchases : pb::IMessage<CMsgSteamLearnPreGameItemPurchases>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnPreGameItemPurchases> _parser = new pb::MessageParser<CMsgSteamLearnPreGameItemPurchases>(() => new CMsgSteamLearnPreGameItemPurchases());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnPreGameItemPurchases> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPreGameItemPurchases() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPreGameItemPurchases(CMsgSteamLearnPreGameItemPurchases other) : this() {
      _hasBits0 = other._hasBits0;
      itemIds_ = other.itemIds_.Clone();
      isRadiantTeam_ = other.isRadiantTeam_;
      isUsingDotaPlus_ = other.isUsingDotaPlus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPreGameItemPurchases Clone() {
      return new CMsgSteamLearnPreGameItemPurchases(this);
    }

    /// <summary>Field number for the "item_ids" field.</summary>
    public const int ItemIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_itemIds_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> itemIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "is_radiant_team" field.</summary>
    public const int IsRadiantTeamFieldNumber = 2;
    private readonly static uint IsRadiantTeamDefaultValue = 0;

    private uint isRadiantTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsRadiantTeam {
      get { if ((_hasBits0 & 1) != 0) { return isRadiantTeam_; } else { return IsRadiantTeamDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isRadiantTeam_ = value;
      }
    }
    /// <summary>Gets whether the "is_radiant_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsRadiantTeam {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_radiant_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsRadiantTeam() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_using_dota_plus" field.</summary>
    public const int IsUsingDotaPlusFieldNumber = 3;
    private readonly static bool IsUsingDotaPlusDefaultValue = false;

    private bool isUsingDotaPlus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUsingDotaPlus {
      get { if ((_hasBits0 & 2) != 0) { return isUsingDotaPlus_; } else { return IsUsingDotaPlusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isUsingDotaPlus_ = value;
      }
    }
    /// <summary>Gets whether the "is_using_dota_plus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsUsingDotaPlus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_using_dota_plus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsUsingDotaPlus() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnPreGameItemPurchases);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnPreGameItemPurchases other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemIds_.Equals(other.itemIds_)) return false;
      if (IsRadiantTeam != other.IsRadiantTeam) return false;
      if (IsUsingDotaPlus != other.IsUsingDotaPlus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemIds_.GetHashCode();
      if (HasIsRadiantTeam) hash ^= IsRadiantTeam.GetHashCode();
      if (HasIsUsingDotaPlus) hash ^= IsUsingDotaPlus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      if (HasIsRadiantTeam) {
        output.WriteRawTag(16);
        output.WriteUInt32(IsRadiantTeam);
      }
      if (HasIsUsingDotaPlus) {
        output.WriteRawTag(24);
        output.WriteBool(IsUsingDotaPlus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      itemIds_.WriteTo(ref output, _repeated_itemIds_codec);
      if (HasIsRadiantTeam) {
        output.WriteRawTag(16);
        output.WriteUInt32(IsRadiantTeam);
      }
      if (HasIsUsingDotaPlus) {
        output.WriteRawTag(24);
        output.WriteBool(IsUsingDotaPlus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      if (HasIsRadiantTeam) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsRadiantTeam);
      }
      if (HasIsUsingDotaPlus) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnPreGameItemPurchases other) {
      if (other == null) {
        return;
      }
      itemIds_.Add(other.itemIds_);
      if (other.HasIsRadiantTeam) {
        IsRadiantTeam = other.IsRadiantTeam;
      }
      if (other.HasIsUsingDotaPlus) {
        IsUsingDotaPlus = other.IsUsingDotaPlus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 16: {
            IsRadiantTeam = input.ReadUInt32();
            break;
          }
          case 24: {
            IsUsingDotaPlus = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            itemIds_.AddEntriesFrom(ref input, _repeated_itemIds_codec);
            break;
          }
          case 16: {
            IsRadiantTeam = input.ReadUInt32();
            break;
          }
          case 24: {
            IsUsingDotaPlus = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSteamLearnPreGameItemPurchase : pb::IMessage<CMsgSteamLearnPreGameItemPurchase>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnPreGameItemPurchase> _parser = new pb::MessageParser<CMsgSteamLearnPreGameItemPurchase>(() => new CMsgSteamLearnPreGameItemPurchase());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnPreGameItemPurchase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPreGameItemPurchase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPreGameItemPurchase(CMsgSteamLearnPreGameItemPurchase other) : this() {
      _hasBits0 = other._hasBits0;
      purchaseHistory_ = other.purchaseHistory_.Clone();
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPreGameItemPurchase Clone() {
      return new CMsgSteamLearnPreGameItemPurchase(this);
    }

    /// <summary>Field number for the "purchase_history" field.</summary>
    public const int PurchaseHistoryFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_purchaseHistory_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> purchaseHistory_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PurchaseHistory {
      get { return purchaseHistory_; }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private readonly static int ItemIdDefaultValue = -1;

    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { if ((_hasBits0 & 1) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnPreGameItemPurchase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnPreGameItemPurchase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!purchaseHistory_.Equals(other.purchaseHistory_)) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= purchaseHistory_.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      purchaseHistory_.WriteTo(output, _repeated_purchaseHistory_codec);
      if (HasItemId) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      purchaseHistory_.WriteTo(ref output, _repeated_purchaseHistory_codec);
      if (HasItemId) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += purchaseHistory_.CalculateSize(_repeated_purchaseHistory_codec);
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnPreGameItemPurchase other) {
      if (other == null) {
        return;
      }
      purchaseHistory_.Add(other.purchaseHistory_);
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            purchaseHistory_.AddEntriesFrom(input, _repeated_purchaseHistory_codec);
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            purchaseHistory_.AddEntriesFrom(ref input, _repeated_purchaseHistory_codec);
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSteamLearnNeutralItemPurchaseV4 : pb::IMessage<CMsgSteamLearnNeutralItemPurchaseV4>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnNeutralItemPurchaseV4> _parser = new pb::MessageParser<CMsgSteamLearnNeutralItemPurchaseV4>(() => new CMsgSteamLearnNeutralItemPurchaseV4());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnNeutralItemPurchaseV4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnNeutralItemPurchaseV4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnNeutralItemPurchaseV4(CMsgSteamLearnNeutralItemPurchaseV4 other) : this() {
      _hasBits0 = other._hasBits0;
      tier_ = other.tier_;
      trinketOptions_ = other.trinketOptions_.Clone();
      enhancementOptions_ = other.enhancementOptions_.Clone();
      trinketId_ = other.trinketId_;
      enhancementId_ = other.enhancementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnNeutralItemPurchaseV4 Clone() {
      return new CMsgSteamLearnNeutralItemPurchaseV4(this);
    }

    /// <summary>Field number for the "tier" field.</summary>
    public const int TierFieldNumber = 1;
    private readonly static uint TierDefaultValue = 0;

    private uint tier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tier {
      get { if ((_hasBits0 & 1) != 0) { return tier_; } else { return TierDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tier_ = value;
      }
    }
    /// <summary>Gets whether the "tier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTier {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTier() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "trinket_options" field.</summary>
    public const int TrinketOptionsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_trinketOptions_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> trinketOptions_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TrinketOptions {
      get { return trinketOptions_; }
    }

    /// <summary>Field number for the "enhancement_options" field.</summary>
    public const int EnhancementOptionsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_enhancementOptions_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> enhancementOptions_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EnhancementOptions {
      get { return enhancementOptions_; }
    }

    /// <summary>Field number for the "trinket_id" field.</summary>
    public const int TrinketIdFieldNumber = 4;
    private readonly static int TrinketIdDefaultValue = -1;

    private int trinketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrinketId {
      get { if ((_hasBits0 & 2) != 0) { return trinketId_; } else { return TrinketIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        trinketId_ = value;
      }
    }
    /// <summary>Gets whether the "trinket_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrinketId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "trinket_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrinketId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "enhancement_id" field.</summary>
    public const int EnhancementIdFieldNumber = 5;
    private readonly static int EnhancementIdDefaultValue = -1;

    private int enhancementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnhancementId {
      get { if ((_hasBits0 & 4) != 0) { return enhancementId_; } else { return EnhancementIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        enhancementId_ = value;
      }
    }
    /// <summary>Gets whether the "enhancement_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnhancementId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "enhancement_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnhancementId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnNeutralItemPurchaseV4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnNeutralItemPurchaseV4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tier != other.Tier) return false;
      if(!trinketOptions_.Equals(other.trinketOptions_)) return false;
      if(!enhancementOptions_.Equals(other.enhancementOptions_)) return false;
      if (TrinketId != other.TrinketId) return false;
      if (EnhancementId != other.EnhancementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTier) hash ^= Tier.GetHashCode();
      hash ^= trinketOptions_.GetHashCode();
      hash ^= enhancementOptions_.GetHashCode();
      if (HasTrinketId) hash ^= TrinketId.GetHashCode();
      if (HasEnhancementId) hash ^= EnhancementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTier) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tier);
      }
      trinketOptions_.WriteTo(output, _repeated_trinketOptions_codec);
      enhancementOptions_.WriteTo(output, _repeated_enhancementOptions_codec);
      if (HasTrinketId) {
        output.WriteRawTag(32);
        output.WriteInt32(TrinketId);
      }
      if (HasEnhancementId) {
        output.WriteRawTag(40);
        output.WriteInt32(EnhancementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTier) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tier);
      }
      trinketOptions_.WriteTo(ref output, _repeated_trinketOptions_codec);
      enhancementOptions_.WriteTo(ref output, _repeated_enhancementOptions_codec);
      if (HasTrinketId) {
        output.WriteRawTag(32);
        output.WriteInt32(TrinketId);
      }
      if (HasEnhancementId) {
        output.WriteRawTag(40);
        output.WriteInt32(EnhancementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTier) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tier);
      }
      size += trinketOptions_.CalculateSize(_repeated_trinketOptions_codec);
      size += enhancementOptions_.CalculateSize(_repeated_enhancementOptions_codec);
      if (HasTrinketId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrinketId);
      }
      if (HasEnhancementId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnhancementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnNeutralItemPurchaseV4 other) {
      if (other == null) {
        return;
      }
      if (other.HasTier) {
        Tier = other.Tier;
      }
      trinketOptions_.Add(other.trinketOptions_);
      enhancementOptions_.Add(other.enhancementOptions_);
      if (other.HasTrinketId) {
        TrinketId = other.TrinketId;
      }
      if (other.HasEnhancementId) {
        EnhancementId = other.EnhancementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tier = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            trinketOptions_.AddEntriesFrom(input, _repeated_trinketOptions_codec);
            break;
          }
          case 26:
          case 24: {
            enhancementOptions_.AddEntriesFrom(input, _repeated_enhancementOptions_codec);
            break;
          }
          case 32: {
            TrinketId = input.ReadInt32();
            break;
          }
          case 40: {
            EnhancementId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Tier = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            trinketOptions_.AddEntriesFrom(ref input, _repeated_trinketOptions_codec);
            break;
          }
          case 26:
          case 24: {
            enhancementOptions_.AddEntriesFrom(ref input, _repeated_enhancementOptions_codec);
            break;
          }
          case 32: {
            TrinketId = input.ReadInt32();
            break;
          }
          case 40: {
            EnhancementId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSteamLearnAbilitySkill : pb::IMessage<CMsgSteamLearnAbilitySkill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnAbilitySkill> _parser = new pb::MessageParser<CMsgSteamLearnAbilitySkill>(() => new CMsgSteamLearnAbilitySkill());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnAbilitySkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnAbilitySkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnAbilitySkill(CMsgSteamLearnAbilitySkill other) : this() {
      _hasBits0 = other._hasBits0;
      abilityId_ = other.abilityId_;
      skilledAbilities_ = other.skilledAbilities_.Clone();
      gameTime_ = other.gameTime_;
      isUsingDotaPlus_ = other.isUsingDotaPlus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnAbilitySkill Clone() {
      return new CMsgSteamLearnAbilitySkill(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private readonly static int AbilityIdDefaultValue = -1;

    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        abilityId_ = value;
      }
    }
    /// <summary>Gets whether the "ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skilled_abilities" field.</summary>
    public const int SkilledAbilitiesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_skilledAbilities_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> skilledAbilities_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SkilledAbilities {
      get { return skilledAbilities_; }
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 3;
    private readonly static float GameTimeDefaultValue = 0F;

    private float gameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameTime {
      get { if ((_hasBits0 & 2) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gameTime_ = value;
      }
    }
    /// <summary>Gets whether the "game_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "game_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_using_dota_plus" field.</summary>
    public const int IsUsingDotaPlusFieldNumber = 4;
    private readonly static bool IsUsingDotaPlusDefaultValue = false;

    private bool isUsingDotaPlus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUsingDotaPlus {
      get { if ((_hasBits0 & 4) != 0) { return isUsingDotaPlus_; } else { return IsUsingDotaPlusDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isUsingDotaPlus_ = value;
      }
    }
    /// <summary>Gets whether the "is_using_dota_plus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsUsingDotaPlus {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_using_dota_plus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsUsingDotaPlus() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnAbilitySkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnAbilitySkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if(!skilledAbilities_.Equals(other.skilledAbilities_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameTime, other.GameTime)) return false;
      if (IsUsingDotaPlus != other.IsUsingDotaPlus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAbilityId) hash ^= AbilityId.GetHashCode();
      hash ^= skilledAbilities_.GetHashCode();
      if (HasGameTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameTime);
      if (HasIsUsingDotaPlus) hash ^= IsUsingDotaPlus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAbilityId) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      skilledAbilities_.WriteTo(output, _repeated_skilledAbilities_codec);
      if (HasGameTime) {
        output.WriteRawTag(29);
        output.WriteFloat(GameTime);
      }
      if (HasIsUsingDotaPlus) {
        output.WriteRawTag(32);
        output.WriteBool(IsUsingDotaPlus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAbilityId) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      skilledAbilities_.WriteTo(ref output, _repeated_skilledAbilities_codec);
      if (HasGameTime) {
        output.WriteRawTag(29);
        output.WriteFloat(GameTime);
      }
      if (HasIsUsingDotaPlus) {
        output.WriteRawTag(32);
        output.WriteBool(IsUsingDotaPlus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      size += skilledAbilities_.CalculateSize(_repeated_skilledAbilities_codec);
      if (HasGameTime) {
        size += 1 + 4;
      }
      if (HasIsUsingDotaPlus) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnAbilitySkill other) {
      if (other == null) {
        return;
      }
      if (other.HasAbilityId) {
        AbilityId = other.AbilityId;
      }
      skilledAbilities_.Add(other.skilledAbilities_);
      if (other.HasGameTime) {
        GameTime = other.GameTime;
      }
      if (other.HasIsUsingDotaPlus) {
        IsUsingDotaPlus = other.IsUsingDotaPlus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            skilledAbilities_.AddEntriesFrom(input, _repeated_skilledAbilities_codec);
            break;
          }
          case 29: {
            GameTime = input.ReadFloat();
            break;
          }
          case 32: {
            IsUsingDotaPlus = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            skilledAbilities_.AddEntriesFrom(ref input, _repeated_skilledAbilities_codec);
            break;
          }
          case 29: {
            GameTime = input.ReadFloat();
            break;
          }
          case 32: {
            IsUsingDotaPlus = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSteamLearnWardPlacement : pb::IMessage<CMsgSteamLearnWardPlacement>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnWardPlacement> _parser = new pb::MessageParser<CMsgSteamLearnWardPlacement>(() => new CMsgSteamLearnWardPlacement());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnWardPlacement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnWardPlacement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnWardPlacement(CMsgSteamLearnWardPlacement other) : this() {
      _hasBits0 = other._hasBits0;
      wardLoc_ = other.wardLoc_ != null ? other.wardLoc_.Clone() : null;
      existingWardLocs_ = other.existingWardLocs_.Clone();
      team_ = other.team_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnWardPlacement Clone() {
      return new CMsgSteamLearnWardPlacement(this);
    }

    /// <summary>Field number for the "ward_loc" field.</summary>
    public const int WardLocFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location wardLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location WardLoc {
      get { return wardLoc_; }
      set {
        wardLoc_ = value;
      }
    }

    /// <summary>Field number for the "existing_ward_locs" field.</summary>
    public const int ExistingWardLocsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location> _repeated_existingWardLocs_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location> existingWardLocs_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location> ExistingWardLocs {
      get { return existingWardLocs_; }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 3;
    private readonly static uint TeamDefaultValue = 0;

    private uint team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Team {
      get { if ((_hasBits0 & 1) != 0) { return team_; } else { return TeamDefaultValue; } }
      set {
        _hasBits0 |= 1;
        team_ = value;
      }
    }
    /// <summary>Gets whether the "team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeam {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeam() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnWardPlacement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnWardPlacement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WardLoc, other.WardLoc)) return false;
      if(!existingWardLocs_.Equals(other.existingWardLocs_)) return false;
      if (Team != other.Team) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (wardLoc_ != null) hash ^= WardLoc.GetHashCode();
      hash ^= existingWardLocs_.GetHashCode();
      if (HasTeam) hash ^= Team.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (wardLoc_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WardLoc);
      }
      existingWardLocs_.WriteTo(output, _repeated_existingWardLocs_codec);
      if (HasTeam) {
        output.WriteRawTag(24);
        output.WriteUInt32(Team);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (wardLoc_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WardLoc);
      }
      existingWardLocs_.WriteTo(ref output, _repeated_existingWardLocs_codec);
      if (HasTeam) {
        output.WriteRawTag(24);
        output.WriteUInt32(Team);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (wardLoc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WardLoc);
      }
      size += existingWardLocs_.CalculateSize(_repeated_existingWardLocs_codec);
      if (HasTeam) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnWardPlacement other) {
      if (other == null) {
        return;
      }
      if (other.wardLoc_ != null) {
        if (wardLoc_ == null) {
          WardLoc = new global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location();
        }
        WardLoc.MergeFrom(other.WardLoc);
      }
      existingWardLocs_.Add(other.existingWardLocs_);
      if (other.HasTeam) {
        Team = other.Team;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (wardLoc_ == null) {
              WardLoc = new global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location();
            }
            input.ReadMessage(WardLoc);
            break;
          }
          case 18: {
            existingWardLocs_.AddEntriesFrom(input, _repeated_existingWardLocs_codec);
            break;
          }
          case 24: {
            Team = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (wardLoc_ == null) {
              WardLoc = new global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Types.Location();
            }
            input.ReadMessage(WardLoc);
            break;
          }
          case 18: {
            existingWardLocs_.AddEntriesFrom(ref input, _repeated_existingWardLocs_codec);
            break;
          }
          case 24: {
            Team = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSteamLearnWardPlacement message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Location : pb::IMessage<Location>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Location> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSteamLearnWardPlacement.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Location() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Location(Location other) : this() {
          _hasBits0 = other._hasBits0;
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Location Clone() {
          return new Location(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private readonly static float XDefaultValue = 0F;

        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
          set {
            _hasBits0 |= 1;
            x_ = value;
          }
        }
        /// <summary>Gets whether the "x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasX {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearX() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private readonly static float YDefaultValue = 0F;

        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
          set {
            _hasBits0 |= 2;
            y_ = value;
          }
        }
        /// <summary>Gets whether the "y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasY {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearY() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Location);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Location other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasX) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (HasY) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasX) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (HasY) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasX) {
            size += 1 + 4;
          }
          if (HasY) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Location other) {
          if (other == null) {
            return;
          }
          if (other.HasX) {
            X = other.X;
          }
          if (other.HasY) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSteamLearnPlayerMatchState : pb::IMessage<CMsgSteamLearnPlayerMatchState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSteamLearnPlayerMatchState> _parser = new pb::MessageParser<CMsgSteamLearnPlayerMatchState>(() => new CMsgSteamLearnPlayerMatchState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSteamLearnPlayerMatchState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPlayerMatchState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPlayerMatchState(CMsgSteamLearnPlayerMatchState other) : this() {
      _hasBits0 = other._hasBits0;
      netWorth_ = other.netWorth_;
      level_ = other.level_;
      deaths_ = other.deaths_;
      respawnTime_ = other.respawnTime_;
      hasBuyback_ = other.hasBuyback_;
      hasAegis_ = other.hasAegis_;
      hasRapier_ = other.hasRapier_;
      teamNetWorth_ = other.teamNetWorth_;
      enemyTeamNetWorth_ = other.enemyTeamNetWorth_;
      teamKills_ = other.teamKills_;
      enemyTeamKills_ = other.enemyTeamKills_;
      gameTime_ = other.gameTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSteamLearnPlayerMatchState Clone() {
      return new CMsgSteamLearnPlayerMatchState(this);
    }

    /// <summary>Field number for the "net_worth" field.</summary>
    public const int NetWorthFieldNumber = 1;
    private readonly static uint NetWorthDefaultValue = 0;

    private uint netWorth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetWorth {
      get { if ((_hasBits0 & 1) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        netWorth_ = value;
      }
    }
    /// <summary>Gets whether the "net_worth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNetWorth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "net_worth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNetWorth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private readonly static uint LevelDefaultValue = 0;

    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { if ((_hasBits0 & 2) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "deaths" field.</summary>
    public const int DeathsFieldNumber = 3;
    private readonly static uint DeathsDefaultValue = 0;

    private uint deaths_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deaths {
      get { if ((_hasBits0 & 4) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        deaths_ = value;
      }
    }
    /// <summary>Gets whether the "deaths" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeaths {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "deaths" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeaths() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "respawn_time" field.</summary>
    public const int RespawnTimeFieldNumber = 4;
    private readonly static uint RespawnTimeDefaultValue = 0;

    private uint respawnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RespawnTime {
      get { if ((_hasBits0 & 8) != 0) { return respawnTime_; } else { return RespawnTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        respawnTime_ = value;
      }
    }
    /// <summary>Gets whether the "respawn_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRespawnTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "respawn_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRespawnTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "has_buyback" field.</summary>
    public const int HasBuybackFieldNumber = 5;
    private readonly static bool HasBuybackDefaultValue = false;

    private bool hasBuyback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuyback {
      get { if ((_hasBits0 & 16) != 0) { return hasBuyback_; } else { return HasBuybackDefaultValue; } }
      set {
        _hasBits0 |= 16;
        hasBuyback_ = value;
      }
    }
    /// <summary>Gets whether the "has_buyback" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasBuyback {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "has_buyback" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasBuyback() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "has_aegis" field.</summary>
    public const int HasAegisFieldNumber = 6;
    private readonly static bool HasAegisDefaultValue = false;

    private bool hasAegis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAegis {
      get { if ((_hasBits0 & 32) != 0) { return hasAegis_; } else { return HasAegisDefaultValue; } }
      set {
        _hasBits0 |= 32;
        hasAegis_ = value;
      }
    }
    /// <summary>Gets whether the "has_aegis" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasAegis {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "has_aegis" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasAegis() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "has_rapier" field.</summary>
    public const int HasRapierFieldNumber = 7;
    private readonly static bool HasRapierDefaultValue = false;

    private bool hasRapier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRapier {
      get { if ((_hasBits0 & 64) != 0) { return hasRapier_; } else { return HasRapierDefaultValue; } }
      set {
        _hasBits0 |= 64;
        hasRapier_ = value;
      }
    }
    /// <summary>Gets whether the "has_rapier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasRapier {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "has_rapier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasRapier() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "team_net_worth" field.</summary>
    public const int TeamNetWorthFieldNumber = 8;
    private readonly static uint TeamNetWorthDefaultValue = 0;

    private uint teamNetWorth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamNetWorth {
      get { if ((_hasBits0 & 128) != 0) { return teamNetWorth_; } else { return TeamNetWorthDefaultValue; } }
      set {
        _hasBits0 |= 128;
        teamNetWorth_ = value;
      }
    }
    /// <summary>Gets whether the "team_net_worth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamNetWorth {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "team_net_worth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamNetWorth() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "enemy_team_net_worth" field.</summary>
    public const int EnemyTeamNetWorthFieldNumber = 9;
    private readonly static uint EnemyTeamNetWorthDefaultValue = 0;

    private uint enemyTeamNetWorth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnemyTeamNetWorth {
      get { if ((_hasBits0 & 256) != 0) { return enemyTeamNetWorth_; } else { return EnemyTeamNetWorthDefaultValue; } }
      set {
        _hasBits0 |= 256;
        enemyTeamNetWorth_ = value;
      }
    }
    /// <summary>Gets whether the "enemy_team_net_worth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnemyTeamNetWorth {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "enemy_team_net_worth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnemyTeamNetWorth() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "team_kills" field.</summary>
    public const int TeamKillsFieldNumber = 10;
    private readonly static uint TeamKillsDefaultValue = 0;

    private uint teamKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamKills {
      get { if ((_hasBits0 & 512) != 0) { return teamKills_; } else { return TeamKillsDefaultValue; } }
      set {
        _hasBits0 |= 512;
        teamKills_ = value;
      }
    }
    /// <summary>Gets whether the "team_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamKills {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "team_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamKills() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "enemy_team_kills" field.</summary>
    public const int EnemyTeamKillsFieldNumber = 11;
    private readonly static uint EnemyTeamKillsDefaultValue = 0;

    private uint enemyTeamKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnemyTeamKills {
      get { if ((_hasBits0 & 1024) != 0) { return enemyTeamKills_; } else { return EnemyTeamKillsDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        enemyTeamKills_ = value;
      }
    }
    /// <summary>Gets whether the "enemy_team_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnemyTeamKills {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "enemy_team_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnemyTeamKills() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 12;
    private readonly static float GameTimeDefaultValue = 0F;

    private float gameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameTime {
      get { if ((_hasBits0 & 2048) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        gameTime_ = value;
      }
    }
    /// <summary>Gets whether the "game_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameTime {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "game_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameTime() {
      _hasBits0 &= ~2048;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSteamLearnPlayerMatchState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSteamLearnPlayerMatchState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetWorth != other.NetWorth) return false;
      if (Level != other.Level) return false;
      if (Deaths != other.Deaths) return false;
      if (RespawnTime != other.RespawnTime) return false;
      if (HasBuyback != other.HasBuyback) return false;
      if (HasAegis != other.HasAegis) return false;
      if (HasRapier != other.HasRapier) return false;
      if (TeamNetWorth != other.TeamNetWorth) return false;
      if (EnemyTeamNetWorth != other.EnemyTeamNetWorth) return false;
      if (TeamKills != other.TeamKills) return false;
      if (EnemyTeamKills != other.EnemyTeamKills) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameTime, other.GameTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNetWorth) hash ^= NetWorth.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasDeaths) hash ^= Deaths.GetHashCode();
      if (HasRespawnTime) hash ^= RespawnTime.GetHashCode();
      if (HasHasBuyback) hash ^= HasBuyback.GetHashCode();
      if (HasHasAegis) hash ^= HasAegis.GetHashCode();
      if (HasHasRapier) hash ^= HasRapier.GetHashCode();
      if (HasTeamNetWorth) hash ^= TeamNetWorth.GetHashCode();
      if (HasEnemyTeamNetWorth) hash ^= EnemyTeamNetWorth.GetHashCode();
      if (HasTeamKills) hash ^= TeamKills.GetHashCode();
      if (HasEnemyTeamKills) hash ^= EnemyTeamKills.GetHashCode();
      if (HasGameTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNetWorth) {
        output.WriteRawTag(8);
        output.WriteUInt32(NetWorth);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (HasDeaths) {
        output.WriteRawTag(24);
        output.WriteUInt32(Deaths);
      }
      if (HasRespawnTime) {
        output.WriteRawTag(32);
        output.WriteUInt32(RespawnTime);
      }
      if (HasHasBuyback) {
        output.WriteRawTag(40);
        output.WriteBool(HasBuyback);
      }
      if (HasHasAegis) {
        output.WriteRawTag(48);
        output.WriteBool(HasAegis);
      }
      if (HasHasRapier) {
        output.WriteRawTag(56);
        output.WriteBool(HasRapier);
      }
      if (HasTeamNetWorth) {
        output.WriteRawTag(64);
        output.WriteUInt32(TeamNetWorth);
      }
      if (HasEnemyTeamNetWorth) {
        output.WriteRawTag(72);
        output.WriteUInt32(EnemyTeamNetWorth);
      }
      if (HasTeamKills) {
        output.WriteRawTag(80);
        output.WriteUInt32(TeamKills);
      }
      if (HasEnemyTeamKills) {
        output.WriteRawTag(88);
        output.WriteUInt32(EnemyTeamKills);
      }
      if (HasGameTime) {
        output.WriteRawTag(101);
        output.WriteFloat(GameTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNetWorth) {
        output.WriteRawTag(8);
        output.WriteUInt32(NetWorth);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (HasDeaths) {
        output.WriteRawTag(24);
        output.WriteUInt32(Deaths);
      }
      if (HasRespawnTime) {
        output.WriteRawTag(32);
        output.WriteUInt32(RespawnTime);
      }
      if (HasHasBuyback) {
        output.WriteRawTag(40);
        output.WriteBool(HasBuyback);
      }
      if (HasHasAegis) {
        output.WriteRawTag(48);
        output.WriteBool(HasAegis);
      }
      if (HasHasRapier) {
        output.WriteRawTag(56);
        output.WriteBool(HasRapier);
      }
      if (HasTeamNetWorth) {
        output.WriteRawTag(64);
        output.WriteUInt32(TeamNetWorth);
      }
      if (HasEnemyTeamNetWorth) {
        output.WriteRawTag(72);
        output.WriteUInt32(EnemyTeamNetWorth);
      }
      if (HasTeamKills) {
        output.WriteRawTag(80);
        output.WriteUInt32(TeamKills);
      }
      if (HasEnemyTeamKills) {
        output.WriteRawTag(88);
        output.WriteUInt32(EnemyTeamKills);
      }
      if (HasGameTime) {
        output.WriteRawTag(101);
        output.WriteFloat(GameTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNetWorth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HasDeaths) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
      }
      if (HasRespawnTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RespawnTime);
      }
      if (HasHasBuyback) {
        size += 1 + 1;
      }
      if (HasHasAegis) {
        size += 1 + 1;
      }
      if (HasHasRapier) {
        size += 1 + 1;
      }
      if (HasTeamNetWorth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamNetWorth);
      }
      if (HasEnemyTeamNetWorth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyTeamNetWorth);
      }
      if (HasTeamKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamKills);
      }
      if (HasEnemyTeamKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyTeamKills);
      }
      if (HasGameTime) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSteamLearnPlayerMatchState other) {
      if (other == null) {
        return;
      }
      if (other.HasNetWorth) {
        NetWorth = other.NetWorth;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasDeaths) {
        Deaths = other.Deaths;
      }
      if (other.HasRespawnTime) {
        RespawnTime = other.RespawnTime;
      }
      if (other.HasHasBuyback) {
        HasBuyback = other.HasBuyback;
      }
      if (other.HasHasAegis) {
        HasAegis = other.HasAegis;
      }
      if (other.HasHasRapier) {
        HasRapier = other.HasRapier;
      }
      if (other.HasTeamNetWorth) {
        TeamNetWorth = other.TeamNetWorth;
      }
      if (other.HasEnemyTeamNetWorth) {
        EnemyTeamNetWorth = other.EnemyTeamNetWorth;
      }
      if (other.HasTeamKills) {
        TeamKills = other.TeamKills;
      }
      if (other.HasEnemyTeamKills) {
        EnemyTeamKills = other.EnemyTeamKills;
      }
      if (other.HasGameTime) {
        GameTime = other.GameTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetWorth = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 32: {
            RespawnTime = input.ReadUInt32();
            break;
          }
          case 40: {
            HasBuyback = input.ReadBool();
            break;
          }
          case 48: {
            HasAegis = input.ReadBool();
            break;
          }
          case 56: {
            HasRapier = input.ReadBool();
            break;
          }
          case 64: {
            TeamNetWorth = input.ReadUInt32();
            break;
          }
          case 72: {
            EnemyTeamNetWorth = input.ReadUInt32();
            break;
          }
          case 80: {
            TeamKills = input.ReadUInt32();
            break;
          }
          case 88: {
            EnemyTeamKills = input.ReadUInt32();
            break;
          }
          case 101: {
            GameTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NetWorth = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 32: {
            RespawnTime = input.ReadUInt32();
            break;
          }
          case 40: {
            HasBuyback = input.ReadBool();
            break;
          }
          case 48: {
            HasAegis = input.ReadBool();
            break;
          }
          case 56: {
            HasRapier = input.ReadBool();
            break;
          }
          case 64: {
            TeamNetWorth = input.ReadUInt32();
            break;
          }
          case 72: {
            EnemyTeamNetWorth = input.ReadUInt32();
            break;
          }
          case 80: {
            TeamKills = input.ReadUInt32();
            break;
          }
          case 88: {
            EnemyTeamKills = input.ReadUInt32();
            break;
          }
          case 101: {
            GameTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSignOutMuertaMinigame : pb::IMessage<CMsgSignOutMuertaMinigame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutMuertaMinigame> _parser = new pb::MessageParser<CMsgSignOutMuertaMinigame>(() => new CMsgSignOutMuertaMinigame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutMuertaMinigame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutMuertaMinigame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutMuertaMinigame(CMsgSignOutMuertaMinigame other) : this() {
      eventGameData_ = other.eventGameData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutMuertaMinigame Clone() {
      return new CMsgSignOutMuertaMinigame(this);
    }

    /// <summary>Field number for the "event_game_data" field.</summary>
    public const int EventGameDataFieldNumber = 1;
    private readonly static pb::ByteString EventGameDataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString eventGameData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventGameData {
      get { return eventGameData_ ?? EventGameDataDefaultValue; }
      set {
        eventGameData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "event_game_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventGameData {
      get { return eventGameData_ != null; }
    }
    /// <summary>Clears the value of the "event_game_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventGameData() {
      eventGameData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutMuertaMinigame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutMuertaMinigame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventGameData != other.EventGameData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventGameData) hash ^= EventGameData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventGameData) {
        output.WriteRawTag(10);
        output.WriteBytes(EventGameData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventGameData) {
        output.WriteRawTag(10);
        output.WriteBytes(EventGameData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventGameData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventGameData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutMuertaMinigame other) {
      if (other == null) {
        return;
      }
      if (other.HasEventGameData) {
        EventGameData = other.EventGameData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventGameData = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventGameData = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSignOutMapStats : pb::IMessage<CMsgSignOutMapStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutMapStats> _parser = new pb::MessageParser<CMsgSignOutMapStats>(() => new CMsgSignOutMapStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutMapStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutMapStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutMapStats(CMsgSignOutMapStats other) : this() {
      players_ = other.players_.Clone();
      globalStats_ = other.globalStats_ != null ? other.globalStats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutMapStats Clone() {
      return new CMsgSignOutMapStats(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutMapStats.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSignOutMapStats.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutMapStats.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutMapStats.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutMapStats.Types.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "global_stats" field.</summary>
    public const int GlobalStatsFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgMapStatsSnapshot globalStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgMapStatsSnapshot GlobalStats {
      get { return globalStats_; }
      set {
        globalStats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutMapStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutMapStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (!object.Equals(GlobalStats, other.GlobalStats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (globalStats_ != null) hash ^= GlobalStats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (globalStats_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GlobalStats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (globalStats_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GlobalStats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (globalStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GlobalStats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutMapStats other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      if (other.globalStats_ != null) {
        if (globalStats_ == null) {
          GlobalStats = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
        }
        GlobalStats.MergeFrom(other.GlobalStats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 18: {
            if (globalStats_ == null) {
              GlobalStats = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
            }
            input.ReadMessage(GlobalStats);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 18: {
            if (globalStats_ == null) {
              GlobalStats = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
            }
            input.ReadMessage(GlobalStats);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutMapStats message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutMapStats.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          personalStats_ = other.personalStats_ != null ? other.personalStats_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "personal_stats" field.</summary>
        public const int PersonalStatsFieldNumber = 2;
        private global::Steam.Protos.Dota2.CMsgMapStatsSnapshot personalStats_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgMapStatsSnapshot PersonalStats {
          get { return personalStats_; }
          set {
            personalStats_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (!object.Equals(PersonalStats, other.PersonalStats)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (personalStats_ != null) hash ^= PersonalStats.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (personalStats_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PersonalStats);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (personalStats_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PersonalStats);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (personalStats_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PersonalStats);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.personalStats_ != null) {
            if (personalStats_ == null) {
              PersonalStats = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
            }
            PersonalStats.MergeFrom(other.PersonalStats);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (personalStats_ == null) {
                  PersonalStats = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
                }
                input.ReadMessage(PersonalStats);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (personalStats_ == null) {
                  PersonalStats = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
                }
                input.ReadMessage(PersonalStats);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgServerToGCNewBloomGift : pb::IMessage<CMsgServerToGCNewBloomGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCNewBloomGift> _parser = new pb::MessageParser<CMsgServerToGCNewBloomGift>(() => new CMsgServerToGCNewBloomGift());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCNewBloomGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCNewBloomGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCNewBloomGift(CMsgServerToGCNewBloomGift other) : this() {
      _hasBits0 = other._hasBits0;
      defindex_ = other.defindex_;
      gifterAccountId_ = other.gifterAccountId_;
      targetAccountIds_ = other.targetAccountIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCNewBloomGift Clone() {
      return new CMsgServerToGCNewBloomGift(this);
    }

    /// <summary>Field number for the "defindex" field.</summary>
    public const int DefindexFieldNumber = 1;
    private readonly static uint DefindexDefaultValue = 0;

    private uint defindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Defindex {
      get { if ((_hasBits0 & 1) != 0) { return defindex_; } else { return DefindexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        defindex_ = value;
      }
    }
    /// <summary>Gets whether the "defindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefindex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "defindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefindex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "gifter_account_id" field.</summary>
    public const int GifterAccountIdFieldNumber = 2;
    private readonly static uint GifterAccountIdDefaultValue = 0;

    private uint gifterAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GifterAccountId {
      get { if ((_hasBits0 & 2) != 0) { return gifterAccountId_; } else { return GifterAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gifterAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "gifter_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGifterAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "gifter_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGifterAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "target_account_ids" field.</summary>
    public const int TargetAccountIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_targetAccountIds_codec
        = pb::FieldCodec.ForUInt32(24);
    private readonly pbc::RepeatedField<uint> targetAccountIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TargetAccountIds {
      get { return targetAccountIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCNewBloomGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCNewBloomGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Defindex != other.Defindex) return false;
      if (GifterAccountId != other.GifterAccountId) return false;
      if(!targetAccountIds_.Equals(other.targetAccountIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDefindex) hash ^= Defindex.GetHashCode();
      if (HasGifterAccountId) hash ^= GifterAccountId.GetHashCode();
      hash ^= targetAccountIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDefindex) {
        output.WriteRawTag(8);
        output.WriteUInt32(Defindex);
      }
      if (HasGifterAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GifterAccountId);
      }
      targetAccountIds_.WriteTo(output, _repeated_targetAccountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDefindex) {
        output.WriteRawTag(8);
        output.WriteUInt32(Defindex);
      }
      if (HasGifterAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GifterAccountId);
      }
      targetAccountIds_.WriteTo(ref output, _repeated_targetAccountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDefindex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Defindex);
      }
      if (HasGifterAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GifterAccountId);
      }
      size += targetAccountIds_.CalculateSize(_repeated_targetAccountIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCNewBloomGift other) {
      if (other == null) {
        return;
      }
      if (other.HasDefindex) {
        Defindex = other.Defindex;
      }
      if (other.HasGifterAccountId) {
        GifterAccountId = other.GifterAccountId;
      }
      targetAccountIds_.Add(other.targetAccountIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Defindex = input.ReadUInt32();
            break;
          }
          case 16: {
            GifterAccountId = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            targetAccountIds_.AddEntriesFrom(input, _repeated_targetAccountIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Defindex = input.ReadUInt32();
            break;
          }
          case 16: {
            GifterAccountId = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            targetAccountIds_.AddEntriesFrom(ref input, _repeated_targetAccountIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCNewBloomGiftResponse : pb::IMessage<CMsgServerToGCNewBloomGiftResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCNewBloomGiftResponse> _parser = new pb::MessageParser<CMsgServerToGCNewBloomGiftResponse>(() => new CMsgServerToGCNewBloomGiftResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCNewBloomGiftResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCNewBloomGiftResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCNewBloomGiftResponse(CMsgServerToGCNewBloomGiftResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      receivedAccountIds_ = other.receivedAccountIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCNewBloomGiftResponse Clone() {
      return new CMsgServerToGCNewBloomGiftResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.ENewBloomGiftingResponse ResultDefaultValue = global::Steam.Protos.Dota2.ENewBloomGiftingResponse.KEnewBloomGiftingUnknownFailure;

    private global::Steam.Protos.Dota2.ENewBloomGiftingResponse result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.ENewBloomGiftingResponse Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "received_account_ids" field.</summary>
    public const int ReceivedAccountIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_receivedAccountIds_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> receivedAccountIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ReceivedAccountIds {
      get { return receivedAccountIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCNewBloomGiftResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCNewBloomGiftResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!receivedAccountIds_.Equals(other.receivedAccountIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      hash ^= receivedAccountIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      receivedAccountIds_.WriteTo(output, _repeated_receivedAccountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      receivedAccountIds_.WriteTo(ref output, _repeated_receivedAccountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      size += receivedAccountIds_.CalculateSize(_repeated_receivedAccountIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCNewBloomGiftResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      receivedAccountIds_.Add(other.receivedAccountIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Steam.Protos.Dota2.ENewBloomGiftingResponse) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            receivedAccountIds_.AddEntriesFrom(input, _repeated_receivedAccountIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = (global::Steam.Protos.Dota2.ENewBloomGiftingResponse) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            receivedAccountIds_.AddEntriesFrom(ref input, _repeated_receivedAccountIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSignOutOverworld : pb::IMessage<CMsgSignOutOverworld>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutOverworld> _parser = new pb::MessageParser<CMsgSignOutOverworld>(() => new CMsgSignOutOverworld());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutOverworld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutOverworld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutOverworld(CMsgSignOutOverworld other) : this() {
      _hasBits0 = other._hasBits0;
      players_ = other.players_.Clone();
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutOverworld Clone() {
      return new CMsgSignOutOverworld(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutOverworld.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSignOutOverworld.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutOverworld.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutOverworld.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutOverworld.Types.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutOverworld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutOverworld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutOverworld other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutOverworld message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutOverworld.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          overworldId_ = other.overworldId_;
          desiredTokenRewards_ = other.desiredTokenRewards_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "overworld_id" field.</summary>
        public const int OverworldIdFieldNumber = 2;
        private readonly static uint OverworldIdDefaultValue = 0;

        private uint overworldId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OverworldId {
          get { if ((_hasBits0 & 2) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            overworldId_ = value;
          }
        }
        /// <summary>Gets whether the "overworld_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOverworldId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "overworld_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOverworldId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "desired_token_rewards" field.</summary>
        public const int DesiredTokenRewardsFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_desiredTokenRewards_codec
            = pb::FieldCodec.ForUInt32(24);
        private readonly pbc::RepeatedField<uint> desiredTokenRewards_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> DesiredTokenRewards {
          get { return desiredTokenRewards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (OverworldId != other.OverworldId) return false;
          if(!desiredTokenRewards_.Equals(other.desiredTokenRewards_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasOverworldId) hash ^= OverworldId.GetHashCode();
          hash ^= desiredTokenRewards_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasOverworldId) {
            output.WriteRawTag(16);
            output.WriteUInt32(OverworldId);
          }
          desiredTokenRewards_.WriteTo(output, _repeated_desiredTokenRewards_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasOverworldId) {
            output.WriteRawTag(16);
            output.WriteUInt32(OverworldId);
          }
          desiredTokenRewards_.WriteTo(ref output, _repeated_desiredTokenRewards_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasOverworldId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
          }
          size += desiredTokenRewards_.CalculateSize(_repeated_desiredTokenRewards_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasOverworldId) {
            OverworldId = other.OverworldId;
          }
          desiredTokenRewards_.Add(other.desiredTokenRewards_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                OverworldId = input.ReadUInt32();
                break;
              }
              case 26:
              case 24: {
                desiredTokenRewards_.AddEntriesFrom(input, _repeated_desiredTokenRewards_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                OverworldId = input.ReadUInt32();
                break;
              }
              case 26:
              case 24: {
                desiredTokenRewards_.AddEntriesFrom(ref input, _repeated_desiredTokenRewards_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgSignOutCraftworks : pb::IMessage<CMsgSignOutCraftworks>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSignOutCraftworks> _parser = new pb::MessageParser<CMsgSignOutCraftworks>(() => new CMsgSignOutCraftworks());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSignOutCraftworks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesServerReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutCraftworks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutCraftworks(CMsgSignOutCraftworks other) : this() {
      _hasBits0 = other._hasBits0;
      players_ = other.players_.Clone();
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSignOutCraftworks Clone() {
      return new CMsgSignOutCraftworks(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSignOutCraftworks.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSignOutCraftworks.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCraftworks.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCraftworks.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSignOutCraftworks.Types.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSignOutCraftworks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSignOutCraftworks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSignOutCraftworks other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSignOutCraftworks message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSignOutCraftworks.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          components_ = other.components_ != null ? other.components_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "components" field.</summary>
        public const int ComponentsFieldNumber = 2;
        private global::Steam.Protos.Dota2.CMsgCraftworksComponents components_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgCraftworksComponents Components {
          get { return components_; }
          set {
            components_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (!object.Equals(Components, other.Components)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (components_ != null) hash ^= Components.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (components_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Components);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (components_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Components);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (components_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Components);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.components_ != null) {
            if (components_ == null) {
              Components = new global::Steam.Protos.Dota2.CMsgCraftworksComponents();
            }
            Components.MergeFrom(other.Components);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (components_ == null) {
                  Components = new global::Steam.Protos.Dota2.CMsgCraftworksComponents();
                }
                input.ReadMessage(Components);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (components_ == null) {
                  Components = new global::Steam.Protos.Dota2.CMsgCraftworksComponents();
                }
                input.ReadMessage(Components);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
