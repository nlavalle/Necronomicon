// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: base_gcmessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Steam.Protos.Dota2 {

  /// <summary>Holder for reflection information generated from base_gcmessages.proto</summary>
  public static partial class BaseGcmessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for base_gcmessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseGcmessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChViYXNlX2djbWVzc2FnZXMucHJvdG8aE3N0ZWFtbWVzc2FnZXMucHJvdG8a",
            "Fmdjc2RrX2djbWVzc2FnZXMucHJvdG8aLHN0ZWFtbWVzc2FnZXNfc3RlYW1s",
            "ZWFybi5zdGVhbXdvcmtzc2RrLnByb3RvIq8BCh1DR0NTdG9yZVB1cmNoYXNl",
            "SW5pdF9MaW5lSXRlbRITCgtpdGVtX2RlZl9pZBgBIAEoDRIQCghxdWFudGl0",
            "eRgCIAEoDRIeChZjb3N0X2luX2xvY2FsX2N1cnJlbmN5GAMgASgNEhUKDXB1",
            "cmNoYXNlX3R5cGUYBCABKA0SGwoTc291cmNlX3JlZmVyZW5jZV9pZBgFIAEo",
            "BBITCgtwcmljZV9pbmRleBgGIAEoBSKCAQoXQ01zZ0dDU3RvcmVQdXJjaGFz",
            "ZUluaXQSDwoHY291bnRyeRgBIAEoCRIQCghsYW5ndWFnZRgCIAEoBRIQCghj",
            "dXJyZW5jeRgDIAEoBRIyCgpsaW5lX2l0ZW1zGAQgAygLMh4uQ0dDU3RvcmVQ",
            "dXJjaGFzZUluaXRfTGluZUl0ZW0iQQofQ01zZ0dDU3RvcmVQdXJjaGFzZUlu",
            "aXRSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSDgoGdHhuX2lkGAIgASgEIp4B",
            "ChJDTXNnQ2xpZW50UGluZ0RhdGESFwoLcmVsYXlfY29kZXMYBCADKAdCAhAB",
            "EhcKC3JlbGF5X3BpbmdzGAUgAygNQgIQARIYCgxyZWdpb25fY29kZXMYCCAD",
            "KA1CAhABEhgKDHJlZ2lvbl9waW5ncxgJIAMoDUICEAESIgoacmVnaW9uX3Bp",
            "bmdfZmFpbGVkX2JpdG1hc2sYCiABKA0iiAEKEUNNc2dJbnZpdGVUb1BhcnR5",
            "EhAKCHN0ZWFtX2lkGAEgASgGEhYKDmNsaWVudF92ZXJzaW9uGAIgASgNEg8K",
            "B3RlYW1faWQYAyABKA0SEAoIYXNfY29hY2gYBCABKAgSJgoJcGluZ19kYXRh",
            "GAUgASgLMhMuQ01zZ0NsaWVudFBpbmdEYXRhIj0KEUNNc2dJbnZpdGVUb0xv",
            "YmJ5EhAKCHN0ZWFtX2lkGAEgASgGEhYKDmNsaWVudF92ZXJzaW9uGAIgASgN",
            "IlEKFUNNc2dJbnZpdGF0aW9uQ3JlYXRlZBIQCghncm91cF9pZBgBIAEoBBIQ",
            "CghzdGVhbV9pZBgCIAEoBhIUCgx1c2VyX29mZmxpbmUYAyABKAgiewoXQ01z",
            "Z1BhcnR5SW52aXRlUmVzcG9uc2USEAoIcGFydHlfaWQYASABKAQSDgoGYWNj",
            "ZXB0GAIgASgIEhYKDmNsaWVudF92ZXJzaW9uGAMgASgNEiYKCXBpbmdfZGF0",
            "YRgIIAEoCzITLkNNc2dDbGllbnRQaW5nRGF0YSKLAQoXQ01zZ0xvYmJ5SW52",
            "aXRlUmVzcG9uc2USEAoIbG9iYnlfaWQYASABKAYSDgoGYWNjZXB0GAIgASgI",
            "EhYKDmNsaWVudF92ZXJzaW9uGAMgASgNEhcKD2N1c3RvbV9nYW1lX2NyYxgG",
            "IAEoBhIdChVjdXN0b21fZ2FtZV90aW1lc3RhbXAYByABKAciJQoRQ01zZ0tp",
            "Y2tGcm9tUGFydHkSEAoIc3RlYW1faWQYASABKAYiEAoOQ01zZ0xlYXZlUGFy",
            "dHkiogEKG0NNc2dDdXN0b21HYW1lSW5zdGFsbFN0YXR1cxJNCgZzdGF0dXMY",
            "ASABKA4yGS5FQ3VzdG9tR2FtZUluc3RhbGxTdGF0dXM6ImtfRUN1c3RvbUdh",
            "bWVJbnN0YWxsU3RhdHVzX1Vua25vd24SDwoHbWVzc2FnZRgCIAEoCRIjChts",
            "YXRlc3RfdGltZXN0YW1wX2Zyb21fc3RlYW0YAyABKAciVwoTQ01zZ1NlcnZl",
            "ckF2YWlsYWJsZRJAChpjdXN0b21fZ2FtZV9pbnN0YWxsX3N0YXR1cxgBIAEo",
            "CzIcLkNNc2dDdXN0b21HYW1lSW5zdGFsbFN0YXR1cyIqChZDTXNnTEFOU2Vy",
            "dmVyQXZhaWxhYmxlEhAKCGxvYmJ5X2lkGAEgASgGIqoCChhDU09FY29uR2Ft",
            "ZUFjY291bnRDbGllbnQSJAoZYWRkaXRpb25hbF9iYWNrcGFja19zbG90cxgB",
            "IAEoDToBMBIcCg10cmlhbF9hY2NvdW50GAIgASgIOgVmYWxzZRImChhlbGln",
            "aWJsZV9mb3Jfb25saW5lX3BsYXkYAyABKAg6BHRydWUSKgoibmVlZF90b19j",
            "aG9vc2VfbW9zdF9oZWxwZnVsX2ZyaWVuZBgEIAEoCBIXCg9pbl9jb2FjaGVz",
            "X2xpc3QYBSABKAgSHAoUdHJhZGVfYmFuX2V4cGlyYXRpb24YBiABKAcSGwoT",
            "ZHVlbF9iYW5fZXhwaXJhdGlvbhgHIAEoBxIiChNtYWRlX2ZpcnN0X3B1cmNo",
            "YXNlGAkgASgIOgVmYWxzZSJKChRDTXNnQXBwbHlTdHJhbmdlUGFydBIcChRz",
            "dHJhbmdlX3BhcnRfaXRlbV9pZBgBIAEoBBIUCgxpdGVtX2l0ZW1faWQYAiAB",
            "KAQiSwoXQ01zZ0FwcGx5UGVubmFudFVwZ3JhZGUSFwoPdXBncmFkZV9pdGVt",
            "X2lkGAEgASgEEhcKD3Blbm5hbnRfaXRlbV9pZBgCIAEoBCJDChNDTXNnQXBw",
            "bHlFZ2dFc3NlbmNlEhcKD2Vzc2VuY2VfaXRlbV9pZBgBIAEoBBITCgtlZ2df",
            "aXRlbV9pZBgCIAEoBCJUChRDU09FY29uSXRlbUF0dHJpYnV0ZRIYCglkZWZf",
            "aW5kZXgYASABKA06BTY1NTM1Eg0KBXZhbHVlGAIgASgNEhMKC3ZhbHVlX2J5",
            "dGVzGAMgASgMIjoKE0NTT0Vjb25JdGVtRXF1aXBwZWQSEQoJbmV3X2NsYXNz",
            "GAEgASgNEhAKCG5ld19zbG90GAIgASgNItcCCgtDU09FY29uSXRlbRIKCgJp",
            "ZBgBIAEoBBISCgphY2NvdW50X2lkGAIgASgNEhEKCWludmVudG9yeRgDIAEo",
            "DRIRCglkZWZfaW5kZXgYBCABKA0SEwoIcXVhbnRpdHkYBSABKA06ATESEAoF",
            "bGV2ZWwYBiABKA06ATESEgoHcXVhbGl0eRgHIAEoDToBNBIQCgVmbGFncxgI",
            "IAEoDToBMBIRCgZvcmlnaW4YCSABKA06ATASKAoJYXR0cmlidXRlGAwgAygL",
            "MhUuQ1NPRWNvbkl0ZW1BdHRyaWJ1dGUSIwoNaW50ZXJpb3JfaXRlbRgNIAEo",
            "CzIMLkNTT0Vjb25JdGVtEhAKBXN0eWxlGA8gASgNOgEwEhMKC29yaWdpbmFs",
            "X2lkGBAgASgEEiwKDmVxdWlwcGVkX3N0YXRlGBIgAygLMhQuQ1NPRWNvbkl0",
            "ZW1FcXVpcHBlZCIiCg1DTXNnU29ydEl0ZW1zEhEKCXNvcnRfdHlwZRgBIAEo",
            "DSKBAQoUQ01zZ0l0ZW1BY2tub3dsZWRnZWQSEgoKYWNjb3VudF9pZBgBIAEo",
            "DRIRCglpbnZlbnRvcnkYAiABKA0SEQoJZGVmX2luZGV4GAMgASgNEg8KB3F1",
            "YWxpdHkYBCABKA0SDgoGcmFyaXR5GAUgASgNEg4KBm9yaWdpbhgGIAEoDSKF",
            "AQoUQ01zZ1NldEl0ZW1Qb3NpdGlvbnMSOgoOaXRlbV9wb3NpdGlvbnMYASAD",
            "KAsyIi5DTXNnU2V0SXRlbVBvc2l0aW9ucy5JdGVtUG9zaXRpb24aMQoMSXRl",
            "bVBvc2l0aW9uEg8KB2l0ZW1faWQYASABKAQSEAoIcG9zaXRpb24YAiABKA0i",
            "KwoZQ01zZ0dDU3RvcmVQdXJjaGFzZUNhbmNlbBIOCgZ0eG5faWQYASABKAQi",
            "MwohQ01zZ0dDU3RvcmVQdXJjaGFzZUNhbmNlbFJlc3BvbnNlEg4KBnJlc3Vs",
            "dBgBIAEoDSItChtDTXNnR0NTdG9yZVB1cmNoYXNlRmluYWxpemUSDgoGdHhu",
            "X2lkGAEgASgEIkcKI0NNc2dHQ1N0b3JlUHVyY2hhc2VGaW5hbGl6ZVJlc3Bv",
            "bnNlEg4KBnJlc3VsdBgBIAEoDRIQCghpdGVtX2lkcxgCIAMoBCIzCh9DTXNn",
            "R0NUb0dDQmFubmVkV29yZExpc3RVcGRhdGVkEhAKCGdyb3VwX2lkGAEgASgN",
            "Ij8KF0NNc2dHQ1RvR0NEaXJ0eVNET0NhY2hlEhAKCHNkb190eXBlGAEgASgN",
            "EhIKCmtleV91aW50NjQYAiABKAQiFAoSQ01zZ1NET05vTWVtY2FjaGVkIi8K",
            "G0NNc2dHQ1RvR0NVcGRhdGVTUUxLZXlWYWx1ZRIQCghrZXlfbmFtZRgBIAEo",
            "CSI0ChpDTXNnR0NTZXJ2ZXJWZXJzaW9uVXBkYXRlZBIWCg5zZXJ2ZXJfdmVy",
            "c2lvbhgBIAEoDSI0ChpDTXNnR0NDbGllbnRWZXJzaW9uVXBkYXRlZBIWCg5j",
            "bGllbnRfdmVyc2lvbhgBIAEoDSIgCh5DTXNnR0NUb0dDV2ViQVBJQWNjb3Vu",
            "dENoYW5nZWQiXAoPQ01zZ0V4dHJhY3RHZW1zEhQKDHRvb2xfaXRlbV9pZBgB",
            "IAEoBBIUCgxpdGVtX2l0ZW1faWQYAiABKAQSHQoOaXRlbV9zb2NrZXRfaWQY",
            "AyABKA06BTY1NTM1ItQCChdDTXNnRXh0cmFjdEdlbXNSZXNwb25zZRIPCgdp",
            "dGVtX2lkGAEgASgEElAKCHJlc3BvbnNlGAIgASgOMiUuQ01zZ0V4dHJhY3RH",
            "ZW1zUmVzcG9uc2UuRUV4dHJhY3RHZW1zOhdrX0V4dHJhY3RHZW1zX1N1Y2Nl",
            "ZWRlZCLVAQoMRUV4dHJhY3RHZW1zEhsKF2tfRXh0cmFjdEdlbXNfU3VjY2Vl",
            "ZGVkEAASJgoia19FeHRyYWN0R2Vtc19GYWlsZWRfVG9vbElzSW52YWxpZBAB",
            "EiYKImtfRXh0cmFjdEdlbXNfRmFpbGVkX0l0ZW1Jc0ludmFsaWQQAhIsCihr",
            "X0V4dHJhY3RHZW1zX0ZhaWxlZF9Ub29sQ2Fubm90UmVtb3ZlR2VtEAMSKgom",
            "a19FeHRyYWN0R2Vtc19GYWlsZWRfRmFpbGVkVG9SZW1vdmVHZW0QBCJMCg1D",
            "TXNnQWRkU29ja2V0EhQKDHRvb2xfaXRlbV9pZBgBIAEoBBIUCgxpdGVtX2l0",
            "ZW1faWQYAiABKAQSDwoHdW51c3VhbBgDIAEoCCK5AgoVQ01zZ0FkZFNvY2tl",
            "dFJlc3BvbnNlEg8KB2l0ZW1faWQYASABKAQSHAoUdXBkYXRlZF9zb2NrZXRf",
            "aW5kZXgYAiADKA0SSgoIcmVzcG9uc2UYAyABKA4yIS5DTXNnQWRkU29ja2V0",
            "UmVzcG9uc2UuRUFkZFNvY2tldDoVa19BZGRTb2NrZXRfU3VjY2VlZGVkIqQB",
            "CgpFQWRkU29ja2V0EhkKFWtfQWRkU29ja2V0X1N1Y2NlZWRlZBAAEiQKIGtf",
            "QWRkU29ja2V0X0ZhaWxlZF9Ub29sSXNJbnZhbGlkEAESKwona19BZGRTb2Nr",
            "ZXRfRmFpbGVkX0l0ZW1DYW5ub3RCZVNvY2tldGVkEAISKAoka19BZGRTb2Nr",
            "ZXRfRmFpbGVkX0ZhaWxlZFRvQWRkU29ja2V0EAMiSwoXQ01zZ0FkZEl0ZW1U",
            "b1NvY2tldERhdGESEwoLZ2VtX2l0ZW1faWQYASABKAQSGwoMc29ja2V0X2lu",
            "ZGV4GAIgASgNOgU2NTUzNSJdChNDTXNnQWRkSXRlbVRvU29ja2V0EhQKDGl0",
            "ZW1faXRlbV9pZBgBIAEoBBIwCg5nZW1zX3RvX3NvY2tldBgCIAMoCzIYLkNN",
            "c2dBZGRJdGVtVG9Tb2NrZXREYXRhIt8DChtDTXNnQWRkSXRlbVRvU29ja2V0",
            "UmVzcG9uc2USFAoMaXRlbV9pdGVtX2lkGAEgASgEEhwKFHVwZGF0ZWRfc29j",
            "a2V0X2luZGV4GAIgAygNEkoKCHJlc3BvbnNlGAMgASgOMiQuQ01zZ0FkZEl0",
            "ZW1Ub1NvY2tldFJlc3BvbnNlLkVBZGRHZW06EmtfQWRkR2VtX1N1Y2NlZWRl",
            "ZCK/AgoHRUFkZEdlbRIWChJrX0FkZEdlbV9TdWNjZWVkZWQQABIgChxrX0Fk",
            "ZEdlbV9GYWlsZWRfR2VtSXNJbnZhbGlkEAESIQoda19BZGRHZW1fRmFpbGVk",
            "X0l0ZW1Jc0ludmFsaWQQAhIiCh5rX0FkZEdlbV9GYWlsZWRfRmFpbGVkVG9B",
            "ZGRHZW0QAxIrCidrX0FkZEdlbV9GYWlsZWRfSW52YWxpZEdlbVR5cGVGb3JT",
            "b2NrZXQQBBIpCiVrX0FkZEdlbV9GYWlsZWRfSW52YWxpZEdlbVR5cGVGb3JI",
            "ZXJvEAUSKQola19BZGRHZW1fRmFpbGVkX0ludmFsaWRHZW1UeXBlRm9yU2xv",
            "dBAGEjAKLGtfQWRkR2VtX0ZhaWxlZF9Tb2NrZXRDb250YWluc1VucmVtb3Zh",
            "YmxlR2VtEAciTQoYQ01zZ1Jlc2V0U3RyYW5nZUdlbUNvdW50EhQKDGl0ZW1f",
            "aXRlbV9pZBgBIAEoBBIbCgxzb2NrZXRfaW5kZXgYAiABKA06BTY1NTM1Ir4C",
            "CiBDTXNnUmVzZXRTdHJhbmdlR2VtQ291bnRSZXNwb25zZRJTCghyZXNwb25z",
            "ZRgBIAEoDjIrLkNNc2dSZXNldFN0cmFuZ2VHZW1Db3VudFJlc3BvbnNlLkVS",
            "ZXNldEdlbToUa19SZXNldEdlbV9TdWNjZWVkZWQixAEKCUVSZXNldEdlbRIY",
            "ChRrX1Jlc2V0R2VtX1N1Y2NlZWRlZBAAEiYKImtfUmVzZXRHZW1fRmFpbGVk",
            "X0ZhaWxlZFRvUmVzZXRHZW0QARIjCh9rX1Jlc2V0R2VtX0ZhaWxlZF9JdGVt",
            "SXNJbnZhbGlkEAISJQoha19SZXNldEdlbV9GYWlsZWRfSW52YWxpZFNvY2tl",
            "dElkEAMSKQola19SZXNldEdlbV9GYWlsZWRfU29ja2V0Q2Fubm90QmVSZXNl",
            "dBAEIlsKHUNNc2dHQ1RvQ2xpZW50UG9sbEZpbGVSZXF1ZXN0EhEKCWZpbGVf",
            "bmFtZRgBIAEoCRIWCg5jbGllbnRfdmVyc2lvbhgCIAEoDRIPCgdwb2xsX2lk",
            "GAMgASgNIlYKHkNNc2dHQ1RvQ2xpZW50UG9sbEZpbGVSZXNwb25zZRIPCgdw",
            "b2xsX2lkGAEgASgNEhEKCWZpbGVfc2l6ZRgCIAEoDRIQCghmaWxlX2NyYxgD",
            "IAEoDSI+ChlDTXNnR0NUb0dDUGVyZm9ybU1hbnVhbE9wEg0KBW9wX2lkGAEg",
            "ASgEEhIKCmdyb3VwX2NvZGUYAiABKA0iTAoiQ01zZ0dDVG9HQ1BlcmZvcm1N",
            "YW51YWxPcENvbXBsZXRlZBIPCgdzdWNjZXNzGAEgASgIEhUKCXNvdXJjZV9n",
            "YxgCIAEoBToCLTEiJgokQ01zZ0dDVG9HQ1JlbG9hZFNlcnZlclJlZ2lvblNl",
            "dHRpbmdzIksKHkNNc2dHQ0FkZGl0aW9uYWxXZWxjb21lTXNnTGlzdBIpChB3",
            "ZWxjb21lX21lc3NhZ2VzGAEgAygLMg8uQ0V4dHJhTXNnQmxvY2si0AEKFkNN",
            "c2dBcHBseVJlbW90ZUNvblZhcnMSMAoIY29uX3ZhcnMYASADKAsyHi5DTXNn",
            "QXBwbHlSZW1vdGVDb25WYXJzLkNvblZhchqDAQoGQ29uVmFyEgwKBG5hbWUY",
            "ASABKAkSDQoFdmFsdWUYAiABKAkSEwoLdmVyc2lvbl9taW4YAyABKA0SEwoL",
            "dmVyc2lvbl9tYXgYBCABKA0SMgoIcGxhdGZvcm0YBSABKA4yDC5FR0NQbGF0",
            "Zm9ybToSa19lR0NQbGF0Zm9ybV9Ob25lIkgKIENNc2dHQ1RvQ2xpZW50QXBw",
            "bHlSZW1vdGVDb25WYXJzEiQKA21zZxgBIAEoCzIXLkNNc2dBcHBseVJlbW90",
            "ZUNvblZhcnMiSAogQ01zZ0dDVG9TZXJ2ZXJBcHBseVJlbW90ZUNvblZhcnMS",
            "JAoDbXNnGAEgASgLMhcuQ01zZ0FwcGx5UmVtb3RlQ29uVmFycyLUAQodQ01z",
            "Z0NsaWVudFRvR0NJbnRlZ3JpdHlTdGF0dXMSDgoGcmVwb3J0GAEgASgJEhYK",
            "DnNlY3VyZV9hbGxvd2VkGAIgASgIEjwKC2RpYWdub3N0aWNzGAMgAygLMicu",
            "Q01zZ0NsaWVudFRvR0NJbnRlZ3JpdHlTdGF0dXMua2V5dmFsdWUaTQoIa2V5",
            "dmFsdWUSCgoCaWQYASABKA0SEAoIZXh0ZW5kZWQYAiABKA0SDQoFdmFsdWUY",
            "AyABKAQSFAoMc3RyaW5nX3ZhbHVlGAQgASgJIpoBCh5DTXNnQ2xpZW50VG9H",
            "Q0FnZ3JlZ2F0ZU1ldHJpY3MSPQoHbWV0cmljcxgBIAMoCzIsLkNNc2dDbGll",
            "bnRUb0dDQWdncmVnYXRlTWV0cmljcy5TaW5nbGVNZXRyaWMaOQoMU2luZ2xl",
            "TWV0cmljEhMKC21ldHJpY19uYW1lGAEgASgJEhQKDG1ldHJpY19jb3VudBgC",
            "IAEoDSJFCiVDTXNnR0NUb0NsaWVudEFnZ3JlZ2F0ZU1ldHJpY3NCYWNrb2Zm",
            "EhwKFHVwbG9hZF9yYXRlX21vZGlmaWVyGAEgASgCImEKK0NNc2dHQ1RvU2Vy",
            "dmVyU3RlYW1MZWFybkFjY2Vzc1Rva2Vuc0NoYW5nZWQSMgoNYWNjZXNzX3Rv",
            "a2VucxgBIAEoCzIbLkNNc2dTdGVhbUxlYXJuQWNjZXNzVG9rZW5zIjMKH0NN",
            "c2dHQ1RvU2VydmVyU3RlYW1MZWFyblVzZUhUVFASEAoIdXNlX2h0dHAYASAB",
            "KAgq9AYKCkVHQ0Jhc2VNc2cSGgoVa19FTXNnR0NJbnZpdGVUb1BhcnR5EJUj",
            "Eh4KGWtfRU1zZ0dDSW52aXRhdGlvbkNyZWF0ZWQQliMSIAoba19FTXNnR0NQ",
            "YXJ0eUludml0ZVJlc3BvbnNlEJcjEhoKFWtfRU1zZ0dDS2lja0Zyb21QYXJ0",
            "eRCYIxIXChJrX0VNc2dHQ0xlYXZlUGFydHkQmSMSHAoXa19FTXNnR0NTZXJ2",
            "ZXJBdmFpbGFibGUQmiMSIgoda19FTXNnR0NDbGllbnRDb25uZWN0VG9TZXJ2",
            "ZXIQmyMSGwoWa19FTXNnR0NHYW1lU2VydmVySW5mbxCcIxIfChprX0VNc2dH",
            "Q0xBTlNlcnZlckF2YWlsYWJsZRCfIxIaChVrX0VNc2dHQ0ludml0ZVRvTG9i",
            "YnkQoCMSIAoba19FTXNnR0NMb2JieUludml0ZVJlc3BvbnNlEKEjEiQKH2tf",
            "RU1zZ0dDVG9DbGllbnRQb2xsRmlsZVJlcXVlc3QQoiMSJQoga19FTXNnR0NU",
            "b0NsaWVudFBvbGxGaWxlUmVzcG9uc2UQoyMSIAoba19FTXNnR0NUb0dDUGVy",
            "Zm9ybU1hbnVhbE9wEKQjEikKJGtfRU1zZ0dDVG9HQ1BlcmZvcm1NYW51YWxP",
            "cENvbXBsZXRlZBClIxIrCiZrX0VNc2dHQ1RvR0NSZWxvYWRTZXJ2ZXJSZWdp",
            "b25TZXR0aW5ncxCmIxIlCiBrX0VNc2dHQ0FkZGl0aW9uYWxXZWxjb21lTXNn",
            "TGlzdBCnIxInCiJrX0VNc2dHQ1RvQ2xpZW50QXBwbHlSZW1vdGVDb25WYXJz",
            "EKgjEicKImtfRU1zZ0dDVG9TZXJ2ZXJBcHBseVJlbW90ZUNvblZhcnMQqSMS",
            "JAofa19FTXNnQ2xpZW50VG9HQ0ludGVncml0eVN0YXR1cxCqIxIlCiBrX0VN",
            "c2dDbGllbnRUb0dDQWdncmVnYXRlTWV0cmljcxCrIxIsCidrX0VNc2dHQ1Rv",
            "Q2xpZW50QWdncmVnYXRlTWV0cmljc0JhY2tvZmYQrCMSMgota19FTXNnR0NU",
            "b1NlcnZlclN0ZWFtTGVhcm5BY2Nlc3NUb2tlbnNDaGFuZ2VkEK0jEiYKIWtf",
            "RU1zZ0dDVG9TZXJ2ZXJTdGVhbUxlYXJuVXNlSFRUUBCuIyroAwoYRUN1c3Rv",
            "bUdhbWVJbnN0YWxsU3RhdHVzEiYKImtfRUN1c3RvbUdhbWVJbnN0YWxsU3Rh",
            "dHVzX1Vua25vd24QABIkCiBrX0VDdXN0b21HYW1lSW5zdGFsbFN0YXR1c19S",
            "ZWFkeRABEiMKH2tfRUN1c3RvbUdhbWVJbnN0YWxsU3RhdHVzX0J1c3kQAhIs",
            "CihrX0VDdXN0b21HYW1lSW5zdGFsbFN0YXR1c19GYWlsZWRHZW5lcmljEGUS",
            "Mgoua19FQ3VzdG9tR2FtZUluc3RhbGxTdGF0dXNfRmFpbGVkSW50ZXJuYWxF",
            "cnJvchBmEjcKM2tfRUN1c3RvbUdhbWVJbnN0YWxsU3RhdHVzX1JlcXVlc3Rl",
            "ZFRpbWVzdGFtcFRvb09sZBBnEjcKM2tfRUN1c3RvbUdhbWVJbnN0YWxsU3Rh",
            "dHVzX1JlcXVlc3RlZFRpbWVzdGFtcFRvb05ldxBoEioKJmtfRUN1c3RvbUdh",
            "bWVJbnN0YWxsU3RhdHVzX0NSQ01pc21hdGNoEGkSKgoma19FQ3VzdG9tR2Ft",
            "ZUluc3RhbGxTdGF0dXNfRmFpbGVkU3RlYW0QahItCilrX0VDdXN0b21HYW1l",
            "SW5zdGFsbFN0YXR1c19GYWlsZWRDYW5jZWxlZBBrQhWqAhJTdGVhbS5Qcm90",
            "b3MuRG90YTI="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Steam.Protos.Dota2.SteammessagesReflection.Descriptor, global::Steam.Protos.Dota2.GcsdkGcmessagesReflection.Descriptor, global::Steam.Protos.Dota2.SteammessagesSteamlearnSteamworkssdkReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Steam.Protos.Dota2.EGCBaseMsg), typeof(global::Steam.Protos.Dota2.ECustomGameInstallStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CGCStorePurchaseInit_LineItem), global::Steam.Protos.Dota2.CGCStorePurchaseInit_LineItem.Parser, new[]{ "ItemDefId", "Quantity", "CostInLocalCurrency", "PurchaseType", "SourceReferenceId", "PriceIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCStorePurchaseInit), global::Steam.Protos.Dota2.CMsgGCStorePurchaseInit.Parser, new[]{ "Country", "Language", "Currency", "LineItems" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCStorePurchaseInitResponse), global::Steam.Protos.Dota2.CMsgGCStorePurchaseInitResponse.Parser, new[]{ "Result", "TxnId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientPingData), global::Steam.Protos.Dota2.CMsgClientPingData.Parser, new[]{ "RelayCodes", "RelayPings", "RegionCodes", "RegionPings", "RegionPingFailedBitmask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgInviteToParty), global::Steam.Protos.Dota2.CMsgInviteToParty.Parser, new[]{ "SteamId", "ClientVersion", "TeamId", "AsCoach", "PingData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgInviteToLobby), global::Steam.Protos.Dota2.CMsgInviteToLobby.Parser, new[]{ "SteamId", "ClientVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgInvitationCreated), global::Steam.Protos.Dota2.CMsgInvitationCreated.Parser, new[]{ "GroupId", "SteamId", "UserOffline" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPartyInviteResponse), global::Steam.Protos.Dota2.CMsgPartyInviteResponse.Parser, new[]{ "PartyId", "Accept", "ClientVersion", "PingData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyInviteResponse), global::Steam.Protos.Dota2.CMsgLobbyInviteResponse.Parser, new[]{ "LobbyId", "Accept", "ClientVersion", "CustomGameCrc", "CustomGameTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgKickFromParty), global::Steam.Protos.Dota2.CMsgKickFromParty.Parser, new[]{ "SteamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLeaveParty), global::Steam.Protos.Dota2.CMsgLeaveParty.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgCustomGameInstallStatus), global::Steam.Protos.Dota2.CMsgCustomGameInstallStatus.Parser, new[]{ "Status", "Message", "LatestTimestampFromSteam" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerAvailable), global::Steam.Protos.Dota2.CMsgServerAvailable.Parser, new[]{ "CustomGameInstallStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLANServerAvailable), global::Steam.Protos.Dota2.CMsgLANServerAvailable.Parser, new[]{ "LobbyId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSOEconGameAccountClient), global::Steam.Protos.Dota2.CSOEconGameAccountClient.Parser, new[]{ "AdditionalBackpackSlots", "TrialAccount", "EligibleForOnlinePlay", "NeedToChooseMostHelpfulFriend", "InCoachesList", "TradeBanExpiration", "DuelBanExpiration", "MadeFirstPurchase" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgApplyStrangePart), global::Steam.Protos.Dota2.CMsgApplyStrangePart.Parser, new[]{ "StrangePartItemId", "ItemItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgApplyPennantUpgrade), global::Steam.Protos.Dota2.CMsgApplyPennantUpgrade.Parser, new[]{ "UpgradeItemId", "PennantItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgApplyEggEssence), global::Steam.Protos.Dota2.CMsgApplyEggEssence.Parser, new[]{ "EssenceItemId", "EggItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSOEconItemAttribute), global::Steam.Protos.Dota2.CSOEconItemAttribute.Parser, new[]{ "DefIndex", "Value", "ValueBytes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSOEconItemEquipped), global::Steam.Protos.Dota2.CSOEconItemEquipped.Parser, new[]{ "NewClass", "NewSlot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSOEconItem), global::Steam.Protos.Dota2.CSOEconItem.Parser, new[]{ "Id", "AccountId", "Inventory", "DefIndex", "Quantity", "Level", "Quality", "Flags", "Origin", "Attribute", "InteriorItem", "Style", "OriginalId", "EquippedState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSortItems), global::Steam.Protos.Dota2.CMsgSortItems.Parser, new[]{ "SortType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgItemAcknowledged), global::Steam.Protos.Dota2.CMsgItemAcknowledged.Parser, new[]{ "AccountId", "Inventory", "DefIndex", "Quality", "Rarity", "Origin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSetItemPositions), global::Steam.Protos.Dota2.CMsgSetItemPositions.Parser, new[]{ "ItemPositions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSetItemPositions.Types.ItemPosition), global::Steam.Protos.Dota2.CMsgSetItemPositions.Types.ItemPosition.Parser, new[]{ "ItemId", "Position" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCStorePurchaseCancel), global::Steam.Protos.Dota2.CMsgGCStorePurchaseCancel.Parser, new[]{ "TxnId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCStorePurchaseCancelResponse), global::Steam.Protos.Dota2.CMsgGCStorePurchaseCancelResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCStorePurchaseFinalize), global::Steam.Protos.Dota2.CMsgGCStorePurchaseFinalize.Parser, new[]{ "TxnId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCStorePurchaseFinalizeResponse), global::Steam.Protos.Dota2.CMsgGCStorePurchaseFinalizeResponse.Parser, new[]{ "Result", "ItemIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToGCBannedWordListUpdated), global::Steam.Protos.Dota2.CMsgGCToGCBannedWordListUpdated.Parser, new[]{ "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToGCDirtySDOCache), global::Steam.Protos.Dota2.CMsgGCToGCDirtySDOCache.Parser, new[]{ "SdoType", "KeyUint64" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSDONoMemcached), global::Steam.Protos.Dota2.CMsgSDONoMemcached.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToGCUpdateSQLKeyValue), global::Steam.Protos.Dota2.CMsgGCToGCUpdateSQLKeyValue.Parser, new[]{ "KeyName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCServerVersionUpdated), global::Steam.Protos.Dota2.CMsgGCServerVersionUpdated.Parser, new[]{ "ServerVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCClientVersionUpdated), global::Steam.Protos.Dota2.CMsgGCClientVersionUpdated.Parser, new[]{ "ClientVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToGCWebAPIAccountChanged), global::Steam.Protos.Dota2.CMsgGCToGCWebAPIAccountChanged.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgExtractGems), global::Steam.Protos.Dota2.CMsgExtractGems.Parser, new[]{ "ToolItemId", "ItemItemId", "ItemSocketId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgExtractGemsResponse), global::Steam.Protos.Dota2.CMsgExtractGemsResponse.Parser, new[]{ "ItemId", "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgExtractGemsResponse.Types.EExtractGems) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAddSocket), global::Steam.Protos.Dota2.CMsgAddSocket.Parser, new[]{ "ToolItemId", "ItemItemId", "Unusual" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAddSocketResponse), global::Steam.Protos.Dota2.CMsgAddSocketResponse.Parser, new[]{ "ItemId", "UpdatedSocketIndex", "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgAddSocketResponse.Types.EAddSocket) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAddItemToSocketData), global::Steam.Protos.Dota2.CMsgAddItemToSocketData.Parser, new[]{ "GemItemId", "SocketIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAddItemToSocket), global::Steam.Protos.Dota2.CMsgAddItemToSocket.Parser, new[]{ "ItemItemId", "GemsToSocket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAddItemToSocketResponse), global::Steam.Protos.Dota2.CMsgAddItemToSocketResponse.Parser, new[]{ "ItemItemId", "UpdatedSocketIndex", "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgAddItemToSocketResponse.Types.EAddGem) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgResetStrangeGemCount), global::Steam.Protos.Dota2.CMsgResetStrangeGemCount.Parser, new[]{ "ItemItemId", "SocketIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgResetStrangeGemCountResponse), global::Steam.Protos.Dota2.CMsgResetStrangeGemCountResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgResetStrangeGemCountResponse.Types.EResetGem) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToClientPollFileRequest), global::Steam.Protos.Dota2.CMsgGCToClientPollFileRequest.Parser, new[]{ "FileName", "ClientVersion", "PollId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToClientPollFileResponse), global::Steam.Protos.Dota2.CMsgGCToClientPollFileResponse.Parser, new[]{ "PollId", "FileSize", "FileCrc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToGCPerformManualOp), global::Steam.Protos.Dota2.CMsgGCToGCPerformManualOp.Parser, new[]{ "OpId", "GroupCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToGCPerformManualOpCompleted), global::Steam.Protos.Dota2.CMsgGCToGCPerformManualOpCompleted.Parser, new[]{ "Success", "SourceGc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToGCReloadServerRegionSettings), global::Steam.Protos.Dota2.CMsgGCToGCReloadServerRegionSettings.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCAdditionalWelcomeMsgList), global::Steam.Protos.Dota2.CMsgGCAdditionalWelcomeMsgList.Parser, new[]{ "WelcomeMessages" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgApplyRemoteConVars), global::Steam.Protos.Dota2.CMsgApplyRemoteConVars.Parser, new[]{ "ConVars" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgApplyRemoteConVars.Types.ConVar), global::Steam.Protos.Dota2.CMsgApplyRemoteConVars.Types.ConVar.Parser, new[]{ "Name", "Value", "VersionMin", "VersionMax", "Platform" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToClientApplyRemoteConVars), global::Steam.Protos.Dota2.CMsgGCToClientApplyRemoteConVars.Parser, new[]{ "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerApplyRemoteConVars), global::Steam.Protos.Dota2.CMsgGCToServerApplyRemoteConVars.Parser, new[]{ "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCIntegrityStatus), global::Steam.Protos.Dota2.CMsgClientToGCIntegrityStatus.Parser, new[]{ "Report", "SecureAllowed", "Diagnostics" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCIntegrityStatus.Types.keyvalue), global::Steam.Protos.Dota2.CMsgClientToGCIntegrityStatus.Types.keyvalue.Parser, new[]{ "Id", "Extended", "Value", "StringValue" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCAggregateMetrics), global::Steam.Protos.Dota2.CMsgClientToGCAggregateMetrics.Parser, new[]{ "Metrics" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCAggregateMetrics.Types.SingleMetric), global::Steam.Protos.Dota2.CMsgClientToGCAggregateMetrics.Types.SingleMetric.Parser, new[]{ "MetricName", "MetricCount" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToClientAggregateMetricsBackoff), global::Steam.Protos.Dota2.CMsgGCToClientAggregateMetricsBackoff.Parser, new[]{ "UploadRateModifier" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerSteamLearnAccessTokensChanged), global::Steam.Protos.Dota2.CMsgGCToServerSteamLearnAccessTokensChanged.Parser, new[]{ "AccessTokens" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToServerSteamLearnUseHTTP), global::Steam.Protos.Dota2.CMsgGCToServerSteamLearnUseHTTP.Parser, new[]{ "UseHttp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EGCBaseMsg {
    [pbr::OriginalName("k_EMsgGCInviteToParty")] KEmsgGcinviteToParty = 4501,
    [pbr::OriginalName("k_EMsgGCInvitationCreated")] KEmsgGcinvitationCreated = 4502,
    [pbr::OriginalName("k_EMsgGCPartyInviteResponse")] KEmsgGcpartyInviteResponse = 4503,
    [pbr::OriginalName("k_EMsgGCKickFromParty")] KEmsgGckickFromParty = 4504,
    [pbr::OriginalName("k_EMsgGCLeaveParty")] KEmsgGcleaveParty = 4505,
    [pbr::OriginalName("k_EMsgGCServerAvailable")] KEmsgGcserverAvailable = 4506,
    [pbr::OriginalName("k_EMsgGCClientConnectToServer")] KEmsgGcclientConnectToServer = 4507,
    [pbr::OriginalName("k_EMsgGCGameServerInfo")] KEmsgGcgameServerInfo = 4508,
    [pbr::OriginalName("k_EMsgGCLANServerAvailable")] KEmsgGclanserverAvailable = 4511,
    [pbr::OriginalName("k_EMsgGCInviteToLobby")] KEmsgGcinviteToLobby = 4512,
    [pbr::OriginalName("k_EMsgGCLobbyInviteResponse")] KEmsgGclobbyInviteResponse = 4513,
    [pbr::OriginalName("k_EMsgGCToClientPollFileRequest")] KEmsgGctoClientPollFileRequest = 4514,
    [pbr::OriginalName("k_EMsgGCToClientPollFileResponse")] KEmsgGctoClientPollFileResponse = 4515,
    [pbr::OriginalName("k_EMsgGCToGCPerformManualOp")] KEmsgGctoGcperformManualOp = 4516,
    [pbr::OriginalName("k_EMsgGCToGCPerformManualOpCompleted")] KEmsgGctoGcperformManualOpCompleted = 4517,
    [pbr::OriginalName("k_EMsgGCToGCReloadServerRegionSettings")] KEmsgGctoGcreloadServerRegionSettings = 4518,
    [pbr::OriginalName("k_EMsgGCAdditionalWelcomeMsgList")] KEmsgGcadditionalWelcomeMsgList = 4519,
    [pbr::OriginalName("k_EMsgGCToClientApplyRemoteConVars")] KEmsgGctoClientApplyRemoteConVars = 4520,
    [pbr::OriginalName("k_EMsgGCToServerApplyRemoteConVars")] KEmsgGctoServerApplyRemoteConVars = 4521,
    [pbr::OriginalName("k_EMsgClientToGCIntegrityStatus")] KEmsgClientToGcintegrityStatus = 4522,
    [pbr::OriginalName("k_EMsgClientToGCAggregateMetrics")] KEmsgClientToGcaggregateMetrics = 4523,
    [pbr::OriginalName("k_EMsgGCToClientAggregateMetricsBackoff")] KEmsgGctoClientAggregateMetricsBackoff = 4524,
    [pbr::OriginalName("k_EMsgGCToServerSteamLearnAccessTokensChanged")] KEmsgGctoServerSteamLearnAccessTokensChanged = 4525,
    [pbr::OriginalName("k_EMsgGCToServerSteamLearnUseHTTP")] KEmsgGctoServerSteamLearnUseHttp = 4526,
  }

  public enum ECustomGameInstallStatus {
    [pbr::OriginalName("k_ECustomGameInstallStatus_Unknown")] KEcustomGameInstallStatusUnknown = 0,
    [pbr::OriginalName("k_ECustomGameInstallStatus_Ready")] KEcustomGameInstallStatusReady = 1,
    [pbr::OriginalName("k_ECustomGameInstallStatus_Busy")] KEcustomGameInstallStatusBusy = 2,
    [pbr::OriginalName("k_ECustomGameInstallStatus_FailedGeneric")] KEcustomGameInstallStatusFailedGeneric = 101,
    [pbr::OriginalName("k_ECustomGameInstallStatus_FailedInternalError")] KEcustomGameInstallStatusFailedInternalError = 102,
    [pbr::OriginalName("k_ECustomGameInstallStatus_RequestedTimestampTooOld")] KEcustomGameInstallStatusRequestedTimestampTooOld = 103,
    [pbr::OriginalName("k_ECustomGameInstallStatus_RequestedTimestampTooNew")] KEcustomGameInstallStatusRequestedTimestampTooNew = 104,
    [pbr::OriginalName("k_ECustomGameInstallStatus_CRCMismatch")] KEcustomGameInstallStatusCrcmismatch = 105,
    [pbr::OriginalName("k_ECustomGameInstallStatus_FailedSteam")] KEcustomGameInstallStatusFailedSteam = 106,
    [pbr::OriginalName("k_ECustomGameInstallStatus_FailedCanceled")] KEcustomGameInstallStatusFailedCanceled = 107,
  }

  #endregion

  #region Messages
  public sealed partial class CGCStorePurchaseInit_LineItem : pb::IMessage<CGCStorePurchaseInit_LineItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGCStorePurchaseInit_LineItem> _parser = new pb::MessageParser<CGCStorePurchaseInit_LineItem>(() => new CGCStorePurchaseInit_LineItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGCStorePurchaseInit_LineItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGCStorePurchaseInit_LineItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGCStorePurchaseInit_LineItem(CGCStorePurchaseInit_LineItem other) : this() {
      _hasBits0 = other._hasBits0;
      itemDefId_ = other.itemDefId_;
      quantity_ = other.quantity_;
      costInLocalCurrency_ = other.costInLocalCurrency_;
      purchaseType_ = other.purchaseType_;
      sourceReferenceId_ = other.sourceReferenceId_;
      priceIndex_ = other.priceIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGCStorePurchaseInit_LineItem Clone() {
      return new CGCStorePurchaseInit_LineItem(this);
    }

    /// <summary>Field number for the "item_def_id" field.</summary>
    public const int ItemDefIdFieldNumber = 1;
    private readonly static uint ItemDefIdDefaultValue = 0;

    private uint itemDefId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemDefId {
      get { if ((_hasBits0 & 1) != 0) { return itemDefId_; } else { return ItemDefIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemDefId_ = value;
      }
    }
    /// <summary>Gets whether the "item_def_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemDefId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_def_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemDefId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 2;
    private readonly static uint QuantityDefaultValue = 0;

    private uint quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quantity {
      get { if ((_hasBits0 & 2) != 0) { return quantity_; } else { return QuantityDefaultValue; } }
      set {
        _hasBits0 |= 2;
        quantity_ = value;
      }
    }
    /// <summary>Gets whether the "quantity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuantity {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "quantity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuantity() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cost_in_local_currency" field.</summary>
    public const int CostInLocalCurrencyFieldNumber = 3;
    private readonly static uint CostInLocalCurrencyDefaultValue = 0;

    private uint costInLocalCurrency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostInLocalCurrency {
      get { if ((_hasBits0 & 4) != 0) { return costInLocalCurrency_; } else { return CostInLocalCurrencyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        costInLocalCurrency_ = value;
      }
    }
    /// <summary>Gets whether the "cost_in_local_currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostInLocalCurrency {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cost_in_local_currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostInLocalCurrency() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "purchase_type" field.</summary>
    public const int PurchaseTypeFieldNumber = 4;
    private readonly static uint PurchaseTypeDefaultValue = 0;

    private uint purchaseType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PurchaseType {
      get { if ((_hasBits0 & 8) != 0) { return purchaseType_; } else { return PurchaseTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        purchaseType_ = value;
      }
    }
    /// <summary>Gets whether the "purchase_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPurchaseType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "purchase_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPurchaseType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "source_reference_id" field.</summary>
    public const int SourceReferenceIdFieldNumber = 5;
    private readonly static ulong SourceReferenceIdDefaultValue = 0UL;

    private ulong sourceReferenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SourceReferenceId {
      get { if ((_hasBits0 & 16) != 0) { return sourceReferenceId_; } else { return SourceReferenceIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        sourceReferenceId_ = value;
      }
    }
    /// <summary>Gets whether the "source_reference_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceReferenceId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "source_reference_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceReferenceId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "price_index" field.</summary>
    public const int PriceIndexFieldNumber = 6;
    private readonly static int PriceIndexDefaultValue = 0;

    private int priceIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriceIndex {
      get { if ((_hasBits0 & 32) != 0) { return priceIndex_; } else { return PriceIndexDefaultValue; } }
      set {
        _hasBits0 |= 32;
        priceIndex_ = value;
      }
    }
    /// <summary>Gets whether the "price_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPriceIndex {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "price_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPriceIndex() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGCStorePurchaseInit_LineItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGCStorePurchaseInit_LineItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemDefId != other.ItemDefId) return false;
      if (Quantity != other.Quantity) return false;
      if (CostInLocalCurrency != other.CostInLocalCurrency) return false;
      if (PurchaseType != other.PurchaseType) return false;
      if (SourceReferenceId != other.SourceReferenceId) return false;
      if (PriceIndex != other.PriceIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemDefId) hash ^= ItemDefId.GetHashCode();
      if (HasQuantity) hash ^= Quantity.GetHashCode();
      if (HasCostInLocalCurrency) hash ^= CostInLocalCurrency.GetHashCode();
      if (HasPurchaseType) hash ^= PurchaseType.GetHashCode();
      if (HasSourceReferenceId) hash ^= SourceReferenceId.GetHashCode();
      if (HasPriceIndex) hash ^= PriceIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemDefId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemDefId);
      }
      if (HasQuantity) {
        output.WriteRawTag(16);
        output.WriteUInt32(Quantity);
      }
      if (HasCostInLocalCurrency) {
        output.WriteRawTag(24);
        output.WriteUInt32(CostInLocalCurrency);
      }
      if (HasPurchaseType) {
        output.WriteRawTag(32);
        output.WriteUInt32(PurchaseType);
      }
      if (HasSourceReferenceId) {
        output.WriteRawTag(40);
        output.WriteUInt64(SourceReferenceId);
      }
      if (HasPriceIndex) {
        output.WriteRawTag(48);
        output.WriteInt32(PriceIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemDefId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemDefId);
      }
      if (HasQuantity) {
        output.WriteRawTag(16);
        output.WriteUInt32(Quantity);
      }
      if (HasCostInLocalCurrency) {
        output.WriteRawTag(24);
        output.WriteUInt32(CostInLocalCurrency);
      }
      if (HasPurchaseType) {
        output.WriteRawTag(32);
        output.WriteUInt32(PurchaseType);
      }
      if (HasSourceReferenceId) {
        output.WriteRawTag(40);
        output.WriteUInt64(SourceReferenceId);
      }
      if (HasPriceIndex) {
        output.WriteRawTag(48);
        output.WriteInt32(PriceIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemDefId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDefId);
      }
      if (HasQuantity) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
      }
      if (HasCostInLocalCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostInLocalCurrency);
      }
      if (HasPurchaseType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PurchaseType);
      }
      if (HasSourceReferenceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SourceReferenceId);
      }
      if (HasPriceIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriceIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGCStorePurchaseInit_LineItem other) {
      if (other == null) {
        return;
      }
      if (other.HasItemDefId) {
        ItemDefId = other.ItemDefId;
      }
      if (other.HasQuantity) {
        Quantity = other.Quantity;
      }
      if (other.HasCostInLocalCurrency) {
        CostInLocalCurrency = other.CostInLocalCurrency;
      }
      if (other.HasPurchaseType) {
        PurchaseType = other.PurchaseType;
      }
      if (other.HasSourceReferenceId) {
        SourceReferenceId = other.SourceReferenceId;
      }
      if (other.HasPriceIndex) {
        PriceIndex = other.PriceIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemDefId = input.ReadUInt32();
            break;
          }
          case 16: {
            Quantity = input.ReadUInt32();
            break;
          }
          case 24: {
            CostInLocalCurrency = input.ReadUInt32();
            break;
          }
          case 32: {
            PurchaseType = input.ReadUInt32();
            break;
          }
          case 40: {
            SourceReferenceId = input.ReadUInt64();
            break;
          }
          case 48: {
            PriceIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemDefId = input.ReadUInt32();
            break;
          }
          case 16: {
            Quantity = input.ReadUInt32();
            break;
          }
          case 24: {
            CostInLocalCurrency = input.ReadUInt32();
            break;
          }
          case 32: {
            PurchaseType = input.ReadUInt32();
            break;
          }
          case 40: {
            SourceReferenceId = input.ReadUInt64();
            break;
          }
          case 48: {
            PriceIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCStorePurchaseInit : pb::IMessage<CMsgGCStorePurchaseInit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCStorePurchaseInit> _parser = new pb::MessageParser<CMsgGCStorePurchaseInit>(() => new CMsgGCStorePurchaseInit());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCStorePurchaseInit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseInit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseInit(CMsgGCStorePurchaseInit other) : this() {
      _hasBits0 = other._hasBits0;
      country_ = other.country_;
      language_ = other.language_;
      currency_ = other.currency_;
      lineItems_ = other.lineItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseInit Clone() {
      return new CMsgGCStorePurchaseInit(this);
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 1;
    private readonly static string CountryDefaultValue = "";

    private string country_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_ ?? CountryDefaultValue; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "country" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCountry {
      get { return country_ != null; }
    }
    /// <summary>Clears the value of the "country" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCountry() {
      country_ = null;
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private readonly static int LanguageDefaultValue = 0;

    private int language_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Language {
      get { if ((_hasBits0 & 1) != 0) { return language_; } else { return LanguageDefaultValue; } }
      set {
        _hasBits0 |= 1;
        language_ = value;
      }
    }
    /// <summary>Gets whether the "language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanguage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanguage() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 3;
    private readonly static int CurrencyDefaultValue = 0;

    private int currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Currency {
      get { if ((_hasBits0 & 2) != 0) { return currency_; } else { return CurrencyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        currency_ = value;
      }
    }
    /// <summary>Gets whether the "currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrency {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrency() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "line_items" field.</summary>
    public const int LineItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CGCStorePurchaseInit_LineItem> _repeated_lineItems_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CGCStorePurchaseInit_LineItem.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CGCStorePurchaseInit_LineItem> lineItems_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CGCStorePurchaseInit_LineItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CGCStorePurchaseInit_LineItem> LineItems {
      get { return lineItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCStorePurchaseInit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCStorePurchaseInit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Country != other.Country) return false;
      if (Language != other.Language) return false;
      if (Currency != other.Currency) return false;
      if(!lineItems_.Equals(other.lineItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCountry) hash ^= Country.GetHashCode();
      if (HasLanguage) hash ^= Language.GetHashCode();
      if (HasCurrency) hash ^= Currency.GetHashCode();
      hash ^= lineItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCountry) {
        output.WriteRawTag(10);
        output.WriteString(Country);
      }
      if (HasLanguage) {
        output.WriteRawTag(16);
        output.WriteInt32(Language);
      }
      if (HasCurrency) {
        output.WriteRawTag(24);
        output.WriteInt32(Currency);
      }
      lineItems_.WriteTo(output, _repeated_lineItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCountry) {
        output.WriteRawTag(10);
        output.WriteString(Country);
      }
      if (HasLanguage) {
        output.WriteRawTag(16);
        output.WriteInt32(Language);
      }
      if (HasCurrency) {
        output.WriteRawTag(24);
        output.WriteInt32(Currency);
      }
      lineItems_.WriteTo(ref output, _repeated_lineItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCountry) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (HasLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      if (HasCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Currency);
      }
      size += lineItems_.CalculateSize(_repeated_lineItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCStorePurchaseInit other) {
      if (other == null) {
        return;
      }
      if (other.HasCountry) {
        Country = other.Country;
      }
      if (other.HasLanguage) {
        Language = other.Language;
      }
      if (other.HasCurrency) {
        Currency = other.Currency;
      }
      lineItems_.Add(other.lineItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Country = input.ReadString();
            break;
          }
          case 16: {
            Language = input.ReadInt32();
            break;
          }
          case 24: {
            Currency = input.ReadInt32();
            break;
          }
          case 34: {
            lineItems_.AddEntriesFrom(input, _repeated_lineItems_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Country = input.ReadString();
            break;
          }
          case 16: {
            Language = input.ReadInt32();
            break;
          }
          case 24: {
            Currency = input.ReadInt32();
            break;
          }
          case 34: {
            lineItems_.AddEntriesFrom(ref input, _repeated_lineItems_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCStorePurchaseInitResponse : pb::IMessage<CMsgGCStorePurchaseInitResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCStorePurchaseInitResponse> _parser = new pb::MessageParser<CMsgGCStorePurchaseInitResponse>(() => new CMsgGCStorePurchaseInitResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCStorePurchaseInitResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseInitResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseInitResponse(CMsgGCStorePurchaseInitResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      txnId_ = other.txnId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseInitResponse Clone() {
      return new CMsgGCStorePurchaseInitResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static int ResultDefaultValue = 0;

    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txn_id" field.</summary>
    public const int TxnIdFieldNumber = 2;
    private readonly static ulong TxnIdDefaultValue = 0UL;

    private ulong txnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnId {
      get { if ((_hasBits0 & 2) != 0) { return txnId_; } else { return TxnIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnId_ = value;
      }
    }
    /// <summary>Gets whether the "txn_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txn_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCStorePurchaseInitResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCStorePurchaseInitResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (TxnId != other.TxnId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (HasTxnId) hash ^= TxnId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (HasTxnId) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (HasTxnId) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (HasTxnId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCStorePurchaseInitResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasTxnId) {
        TxnId = other.TxnId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            TxnId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            TxnId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientPingData : pb::IMessage<CMsgClientPingData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientPingData> _parser = new pb::MessageParser<CMsgClientPingData>(() => new CMsgClientPingData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientPingData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientPingData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientPingData(CMsgClientPingData other) : this() {
      _hasBits0 = other._hasBits0;
      relayCodes_ = other.relayCodes_.Clone();
      relayPings_ = other.relayPings_.Clone();
      regionCodes_ = other.regionCodes_.Clone();
      regionPings_ = other.regionPings_.Clone();
      regionPingFailedBitmask_ = other.regionPingFailedBitmask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientPingData Clone() {
      return new CMsgClientPingData(this);
    }

    /// <summary>Field number for the "relay_codes" field.</summary>
    public const int RelayCodesFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_relayCodes_codec
        = pb::FieldCodec.ForFixed32(34);
    private readonly pbc::RepeatedField<uint> relayCodes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RelayCodes {
      get { return relayCodes_; }
    }

    /// <summary>Field number for the "relay_pings" field.</summary>
    public const int RelayPingsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_relayPings_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> relayPings_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RelayPings {
      get { return relayPings_; }
    }

    /// <summary>Field number for the "region_codes" field.</summary>
    public const int RegionCodesFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_regionCodes_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> regionCodes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RegionCodes {
      get { return regionCodes_; }
    }

    /// <summary>Field number for the "region_pings" field.</summary>
    public const int RegionPingsFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_regionPings_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> regionPings_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RegionPings {
      get { return regionPings_; }
    }

    /// <summary>Field number for the "region_ping_failed_bitmask" field.</summary>
    public const int RegionPingFailedBitmaskFieldNumber = 10;
    private readonly static uint RegionPingFailedBitmaskDefaultValue = 0;

    private uint regionPingFailedBitmask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RegionPingFailedBitmask {
      get { if ((_hasBits0 & 1) != 0) { return regionPingFailedBitmask_; } else { return RegionPingFailedBitmaskDefaultValue; } }
      set {
        _hasBits0 |= 1;
        regionPingFailedBitmask_ = value;
      }
    }
    /// <summary>Gets whether the "region_ping_failed_bitmask" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegionPingFailedBitmask {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "region_ping_failed_bitmask" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegionPingFailedBitmask() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientPingData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientPingData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!relayCodes_.Equals(other.relayCodes_)) return false;
      if(!relayPings_.Equals(other.relayPings_)) return false;
      if(!regionCodes_.Equals(other.regionCodes_)) return false;
      if(!regionPings_.Equals(other.regionPings_)) return false;
      if (RegionPingFailedBitmask != other.RegionPingFailedBitmask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= relayCodes_.GetHashCode();
      hash ^= relayPings_.GetHashCode();
      hash ^= regionCodes_.GetHashCode();
      hash ^= regionPings_.GetHashCode();
      if (HasRegionPingFailedBitmask) hash ^= RegionPingFailedBitmask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      relayCodes_.WriteTo(output, _repeated_relayCodes_codec);
      relayPings_.WriteTo(output, _repeated_relayPings_codec);
      regionCodes_.WriteTo(output, _repeated_regionCodes_codec);
      regionPings_.WriteTo(output, _repeated_regionPings_codec);
      if (HasRegionPingFailedBitmask) {
        output.WriteRawTag(80);
        output.WriteUInt32(RegionPingFailedBitmask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      relayCodes_.WriteTo(ref output, _repeated_relayCodes_codec);
      relayPings_.WriteTo(ref output, _repeated_relayPings_codec);
      regionCodes_.WriteTo(ref output, _repeated_regionCodes_codec);
      regionPings_.WriteTo(ref output, _repeated_regionPings_codec);
      if (HasRegionPingFailedBitmask) {
        output.WriteRawTag(80);
        output.WriteUInt32(RegionPingFailedBitmask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += relayCodes_.CalculateSize(_repeated_relayCodes_codec);
      size += relayPings_.CalculateSize(_repeated_relayPings_codec);
      size += regionCodes_.CalculateSize(_repeated_regionCodes_codec);
      size += regionPings_.CalculateSize(_repeated_regionPings_codec);
      if (HasRegionPingFailedBitmask) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegionPingFailedBitmask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientPingData other) {
      if (other == null) {
        return;
      }
      relayCodes_.Add(other.relayCodes_);
      relayPings_.Add(other.relayPings_);
      regionCodes_.Add(other.regionCodes_);
      regionPings_.Add(other.regionPings_);
      if (other.HasRegionPingFailedBitmask) {
        RegionPingFailedBitmask = other.RegionPingFailedBitmask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34:
          case 37: {
            relayCodes_.AddEntriesFrom(input, _repeated_relayCodes_codec);
            break;
          }
          case 42:
          case 40: {
            relayPings_.AddEntriesFrom(input, _repeated_relayPings_codec);
            break;
          }
          case 66:
          case 64: {
            regionCodes_.AddEntriesFrom(input, _repeated_regionCodes_codec);
            break;
          }
          case 74:
          case 72: {
            regionPings_.AddEntriesFrom(input, _repeated_regionPings_codec);
            break;
          }
          case 80: {
            RegionPingFailedBitmask = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 34:
          case 37: {
            relayCodes_.AddEntriesFrom(ref input, _repeated_relayCodes_codec);
            break;
          }
          case 42:
          case 40: {
            relayPings_.AddEntriesFrom(ref input, _repeated_relayPings_codec);
            break;
          }
          case 66:
          case 64: {
            regionCodes_.AddEntriesFrom(ref input, _repeated_regionCodes_codec);
            break;
          }
          case 74:
          case 72: {
            regionPings_.AddEntriesFrom(ref input, _repeated_regionPings_codec);
            break;
          }
          case 80: {
            RegionPingFailedBitmask = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgInviteToParty : pb::IMessage<CMsgInviteToParty>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgInviteToParty> _parser = new pb::MessageParser<CMsgInviteToParty>(() => new CMsgInviteToParty());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgInviteToParty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInviteToParty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInviteToParty(CMsgInviteToParty other) : this() {
      _hasBits0 = other._hasBits0;
      steamId_ = other.steamId_;
      clientVersion_ = other.clientVersion_;
      teamId_ = other.teamId_;
      asCoach_ = other.asCoach_;
      pingData_ = other.pingData_ != null ? other.pingData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInviteToParty Clone() {
      return new CMsgInviteToParty(this);
    }

    /// <summary>Field number for the "steam_id" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private readonly static ulong SteamIdDefaultValue = 0UL;

    private ulong steamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamId {
      get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        steamId_ = value;
      }
    }
    /// <summary>Gets whether the "steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSteamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSteamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private readonly static uint ClientVersionDefaultValue = 0;

    private uint clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientVersion {
      get { if ((_hasBits0 & 2) != 0) { return clientVersion_; } else { return ClientVersionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clientVersion_ = value;
      }
    }
    /// <summary>Gets whether the "client_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientVersion {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "client_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientVersion() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 3;
    private readonly static uint TeamIdDefaultValue = 0;

    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { if ((_hasBits0 & 4) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "as_coach" field.</summary>
    public const int AsCoachFieldNumber = 4;
    private readonly static bool AsCoachDefaultValue = false;

    private bool asCoach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AsCoach {
      get { if ((_hasBits0 & 8) != 0) { return asCoach_; } else { return AsCoachDefaultValue; } }
      set {
        _hasBits0 |= 8;
        asCoach_ = value;
      }
    }
    /// <summary>Gets whether the "as_coach" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAsCoach {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "as_coach" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAsCoach() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "ping_data" field.</summary>
    public const int PingDataFieldNumber = 5;
    private global::Steam.Protos.Dota2.CMsgClientPingData pingData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientPingData PingData {
      get { return pingData_; }
      set {
        pingData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgInviteToParty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgInviteToParty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (TeamId != other.TeamId) return false;
      if (AsCoach != other.AsCoach) return false;
      if (!object.Equals(PingData, other.PingData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSteamId) hash ^= SteamId.GetHashCode();
      if (HasClientVersion) hash ^= ClientVersion.GetHashCode();
      if (HasTeamId) hash ^= TeamId.GetHashCode();
      if (HasAsCoach) hash ^= AsCoach.GetHashCode();
      if (pingData_ != null) hash ^= PingData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSteamId) {
        output.WriteRawTag(9);
        output.WriteFixed64(SteamId);
      }
      if (HasClientVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClientVersion);
      }
      if (HasTeamId) {
        output.WriteRawTag(24);
        output.WriteUInt32(TeamId);
      }
      if (HasAsCoach) {
        output.WriteRawTag(32);
        output.WriteBool(AsCoach);
      }
      if (pingData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PingData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSteamId) {
        output.WriteRawTag(9);
        output.WriteFixed64(SteamId);
      }
      if (HasClientVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClientVersion);
      }
      if (HasTeamId) {
        output.WriteRawTag(24);
        output.WriteUInt32(TeamId);
      }
      if (HasAsCoach) {
        output.WriteRawTag(32);
        output.WriteBool(AsCoach);
      }
      if (pingData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PingData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSteamId) {
        size += 1 + 8;
      }
      if (HasClientVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientVersion);
      }
      if (HasTeamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (HasAsCoach) {
        size += 1 + 1;
      }
      if (pingData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgInviteToParty other) {
      if (other == null) {
        return;
      }
      if (other.HasSteamId) {
        SteamId = other.SteamId;
      }
      if (other.HasClientVersion) {
        ClientVersion = other.ClientVersion;
      }
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      if (other.HasAsCoach) {
        AsCoach = other.AsCoach;
      }
      if (other.pingData_ != null) {
        if (pingData_ == null) {
          PingData = new global::Steam.Protos.Dota2.CMsgClientPingData();
        }
        PingData.MergeFrom(other.PingData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            SteamId = input.ReadFixed64();
            break;
          }
          case 16: {
            ClientVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 32: {
            AsCoach = input.ReadBool();
            break;
          }
          case 42: {
            if (pingData_ == null) {
              PingData = new global::Steam.Protos.Dota2.CMsgClientPingData();
            }
            input.ReadMessage(PingData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            SteamId = input.ReadFixed64();
            break;
          }
          case 16: {
            ClientVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 32: {
            AsCoach = input.ReadBool();
            break;
          }
          case 42: {
            if (pingData_ == null) {
              PingData = new global::Steam.Protos.Dota2.CMsgClientPingData();
            }
            input.ReadMessage(PingData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgInviteToLobby : pb::IMessage<CMsgInviteToLobby>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgInviteToLobby> _parser = new pb::MessageParser<CMsgInviteToLobby>(() => new CMsgInviteToLobby());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgInviteToLobby> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInviteToLobby() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInviteToLobby(CMsgInviteToLobby other) : this() {
      _hasBits0 = other._hasBits0;
      steamId_ = other.steamId_;
      clientVersion_ = other.clientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInviteToLobby Clone() {
      return new CMsgInviteToLobby(this);
    }

    /// <summary>Field number for the "steam_id" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private readonly static ulong SteamIdDefaultValue = 0UL;

    private ulong steamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamId {
      get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        steamId_ = value;
      }
    }
    /// <summary>Gets whether the "steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSteamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSteamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private readonly static uint ClientVersionDefaultValue = 0;

    private uint clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientVersion {
      get { if ((_hasBits0 & 2) != 0) { return clientVersion_; } else { return ClientVersionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clientVersion_ = value;
      }
    }
    /// <summary>Gets whether the "client_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientVersion {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "client_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientVersion() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgInviteToLobby);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgInviteToLobby other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSteamId) hash ^= SteamId.GetHashCode();
      if (HasClientVersion) hash ^= ClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSteamId) {
        output.WriteRawTag(9);
        output.WriteFixed64(SteamId);
      }
      if (HasClientVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSteamId) {
        output.WriteRawTag(9);
        output.WriteFixed64(SteamId);
      }
      if (HasClientVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSteamId) {
        size += 1 + 8;
      }
      if (HasClientVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgInviteToLobby other) {
      if (other == null) {
        return;
      }
      if (other.HasSteamId) {
        SteamId = other.SteamId;
      }
      if (other.HasClientVersion) {
        ClientVersion = other.ClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            SteamId = input.ReadFixed64();
            break;
          }
          case 16: {
            ClientVersion = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            SteamId = input.ReadFixed64();
            break;
          }
          case 16: {
            ClientVersion = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgInvitationCreated : pb::IMessage<CMsgInvitationCreated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgInvitationCreated> _parser = new pb::MessageParser<CMsgInvitationCreated>(() => new CMsgInvitationCreated());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgInvitationCreated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInvitationCreated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInvitationCreated(CMsgInvitationCreated other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      steamId_ = other.steamId_;
      userOffline_ = other.userOffline_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInvitationCreated Clone() {
      return new CMsgInvitationCreated(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static ulong GroupIdDefaultValue = 0UL;

    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "steam_id" field.</summary>
    public const int SteamIdFieldNumber = 2;
    private readonly static ulong SteamIdDefaultValue = 0UL;

    private ulong steamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamId {
      get { if ((_hasBits0 & 2) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        steamId_ = value;
      }
    }
    /// <summary>Gets whether the "steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSteamId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSteamId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "user_offline" field.</summary>
    public const int UserOfflineFieldNumber = 3;
    private readonly static bool UserOfflineDefaultValue = false;

    private bool userOffline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserOffline {
      get { if ((_hasBits0 & 4) != 0) { return userOffline_; } else { return UserOfflineDefaultValue; } }
      set {
        _hasBits0 |= 4;
        userOffline_ = value;
      }
    }
    /// <summary>Gets whether the "user_offline" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserOffline {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "user_offline" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserOffline() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgInvitationCreated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgInvitationCreated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (SteamId != other.SteamId) return false;
      if (UserOffline != other.UserOffline) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasSteamId) hash ^= SteamId.GetHashCode();
      if (HasUserOffline) hash ^= UserOffline.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GroupId);
      }
      if (HasSteamId) {
        output.WriteRawTag(17);
        output.WriteFixed64(SteamId);
      }
      if (HasUserOffline) {
        output.WriteRawTag(24);
        output.WriteBool(UserOffline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GroupId);
      }
      if (HasSteamId) {
        output.WriteRawTag(17);
        output.WriteFixed64(SteamId);
      }
      if (HasUserOffline) {
        output.WriteRawTag(24);
        output.WriteBool(UserOffline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      if (HasSteamId) {
        size += 1 + 8;
      }
      if (HasUserOffline) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgInvitationCreated other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasSteamId) {
        SteamId = other.SteamId;
      }
      if (other.HasUserOffline) {
        UserOffline = other.UserOffline;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 17: {
            SteamId = input.ReadFixed64();
            break;
          }
          case 24: {
            UserOffline = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 17: {
            SteamId = input.ReadFixed64();
            break;
          }
          case 24: {
            UserOffline = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPartyInviteResponse : pb::IMessage<CMsgPartyInviteResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPartyInviteResponse> _parser = new pb::MessageParser<CMsgPartyInviteResponse>(() => new CMsgPartyInviteResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPartyInviteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyInviteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyInviteResponse(CMsgPartyInviteResponse other) : this() {
      _hasBits0 = other._hasBits0;
      partyId_ = other.partyId_;
      accept_ = other.accept_;
      clientVersion_ = other.clientVersion_;
      pingData_ = other.pingData_ != null ? other.pingData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyInviteResponse Clone() {
      return new CMsgPartyInviteResponse(this);
    }

    /// <summary>Field number for the "party_id" field.</summary>
    public const int PartyIdFieldNumber = 1;
    private readonly static ulong PartyIdDefaultValue = 0UL;

    private ulong partyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PartyId {
      get { if ((_hasBits0 & 1) != 0) { return partyId_; } else { return PartyIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        partyId_ = value;
      }
    }
    /// <summary>Gets whether the "party_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartyId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "party_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartyId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 2;
    private readonly static bool AcceptDefaultValue = false;

    private bool accept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accept {
      get { if ((_hasBits0 & 2) != 0) { return accept_; } else { return AcceptDefaultValue; } }
      set {
        _hasBits0 |= 2;
        accept_ = value;
      }
    }
    /// <summary>Gets whether the "accept" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccept {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "accept" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccept() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 3;
    private readonly static uint ClientVersionDefaultValue = 0;

    private uint clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientVersion {
      get { if ((_hasBits0 & 4) != 0) { return clientVersion_; } else { return ClientVersionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        clientVersion_ = value;
      }
    }
    /// <summary>Gets whether the "client_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientVersion {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "client_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientVersion() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ping_data" field.</summary>
    public const int PingDataFieldNumber = 8;
    private global::Steam.Protos.Dota2.CMsgClientPingData pingData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientPingData PingData {
      get { return pingData_; }
      set {
        pingData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPartyInviteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPartyInviteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartyId != other.PartyId) return false;
      if (Accept != other.Accept) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (!object.Equals(PingData, other.PingData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPartyId) hash ^= PartyId.GetHashCode();
      if (HasAccept) hash ^= Accept.GetHashCode();
      if (HasClientVersion) hash ^= ClientVersion.GetHashCode();
      if (pingData_ != null) hash ^= PingData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPartyId) {
        output.WriteRawTag(8);
        output.WriteUInt64(PartyId);
      }
      if (HasAccept) {
        output.WriteRawTag(16);
        output.WriteBool(Accept);
      }
      if (HasClientVersion) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClientVersion);
      }
      if (pingData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PingData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPartyId) {
        output.WriteRawTag(8);
        output.WriteUInt64(PartyId);
      }
      if (HasAccept) {
        output.WriteRawTag(16);
        output.WriteBool(Accept);
      }
      if (HasClientVersion) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClientVersion);
      }
      if (pingData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PingData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPartyId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PartyId);
      }
      if (HasAccept) {
        size += 1 + 1;
      }
      if (HasClientVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientVersion);
      }
      if (pingData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPartyInviteResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasPartyId) {
        PartyId = other.PartyId;
      }
      if (other.HasAccept) {
        Accept = other.Accept;
      }
      if (other.HasClientVersion) {
        ClientVersion = other.ClientVersion;
      }
      if (other.pingData_ != null) {
        if (pingData_ == null) {
          PingData = new global::Steam.Protos.Dota2.CMsgClientPingData();
        }
        PingData.MergeFrom(other.PingData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PartyId = input.ReadUInt64();
            break;
          }
          case 16: {
            Accept = input.ReadBool();
            break;
          }
          case 24: {
            ClientVersion = input.ReadUInt32();
            break;
          }
          case 66: {
            if (pingData_ == null) {
              PingData = new global::Steam.Protos.Dota2.CMsgClientPingData();
            }
            input.ReadMessage(PingData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PartyId = input.ReadUInt64();
            break;
          }
          case 16: {
            Accept = input.ReadBool();
            break;
          }
          case 24: {
            ClientVersion = input.ReadUInt32();
            break;
          }
          case 66: {
            if (pingData_ == null) {
              PingData = new global::Steam.Protos.Dota2.CMsgClientPingData();
            }
            input.ReadMessage(PingData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLobbyInviteResponse : pb::IMessage<CMsgLobbyInviteResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyInviteResponse> _parser = new pb::MessageParser<CMsgLobbyInviteResponse>(() => new CMsgLobbyInviteResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyInviteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyInviteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyInviteResponse(CMsgLobbyInviteResponse other) : this() {
      _hasBits0 = other._hasBits0;
      lobbyId_ = other.lobbyId_;
      accept_ = other.accept_;
      clientVersion_ = other.clientVersion_;
      customGameCrc_ = other.customGameCrc_;
      customGameTimestamp_ = other.customGameTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyInviteResponse Clone() {
      return new CMsgLobbyInviteResponse(this);
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 1;
    private readonly static ulong LobbyIdDefaultValue = 0UL;

    private ulong lobbyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LobbyId {
      get { if ((_hasBits0 & 1) != 0) { return lobbyId_; } else { return LobbyIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lobbyId_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lobby_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 2;
    private readonly static bool AcceptDefaultValue = false;

    private bool accept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accept {
      get { if ((_hasBits0 & 2) != 0) { return accept_; } else { return AcceptDefaultValue; } }
      set {
        _hasBits0 |= 2;
        accept_ = value;
      }
    }
    /// <summary>Gets whether the "accept" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccept {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "accept" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccept() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 3;
    private readonly static uint ClientVersionDefaultValue = 0;

    private uint clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientVersion {
      get { if ((_hasBits0 & 4) != 0) { return clientVersion_; } else { return ClientVersionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        clientVersion_ = value;
      }
    }
    /// <summary>Gets whether the "client_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientVersion {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "client_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientVersion() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "custom_game_crc" field.</summary>
    public const int CustomGameCrcFieldNumber = 6;
    private readonly static ulong CustomGameCrcDefaultValue = 0UL;

    private ulong customGameCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomGameCrc {
      get { if ((_hasBits0 & 8) != 0) { return customGameCrc_; } else { return CustomGameCrcDefaultValue; } }
      set {
        _hasBits0 |= 8;
        customGameCrc_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_crc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameCrc {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_crc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameCrc() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "custom_game_timestamp" field.</summary>
    public const int CustomGameTimestampFieldNumber = 7;
    private readonly static uint CustomGameTimestampDefaultValue = 0;

    private uint customGameTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CustomGameTimestamp {
      get { if ((_hasBits0 & 16) != 0) { return customGameTimestamp_; } else { return CustomGameTimestampDefaultValue; } }
      set {
        _hasBits0 |= 16;
        customGameTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameTimestamp {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameTimestamp() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyInviteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyInviteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LobbyId != other.LobbyId) return false;
      if (Accept != other.Accept) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (CustomGameCrc != other.CustomGameCrc) return false;
      if (CustomGameTimestamp != other.CustomGameTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLobbyId) hash ^= LobbyId.GetHashCode();
      if (HasAccept) hash ^= Accept.GetHashCode();
      if (HasClientVersion) hash ^= ClientVersion.GetHashCode();
      if (HasCustomGameCrc) hash ^= CustomGameCrc.GetHashCode();
      if (HasCustomGameTimestamp) hash ^= CustomGameTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLobbyId) {
        output.WriteRawTag(9);
        output.WriteFixed64(LobbyId);
      }
      if (HasAccept) {
        output.WriteRawTag(16);
        output.WriteBool(Accept);
      }
      if (HasClientVersion) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClientVersion);
      }
      if (HasCustomGameCrc) {
        output.WriteRawTag(49);
        output.WriteFixed64(CustomGameCrc);
      }
      if (HasCustomGameTimestamp) {
        output.WriteRawTag(61);
        output.WriteFixed32(CustomGameTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLobbyId) {
        output.WriteRawTag(9);
        output.WriteFixed64(LobbyId);
      }
      if (HasAccept) {
        output.WriteRawTag(16);
        output.WriteBool(Accept);
      }
      if (HasClientVersion) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClientVersion);
      }
      if (HasCustomGameCrc) {
        output.WriteRawTag(49);
        output.WriteFixed64(CustomGameCrc);
      }
      if (HasCustomGameTimestamp) {
        output.WriteRawTag(61);
        output.WriteFixed32(CustomGameTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLobbyId) {
        size += 1 + 8;
      }
      if (HasAccept) {
        size += 1 + 1;
      }
      if (HasClientVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientVersion);
      }
      if (HasCustomGameCrc) {
        size += 1 + 8;
      }
      if (HasCustomGameTimestamp) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyInviteResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasLobbyId) {
        LobbyId = other.LobbyId;
      }
      if (other.HasAccept) {
        Accept = other.Accept;
      }
      if (other.HasClientVersion) {
        ClientVersion = other.ClientVersion;
      }
      if (other.HasCustomGameCrc) {
        CustomGameCrc = other.CustomGameCrc;
      }
      if (other.HasCustomGameTimestamp) {
        CustomGameTimestamp = other.CustomGameTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            LobbyId = input.ReadFixed64();
            break;
          }
          case 16: {
            Accept = input.ReadBool();
            break;
          }
          case 24: {
            ClientVersion = input.ReadUInt32();
            break;
          }
          case 49: {
            CustomGameCrc = input.ReadFixed64();
            break;
          }
          case 61: {
            CustomGameTimestamp = input.ReadFixed32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            LobbyId = input.ReadFixed64();
            break;
          }
          case 16: {
            Accept = input.ReadBool();
            break;
          }
          case 24: {
            ClientVersion = input.ReadUInt32();
            break;
          }
          case 49: {
            CustomGameCrc = input.ReadFixed64();
            break;
          }
          case 61: {
            CustomGameTimestamp = input.ReadFixed32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgKickFromParty : pb::IMessage<CMsgKickFromParty>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgKickFromParty> _parser = new pb::MessageParser<CMsgKickFromParty>(() => new CMsgKickFromParty());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgKickFromParty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgKickFromParty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgKickFromParty(CMsgKickFromParty other) : this() {
      _hasBits0 = other._hasBits0;
      steamId_ = other.steamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgKickFromParty Clone() {
      return new CMsgKickFromParty(this);
    }

    /// <summary>Field number for the "steam_id" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private readonly static ulong SteamIdDefaultValue = 0UL;

    private ulong steamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamId {
      get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        steamId_ = value;
      }
    }
    /// <summary>Gets whether the "steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSteamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSteamId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgKickFromParty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgKickFromParty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSteamId) hash ^= SteamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSteamId) {
        output.WriteRawTag(9);
        output.WriteFixed64(SteamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSteamId) {
        output.WriteRawTag(9);
        output.WriteFixed64(SteamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSteamId) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgKickFromParty other) {
      if (other == null) {
        return;
      }
      if (other.HasSteamId) {
        SteamId = other.SteamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            SteamId = input.ReadFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            SteamId = input.ReadFixed64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLeaveParty : pb::IMessage<CMsgLeaveParty>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLeaveParty> _parser = new pb::MessageParser<CMsgLeaveParty>(() => new CMsgLeaveParty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLeaveParty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaveParty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaveParty(CMsgLeaveParty other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaveParty Clone() {
      return new CMsgLeaveParty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLeaveParty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLeaveParty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLeaveParty other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgCustomGameInstallStatus : pb::IMessage<CMsgCustomGameInstallStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgCustomGameInstallStatus> _parser = new pb::MessageParser<CMsgCustomGameInstallStatus>(() => new CMsgCustomGameInstallStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgCustomGameInstallStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCustomGameInstallStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCustomGameInstallStatus(CMsgCustomGameInstallStatus other) : this() {
      _hasBits0 = other._hasBits0;
      status_ = other.status_;
      message_ = other.message_;
      latestTimestampFromSteam_ = other.latestTimestampFromSteam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCustomGameInstallStatus Clone() {
      return new CMsgCustomGameInstallStatus(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.ECustomGameInstallStatus StatusDefaultValue = global::Steam.Protos.Dota2.ECustomGameInstallStatus.KEcustomGameInstallStatusUnknown;

    private global::Steam.Protos.Dota2.ECustomGameInstallStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.ECustomGameInstallStatus Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "latest_timestamp_from_steam" field.</summary>
    public const int LatestTimestampFromSteamFieldNumber = 3;
    private readonly static uint LatestTimestampFromSteamDefaultValue = 0;

    private uint latestTimestampFromSteam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LatestTimestampFromSteam {
      get { if ((_hasBits0 & 2) != 0) { return latestTimestampFromSteam_; } else { return LatestTimestampFromSteamDefaultValue; } }
      set {
        _hasBits0 |= 2;
        latestTimestampFromSteam_ = value;
      }
    }
    /// <summary>Gets whether the "latest_timestamp_from_steam" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLatestTimestampFromSteam {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "latest_timestamp_from_steam" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLatestTimestampFromSteam() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgCustomGameInstallStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgCustomGameInstallStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Message != other.Message) return false;
      if (LatestTimestampFromSteam != other.LatestTimestampFromSteam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasLatestTimestampFromSteam) hash ^= LatestTimestampFromSteam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (HasMessage) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (HasLatestTimestampFromSteam) {
        output.WriteRawTag(29);
        output.WriteFixed32(LatestTimestampFromSteam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (HasMessage) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (HasLatestTimestampFromSteam) {
        output.WriteRawTag(29);
        output.WriteFixed32(LatestTimestampFromSteam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasLatestTimestampFromSteam) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgCustomGameInstallStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasLatestTimestampFromSteam) {
        LatestTimestampFromSteam = other.LatestTimestampFromSteam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Steam.Protos.Dota2.ECustomGameInstallStatus) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 29: {
            LatestTimestampFromSteam = input.ReadFixed32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = (global::Steam.Protos.Dota2.ECustomGameInstallStatus) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 29: {
            LatestTimestampFromSteam = input.ReadFixed32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerAvailable : pb::IMessage<CMsgServerAvailable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerAvailable> _parser = new pb::MessageParser<CMsgServerAvailable>(() => new CMsgServerAvailable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerAvailable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerAvailable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerAvailable(CMsgServerAvailable other) : this() {
      customGameInstallStatus_ = other.customGameInstallStatus_ != null ? other.customGameInstallStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerAvailable Clone() {
      return new CMsgServerAvailable(this);
    }

    /// <summary>Field number for the "custom_game_install_status" field.</summary>
    public const int CustomGameInstallStatusFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgCustomGameInstallStatus customGameInstallStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgCustomGameInstallStatus CustomGameInstallStatus {
      get { return customGameInstallStatus_; }
      set {
        customGameInstallStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerAvailable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerAvailable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CustomGameInstallStatus, other.CustomGameInstallStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (customGameInstallStatus_ != null) hash ^= CustomGameInstallStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (customGameInstallStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CustomGameInstallStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (customGameInstallStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CustomGameInstallStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (customGameInstallStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomGameInstallStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerAvailable other) {
      if (other == null) {
        return;
      }
      if (other.customGameInstallStatus_ != null) {
        if (customGameInstallStatus_ == null) {
          CustomGameInstallStatus = new global::Steam.Protos.Dota2.CMsgCustomGameInstallStatus();
        }
        CustomGameInstallStatus.MergeFrom(other.CustomGameInstallStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (customGameInstallStatus_ == null) {
              CustomGameInstallStatus = new global::Steam.Protos.Dota2.CMsgCustomGameInstallStatus();
            }
            input.ReadMessage(CustomGameInstallStatus);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (customGameInstallStatus_ == null) {
              CustomGameInstallStatus = new global::Steam.Protos.Dota2.CMsgCustomGameInstallStatus();
            }
            input.ReadMessage(CustomGameInstallStatus);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLANServerAvailable : pb::IMessage<CMsgLANServerAvailable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLANServerAvailable> _parser = new pb::MessageParser<CMsgLANServerAvailable>(() => new CMsgLANServerAvailable());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLANServerAvailable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLANServerAvailable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLANServerAvailable(CMsgLANServerAvailable other) : this() {
      _hasBits0 = other._hasBits0;
      lobbyId_ = other.lobbyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLANServerAvailable Clone() {
      return new CMsgLANServerAvailable(this);
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 1;
    private readonly static ulong LobbyIdDefaultValue = 0UL;

    private ulong lobbyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LobbyId {
      get { if ((_hasBits0 & 1) != 0) { return lobbyId_; } else { return LobbyIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lobbyId_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lobby_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLANServerAvailable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLANServerAvailable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LobbyId != other.LobbyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLobbyId) hash ^= LobbyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLobbyId) {
        output.WriteRawTag(9);
        output.WriteFixed64(LobbyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLobbyId) {
        output.WriteRawTag(9);
        output.WriteFixed64(LobbyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLobbyId) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLANServerAvailable other) {
      if (other == null) {
        return;
      }
      if (other.HasLobbyId) {
        LobbyId = other.LobbyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            LobbyId = input.ReadFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            LobbyId = input.ReadFixed64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOEconGameAccountClient : pb::IMessage<CSOEconGameAccountClient>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOEconGameAccountClient> _parser = new pb::MessageParser<CSOEconGameAccountClient>(() => new CSOEconGameAccountClient());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOEconGameAccountClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconGameAccountClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconGameAccountClient(CSOEconGameAccountClient other) : this() {
      _hasBits0 = other._hasBits0;
      additionalBackpackSlots_ = other.additionalBackpackSlots_;
      trialAccount_ = other.trialAccount_;
      eligibleForOnlinePlay_ = other.eligibleForOnlinePlay_;
      needToChooseMostHelpfulFriend_ = other.needToChooseMostHelpfulFriend_;
      inCoachesList_ = other.inCoachesList_;
      tradeBanExpiration_ = other.tradeBanExpiration_;
      duelBanExpiration_ = other.duelBanExpiration_;
      madeFirstPurchase_ = other.madeFirstPurchase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconGameAccountClient Clone() {
      return new CSOEconGameAccountClient(this);
    }

    /// <summary>Field number for the "additional_backpack_slots" field.</summary>
    public const int AdditionalBackpackSlotsFieldNumber = 1;
    private readonly static uint AdditionalBackpackSlotsDefaultValue = 0;

    private uint additionalBackpackSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AdditionalBackpackSlots {
      get { if ((_hasBits0 & 1) != 0) { return additionalBackpackSlots_; } else { return AdditionalBackpackSlotsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        additionalBackpackSlots_ = value;
      }
    }
    /// <summary>Gets whether the "additional_backpack_slots" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdditionalBackpackSlots {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "additional_backpack_slots" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdditionalBackpackSlots() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "trial_account" field.</summary>
    public const int TrialAccountFieldNumber = 2;
    private readonly static bool TrialAccountDefaultValue = false;

    private bool trialAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TrialAccount {
      get { if ((_hasBits0 & 2) != 0) { return trialAccount_; } else { return TrialAccountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        trialAccount_ = value;
      }
    }
    /// <summary>Gets whether the "trial_account" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrialAccount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "trial_account" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrialAccount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "eligible_for_online_play" field.</summary>
    public const int EligibleForOnlinePlayFieldNumber = 3;
    private readonly static bool EligibleForOnlinePlayDefaultValue = true;

    private bool eligibleForOnlinePlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EligibleForOnlinePlay {
      get { if ((_hasBits0 & 4) != 0) { return eligibleForOnlinePlay_; } else { return EligibleForOnlinePlayDefaultValue; } }
      set {
        _hasBits0 |= 4;
        eligibleForOnlinePlay_ = value;
      }
    }
    /// <summary>Gets whether the "eligible_for_online_play" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEligibleForOnlinePlay {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "eligible_for_online_play" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEligibleForOnlinePlay() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "need_to_choose_most_helpful_friend" field.</summary>
    public const int NeedToChooseMostHelpfulFriendFieldNumber = 4;
    private readonly static bool NeedToChooseMostHelpfulFriendDefaultValue = false;

    private bool needToChooseMostHelpfulFriend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedToChooseMostHelpfulFriend {
      get { if ((_hasBits0 & 8) != 0) { return needToChooseMostHelpfulFriend_; } else { return NeedToChooseMostHelpfulFriendDefaultValue; } }
      set {
        _hasBits0 |= 8;
        needToChooseMostHelpfulFriend_ = value;
      }
    }
    /// <summary>Gets whether the "need_to_choose_most_helpful_friend" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNeedToChooseMostHelpfulFriend {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "need_to_choose_most_helpful_friend" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNeedToChooseMostHelpfulFriend() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "in_coaches_list" field.</summary>
    public const int InCoachesListFieldNumber = 5;
    private readonly static bool InCoachesListDefaultValue = false;

    private bool inCoachesList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InCoachesList {
      get { if ((_hasBits0 & 16) != 0) { return inCoachesList_; } else { return InCoachesListDefaultValue; } }
      set {
        _hasBits0 |= 16;
        inCoachesList_ = value;
      }
    }
    /// <summary>Gets whether the "in_coaches_list" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInCoachesList {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "in_coaches_list" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInCoachesList() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "trade_ban_expiration" field.</summary>
    public const int TradeBanExpirationFieldNumber = 6;
    private readonly static uint TradeBanExpirationDefaultValue = 0;

    private uint tradeBanExpiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradeBanExpiration {
      get { if ((_hasBits0 & 32) != 0) { return tradeBanExpiration_; } else { return TradeBanExpirationDefaultValue; } }
      set {
        _hasBits0 |= 32;
        tradeBanExpiration_ = value;
      }
    }
    /// <summary>Gets whether the "trade_ban_expiration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTradeBanExpiration {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "trade_ban_expiration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTradeBanExpiration() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "duel_ban_expiration" field.</summary>
    public const int DuelBanExpirationFieldNumber = 7;
    private readonly static uint DuelBanExpirationDefaultValue = 0;

    private uint duelBanExpiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DuelBanExpiration {
      get { if ((_hasBits0 & 64) != 0) { return duelBanExpiration_; } else { return DuelBanExpirationDefaultValue; } }
      set {
        _hasBits0 |= 64;
        duelBanExpiration_ = value;
      }
    }
    /// <summary>Gets whether the "duel_ban_expiration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuelBanExpiration {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "duel_ban_expiration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuelBanExpiration() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "made_first_purchase" field.</summary>
    public const int MadeFirstPurchaseFieldNumber = 9;
    private readonly static bool MadeFirstPurchaseDefaultValue = false;

    private bool madeFirstPurchase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MadeFirstPurchase {
      get { if ((_hasBits0 & 128) != 0) { return madeFirstPurchase_; } else { return MadeFirstPurchaseDefaultValue; } }
      set {
        _hasBits0 |= 128;
        madeFirstPurchase_ = value;
      }
    }
    /// <summary>Gets whether the "made_first_purchase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMadeFirstPurchase {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "made_first_purchase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMadeFirstPurchase() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOEconGameAccountClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOEconGameAccountClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdditionalBackpackSlots != other.AdditionalBackpackSlots) return false;
      if (TrialAccount != other.TrialAccount) return false;
      if (EligibleForOnlinePlay != other.EligibleForOnlinePlay) return false;
      if (NeedToChooseMostHelpfulFriend != other.NeedToChooseMostHelpfulFriend) return false;
      if (InCoachesList != other.InCoachesList) return false;
      if (TradeBanExpiration != other.TradeBanExpiration) return false;
      if (DuelBanExpiration != other.DuelBanExpiration) return false;
      if (MadeFirstPurchase != other.MadeFirstPurchase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAdditionalBackpackSlots) hash ^= AdditionalBackpackSlots.GetHashCode();
      if (HasTrialAccount) hash ^= TrialAccount.GetHashCode();
      if (HasEligibleForOnlinePlay) hash ^= EligibleForOnlinePlay.GetHashCode();
      if (HasNeedToChooseMostHelpfulFriend) hash ^= NeedToChooseMostHelpfulFriend.GetHashCode();
      if (HasInCoachesList) hash ^= InCoachesList.GetHashCode();
      if (HasTradeBanExpiration) hash ^= TradeBanExpiration.GetHashCode();
      if (HasDuelBanExpiration) hash ^= DuelBanExpiration.GetHashCode();
      if (HasMadeFirstPurchase) hash ^= MadeFirstPurchase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAdditionalBackpackSlots) {
        output.WriteRawTag(8);
        output.WriteUInt32(AdditionalBackpackSlots);
      }
      if (HasTrialAccount) {
        output.WriteRawTag(16);
        output.WriteBool(TrialAccount);
      }
      if (HasEligibleForOnlinePlay) {
        output.WriteRawTag(24);
        output.WriteBool(EligibleForOnlinePlay);
      }
      if (HasNeedToChooseMostHelpfulFriend) {
        output.WriteRawTag(32);
        output.WriteBool(NeedToChooseMostHelpfulFriend);
      }
      if (HasInCoachesList) {
        output.WriteRawTag(40);
        output.WriteBool(InCoachesList);
      }
      if (HasTradeBanExpiration) {
        output.WriteRawTag(53);
        output.WriteFixed32(TradeBanExpiration);
      }
      if (HasDuelBanExpiration) {
        output.WriteRawTag(61);
        output.WriteFixed32(DuelBanExpiration);
      }
      if (HasMadeFirstPurchase) {
        output.WriteRawTag(72);
        output.WriteBool(MadeFirstPurchase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAdditionalBackpackSlots) {
        output.WriteRawTag(8);
        output.WriteUInt32(AdditionalBackpackSlots);
      }
      if (HasTrialAccount) {
        output.WriteRawTag(16);
        output.WriteBool(TrialAccount);
      }
      if (HasEligibleForOnlinePlay) {
        output.WriteRawTag(24);
        output.WriteBool(EligibleForOnlinePlay);
      }
      if (HasNeedToChooseMostHelpfulFriend) {
        output.WriteRawTag(32);
        output.WriteBool(NeedToChooseMostHelpfulFriend);
      }
      if (HasInCoachesList) {
        output.WriteRawTag(40);
        output.WriteBool(InCoachesList);
      }
      if (HasTradeBanExpiration) {
        output.WriteRawTag(53);
        output.WriteFixed32(TradeBanExpiration);
      }
      if (HasDuelBanExpiration) {
        output.WriteRawTag(61);
        output.WriteFixed32(DuelBanExpiration);
      }
      if (HasMadeFirstPurchase) {
        output.WriteRawTag(72);
        output.WriteBool(MadeFirstPurchase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAdditionalBackpackSlots) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AdditionalBackpackSlots);
      }
      if (HasTrialAccount) {
        size += 1 + 1;
      }
      if (HasEligibleForOnlinePlay) {
        size += 1 + 1;
      }
      if (HasNeedToChooseMostHelpfulFriend) {
        size += 1 + 1;
      }
      if (HasInCoachesList) {
        size += 1 + 1;
      }
      if (HasTradeBanExpiration) {
        size += 1 + 4;
      }
      if (HasDuelBanExpiration) {
        size += 1 + 4;
      }
      if (HasMadeFirstPurchase) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOEconGameAccountClient other) {
      if (other == null) {
        return;
      }
      if (other.HasAdditionalBackpackSlots) {
        AdditionalBackpackSlots = other.AdditionalBackpackSlots;
      }
      if (other.HasTrialAccount) {
        TrialAccount = other.TrialAccount;
      }
      if (other.HasEligibleForOnlinePlay) {
        EligibleForOnlinePlay = other.EligibleForOnlinePlay;
      }
      if (other.HasNeedToChooseMostHelpfulFriend) {
        NeedToChooseMostHelpfulFriend = other.NeedToChooseMostHelpfulFriend;
      }
      if (other.HasInCoachesList) {
        InCoachesList = other.InCoachesList;
      }
      if (other.HasTradeBanExpiration) {
        TradeBanExpiration = other.TradeBanExpiration;
      }
      if (other.HasDuelBanExpiration) {
        DuelBanExpiration = other.DuelBanExpiration;
      }
      if (other.HasMadeFirstPurchase) {
        MadeFirstPurchase = other.MadeFirstPurchase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AdditionalBackpackSlots = input.ReadUInt32();
            break;
          }
          case 16: {
            TrialAccount = input.ReadBool();
            break;
          }
          case 24: {
            EligibleForOnlinePlay = input.ReadBool();
            break;
          }
          case 32: {
            NeedToChooseMostHelpfulFriend = input.ReadBool();
            break;
          }
          case 40: {
            InCoachesList = input.ReadBool();
            break;
          }
          case 53: {
            TradeBanExpiration = input.ReadFixed32();
            break;
          }
          case 61: {
            DuelBanExpiration = input.ReadFixed32();
            break;
          }
          case 72: {
            MadeFirstPurchase = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AdditionalBackpackSlots = input.ReadUInt32();
            break;
          }
          case 16: {
            TrialAccount = input.ReadBool();
            break;
          }
          case 24: {
            EligibleForOnlinePlay = input.ReadBool();
            break;
          }
          case 32: {
            NeedToChooseMostHelpfulFriend = input.ReadBool();
            break;
          }
          case 40: {
            InCoachesList = input.ReadBool();
            break;
          }
          case 53: {
            TradeBanExpiration = input.ReadFixed32();
            break;
          }
          case 61: {
            DuelBanExpiration = input.ReadFixed32();
            break;
          }
          case 72: {
            MadeFirstPurchase = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgApplyStrangePart : pb::IMessage<CMsgApplyStrangePart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgApplyStrangePart> _parser = new pb::MessageParser<CMsgApplyStrangePart>(() => new CMsgApplyStrangePart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgApplyStrangePart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyStrangePart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyStrangePart(CMsgApplyStrangePart other) : this() {
      _hasBits0 = other._hasBits0;
      strangePartItemId_ = other.strangePartItemId_;
      itemItemId_ = other.itemItemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyStrangePart Clone() {
      return new CMsgApplyStrangePart(this);
    }

    /// <summary>Field number for the "strange_part_item_id" field.</summary>
    public const int StrangePartItemIdFieldNumber = 1;
    private readonly static ulong StrangePartItemIdDefaultValue = 0UL;

    private ulong strangePartItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StrangePartItemId {
      get { if ((_hasBits0 & 1) != 0) { return strangePartItemId_; } else { return StrangePartItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        strangePartItemId_ = value;
      }
    }
    /// <summary>Gets whether the "strange_part_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStrangePartItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "strange_part_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStrangePartItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_item_id" field.</summary>
    public const int ItemItemIdFieldNumber = 2;
    private readonly static ulong ItemItemIdDefaultValue = 0UL;

    private ulong itemItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemItemId {
      get { if ((_hasBits0 & 2) != 0) { return itemItemId_; } else { return ItemItemIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        itemItemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemItemId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "item_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemItemId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgApplyStrangePart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgApplyStrangePart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StrangePartItemId != other.StrangePartItemId) return false;
      if (ItemItemId != other.ItemItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStrangePartItemId) hash ^= StrangePartItemId.GetHashCode();
      if (HasItemItemId) hash ^= ItemItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStrangePartItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(StrangePartItemId);
      }
      if (HasItemItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStrangePartItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(StrangePartItemId);
      }
      if (HasItemItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStrangePartItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StrangePartItemId);
      }
      if (HasItemItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgApplyStrangePart other) {
      if (other == null) {
        return;
      }
      if (other.HasStrangePartItemId) {
        StrangePartItemId = other.StrangePartItemId;
      }
      if (other.HasItemItemId) {
        ItemItemId = other.ItemItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StrangePartItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemItemId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StrangePartItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemItemId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgApplyPennantUpgrade : pb::IMessage<CMsgApplyPennantUpgrade>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgApplyPennantUpgrade> _parser = new pb::MessageParser<CMsgApplyPennantUpgrade>(() => new CMsgApplyPennantUpgrade());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgApplyPennantUpgrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyPennantUpgrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyPennantUpgrade(CMsgApplyPennantUpgrade other) : this() {
      _hasBits0 = other._hasBits0;
      upgradeItemId_ = other.upgradeItemId_;
      pennantItemId_ = other.pennantItemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyPennantUpgrade Clone() {
      return new CMsgApplyPennantUpgrade(this);
    }

    /// <summary>Field number for the "upgrade_item_id" field.</summary>
    public const int UpgradeItemIdFieldNumber = 1;
    private readonly static ulong UpgradeItemIdDefaultValue = 0UL;

    private ulong upgradeItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpgradeItemId {
      get { if ((_hasBits0 & 1) != 0) { return upgradeItemId_; } else { return UpgradeItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        upgradeItemId_ = value;
      }
    }
    /// <summary>Gets whether the "upgrade_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUpgradeItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "upgrade_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpgradeItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "pennant_item_id" field.</summary>
    public const int PennantItemIdFieldNumber = 2;
    private readonly static ulong PennantItemIdDefaultValue = 0UL;

    private ulong pennantItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PennantItemId {
      get { if ((_hasBits0 & 2) != 0) { return pennantItemId_; } else { return PennantItemIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        pennantItemId_ = value;
      }
    }
    /// <summary>Gets whether the "pennant_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPennantItemId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "pennant_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPennantItemId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgApplyPennantUpgrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgApplyPennantUpgrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpgradeItemId != other.UpgradeItemId) return false;
      if (PennantItemId != other.PennantItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUpgradeItemId) hash ^= UpgradeItemId.GetHashCode();
      if (HasPennantItemId) hash ^= PennantItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUpgradeItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(UpgradeItemId);
      }
      if (HasPennantItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(PennantItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUpgradeItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(UpgradeItemId);
      }
      if (HasPennantItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(PennantItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUpgradeItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpgradeItemId);
      }
      if (HasPennantItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PennantItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgApplyPennantUpgrade other) {
      if (other == null) {
        return;
      }
      if (other.HasUpgradeItemId) {
        UpgradeItemId = other.UpgradeItemId;
      }
      if (other.HasPennantItemId) {
        PennantItemId = other.PennantItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UpgradeItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            PennantItemId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UpgradeItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            PennantItemId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgApplyEggEssence : pb::IMessage<CMsgApplyEggEssence>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgApplyEggEssence> _parser = new pb::MessageParser<CMsgApplyEggEssence>(() => new CMsgApplyEggEssence());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgApplyEggEssence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyEggEssence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyEggEssence(CMsgApplyEggEssence other) : this() {
      _hasBits0 = other._hasBits0;
      essenceItemId_ = other.essenceItemId_;
      eggItemId_ = other.eggItemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyEggEssence Clone() {
      return new CMsgApplyEggEssence(this);
    }

    /// <summary>Field number for the "essence_item_id" field.</summary>
    public const int EssenceItemIdFieldNumber = 1;
    private readonly static ulong EssenceItemIdDefaultValue = 0UL;

    private ulong essenceItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EssenceItemId {
      get { if ((_hasBits0 & 1) != 0) { return essenceItemId_; } else { return EssenceItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        essenceItemId_ = value;
      }
    }
    /// <summary>Gets whether the "essence_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEssenceItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "essence_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEssenceItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "egg_item_id" field.</summary>
    public const int EggItemIdFieldNumber = 2;
    private readonly static ulong EggItemIdDefaultValue = 0UL;

    private ulong eggItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EggItemId {
      get { if ((_hasBits0 & 2) != 0) { return eggItemId_; } else { return EggItemIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        eggItemId_ = value;
      }
    }
    /// <summary>Gets whether the "egg_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEggItemId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "egg_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEggItemId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgApplyEggEssence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgApplyEggEssence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EssenceItemId != other.EssenceItemId) return false;
      if (EggItemId != other.EggItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEssenceItemId) hash ^= EssenceItemId.GetHashCode();
      if (HasEggItemId) hash ^= EggItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEssenceItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(EssenceItemId);
      }
      if (HasEggItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(EggItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEssenceItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(EssenceItemId);
      }
      if (HasEggItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(EggItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEssenceItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EssenceItemId);
      }
      if (HasEggItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EggItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgApplyEggEssence other) {
      if (other == null) {
        return;
      }
      if (other.HasEssenceItemId) {
        EssenceItemId = other.EssenceItemId;
      }
      if (other.HasEggItemId) {
        EggItemId = other.EggItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EssenceItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            EggItemId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EssenceItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            EggItemId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOEconItemAttribute : pb::IMessage<CSOEconItemAttribute>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOEconItemAttribute> _parser = new pb::MessageParser<CSOEconItemAttribute>(() => new CSOEconItemAttribute());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOEconItemAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemAttribute(CSOEconItemAttribute other) : this() {
      _hasBits0 = other._hasBits0;
      defIndex_ = other.defIndex_;
      value_ = other.value_;
      valueBytes_ = other.valueBytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemAttribute Clone() {
      return new CSOEconItemAttribute(this);
    }

    /// <summary>Field number for the "def_index" field.</summary>
    public const int DefIndexFieldNumber = 1;
    private readonly static uint DefIndexDefaultValue = 65535;

    private uint defIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefIndex {
      get { if ((_hasBits0 & 1) != 0) { return defIndex_; } else { return DefIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        defIndex_ = value;
      }
    }
    /// <summary>Gets whether the "def_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "def_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static uint ValueDefaultValue = 0;

    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { if ((_hasBits0 & 2) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "value_bytes" field.</summary>
    public const int ValueBytesFieldNumber = 3;
    private readonly static pb::ByteString ValueBytesDefaultValue = pb::ByteString.Empty;

    private pb::ByteString valueBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ValueBytes {
      get { return valueBytes_ ?? ValueBytesDefaultValue; }
      set {
        valueBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValueBytes {
      get { return valueBytes_ != null; }
    }
    /// <summary>Clears the value of the "value_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValueBytes() {
      valueBytes_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOEconItemAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOEconItemAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefIndex != other.DefIndex) return false;
      if (Value != other.Value) return false;
      if (ValueBytes != other.ValueBytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDefIndex) hash ^= DefIndex.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasValueBytes) hash ^= ValueBytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDefIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(DefIndex);
      }
      if (HasValue) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (HasValueBytes) {
        output.WriteRawTag(26);
        output.WriteBytes(ValueBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDefIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(DefIndex);
      }
      if (HasValue) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (HasValueBytes) {
        output.WriteRawTag(26);
        output.WriteBytes(ValueBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDefIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefIndex);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (HasValueBytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValueBytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOEconItemAttribute other) {
      if (other == null) {
        return;
      }
      if (other.HasDefIndex) {
        DefIndex = other.DefIndex;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasValueBytes) {
        ValueBytes = other.ValueBytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DefIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 26: {
            ValueBytes = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DefIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 26: {
            ValueBytes = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOEconItemEquipped : pb::IMessage<CSOEconItemEquipped>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOEconItemEquipped> _parser = new pb::MessageParser<CSOEconItemEquipped>(() => new CSOEconItemEquipped());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOEconItemEquipped> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemEquipped() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemEquipped(CSOEconItemEquipped other) : this() {
      _hasBits0 = other._hasBits0;
      newClass_ = other.newClass_;
      newSlot_ = other.newSlot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemEquipped Clone() {
      return new CSOEconItemEquipped(this);
    }

    /// <summary>Field number for the "new_class" field.</summary>
    public const int NewClassFieldNumber = 1;
    private readonly static uint NewClassDefaultValue = 0;

    private uint newClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewClass {
      get { if ((_hasBits0 & 1) != 0) { return newClass_; } else { return NewClassDefaultValue; } }
      set {
        _hasBits0 |= 1;
        newClass_ = value;
      }
    }
    /// <summary>Gets whether the "new_class" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewClass {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "new_class" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNewClass() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "new_slot" field.</summary>
    public const int NewSlotFieldNumber = 2;
    private readonly static uint NewSlotDefaultValue = 0;

    private uint newSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewSlot {
      get { if ((_hasBits0 & 2) != 0) { return newSlot_; } else { return NewSlotDefaultValue; } }
      set {
        _hasBits0 |= 2;
        newSlot_ = value;
      }
    }
    /// <summary>Gets whether the "new_slot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewSlot {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "new_slot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNewSlot() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOEconItemEquipped);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOEconItemEquipped other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewClass != other.NewClass) return false;
      if (NewSlot != other.NewSlot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNewClass) hash ^= NewClass.GetHashCode();
      if (HasNewSlot) hash ^= NewSlot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNewClass) {
        output.WriteRawTag(8);
        output.WriteUInt32(NewClass);
      }
      if (HasNewSlot) {
        output.WriteRawTag(16);
        output.WriteUInt32(NewSlot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNewClass) {
        output.WriteRawTag(8);
        output.WriteUInt32(NewClass);
      }
      if (HasNewSlot) {
        output.WriteRawTag(16);
        output.WriteUInt32(NewSlot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNewClass) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewClass);
      }
      if (HasNewSlot) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewSlot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOEconItemEquipped other) {
      if (other == null) {
        return;
      }
      if (other.HasNewClass) {
        NewClass = other.NewClass;
      }
      if (other.HasNewSlot) {
        NewSlot = other.NewSlot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NewClass = input.ReadUInt32();
            break;
          }
          case 16: {
            NewSlot = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NewClass = input.ReadUInt32();
            break;
          }
          case 16: {
            NewSlot = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOEconItem : pb::IMessage<CSOEconItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOEconItem> _parser = new pb::MessageParser<CSOEconItem>(() => new CSOEconItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOEconItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItem(CSOEconItem other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      accountId_ = other.accountId_;
      inventory_ = other.inventory_;
      defIndex_ = other.defIndex_;
      quantity_ = other.quantity_;
      level_ = other.level_;
      quality_ = other.quality_;
      flags_ = other.flags_;
      origin_ = other.origin_;
      attribute_ = other.attribute_.Clone();
      interiorItem_ = other.interiorItem_ != null ? other.interiorItem_.Clone() : null;
      style_ = other.style_;
      originalId_ = other.originalId_;
      equippedState_ = other.equippedState_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItem Clone() {
      return new CSOEconItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 2) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "inventory" field.</summary>
    public const int InventoryFieldNumber = 3;
    private readonly static uint InventoryDefaultValue = 0;

    private uint inventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Inventory {
      get { if ((_hasBits0 & 4) != 0) { return inventory_; } else { return InventoryDefaultValue; } }
      set {
        _hasBits0 |= 4;
        inventory_ = value;
      }
    }
    /// <summary>Gets whether the "inventory" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInventory {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "inventory" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInventory() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "def_index" field.</summary>
    public const int DefIndexFieldNumber = 4;
    private readonly static uint DefIndexDefaultValue = 0;

    private uint defIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefIndex {
      get { if ((_hasBits0 & 8) != 0) { return defIndex_; } else { return DefIndexDefaultValue; } }
      set {
        _hasBits0 |= 8;
        defIndex_ = value;
      }
    }
    /// <summary>Gets whether the "def_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefIndex {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "def_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefIndex() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 5;
    private readonly static uint QuantityDefaultValue = 1;

    private uint quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quantity {
      get { if ((_hasBits0 & 16) != 0) { return quantity_; } else { return QuantityDefaultValue; } }
      set {
        _hasBits0 |= 16;
        quantity_ = value;
      }
    }
    /// <summary>Gets whether the "quantity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuantity {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "quantity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuantity() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private readonly static uint LevelDefaultValue = 1;

    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { if ((_hasBits0 & 32) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 32;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLevel {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLevel() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 7;
    private readonly static uint QualityDefaultValue = 4;

    private uint quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { if ((_hasBits0 & 64) != 0) { return quality_; } else { return QualityDefaultValue; } }
      set {
        _hasBits0 |= 64;
        quality_ = value;
      }
    }
    /// <summary>Gets whether the "quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuality {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuality() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 8;
    private readonly static uint FlagsDefaultValue = 0;

    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { if ((_hasBits0 & 128) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 9;
    private readonly static uint OriginDefaultValue = 0;

    private uint origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Origin {
      get { if ((_hasBits0 & 256) != 0) { return origin_; } else { return OriginDefaultValue; } }
      set {
        _hasBits0 |= 256;
        origin_ = value;
      }
    }
    /// <summary>Gets whether the "origin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrigin {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "origin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrigin() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSOEconItemAttribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(98, global::Steam.Protos.Dota2.CSOEconItemAttribute.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSOEconItemAttribute> attribute_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSOEconItemAttribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSOEconItemAttribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "interior_item" field.</summary>
    public const int InteriorItemFieldNumber = 13;
    private global::Steam.Protos.Dota2.CSOEconItem interiorItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CSOEconItem InteriorItem {
      get { return interiorItem_; }
      set {
        interiorItem_ = value;
      }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 15;
    private readonly static uint StyleDefaultValue = 0;

    private uint style_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Style {
      get { if ((_hasBits0 & 512) != 0) { return style_; } else { return StyleDefaultValue; } }
      set {
        _hasBits0 |= 512;
        style_ = value;
      }
    }
    /// <summary>Gets whether the "style" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStyle {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "style" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStyle() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "original_id" field.</summary>
    public const int OriginalIdFieldNumber = 16;
    private readonly static ulong OriginalIdDefaultValue = 0UL;

    private ulong originalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OriginalId {
      get { if ((_hasBits0 & 1024) != 0) { return originalId_; } else { return OriginalIdDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        originalId_ = value;
      }
    }
    /// <summary>Gets whether the "original_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalId {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "original_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalId() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "equipped_state" field.</summary>
    public const int EquippedStateFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSOEconItemEquipped> _repeated_equippedState_codec
        = pb::FieldCodec.ForMessage(146, global::Steam.Protos.Dota2.CSOEconItemEquipped.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSOEconItemEquipped> equippedState_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSOEconItemEquipped>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSOEconItemEquipped> EquippedState {
      get { return equippedState_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOEconItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOEconItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AccountId != other.AccountId) return false;
      if (Inventory != other.Inventory) return false;
      if (DefIndex != other.DefIndex) return false;
      if (Quantity != other.Quantity) return false;
      if (Level != other.Level) return false;
      if (Quality != other.Quality) return false;
      if (Flags != other.Flags) return false;
      if (Origin != other.Origin) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (!object.Equals(InteriorItem, other.InteriorItem)) return false;
      if (Style != other.Style) return false;
      if (OriginalId != other.OriginalId) return false;
      if(!equippedState_.Equals(other.equippedState_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasInventory) hash ^= Inventory.GetHashCode();
      if (HasDefIndex) hash ^= DefIndex.GetHashCode();
      if (HasQuantity) hash ^= Quantity.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasQuality) hash ^= Quality.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      if (HasOrigin) hash ^= Origin.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (interiorItem_ != null) hash ^= InteriorItem.GetHashCode();
      if (HasStyle) hash ^= Style.GetHashCode();
      if (HasOriginalId) hash ^= OriginalId.GetHashCode();
      hash ^= equippedState_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(AccountId);
      }
      if (HasInventory) {
        output.WriteRawTag(24);
        output.WriteUInt32(Inventory);
      }
      if (HasDefIndex) {
        output.WriteRawTag(32);
        output.WriteUInt32(DefIndex);
      }
      if (HasQuantity) {
        output.WriteRawTag(40);
        output.WriteUInt32(Quantity);
      }
      if (HasLevel) {
        output.WriteRawTag(48);
        output.WriteUInt32(Level);
      }
      if (HasQuality) {
        output.WriteRawTag(56);
        output.WriteUInt32(Quality);
      }
      if (HasFlags) {
        output.WriteRawTag(64);
        output.WriteUInt32(Flags);
      }
      if (HasOrigin) {
        output.WriteRawTag(72);
        output.WriteUInt32(Origin);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (interiorItem_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(InteriorItem);
      }
      if (HasStyle) {
        output.WriteRawTag(120);
        output.WriteUInt32(Style);
      }
      if (HasOriginalId) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(OriginalId);
      }
      equippedState_.WriteTo(output, _repeated_equippedState_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(AccountId);
      }
      if (HasInventory) {
        output.WriteRawTag(24);
        output.WriteUInt32(Inventory);
      }
      if (HasDefIndex) {
        output.WriteRawTag(32);
        output.WriteUInt32(DefIndex);
      }
      if (HasQuantity) {
        output.WriteRawTag(40);
        output.WriteUInt32(Quantity);
      }
      if (HasLevel) {
        output.WriteRawTag(48);
        output.WriteUInt32(Level);
      }
      if (HasQuality) {
        output.WriteRawTag(56);
        output.WriteUInt32(Quality);
      }
      if (HasFlags) {
        output.WriteRawTag(64);
        output.WriteUInt32(Flags);
      }
      if (HasOrigin) {
        output.WriteRawTag(72);
        output.WriteUInt32(Origin);
      }
      attribute_.WriteTo(ref output, _repeated_attribute_codec);
      if (interiorItem_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(InteriorItem);
      }
      if (HasStyle) {
        output.WriteRawTag(120);
        output.WriteUInt32(Style);
      }
      if (HasOriginalId) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(OriginalId);
      }
      equippedState_.WriteTo(ref output, _repeated_equippedState_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasInventory) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Inventory);
      }
      if (HasDefIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefIndex);
      }
      if (HasQuantity) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HasQuality) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (HasFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (HasOrigin) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Origin);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (interiorItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteriorItem);
      }
      if (HasStyle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Style);
      }
      if (HasOriginalId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(OriginalId);
      }
      size += equippedState_.CalculateSize(_repeated_equippedState_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOEconItem other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasInventory) {
        Inventory = other.Inventory;
      }
      if (other.HasDefIndex) {
        DefIndex = other.DefIndex;
      }
      if (other.HasQuantity) {
        Quantity = other.Quantity;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasQuality) {
        Quality = other.Quality;
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      if (other.HasOrigin) {
        Origin = other.Origin;
      }
      attribute_.Add(other.attribute_);
      if (other.interiorItem_ != null) {
        if (interiorItem_ == null) {
          InteriorItem = new global::Steam.Protos.Dota2.CSOEconItem();
        }
        InteriorItem.MergeFrom(other.InteriorItem);
      }
      if (other.HasStyle) {
        Style = other.Style;
      }
      if (other.HasOriginalId) {
        OriginalId = other.OriginalId;
      }
      equippedState_.Add(other.equippedState_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            Inventory = input.ReadUInt32();
            break;
          }
          case 32: {
            DefIndex = input.ReadUInt32();
            break;
          }
          case 40: {
            Quantity = input.ReadUInt32();
            break;
          }
          case 48: {
            Level = input.ReadUInt32();
            break;
          }
          case 56: {
            Quality = input.ReadUInt32();
            break;
          }
          case 64: {
            Flags = input.ReadUInt32();
            break;
          }
          case 72: {
            Origin = input.ReadUInt32();
            break;
          }
          case 98: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 106: {
            if (interiorItem_ == null) {
              InteriorItem = new global::Steam.Protos.Dota2.CSOEconItem();
            }
            input.ReadMessage(InteriorItem);
            break;
          }
          case 120: {
            Style = input.ReadUInt32();
            break;
          }
          case 128: {
            OriginalId = input.ReadUInt64();
            break;
          }
          case 146: {
            equippedState_.AddEntriesFrom(input, _repeated_equippedState_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            Inventory = input.ReadUInt32();
            break;
          }
          case 32: {
            DefIndex = input.ReadUInt32();
            break;
          }
          case 40: {
            Quantity = input.ReadUInt32();
            break;
          }
          case 48: {
            Level = input.ReadUInt32();
            break;
          }
          case 56: {
            Quality = input.ReadUInt32();
            break;
          }
          case 64: {
            Flags = input.ReadUInt32();
            break;
          }
          case 72: {
            Origin = input.ReadUInt32();
            break;
          }
          case 98: {
            attribute_.AddEntriesFrom(ref input, _repeated_attribute_codec);
            break;
          }
          case 106: {
            if (interiorItem_ == null) {
              InteriorItem = new global::Steam.Protos.Dota2.CSOEconItem();
            }
            input.ReadMessage(InteriorItem);
            break;
          }
          case 120: {
            Style = input.ReadUInt32();
            break;
          }
          case 128: {
            OriginalId = input.ReadUInt64();
            break;
          }
          case 146: {
            equippedState_.AddEntriesFrom(ref input, _repeated_equippedState_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSortItems : pb::IMessage<CMsgSortItems>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSortItems> _parser = new pb::MessageParser<CMsgSortItems>(() => new CMsgSortItems());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSortItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSortItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSortItems(CMsgSortItems other) : this() {
      _hasBits0 = other._hasBits0;
      sortType_ = other.sortType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSortItems Clone() {
      return new CMsgSortItems(this);
    }

    /// <summary>Field number for the "sort_type" field.</summary>
    public const int SortTypeFieldNumber = 1;
    private readonly static uint SortTypeDefaultValue = 0;

    private uint sortType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SortType {
      get { if ((_hasBits0 & 1) != 0) { return sortType_; } else { return SortTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sortType_ = value;
      }
    }
    /// <summary>Gets whether the "sort_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSortType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sort_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSortType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSortItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSortItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SortType != other.SortType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSortType) hash ^= SortType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSortType) {
        output.WriteRawTag(8);
        output.WriteUInt32(SortType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSortType) {
        output.WriteRawTag(8);
        output.WriteUInt32(SortType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSortType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SortType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSortItems other) {
      if (other == null) {
        return;
      }
      if (other.HasSortType) {
        SortType = other.SortType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SortType = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SortType = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgItemAcknowledged : pb::IMessage<CMsgItemAcknowledged>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgItemAcknowledged> _parser = new pb::MessageParser<CMsgItemAcknowledged>(() => new CMsgItemAcknowledged());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgItemAcknowledged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemAcknowledged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemAcknowledged(CMsgItemAcknowledged other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      inventory_ = other.inventory_;
      defIndex_ = other.defIndex_;
      quality_ = other.quality_;
      rarity_ = other.rarity_;
      origin_ = other.origin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgItemAcknowledged Clone() {
      return new CMsgItemAcknowledged(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "inventory" field.</summary>
    public const int InventoryFieldNumber = 2;
    private readonly static uint InventoryDefaultValue = 0;

    private uint inventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Inventory {
      get { if ((_hasBits0 & 2) != 0) { return inventory_; } else { return InventoryDefaultValue; } }
      set {
        _hasBits0 |= 2;
        inventory_ = value;
      }
    }
    /// <summary>Gets whether the "inventory" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInventory {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "inventory" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInventory() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "def_index" field.</summary>
    public const int DefIndexFieldNumber = 3;
    private readonly static uint DefIndexDefaultValue = 0;

    private uint defIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefIndex {
      get { if ((_hasBits0 & 4) != 0) { return defIndex_; } else { return DefIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        defIndex_ = value;
      }
    }
    /// <summary>Gets whether the "def_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "def_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefIndex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 4;
    private readonly static uint QualityDefaultValue = 0;

    private uint quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { if ((_hasBits0 & 8) != 0) { return quality_; } else { return QualityDefaultValue; } }
      set {
        _hasBits0 |= 8;
        quality_ = value;
      }
    }
    /// <summary>Gets whether the "quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuality {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuality() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 5;
    private readonly static uint RarityDefaultValue = 0;

    private uint rarity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rarity {
      get { if ((_hasBits0 & 16) != 0) { return rarity_; } else { return RarityDefaultValue; } }
      set {
        _hasBits0 |= 16;
        rarity_ = value;
      }
    }
    /// <summary>Gets whether the "rarity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRarity {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "rarity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRarity() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 6;
    private readonly static uint OriginDefaultValue = 0;

    private uint origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Origin {
      get { if ((_hasBits0 & 32) != 0) { return origin_; } else { return OriginDefaultValue; } }
      set {
        _hasBits0 |= 32;
        origin_ = value;
      }
    }
    /// <summary>Gets whether the "origin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrigin {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "origin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrigin() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgItemAcknowledged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgItemAcknowledged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Inventory != other.Inventory) return false;
      if (DefIndex != other.DefIndex) return false;
      if (Quality != other.Quality) return false;
      if (Rarity != other.Rarity) return false;
      if (Origin != other.Origin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasInventory) hash ^= Inventory.GetHashCode();
      if (HasDefIndex) hash ^= DefIndex.GetHashCode();
      if (HasQuality) hash ^= Quality.GetHashCode();
      if (HasRarity) hash ^= Rarity.GetHashCode();
      if (HasOrigin) hash ^= Origin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasInventory) {
        output.WriteRawTag(16);
        output.WriteUInt32(Inventory);
      }
      if (HasDefIndex) {
        output.WriteRawTag(24);
        output.WriteUInt32(DefIndex);
      }
      if (HasQuality) {
        output.WriteRawTag(32);
        output.WriteUInt32(Quality);
      }
      if (HasRarity) {
        output.WriteRawTag(40);
        output.WriteUInt32(Rarity);
      }
      if (HasOrigin) {
        output.WriteRawTag(48);
        output.WriteUInt32(Origin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasInventory) {
        output.WriteRawTag(16);
        output.WriteUInt32(Inventory);
      }
      if (HasDefIndex) {
        output.WriteRawTag(24);
        output.WriteUInt32(DefIndex);
      }
      if (HasQuality) {
        output.WriteRawTag(32);
        output.WriteUInt32(Quality);
      }
      if (HasRarity) {
        output.WriteRawTag(40);
        output.WriteUInt32(Rarity);
      }
      if (HasOrigin) {
        output.WriteRawTag(48);
        output.WriteUInt32(Origin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasInventory) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Inventory);
      }
      if (HasDefIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefIndex);
      }
      if (HasQuality) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (HasRarity) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rarity);
      }
      if (HasOrigin) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Origin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgItemAcknowledged other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasInventory) {
        Inventory = other.Inventory;
      }
      if (other.HasDefIndex) {
        DefIndex = other.DefIndex;
      }
      if (other.HasQuality) {
        Quality = other.Quality;
      }
      if (other.HasRarity) {
        Rarity = other.Rarity;
      }
      if (other.HasOrigin) {
        Origin = other.Origin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            Inventory = input.ReadUInt32();
            break;
          }
          case 24: {
            DefIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            Quality = input.ReadUInt32();
            break;
          }
          case 40: {
            Rarity = input.ReadUInt32();
            break;
          }
          case 48: {
            Origin = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            Inventory = input.ReadUInt32();
            break;
          }
          case 24: {
            DefIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            Quality = input.ReadUInt32();
            break;
          }
          case 40: {
            Rarity = input.ReadUInt32();
            break;
          }
          case 48: {
            Origin = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSetItemPositions : pb::IMessage<CMsgSetItemPositions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSetItemPositions> _parser = new pb::MessageParser<CMsgSetItemPositions>(() => new CMsgSetItemPositions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSetItemPositions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSetItemPositions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSetItemPositions(CMsgSetItemPositions other) : this() {
      itemPositions_ = other.itemPositions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSetItemPositions Clone() {
      return new CMsgSetItemPositions(this);
    }

    /// <summary>Field number for the "item_positions" field.</summary>
    public const int ItemPositionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSetItemPositions.Types.ItemPosition> _repeated_itemPositions_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSetItemPositions.Types.ItemPosition.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSetItemPositions.Types.ItemPosition> itemPositions_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSetItemPositions.Types.ItemPosition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSetItemPositions.Types.ItemPosition> ItemPositions {
      get { return itemPositions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSetItemPositions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSetItemPositions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemPositions_.Equals(other.itemPositions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemPositions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      itemPositions_.WriteTo(output, _repeated_itemPositions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      itemPositions_.WriteTo(ref output, _repeated_itemPositions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemPositions_.CalculateSize(_repeated_itemPositions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSetItemPositions other) {
      if (other == null) {
        return;
      }
      itemPositions_.Add(other.itemPositions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            itemPositions_.AddEntriesFrom(input, _repeated_itemPositions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            itemPositions_.AddEntriesFrom(ref input, _repeated_itemPositions_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSetItemPositions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ItemPosition : pb::IMessage<ItemPosition>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ItemPosition> _parser = new pb::MessageParser<ItemPosition>(() => new ItemPosition());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemPosition> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSetItemPositions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemPosition() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemPosition(ItemPosition other) : this() {
          _hasBits0 = other._hasBits0;
          itemId_ = other.itemId_;
          position_ = other.position_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemPosition Clone() {
          return new ItemPosition(this);
        }

        /// <summary>Field number for the "item_id" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private readonly static ulong ItemIdDefaultValue = 0UL;

        private ulong itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ItemId {
          get { if ((_hasBits0 & 1) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            itemId_ = value;
          }
        }
        /// <summary>Gets whether the "item_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItemId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "item_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItemId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private readonly static uint PositionDefaultValue = 0;

        private uint position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Position {
          get { if ((_hasBits0 & 2) != 0) { return position_; } else { return PositionDefaultValue; } }
          set {
            _hasBits0 |= 2;
            position_ = value;
          }
        }
        /// <summary>Gets whether the "position" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPosition {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "position" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPosition() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ItemPosition);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ItemPosition other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemId != other.ItemId) return false;
          if (Position != other.Position) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasItemId) hash ^= ItemId.GetHashCode();
          if (HasPosition) hash ^= Position.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasItemId) {
            output.WriteRawTag(8);
            output.WriteUInt64(ItemId);
          }
          if (HasPosition) {
            output.WriteRawTag(16);
            output.WriteUInt32(Position);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasItemId) {
            output.WriteRawTag(8);
            output.WriteUInt64(ItemId);
          }
          if (HasPosition) {
            output.WriteRawTag(16);
            output.WriteUInt32(Position);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasItemId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
          }
          if (HasPosition) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ItemPosition other) {
          if (other == null) {
            return;
          }
          if (other.HasItemId) {
            ItemId = other.ItemId;
          }
          if (other.HasPosition) {
            Position = other.Position;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemId = input.ReadUInt64();
                break;
              }
              case 16: {
                Position = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ItemId = input.ReadUInt64();
                break;
              }
              case 16: {
                Position = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGCStorePurchaseCancel : pb::IMessage<CMsgGCStorePurchaseCancel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCStorePurchaseCancel> _parser = new pb::MessageParser<CMsgGCStorePurchaseCancel>(() => new CMsgGCStorePurchaseCancel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCStorePurchaseCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseCancel(CMsgGCStorePurchaseCancel other) : this() {
      _hasBits0 = other._hasBits0;
      txnId_ = other.txnId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseCancel Clone() {
      return new CMsgGCStorePurchaseCancel(this);
    }

    /// <summary>Field number for the "txn_id" field.</summary>
    public const int TxnIdFieldNumber = 1;
    private readonly static ulong TxnIdDefaultValue = 0UL;

    private ulong txnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnId {
      get { if ((_hasBits0 & 1) != 0) { return txnId_; } else { return TxnIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        txnId_ = value;
      }
    }
    /// <summary>Gets whether the "txn_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "txn_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCStorePurchaseCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCStorePurchaseCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxnId != other.TxnId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTxnId) hash ^= TxnId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTxnId) {
        output.WriteRawTag(8);
        output.WriteUInt64(TxnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTxnId) {
        output.WriteRawTag(8);
        output.WriteUInt64(TxnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTxnId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCStorePurchaseCancel other) {
      if (other == null) {
        return;
      }
      if (other.HasTxnId) {
        TxnId = other.TxnId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TxnId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TxnId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCStorePurchaseCancelResponse : pb::IMessage<CMsgGCStorePurchaseCancelResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCStorePurchaseCancelResponse> _parser = new pb::MessageParser<CMsgGCStorePurchaseCancelResponse>(() => new CMsgGCStorePurchaseCancelResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCStorePurchaseCancelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseCancelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseCancelResponse(CMsgGCStorePurchaseCancelResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseCancelResponse Clone() {
      return new CMsgGCStorePurchaseCancelResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static uint ResultDefaultValue = 0;

    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCStorePurchaseCancelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCStorePurchaseCancelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCStorePurchaseCancelResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCStorePurchaseFinalize : pb::IMessage<CMsgGCStorePurchaseFinalize>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCStorePurchaseFinalize> _parser = new pb::MessageParser<CMsgGCStorePurchaseFinalize>(() => new CMsgGCStorePurchaseFinalize());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCStorePurchaseFinalize> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseFinalize() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseFinalize(CMsgGCStorePurchaseFinalize other) : this() {
      _hasBits0 = other._hasBits0;
      txnId_ = other.txnId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseFinalize Clone() {
      return new CMsgGCStorePurchaseFinalize(this);
    }

    /// <summary>Field number for the "txn_id" field.</summary>
    public const int TxnIdFieldNumber = 1;
    private readonly static ulong TxnIdDefaultValue = 0UL;

    private ulong txnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnId {
      get { if ((_hasBits0 & 1) != 0) { return txnId_; } else { return TxnIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        txnId_ = value;
      }
    }
    /// <summary>Gets whether the "txn_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "txn_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCStorePurchaseFinalize);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCStorePurchaseFinalize other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxnId != other.TxnId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTxnId) hash ^= TxnId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTxnId) {
        output.WriteRawTag(8);
        output.WriteUInt64(TxnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTxnId) {
        output.WriteRawTag(8);
        output.WriteUInt64(TxnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTxnId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCStorePurchaseFinalize other) {
      if (other == null) {
        return;
      }
      if (other.HasTxnId) {
        TxnId = other.TxnId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TxnId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TxnId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCStorePurchaseFinalizeResponse : pb::IMessage<CMsgGCStorePurchaseFinalizeResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCStorePurchaseFinalizeResponse> _parser = new pb::MessageParser<CMsgGCStorePurchaseFinalizeResponse>(() => new CMsgGCStorePurchaseFinalizeResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCStorePurchaseFinalizeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseFinalizeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseFinalizeResponse(CMsgGCStorePurchaseFinalizeResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      itemIds_ = other.itemIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCStorePurchaseFinalizeResponse Clone() {
      return new CMsgGCStorePurchaseFinalizeResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static uint ResultDefaultValue = 0;

    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_ids" field.</summary>
    public const int ItemIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_itemIds_codec
        = pb::FieldCodec.ForUInt64(16);
    private readonly pbc::RepeatedField<ulong> itemIds_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ItemIds {
      get { return itemIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCStorePurchaseFinalizeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCStorePurchaseFinalizeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!itemIds_.Equals(other.itemIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      hash ^= itemIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      itemIds_.WriteTo(ref output, _repeated_itemIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCStorePurchaseFinalizeResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      itemIds_.Add(other.itemIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            itemIds_.AddEntriesFrom(ref input, _repeated_itemIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToGCBannedWordListUpdated : pb::IMessage<CMsgGCToGCBannedWordListUpdated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToGCBannedWordListUpdated> _parser = new pb::MessageParser<CMsgGCToGCBannedWordListUpdated>(() => new CMsgGCToGCBannedWordListUpdated());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToGCBannedWordListUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCBannedWordListUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCBannedWordListUpdated(CMsgGCToGCBannedWordListUpdated other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCBannedWordListUpdated Clone() {
      return new CMsgGCToGCBannedWordListUpdated(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToGCBannedWordListUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToGCBannedWordListUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToGCBannedWordListUpdated other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToGCDirtySDOCache : pb::IMessage<CMsgGCToGCDirtySDOCache>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToGCDirtySDOCache> _parser = new pb::MessageParser<CMsgGCToGCDirtySDOCache>(() => new CMsgGCToGCDirtySDOCache());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToGCDirtySDOCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCDirtySDOCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCDirtySDOCache(CMsgGCToGCDirtySDOCache other) : this() {
      _hasBits0 = other._hasBits0;
      sdoType_ = other.sdoType_;
      keyUint64_ = other.keyUint64_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCDirtySDOCache Clone() {
      return new CMsgGCToGCDirtySDOCache(this);
    }

    /// <summary>Field number for the "sdo_type" field.</summary>
    public const int SdoTypeFieldNumber = 1;
    private readonly static uint SdoTypeDefaultValue = 0;

    private uint sdoType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SdoType {
      get { if ((_hasBits0 & 1) != 0) { return sdoType_; } else { return SdoTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sdoType_ = value;
      }
    }
    /// <summary>Gets whether the "sdo_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSdoType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sdo_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSdoType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "key_uint64" field.</summary>
    public const int KeyUint64FieldNumber = 2;
    private readonly static ulong KeyUint64DefaultValue = 0UL;

    private ulong keyUint64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KeyUint64 {
      get { if ((_hasBits0 & 2) != 0) { return keyUint64_; } else { return KeyUint64DefaultValue; } }
      set {
        _hasBits0 |= 2;
        keyUint64_ = value;
      }
    }
    /// <summary>Gets whether the "key_uint64" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKeyUint64 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "key_uint64" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeyUint64() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToGCDirtySDOCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToGCDirtySDOCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SdoType != other.SdoType) return false;
      if (KeyUint64 != other.KeyUint64) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSdoType) hash ^= SdoType.GetHashCode();
      if (HasKeyUint64) hash ^= KeyUint64.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSdoType) {
        output.WriteRawTag(8);
        output.WriteUInt32(SdoType);
      }
      if (HasKeyUint64) {
        output.WriteRawTag(16);
        output.WriteUInt64(KeyUint64);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSdoType) {
        output.WriteRawTag(8);
        output.WriteUInt32(SdoType);
      }
      if (HasKeyUint64) {
        output.WriteRawTag(16);
        output.WriteUInt64(KeyUint64);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSdoType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SdoType);
      }
      if (HasKeyUint64) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KeyUint64);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToGCDirtySDOCache other) {
      if (other == null) {
        return;
      }
      if (other.HasSdoType) {
        SdoType = other.SdoType;
      }
      if (other.HasKeyUint64) {
        KeyUint64 = other.KeyUint64;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SdoType = input.ReadUInt32();
            break;
          }
          case 16: {
            KeyUint64 = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SdoType = input.ReadUInt32();
            break;
          }
          case 16: {
            KeyUint64 = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgSDONoMemcached : pb::IMessage<CMsgSDONoMemcached>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSDONoMemcached> _parser = new pb::MessageParser<CMsgSDONoMemcached>(() => new CMsgSDONoMemcached());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSDONoMemcached> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSDONoMemcached() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSDONoMemcached(CMsgSDONoMemcached other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSDONoMemcached Clone() {
      return new CMsgSDONoMemcached(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSDONoMemcached);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSDONoMemcached other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSDONoMemcached other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToGCUpdateSQLKeyValue : pb::IMessage<CMsgGCToGCUpdateSQLKeyValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToGCUpdateSQLKeyValue> _parser = new pb::MessageParser<CMsgGCToGCUpdateSQLKeyValue>(() => new CMsgGCToGCUpdateSQLKeyValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToGCUpdateSQLKeyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCUpdateSQLKeyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCUpdateSQLKeyValue(CMsgGCToGCUpdateSQLKeyValue other) : this() {
      keyName_ = other.keyName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCUpdateSQLKeyValue Clone() {
      return new CMsgGCToGCUpdateSQLKeyValue(this);
    }

    /// <summary>Field number for the "key_name" field.</summary>
    public const int KeyNameFieldNumber = 1;
    private readonly static string KeyNameDefaultValue = "";

    private string keyName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyName {
      get { return keyName_ ?? KeyNameDefaultValue; }
      set {
        keyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKeyName {
      get { return keyName_ != null; }
    }
    /// <summary>Clears the value of the "key_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeyName() {
      keyName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToGCUpdateSQLKeyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToGCUpdateSQLKeyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyName != other.KeyName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKeyName) hash ^= KeyName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKeyName) {
        output.WriteRawTag(10);
        output.WriteString(KeyName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKeyName) {
        output.WriteRawTag(10);
        output.WriteString(KeyName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKeyName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToGCUpdateSQLKeyValue other) {
      if (other == null) {
        return;
      }
      if (other.HasKeyName) {
        KeyName = other.KeyName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            KeyName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCServerVersionUpdated : pb::IMessage<CMsgGCServerVersionUpdated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCServerVersionUpdated> _parser = new pb::MessageParser<CMsgGCServerVersionUpdated>(() => new CMsgGCServerVersionUpdated());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCServerVersionUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCServerVersionUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCServerVersionUpdated(CMsgGCServerVersionUpdated other) : this() {
      _hasBits0 = other._hasBits0;
      serverVersion_ = other.serverVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCServerVersionUpdated Clone() {
      return new CMsgGCServerVersionUpdated(this);
    }

    /// <summary>Field number for the "server_version" field.</summary>
    public const int ServerVersionFieldNumber = 1;
    private readonly static uint ServerVersionDefaultValue = 0;

    private uint serverVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerVersion {
      get { if ((_hasBits0 & 1) != 0) { return serverVersion_; } else { return ServerVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        serverVersion_ = value;
      }
    }
    /// <summary>Gets whether the "server_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "server_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerVersion() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCServerVersionUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCServerVersionUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerVersion != other.ServerVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServerVersion) hash ^= ServerVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasServerVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasServerVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServerVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCServerVersionUpdated other) {
      if (other == null) {
        return;
      }
      if (other.HasServerVersion) {
        ServerVersion = other.ServerVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerVersion = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ServerVersion = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCClientVersionUpdated : pb::IMessage<CMsgGCClientVersionUpdated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCClientVersionUpdated> _parser = new pb::MessageParser<CMsgGCClientVersionUpdated>(() => new CMsgGCClientVersionUpdated());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCClientVersionUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCClientVersionUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCClientVersionUpdated(CMsgGCClientVersionUpdated other) : this() {
      _hasBits0 = other._hasBits0;
      clientVersion_ = other.clientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCClientVersionUpdated Clone() {
      return new CMsgGCClientVersionUpdated(this);
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private readonly static uint ClientVersionDefaultValue = 0;

    private uint clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientVersion {
      get { if ((_hasBits0 & 1) != 0) { return clientVersion_; } else { return ClientVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clientVersion_ = value;
      }
    }
    /// <summary>Gets whether the "client_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "client_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientVersion() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCClientVersionUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCClientVersionUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClientVersion) hash ^= ClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClientVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClientVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClientVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCClientVersionUpdated other) {
      if (other == null) {
        return;
      }
      if (other.HasClientVersion) {
        ClientVersion = other.ClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientVersion = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ClientVersion = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToGCWebAPIAccountChanged : pb::IMessage<CMsgGCToGCWebAPIAccountChanged>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToGCWebAPIAccountChanged> _parser = new pb::MessageParser<CMsgGCToGCWebAPIAccountChanged>(() => new CMsgGCToGCWebAPIAccountChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToGCWebAPIAccountChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCWebAPIAccountChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCWebAPIAccountChanged(CMsgGCToGCWebAPIAccountChanged other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCWebAPIAccountChanged Clone() {
      return new CMsgGCToGCWebAPIAccountChanged(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToGCWebAPIAccountChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToGCWebAPIAccountChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToGCWebAPIAccountChanged other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgExtractGems : pb::IMessage<CMsgExtractGems>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgExtractGems> _parser = new pb::MessageParser<CMsgExtractGems>(() => new CMsgExtractGems());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgExtractGems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgExtractGems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgExtractGems(CMsgExtractGems other) : this() {
      _hasBits0 = other._hasBits0;
      toolItemId_ = other.toolItemId_;
      itemItemId_ = other.itemItemId_;
      itemSocketId_ = other.itemSocketId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgExtractGems Clone() {
      return new CMsgExtractGems(this);
    }

    /// <summary>Field number for the "tool_item_id" field.</summary>
    public const int ToolItemIdFieldNumber = 1;
    private readonly static ulong ToolItemIdDefaultValue = 0UL;

    private ulong toolItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToolItemId {
      get { if ((_hasBits0 & 1) != 0) { return toolItemId_; } else { return ToolItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        toolItemId_ = value;
      }
    }
    /// <summary>Gets whether the "tool_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToolItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tool_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToolItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_item_id" field.</summary>
    public const int ItemItemIdFieldNumber = 2;
    private readonly static ulong ItemItemIdDefaultValue = 0UL;

    private ulong itemItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemItemId {
      get { if ((_hasBits0 & 2) != 0) { return itemItemId_; } else { return ItemItemIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        itemItemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemItemId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "item_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemItemId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "item_socket_id" field.</summary>
    public const int ItemSocketIdFieldNumber = 3;
    private readonly static uint ItemSocketIdDefaultValue = 65535;

    private uint itemSocketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemSocketId {
      get { if ((_hasBits0 & 4) != 0) { return itemSocketId_; } else { return ItemSocketIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        itemSocketId_ = value;
      }
    }
    /// <summary>Gets whether the "item_socket_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemSocketId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "item_socket_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemSocketId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgExtractGems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgExtractGems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ToolItemId != other.ToolItemId) return false;
      if (ItemItemId != other.ItemItemId) return false;
      if (ItemSocketId != other.ItemSocketId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasToolItemId) hash ^= ToolItemId.GetHashCode();
      if (HasItemItemId) hash ^= ItemItemId.GetHashCode();
      if (HasItemSocketId) hash ^= ItemSocketId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasToolItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ToolItemId);
      }
      if (HasItemItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemItemId);
      }
      if (HasItemSocketId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ItemSocketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasToolItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ToolItemId);
      }
      if (HasItemItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemItemId);
      }
      if (HasItemSocketId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ItemSocketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasToolItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToolItemId);
      }
      if (HasItemItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemItemId);
      }
      if (HasItemSocketId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemSocketId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgExtractGems other) {
      if (other == null) {
        return;
      }
      if (other.HasToolItemId) {
        ToolItemId = other.ToolItemId;
      }
      if (other.HasItemItemId) {
        ItemItemId = other.ItemItemId;
      }
      if (other.HasItemSocketId) {
        ItemSocketId = other.ItemSocketId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ToolItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemItemId = input.ReadUInt64();
            break;
          }
          case 24: {
            ItemSocketId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ToolItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemItemId = input.ReadUInt64();
            break;
          }
          case 24: {
            ItemSocketId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgExtractGemsResponse : pb::IMessage<CMsgExtractGemsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgExtractGemsResponse> _parser = new pb::MessageParser<CMsgExtractGemsResponse>(() => new CMsgExtractGemsResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgExtractGemsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgExtractGemsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgExtractGemsResponse(CMsgExtractGemsResponse other) : this() {
      _hasBits0 = other._hasBits0;
      itemId_ = other.itemId_;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgExtractGemsResponse Clone() {
      return new CMsgExtractGemsResponse(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private readonly static ulong ItemIdDefaultValue = 0UL;

    private ulong itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemId {
      get { if ((_hasBits0 & 1) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.CMsgExtractGemsResponse.Types.EExtractGems ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgExtractGemsResponse.Types.EExtractGems.KExtractGemsSucceeded;

    private global::Steam.Protos.Dota2.CMsgExtractGemsResponse.Types.EExtractGems response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgExtractGemsResponse.Types.EExtractGems Response {
      get { if ((_hasBits0 & 2) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 2;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgExtractGemsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgExtractGemsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemId);
      }
      if (HasResponse) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemId);
      }
      if (HasResponse) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
      }
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgExtractGemsResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            Response = (global::Steam.Protos.Dota2.CMsgExtractGemsResponse.Types.EExtractGems) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            Response = (global::Steam.Protos.Dota2.CMsgExtractGemsResponse.Types.EExtractGems) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgExtractGemsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EExtractGems {
        [pbr::OriginalName("k_ExtractGems_Succeeded")] KExtractGemsSucceeded = 0,
        [pbr::OriginalName("k_ExtractGems_Failed_ToolIsInvalid")] KExtractGemsFailedToolIsInvalid = 1,
        [pbr::OriginalName("k_ExtractGems_Failed_ItemIsInvalid")] KExtractGemsFailedItemIsInvalid = 2,
        [pbr::OriginalName("k_ExtractGems_Failed_ToolCannotRemoveGem")] KExtractGemsFailedToolCannotRemoveGem = 3,
        [pbr::OriginalName("k_ExtractGems_Failed_FailedToRemoveGem")] KExtractGemsFailedFailedToRemoveGem = 4,
      }

    }
    #endregion

  }

  public sealed partial class CMsgAddSocket : pb::IMessage<CMsgAddSocket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgAddSocket> _parser = new pb::MessageParser<CMsgAddSocket>(() => new CMsgAddSocket());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgAddSocket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddSocket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddSocket(CMsgAddSocket other) : this() {
      _hasBits0 = other._hasBits0;
      toolItemId_ = other.toolItemId_;
      itemItemId_ = other.itemItemId_;
      unusual_ = other.unusual_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddSocket Clone() {
      return new CMsgAddSocket(this);
    }

    /// <summary>Field number for the "tool_item_id" field.</summary>
    public const int ToolItemIdFieldNumber = 1;
    private readonly static ulong ToolItemIdDefaultValue = 0UL;

    private ulong toolItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToolItemId {
      get { if ((_hasBits0 & 1) != 0) { return toolItemId_; } else { return ToolItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        toolItemId_ = value;
      }
    }
    /// <summary>Gets whether the "tool_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToolItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tool_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToolItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_item_id" field.</summary>
    public const int ItemItemIdFieldNumber = 2;
    private readonly static ulong ItemItemIdDefaultValue = 0UL;

    private ulong itemItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemItemId {
      get { if ((_hasBits0 & 2) != 0) { return itemItemId_; } else { return ItemItemIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        itemItemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemItemId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "item_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemItemId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "unusual" field.</summary>
    public const int UnusualFieldNumber = 3;
    private readonly static bool UnusualDefaultValue = false;

    private bool unusual_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unusual {
      get { if ((_hasBits0 & 4) != 0) { return unusual_; } else { return UnusualDefaultValue; } }
      set {
        _hasBits0 |= 4;
        unusual_ = value;
      }
    }
    /// <summary>Gets whether the "unusual" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnusual {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "unusual" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnusual() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgAddSocket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgAddSocket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ToolItemId != other.ToolItemId) return false;
      if (ItemItemId != other.ItemItemId) return false;
      if (Unusual != other.Unusual) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasToolItemId) hash ^= ToolItemId.GetHashCode();
      if (HasItemItemId) hash ^= ItemItemId.GetHashCode();
      if (HasUnusual) hash ^= Unusual.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasToolItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ToolItemId);
      }
      if (HasItemItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemItemId);
      }
      if (HasUnusual) {
        output.WriteRawTag(24);
        output.WriteBool(Unusual);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasToolItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ToolItemId);
      }
      if (HasItemItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemItemId);
      }
      if (HasUnusual) {
        output.WriteRawTag(24);
        output.WriteBool(Unusual);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasToolItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToolItemId);
      }
      if (HasItemItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemItemId);
      }
      if (HasUnusual) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgAddSocket other) {
      if (other == null) {
        return;
      }
      if (other.HasToolItemId) {
        ToolItemId = other.ToolItemId;
      }
      if (other.HasItemItemId) {
        ItemItemId = other.ItemItemId;
      }
      if (other.HasUnusual) {
        Unusual = other.Unusual;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ToolItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemItemId = input.ReadUInt64();
            break;
          }
          case 24: {
            Unusual = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ToolItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemItemId = input.ReadUInt64();
            break;
          }
          case 24: {
            Unusual = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgAddSocketResponse : pb::IMessage<CMsgAddSocketResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgAddSocketResponse> _parser = new pb::MessageParser<CMsgAddSocketResponse>(() => new CMsgAddSocketResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgAddSocketResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddSocketResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddSocketResponse(CMsgAddSocketResponse other) : this() {
      _hasBits0 = other._hasBits0;
      itemId_ = other.itemId_;
      updatedSocketIndex_ = other.updatedSocketIndex_.Clone();
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddSocketResponse Clone() {
      return new CMsgAddSocketResponse(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private readonly static ulong ItemIdDefaultValue = 0UL;

    private ulong itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemId {
      get { if ((_hasBits0 & 1) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "updated_socket_index" field.</summary>
    public const int UpdatedSocketIndexFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_updatedSocketIndex_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> updatedSocketIndex_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UpdatedSocketIndex {
      get { return updatedSocketIndex_; }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.CMsgAddSocketResponse.Types.EAddSocket ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgAddSocketResponse.Types.EAddSocket.KAddSocketSucceeded;

    private global::Steam.Protos.Dota2.CMsgAddSocketResponse.Types.EAddSocket response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgAddSocketResponse.Types.EAddSocket Response {
      get { if ((_hasBits0 & 2) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 2;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgAddSocketResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgAddSocketResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if(!updatedSocketIndex_.Equals(other.updatedSocketIndex_)) return false;
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemId) hash ^= ItemId.GetHashCode();
      hash ^= updatedSocketIndex_.GetHashCode();
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemId);
      }
      updatedSocketIndex_.WriteTo(output, _repeated_updatedSocketIndex_codec);
      if (HasResponse) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemId);
      }
      updatedSocketIndex_.WriteTo(ref output, _repeated_updatedSocketIndex_codec);
      if (HasResponse) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
      }
      size += updatedSocketIndex_.CalculateSize(_repeated_updatedSocketIndex_codec);
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgAddSocketResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      updatedSocketIndex_.Add(other.updatedSocketIndex_);
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            updatedSocketIndex_.AddEntriesFrom(input, _repeated_updatedSocketIndex_codec);
            break;
          }
          case 24: {
            Response = (global::Steam.Protos.Dota2.CMsgAddSocketResponse.Types.EAddSocket) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            updatedSocketIndex_.AddEntriesFrom(ref input, _repeated_updatedSocketIndex_codec);
            break;
          }
          case 24: {
            Response = (global::Steam.Protos.Dota2.CMsgAddSocketResponse.Types.EAddSocket) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgAddSocketResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EAddSocket {
        [pbr::OriginalName("k_AddSocket_Succeeded")] KAddSocketSucceeded = 0,
        [pbr::OriginalName("k_AddSocket_Failed_ToolIsInvalid")] KAddSocketFailedToolIsInvalid = 1,
        [pbr::OriginalName("k_AddSocket_Failed_ItemCannotBeSocketed")] KAddSocketFailedItemCannotBeSocketed = 2,
        [pbr::OriginalName("k_AddSocket_Failed_FailedToAddSocket")] KAddSocketFailedFailedToAddSocket = 3,
      }

    }
    #endregion

  }

  public sealed partial class CMsgAddItemToSocketData : pb::IMessage<CMsgAddItemToSocketData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgAddItemToSocketData> _parser = new pb::MessageParser<CMsgAddItemToSocketData>(() => new CMsgAddItemToSocketData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgAddItemToSocketData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddItemToSocketData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddItemToSocketData(CMsgAddItemToSocketData other) : this() {
      _hasBits0 = other._hasBits0;
      gemItemId_ = other.gemItemId_;
      socketIndex_ = other.socketIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddItemToSocketData Clone() {
      return new CMsgAddItemToSocketData(this);
    }

    /// <summary>Field number for the "gem_item_id" field.</summary>
    public const int GemItemIdFieldNumber = 1;
    private readonly static ulong GemItemIdDefaultValue = 0UL;

    private ulong gemItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GemItemId {
      get { if ((_hasBits0 & 1) != 0) { return gemItemId_; } else { return GemItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gemItemId_ = value;
      }
    }
    /// <summary>Gets whether the "gem_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGemItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "gem_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGemItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "socket_index" field.</summary>
    public const int SocketIndexFieldNumber = 2;
    private readonly static uint SocketIndexDefaultValue = 65535;

    private uint socketIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SocketIndex {
      get { if ((_hasBits0 & 2) != 0) { return socketIndex_; } else { return SocketIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        socketIndex_ = value;
      }
    }
    /// <summary>Gets whether the "socket_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSocketIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "socket_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSocketIndex() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgAddItemToSocketData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgAddItemToSocketData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GemItemId != other.GemItemId) return false;
      if (SocketIndex != other.SocketIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGemItemId) hash ^= GemItemId.GetHashCode();
      if (HasSocketIndex) hash ^= SocketIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGemItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GemItemId);
      }
      if (HasSocketIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(SocketIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGemItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GemItemId);
      }
      if (HasSocketIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(SocketIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGemItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GemItemId);
      }
      if (HasSocketIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SocketIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgAddItemToSocketData other) {
      if (other == null) {
        return;
      }
      if (other.HasGemItemId) {
        GemItemId = other.GemItemId;
      }
      if (other.HasSocketIndex) {
        SocketIndex = other.SocketIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GemItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            SocketIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GemItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            SocketIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgAddItemToSocket : pb::IMessage<CMsgAddItemToSocket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgAddItemToSocket> _parser = new pb::MessageParser<CMsgAddItemToSocket>(() => new CMsgAddItemToSocket());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgAddItemToSocket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddItemToSocket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddItemToSocket(CMsgAddItemToSocket other) : this() {
      _hasBits0 = other._hasBits0;
      itemItemId_ = other.itemItemId_;
      gemsToSocket_ = other.gemsToSocket_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddItemToSocket Clone() {
      return new CMsgAddItemToSocket(this);
    }

    /// <summary>Field number for the "item_item_id" field.</summary>
    public const int ItemItemIdFieldNumber = 1;
    private readonly static ulong ItemItemIdDefaultValue = 0UL;

    private ulong itemItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemItemId {
      get { if ((_hasBits0 & 1) != 0) { return itemItemId_; } else { return ItemItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemItemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "gems_to_socket" field.</summary>
    public const int GemsToSocketFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgAddItemToSocketData> _repeated_gemsToSocket_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgAddItemToSocketData.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAddItemToSocketData> gemsToSocket_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAddItemToSocketData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAddItemToSocketData> GemsToSocket {
      get { return gemsToSocket_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgAddItemToSocket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgAddItemToSocket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemItemId != other.ItemItemId) return false;
      if(!gemsToSocket_.Equals(other.gemsToSocket_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemItemId) hash ^= ItemItemId.GetHashCode();
      hash ^= gemsToSocket_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemItemId);
      }
      gemsToSocket_.WriteTo(output, _repeated_gemsToSocket_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemItemId);
      }
      gemsToSocket_.WriteTo(ref output, _repeated_gemsToSocket_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemItemId);
      }
      size += gemsToSocket_.CalculateSize(_repeated_gemsToSocket_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgAddItemToSocket other) {
      if (other == null) {
        return;
      }
      if (other.HasItemItemId) {
        ItemItemId = other.ItemItemId;
      }
      gemsToSocket_.Add(other.gemsToSocket_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemItemId = input.ReadUInt64();
            break;
          }
          case 18: {
            gemsToSocket_.AddEntriesFrom(input, _repeated_gemsToSocket_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemItemId = input.ReadUInt64();
            break;
          }
          case 18: {
            gemsToSocket_.AddEntriesFrom(ref input, _repeated_gemsToSocket_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgAddItemToSocketResponse : pb::IMessage<CMsgAddItemToSocketResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgAddItemToSocketResponse> _parser = new pb::MessageParser<CMsgAddItemToSocketResponse>(() => new CMsgAddItemToSocketResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgAddItemToSocketResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddItemToSocketResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddItemToSocketResponse(CMsgAddItemToSocketResponse other) : this() {
      _hasBits0 = other._hasBits0;
      itemItemId_ = other.itemItemId_;
      updatedSocketIndex_ = other.updatedSocketIndex_.Clone();
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAddItemToSocketResponse Clone() {
      return new CMsgAddItemToSocketResponse(this);
    }

    /// <summary>Field number for the "item_item_id" field.</summary>
    public const int ItemItemIdFieldNumber = 1;
    private readonly static ulong ItemItemIdDefaultValue = 0UL;

    private ulong itemItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemItemId {
      get { if ((_hasBits0 & 1) != 0) { return itemItemId_; } else { return ItemItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemItemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "updated_socket_index" field.</summary>
    public const int UpdatedSocketIndexFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_updatedSocketIndex_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> updatedSocketIndex_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UpdatedSocketIndex {
      get { return updatedSocketIndex_; }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.CMsgAddItemToSocketResponse.Types.EAddGem ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgAddItemToSocketResponse.Types.EAddGem.KAddGemSucceeded;

    private global::Steam.Protos.Dota2.CMsgAddItemToSocketResponse.Types.EAddGem response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgAddItemToSocketResponse.Types.EAddGem Response {
      get { if ((_hasBits0 & 2) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 2;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgAddItemToSocketResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgAddItemToSocketResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemItemId != other.ItemItemId) return false;
      if(!updatedSocketIndex_.Equals(other.updatedSocketIndex_)) return false;
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemItemId) hash ^= ItemItemId.GetHashCode();
      hash ^= updatedSocketIndex_.GetHashCode();
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemItemId);
      }
      updatedSocketIndex_.WriteTo(output, _repeated_updatedSocketIndex_codec);
      if (HasResponse) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemItemId);
      }
      updatedSocketIndex_.WriteTo(ref output, _repeated_updatedSocketIndex_codec);
      if (HasResponse) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemItemId);
      }
      size += updatedSocketIndex_.CalculateSize(_repeated_updatedSocketIndex_codec);
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgAddItemToSocketResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasItemItemId) {
        ItemItemId = other.ItemItemId;
      }
      updatedSocketIndex_.Add(other.updatedSocketIndex_);
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemItemId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            updatedSocketIndex_.AddEntriesFrom(input, _repeated_updatedSocketIndex_codec);
            break;
          }
          case 24: {
            Response = (global::Steam.Protos.Dota2.CMsgAddItemToSocketResponse.Types.EAddGem) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemItemId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            updatedSocketIndex_.AddEntriesFrom(ref input, _repeated_updatedSocketIndex_codec);
            break;
          }
          case 24: {
            Response = (global::Steam.Protos.Dota2.CMsgAddItemToSocketResponse.Types.EAddGem) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgAddItemToSocketResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EAddGem {
        [pbr::OriginalName("k_AddGem_Succeeded")] KAddGemSucceeded = 0,
        [pbr::OriginalName("k_AddGem_Failed_GemIsInvalid")] KAddGemFailedGemIsInvalid = 1,
        [pbr::OriginalName("k_AddGem_Failed_ItemIsInvalid")] KAddGemFailedItemIsInvalid = 2,
        [pbr::OriginalName("k_AddGem_Failed_FailedToAddGem")] KAddGemFailedFailedToAddGem = 3,
        [pbr::OriginalName("k_AddGem_Failed_InvalidGemTypeForSocket")] KAddGemFailedInvalidGemTypeForSocket = 4,
        [pbr::OriginalName("k_AddGem_Failed_InvalidGemTypeForHero")] KAddGemFailedInvalidGemTypeForHero = 5,
        [pbr::OriginalName("k_AddGem_Failed_InvalidGemTypeForSlot")] KAddGemFailedInvalidGemTypeForSlot = 6,
        [pbr::OriginalName("k_AddGem_Failed_SocketContainsUnremovableGem")] KAddGemFailedSocketContainsUnremovableGem = 7,
      }

    }
    #endregion

  }

  public sealed partial class CMsgResetStrangeGemCount : pb::IMessage<CMsgResetStrangeGemCount>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgResetStrangeGemCount> _parser = new pb::MessageParser<CMsgResetStrangeGemCount>(() => new CMsgResetStrangeGemCount());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgResetStrangeGemCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgResetStrangeGemCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgResetStrangeGemCount(CMsgResetStrangeGemCount other) : this() {
      _hasBits0 = other._hasBits0;
      itemItemId_ = other.itemItemId_;
      socketIndex_ = other.socketIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgResetStrangeGemCount Clone() {
      return new CMsgResetStrangeGemCount(this);
    }

    /// <summary>Field number for the "item_item_id" field.</summary>
    public const int ItemItemIdFieldNumber = 1;
    private readonly static ulong ItemItemIdDefaultValue = 0UL;

    private ulong itemItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemItemId {
      get { if ((_hasBits0 & 1) != 0) { return itemItemId_; } else { return ItemItemIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemItemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemItemId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemItemId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "socket_index" field.</summary>
    public const int SocketIndexFieldNumber = 2;
    private readonly static uint SocketIndexDefaultValue = 65535;

    private uint socketIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SocketIndex {
      get { if ((_hasBits0 & 2) != 0) { return socketIndex_; } else { return SocketIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        socketIndex_ = value;
      }
    }
    /// <summary>Gets whether the "socket_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSocketIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "socket_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSocketIndex() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgResetStrangeGemCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgResetStrangeGemCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemItemId != other.ItemItemId) return false;
      if (SocketIndex != other.SocketIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemItemId) hash ^= ItemItemId.GetHashCode();
      if (HasSocketIndex) hash ^= SocketIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemItemId);
      }
      if (HasSocketIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(SocketIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemItemId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemItemId);
      }
      if (HasSocketIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(SocketIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemItemId);
      }
      if (HasSocketIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SocketIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgResetStrangeGemCount other) {
      if (other == null) {
        return;
      }
      if (other.HasItemItemId) {
        ItemItemId = other.ItemItemId;
      }
      if (other.HasSocketIndex) {
        SocketIndex = other.SocketIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            SocketIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            SocketIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgResetStrangeGemCountResponse : pb::IMessage<CMsgResetStrangeGemCountResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgResetStrangeGemCountResponse> _parser = new pb::MessageParser<CMsgResetStrangeGemCountResponse>(() => new CMsgResetStrangeGemCountResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgResetStrangeGemCountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgResetStrangeGemCountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgResetStrangeGemCountResponse(CMsgResetStrangeGemCountResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgResetStrangeGemCountResponse Clone() {
      return new CMsgResetStrangeGemCountResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgResetStrangeGemCountResponse.Types.EResetGem ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgResetStrangeGemCountResponse.Types.EResetGem.KResetGemSucceeded;

    private global::Steam.Protos.Dota2.CMsgResetStrangeGemCountResponse.Types.EResetGem response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgResetStrangeGemCountResponse.Types.EResetGem Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgResetStrangeGemCountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgResetStrangeGemCountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgResetStrangeGemCountResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgResetStrangeGemCountResponse.Types.EResetGem) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgResetStrangeGemCountResponse.Types.EResetGem) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgResetStrangeGemCountResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResetGem {
        [pbr::OriginalName("k_ResetGem_Succeeded")] KResetGemSucceeded = 0,
        [pbr::OriginalName("k_ResetGem_Failed_FailedToResetGem")] KResetGemFailedFailedToResetGem = 1,
        [pbr::OriginalName("k_ResetGem_Failed_ItemIsInvalid")] KResetGemFailedItemIsInvalid = 2,
        [pbr::OriginalName("k_ResetGem_Failed_InvalidSocketId")] KResetGemFailedInvalidSocketId = 3,
        [pbr::OriginalName("k_ResetGem_Failed_SocketCannotBeReset")] KResetGemFailedSocketCannotBeReset = 4,
      }

    }
    #endregion

  }

  public sealed partial class CMsgGCToClientPollFileRequest : pb::IMessage<CMsgGCToClientPollFileRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToClientPollFileRequest> _parser = new pb::MessageParser<CMsgGCToClientPollFileRequest>(() => new CMsgGCToClientPollFileRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToClientPollFileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientPollFileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientPollFileRequest(CMsgGCToClientPollFileRequest other) : this() {
      _hasBits0 = other._hasBits0;
      fileName_ = other.fileName_;
      clientVersion_ = other.clientVersion_;
      pollId_ = other.pollId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientPollFileRequest Clone() {
      return new CMsgGCToClientPollFileRequest(this);
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 1;
    private readonly static string FileNameDefaultValue = "";

    private string fileName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_ ?? FileNameDefaultValue; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "file_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFileName {
      get { return fileName_ != null; }
    }
    /// <summary>Clears the value of the "file_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFileName() {
      fileName_ = null;
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private readonly static uint ClientVersionDefaultValue = 0;

    private uint clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientVersion {
      get { if ((_hasBits0 & 1) != 0) { return clientVersion_; } else { return ClientVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clientVersion_ = value;
      }
    }
    /// <summary>Gets whether the "client_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "client_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientVersion() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "poll_id" field.</summary>
    public const int PollIdFieldNumber = 3;
    private readonly static uint PollIdDefaultValue = 0;

    private uint pollId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PollId {
      get { if ((_hasBits0 & 2) != 0) { return pollId_; } else { return PollIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        pollId_ = value;
      }
    }
    /// <summary>Gets whether the "poll_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPollId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "poll_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPollId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToClientPollFileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToClientPollFileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (PollId != other.PollId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFileName) hash ^= FileName.GetHashCode();
      if (HasClientVersion) hash ^= ClientVersion.GetHashCode();
      if (HasPollId) hash ^= PollId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFileName) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (HasClientVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClientVersion);
      }
      if (HasPollId) {
        output.WriteRawTag(24);
        output.WriteUInt32(PollId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFileName) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (HasClientVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClientVersion);
      }
      if (HasPollId) {
        output.WriteRawTag(24);
        output.WriteUInt32(PollId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFileName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (HasClientVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientVersion);
      }
      if (HasPollId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PollId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToClientPollFileRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasFileName) {
        FileName = other.FileName;
      }
      if (other.HasClientVersion) {
        ClientVersion = other.ClientVersion;
      }
      if (other.HasPollId) {
        PollId = other.PollId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 16: {
            ClientVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            PollId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 16: {
            ClientVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            PollId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToClientPollFileResponse : pb::IMessage<CMsgGCToClientPollFileResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToClientPollFileResponse> _parser = new pb::MessageParser<CMsgGCToClientPollFileResponse>(() => new CMsgGCToClientPollFileResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToClientPollFileResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientPollFileResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientPollFileResponse(CMsgGCToClientPollFileResponse other) : this() {
      _hasBits0 = other._hasBits0;
      pollId_ = other.pollId_;
      fileSize_ = other.fileSize_;
      fileCrc_ = other.fileCrc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientPollFileResponse Clone() {
      return new CMsgGCToClientPollFileResponse(this);
    }

    /// <summary>Field number for the "poll_id" field.</summary>
    public const int PollIdFieldNumber = 1;
    private readonly static uint PollIdDefaultValue = 0;

    private uint pollId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PollId {
      get { if ((_hasBits0 & 1) != 0) { return pollId_; } else { return PollIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pollId_ = value;
      }
    }
    /// <summary>Gets whether the "poll_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPollId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "poll_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPollId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "file_size" field.</summary>
    public const int FileSizeFieldNumber = 2;
    private readonly static uint FileSizeDefaultValue = 0;

    private uint fileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FileSize {
      get { if ((_hasBits0 & 2) != 0) { return fileSize_; } else { return FileSizeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        fileSize_ = value;
      }
    }
    /// <summary>Gets whether the "file_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFileSize {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "file_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFileSize() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "file_crc" field.</summary>
    public const int FileCrcFieldNumber = 3;
    private readonly static uint FileCrcDefaultValue = 0;

    private uint fileCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FileCrc {
      get { if ((_hasBits0 & 4) != 0) { return fileCrc_; } else { return FileCrcDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fileCrc_ = value;
      }
    }
    /// <summary>Gets whether the "file_crc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFileCrc {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "file_crc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFileCrc() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToClientPollFileResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToClientPollFileResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PollId != other.PollId) return false;
      if (FileSize != other.FileSize) return false;
      if (FileCrc != other.FileCrc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPollId) hash ^= PollId.GetHashCode();
      if (HasFileSize) hash ^= FileSize.GetHashCode();
      if (HasFileCrc) hash ^= FileCrc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPollId) {
        output.WriteRawTag(8);
        output.WriteUInt32(PollId);
      }
      if (HasFileSize) {
        output.WriteRawTag(16);
        output.WriteUInt32(FileSize);
      }
      if (HasFileCrc) {
        output.WriteRawTag(24);
        output.WriteUInt32(FileCrc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPollId) {
        output.WriteRawTag(8);
        output.WriteUInt32(PollId);
      }
      if (HasFileSize) {
        output.WriteRawTag(16);
        output.WriteUInt32(FileSize);
      }
      if (HasFileCrc) {
        output.WriteRawTag(24);
        output.WriteUInt32(FileCrc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPollId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PollId);
      }
      if (HasFileSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FileSize);
      }
      if (HasFileCrc) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FileCrc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToClientPollFileResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasPollId) {
        PollId = other.PollId;
      }
      if (other.HasFileSize) {
        FileSize = other.FileSize;
      }
      if (other.HasFileCrc) {
        FileCrc = other.FileCrc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PollId = input.ReadUInt32();
            break;
          }
          case 16: {
            FileSize = input.ReadUInt32();
            break;
          }
          case 24: {
            FileCrc = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PollId = input.ReadUInt32();
            break;
          }
          case 16: {
            FileSize = input.ReadUInt32();
            break;
          }
          case 24: {
            FileCrc = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToGCPerformManualOp : pb::IMessage<CMsgGCToGCPerformManualOp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToGCPerformManualOp> _parser = new pb::MessageParser<CMsgGCToGCPerformManualOp>(() => new CMsgGCToGCPerformManualOp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToGCPerformManualOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCPerformManualOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCPerformManualOp(CMsgGCToGCPerformManualOp other) : this() {
      _hasBits0 = other._hasBits0;
      opId_ = other.opId_;
      groupCode_ = other.groupCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCPerformManualOp Clone() {
      return new CMsgGCToGCPerformManualOp(this);
    }

    /// <summary>Field number for the "op_id" field.</summary>
    public const int OpIdFieldNumber = 1;
    private readonly static ulong OpIdDefaultValue = 0UL;

    private ulong opId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OpId {
      get { if ((_hasBits0 & 1) != 0) { return opId_; } else { return OpIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        opId_ = value;
      }
    }
    /// <summary>Gets whether the "op_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOpId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "op_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOpId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "group_code" field.</summary>
    public const int GroupCodeFieldNumber = 2;
    private readonly static uint GroupCodeDefaultValue = 0;

    private uint groupCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupCode {
      get { if ((_hasBits0 & 2) != 0) { return groupCode_; } else { return GroupCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupCode_ = value;
      }
    }
    /// <summary>Gets whether the "group_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "group_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupCode() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToGCPerformManualOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToGCPerformManualOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpId != other.OpId) return false;
      if (GroupCode != other.GroupCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOpId) hash ^= OpId.GetHashCode();
      if (HasGroupCode) hash ^= GroupCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOpId) {
        output.WriteRawTag(8);
        output.WriteUInt64(OpId);
      }
      if (HasGroupCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOpId) {
        output.WriteRawTag(8);
        output.WriteUInt64(OpId);
      }
      if (HasGroupCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOpId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OpId);
      }
      if (HasGroupCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToGCPerformManualOp other) {
      if (other == null) {
        return;
      }
      if (other.HasOpId) {
        OpId = other.OpId;
      }
      if (other.HasGroupCode) {
        GroupCode = other.GroupCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpId = input.ReadUInt64();
            break;
          }
          case 16: {
            GroupCode = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OpId = input.ReadUInt64();
            break;
          }
          case 16: {
            GroupCode = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToGCPerformManualOpCompleted : pb::IMessage<CMsgGCToGCPerformManualOpCompleted>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToGCPerformManualOpCompleted> _parser = new pb::MessageParser<CMsgGCToGCPerformManualOpCompleted>(() => new CMsgGCToGCPerformManualOpCompleted());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToGCPerformManualOpCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCPerformManualOpCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCPerformManualOpCompleted(CMsgGCToGCPerformManualOpCompleted other) : this() {
      _hasBits0 = other._hasBits0;
      success_ = other.success_;
      sourceGc_ = other.sourceGc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCPerformManualOpCompleted Clone() {
      return new CMsgGCToGCPerformManualOpCompleted(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private readonly static bool SuccessDefaultValue = false;

    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { if ((_hasBits0 & 1) != 0) { return success_; } else { return SuccessDefaultValue; } }
      set {
        _hasBits0 |= 1;
        success_ = value;
      }
    }
    /// <summary>Gets whether the "success" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuccess {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "success" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuccess() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "source_gc" field.</summary>
    public const int SourceGcFieldNumber = 2;
    private readonly static int SourceGcDefaultValue = -1;

    private int sourceGc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceGc {
      get { if ((_hasBits0 & 2) != 0) { return sourceGc_; } else { return SourceGcDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sourceGc_ = value;
      }
    }
    /// <summary>Gets whether the "source_gc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceGc {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "source_gc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceGc() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToGCPerformManualOpCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToGCPerformManualOpCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (SourceGc != other.SourceGc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSuccess) hash ^= Success.GetHashCode();
      if (HasSourceGc) hash ^= SourceGc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSuccess) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (HasSourceGc) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceGc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSuccess) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (HasSourceGc) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceGc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSuccess) {
        size += 1 + 1;
      }
      if (HasSourceGc) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceGc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToGCPerformManualOpCompleted other) {
      if (other == null) {
        return;
      }
      if (other.HasSuccess) {
        Success = other.Success;
      }
      if (other.HasSourceGc) {
        SourceGc = other.SourceGc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 16: {
            SourceGc = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 16: {
            SourceGc = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToGCReloadServerRegionSettings : pb::IMessage<CMsgGCToGCReloadServerRegionSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToGCReloadServerRegionSettings> _parser = new pb::MessageParser<CMsgGCToGCReloadServerRegionSettings>(() => new CMsgGCToGCReloadServerRegionSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToGCReloadServerRegionSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCReloadServerRegionSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCReloadServerRegionSettings(CMsgGCToGCReloadServerRegionSettings other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToGCReloadServerRegionSettings Clone() {
      return new CMsgGCToGCReloadServerRegionSettings(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToGCReloadServerRegionSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToGCReloadServerRegionSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToGCReloadServerRegionSettings other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCAdditionalWelcomeMsgList : pb::IMessage<CMsgGCAdditionalWelcomeMsgList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCAdditionalWelcomeMsgList> _parser = new pb::MessageParser<CMsgGCAdditionalWelcomeMsgList>(() => new CMsgGCAdditionalWelcomeMsgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCAdditionalWelcomeMsgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCAdditionalWelcomeMsgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCAdditionalWelcomeMsgList(CMsgGCAdditionalWelcomeMsgList other) : this() {
      welcomeMessages_ = other.welcomeMessages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCAdditionalWelcomeMsgList Clone() {
      return new CMsgGCAdditionalWelcomeMsgList(this);
    }

    /// <summary>Field number for the "welcome_messages" field.</summary>
    public const int WelcomeMessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CExtraMsgBlock> _repeated_welcomeMessages_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CExtraMsgBlock.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock> welcomeMessages_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock> WelcomeMessages {
      get { return welcomeMessages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCAdditionalWelcomeMsgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCAdditionalWelcomeMsgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!welcomeMessages_.Equals(other.welcomeMessages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= welcomeMessages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      welcomeMessages_.WriteTo(output, _repeated_welcomeMessages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      welcomeMessages_.WriteTo(ref output, _repeated_welcomeMessages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += welcomeMessages_.CalculateSize(_repeated_welcomeMessages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCAdditionalWelcomeMsgList other) {
      if (other == null) {
        return;
      }
      welcomeMessages_.Add(other.welcomeMessages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            welcomeMessages_.AddEntriesFrom(input, _repeated_welcomeMessages_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            welcomeMessages_.AddEntriesFrom(ref input, _repeated_welcomeMessages_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgApplyRemoteConVars : pb::IMessage<CMsgApplyRemoteConVars>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgApplyRemoteConVars> _parser = new pb::MessageParser<CMsgApplyRemoteConVars>(() => new CMsgApplyRemoteConVars());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgApplyRemoteConVars> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyRemoteConVars() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyRemoteConVars(CMsgApplyRemoteConVars other) : this() {
      conVars_ = other.conVars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgApplyRemoteConVars Clone() {
      return new CMsgApplyRemoteConVars(this);
    }

    /// <summary>Field number for the "con_vars" field.</summary>
    public const int ConVarsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgApplyRemoteConVars.Types.ConVar> _repeated_conVars_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgApplyRemoteConVars.Types.ConVar.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgApplyRemoteConVars.Types.ConVar> conVars_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgApplyRemoteConVars.Types.ConVar>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgApplyRemoteConVars.Types.ConVar> ConVars {
      get { return conVars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgApplyRemoteConVars);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgApplyRemoteConVars other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conVars_.Equals(other.conVars_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conVars_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      conVars_.WriteTo(output, _repeated_conVars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      conVars_.WriteTo(ref output, _repeated_conVars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conVars_.CalculateSize(_repeated_conVars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgApplyRemoteConVars other) {
      if (other == null) {
        return;
      }
      conVars_.Add(other.conVars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            conVars_.AddEntriesFrom(input, _repeated_conVars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            conVars_.AddEntriesFrom(ref input, _repeated_conVars_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgApplyRemoteConVars message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ConVar : pb::IMessage<ConVar>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ConVar> _parser = new pb::MessageParser<ConVar>(() => new ConVar());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConVar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgApplyRemoteConVars.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConVar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConVar(ConVar other) : this() {
          _hasBits0 = other._hasBits0;
          name_ = other.name_;
          value_ = other.value_;
          versionMin_ = other.versionMin_;
          versionMax_ = other.versionMax_;
          platform_ = other.platform_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConVar Clone() {
          return new ConVar(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private readonly static string ValueDefaultValue = "";

        private string value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_ ?? ValueDefaultValue; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValue {
          get { return value_ != null; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          value_ = null;
        }

        /// <summary>Field number for the "version_min" field.</summary>
        public const int VersionMinFieldNumber = 3;
        private readonly static uint VersionMinDefaultValue = 0;

        private uint versionMin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint VersionMin {
          get { if ((_hasBits0 & 1) != 0) { return versionMin_; } else { return VersionMinDefaultValue; } }
          set {
            _hasBits0 |= 1;
            versionMin_ = value;
          }
        }
        /// <summary>Gets whether the "version_min" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVersionMin {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "version_min" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVersionMin() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "version_max" field.</summary>
        public const int VersionMaxFieldNumber = 4;
        private readonly static uint VersionMaxDefaultValue = 0;

        private uint versionMax_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint VersionMax {
          get { if ((_hasBits0 & 2) != 0) { return versionMax_; } else { return VersionMaxDefaultValue; } }
          set {
            _hasBits0 |= 2;
            versionMax_ = value;
          }
        }
        /// <summary>Gets whether the "version_max" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVersionMax {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "version_max" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVersionMax() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "platform" field.</summary>
        public const int PlatformFieldNumber = 5;
        private readonly static global::Steam.Protos.Dota2.EGCPlatform PlatformDefaultValue = global::Steam.Protos.Dota2.EGCPlatform.KEGcplatformNone;

        private global::Steam.Protos.Dota2.EGCPlatform platform_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.EGCPlatform Platform {
          get { if ((_hasBits0 & 4) != 0) { return platform_; } else { return PlatformDefaultValue; } }
          set {
            _hasBits0 |= 4;
            platform_ = value;
          }
        }
        /// <summary>Gets whether the "platform" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlatform {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "platform" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlatform() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConVar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConVar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Value != other.Value) return false;
          if (VersionMin != other.VersionMin) return false;
          if (VersionMax != other.VersionMax) return false;
          if (Platform != other.Platform) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasName) hash ^= Name.GetHashCode();
          if (HasValue) hash ^= Value.GetHashCode();
          if (HasVersionMin) hash ^= VersionMin.GetHashCode();
          if (HasVersionMax) hash ^= VersionMax.GetHashCode();
          if (HasPlatform) hash ^= Platform.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasValue) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
          if (HasVersionMin) {
            output.WriteRawTag(24);
            output.WriteUInt32(VersionMin);
          }
          if (HasVersionMax) {
            output.WriteRawTag(32);
            output.WriteUInt32(VersionMax);
          }
          if (HasPlatform) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Platform);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasValue) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
          if (HasVersionMin) {
            output.WriteRawTag(24);
            output.WriteUInt32(VersionMin);
          }
          if (HasVersionMax) {
            output.WriteRawTag(32);
            output.WriteUInt32(VersionMax);
          }
          if (HasPlatform) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Platform);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasValue) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (HasVersionMin) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionMin);
          }
          if (HasVersionMax) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionMax);
          }
          if (HasPlatform) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConVar other) {
          if (other == null) {
            return;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          if (other.HasVersionMin) {
            VersionMin = other.VersionMin;
          }
          if (other.HasVersionMax) {
            VersionMax = other.VersionMax;
          }
          if (other.HasPlatform) {
            Platform = other.Platform;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
              case 24: {
                VersionMin = input.ReadUInt32();
                break;
              }
              case 32: {
                VersionMax = input.ReadUInt32();
                break;
              }
              case 40: {
                Platform = (global::Steam.Protos.Dota2.EGCPlatform) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
              case 24: {
                VersionMin = input.ReadUInt32();
                break;
              }
              case 32: {
                VersionMax = input.ReadUInt32();
                break;
              }
              case 40: {
                Platform = (global::Steam.Protos.Dota2.EGCPlatform) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGCToClientApplyRemoteConVars : pb::IMessage<CMsgGCToClientApplyRemoteConVars>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToClientApplyRemoteConVars> _parser = new pb::MessageParser<CMsgGCToClientApplyRemoteConVars>(() => new CMsgGCToClientApplyRemoteConVars());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToClientApplyRemoteConVars> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientApplyRemoteConVars() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientApplyRemoteConVars(CMsgGCToClientApplyRemoteConVars other) : this() {
      msg_ = other.msg_ != null ? other.msg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientApplyRemoteConVars Clone() {
      return new CMsgGCToClientApplyRemoteConVars(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgApplyRemoteConVars msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgApplyRemoteConVars Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToClientApplyRemoteConVars);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToClientApplyRemoteConVars other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg, other.Msg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msg_ != null) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (msg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (msg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToClientApplyRemoteConVars other) {
      if (other == null) {
        return;
      }
      if (other.msg_ != null) {
        if (msg_ == null) {
          Msg = new global::Steam.Protos.Dota2.CMsgApplyRemoteConVars();
        }
        Msg.MergeFrom(other.Msg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (msg_ == null) {
              Msg = new global::Steam.Protos.Dota2.CMsgApplyRemoteConVars();
            }
            input.ReadMessage(Msg);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (msg_ == null) {
              Msg = new global::Steam.Protos.Dota2.CMsgApplyRemoteConVars();
            }
            input.ReadMessage(Msg);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToServerApplyRemoteConVars : pb::IMessage<CMsgGCToServerApplyRemoteConVars>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerApplyRemoteConVars> _parser = new pb::MessageParser<CMsgGCToServerApplyRemoteConVars>(() => new CMsgGCToServerApplyRemoteConVars());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerApplyRemoteConVars> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerApplyRemoteConVars() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerApplyRemoteConVars(CMsgGCToServerApplyRemoteConVars other) : this() {
      msg_ = other.msg_ != null ? other.msg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerApplyRemoteConVars Clone() {
      return new CMsgGCToServerApplyRemoteConVars(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgApplyRemoteConVars msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgApplyRemoteConVars Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerApplyRemoteConVars);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerApplyRemoteConVars other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg, other.Msg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msg_ != null) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (msg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (msg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerApplyRemoteConVars other) {
      if (other == null) {
        return;
      }
      if (other.msg_ != null) {
        if (msg_ == null) {
          Msg = new global::Steam.Protos.Dota2.CMsgApplyRemoteConVars();
        }
        Msg.MergeFrom(other.Msg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (msg_ == null) {
              Msg = new global::Steam.Protos.Dota2.CMsgApplyRemoteConVars();
            }
            input.ReadMessage(Msg);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (msg_ == null) {
              Msg = new global::Steam.Protos.Dota2.CMsgApplyRemoteConVars();
            }
            input.ReadMessage(Msg);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCIntegrityStatus : pb::IMessage<CMsgClientToGCIntegrityStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCIntegrityStatus> _parser = new pb::MessageParser<CMsgClientToGCIntegrityStatus>(() => new CMsgClientToGCIntegrityStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCIntegrityStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCIntegrityStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCIntegrityStatus(CMsgClientToGCIntegrityStatus other) : this() {
      _hasBits0 = other._hasBits0;
      report_ = other.report_;
      secureAllowed_ = other.secureAllowed_;
      diagnostics_ = other.diagnostics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCIntegrityStatus Clone() {
      return new CMsgClientToGCIntegrityStatus(this);
    }

    /// <summary>Field number for the "report" field.</summary>
    public const int ReportFieldNumber = 1;
    private readonly static string ReportDefaultValue = "";

    private string report_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Report {
      get { return report_ ?? ReportDefaultValue; }
      set {
        report_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReport {
      get { return report_ != null; }
    }
    /// <summary>Clears the value of the "report" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReport() {
      report_ = null;
    }

    /// <summary>Field number for the "secure_allowed" field.</summary>
    public const int SecureAllowedFieldNumber = 2;
    private readonly static bool SecureAllowedDefaultValue = false;

    private bool secureAllowed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SecureAllowed {
      get { if ((_hasBits0 & 1) != 0) { return secureAllowed_; } else { return SecureAllowedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        secureAllowed_ = value;
      }
    }
    /// <summary>Gets whether the "secure_allowed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecureAllowed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "secure_allowed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecureAllowed() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "diagnostics" field.</summary>
    public const int DiagnosticsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgClientToGCIntegrityStatus.Types.keyvalue> _repeated_diagnostics_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgClientToGCIntegrityStatus.Types.keyvalue.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCIntegrityStatus.Types.keyvalue> diagnostics_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCIntegrityStatus.Types.keyvalue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCIntegrityStatus.Types.keyvalue> Diagnostics {
      get { return diagnostics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCIntegrityStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCIntegrityStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Report != other.Report) return false;
      if (SecureAllowed != other.SecureAllowed) return false;
      if(!diagnostics_.Equals(other.diagnostics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReport) hash ^= Report.GetHashCode();
      if (HasSecureAllowed) hash ^= SecureAllowed.GetHashCode();
      hash ^= diagnostics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReport) {
        output.WriteRawTag(10);
        output.WriteString(Report);
      }
      if (HasSecureAllowed) {
        output.WriteRawTag(16);
        output.WriteBool(SecureAllowed);
      }
      diagnostics_.WriteTo(output, _repeated_diagnostics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReport) {
        output.WriteRawTag(10);
        output.WriteString(Report);
      }
      if (HasSecureAllowed) {
        output.WriteRawTag(16);
        output.WriteBool(SecureAllowed);
      }
      diagnostics_.WriteTo(ref output, _repeated_diagnostics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasReport) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Report);
      }
      if (HasSecureAllowed) {
        size += 1 + 1;
      }
      size += diagnostics_.CalculateSize(_repeated_diagnostics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCIntegrityStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasReport) {
        Report = other.Report;
      }
      if (other.HasSecureAllowed) {
        SecureAllowed = other.SecureAllowed;
      }
      diagnostics_.Add(other.diagnostics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Report = input.ReadString();
            break;
          }
          case 16: {
            SecureAllowed = input.ReadBool();
            break;
          }
          case 26: {
            diagnostics_.AddEntriesFrom(input, _repeated_diagnostics_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Report = input.ReadString();
            break;
          }
          case 16: {
            SecureAllowed = input.ReadBool();
            break;
          }
          case 26: {
            diagnostics_.AddEntriesFrom(ref input, _repeated_diagnostics_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCIntegrityStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class keyvalue : pb::IMessage<keyvalue>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<keyvalue> _parser = new pb::MessageParser<keyvalue>(() => new keyvalue());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<keyvalue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgClientToGCIntegrityStatus.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public keyvalue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public keyvalue(keyvalue other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          extended_ = other.extended_;
          value_ = other.value_;
          stringValue_ = other.stringValue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public keyvalue Clone() {
          return new keyvalue(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static uint IdDefaultValue = 0;

        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "extended" field.</summary>
        public const int ExtendedFieldNumber = 2;
        private readonly static uint ExtendedDefaultValue = 0;

        private uint extended_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Extended {
          get { if ((_hasBits0 & 2) != 0) { return extended_; } else { return ExtendedDefaultValue; } }
          set {
            _hasBits0 |= 2;
            extended_ = value;
          }
        }
        /// <summary>Gets whether the "extended" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExtended {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "extended" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExtended() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private readonly static ulong ValueDefaultValue = 0UL;

        private ulong value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Value {
          get { if ((_hasBits0 & 4) != 0) { return value_; } else { return ValueDefaultValue; } }
          set {
            _hasBits0 |= 4;
            value_ = value;
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValue {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "string_value" field.</summary>
        public const int StringValueFieldNumber = 4;
        private readonly static string StringValueDefaultValue = "";

        private string stringValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringValue {
          get { return stringValue_ ?? StringValueDefaultValue; }
          set {
            stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "string_value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStringValue {
          get { return stringValue_ != null; }
        }
        /// <summary>Clears the value of the "string_value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStringValue() {
          stringValue_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as keyvalue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(keyvalue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Extended != other.Extended) return false;
          if (Value != other.Value) return false;
          if (StringValue != other.StringValue) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasExtended) hash ^= Extended.GetHashCode();
          if (HasValue) hash ^= Value.GetHashCode();
          if (HasStringValue) hash ^= StringValue.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (HasExtended) {
            output.WriteRawTag(16);
            output.WriteUInt32(Extended);
          }
          if (HasValue) {
            output.WriteRawTag(24);
            output.WriteUInt64(Value);
          }
          if (HasStringValue) {
            output.WriteRawTag(34);
            output.WriteString(StringValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (HasExtended) {
            output.WriteRawTag(16);
            output.WriteUInt32(Extended);
          }
          if (HasValue) {
            output.WriteRawTag(24);
            output.WriteUInt64(Value);
          }
          if (HasStringValue) {
            output.WriteRawTag(34);
            output.WriteString(StringValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (HasExtended) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Extended);
          }
          if (HasValue) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Value);
          }
          if (HasStringValue) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(keyvalue other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasExtended) {
            Extended = other.Extended;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          if (other.HasStringValue) {
            StringValue = other.StringValue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Extended = input.ReadUInt32();
                break;
              }
              case 24: {
                Value = input.ReadUInt64();
                break;
              }
              case 34: {
                StringValue = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Extended = input.ReadUInt32();
                break;
              }
              case 24: {
                Value = input.ReadUInt64();
                break;
              }
              case 34: {
                StringValue = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCAggregateMetrics : pb::IMessage<CMsgClientToGCAggregateMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCAggregateMetrics> _parser = new pb::MessageParser<CMsgClientToGCAggregateMetrics>(() => new CMsgClientToGCAggregateMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCAggregateMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCAggregateMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCAggregateMetrics(CMsgClientToGCAggregateMetrics other) : this() {
      metrics_ = other.metrics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCAggregateMetrics Clone() {
      return new CMsgClientToGCAggregateMetrics(this);
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgClientToGCAggregateMetrics.Types.SingleMetric> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgClientToGCAggregateMetrics.Types.SingleMetric.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCAggregateMetrics.Types.SingleMetric> metrics_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCAggregateMetrics.Types.SingleMetric>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCAggregateMetrics.Types.SingleMetric> Metrics {
      get { return metrics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCAggregateMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCAggregateMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!metrics_.Equals(other.metrics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= metrics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      metrics_.WriteTo(output, _repeated_metrics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      metrics_.WriteTo(ref output, _repeated_metrics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCAggregateMetrics other) {
      if (other == null) {
        return;
      }
      metrics_.Add(other.metrics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            metrics_.AddEntriesFrom(ref input, _repeated_metrics_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCAggregateMetrics message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SingleMetric : pb::IMessage<SingleMetric>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SingleMetric> _parser = new pb::MessageParser<SingleMetric>(() => new SingleMetric());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SingleMetric> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgClientToGCAggregateMetrics.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingleMetric() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingleMetric(SingleMetric other) : this() {
          _hasBits0 = other._hasBits0;
          metricName_ = other.metricName_;
          metricCount_ = other.metricCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingleMetric Clone() {
          return new SingleMetric(this);
        }

        /// <summary>Field number for the "metric_name" field.</summary>
        public const int MetricNameFieldNumber = 1;
        private readonly static string MetricNameDefaultValue = "";

        private string metricName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MetricName {
          get { return metricName_ ?? MetricNameDefaultValue; }
          set {
            metricName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "metric_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMetricName {
          get { return metricName_ != null; }
        }
        /// <summary>Clears the value of the "metric_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMetricName() {
          metricName_ = null;
        }

        /// <summary>Field number for the "metric_count" field.</summary>
        public const int MetricCountFieldNumber = 2;
        private readonly static uint MetricCountDefaultValue = 0;

        private uint metricCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MetricCount {
          get { if ((_hasBits0 & 1) != 0) { return metricCount_; } else { return MetricCountDefaultValue; } }
          set {
            _hasBits0 |= 1;
            metricCount_ = value;
          }
        }
        /// <summary>Gets whether the "metric_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMetricCount {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "metric_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMetricCount() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SingleMetric);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SingleMetric other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MetricName != other.MetricName) return false;
          if (MetricCount != other.MetricCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMetricName) hash ^= MetricName.GetHashCode();
          if (HasMetricCount) hash ^= MetricCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMetricName) {
            output.WriteRawTag(10);
            output.WriteString(MetricName);
          }
          if (HasMetricCount) {
            output.WriteRawTag(16);
            output.WriteUInt32(MetricCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMetricName) {
            output.WriteRawTag(10);
            output.WriteString(MetricName);
          }
          if (HasMetricCount) {
            output.WriteRawTag(16);
            output.WriteUInt32(MetricCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasMetricName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MetricName);
          }
          if (HasMetricCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MetricCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SingleMetric other) {
          if (other == null) {
            return;
          }
          if (other.HasMetricName) {
            MetricName = other.MetricName;
          }
          if (other.HasMetricCount) {
            MetricCount = other.MetricCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                MetricName = input.ReadString();
                break;
              }
              case 16: {
                MetricCount = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                MetricName = input.ReadString();
                break;
              }
              case 16: {
                MetricCount = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGCToClientAggregateMetricsBackoff : pb::IMessage<CMsgGCToClientAggregateMetricsBackoff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToClientAggregateMetricsBackoff> _parser = new pb::MessageParser<CMsgGCToClientAggregateMetricsBackoff>(() => new CMsgGCToClientAggregateMetricsBackoff());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToClientAggregateMetricsBackoff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientAggregateMetricsBackoff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientAggregateMetricsBackoff(CMsgGCToClientAggregateMetricsBackoff other) : this() {
      _hasBits0 = other._hasBits0;
      uploadRateModifier_ = other.uploadRateModifier_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientAggregateMetricsBackoff Clone() {
      return new CMsgGCToClientAggregateMetricsBackoff(this);
    }

    /// <summary>Field number for the "upload_rate_modifier" field.</summary>
    public const int UploadRateModifierFieldNumber = 1;
    private readonly static float UploadRateModifierDefaultValue = 0F;

    private float uploadRateModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UploadRateModifier {
      get { if ((_hasBits0 & 1) != 0) { return uploadRateModifier_; } else { return UploadRateModifierDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uploadRateModifier_ = value;
      }
    }
    /// <summary>Gets whether the "upload_rate_modifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUploadRateModifier {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "upload_rate_modifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUploadRateModifier() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToClientAggregateMetricsBackoff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToClientAggregateMetricsBackoff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UploadRateModifier, other.UploadRateModifier)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUploadRateModifier) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UploadRateModifier);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUploadRateModifier) {
        output.WriteRawTag(13);
        output.WriteFloat(UploadRateModifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUploadRateModifier) {
        output.WriteRawTag(13);
        output.WriteFloat(UploadRateModifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUploadRateModifier) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToClientAggregateMetricsBackoff other) {
      if (other == null) {
        return;
      }
      if (other.HasUploadRateModifier) {
        UploadRateModifier = other.UploadRateModifier;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            UploadRateModifier = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            UploadRateModifier = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToServerSteamLearnAccessTokensChanged : pb::IMessage<CMsgGCToServerSteamLearnAccessTokensChanged>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerSteamLearnAccessTokensChanged> _parser = new pb::MessageParser<CMsgGCToServerSteamLearnAccessTokensChanged>(() => new CMsgGCToServerSteamLearnAccessTokensChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerSteamLearnAccessTokensChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerSteamLearnAccessTokensChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerSteamLearnAccessTokensChanged(CMsgGCToServerSteamLearnAccessTokensChanged other) : this() {
      accessTokens_ = other.accessTokens_ != null ? other.accessTokens_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerSteamLearnAccessTokensChanged Clone() {
      return new CMsgGCToServerSteamLearnAccessTokensChanged(this);
    }

    /// <summary>Field number for the "access_tokens" field.</summary>
    public const int AccessTokensFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgSteamLearnAccessTokens accessTokens_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgSteamLearnAccessTokens AccessTokens {
      get { return accessTokens_; }
      set {
        accessTokens_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerSteamLearnAccessTokensChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerSteamLearnAccessTokensChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccessTokens, other.AccessTokens)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accessTokens_ != null) hash ^= AccessTokens.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (accessTokens_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccessTokens);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (accessTokens_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccessTokens);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accessTokens_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessTokens);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerSteamLearnAccessTokensChanged other) {
      if (other == null) {
        return;
      }
      if (other.accessTokens_ != null) {
        if (accessTokens_ == null) {
          AccessTokens = new global::Steam.Protos.Dota2.CMsgSteamLearnAccessTokens();
        }
        AccessTokens.MergeFrom(other.AccessTokens);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (accessTokens_ == null) {
              AccessTokens = new global::Steam.Protos.Dota2.CMsgSteamLearnAccessTokens();
            }
            input.ReadMessage(AccessTokens);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (accessTokens_ == null) {
              AccessTokens = new global::Steam.Protos.Dota2.CMsgSteamLearnAccessTokens();
            }
            input.ReadMessage(AccessTokens);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToServerSteamLearnUseHTTP : pb::IMessage<CMsgGCToServerSteamLearnUseHTTP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToServerSteamLearnUseHTTP> _parser = new pb::MessageParser<CMsgGCToServerSteamLearnUseHTTP>(() => new CMsgGCToServerSteamLearnUseHTTP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToServerSteamLearnUseHTTP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.BaseGcmessagesReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerSteamLearnUseHTTP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerSteamLearnUseHTTP(CMsgGCToServerSteamLearnUseHTTP other) : this() {
      _hasBits0 = other._hasBits0;
      useHttp_ = other.useHttp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToServerSteamLearnUseHTTP Clone() {
      return new CMsgGCToServerSteamLearnUseHTTP(this);
    }

    /// <summary>Field number for the "use_http" field.</summary>
    public const int UseHttpFieldNumber = 1;
    private readonly static bool UseHttpDefaultValue = false;

    private bool useHttp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseHttp {
      get { if ((_hasBits0 & 1) != 0) { return useHttp_; } else { return UseHttpDefaultValue; } }
      set {
        _hasBits0 |= 1;
        useHttp_ = value;
      }
    }
    /// <summary>Gets whether the "use_http" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseHttp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "use_http" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseHttp() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToServerSteamLearnUseHTTP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToServerSteamLearnUseHTTP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseHttp != other.UseHttp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUseHttp) hash ^= UseHttp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUseHttp) {
        output.WriteRawTag(8);
        output.WriteBool(UseHttp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUseHttp) {
        output.WriteRawTag(8);
        output.WriteBool(UseHttp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUseHttp) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToServerSteamLearnUseHTTP other) {
      if (other == null) {
        return;
      }
      if (other.HasUseHttp) {
        UseHttp = other.UseHttp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UseHttp = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UseHttp = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
