// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_gcmessages_common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Steam.Protos.Dota2 {

  /// <summary>Holder for reflection information generated from dota_gcmessages_common.proto</summary>
  public static partial class DotaGcmessagesCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_gcmessages_common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaGcmessagesCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chxkb3RhX2djbWVzc2FnZXNfY29tbW9uLnByb3RvGhNzdGVhbW1lc3NhZ2Vz",
            "LnByb3RvGhZnY3Nka19nY21lc3NhZ2VzLnByb3RvGhdkb3RhX3NoYXJlZF9l",
            "bnVtcy5wcm90byK7DgoYQ1NPRE9UQUdhbWVBY2NvdW50Q2xpZW50EhgKCmFj",
            "Y291bnRfaWQYASABKA1CBICmHQESDAoEd2lucxgDIAEoDRIOCgZsb3NzZXMY",
            "BCABKA0SCgoCeHAYDCABKA0SDQoFbGV2ZWwYDSABKA0SFQoNaW5pdGlhbF9z",
            "a2lsbBgOIAEoDRIUCgxsZWF2ZXJfY291bnQYDyABKA0SHgoWc2Vjb25kYXJ5",
            "X2xlYXZlcl9jb3VudBg6IAEoDRIfChdsb3dfcHJpb3JpdHlfdW50aWxfZGF0",
            "ZRgSIAEoDRIkChxwcmV2ZW50X3RleHRfY2hhdF91bnRpbF9kYXRlGBQgASgN",
            "EiAKGHByZXZlbnRfdm9pY2VfdW50aWxfZGF0ZRgVIAEoDRIrCiNwcmV2ZW50",
            "X3B1YmxpY190ZXh0X2NoYXRfdW50aWxfZGF0ZRhWIAEoDRIqCiJwcmV2ZW50",
            "X25ld19wbGF5ZXJfY2hhdF91bnRpbF9kYXRlGHogASgNEiAKGGxhc3RfYWJh",
            "bmRvbmVkX2dhbWVfZGF0ZRgWIAEoDRIqCiJsYXN0X3NlY29uZGFyeV9hYmFu",
            "ZG9uZWRfZ2FtZV9kYXRlGDsgASgNEhwKFGxlYXZlcl9wZW5hbHR5X2NvdW50",
            "GBcgASgNEh0KFWNvbXBsZXRlZF9nYW1lX3N0cmVhaxgYIAEoDRIjChthY2Nv",
            "dW50X2Rpc2FibGVkX3VudGlsX2RhdGUYJiABKA0SHgoWYWNjb3VudF9kaXNh",
            "YmxlZF9jb3VudBgnIAEoDRIhChltYXRjaF9kaXNhYmxlZF91bnRpbF9kYXRl",
            "GCkgASgNEhwKFG1hdGNoX2Rpc2FibGVkX2NvdW50GCogASgNEiUKHXNodXRk",
            "b3dubGF3dGVybWluYXRldGltZXN0YW1wGC8gASgNEiQKHGxvd19wcmlvcml0",
            "eV9nYW1lc19yZW1haW5pbmcYMCABKA0SGQoRcmVjcnVpdG1lbnRfbGV2ZWwY",
            "NyABKA0SHQoVaGFzX25ld19ub3RpZmljYXRpb25zGDggASgIEhcKD2lzX2xl",
            "YWd1ZV9hZG1pbhg5IAEoCBIbChNjYXN1YWxfZ2FtZXNfcGxheWVkGDwgASgN",
            "EiUKHXNvbG9fY29tcGV0aXRpdmVfZ2FtZXNfcGxheWVkGD0gASgNEiYKHnBh",
            "cnR5X2NvbXBldGl0aXZlX2dhbWVzX3BsYXllZBg+IAEoDRIfChdjYXN1YWxf",
            "MXYxX2dhbWVzX3BsYXllZBhBIAEoDRIiChpjdXJyX2FsbF9oZXJvX2NoYWxs",
            "ZW5nZV9pZBhDIAEoBRIYChBwbGF5X3RpbWVfcG9pbnRzGEQgASgNEhUKDWFj",
            "Y291bnRfZmxhZ3MYRSABKA0SFwoPcGxheV90aW1lX2xldmVsGEYgASgNEisK",
            "I3BsYXllcl9iZWhhdmlvcl9zZXFfbnVtX2xhc3RfcmVwb3J0GEcgASgNEikK",
            "IXBsYXllcl9iZWhhdmlvcl9zY29yZV9sYXN0X3JlcG9ydBhIIAEoDRInCh9w",
            "bGF5ZXJfYmVoYXZpb3JfcmVwb3J0X29sZF9kYXRhGEkgASgIEhsKE3RvdXJu",
            "ZXlfc2tpbGxfbGV2ZWwYSiABKA0SKQohdG91cm5leV9yZWNlbnRfcGFydGlj",
            "aXBhdGlvbl9kYXRlGFUgASgNEiAKGGFuY2hvcmVkX3Bob25lX251bWJlcl9p",
            "ZBhYIAEoBBIpCiFyYW5rZWRfbWF0Y2htYWtpbmdfYmFuX3VudGlsX2RhdGUY",
            "WSABKA0SGgoScmVjZW50X2dhbWVfdGltZV8xGFogASgNEhoKEnJlY2VudF9n",
            "YW1lX3RpbWVfMhhbIAEoDRIaChJyZWNlbnRfZ2FtZV90aW1lXzMYXCABKA0S",
            "HAoUZmF2b3JpdGVfdGVhbV9wYWNrZWQYZyABKAQSGgoScmVjZW50X3JlcG9y",
            "dF90aW1lGGggASgNEicKH2N1c3RvbV9nYW1lX2Rpc2FibGVkX3VudGlsX2Rh",
            "dGUYaSABKA0SGQoRcmVjZW50X3dpbl90aW1lXzEYaiABKA0SGQoRcmVjZW50",
            "X3dpbl90aW1lXzIYayABKA0SGQoRcmVjZW50X3dpbl90aW1lXzMYbCABKA0S",
            "FAoMY29hY2hfcmF0aW5nGG0gASgNEhQKDHF1ZXVlX3BvaW50cxhyIAEoDRI+",
            "Cg5yb2xlX2hhbmRpY2FwcxhzIAMoCzImLkNTT0RPVEFHYW1lQWNjb3VudENs",
            "aWVudC5Sb2xlSGFuZGljYXASHgoWZXZlbnRfbW9kZV9yZWNlbnRfdGltZRh4",
            "IAEoDRIeChZtbXJfcmVjYWxpYnJhdGlvbl90aW1lGHkgASgNEhcKD2Jhbm5l",
            "ZF9oZXJvX2lkcxh7IAMoBRouCgxSb2xlSGFuZGljYXASDAoEcm9sZRgBIAEo",
            "DRIQCghoYW5kaWNhcBgCIAEoAiLpAQoWQ1NPRE9UQUdhbWVBY2NvdW50UGx1",
            "cxIYCgphY2NvdW50X2lkGAEgASgNQgSAph0BEhsKE29yaWdpbmFsX3N0YXJ0",
            "X2RhdGUYAiABKA0SEgoKcGx1c19mbGFncxgDIAEoDRITCgtwbHVzX3N0YXR1",
            "cxgEIAEoDRIaChJwcmVwYWlkX3RpbWVfc3RhcnQYBSABKA0SHAoUcHJlcGFp",
            "ZF90aW1lX2JhbGFuY2UYBiABKA0SGQoRbmV4dF9wYXltZW50X2RhdGUYByAB",
            "KAcSGgoSc3RlYW1fYWdyZWVtZW50X2lkGAggASgGIjgKEENTT0RPVEFDaGF0",
            "V2hlZWwSJAoKbWVzc2FnZV9pZBgBIAEoDToKNDI5NDk2NzI5NUIEgKYdASK6",
            "AQohQ01zZ0xvYmJ5RmVhdHVyZWRHYW1lbW9kZVByb2dyZXNzEkQKCGFjY291",
            "bnRzGAEgAygLMjIuQ01zZ0xvYmJ5RmVhdHVyZWRHYW1lbW9kZVByb2dyZXNz",
            "LkFjY291bnRQcm9ncmVzcxpPCg9BY2NvdW50UHJvZ3Jlc3MSEgoKYWNjb3Vu",
            "dF9pZBgBIAEoDRIVCg1jdXJyZW50X3ZhbHVlGAIgASgNEhEKCW1heF92YWx1",
            "ZRgDIAEoDSLGAQoUQ01zZ0JhdHRsZUN1cFZpY3RvcnkSEgoKYWNjb3VudF9p",
            "ZBgBIAEoDRIQCgh3aW5fZGF0ZRgCIAEoDRITCgt2YWxpZF91bnRpbBgDIAEo",
            "DRITCgtza2lsbF9sZXZlbBgEIAEoDRIVCg10b3VybmFtZW50X2lkGAUgASgN",
            "EhMKC2RpdmlzaW9uX2lkGAYgASgNEg8KB3RlYW1faWQYByABKA0SDgoGc3Ry",
            "ZWFrGAggASgNEhEKCXRyb3BoeV9pZBgJIAEoDSJHCh1DTXNnTG9iYnlCYXR0",
            "bGVDdXBWaWN0b3J5TGlzdBImCgd3aW5uZXJzGAEgAygLMhUuQ01zZ0JhdHRs",
            "ZUN1cFZpY3RvcnkiMAodQ01zZ0RPVEFCcm9hZGNhc3ROb3RpZmljYXRpb24S",
            "DwoHbWVzc2FnZRgBIAEoCSK5AQoUQ1Byb3RvSXRlbUhlcm9TdGF0dWUSDwoH",
            "aGVyb19pZBgBIAEoBRIbChNzdGF0dXNfZWZmZWN0X2luZGV4GAIgASgNEhUK",
            "DXNlcXVlbmNlX25hbWUYAyABKAkSDQoFY3ljbGUYBCABKAISEAoId2VhcmFi",
            "bGUYBSADKA0SEwoLaW5zY3JpcHRpb24YBiABKAkSDQoFc3R5bGUYByADKA0S",
            "FwoPdG91cm5hbWVudF9kcm9wGAggASgIIj8KGkNNYXRjaFBsYXllckFiaWxp",
            "dHlVcGdyYWRlEhMKB2FiaWxpdHkYASABKAU6Ai0xEgwKBHRpbWUYAiABKA0i",
            "kwEKG0NNYXRjaFBsYXllclRpbWVkQ3VzdG9tU3RhdBJlCgRzdGF0GAIgASgO",
            "Mh8uRURPVEFNYXRjaFBsYXllclRpbWVDdXN0b21TdGF0OjZrX0VET1RBX01h",
            "dGNoUGxheWVyVGltZUN1c3RvbVN0YXRfSFBSZWdlblVuZGVyVDFUb3dlcnMS",
            "DQoFdmFsdWUYAyABKAIiogcKFkNNYXRjaFBsYXllclRpbWVkU3RhdHMSDAoE",
            "dGltZRgBIAEoDRINCgVraWxscxgCIAEoDRIOCgZkZWF0aHMYAyABKA0SDwoH",
            "YXNzaXN0cxgEIAEoDRIRCgluZXRfd29ydGgYBSABKA0SCgoCeHAYBiABKA0S",
            "EQoJbGFzdF9oaXRzGAcgASgNEg4KBmRlbmllcxgIIAEoDRIYChBib3VudHlf",
            "cnVuZV9nb2xkGAkgASgNEiAKGHJhbmdlX2NyZWVwX3VwZ3JhZGVfZ29sZBgK",
            "IAEoDRIfChdvYnNlcnZlcl93YXJkc19kZXdhcmRlZBgLIAEoDRIcChRyZWxp",
            "YWJsZV9nb2xkX2Vhcm5lZBgMIAEoDRIbChNnb2xkX2xvc3NfcHJldmVudGVk",
            "GA0gASgNEhYKDmhlcm9fa2lsbF9nb2xkGA4gASgNEhcKD2NyZWVwX2tpbGxf",
            "Z29sZBgPIAEoDRIVCg1idWlsZGluZ19nb2xkGBAgASgNEhIKCm90aGVyX2dv",
            "bGQYESABKA0SFQoNY29tZWJhY2tfZ29sZBgSIAEoDRIZChFleHBlcmltZW50",
            "YWxfZ29sZBgTIAEoDRIaChJleHBlcmltZW50YWwyX2dvbGQYFCABKA0SFwoP",
            "Y3JlZXBfZGVueV9nb2xkGBUgASgNEh4KFnRwX3Njcm9sbHNfcHVyY2hhc2Vk",
            "XzEYFiABKA0SHgoWdHBfc2Nyb2xsc19wdXJjaGFzZWRfMhgXIAEoDRIeChZ0",
            "cF9zY3JvbGxzX3B1cmNoYXNlZF8zGBggASgNEh4KFnRwX3Njcm9sbHNfcHVy",
            "Y2hhc2VkXzQYGSABKA0SHgoWdHBfc2Nyb2xsc19wdXJjaGFzZWRfNRgaIAEo",
            "DRIUCgxuZXV0cmFsX2dvbGQYGyABKA0SFAoMY291cmllcl9nb2xkGBwgASgN",
            "EhMKC3Jvc2hhbl9nb2xkGB0gASgNEhMKC2luY29tZV9nb2xkGB4gASgNEhIK",
            "Cml0ZW1fdmFsdWUYJCABKA0SGgoSc3VwcG9ydF9nb2xkX3NwZW50GCUgASgN",
            "EhUKDWNhbXBzX3N0YWNrZWQYJiABKA0SFAoMd2FyZHNfcGxhY2VkGCcgASgN",
            "EhQKDHRyaXBsZV9raWxscxgoIAEoDRIQCghyYW1wYWdlcxgpIAEoDRIyCgxj",
            "dXN0b21fc3RhdHMYKiADKAsyHC5DTWF0Y2hQbGF5ZXJUaW1lZEN1c3RvbVN0",
            "YXQinAEKFENNYXRjaFRlYW1UaW1lZFN0YXRzEgwKBHRpbWUYASABKA0SGwoT",
            "ZW5lbXlfdG93ZXJzX2tpbGxlZBgCIAEoDRIdChVlbmVteV9iYXJyYWNrc19r",
            "aWxsZWQYAyABKA0SGwoTZW5lbXlfdG93ZXJzX3N0YXR1cxgEIAEoDRIdChVl",
            "bmVteV9iYXJyYWNrc19zdGF0dXMYBSABKA0iQQodQ01hdGNoQWRkaXRpb25h",
            "bFVuaXRJbnZlbnRvcnkSEQoJdW5pdF9uYW1lGAEgASgJEg0KBWl0ZW1zGAIg",
            "AygFIlwKGUNNYXRjaFBsYXllclBlcm1hbmVudEJ1ZmYSFgoOcGVybWFuZW50",
            "X2J1ZmYYASABKA0SEwoLc3RhY2tfY291bnQYAiABKA0SEgoKZ3JhbnRfdGlt",
            "ZRgDIAEoDSJHChVDTWF0Y2hIZXJvU2VsZWN0RXZlbnQSDwoHaXNfcGljaxgB",
            "IAEoCBIMCgR0ZWFtGAIgASgNEg8KB2hlcm9faWQYAyABKAUi0AEKCkNNYXRj",
            "aENsaXASEAoIbWF0Y2hfaWQYASABKAQSGQoRcGxheWVyX2FjY291bnRfaWQY",
            "AiABKA0SGQoRZ2FtZV90aW1lX3NlY29uZHMYAyABKA0SGAoQZHVyYXRpb25f",
            "c2Vjb25kcxgEIAEoDRIRCglwbGF5ZXJfaWQYBSABKA0SDwoHaGVyb19pZBgG",
            "IAEoBRIWCgphYmlsaXR5X2lkGAcgASgFOgItMRITCgtjYW1lcmFfbW9kZRgI",
            "IAEoDRIPCgdjb21tZW50GAkgASgJIlcKF0NQYXJ0eVNlYXJjaENsaWVudFBh",
            "cnR5EhAKCHBhcnR5X2lkGAEgASgGEhMKC2JlYWNvbl90eXBlGAIgASgFEhUK",
            "DXBhcnR5X21lbWJlcnMYAyADKAciOwoUQ01zZ0RPVEFIYXNJdGVtUXVlcnkS",
            "EgoKYWNjb3VudF9pZBgBIAEoDRIPCgdpdGVtX2lkGAIgASgEIisKF0NNc2dE",
            "T1RBSGFzSXRlbVJlc3BvbnNlEhAKCGhhc19pdGVtGAEgASgIImYKG0NNc2dH",
            "Q0dldFBsYXllckNhcmRJdGVtSW5mbxISCgphY2NvdW50X2lkGAEgASgNEhwK",
            "FHBsYXllcl9jYXJkX2l0ZW1faWRzGAIgAygEEhUKDWFsbF9mb3JfZXZlbnQY",
            "AyABKA0i0AEKI0NNc2dHQ0dldFBsYXllckNhcmRJdGVtSW5mb1Jlc3BvbnNl",
            "Ek4KEXBsYXllcl9jYXJkX2luZm9zGAEgAygLMjMuQ01zZ0dDR2V0UGxheWVy",
            "Q2FyZEl0ZW1JbmZvUmVzcG9uc2UuUGxheWVyQ2FyZEluZm8aWQoOUGxheWVy",
            "Q2FyZEluZm8SGwoTcGxheWVyX2NhcmRfaXRlbV9pZBgBIAEoBBISCgphY2Nv",
            "dW50X2lkGAIgASgNEhYKDnBhY2tlZF9ib251c2VzGAMgASgEImEKF0NTT0RP",
            "VEFNYXBMb2NhdGlvblN0YXRlEhgKCmFjY291bnRfaWQYASABKA1CBICmHQES",
            "GQoLbG9jYXRpb25faWQYAiABKAVCBICmHQESEQoJY29tcGxldGVkGAMgASgI",
            "IioKE0NNc2dMZWFndWVBZG1pbkxpc3QSEwoLYWNjb3VudF9pZHMYASADKA0i",
            "xAkKE0NNc2dET1RBUHJvZmlsZUNhcmQSEgoKYWNjb3VudF9pZBgBIAEoDRIo",
            "CgVzbG90cxgDIAMoCzIZLkNNc2dET1RBUHJvZmlsZUNhcmQuU2xvdBIUCgxi",
            "YWRnZV9wb2ludHMYBCABKA0SEAoIZXZlbnRfaWQYBiABKA0SOAoZcmVjZW50",
            "X2JhdHRsZV9jdXBfdmljdG9yeRgHIAEoCzIVLkNNc2dCYXR0bGVDdXBWaWN0",
            "b3J5EhEKCXJhbmtfdGllchgIIAEoDRIYChBsZWFkZXJib2FyZF9yYW5rGAkg",
            "ASgNEhoKEmlzX3BsdXNfc3Vic2NyaWJlchgKIAEoCBIgChhwbHVzX29yaWdp",
            "bmFsX3N0YXJ0X2RhdGUYCyABKA0SFwoPcmFua190aWVyX3Njb3JlGAwgASgN",
            "Eh0KFWxlYWRlcmJvYXJkX3JhbmtfY29yZRgRIAEoDRINCgV0aXRsZRgXIAEo",
            "DRIcChRmYXZvcml0ZV90ZWFtX3BhY2tlZBgYIAEoBBIWCg5saWZldGltZV9n",
            "YW1lcxgZIAEoDRITCgtldmVudF9sZXZlbBgaIAEoDRrwBAoEU2xvdBIPCgdz",
            "bG90X2lkGAEgASgNEjAKBnRyb3BoeRgCIAEoCzIgLkNNc2dET1RBUHJvZmls",
            "ZUNhcmQuU2xvdC5Ucm9waHkSLAoEc3RhdBgDIAEoCzIeLkNNc2dET1RBUHJv",
            "ZmlsZUNhcmQuU2xvdC5TdGF0EiwKBGl0ZW0YBCABKAsyHi5DTXNnRE9UQVBy",
            "b2ZpbGVDYXJkLlNsb3QuSXRlbRIsCgRoZXJvGAUgASgLMh4uQ01zZ0RPVEFQ",
            "cm9maWxlQ2FyZC5TbG90Lkhlcm8SNAoIZW1vdGljb24YBiABKAsyIi5DTXNn",
            "RE9UQVByb2ZpbGVDYXJkLlNsb3QuRW1vdGljb24SLAoEdGVhbRgHIAEoCzIe",
            "LkNNc2dET1RBUHJvZmlsZUNhcmQuU2xvdC5UZWFtGjEKBlRyb3BoeRIRCgl0",
            "cm9waHlfaWQYASABKA0SFAoMdHJvcGh5X3Njb3JlGAIgASgNGlcKBFN0YXQS",
            "OwoHc3RhdF9pZBgBIAEoDjIcLkNNc2dET1RBUHJvZmlsZUNhcmQuRVN0YXRJ",
            "RDoMa19lU3RhdF9XaW5zEhIKCnN0YXRfc2NvcmUYAiABKA0aMAoESXRlbRIX",
            "Cg9zZXJpYWxpemVkX2l0ZW0YASABKAwSDwoHaXRlbV9pZBgCIAEoBBo/CgRI",
            "ZXJvEg8KB2hlcm9faWQYASABKAUSEQoJaGVyb193aW5zGAIgASgNEhMKC2hl",
            "cm9fbG9zc2VzGAMgASgNGh8KCEVtb3RpY29uEhMKC2Vtb3RpY29uX2lkGAEg",
            "ASgNGhcKBFRlYW0SDwoHdGVhbV9pZBgBIAEoDSKcAQoHRVN0YXRJRBIQCgxr",
            "X2VTdGF0X1dpbnMQAxIUChBrX2VTdGF0X0NvbW1lbmRzEAQSFwoTa19lU3Rh",
            "dF9HYW1lc1BsYXllZBAFEhoKFmtfZVN0YXRfRmlyc3RNYXRjaERhdGUQBhIe",
            "ChprX2VTdGF0X1ByZXZpb3VzU2Vhc29uUmFuaxAHEhQKEGtfZVN0YXRfR2Ft",
            "ZXNNVlAQCCKBAwoWQ1NPRE9UQVBsYXllckNoYWxsZW5nZRIYCgphY2NvdW50",
            "X2lkGAEgASgNQgSAph0BEhYKCGV2ZW50X2lkGAIgASgNQgSAph0BEhUKB3Ns",
            "b3RfaWQYAyABKA1CBICmHQESEwoLaW50X3BhcmFtXzAYBSABKA0SEwoLaW50",
            "X3BhcmFtXzEYBiABKA0SFAoMY3JlYXRlZF90aW1lGAcgASgNEhEKCWNvbXBs",
            "ZXRlZBgIIAEoDRITCgtzZXF1ZW5jZV9pZBgJIAEoDRIWCg5jaGFsbGVuZ2Vf",
            "dGllchgKIAEoDRINCgVmbGFncxgLIAEoDRIQCghhdHRlbXB0cxgMIAEoDRIW",
            "Cg5jb21wbGV0ZV9saW1pdBgNIAEoDRISCgpxdWVzdF9yYW5rGA4gASgNEhYK",
            "Dm1heF9xdWVzdF9yYW5rGA8gASgNEhMKC2luc3RhbmNlX2lkGBAgASgNEg8K",
            "B2hlcm9faWQYESABKAUSEwoLdGVtcGxhdGVfaWQYEiABKA0idQojQ01zZ0Ns",
            "aWVudFRvR0NSZXJvbGxQbGF5ZXJDaGFsbGVuZ2USKAoIZXZlbnRfaWQYASAB",
            "KA4yBy5FRXZlbnQ6DUVWRU5UX0lEX05PTkUSEwoLc2VxdWVuY2VfaWQYAyAB",
            "KA0SDwoHaGVyb19pZBgEIAEoBSLwAQojQ01zZ0dDUmVyb2xsUGxheWVyQ2hh",
            "bGxlbmdlUmVzcG9uc2USTQoGcmVzdWx0GAEgASgOMiwuQ01zZ0dDUmVyb2xs",
            "UGxheWVyQ2hhbGxlbmdlUmVzcG9uc2UuRVJlc3VsdDoPZVJlc3VsdF9TdWNj",
            "ZXNzInoKB0VSZXN1bHQSEwoPZVJlc3VsdF9TdWNjZXNzEAASEwoPZVJlc3Vs",
            "dF9Ecm9wcGVkEAESFAoQZVJlc3VsdF9Ob3RGb3VuZBACEhYKEmVSZXN1bHRf",
            "Q2FudFJlcm9sbBADEhcKE2VSZXN1bHRfU2VydmVyRXJyb3IQBCJNChhDTXNn",
            "R0NUb3BDdXN0b21HYW1lc0xpc3QSGAoQdG9wX2N1c3RvbV9nYW1lcxgBIAMo",
            "BBIXCg9nYW1lX29mX3RoZV9kYXkYAiABKAQi8BsKGUNNc2dET1RBUmVhbHRp",
            "bWVHYW1lU3RhdHMSNgoFbWF0Y2gYASABKAsyJy5DTXNnRE9UQVJlYWx0aW1l",
            "R2FtZVN0YXRzLk1hdGNoRGV0YWlscxI1CgV0ZWFtcxgCIAMoCzImLkNNc2dE",
            "T1RBUmVhbHRpbWVHYW1lU3RhdHMuVGVhbURldGFpbHMSPQoJYnVpbGRpbmdz",
            "GAMgAygLMiouQ01zZ0RPVEFSZWFsdGltZUdhbWVTdGF0cy5CdWlsZGluZ0Rl",
            "dGFpbHMSOAoKZ3JhcGhfZGF0YRgEIAEoCzIkLkNNc2dET1RBUmVhbHRpbWVH",
            "YW1lU3RhdHMuR3JhcGhEYXRhEhMKC2RlbHRhX2ZyYW1lGAUgASgIGoICCgtU",
            "ZWFtRGV0YWlscxITCgt0ZWFtX251bWJlchgBIAEoDRIPCgd0ZWFtX2lkGAIg",
            "ASgNEhEKCXRlYW1fbmFtZRgDIAEoCRIRCgl0ZWFtX2xvZ28YBCABKAYSEAoI",
            "dGVhbV90YWcYCiABKAkSDQoFc2NvcmUYBSABKA0SEQoJbmV0X3dvcnRoGAkg",
            "ASgNEjkKB3BsYXllcnMYBiADKAsyKC5DTXNnRE9UQVJlYWx0aW1lR2FtZVN0",
            "YXRzLlBsYXllckRldGFpbHMSEQoJb25seV90ZWFtGAcgASgIEg4KBmNoZWVy",
            "cxgIIAEoDRIVCg10ZWFtX2xvZ29fdXJsGAsgASgJGmgKC0l0ZW1EZXRhaWxz",
            "EhsKD2l0ZW1fYWJpbGl0eV9pZBgBIAEoBToCLTESDAoEbmFtZRgCIAEoCRIM",
            "CgR0aW1lGAMgASgFEgwKBHNvbGQYBCABKAgSEgoKc3RhY2tjb3VudBgFIAEo",
            "DRplCg5BYmlsaXR5RGV0YWlscxIOCgJpZBgBIAEoBToCLTESDAoEbmFtZRgC",
            "IAEoCRINCgVsZXZlbBgDIAEoDRIQCghjb29sZG93bhgEIAEoAhIUCgxjb29s",
            "ZG93bl9tYXgYBSABKAIaRwoPSGVyb1RvSGVyb1N0YXRzEhQKCHZpY3RpbWlk",
            "GAEgASgFOgItMRINCgVraWxscxgCIAEoDRIPCgdhc3Npc3RzGAMgASgNGhkK",
            "C0FiaWxpdHlMaXN0EgoKAmlkGAEgAygFGvwJCg1QbGF5ZXJEZXRhaWxzEhEK",
            "CWFjY291bnRpZBgBIAEoDRIUCghwbGF5ZXJpZBgCIAEoBToCLTESDAoEbmFt",
            "ZRgDIAEoCRIMCgR0ZWFtGAQgASgNEg4KBmhlcm9pZBgFIAEoBRIUCgxoZWFs",
            "dGhwb2ludHMYBiABKA0SFwoPbWF4aGVhbHRocG9pbnRzGAcgASgNEhcKD2hl",
            "YWx0aHJlZ2VucmF0ZRgIIAEoAhISCgptYW5hcG9pbnRzGAkgASgNEhUKDW1h",
            "eG1hbmFwb2ludHMYCiABKA0SFQoNbWFuYXJlZ2VucmF0ZRgLIAEoAhIVCg1i",
            "YXNlX3N0cmVuZ3RoGAwgASgNEhQKDGJhc2VfYWdpbGl0eRgNIAEoDRIZChFi",
            "YXNlX2ludGVsbGlnZW5jZRgOIAEoDRISCgpiYXNlX2FybW9yGA8gASgFEhYK",
            "DmJhc2VfbW92ZXNwZWVkGBAgASgNEhMKC2Jhc2VfZGFtYWdlGBEgASgNEhAK",
            "CHN0cmVuZ3RoGBIgASgNEg8KB2FnaWxpdHkYEyABKA0SFAoMaW50ZWxsaWdl",
            "bmNlGBQgASgNEg0KBWFybW9yGBUgASgFEhEKCW1vdmVzcGVlZBgWIAEoDRIO",
            "CgZkYW1hZ2UYFyABKA0SEwoLaGVyb19kYW1hZ2UYGCABKA0SFAoMdG93ZXJf",
            "ZGFtYWdlGBkgASgNEjwKCWFiaWxpdGllcxgaIAMoCzIpLkNNc2dET1RBUmVh",
            "bHRpbWVHYW1lU3RhdHMuQWJpbGl0eURldGFpbHMSDQoFbGV2ZWwYGyABKA0S",
            "EgoKa2lsbF9jb3VudBgcIAEoDRITCgtkZWF0aF9jb3VudBgdIAEoDRIVCg1h",
            "c3Npc3RzX2NvdW50GB4gASgNEhQKDGRlbmllc19jb3VudBgfIAEoDRIQCghs",
            "aF9jb3VudBggIAEoDRIUCgxoZXJvX2hlYWxpbmcYISABKA0SFAoMZ29sZF9w",
            "ZXJfbWluGCIgASgNEhIKCnhwX3Blcl9taW4YIyABKA0SEAoIbmV0X2dvbGQY",
            "JCABKA0SDAoEZ29sZBglIAEoDRIJCgF4GCYgASgCEgkKAXkYJyABKAISFAoM",
            "cmVzcGF3bl90aW1lGCggASgFEhkKEXVsdGltYXRlX2Nvb2xkb3duGCkgASgN",
            "EhMKC2hhc19idXliYWNrGCogASgIEjUKBWl0ZW1zGCsgAygLMiYuQ01zZ0RP",
            "VEFSZWFsdGltZUdhbWVTdGF0cy5JdGVtRGV0YWlscxI6CgpzdGFzaGl0ZW1z",
            "GCwgAygLMiYuQ01zZ0RPVEFSZWFsdGltZUdhbWVTdGF0cy5JdGVtRGV0YWls",
            "cxJAChBpdGVtc2hvcHBpbmdsaXN0GC0gAygLMiYuQ01zZ0RPVEFSZWFsdGlt",
            "ZUdhbWVTdGF0cy5JdGVtRGV0YWlscxI7CgtsZXZlbHBvaW50cxguIAMoCzIm",
            "LkNNc2dET1RBUmVhbHRpbWVHYW1lU3RhdHMuQWJpbGl0eUxpc3QSRgoSaGVy",
            "b190b19oZXJvX3N0YXRzGC8gAygLMiouQ01zZ0RPVEFSZWFsdGltZUdhbWVT",
            "dGF0cy5IZXJvVG9IZXJvU3RhdHMSFAoMaGFzX3VsdGltYXRlGDAgASgIEhkK",
            "EWhhc191bHRpbWF0ZV9tYW5hGDEgASgIEhEKCXRlYW1fc2xvdBgyIAEoDRqD",
            "AQoPQnVpbGRpbmdEZXRhaWxzEgwKBHRlYW0YAiABKA0SDwoHaGVhZGluZxgD",
            "IAEoAhIMCgRsYW5lGAQgASgNEgwKBHRpZXIYBSABKA0SDAoEdHlwZRgGIAEo",
            "DRIJCgF4GAcgASgCEgkKAXkYCCABKAISEQoJZGVzdHJveWVkGAkgASgIGlYK",
            "C0tpbGxEZXRhaWxzEhUKCXBsYXllcl9pZBgBIAEoBToCLTESEgoKZGVhdGhf",
            "dGltZRgCIAEoBRIcChBraWxsZXJfcGxheWVyX2lkGAMgASgFOgItMRorChJC",
            "cm9hZGNhc3RlckRldGFpbHMSFQoJcGxheWVyX2lkGAEgASgFOgItMRosCg5Q",
            "aWNrQmFuRGV0YWlscxIMCgRoZXJvGAEgASgFEgwKBHRlYW0YAiABKA0a8QQK",
            "DE1hdGNoRGV0YWlscxIXCg9zZXJ2ZXJfc3RlYW1faWQYASABKAYSEAoIbWF0",
            "Y2hfaWQYAiABKAQSEQoJdGltZXN0YW1wGAMgASgNEhMKC3RpbWVfb2ZfZGF5",
            "GAQgASgCEh0KFWlzX25pZ2h0c3RhbGtlcl9uaWdodBgFIAEoCBIRCglnYW1l",
            "X3RpbWUYBiABKAUSEgoKZ2FtZV9zdGF0ZRgTIAEoDRIWCg50ZWFtaWRfcmFk",
            "aWFudBgIIAEoDRITCgt0ZWFtaWRfZGlyZRgJIAEoDRI4CgVwaWNrcxgKIAMo",
            "CzIpLkNNc2dET1RBUmVhbHRpbWVHYW1lU3RhdHMuUGlja0JhbkRldGFpbHMS",
            "NwoEYmFucxgLIAMoCzIpLkNNc2dET1RBUmVhbHRpbWVHYW1lU3RhdHMuUGlj",
            "a0JhbkRldGFpbHMSNQoFa2lsbHMYDCADKAsyJi5DTXNnRE9UQVJlYWx0aW1l",
            "R2FtZVN0YXRzLktpbGxEZXRhaWxzEkMKDGJyb2FkY2FzdGVycxgNIAMoCzIt",
            "LkNNc2dET1RBUmVhbHRpbWVHYW1lU3RhdHMuQnJvYWRjYXN0ZXJEZXRhaWxz",
            "EhEKCWdhbWVfbW9kZRgOIAEoDRIRCglsZWFndWVfaWQYDyABKA0SFgoObGVh",
            "Z3VlX25vZGVfaWQYEiABKA0SEwoLc2luZ2xlX3RlYW0YECABKAgSEwoLY2hl",
            "ZXJzX3BlYWsYESABKA0SEgoKbG9iYnlfdHlwZRgUIAEoDRIXCg9zdGFydF90",
            "aW1lc3RhbXAYFSABKA0SFwoPaXNfcGxheWVyX2RyYWZ0GBYgASgIGu8DCglH",
            "cmFwaERhdGESEgoKZ3JhcGhfZ29sZBgBIAMoBRIQCghncmFwaF94cBgCIAMo",
            "BRISCgpncmFwaF9raWxsGAMgAygFEhMKC2dyYXBoX3Rvd2VyGAQgAygFEhEK",
            "CWdyYXBoX3JheBgFIAMoBRJOCg50ZWFtX2xvY19zdGF0cxgGIAMoCzI2LkNN",
            "c2dET1RBUmVhbHRpbWVHYW1lU3RhdHMuR3JhcGhEYXRhLlRlYW1Mb2NhdGlv",
            "blN0YXRzGh4KDUxvY2F0aW9uU3RhdHMSDQoFc3RhdHMYASADKAUaWgoRVGVh",
            "bUxvY2F0aW9uU3RhdHMSRQoJbG9jX3N0YXRzGAEgAygLMjIuQ01zZ0RPVEFS",
            "ZWFsdGltZUdhbWVTdGF0cy5HcmFwaERhdGEuTG9jYXRpb25TdGF0cyJbCgVl",
            "U3RhdBITCg9DcmVlcEdvbGRFYXJuZWQQABISCg5LaWxsR29sZEVhcm5lZBAB",
            "EhsKF0RlYXRoQW5kQnV5YmFja0dvbGRMb3N0EAISDAoIWFBFYXJuZWQQAyJX",
            "CgllTG9jYXRpb24SCwoHQm90TGFuZRAAEgsKB01pZExhbmUQARILCgdUb3BM",
            "YW5lEAISCgoGSnVuZ2xlEAMSDAoIQW5jaWVudHMQBBIJCgVPdGhlchAFItUL",
            "Ch5DTXNnRE9UQVJlYWx0aW1lR2FtZVN0YXRzVGVyc2USOwoFbWF0Y2gYASAB",
            "KAsyLC5DTXNnRE9UQVJlYWx0aW1lR2FtZVN0YXRzVGVyc2UuTWF0Y2hEZXRh",
            "aWxzEjoKBXRlYW1zGAIgAygLMisuQ01zZ0RPVEFSZWFsdGltZUdhbWVTdGF0",
            "c1RlcnNlLlRlYW1EZXRhaWxzEkIKCWJ1aWxkaW5ncxgDIAMoCzIvLkNNc2dE",
            "T1RBUmVhbHRpbWVHYW1lU3RhdHNUZXJzZS5CdWlsZGluZ0RldGFpbHMSPQoK",
            "Z3JhcGhfZGF0YRgEIAEoCzIpLkNNc2dET1RBUmVhbHRpbWVHYW1lU3RhdHNU",
            "ZXJzZS5HcmFwaERhdGESEwoLZGVsdGFfZnJhbWUYBSABKAga5AEKC1RlYW1E",
            "ZXRhaWxzEhMKC3RlYW1fbnVtYmVyGAEgASgNEg8KB3RlYW1faWQYAiABKA0S",
            "EQoJdGVhbV9uYW1lGAMgASgJEhAKCHRlYW1fdGFnGAggASgJEhEKCXRlYW1f",
            "bG9nbxgEIAEoBhINCgVzY29yZRgFIAEoDRIRCgluZXRfd29ydGgYByABKA0S",
            "FQoNdGVhbV9sb2dvX3VybBgJIAEoCRI+CgdwbGF5ZXJzGAYgAygLMi0uQ01z",
            "Z0RPVEFSZWFsdGltZUdhbWVTdGF0c1RlcnNlLlBsYXllckRldGFpbHMaxwIK",
            "DVBsYXllckRldGFpbHMSEQoJYWNjb3VudGlkGAEgASgNEhQKCHBsYXllcmlk",
            "GAIgASgFOgItMRIMCgRuYW1lGAMgASgJEgwKBHRlYW0YBCABKA0SDgoGaGVy",
            "b2lkGAUgASgFEg0KBWxldmVsGAYgASgNEhIKCmtpbGxfY291bnQYByABKA0S",
            "EwoLZGVhdGhfY291bnQYCCABKA0SFQoNYXNzaXN0c19jb3VudBgJIAEoDRIU",
            "CgxkZW5pZXNfY291bnQYCiABKA0SEAoIbGhfY291bnQYCyABKA0SDAoEZ29s",
            "ZBgMIAEoDRIJCgF4GA0gASgCEgkKAXkYDiABKAISEQoJbmV0X3dvcnRoGA8g",
            "ASgNEhEKCWFiaWxpdGllcxgQIAMoBRINCgVpdGVtcxgRIAMoBRIRCgl0ZWFt",
            "X3Nsb3QYEiABKA0agwEKD0J1aWxkaW5nRGV0YWlscxIMCgR0ZWFtGAEgASgN",
            "Eg8KB2hlYWRpbmcYAiABKAISDAoEdHlwZRgDIAEoDRIMCgRsYW5lGAQgASgN",
            "EgwKBHRpZXIYBSABKA0SCQoBeBgGIAEoAhIJCgF5GAcgASgCEhEKCWRlc3Ry",
            "b3llZBgIIAEoCBosCg5QaWNrQmFuRGV0YWlscxIMCgRoZXJvGAEgASgFEgwK",
            "BHRlYW0YAiABKA0amwMKDE1hdGNoRGV0YWlscxIXCg9zZXJ2ZXJfc3RlYW1f",
            "aWQYASABKAYSEAoIbWF0Y2hfaWQYAiABKAQSEQoJdGltZXN0YW1wGAMgASgN",
            "EhEKCWdhbWVfdGltZRgEIAEoBRIlCh1zdGVhbV9icm9hZGNhc3Rlcl9hY2Nv",
            "dW50X2lkcxgGIAMoDRIRCglnYW1lX21vZGUYByABKA0SEQoJbGVhZ3VlX2lk",
            "GAggASgNEhYKDmxlYWd1ZV9ub2RlX2lkGAkgASgNEhIKCmdhbWVfc3RhdGUY",
            "CiABKA0SPQoFcGlja3MYCyADKAsyLi5DTXNnRE9UQVJlYWx0aW1lR2FtZVN0",
            "YXRzVGVyc2UuUGlja0JhbkRldGFpbHMSPAoEYmFucxgMIAMoCzIuLkNNc2dE",
            "T1RBUmVhbHRpbWVHYW1lU3RhdHNUZXJzZS5QaWNrQmFuRGV0YWlscxISCgps",
            "b2JieV90eXBlGA0gASgNEhcKD3N0YXJ0X3RpbWVzdGFtcBgOIAEoDRIXCg9p",
            "c19wbGF5ZXJfZHJhZnQYDyABKAgaHwoJR3JhcGhEYXRhEhIKCmdyYXBoX2dv",
            "bGQYASADKAUipQEKHkNNc2dET1RBQnJvYWRjYXN0VGltZWxpbmVFdmVudBJN",
            "CgVldmVudBgBIAEoDjIYLkVCcm9hZGNhc3RUaW1lbGluZUV2ZW50OiRFQnJv",
            "YWRjYXN0VGltZWxpbmVFdmVudF9NYXRjaFN0YXJ0ZWQSEQoJdGltZXN0YW1w",
            "GAIgASgHEgwKBGRhdGEYAyABKA0SEwoLc3RyaW5nX2RhdGEYBCABKAkiPwog",
            "Q01zZ0dDVG9DbGllbnRNYXRjaEdyb3Vwc1ZlcnNpb24SGwoTbWF0Y2hncm91",
            "cHNfdmVyc2lvbhgBIAEoDSLBAQobQ01zZ0RPVEFTRE9IZXJvU3RhdHNIaXN0",
            "b3J5EhAKCG1hdGNoX2lkGAEgASgEEhEKCWdhbWVfbW9kZRgCIAEoDRISCgps",
            "b2JieV90eXBlGAMgASgNEhIKCnN0YXJ0X3RpbWUYBCABKA0SCwoDd29uGAUg",
            "ASgIEgsKA2dwbRgGIAEoDRILCgN4cG0YByABKA0SDQoFa2lsbHMYCCABKA0S",
            "DgoGZGVhdGhzGAkgASgNEg8KB2Fzc2lzdHMYCiABKA0iYQoUQ01zZ1ByZWRp",
            "Y3Rpb25DaG9pY2USDQoFdmFsdWUYASABKA0SDAoEbmFtZRgCIAEoCRIVCg1t",
            "aW5fcmF3X3ZhbHVlGAMgASgNEhUKDW1heF9yYXdfdmFsdWUYBCABKA0isggK",
            "FENNc2dJbkdhbWVQcmVkaWN0aW9uEgoKAmlkGAEgASgNEgwKBG5hbWUYAiAB",
            "KAkSPAoEdHlwZRgDIAEoDjIlLkNNc2dJbkdhbWVQcmVkaWN0aW9uLkVQcmVk",
            "aWN0aW9uVHlwZToHR2VuZXJpYxJHCgVncm91cBgEIAEoDjItLkNNc2dJbkdh",
            "bWVQcmVkaWN0aW9uLkVSYW5kb21TZWxlY3Rpb25Hcm91cF90OglFYXJseUdh",
            "bWUSEAoIcXVlc3Rpb24YBSABKAkSJgoHY2hvaWNlcxgGIAMoCzIVLkNNc2dQ",
            "cmVkaWN0aW9uQ2hvaWNlEhcKD3JlcXVpcmVkX2hlcm9lcxgHIAMoCRISCgpx",
            "dWVyeV9uYW1lGAggASgJEjoKDHF1ZXJ5X3ZhbHVlcxgJIAMoCzIkLkNNc2dJ",
            "bkdhbWVQcmVkaWN0aW9uLlF1ZXJ5S2V5VmFsdWVzElUKFmFuc3dlcl9yZXNv",
            "bHV0aW9uX3R5cGUYCiABKA4yJy5DTXNnSW5HYW1lUHJlZGljdGlvbi5FUmVz",
            "b2x1dGlvblR5cGVfdDoMSW52YWxpZFF1ZXJ5EhcKD3BvaW50c190b19ncmFu",
            "dBgLIAEoDRIVCg1yZXdhcmRfYWN0aW9uGAwgASgNEh0KFWRlYnVnX2ZvcmNl",
            "X3NlbGVjdGlvbhgNIAEoDRJFCg5yYXdfdmFsdWVfdHlwZRgOIAEoDjIlLkNN",
            "c2dJbkdhbWVQcmVkaWN0aW9uLkVSYXdWYWx1ZVR5cGVfdDoGTnVtYmVyGi0K",
            "DlF1ZXJ5S2V5VmFsdWVzEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAki",
            "JwoPRVJhd1ZhbHVlVHlwZV90EgoKBk51bWJlchAAEggKBFRpbWUQASJqCg9F",
            "UHJlZGljdGlvblR5cGUSCwoHR2VuZXJpYxAAEggKBEhlcm8QARIICgRUZWFt",
            "EAISCgoGUGxheWVyEAMSCwoHU3BlY2lhbBAEEgkKBVllc05vEAUSEgoOUXVh",
            "bGlmaWVyc1RlYW0QBiLUAQoRRVJlc29sdXRpb25UeXBlX3QSEAoMSW52YWxp",
            "ZFF1ZXJ5EAASFAoQRmlyc3RUb1Bhc3NRdWVyeRABEhMKD0xhc3RUb1Bhc3NR",
            "dWVyeRACEhYKEkxhc3RSZW1haW5pbmdRdWVyeRADEhIKDk1heFRvUGFzc1F1",
            "ZXJ5EAQSEgoOTWluVG9QYXNzUXVlcnkQBRIMCghTdW1RdWVyeRAGEhkKFU1h",
            "eFRlYW1TdW1Ub1Bhc3NRdWVyeRAHEhkKFU1pblRlYW1TdW1Ub1Bhc3NRdWVy",
            "eRAIIk4KF0VSYW5kb21TZWxlY3Rpb25Hcm91cF90Eg0KCUVhcmx5R2FtZRAA",
            "EgsKB01pZEdhbWUQARIMCghMYXRlR2FtZRACEgkKBUNvdW50EAMi0QkKGUNN",
            "c2dET1RBU2Vhc29uUHJlZGljdGlvbnMSOgoLcHJlZGljdGlvbnMYASADKAsy",
            "JS5DTXNnRE9UQVNlYXNvblByZWRpY3Rpb25zLlByZWRpY3Rpb24SMgoTaW5f",
            "Z2FtZV9wcmVkaWN0aW9ucxgCIAMoCzIVLkNNc2dJbkdhbWVQcmVkaWN0aW9u",
            "EikKIWluX2dhbWVfcHJlZGljdGlvbl9jb3VudF9wZXJfZ2FtZRgDIAEoDRIw",
            "Cihpbl9nYW1lX3ByZWRpY3Rpb25fdm90aW5nX3BlcmlvZF9taW51dGVzGAQg",
            "ASgNGuYHCgpQcmVkaWN0aW9uEkwKBHR5cGUYASABKA4yNS5DTXNnRE9UQVNl",
            "YXNvblByZWRpY3Rpb25zLlByZWRpY3Rpb24uRVByZWRpY3Rpb25UeXBlOgdH",
            "ZW5lcmljEhAKCHF1ZXN0aW9uGAIgASgJEiYKB2Nob2ljZXMYAyADKAsyFS5D",
            "TXNnUHJlZGljdGlvbkNob2ljZRIUCgxzZWxlY3Rpb25faWQYBCABKA0SEgoK",
            "c3RhcnRfZGF0ZRgFIAEoDRIRCglsb2NrX2RhdGUYBiABKA0SDgoGcmV3YXJk",
            "GAcgASgNElEKC2Fuc3dlcl90eXBlGAggASgOMjEuQ01zZ0RPVEFTZWFzb25Q",
            "cmVkaWN0aW9ucy5QcmVkaWN0aW9uLkVBbnN3ZXJUeXBlOglTaW5nbGVJbnQS",
            "EQoJYW5zd2VyX2lkGAkgASgNEj4KB2Fuc3dlcnMYCiADKAsyLS5DTXNnRE9U",
            "QVNlYXNvblByZWRpY3Rpb25zLlByZWRpY3Rpb24uQW5zd2VycxISCgpxdWVy",
            "eV9uYW1lGAsgASgJEhwKFGxvY2tfb25fc2VsZWN0aW9uX2lkGA0gASgNEh8K",
            "F2xvY2tfb25fc2VsZWN0aW9uX3ZhbHVlGA4gASgNEh0KFWxvY2tfb25fc2Vs",
            "ZWN0aW9uX3NldBgPIAEoCBIfChd1c2VfYW5zd2VyX3ZhbHVlX3JhbmdlcxgQ",
            "IAEoCBIzCgZyZWdpb24YESABKA4yDi5FTGVhZ3VlUmVnaW9uOhNMRUFHVUVf",
            "UkVHSU9OX1VOU0VUEh0KBnBoYXNlcxgSIAMoDjINLkVMZWFndWVQaGFzZRIs",
            "CgxyZXdhcmRfZXZlbnQYEyABKA4yBy5FRXZlbnQ6DUVWRU5UX0lEX05PTkUS",
            "FgoObGVhZ3VlX25vZGVfaWQYFCABKA0aHAoHQW5zd2VycxIRCglhbnN3ZXJf",
            "aWQYASABKA0ifgoPRVByZWRpY3Rpb25UeXBlEgsKB0dlbmVyaWMQABIICgRI",
            "ZXJvEAESCAoEVGVhbRACEgoKBlBsYXllchADEgsKB1NwZWNpYWwQBBIJCgVZ",
            "ZXNObxAFEhIKDlF1YWxpZmllcnNUZWFtEAYSEgoOTGFzdENoYW5jZVRlYW0Q",
            "ByKRAQoLRUFuc3dlclR5cGUSDQoJU2luZ2xlSW50EAASDwoLU2luZ2xlRmxv",
            "YXQQARIPCgtNdWx0aXBsZUludBACEhEKDU11bHRpcGxlRmxvYXQQAxIOCgpB",
            "bnN3ZXJUZWFtEAQSDgoKU2luZ2xlVGltZRAFEhAKDE11bHRpcGxlVGltZRAG",
            "EgwKCE5vQW5zd2VyEAcisQEKGENNc2dBdmFpbGFibGVQcmVkaWN0aW9ucxJE",
            "ChFtYXRjaF9wcmVkaWN0aW9ucxgBIAMoCzIpLkNNc2dBdmFpbGFibGVQcmVk",
            "aWN0aW9ucy5NYXRjaFByZWRpY3Rpb24aTwoPTWF0Y2hQcmVkaWN0aW9uEhAK",
            "CG1hdGNoX2lkGAEgASgEEioKC3ByZWRpY3Rpb25zGAIgAygLMhUuQ01zZ0lu",
            "R2FtZVByZWRpY3Rpb24ivwEKFkNNc2dMZWFndWVXYXRjaGVkR2FtZXMSLwoH",
            "bGVhZ3VlcxgBIAMoCzIeLkNNc2dMZWFndWVXYXRjaGVkR2FtZXMuTGVhZ3Vl",
            "GicKBlNlcmllcxIPCgdub2RlX2lkGAEgASgNEgwKBGdhbWUYAiADKA0aSwoG",
            "TGVhZ3VlEhEKCWxlYWd1ZV9pZBgBIAEoDRIuCgZzZXJpZXMYAiADKAsyHi5D",
            "TXNnTGVhZ3VlV2F0Y2hlZEdhbWVzLlNlcmllcyLPIAoNQ01zZ0RPVEFNYXRj",
            "aBIQCghkdXJhdGlvbhgDIAEoDRIRCglzdGFydHRpbWUYBCABKAcSJgoHcGxh",
            "eWVycxgFIAMoCzIVLkNNc2dET1RBTWF0Y2guUGxheWVyEhAKCG1hdGNoX2lk",
            "GAYgASgEEhQKDHRvd2VyX3N0YXR1cxgIIAMoDRIXCg9iYXJyYWNrc19zdGF0",
            "dXMYCSADKA0SDwoHY2x1c3RlchgKIAEoDRIYChBmaXJzdF9ibG9vZF90aW1l",
            "GAwgASgNEhMKC3JlcGxheV9zYWx0GA0gASgHEhEKCXNlcnZlcl9pcBgOIAEo",
            "BxITCgtzZXJ2ZXJfcG9ydBgPIAEoDRISCgpsb2JieV90eXBlGBAgASgNEhUK",
            "DWh1bWFuX3BsYXllcnMYESABKA0SFQoNYXZlcmFnZV9za2lsbBgSIAEoDRIU",
            "CgxnYW1lX2JhbGFuY2UYEyABKAISFwoPcmFkaWFudF90ZWFtX2lkGBQgASgN",
            "EhQKDGRpcmVfdGVhbV9pZBgVIAEoDRIQCghsZWFndWVpZBgWIAEoDRIZChFy",
            "YWRpYW50X3RlYW1fbmFtZRgXIAEoCRIWCg5kaXJlX3RlYW1fbmFtZRgYIAEo",
            "CRIZChFyYWRpYW50X3RlYW1fbG9nbxgZIAEoBBIWCg5kaXJlX3RlYW1fbG9n",
            "bxgaIAEoBBIdChVyYWRpYW50X3RlYW1fbG9nb191cmwYNiABKAkSGgoSZGly",
            "ZV90ZWFtX2xvZ29fdXJsGDcgASgJEh0KFXJhZGlhbnRfdGVhbV9jb21wbGV0",
            "ZRgbIAEoDRIaChJkaXJlX3RlYW1fY29tcGxldGUYHCABKA0SNQoJZ2FtZV9t",
            "b2RlGB8gASgOMg4uRE9UQV9HYW1lTW9kZToSRE9UQV9HQU1FTU9ERV9OT05F",
            "EioKCnBpY2tzX2JhbnMYICADKAsyFi5DTWF0Y2hIZXJvU2VsZWN0RXZlbnQS",
            "FQoNbWF0Y2hfc2VxX251bRghIAEoBBJCCgxyZXBsYXlfc3RhdGUYIiABKA4y",
            "Gi5DTXNnRE9UQU1hdGNoLlJlcGxheVN0YXRlOhBSRVBMQVlfQVZBSUxBQkxF",
            "EhgKEHJhZGlhbnRfZ3VpbGRfaWQYIyABKA0SFQoNZGlyZV9ndWlsZF9pZBgk",
            "IAEoDRIYChByYWRpYW50X3RlYW1fdGFnGCUgASgJEhUKDWRpcmVfdGVhbV90",
            "YWcYJiABKAkSEQoJc2VyaWVzX2lkGCcgASgNEhMKC3Nlcmllc190eXBlGCgg",
            "ASgNEj8KFGJyb2FkY2FzdGVyX2NoYW5uZWxzGCsgAygLMiEuQ01zZ0RPVEFN",
            "YXRjaC5Ccm9hZGNhc3RlckNoYW5uZWwSDgoGZW5naW5lGCwgASgNEjcKEGN1",
            "c3RvbV9nYW1lX2RhdGEYLSABKAsyHS5DTXNnRE9UQU1hdGNoLkN1c3RvbUdh",
            "bWVEYXRhEhMKC21hdGNoX2ZsYWdzGC4gASgNEhwKFHByaXZhdGVfbWV0YWRh",
            "dGFfa2V5GC8gASgHEhoKEnJhZGlhbnRfdGVhbV9zY29yZRgwIAEoDRIXCg9k",
            "aXJlX3RlYW1fc2NvcmUYMSABKA0SPgoNbWF0Y2hfb3V0Y29tZRgyIAEoDjIO",
            "LkVNYXRjaE91dGNvbWU6F2tfRU1hdGNoT3V0Y29tZV9Vbmtub3duEhUKDXRv",
            "dXJuYW1lbnRfaWQYMyABKA0SGAoQdG91cm5hbWVudF9yb3VuZBg0IAEoDRIZ",
            "ChFwcmVfZ2FtZV9kdXJhdGlvbhg1IAEoDRIlCgdjb2FjaGVzGDkgAygLMhQu",
            "Q01zZ0RPVEFNYXRjaC5Db2FjaBqAEgoGUGxheWVyEhIKCmFjY291bnRfaWQY",
            "ASABKA0SEwoLcGxheWVyX3Nsb3QYAiABKA0SDwoHaGVyb19pZBgDIAEoBRIS",
            "CgZpdGVtXzAYBCABKAU6Ai0xEhIKBml0ZW1fMRgFIAEoBToCLTESEgoGaXRl",
            "bV8yGAYgASgFOgItMRISCgZpdGVtXzMYByABKAU6Ai0xEhIKBml0ZW1fNBgI",
            "IAEoBToCLTESEgoGaXRlbV81GAkgASgFOgItMRISCgZpdGVtXzYYOyABKAU6",
            "Ai0xEhIKBml0ZW1fNxg8IAEoBToCLTESEgoGaXRlbV84GD0gASgFOgItMRIS",
            "CgZpdGVtXzkYTCABKAU6Ai0xEhMKB2l0ZW1fMTAYUyABKAU6Ai0xEhMKC2l0",
            "ZW1fMTBfbHZsGFQgASgFEiIKGmV4cGVjdGVkX3RlYW1fY29udHJpYnV0aW9u",
            "GAogASgCEhUKDXNjYWxlZF9tZXRyaWMYCyABKAISFQoNcHJldmlvdXNfcmFu",
            "axgMIAEoDRITCgtyYW5rX2NoYW5nZRgNIAEoERIQCghtbXJfdHlwZRhKIAEo",
            "DRINCgVraWxscxgOIAEoDRIOCgZkZWF0aHMYDyABKA0SDwoHYXNzaXN0cxgQ",
            "IAEoDRIVCg1sZWF2ZXJfc3RhdHVzGBEgASgNEgwKBGdvbGQYEiABKA0SEQoJ",
            "bGFzdF9oaXRzGBMgASgNEg4KBmRlbmllcxgUIAEoDRIUCgxnb2xkX3Blcl9t",
            "aW4YFSABKA0SEgoKeHBfcGVyX21pbhgWIAEoDRISCgpnb2xkX3NwZW50GBcg",
            "ASgNEhMKC2hlcm9fZGFtYWdlGBggASgNEhQKDHRvd2VyX2RhbWFnZRgZIAEo",
            "DRIUCgxoZXJvX2hlYWxpbmcYGiABKA0SDQoFbGV2ZWwYGyABKA0SFgoOdGlt",
            "ZV9sYXN0X3NlZW4YHCABKA0SEwoLcGxheWVyX25hbWUYHSABKAkSHQoVc3Vw",
            "cG9ydF9hYmlsaXR5X3ZhbHVlGB4gASgNEhgKEGZlZWRpbmdfZGV0ZWN0ZWQY",
            "ICABKAgSEwoLc2VhcmNoX3JhbmsYIiABKA0SHwoXc2VhcmNoX3JhbmtfdW5j",
            "ZXJ0YWludHkYIyABKA0SHwoXcmFua191bmNlcnRhaW50eV9jaGFuZ2UYJCAB",
            "KAUSFwoPaGVyb19wbGF5X2NvdW50GCUgASgNEhAKCHBhcnR5X2lkGCYgASgG",
            "EhoKEnNjYWxlZF9oZXJvX2RhbWFnZRg2IAEoDRIbChNzY2FsZWRfdG93ZXJf",
            "ZGFtYWdlGDcgASgNEhsKE3NjYWxlZF9oZXJvX2hlYWxpbmcYOCABKA0SFAoM",
            "c2NhbGVkX2tpbGxzGCcgASgCEhUKDXNjYWxlZF9kZWF0aHMYKCABKAISFgoO",
            "c2NhbGVkX2Fzc2lzdHMYKSABKAISGQoRY2xhaW1lZF9mYXJtX2dvbGQYKiAB",
            "KA0SFAoMc3VwcG9ydF9nb2xkGCsgASgNEhYKDmNsYWltZWRfZGVuaWVzGCwg",
            "ASgNEhYKDmNsYWltZWRfbWlzc2VzGC0gASgNEg4KBm1pc3NlcxguIAEoDRI1",
            "ChBhYmlsaXR5X3VwZ3JhZGVzGC8gAygLMhsuQ01hdGNoUGxheWVyQWJpbGl0",
            "eVVwZ3JhZGUSQgoaYWRkaXRpb25hbF91bml0c19pbnZlbnRvcnkYMCADKAsy",
            "Hi5DTWF0Y2hBZGRpdGlvbmFsVW5pdEludmVudG9yeRIzCg9wZXJtYW5lbnRf",
            "YnVmZnMYOSADKAsyGi5DTWF0Y2hQbGF5ZXJQZXJtYW5lbnRCdWZmEhAKCHBy",
            "b19uYW1lGEggASgJEhEKCXJlYWxfbmFtZRhJIAEoCRI+ChBjdXN0b21fZ2Ft",
            "ZV9kYXRhGDIgASgLMiQuQ01zZ0RPVEFNYXRjaC5QbGF5ZXIuQ3VzdG9tR2Ft",
            "ZURhdGESIAoYYWN0aXZlX3BsdXNfc3Vic2NyaXB0aW9uGDMgASgIEhEKCW5l",
            "dF93b3J0aBg0IAEoDRIWCg5ib3RfZGlmZmljdWx0eRg6IAEoDRIXCg9oZXJv",
            "X3BpY2tfb3JkZXIYPyABKA0SGQoRaGVyb193YXNfcmFuZG9tZWQYQCABKAgS",
            "JQodaGVyb193YXNfZG90YV9wbHVzX3N1Z2dlc3Rpb24YRSABKAgSRgoUaGVy",
            "b19kYW1hZ2VfcmVjZWl2ZWQYQyADKAsyKC5DTXNnRE9UQU1hdGNoLlBsYXll",
            "ci5IZXJvRGFtYWdlUmVjZWl2ZWQSQwoRaGVyb19kYW1hZ2VfZGVhbHQYTyAD",
            "KAsyKC5DTXNnRE9UQU1hdGNoLlBsYXllci5IZXJvRGFtYWdlUmVjZWl2ZWQS",
            "FAoMc2Vjb25kc19kZWFkGEYgASgNEhoKEmdvbGRfbG9zdF90b19kZWF0aBhH",
            "IAEoDRIcChRsYW5lX3NlbGVjdGlvbl9mbGFncxhLIAEoDRIUCgxib3VudHlf",
            "cnVuZXMYTSABKA0SGQoRb3V0cG9zdHNfY2FwdHVyZWQYTiABKA0SOgoLdGVh",
            "bV9udW1iZXIYUCABKA4yDS5ET1RBX0dDX1RFQU06FkRPVEFfR0NfVEVBTV9H",
            "T09EX0dVWVMSEQoJdGVhbV9zbG90GFEgASgNEhYKDnNlbGVjdGVkX2ZhY2V0",
            "GFIgASgNGjMKDkN1c3RvbUdhbWVEYXRhEhEKCWRvdGFfdGVhbRgBIAEoDRIO",
            "CgZ3aW5uZXIYAiABKAgalAEKEkhlcm9EYW1hZ2VSZWNlaXZlZBIVCg1wcmVf",
            "cmVkdWN0aW9uGAEgASgNEhYKDnBvc3RfcmVkdWN0aW9uGAIgASgNEk8KC2Rh",
            "bWFnZV90eXBlGAMgASgOMiQuQ01zZ0RPVEFNYXRjaC5QbGF5ZXIuSGVyb0Rh",
            "bWFnZVR5cGU6FEhFUk9fREFNQUdFX1BIWVNJQ0FMIlkKDkhlcm9EYW1hZ2VU",
            "eXBlEhgKFEhFUk9fREFNQUdFX1BIWVNJQ0FMEAASFwoTSEVST19EQU1BR0Vf",
            "TUFHSUNBTBABEhQKEEhFUk9fREFNQUdFX1BVUkUQAhozCg9Ccm9hZGNhc3Rl",
            "ckluZm8SEgoKYWNjb3VudF9pZBgBIAEoDRIMCgRuYW1lGAIgASgJGpEBChJC",
            "cm9hZGNhc3RlckNoYW5uZWwSFAoMY291bnRyeV9jb2RlGAEgASgJEhMKC2Rl",
            "c2NyaXB0aW9uGAIgASgJEjkKEWJyb2FkY2FzdGVyX2luZm9zGAMgAygLMh4u",
            "Q01zZ0RPVEFNYXRjaC5Ccm9hZGNhc3RlckluZm8SFQoNbGFuZ3VhZ2VfY29k",
            "ZRgEIAEoCRqLAQoFQ29hY2gSEgoKYWNjb3VudF9pZBgBIAEoDRISCgpjb2Fj",
            "aF9uYW1lGAIgASgJEhQKDGNvYWNoX3JhdGluZxgDIAEoDRISCgpjb2FjaF90",
            "ZWFtGAQgASgNEhYKDmNvYWNoX3BhcnR5X2lkGAUgASgEEhgKEGlzX3ByaXZh",
            "dGVfY29hY2gYBiABKAgaOgoOQ3VzdG9tR2FtZURhdGESFgoOY3VzdG9tX2dh",
            "bWVfaWQYASABKAQSEAoIbWFwX25hbWUYAiABKAkiUAoLUmVwbGF5U3RhdGUS",
            "FAoQUkVQTEFZX0FWQUlMQUJMRRAAEhcKE1JFUExBWV9OT1RfUkVDT1JERUQQ",
            "ARISCg5SRVBMQVlfRVhQSVJFRBACIoYBCg5DTXNnUGxheWVyQ2FyZBISCgph",
            "Y2NvdW50X2lkGAEgASgNEjMKDXN0YXRfbW9kaWZpZXIYAiADKAsyHC5DTXNn",
            "UGxheWVyQ2FyZC5TdGF0TW9kaWZpZXIaKwoMU3RhdE1vZGlmaWVyEgwKBHN0",
            "YXQYASABKA0SDQoFdmFsdWUYAiABKA0itAQKGkNNc2dET1RBRmFudGFzeVBs",
            "YXllclN0YXRzEhkKEXBsYXllcl9hY2NvdW50X2lkGAEgASgNEhAKCG1hdGNo",
            "X2lkGAIgASgEEhcKD21hdGNoX2NvbXBsZXRlZBgDIAEoCBIPCgd0ZWFtX2lk",
            "GAQgASgNEhEKCWxlYWd1ZV9pZBgFIAEoDRINCgVkZWxheRgGIAEoDRIRCglz",
            "ZXJpZXNfaWQYByABKA0SEwoLc2VyaWVzX3R5cGUYCCABKA0SDQoFa2lsbHMY",
            "CiABKA0SDgoGZGVhdGhzGAsgASgNEgoKAmNzGAwgASgNEgsKA2dwbRgNIAEo",
            "AhITCgt0b3dlcl9raWxscxgOIAEoDRIUCgxyb3NoYW5fa2lsbHMYDyABKA0S",
            "HwoXdGVhbWZpZ2h0X3BhcnRpY2lwYXRpb24YECABKAISFAoMd2FyZHNfcGxh",
            "Y2VkGBEgASgNEhUKDWNhbXBzX3N0YWNrZWQYEiABKA0SFQoNcnVuZXNfZ3Jh",
            "YmJlZBgTIAEoDRITCgtmaXJzdF9ibG9vZBgUIAEoDRINCgVzdHVucxgVIAEo",
            "AhIOCgZzbW9rZXMYFiABKA0SFgoObmV1dHJhbF90b2tlbnMYFyABKA0SEAoI",
            "d2F0Y2hlcnMYGCABKA0SDwoHbG90dXNlcxgZIAEoDRISCgp0b3JtZW50b3Jz",
            "GBogASgNEhUKDWNvdXJpZXJfa2lsbHMYGyABKA0SEwoLdGl0bGVfc3RhdHMY",
            "HCABKAYiTwofQ01zZ0RPVEFGYW50YXN5UGxheWVyTWF0Y2hTdGF0cxIsCgdt",
            "YXRjaGVzGAEgAygLMhsuQ01zZ0RPVEFGYW50YXN5UGxheWVyU3RhdHMilAcK",
            "FENNc2dET1RBQm90RGVidWdJbmZvEicKBGJvdHMYASADKAsyGS5DTXNnRE9U",
            "QUJvdERlYnVnSW5mby5Cb3QSHAoUZGVzaXJlX3B1c2hfbGFuZV90b3AYAiAB",
            "KAISHAoUZGVzaXJlX3B1c2hfbGFuZV9taWQYAyABKAISHAoUZGVzaXJlX3B1",
            "c2hfbGFuZV9ib3QYBCABKAISHgoWZGVzaXJlX2RlZmVuZF9sYW5lX3RvcBgF",
            "IAEoAhIeChZkZXNpcmVfZGVmZW5kX2xhbmVfbWlkGAYgASgCEh4KFmRlc2ly",
            "ZV9kZWZlbmRfbGFuZV9ib3QYByABKAISHAoUZGVzaXJlX2Zhcm1fbGFuZV90",
            "b3AYCCABKAISHAoUZGVzaXJlX2Zhcm1fbGFuZV9taWQYCSABKAISHAoUZGVz",
            "aXJlX2Zhcm1fbGFuZV9ib3QYCiABKAISGgoSZGVzaXJlX2Zhcm1fcm9zaGFu",
            "GAsgASgCEhYKDmV4ZWN1dGlvbl90aW1lGAwgASgCEhMKC3J1bmVfc3RhdHVz",
            "GA0gAygNGvUDCgNCb3QSGwoPcGxheWVyX293bmVyX2lkGAEgASgFOgItMRIP",
            "CgdoZXJvX2lkGAIgASgFEhIKCmRpZmZpY3VsdHkYAyABKA0SFQoNcG93ZXJf",
            "Y3VycmVudBgEIAEoDRIRCglwb3dlcl9tYXgYBSABKA0SFQoNbW92ZV90YXJn",
            "ZXRfeBgGIAEoDRIVCg1tb3ZlX3RhcmdldF95GAcgASgNEhUKDW1vdmVfdGFy",
            "Z2V0X3oYCCABKA0SFgoOYWN0aXZlX21vZGVfaWQYCSABKA0SFgoOZXhlY3V0",
            "aW9uX3RpbWUYCiABKAISLQoFbW9kZXMYCyADKAsyHi5DTXNnRE9UQUJvdERl",
            "YnVnSW5mby5Cb3QuTW9kZRIwCgZhY3Rpb24YDCABKAsyIC5DTXNnRE9UQUJv",
            "dERlYnVnSW5mby5Cb3QuQWN0aW9uGngKBE1vZGUSDwoHbW9kZV9pZBgBIAEo",
            "DRIOCgZkZXNpcmUYAiABKAISGQoNdGFyZ2V0X2VudGl0eRgDIAEoBToCLTES",
            "EAoIdGFyZ2V0X3gYBCABKA0SEAoIdGFyZ2V0X3kYBSABKA0SEAoIdGFyZ2V0",
            "X3oYBiABKA0aMgoGQWN0aW9uEhEKCWFjdGlvbl9pZBgBIAEoDRIVCg1hY3Rp",
            "b25fdGFyZ2V0GAIgASgJIlIKEkNNc2dTdWNjZXNzZnVsSGVybxIPCgdoZXJv",
            "X2lkGAEgASgFEhMKC3dpbl9wZXJjZW50GAIgASgCEhYKDmxvbmdlc3Rfc3Ry",
            "ZWFrGAMgASgNIrECChNDTXNnUmVjZW50TWF0Y2hJbmZvEhAKCG1hdGNoX2lk",
            "GAEgASgEEjUKCWdhbWVfbW9kZRgCIAEoDjIOLkRPVEFfR2FtZU1vZGU6EkRP",
            "VEFfR0FNRU1PREVfTk9ORRINCgVraWxscxgDIAEoDRIOCgZkZWF0aHMYBCAB",
            "KA0SDwoHYXNzaXN0cxgFIAEoDRIQCghkdXJhdGlvbhgGIAEoDRITCgtwbGF5",
            "ZXJfc2xvdBgHIAEoDRI+Cg1tYXRjaF9vdXRjb21lGAggASgOMg4uRU1hdGNo",
            "T3V0Y29tZToXa19FTWF0Y2hPdXRjb21lX1Vua25vd24SEQoJdGltZXN0YW1w",
            "GAkgASgNEhIKCmxvYmJ5X3R5cGUYCiABKA0SEwoLdGVhbV9udW1iZXIYCyAB",
            "KA0iuAEKDUNNc2dNYXRjaFRpcHMSJgoEdGlwcxgCIAMoCzIYLkNNc2dNYXRj",
            "aFRpcHMuU2luZ2xlVGlwGn8KCVNpbmdsZVRpcBIZChFzb3VyY2VfYWNjb3Vu",
            "dF9pZBgBIAEoDRIZChF0YXJnZXRfYWNjb3VudF9pZBgCIAEoDRISCgp0aXBf",
            "YW1vdW50GAMgASgNEigKCGV2ZW50X2lkGAQgASgOMgcuRUV2ZW50Og1FVkVO",
            "VF9JRF9OT05FIo4IChRDTXNnRE9UQU1hdGNoTWluaW1hbBIQCghtYXRjaF9p",
            "ZBgBIAEoBBISCgpzdGFydF90aW1lGAIgASgHEhAKCGR1cmF0aW9uGAMgASgN",
            "EjUKCWdhbWVfbW9kZRgEIAEoDjIOLkRPVEFfR2FtZU1vZGU6EkRPVEFfR0FN",
            "RU1PREVfTk9ORRItCgdwbGF5ZXJzGAYgAygLMhwuQ01zZ0RPVEFNYXRjaE1p",
            "bmltYWwuUGxheWVyEi4KB3RvdXJuZXkYByABKAsyHS5DTXNnRE9UQU1hdGNo",
            "TWluaW1hbC5Ub3VybmV5Ej4KDW1hdGNoX291dGNvbWUYCCABKA4yDi5FTWF0",
            "Y2hPdXRjb21lOhdrX0VNYXRjaE91dGNvbWVfVW5rbm93bhIVCg1yYWRpYW50",
            "X3Njb3JlGAkgASgNEhIKCmRpcmVfc2NvcmUYCiABKA0SEgoKbG9iYnlfdHlw",
            "ZRgLIAEoDRIXCg9pc19wbGF5ZXJfZHJhZnQYDCABKAga3gEKBlBsYXllchIS",
            "CgphY2NvdW50X2lkGAEgASgNEg8KB2hlcm9faWQYAiABKAUSDQoFa2lsbHMY",
            "AyABKA0SDgoGZGVhdGhzGAQgASgNEg8KB2Fzc2lzdHMYBSABKA0SDQoFaXRl",
            "bXMYBiADKAUSEwoLcGxheWVyX3Nsb3QYByABKA0SEAoIcHJvX25hbWUYCCAB",
            "KAkSDQoFbGV2ZWwYCSABKA0SOgoLdGVhbV9udW1iZXIYCiABKA4yDS5ET1RB",
            "X0dDX1RFQU06FkRPVEFfR0NfVEVBTV9HT09EX0dVWVMargMKB1RvdXJuZXkS",
            "EQoJbGVhZ3VlX2lkGAEgASgNEhMKC3Nlcmllc190eXBlGAggASgNEhMKC3Nl",
            "cmllc19nYW1lGAkgASgNEiUKHXdlZWtlbmRfdG91cm5leV90b3VybmFtZW50",
            "X2lkGAogASgNEigKIHdlZWtlbmRfdG91cm5leV9zZWFzb25fdHJvcGh5X2lk",
            "GAsgASgNEiAKGHdlZWtlbmRfdG91cm5leV9kaXZpc2lvbhgMIAEoDRIjCht3",
            "ZWVrZW5kX3RvdXJuZXlfc2tpbGxfbGV2ZWwYDSABKA0SFwoPcmFkaWFudF90",
            "ZWFtX2lkGAIgASgNEhkKEXJhZGlhbnRfdGVhbV9uYW1lGAMgASgJEhkKEXJh",
            "ZGlhbnRfdGVhbV9sb2dvGAQgASgGEh0KFXJhZGlhbnRfdGVhbV9sb2dvX3Vy",
            "bBgOIAEoCRIUCgxkaXJlX3RlYW1faWQYBSABKA0SFgoOZGlyZV90ZWFtX25h",
            "bWUYBiABKAkSFgoOZGlyZV90ZWFtX2xvZ28YByABKAYSGgoSZGlyZV90ZWFt",
            "X2xvZ29fdXJsGA8gASgJIkAKE0NNc2dDb25zdW1hYmxlVXNhZ2USEAoIaXRl",
            "bV9kZWYYASABKA0SFwoPcXVhbnRpdHlfY2hhbmdlGAIgASgFIrUBChhDTXNn",
            "TWF0Y2hDb25zdW1hYmxlVXNhZ2USRgoXcGxheWVyX2NvbnN1bWFibGVzX3Vz",
            "ZWQYASADKAsyJS5DTXNnTWF0Y2hDb25zdW1hYmxlVXNhZ2UuUGxheWVyVXNh",
            "Z2UaUQoLUGxheWVyVXNhZ2USEgoKYWNjb3VudF9pZBgBIAEoDRIuChBjb25z",
            "dW1hYmxlc191c2VkGAIgAygLMhQuQ01zZ0NvbnN1bWFibGVVc2FnZSKyAQoa",
            "Q01zZ01hdGNoRXZlbnRBY3Rpb25HcmFudHMSPwoNcGxheWVyX2dyYW50cxgB",
            "IAMoCzIoLkNNc2dNYXRjaEV2ZW50QWN0aW9uR3JhbnRzLlBsYXllckdyYW50",
            "cxpTCgxQbGF5ZXJHcmFudHMSEgoKYWNjb3VudF9pZBgBIAEoDRIvCg9hY3Rp",
            "b25zX2dyYW50ZWQYAyADKAsyFi5DTXNnUGVuZGluZ0V2ZW50QXdhcmQiZQoX",
            "Q01zZ0N1c3RvbUdhbWVXaGl0ZWxpc3QSDwoHdmVyc2lvbhgBIAEoDRIeChZj",
            "dXN0b21fZ2FtZXNfd2hpdGVsaXN0GAIgAygEEhkKEWRpc2FibGVfd2hpdGVs",
            "aXN0GAMgASgIIvABCh5DTXNnQ3VzdG9tR2FtZVdoaXRlbGlzdEZvckVkaXQS",
            "SQoRd2hpdGVsaXN0X2VudHJpZXMYASADKAsyLi5DTXNnQ3VzdG9tR2FtZVdo",
            "aXRlbGlzdEZvckVkaXQuV2hpdGVsaXN0RW50cnkaggEKDldoaXRlbGlzdEVu",
            "dHJ5EhYKDmN1c3RvbV9nYW1lX2lkGAEgASgEElgKD3doaXRlbGlzdF9zdGF0",
            "ZRgCIAEoDjIaLkVDdXN0b21HYW1lV2hpdGVsaXN0U3RhdGU6I0NVU1RPTV9H",
            "QU1FX1dISVRFTElTVF9TVEFURV9VTktOT1dOIqABChlDTXNnUGxheWVyUmVj",
            "ZW50TWF0Y2hJbmZvEhAKCG1hdGNoX2lkGAEgASgEEhEKCXRpbWVzdGFtcBgC",
            "IAEoDRIQCghkdXJhdGlvbhgDIAEoDRILCgN3aW4YBCABKAgSDwoHaGVyb19p",
            "ZBgFIAEoBRINCgVraWxscxgGIAEoDRIOCgZkZWF0aHMYByABKA0SDwoHYXNz",
            "aXN0cxgIIAEoDSI1ChVDTXNnUGxheWVyTWF0Y2hSZWNvcmQSDAoEd2lucxgB",
            "IAEoDRIOCgZsb3NzZXMYAiABKA0iRgodQ01zZ1BsYXllclJlY2VudE1hdGNo",
            "T3V0Y29tZXMSEAoIb3V0Y29tZXMYASABKA0SEwoLbWF0Y2hfY291bnQYAiAB",
            "KA0iQQoYQ01zZ1BsYXllclJlY2VudENvbW1lbmRzEhAKCGNvbW1lbmRzGAEg",
            "ASgNEhMKC21hdGNoX2NvdW50GAIgASgNIvsCCh9DTXNnUGxheWVyUmVjZW50",
            "QWNjb21wbGlzaG1lbnRzEjcKD3JlY2VudF9vdXRjb21lcxgBIAEoCzIeLkNN",
            "c2dQbGF5ZXJSZWNlbnRNYXRjaE91dGNvbWVzEiwKDHRvdGFsX3JlY29yZBgC",
            "IAEoCzIWLkNNc2dQbGF5ZXJNYXRjaFJlY29yZBIZChFwcmVkaWN0aW9uX3N0",
            "cmVhaxgDIAEoDRIeChZwbHVzX3ByZWRpY3Rpb25fc3RyZWFrGAQgASgNEjIK",
            "D3JlY2VudF9jb21tZW5kcxgFIAEoCzIZLkNNc2dQbGF5ZXJSZWNlbnRDb21t",
            "ZW5kcxIdChVmaXJzdF9tYXRjaF90aW1lc3RhbXAYBiABKA0SLgoKbGFzdF9t",
            "YXRjaBgHIAEoCzIaLkNNc2dQbGF5ZXJSZWNlbnRNYXRjaEluZm8SMwoLcmVj",
            "ZW50X212cHMYCCABKAsyHi5DTXNnUGxheWVyUmVjZW50TWF0Y2hPdXRjb21l",
            "cyK8AQojQ01zZ1BsYXllckhlcm9SZWNlbnRBY2NvbXBsaXNobWVudHMSNwoP",
            "cmVjZW50X291dGNvbWVzGAEgASgLMh4uQ01zZ1BsYXllclJlY2VudE1hdGNo",
            "T3V0Y29tZXMSLAoMdG90YWxfcmVjb3JkGAIgASgLMhYuQ01zZ1BsYXllck1h",
            "dGNoUmVjb3JkEi4KCmxhc3RfbWF0Y2gYAyABKAsyGi5DTXNnUGxheWVyUmVj",
            "ZW50TWF0Y2hJbmZvIqEBChlDTXNnUmVjZW50QWNjb21wbGlzaG1lbnRzEkAK",
            "FnBsYXllcl9hY2NvbXBsaXNobWVudHMYASABKAsyIC5DTXNnUGxheWVyUmVj",
            "ZW50QWNjb21wbGlzaG1lbnRzEkIKFGhlcm9fYWNjb21wbGlzaG1lbnRzGAIg",
            "ASgLMiQuQ01zZ1BsYXllckhlcm9SZWNlbnRBY2NvbXBsaXNobWVudHMiVwow",
            "Q01zZ1NlcnZlclRvR0NSZXF1ZXN0UGxheWVyUmVjZW50QWNjb21wbGlzaG1l",
            "bnRzEhIKCmFjY291bnRfaWQYASABKA0SDwoHaGVyb19pZBgCIAEoBSKxAgo4",
            "Q01zZ1NlcnZlclRvR0NSZXF1ZXN0UGxheWVyUmVjZW50QWNjb21wbGlzaG1l",
            "bnRzUmVzcG9uc2USZQoGcmVzdWx0GAEgASgOMkMuQ01zZ1NlcnZlclRvR0NS",
            "ZXF1ZXN0UGxheWVyUmVjZW50QWNjb21wbGlzaG1lbnRzUmVzcG9uc2UuRVJl",
            "c3BvbnNlOhBrX2VJbnRlcm5hbEVycm9yEjoKFnBsYXllcl9hY2NvbXBsaXNo",
            "bWVudHMYAiABKAsyGi5DTXNnUmVjZW50QWNjb21wbGlzaG1lbnRzIlIKCUVS",
            "ZXNwb25zZRIUChBrX2VJbnRlcm5hbEVycm9yEAASDgoKa19lU3VjY2VzcxAB",
            "Eg4KCmtfZVRvb0J1c3kQAhIPCgtrX2VEaXNhYmxlZBADIlEKGENNc2dBcmNh",
            "bmFWb3RlTWF0Y2hWb3RlcxIQCghtYXRjaF9pZBgBIAEoDRIPCgdoZXJvX2lk",
            "GAIgASgFEhIKCnZvdGVfY291bnQYAyABKA0inQEKKENNc2dHQ3RvR0NBc3Nv",
            "Y2lhdGVkRXhwbG9pdGVyQWNjb3VudEluZm8SEgoKYWNjb3VudF9pZBgBIAEo",
            "DRIdChVudW1fbWF0Y2hlc190b19zZWFyY2gYAiABKA0SHgoWbWluX3NoYXJl",
            "ZF9tYXRjaF9jb3VudBgDIAEoDRIeChZudW1fYWRkaXRpb25hbF9wbGF5ZXJz",
            "GAQgASgNIrQCCjBDTXNnR0N0b0dDQXNzb2NpYXRlZEV4cGxvaXRlckFjY291",
            "bnRJbmZvUmVzcG9uc2USSwoIYWNjb3VudHMYASADKAsyOS5DTXNnR0N0b0dD",
            "QXNzb2NpYXRlZEV4cGxvaXRlckFjY291bnRJbmZvUmVzcG9uc2UuQWNjb3Vu",
            "dBqyAQoHQWNjb3VudBISCgphY2NvdW50X2lkGAEgASgNEhoKEm51bV9jb21t",
            "b25fbWF0Y2hlcxgCIAEoDRIdChVlYXJsaWVzdF9jb21tb25fbWF0Y2gYAyAB",
            "KA0SGwoTbGF0ZXN0X2NvbW1vbl9tYXRjaBgEIAEoDRISCgpnZW5lcmF0aW9u",
            "GAUgASgNEg8KB3BlcnNvbmEYBiABKAkSFgoOYWxyZWFkeV9iYW5uZWQYByAB",
            "KAginQIKEENNc2dQdWxsVGFic0RhdGESJQoFc2xvdHMYASADKAsyFi5DTXNn",
            "UHVsbFRhYnNEYXRhLlNsb3QSKwoIamFja3BvdHMYAiADKAsyGS5DTXNnUHVs",
            "bFRhYnNEYXRhLkphY2twb3QSEgoKbGFzdF9ib2FyZBgDIAEoDRpgCgRTbG90",
            "EhAKCGV2ZW50X2lkGAEgASgNEhAKCGJvYXJkX2lkGAIgASgNEg8KB2hlcm9f",
            "aWQYAyABKAUSEQoJYWN0aW9uX2lkGAQgASgNEhAKCHJlZGVlbWVkGAUgASgI",
            "Gj8KB0phY2twb3QSEAoIYm9hcmRfaWQYASABKA0SEQoJYWN0aW9uX2lkGAIg",
            "ASgNEg8KB2hlcm9faWQYAyABKAUiuwIKEkNNc2dVbmRlckRyYWZ0RGF0YRIy",
            "CgtiZW5jaF9zbG90cxgBIAMoCzIdLkNNc2dVbmRlckRyYWZ0RGF0YS5CZW5j",
            "aFNsb3QSMAoKc2hvcF9zbG90cxgCIAMoCzIcLkNNc2dVbmRlckRyYWZ0RGF0",
            "YS5TaG9wU2xvdBIMCgRnb2xkGAMgASgNEhIKCnRvdGFsX2dvbGQYBCABKA0S",
            "FgoObm90X3Jlc3RvcmFibGUYBSABKAgaPAoJQmVuY2hTbG90Eg8KB3Nsb3Rf",
            "aWQYASABKA0SDwoHaGVyb19pZBgCIAEoBRINCgVzdGFycxgDIAEoDRpHCghT",
            "aG9wU2xvdBIPCgdzbG90X2lkGAEgASgNEg8KB2hlcm9faWQYAiABKAUSGQoR",
            "aXNfc3BlY2lhbF9yZXdhcmQYAyABKAgiRgoTQ01zZ1BsYXllclRpdGxlRGF0",
            "YRINCgV0aXRsZRgBIAMoDRIQCghldmVudF9pZBgCIAMoDRIOCgZhY3RpdmUY",
            "AyABKA0i6AEKFkNNc2dET1RBVHJpdmlhUXVlc3Rpb24SEwoLcXVlc3Rpb25f",
            "aWQYASABKA0SWQoIY2F0ZWdvcnkYAiABKA4yHC5FRE9UQVRyaXZpYVF1ZXN0",
            "aW9uQ2F0ZWdvcnk6KWtfRURPVEFUcml2aWFRdWVzdGlvbkNhdGVnb3J5X0Fi",
            "aWxpdHlJY29uEhEKCXRpbWVzdGFtcBgDIAEoDRIWCg5xdWVzdGlvbl92YWx1",
            "ZRgEIAEoCRIVCg1hbnN3ZXJfdmFsdWVzGAUgAygJEhwKFGNvcnJlY3RfYW5z",
            "d2VyX2luZGV4GAYgASgNIlcKJENNc2dET1RBVHJpdmlhUXVlc3Rpb25BbnN3",
            "ZXJzU3VtbWFyeRIZChFzdW1tYXJ5X2F2YWlsYWJsZRgBIAEoCBIUCgxwaWNr",
            "ZWRfY291bnQYAiADKA0iTwodQ01zZ0dhbWVEYXRhU3BlY2lhbFZhbHVlQm9u",
            "dXMSDAoEbmFtZRgBIAEoCRINCgV2YWx1ZRgCIAEoAhIRCglvcGVyYXRpb24Y",
            "AyABKA0ilwIKGUNNc2dHYW1lRGF0YVNwZWNpYWxWYWx1ZXMSDAoEbmFtZRgB",
            "IAEoCRIUCgx2YWx1ZXNfZmxvYXQYAiADKAISFQoNaXNfcGVyY2VudGFnZRgE",
            "IAEoCBITCgtoZWFkaW5nX2xvYxgFIAEoCRIvCgdib251c2VzGAYgAygLMh4u",
            "Q01zZ0dhbWVEYXRhU3BlY2lhbFZhbHVlQm9udXMSFAoMdmFsdWVzX3NoYXJk",
            "GAcgAygCEhYKDnZhbHVlc19zY2VwdGVyGAggAygCEjMKC2ZhY2V0X2JvbnVz",
            "GAkgASgLMh4uQ01zZ0dhbWVEYXRhRmFjZXRBYmlsaXR5Qm9udXMSFgoOcmVx",
            "dWlyZWRfZmFjZXQYCiABKAkiUAodQ01zZ0dhbWVEYXRhRmFjZXRBYmlsaXR5",
            "Qm9udXMSDAoEbmFtZRgBIAEoCRIOCgZ2YWx1ZXMYAiADKAISEQoJb3BlcmF0",
            "aW9uGAMgASgNIo4HChlDTXNnR2FtZURhdGFBYmlsaXR5T3JJdGVtEg4KAmlk",
            "GAEgASgFOgItMRIMCgRuYW1lGAIgASgJEhAKCG5hbWVfbG9jGAUgASgJEhAK",
            "CGRlc2NfbG9jGAYgASgJEhAKCGxvcmVfbG9jGAcgASgJEhEKCW5vdGVzX2xv",
            "YxgIIAMoCRIRCglzaGFyZF9sb2MYCSABKAkSEwoLc2NlcHRlcl9sb2MYCiAB",
            "KAkSEgoKZmFjZXRzX2xvYxgLIAMoCRIMCgR0eXBlGBQgASgNEhAKCGJlaGF2",
            "aW9yGBUgASgEEhMKC3RhcmdldF90ZWFtGBYgASgNEhMKC3RhcmdldF90eXBl",
            "GBcgASgNEg0KBWZsYWdzGBggASgNEg4KBmRhbWFnZRgZIAEoDRIQCghpbW11",
            "bml0eRgaIAEoDRITCgtkaXNwZWxsYWJsZRgbIAEoDRIRCgltYXhfbGV2ZWwY",
            "HCABKA0SEwoLY2FzdF9yYW5nZXMYHiADKA0SEwoLY2FzdF9wb2ludHMYHyAD",
            "KAISFQoNY2hhbm5lbF90aW1lcxggIAMoAhIRCgljb29sZG93bnMYISADKAIS",
            "EQoJZHVyYXRpb25zGCIgAygCEg8KB2RhbWFnZXMYIyADKA0SEgoKbWFuYV9j",
            "b3N0cxgkIAMoDRISCgpnb2xkX2Nvc3RzGCUgAygNEhQKDGhlYWx0aF9jb3N0",
            "cxgmIAMoDRIyCg5zcGVjaWFsX3ZhbHVlcxgoIAMoCzIaLkNNc2dHYW1lRGF0",
            "YVNwZWNpYWxWYWx1ZXMSDwoHaXNfaXRlbRgyIAEoCBIbChNhYmlsaXR5X2hh",
            "c19zY2VwdGVyGDwgASgIEhkKEWFiaWxpdHlfaGFzX3NoYXJkGD0gASgIEiUK",
            "HWFiaWxpdHlfaXNfZ3JhbnRlZF9ieV9zY2VwdGVyGD4gASgIEiMKG2FiaWxp",
            "dHlfaXNfZ3JhbnRlZF9ieV9zaGFyZBg/IAEoCBIZChFhYmlsaXR5X2lzX2lu",
            "bmF0ZRhAIAEoCBIRCglpdGVtX2Nvc3QYRiABKA0SHAoUaXRlbV9pbml0aWFs",
            "X2NoYXJnZXMYRyABKA0SGQoRaXRlbV9uZXV0cmFsX3RpZXIYSCABKA0SFgoO",
            "aXRlbV9zdG9ja19tYXgYSSABKA0SFwoPaXRlbV9zdG9ja190aW1lGEogASgC",
            "EhQKDGl0ZW1fcXVhbGl0eRhVIAEoDSJOCh1DTXNnR2FtZURhdGFBYmlsaXR5",
            "T3JJdGVtTGlzdBItCglhYmlsaXRpZXMYASADKAsyGi5DTXNnR2FtZURhdGFB",
            "YmlsaXR5T3JJdGVtItcHChBDTXNnR2FtZURhdGFIZXJvEgoKAmlkGAEgASgF",
            "EgwKBG5hbWUYAiABKAkSEAoIb3JkZXJfaWQYAyABKA0SEAoIbmFtZV9sb2MY",
            "BSABKAkSDwoHYmlvX2xvYxgGIAEoCRIQCghoeXBlX2xvYxgHIAEoCRIUCgxu",
            "cGVfZGVzY19sb2MYCCABKAkSJwoGZmFjZXRzGCsgAygLMhcuQ01zZ0dhbWVE",
            "YXRhSGVyby5GYWNldBIQCghzdHJfYmFzZRgKIAEoDRIQCghzdHJfZ2FpbhgL",
            "IAEoAhIQCghhZ2lfYmFzZRgMIAEoDRIQCghhZ2lfZ2FpbhgNIAEoAhIQCghp",
            "bnRfYmFzZRgOIAEoDRIQCghpbnRfZ2FpbhgPIAEoAhIUCgxwcmltYXJ5X2F0",
            "dHIYFCABKA0SEgoKY29tcGxleGl0eRgVIAEoDRIZChFhdHRhY2tfY2FwYWJp",
            "bGl0eRgWIAEoDRITCgtyb2xlX2xldmVscxgXIAMoDRISCgpkYW1hZ2VfbWlu",
            "GBggASgFEhIKCmRhbWFnZV9tYXgYGSABKAUSEwoLYXR0YWNrX3JhdGUYGiAB",
            "KAISFAoMYXR0YWNrX3JhbmdlGBsgASgNEhgKEHByb2plY3RpbGVfc3BlZWQY",
            "HCABKA0SDQoFYXJtb3IYHSABKAISGAoQbWFnaWNfcmVzaXN0YW5jZRgeIAEo",
            "DRIWCg5tb3ZlbWVudF9zcGVlZBgfIAEoDRIRCgl0dXJuX3JhdGUYICABKAIS",
            "FwoPc2lnaHRfcmFuZ2VfZGF5GCEgASgNEhkKEXNpZ2h0X3JhbmdlX25pZ2h0",
            "GCIgASgNEhIKCm1heF9oZWFsdGgYIyABKA0SFAoMaGVhbHRoX3JlZ2VuGCQg",
            "ASgCEhAKCG1heF9tYW5hGCUgASgNEhIKCm1hbmFfcmVnZW4YJiABKAISLQoJ",
            "YWJpbGl0aWVzGCggAygLMhouQ01zZ0dhbWVEYXRhQWJpbGl0eU9ySXRlbRIr",
            "Cgd0YWxlbnRzGCkgAygLMhouQ01zZ0dhbWVEYXRhQWJpbGl0eU9ySXRlbRI3",
            "Cg9mYWNldF9hYmlsaXRpZXMYKiADKAsyHi5DTXNnR2FtZURhdGFBYmlsaXR5",
            "T3JJdGVtTGlzdBqCAQoFRmFjZXQSDQoFY29sb3IYASABKA0SEQoJdGl0bGVf",
            "bG9jGAIgASgJEhcKD2Rlc2NyaXB0aW9uX2xvYxgDIAEoCRIMCgRuYW1lGAQg",
            "ASgJEgwKBGljb24YBSABKAkSEwoLZ3JhZGllbnRfaWQYBiABKAUSDQoFaW5k",
            "ZXgYByABKA0iRgoVQ01zZ0dhbWVEYXRhQWJpbGl0aWVzEi0KCWFiaWxpdGll",
            "cxgBIAMoCzIaLkNNc2dHYW1lRGF0YUFiaWxpdHlPckl0ZW0iPgoRQ01zZ0dh",
            "bWVEYXRhSXRlbXMSKQoFaXRlbXMYASADKAsyGi5DTXNnR2FtZURhdGFBYmls",
            "aXR5T3JJdGVtIjcKEkNNc2dHYW1lRGF0YUhlcm9lcxIhCgZoZXJvZXMYASAD",
            "KAsyES5DTXNnR2FtZURhdGFIZXJvIsIBChRDTXNnR2FtZURhdGFIZXJvTGlz",
            "dBIuCgZoZXJvZXMYASADKAsyHi5DTXNnR2FtZURhdGFIZXJvTGlzdC5IZXJv",
            "SW5mbxp6CghIZXJvSW5mbxIKCgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJEhAK",
            "CG5hbWVfbG9jGAMgASgJEhgKEG5hbWVfZW5nbGlzaF9sb2MYBCABKAkSFAoM",
            "cHJpbWFyeV9hdHRyGAUgASgNEhIKCmNvbXBsZXhpdHkYBiABKA0ilwMKG0NN",
            "c2dHYW1lRGF0YUl0ZW1BYmlsaXR5TGlzdBJDCg1pdGVtYWJpbGl0aWVzGAEg",
            "AygLMiwuQ01zZ0dhbWVEYXRhSXRlbUFiaWxpdHlMaXN0Lkl0ZW1BYmlsaXR5",
            "SW5mbxqyAgoPSXRlbUFiaWxpdHlJbmZvEg4KAmlkGAEgASgFOgItMRIMCgRu",
            "YW1lGAIgASgJEhAKCG5hbWVfbG9jGAMgASgJEhgKEG5hbWVfZW5nbGlzaF9s",
            "b2MYBCABKAkSGQoRbmV1dHJhbF9pdGVtX3RpZXIYBSABKAUSHAoUaXNfcHJl",
            "Z2FtZV9zdWdnZXN0ZWQYBiABKAgSHgoWaXNfZWFybHlnYW1lX3N1Z2dlc3Rl",
            "ZBgHIAEoCBIdChVpc19sYXRlZ2FtZV9zdWdnZXN0ZWQYCCABKAgSRAoHcmVj",
            "aXBlcxgJIAMoCzIzLkNNc2dHYW1lRGF0YUl0ZW1BYmlsaXR5TGlzdC5JdGVt",
            "QWJpbGl0eUluZm8uUmVjaXBlGhcKBlJlY2lwZRINCgVpdGVtcxgBIAMoBSI4",
            "ChlDTXNnTG9iYnlBYmlsaXR5RHJhZnREYXRhEhsKE3NodWZmbGVfZHJhZnRf",
            "b3JkZXIYASABKAgizQEKGENTT0Vjb25JdGVtRHJvcFJhdGVCb251cxIYCgph",
            "Y2NvdW50X2lkGAEgASgNQgSAph0BEhcKD2V4cGlyYXRpb25fZGF0ZRgCIAEo",
            "BxITCgVib251cxgDIAEoAkIEgKYdARITCgtib251c19jb3VudBgEIAEoDRIP",
            "CgdpdGVtX2lkGAUgASgEEhEKCWRlZl9pbmRleBgGIAEoDRIUCgxzZWNvbmRz",
            "X2xlZnQYByABKA0SGgoMYm9vc3Rlcl90eXBlGAggASgNQgSAph0BIsoBCh1D",
            "U09FY29uSXRlbVRvdXJuYW1lbnRQYXNzcG9ydBISCgphY2NvdW50X2lkGAEg",
            "ASgNEhEKCWxlYWd1ZV9pZBgCIAEoDRIPCgdpdGVtX2lkGAMgASgEEh0KFW9y",
            "aWdpbmFsX3B1cmNoYXNlcl9pZBgEIAEoDRIYChBwYXNzcG9ydHNfYm91Z2h0",
            "GAUgASgNEg8KB3ZlcnNpb24YBiABKA0SEQoJZGVmX2luZGV4GAcgASgNEhQK",
            "DHJld2FyZF9mbGFncxgIIAEoDSLcAQoWQ01zZ1N0aWNrZXJib29rU3RpY2tl",
            "chITCgtpdGVtX2RlZl9pZBgBIAEoDRITCgtzdGlja2VyX251bRgCIAEoDRIP",
            "CgdxdWFsaXR5GAMgASgNEhIKCnBvc2l0aW9uX3gYBCABKAISEgoKcG9zaXRp",
            "b25feRgFIAEoAhISCgpwb3NpdGlvbl96GAggASgCEhAKCHJvdGF0aW9uGAYg",
            "ASgCEg0KBXNjYWxlGAcgASgCEhYKDnNvdXJjZV9pdGVtX2lkGAkgASgEEhIK",
            "CmRlcHRoX2JpYXMYCiABKA0izQEKE0NNc2dTdGlja2VyYm9va1BhZ2USEAoI",
            "cGFnZV9udW0YASABKA0SKAoIZXZlbnRfaWQYAiABKA4yBy5FRXZlbnQ6DUVW",
            "RU5UX0lEX05PTkUSDwoHdGVhbV9pZBgDIAEoDRIpCghzdGlja2VycxgEIAMo",
            "CzIXLkNNc2dTdGlja2VyYm9va1N0aWNrZXISPgoJcGFnZV90eXBlGAUgASgO",
            "MhUuRVN0aWNrZXJib29rUGFnZVR5cGU6FFNUSUNLRVJfUEFHRV9HRU5FUklD",
            "IjwKJENNc2dTdGlja2VyYm9va1RlYW1QYWdlT3JkZXJTZXF1ZW5jZRIUCgxw",
            "YWdlX251bWJlcnMYASADKA0imgEKD0NNc2dTdGlja2VyYm9vaxIjCgVwYWdl",
            "cxgBIAMoCzIULkNNc2dTdGlja2VyYm9va1BhZ2USRwoYdGVhbV9wYWdlX29y",
            "ZGVyX3NlcXVlbmNlGAIgASgLMiUuQ01zZ1N0aWNrZXJib29rVGVhbVBhZ2VP",
            "cmRlclNlcXVlbmNlEhkKEWZhdm9yaXRlX3BhZ2VfbnVtGAMgASgNImAKD0NN",
            "c2dTdGlja2VySGVybxIPCgdoZXJvX2lkGAEgASgFEhMKC2l0ZW1fZGVmX2lk",
            "GAIgASgNEg8KB3F1YWxpdHkYAyABKA0SFgoOc291cmNlX2l0ZW1faWQYBCAB",
            "KAQiNQoRQ01zZ1N0aWNrZXJIZXJvZXMSIAoGaGVyb2VzGAEgAygLMhAuQ01z",
            "Z1N0aWNrZXJIZXJvIlkKEUNNc2dIZXJvUm9sZVN0YXRzEhwKFGxhbmVfc2Vs",
            "ZWN0aW9uX2ZsYWdzGAEgASgNEhMKC21hdGNoX2NvdW50GAIgASgNEhEKCXdp",
            "bl9jb3VudBgDIAEoDSJQChVDTXNnSGVyb1JvbGVIZXJvU3RhdHMSDwoHaGVy",
            "b19pZBgBIAEoBRImCgpyb2xlX3N0YXRzGAIgAygLMhIuQ01zZ0hlcm9Sb2xl",
            "U3RhdHMiVgoVQ01zZ0hlcm9Sb2xlUmFua1N0YXRzEhEKCXJhbmtfdGllchgB",
            "IAEoDRIqCgpoZXJvX3N0YXRzGAIgAygLMhYuQ01zZ0hlcm9Sb2xlSGVyb1N0",
            "YXRzIncKGUNNc2dIZXJvUm9sZUFsbFJhbmtzU3RhdHMSFwoPc3RhcnRfdGlt",
            "ZXN0YW1wGAEgASgNEhUKDWVuZF90aW1lc3RhbXAYAiABKA0SKgoKcmFua19z",
            "dGF0cxgDIAMoCzIWLkNNc2dIZXJvUm9sZVJhbmtTdGF0cyKTAgoUQ01zZ01h",
            "cFN0YXRzU25hcHNob3QSEQoJdGltZXN0YW1wGAEgASgNEhYKDmxvdHVzZXNf",
            "Z2FpbmVkGAIgASgEEhsKE3dpc2RvbV9ydW5lc19nYWluZWQYAyABKAQSGAoQ",
            "cm9zaGFuX2tpbGxzX2RheRgEIAEoBBIaChJyb3NoYW5fa2lsbHNfbmlnaHQY",
            "BSABKAQSFAoMcG9ydGFsc191c2VkGAYgASgEEhYKDndhdGNoZXJzX3Rha2Vu",
            "GAcgASgEEhcKD3Rvcm1lbnRvcl9raWxscxgIIAEoBBIZChFvdXRwb3N0c19j",
            "YXB0dXJlZBgJIAEoBBIbChNzaGllbGRfcnVuZXNfZ2FpbmVkGAogASgEIpQB",
            "ChJDTXNnR2xvYmFsTWFwU3RhdHMSJgoHY3VycmVudBgBIAEoCzIVLkNNc2dN",
            "YXBTdGF0c1NuYXBzaG90EisKDHdpbmRvd19zdGFydBgCIAEoCzIVLkNNc2dN",
            "YXBTdGF0c1NuYXBzaG90EikKCndpbmRvd19lbmQYAyABKAsyFS5DTXNnTWFw",
            "U3RhdHNTbmFwc2hvdCJGCg9DTXNnVHJhY2tlZFN0YXQSFwoPdHJhY2tlZF9z",
            "dGF0X2lkGAEgASgNEhoKEnRyYWNrZWRfc3RhdF92YWx1ZRgCIAEoBSLXBwog",
            "Q01zZ0RPVEFDbGFpbUV2ZW50QWN0aW9uUmVzcG9uc2USRQoGcmVzdWx0GAEg",
            "ASgOMiwuQ01zZ0RPVEFDbGFpbUV2ZW50QWN0aW9uUmVzcG9uc2UuUmVzdWx0",
            "Q29kZToHU3VjY2VzcxJLCg5yZXdhcmRfcmVzdWx0cxgCIAMoCzIzLkNNc2dE",
            "T1RBQ2xhaW1FdmVudEFjdGlvblJlc3BvbnNlLkdyYW50ZWRSZXdhcmREYXRh",
            "EhEKCWFjdGlvbl9pZBgDIAEoDRpAChVNeXN0ZXJ5SXRlbVJld2FyZERhdGES",
            "EAoIaXRlbV9kZWYYASABKA0SFQoNaXRlbV9jYXRlZ29yeRgCIAEoDRomChJM",
            "b290TGlzdFJld2FyZERhdGESEAoIaXRlbV9kZWYYASADKA0aRQoUQWN0aW9u",
            "TGlzdFJld2FyZERhdGESEQoJYWN0aW9uX2lkGAEgASgNEhoKEnJlc3VsdF9y",
            "ZXdhcmRfZGF0YRgCIAEoDBqsAQoYT3ZlcndvcmxkVG9rZW5SZXdhcmREYXRh",
            "ElgKBnRva2VucxgBIAMoCzJILkNNc2dET1RBQ2xhaW1FdmVudEFjdGlvblJl",
            "c3BvbnNlLk92ZXJ3b3JsZFRva2VuUmV3YXJkRGF0YS5Ub2tlblF1YW50aXR5",
            "GjYKDVRva2VuUXVhbnRpdHkSEAoIdG9rZW5faWQYASABKA0SEwoLdG9rZW5f",
            "Y291bnQYAiABKA0aewoRR3JhbnRlZFJld2FyZERhdGESEwoLZ3JhbnRfaW5k",
            "ZXgYASABKA0SEwoLc2NvcmVfaW5kZXgYAiABKA0SFAoMcmV3YXJkX2luZGV4",
            "GAMgASgNEhMKC3Jld2FyZF9kYXRhGAQgASgMEhEKCWFjdGlvbl9pZBgFIAEo",
            "DSKuAgoKUmVzdWx0Q29kZRILCgdTdWNjZXNzEAASEAoMSW52YWxpZEV2ZW50",
            "EAESEgoORXZlbnROb3RBY3RpdmUQAhIRCg1JbnZhbGlkQWN0aW9uEAMSDwoL",
            "U2VydmVyRXJyb3IQBBIWChJJbnN1ZmZpY2llbnRQb2ludHMQBRIUChBJbnN1",
            "ZmZpY2VudExldmVsEAYSEgoOQWxyZWFkeUNsYWltZWQQBxISCg5TRE9Mb2Nr",
            "RmFpbHVyZRAIEhIKDlNET0xvYWRGYWlsdXJlEAkSEQoNRXZlbnROb3RPd25l",
            "ZBAKEgsKB1RpbWVvdXQQCxIcChhSZXF1aXJlc1BsdXNTdWJzY3JpcHRpb24Q",
            "DBIPCgtJbnZhbGlkSXRlbRANEhAKDEFzeW5jUmV3YXJkcxAOIlsKHkNNc2dD",
            "bGllbnRUb0dDRG90YUxhYnNGZWVkYmFjaxIQCghsYW5ndWFnZRgBIAEoDRIV",
            "Cg1mZWVkYmFja19pdGVtGAIgASgNEhAKCGZlZWRiYWNrGAMgASgJIosCCiZD",
            "TXNnQ2xpZW50VG9HQ0RvdGFMYWJzRmVlZGJhY2tSZXNwb25zZRJVCghyZXNw",
            "b25zZRgBIAEoDjIxLkNNc2dDbGllbnRUb0dDRG90YUxhYnNGZWVkYmFja1Jl",
            "c3BvbnNlLkVSZXNwb25zZToQa19lSW50ZXJuYWxFcnJvciKJAQoJRVJlc3Bv",
            "bnNlEhQKEGtfZUludGVybmFsRXJyb3IQABIOCgprX2VTdWNjZXNzEAESDgoK",
            "a19lVG9vQnVzeRACEg8KC2tfZURpc2FibGVkEAMSDgoKa19lVGltZW91dBAE",
            "EhEKDWtfZU5vdEFsbG93ZWQQBRISCg5rX2VJbnZhbGlkSXRlbRAGIocDChlD",
            "RG90YU1zZ19QcmVkaWN0aW9uUmVzdWx0EhIKCmFjY291bnRfaWQYASABKA0S",
            "EAoIbWF0Y2hfaWQYAiABKAQSDwoHY29ycmVjdBgDIAEoCBI6CgtwcmVkaWN0",
            "aW9ucxgEIAMoCzIlLkNEb3RhTXNnX1ByZWRpY3Rpb25SZXN1bHQuUHJlZGlj",
            "dGlvbhr2AQoKUHJlZGljdGlvbhIQCghpdGVtX2RlZhgBIAEoDRITCgtudW1f",
            "Y29ycmVjdBgCIAEoDRIRCgludW1fZmFpbHMYAyABKA0SVAoGcmVzdWx0GAQg",
            "ASgOMi0uQ0RvdGFNc2dfUHJlZGljdGlvblJlc3VsdC5QcmVkaWN0aW9uLkVS",
            "ZXN1bHQ6FWtfZVJlc3VsdF9JdGVtR3JhbnRlZBIZChFncmFudGVkX2l0ZW1f",
            "ZGVmcxgGIAMoDSI9CgdFUmVzdWx0EhkKFWtfZVJlc3VsdF9JdGVtR3JhbnRl",
            "ZBABEhcKE2tfZVJlc3VsdF9EZXN0cm95ZWQQAiLiFwojQ0RvdGFNc2dTdHJ1",
            "Y3R1cmVkVG9vbHRpcFByb3BlcnRpZXMSHgoWYWJpbGl0eV9uYW1lX2xvY190",
            "b2tlbhgBIAEoCRIiChphYmlsaXR5X2NhdGVnb3J5X2xvY190b2tlbhgCIAEo",
            "CRIVCg1hYmlsaXR5X2xldmVsGAMgASgFEhkKEWN1cnJlbnRfbWFuYV9jb3N0",
            "GAQgASgFEhsKE2N1cnJlbnRfaGVhbHRoX2Nvc3QYBSABKAUSGAoQY3VycmVu",
            "dF9jb29sZG93bhgGIAEoAhIlCh1zdW1tYXJ5X2Rlc2NyaXB0aW9uX2xvY190",
            "b2tlbhgHIAEoCRIuCiZzdW1tYXJ5X2Rlc2NyaXB0aW9uX2xldmVsX3VwX2xv",
            "Y190b2tlbhgIIAEoCRJrCiBzdW1tYXJ5X2Rlc2NyaXB0aW9uX2VtYmVkX3Zh",
            "bHVlcxgJIAMoCzJBLkNEb3RhTXNnU3RydWN0dXJlZFRvb2x0aXBQcm9wZXJ0",
            "aWVzLlN1bW1hcnlEZXNjcmlwdGlvbkVtYmVkVmFsdWUSXgoZc3VtbWFyeV9k",
            "ZXNjcmlwdGlvbl9mYWNldBgKIAEoCzI7LkNEb3RhTXNnU3RydWN0dXJlZFRv",
            "b2x0aXBQcm9wZXJ0aWVzLkZhY2V0RGlzcGxheVByb3BlcnRpZXMSSAoGY2h1",
            "bmtzGBQgAygLMjguQ0RvdGFNc2dTdHJ1Y3R1cmVkVG9vbHRpcFByb3BlcnRp",
            "ZXMuVG9vbHRpcENvbnRlbnRDaHVuaxo9ChNBdHRyaWJ1dGVWYWx1ZVZhbHVl",
            "Eg0KBXZhbHVlGAEgASgCEhcKD2lzX2FjdGl2ZV92YWx1ZRgCIAEoCBpnChVB",
            "dHRyaWJ1dGVWYWx1ZV9TaW5nbGUSTgoMc2luZ2xlX3ZhbHVlGAEgASgLMjgu",
            "Q0RvdGFNc2dTdHJ1Y3R1cmVkVG9vbHRpcFByb3BlcnRpZXMuQXR0cmlidXRl",
            "VmFsdWVWYWx1ZRpjChdBdHRyaWJ1dGVWYWx1ZV9WYXJpYWJsZRJICgZ2YWx1",
            "ZXMYASADKAsyOC5DRG90YU1zZ1N0cnVjdHVyZWRUb29sdGlwUHJvcGVydGll",
            "cy5BdHRyaWJ1dGVWYWx1ZVZhbHVlGqYBChRBdHRyaWJ1dGVWYWx1ZV9EZWx0",
            "YRJGCgRwcmV2GAEgASgLMjguQ0RvdGFNc2dTdHJ1Y3R1cmVkVG9vbHRpcFBy",
            "b3BlcnRpZXMuQXR0cmlidXRlVmFsdWVWYWx1ZRJGCgRuZXh0GAIgASgLMjgu",
            "Q0RvdGFNc2dTdHJ1Y3R1cmVkVG9vbHRpcFByb3BlcnRpZXMuQXR0cmlidXRl",
            "VmFsdWVWYWx1ZRqKAgoOQXR0cmlidXRlVmFsdWUSTAoGc2luZ2xlGAEgASgL",
            "MjouQ0RvdGFNc2dTdHJ1Y3R1cmVkVG9vbHRpcFByb3BlcnRpZXMuQXR0cmli",
            "dXRlVmFsdWVfU2luZ2xlSAASUAoIdmFyaWFibGUYAiABKAsyPC5DRG90YU1z",
            "Z1N0cnVjdHVyZWRUb29sdGlwUHJvcGVydGllcy5BdHRyaWJ1dGVWYWx1ZV9W",
            "YXJpYWJsZUgAEkoKBWRlbHRhGAMgASgLMjkuQ0RvdGFNc2dTdHJ1Y3R1cmVk",
            "VG9vbHRpcFByb3BlcnRpZXMuQXR0cmlidXRlVmFsdWVfRGVsdGFIAEIMCgph",
            "dHRyX3ZhbHVlGrYBChZGYWNldERpc3BsYXlQcm9wZXJ0aWVzEhwKFGZhY2V0",
            "X25hbWVfbG9jX3Rva2VuGAEgASgJEhwKFGZhY2V0X2Rlc2NfbG9jX3Rva2Vu",
            "GAIgASgJEh0KFWZhY2V0X2ljb25fc3R5bGVfbmFtZRgDIAEoCRIeChZmYWNl",
            "dF9jb2xvcl9zdHlsZV9uYW1lGAQgASgJEiEKGWZhY2V0X2dyYWRpZW50X3N0",
            "eWxlX25hbWUYBSABKAkagAIKCUF0dHJpYnV0ZRIWCg5uYW1lX2xvY190b2tl",
            "bhgBIAEoCRJLCgR0eXBlGAIgASgOMjMuQ0RvdGFNc2dTdHJ1Y3R1cmVkVG9v",
            "bHRpcFByb3BlcnRpZXMuRUF0dHJpYnV0ZVR5cGU6CGtVbmtub3duEkIKBXZh",
            "bHVlGAMgASgLMjMuQ0RvdGFNc2dTdHJ1Y3R1cmVkVG9vbHRpcFByb3BlcnRp",
            "ZXMuQXR0cmlidXRlVmFsdWUSSgoFZmFjZXQYBCABKAsyOy5DRG90YU1zZ1N0",
            "cnVjdHVyZWRUb29sdGlwUHJvcGVydGllcy5GYWNldERpc3BsYXlQcm9wZXJ0",
            "aWVzGhoKGEF0dHJpYnV0ZUdyb3VwRGVzY19CYXNpYxpOChtBdHRyaWJ1dGVH",
            "cm91cERlc2NfU3BlY2lmaWMSFwoPdGl0bGVfbG9jX3Rva2VuGAEgASgJEhYK",
            "DmRlc2NfbG9jX3Rva2VuGAIgASgJGmYKGEF0dHJpYnV0ZUdyb3VwRGVzY19G",
            "YWNldBJKCgVmYWNldBgBIAEoCzI7LkNEb3RhTXNnU3RydWN0dXJlZFRvb2x0",
            "aXBQcm9wZXJ0aWVzLkZhY2V0RGlzcGxheVByb3BlcnRpZXMapAIKGUF0dHJp",
            "YnV0ZUdyb3VwRGVzY3JpcHRpb24STgoFYmFzaWMYASABKAsyPS5DRG90YU1z",
            "Z1N0cnVjdHVyZWRUb29sdGlwUHJvcGVydGllcy5BdHRyaWJ1dGVHcm91cERl",
            "c2NfQmFzaWNIABJUCghzcGVjaWZpYxgCIAEoCzJALkNEb3RhTXNnU3RydWN0",
            "dXJlZFRvb2x0aXBQcm9wZXJ0aWVzLkF0dHJpYnV0ZUdyb3VwRGVzY19TcGVj",
            "aWZpY0gAEk4KBWZhY2V0GAMgASgLMj0uQ0RvdGFNc2dTdHJ1Y3R1cmVkVG9v",
            "bHRpcFByb3BlcnRpZXMuQXR0cmlidXRlR3JvdXBEZXNjX0ZhY2V0SABCEQoP",
            "YXR0cl9ncm91cF9kZXNjGqIBCg5BdHRyaWJ1dGVHcm91cBJMCgRkZXNjGAEg",
            "ASgLMj4uQ0RvdGFNc2dTdHJ1Y3R1cmVkVG9vbHRpcFByb3BlcnRpZXMuQXR0",
            "cmlidXRlR3JvdXBEZXNjcmlwdGlvbhJCCgphdHRyaWJ1dGVzGAIgAygLMi4u",
            "Q0RvdGFNc2dTdHJ1Y3R1cmVkVG9vbHRpcFByb3BlcnRpZXMuQXR0cmlidXRl",
            "GmIKG0NvbnRlbnRDaHVua19BdHRyaWJ1dGVHcm91cBJDCgZncm91cHMYASAD",
            "KAsyMy5DRG90YU1zZ1N0cnVjdHVyZWRUb29sdGlwUHJvcGVydGllcy5BdHRy",
            "aWJ1dGVHcm91cBqDAQoTVG9vbHRpcENvbnRlbnRDaHVuaxJbCg9hdHRyaWJ1",
            "dGVfZ3JvdXAYASABKAsyQC5DRG90YU1zZ1N0cnVjdHVyZWRUb29sdGlwUHJv",
            "cGVydGllcy5Db250ZW50Q2h1bmtfQXR0cmlidXRlR3JvdXBIAEIPCg1jb250",
            "ZW50X2NodW5rGr0BChxTdW1tYXJ5RGVzY3JpcHRpb25FbWJlZFZhbHVlEgwK",
            "BG5hbWUYASABKAkSSwoEdHlwZRgCIAEoDjIzLkNEb3RhTXNnU3RydWN0dXJl",
            "ZFRvb2x0aXBQcm9wZXJ0aWVzLkVBdHRyaWJ1dGVUeXBlOghrVW5rbm93bhJC",
            "CgV2YWx1ZRgDIAEoCzIzLkNEb3RhTXNnU3RydWN0dXJlZFRvb2x0aXBQcm9w",
            "ZXJ0aWVzLkF0dHJpYnV0ZVZhbHVlItYBCg5FQXR0cmlidXRlVHlwZRIMCghr",
            "VW5rbm93bhAAEg0KCWtEdXJhdGlvbhABEg0KCWtNYW5hQ29zdBACEg8KC2tI",
            "ZWFsdGhDb3N0EAMSDgoKa0Nhc3RSYW5nZRAEEhcKE2tBcmVhT2ZFZmZlY3RS",
            "YWRpdXMQBRITCg9rUGh5c2ljYWxEYW1hZ2UQBhISCg5rTWFnaWNhbERhbWFn",
            "ZRAHEg8KC2tQdXJlRGFtYWdlEAgSDQoJa0Nvb2xkb3duEAkSFQoRa0RlYnVm",
            "ZlBlcmNlbnRhZ2UQCipVChFFU3BlY2lhbFBpbmdWYWx1ZRIfChprX0VTcGVj",
            "aWFsUGluZ1ZhbHVlX05vRGF0YRD+fxIfChprX0VTcGVjaWFsUGluZ1ZhbHVl",
            "X0ZhaWxlZBD/fyqGBQoSRURPVEFHQ1Nlc3Npb25OZWVkEiAKHGtfRURPVEFH",
            "Q1Nlc3Npb25OZWVkX1Vua25vd24QABIsCihrX0VET1RBR0NTZXNzaW9uTmVl",
            "ZF9Vc2VyTm9TZXNzaW9uTmVlZGVkEGQSKQola19FRE9UQUdDU2Vzc2lvbk5l",
            "ZWRfVXNlckluT25saW5lR2FtZRBlEigKJGtfRURPVEFHQ1Nlc3Npb25OZWVk",
            "X1VzZXJJbkxvY2FsR2FtZRBmEi0KKWtfRURPVEFHQ1Nlc3Npb25OZWVkX1Vz",
            "ZXJJblVJV2FzQ29ubmVjdGVkEGcSLwora19FRE9UQUdDU2Vzc2lvbk5lZWRf",
            "VXNlckluVUlOZXZlckNvbm5lY3RlZBBoEiYKImtfRURPVEFHQ1Nlc3Npb25O",
            "ZWVkX1VzZXJUdXRvcmlhbHMQaRIxCi1rX0VET1RBR0NTZXNzaW9uTmVlZF9V",
            "c2VySW5VSVdhc0Nvbm5lY3RlZElkbGUQahIzCi9rX0VET1RBR0NTZXNzaW9u",
            "TmVlZF9Vc2VySW5VSU5ldmVyQ29ubmVjdGVkSWRsZRBrEioKJWtfRURPVEFH",
            "Q1Nlc3Npb25OZWVkX0dhbWVTZXJ2ZXJPbmxpbmUQyAESKQoka19FRE9UQUdD",
            "U2Vzc2lvbk5lZWRfR2FtZVNlcnZlckxvY2FsEMkBEigKI2tfRURPVEFHQ1Nl",
            "c3Npb25OZWVkX0dhbWVTZXJ2ZXJJZGxlEMoBEikKJGtfRURPVEFHQ1Nlc3Np",
            "b25OZWVkX0dhbWVTZXJ2ZXJSZWxheRDLARIvCiprX0VET1RBR0NTZXNzaW9u",
            "TmVlZF9HYW1lU2VydmVyTG9jYWxVcGxvYWQQzAEqhgIKHkVET1RBTWF0Y2hQ",
            "bGF5ZXJUaW1lQ3VzdG9tU3RhdBI6CjZrX0VET1RBX01hdGNoUGxheWVyVGlt",
            "ZUN1c3RvbVN0YXRfSFBSZWdlblVuZGVyVDFUb3dlcnMQARJPCktrX0VET1RB",
            "X01hdGNoUGxheWVyVGltZUN1c3RvbVN0YXRfTWFnaWNEYW1hZ2VSZWR1Y2Vk",
            "V2l0aE5ld0Zvcm11bGFfQWJzb2x1dGUQAhJXClNrX0VET1RBX01hdGNoUGxh",
            "eWVyVGltZUN1c3RvbVN0YXRfTWFnaWNEYW1hZ2VSZWR1Y2VkV2l0aE5ld0Zv",
            "cm11bGFfUGVyY2VudE9mVG90YWxIUBADKvYBChVET1RBX1RvdXJuYW1lbnRF",
            "dmVudHMSEgoOVEVfRklSU1RfQkxPT0QQABIPCgtURV9HQU1FX0VORBABEhEK",
            "DVRFX01VTFRJX0tJTEwQAhIQCgxURV9IRVJPX0RFTlkQAxIRCg1URV9BRUdJ",
            "U19ERU5ZEAQSEwoPVEVfQUVHSVNfU1RPTEVOEAUSDgoKVEVfR09ETElLRRAG",
            "EhMKD1RFX0NPVVJJRVJfS0lMTBAHEg8KC1RFX0VDSE9TTEFNEAgSDQoJVEVf",
            "UkFQSUVSEAkSEwoPVEVfRUFSTFlfUk9TSEFOEAoSEQoNVEVfQkxBQ0tfSE9M",
            "RRALKo0DChdFQnJvYWRjYXN0VGltZWxpbmVFdmVudBIoCiRFQnJvYWRjYXN0",
            "VGltZWxpbmVFdmVudF9NYXRjaFN0YXJ0ZWQQARIsCihFQnJvYWRjYXN0VGlt",
            "ZWxpbmVFdmVudF9HYW1lU3RhdGVDaGFuZ2VkEAISJgoiRUJyb2FkY2FzdFRp",
            "bWVsaW5lRXZlbnRfVG93ZXJEZWF0aBADEikKJUVCcm9hZGNhc3RUaW1lbGlu",
            "ZUV2ZW50X0JhcnJhY2tzRGVhdGgQBBIoCiRFQnJvYWRjYXN0VGltZWxpbmVF",
            "dmVudF9BbmNpZW50RGVhdGgQBRInCiNFQnJvYWRjYXN0VGltZWxpbmVFdmVu",
            "dF9Sb3NoYW5EZWF0aBAGEiUKIUVCcm9hZGNhc3RUaW1lbGluZUV2ZW50X0hl",
            "cm9EZWF0aBAHEiUKIUVCcm9hZGNhc3RUaW1lbGluZUV2ZW50X1RlYW1GaWdo",
            "dBAIEiYKIkVCcm9hZGNhc3RUaW1lbGluZUV2ZW50X0ZpcnN0Qmxvb2QQCSqY",
            "AQoZRUN1c3RvbUdhbWVXaGl0ZWxpc3RTdGF0ZRInCiNDVVNUT01fR0FNRV9X",
            "SElURUxJU1RfU1RBVEVfVU5LTk9XThAAEigKJENVU1RPTV9HQU1FX1dISVRF",
            "TElTVF9TVEFURV9BUFBST1ZFRBABEigKJENVU1RPTV9HQU1FX1dISVRFTElT",
            "VF9TVEFURV9SRUpFQ1RFRBACKpoHChtFRE9UQVRyaXZpYVF1ZXN0aW9uQ2F0",
            "ZWdvcnkSLQopa19FRE9UQVRyaXZpYVF1ZXN0aW9uQ2F0ZWdvcnlfQWJpbGl0",
            "eUljb24QABIxCi1rX0VET1RBVHJpdmlhUXVlc3Rpb25DYXRlZ29yeV9BYmls",
            "aXR5Q29vbGRvd24QARIwCixrX0VET1RBVHJpdmlhUXVlc3Rpb25DYXRlZ29y",
            "eV9IZXJvQXR0cmlidXRlcxACEjMKL2tfRURPVEFUcml2aWFRdWVzdGlvbkNh",
            "dGVnb3J5X0hlcm9Nb3ZlbWVudFNwZWVkEAMSLAooa19FRE9UQVRyaXZpYVF1",
            "ZXN0aW9uQ2F0ZWdvcnlfVGFsZW50VHJlZRAEEisKJ2tfRURPVEFUcml2aWFR",
            "dWVzdGlvbkNhdGVnb3J5X0hlcm9TdGF0cxAFEisKJ2tfRURPVEFUcml2aWFR",
            "dWVzdGlvbkNhdGVnb3J5X0l0ZW1QcmljZRAGEi4KKmtfRURPVEFUcml2aWFR",
            "dWVzdGlvbkNhdGVnb3J5X0FiaWxpdHlTb3VuZBAHEi8KK2tfRURPVEFUcml2",
            "aWFRdWVzdGlvbkNhdGVnb3J5X0ludm9rZXJTcGVsbHMQCBIxCi1rX0VET1RB",
            "VHJpdmlhUXVlc3Rpb25DYXRlZ29yeV9BYmlsaXR5TWFuYUNvc3QQCRIxCi1r",
            "X0VET1RBVHJpdmlhUXVlc3Rpb25DYXRlZ29yeV9IZXJvQXR0YWNrU291bmQQ",
            "ChItCilrX0VET1RBVHJpdmlhUXVlc3Rpb25DYXRlZ29yeV9BYmlsaXR5TmFt",
            "ZRALEjAKLGtfRURPVEFUcml2aWFRdWVzdGlvbkNhdGVnb3J5X0l0ZW1Db21w",
            "b25lbnRzEAwSKgoma19FRE9UQVRyaXZpYVF1ZXN0aW9uQ2F0ZWdvcnlfSXRl",
            "bUxvcmUQDRIuCiprX0VET1RBVHJpdmlhUXVlc3Rpb25DYXRlZ29yeV9JdGVt",
            "UGFzc2l2ZXMQDhI2CjJrX0VET1RBVHJpdmlhUXVlc3Rpb25DYXRlZ29yeV9T",
            "VEFUSUNfUVVFU1RJT05TX0VORBAPEjkKNWtfRURPVEFUcml2aWFRdWVzdGlv",
            "bkNhdGVnb3J5X0RZTkFNSUNfUVVFU1RJT05TX1NUQVJUEGMSMwova19FRE9U",
            "QVRyaXZpYVF1ZXN0aW9uQ2F0ZWdvcnlfRHluYW1pY19JdGVtQnVpbGQQZCqp",
            "AQoURU92ZXJ3YXRjaENvbnZpY3Rpb24SHwoba19FT3ZlcndhdGNoQ29udmlj",
            "dGlvbl9Ob25lEAASJAoga19FT3ZlcndhdGNoQ29udmljdGlvbl9Ob3RHdWls",
            "dHkQARInCiNrX0VPdmVyd2F0Y2hDb252aWN0aW9uX0d1aWx0VW5jbGVhchAC",
            "EiEKHWtfRU92ZXJ3YXRjaENvbnZpY3Rpb25fR3VpbHR5EAMqdAoQRUhlcm9S",
            "ZWxpY1Jhcml0eRImChlIRVJPX1JFTElDX1JBUklUWV9JTlZBTElEEP//////",
            "/////wESHAoYSEVST19SRUxJQ19SQVJJVFlfQ09NTU9OEAASGgoWSEVST19S",
            "RUxJQ19SQVJJVFlfUkFSRRABKtEBChdFU3RpY2tlcmJvb2tBdWRpdEFjdGlv",
            "bhIhCh1TVElDS0VSQk9PS19BVURJVF9DUkVBVEVfUEFHRRAAEiEKHVNUSUNL",
            "RVJCT09LX0FVRElUX0RFTEVURV9QQUdFEAESJAogU1RJQ0tFUkJPT0tfQVVE",
            "SVRfU1RJQ0tfU1RJQ0tFUlMQAhImCiJTVElDS0VSQk9PS19BVURJVF9SRVBM",
            "QUNFX1NUSUNLRVJTEAMSIgoeU1RJQ0tFUkJPT0tfQVVESVRfSEVST19TVElD",
            "S0VSEAQqYAoURVN0aWNrZXJib29rUGFnZVR5cGUSGAoUU1RJQ0tFUl9QQUdF",
            "X0dFTkVSSUMQABIVChFTVElDS0VSX1BBR0VfVEVBTRABEhcKE1NUSUNLRVJf",
            "UEFHRV9UQUxFTlQQAiq7BAoYRU5ld0Jsb29tR2lmdGluZ1Jlc3BvbnNlEh0K",
            "GWtFTmV3Qmxvb21HaWZ0aW5nX1N1Y2Nlc3MQABIkCiBrRU5ld0Jsb29tR2lm",
            "dGluZ19Vbmtub3duRmFpbHVyZRABEiYKImtFTmV3Qmxvb21HaWZ0aW5nX01h",
            "bGZvcm1lZFJlcXVlc3QQAhIlCiFrRU5ld0Jsb29tR2lmdGluZ19GZWF0dXJl",
            "RGlzYWJsZWQQAxIiCh5rRU5ld0Jsb29tR2lmdGluZ19JdGVtTm90Rm91bmQQ",
            "BBIxCi1rRU5ld0Jsb29tR2lmdGluZ19QbGF5ZXJOb3RBbGxvd2VkVG9HaXZl",
            "R2lmdHMQBRI0CjBrRU5ld0Jsb29tR2lmdGluZ19UYXJnZXROb3RBbGxvd2Vk",
            "VG9SZWNlaXZlR2lmdHMQBhIpCiVrRU5ld0Jsb29tR2lmdGluZ19TZXJ2ZXJO",
            "b3RBdXRob3JpemVkEGQSJgoia0VOZXdCbG9vbUdpZnRpbmdfUGxheWVyTm90",
            "SW5Mb2JieRBlEiYKImtFTmV3Qmxvb21HaWZ0aW5nX1RhcmdldE5vdEluTG9i",
            "YnkQZhImCiJrRU5ld0Jsb29tR2lmdGluZ19Mb2JieU5vdEVsaWdpYmxlEGcS",
            "Jgoha0VOZXdCbG9vbUdpZnRpbmdfVGFyZ2V0Tm90RnJpZW5kEMgBEjMKLmtF",
            "TmV3Qmxvb21HaWZ0aW5nX1RhcmdldEZyaWVuZER1cmF0aW9uVG9vU2hvcnQQ",
            "yQFCFaoCElN0ZWFtLlByb3Rvcy5Eb3RhMg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Steam.Protos.Dota2.SteammessagesReflection.Descriptor, global::Steam.Protos.Dota2.GcsdkGcmessagesReflection.Descriptor, global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Steam.Protos.Dota2.ESpecialPingValue), typeof(global::Steam.Protos.Dota2.EDOTAGCSessionNeed), typeof(global::Steam.Protos.Dota2.EDOTAMatchPlayerTimeCustomStat), typeof(global::Steam.Protos.Dota2.DOTA_TournamentEvents), typeof(global::Steam.Protos.Dota2.EBroadcastTimelineEvent), typeof(global::Steam.Protos.Dota2.ECustomGameWhitelistState), typeof(global::Steam.Protos.Dota2.EDOTATriviaQuestionCategory), typeof(global::Steam.Protos.Dota2.EOverwatchConviction), typeof(global::Steam.Protos.Dota2.EHeroRelicRarity), typeof(global::Steam.Protos.Dota2.EStickerbookAuditAction), typeof(global::Steam.Protos.Dota2.EStickerbookPageType), typeof(global::Steam.Protos.Dota2.ENewBloomGiftingResponse), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAGameAccountClient), global::Steam.Protos.Dota2.CSODOTAGameAccountClient.Parser, new[]{ "AccountId", "Wins", "Losses", "Xp", "Level", "InitialSkill", "LeaverCount", "SecondaryLeaverCount", "LowPriorityUntilDate", "PreventTextChatUntilDate", "PreventVoiceUntilDate", "PreventPublicTextChatUntilDate", "PreventNewPlayerChatUntilDate", "LastAbandonedGameDate", "LastSecondaryAbandonedGameDate", "LeaverPenaltyCount", "CompletedGameStreak", "AccountDisabledUntilDate", "AccountDisabledCount", "MatchDisabledUntilDate", "MatchDisabledCount", "Shutdownlawterminatetimestamp", "LowPriorityGamesRemaining", "RecruitmentLevel", "HasNewNotifications", "IsLeagueAdmin", "CasualGamesPlayed", "SoloCompetitiveGamesPlayed", "PartyCompetitiveGamesPlayed", "Casual1V1GamesPlayed", "CurrAllHeroChallengeId", "PlayTimePoints", "AccountFlags", "PlayTimeLevel", "PlayerBehaviorSeqNumLastReport", "PlayerBehaviorScoreLastReport", "PlayerBehaviorReportOldData", "TourneySkillLevel", "TourneyRecentParticipationDate", "AnchoredPhoneNumberId", "RankedMatchmakingBanUntilDate", "RecentGameTime1", "RecentGameTime2", "RecentGameTime3", "FavoriteTeamPacked", "RecentReportTime", "CustomGameDisabledUntilDate", "RecentWinTime1", "RecentWinTime2", "RecentWinTime3", "CoachRating", "QueuePoints", "RoleHandicaps", "EventModeRecentTime", "MmrRecalibrationTime", "BannedHeroIds" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAGameAccountClient.Types.RoleHandicap), global::Steam.Protos.Dota2.CSODOTAGameAccountClient.Types.RoleHandicap.Parser, new[]{ "Role", "Handicap" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAGameAccountPlus), global::Steam.Protos.Dota2.CSODOTAGameAccountPlus.Parser, new[]{ "AccountId", "OriginalStartDate", "PlusFlags", "PlusStatus", "PrepaidTimeStart", "PrepaidTimeBalance", "NextPaymentDate", "SteamAgreementId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAChatWheel), global::Steam.Protos.Dota2.CSODOTAChatWheel.Parser, new[]{ "MessageId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyFeaturedGamemodeProgress), global::Steam.Protos.Dota2.CMsgLobbyFeaturedGamemodeProgress.Parser, new[]{ "Accounts" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyFeaturedGamemodeProgress.Types.AccountProgress), global::Steam.Protos.Dota2.CMsgLobbyFeaturedGamemodeProgress.Types.AccountProgress.Parser, new[]{ "AccountId", "CurrentValue", "MaxValue" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgBattleCupVictory), global::Steam.Protos.Dota2.CMsgBattleCupVictory.Parser, new[]{ "AccountId", "WinDate", "ValidUntil", "SkillLevel", "TournamentId", "DivisionId", "TeamId", "Streak", "TrophyId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyBattleCupVictoryList), global::Steam.Protos.Dota2.CMsgLobbyBattleCupVictoryList.Parser, new[]{ "Winners" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTABroadcastNotification), global::Steam.Protos.Dota2.CMsgDOTABroadcastNotification.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CProtoItemHeroStatue), global::Steam.Protos.Dota2.CProtoItemHeroStatue.Parser, new[]{ "HeroId", "StatusEffectIndex", "SequenceName", "Cycle", "Wearable", "Inscription", "Style", "TournamentDrop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade), global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade.Parser, new[]{ "Ability", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMatchPlayerTimedCustomStat), global::Steam.Protos.Dota2.CMatchPlayerTimedCustomStat.Parser, new[]{ "Stat", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMatchPlayerTimedStats), global::Steam.Protos.Dota2.CMatchPlayerTimedStats.Parser, new[]{ "Time", "Kills", "Deaths", "Assists", "NetWorth", "Xp", "LastHits", "Denies", "BountyRuneGold", "RangeCreepUpgradeGold", "ObserverWardsDewarded", "ReliableGoldEarned", "GoldLossPrevented", "HeroKillGold", "CreepKillGold", "BuildingGold", "OtherGold", "ComebackGold", "ExperimentalGold", "Experimental2Gold", "CreepDenyGold", "TpScrollsPurchased1", "TpScrollsPurchased2", "TpScrollsPurchased3", "TpScrollsPurchased4", "TpScrollsPurchased5", "NeutralGold", "CourierGold", "RoshanGold", "IncomeGold", "ItemValue", "SupportGoldSpent", "CampsStacked", "WardsPlaced", "TripleKills", "Rampages", "CustomStats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMatchTeamTimedStats), global::Steam.Protos.Dota2.CMatchTeamTimedStats.Parser, new[]{ "Time", "EnemyTowersKilled", "EnemyBarracksKilled", "EnemyTowersStatus", "EnemyBarracksStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory), global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory.Parser, new[]{ "UnitName", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff), global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff.Parser, new[]{ "PermanentBuff", "StackCount", "GrantTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMatchHeroSelectEvent), global::Steam.Protos.Dota2.CMatchHeroSelectEvent.Parser, new[]{ "IsPick", "Team", "HeroId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMatchClip), global::Steam.Protos.Dota2.CMatchClip.Parser, new[]{ "MatchId", "PlayerAccountId", "GameTimeSeconds", "DurationSeconds", "PlayerId", "HeroId", "AbilityId", "CameraMode", "Comment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CPartySearchClientParty), global::Steam.Protos.Dota2.CPartySearchClientParty.Parser, new[]{ "PartyId", "BeaconType", "PartyMembers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAHasItemQuery), global::Steam.Protos.Dota2.CMsgDOTAHasItemQuery.Parser, new[]{ "AccountId", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAHasItemResponse), global::Steam.Protos.Dota2.CMsgDOTAHasItemResponse.Parser, new[]{ "HasItem" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfo), global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfo.Parser, new[]{ "AccountId", "PlayerCardItemIds", "AllForEvent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfoResponse), global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfoResponse.Parser, new[]{ "PlayerCardInfos" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfoResponse.Types.PlayerCardInfo), global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfoResponse.Types.PlayerCardInfo.Parser, new[]{ "PlayerCardItemId", "AccountId", "PackedBonuses" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAMapLocationState), global::Steam.Protos.Dota2.CSODOTAMapLocationState.Parser, new[]{ "AccountId", "LocationId", "Completed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLeagueAdminList), global::Steam.Protos.Dota2.CMsgLeagueAdminList.Parser, new[]{ "AccountIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAProfileCard), global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Parser, new[]{ "AccountId", "Slots", "BadgePoints", "EventId", "RecentBattleCupVictory", "RankTier", "LeaderboardRank", "IsPlusSubscriber", "PlusOriginalStartDate", "RankTierScore", "LeaderboardRankCore", "Title", "FavoriteTeamPacked", "LifetimeGames", "EventLevel" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.EStatID) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot), global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Parser, new[]{ "SlotId", "Trophy", "Stat", "Item", "Hero", "Emoticon", "Team" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Trophy), global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Trophy.Parser, new[]{ "TrophyId", "TrophyScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Stat), global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Stat.Parser, new[]{ "StatId", "StatScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Item), global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Item.Parser, new[]{ "SerializedItem", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Hero), global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Hero.Parser, new[]{ "HeroId", "HeroWins", "HeroLosses" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Emoticon), global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Emoticon.Parser, new[]{ "EmoticonId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Team), global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Team.Parser, new[]{ "TeamId" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAPlayerChallenge), global::Steam.Protos.Dota2.CSODOTAPlayerChallenge.Parser, new[]{ "AccountId", "EventId", "SlotId", "IntParam0", "IntParam1", "CreatedTime", "Completed", "SequenceId", "ChallengeTier", "Flags", "Attempts", "CompleteLimit", "QuestRank", "MaxQuestRank", "InstanceId", "HeroId", "TemplateId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCRerollPlayerChallenge), global::Steam.Protos.Dota2.CMsgClientToGCRerollPlayerChallenge.Parser, new[]{ "EventId", "SequenceId", "HeroId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCRerollPlayerChallengeResponse), global::Steam.Protos.Dota2.CMsgGCRerollPlayerChallengeResponse.Parser, new[]{ "Result" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgGCRerollPlayerChallengeResponse.Types.EResult) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCTopCustomGamesList), global::Steam.Protos.Dota2.CMsgGCTopCustomGamesList.Parser, new[]{ "TopCustomGames", "GameOfTheDay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Parser, new[]{ "Match", "Teams", "Buildings", "GraphData", "DeltaFrame" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.TeamDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.TeamDetails.Parser, new[]{ "TeamNumber", "TeamId", "TeamName", "TeamLogo", "TeamTag", "Score", "NetWorth", "Players", "OnlyTeam", "Cheers", "TeamLogoUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails.Parser, new[]{ "ItemAbilityId", "Name", "Time", "Sold", "Stackcount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityDetails.Parser, new[]{ "Id", "Name", "Level", "Cooldown", "CooldownMax" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.HeroToHeroStats), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.HeroToHeroStats.Parser, new[]{ "Victimid", "Kills", "Assists" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityList), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityList.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PlayerDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PlayerDetails.Parser, new[]{ "Accountid", "Playerid", "Name", "Team", "Heroid", "Healthpoints", "Maxhealthpoints", "Healthregenrate", "Manapoints", "Maxmanapoints", "Manaregenrate", "BaseStrength", "BaseAgility", "BaseIntelligence", "BaseArmor", "BaseMovespeed", "BaseDamage", "Strength", "Agility", "Intelligence", "Armor", "Movespeed", "Damage", "HeroDamage", "TowerDamage", "Abilities", "Level", "KillCount", "DeathCount", "AssistsCount", "DeniesCount", "LhCount", "HeroHealing", "GoldPerMin", "XpPerMin", "NetGold", "Gold", "X", "Y", "RespawnTime", "UltimateCooldown", "HasBuyback", "Items", "Stashitems", "Itemshoppinglist", "Levelpoints", "HeroToHeroStats", "HasUltimate", "HasUltimateMana", "TeamSlot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BuildingDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BuildingDetails.Parser, new[]{ "Team", "Heading", "Lane", "Tier", "Type", "X", "Y", "Destroyed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.KillDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.KillDetails.Parser, new[]{ "PlayerId", "DeathTime", "KillerPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BroadcasterDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BroadcasterDetails.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails.Parser, new[]{ "Hero", "Team" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.MatchDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.MatchDetails.Parser, new[]{ "ServerSteamId", "MatchId", "Timestamp", "TimeOfDay", "IsNightstalkerNight", "GameTime", "GameState", "TeamidRadiant", "TeamidDire", "Picks", "Bans", "Kills", "Broadcasters", "GameMode", "LeagueId", "LeagueNodeId", "SingleTeam", "CheersPeak", "LobbyType", "StartTimestamp", "IsPlayerDraft" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Parser, new[]{ "GraphGold", "GraphXp", "GraphKill", "GraphTower", "GraphRax", "TeamLocStats" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.eStat), typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.eLocation) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.LocationStats), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.LocationStats.Parser, new[]{ "Stats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.TeamLocationStats), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.TeamLocationStats.Parser, new[]{ "LocStats" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Parser, new[]{ "Match", "Teams", "Buildings", "GraphData", "DeltaFrame" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.TeamDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.TeamDetails.Parser, new[]{ "TeamNumber", "TeamId", "TeamName", "TeamTag", "TeamLogo", "Score", "NetWorth", "TeamLogoUrl", "Players" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PlayerDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PlayerDetails.Parser, new[]{ "Accountid", "Playerid", "Name", "Team", "Heroid", "Level", "KillCount", "DeathCount", "AssistsCount", "DeniesCount", "LhCount", "Gold", "X", "Y", "NetWorth", "Abilities", "Items", "TeamSlot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.BuildingDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.BuildingDetails.Parser, new[]{ "Team", "Heading", "Type", "Lane", "Tier", "X", "Y", "Destroyed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails.Parser, new[]{ "Hero", "Team" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.MatchDetails), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.MatchDetails.Parser, new[]{ "ServerSteamId", "MatchId", "Timestamp", "GameTime", "SteamBroadcasterAccountIds", "GameMode", "LeagueId", "LeagueNodeId", "GameState", "Picks", "Bans", "LobbyType", "StartTimestamp", "IsPlayerDraft" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.GraphData), global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.GraphData.Parser, new[]{ "GraphGold" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTABroadcastTimelineEvent), global::Steam.Protos.Dota2.CMsgDOTABroadcastTimelineEvent.Parser, new[]{ "Event", "Timestamp", "Data", "StringData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToClientMatchGroupsVersion), global::Steam.Protos.Dota2.CMsgGCToClientMatchGroupsVersion.Parser, new[]{ "MatchgroupsVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTASDOHeroStatsHistory), global::Steam.Protos.Dota2.CMsgDOTASDOHeroStatsHistory.Parser, new[]{ "MatchId", "GameMode", "LobbyType", "StartTime", "Won", "Gpm", "Xpm", "Kills", "Deaths", "Assists" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPredictionChoice), global::Steam.Protos.Dota2.CMsgPredictionChoice.Parser, new[]{ "Value", "Name", "MinRawValue", "MaxRawValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgInGamePrediction), global::Steam.Protos.Dota2.CMsgInGamePrediction.Parser, new[]{ "Id", "Name", "Type", "Group", "Question", "Choices", "RequiredHeroes", "QueryName", "QueryValues", "AnswerResolutionType", "PointsToGrant", "RewardAction", "DebugForceSelection", "RawValueType" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERawValueType_t), typeof(global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EPredictionType), typeof(global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EResolutionType_t), typeof(global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERandomSelectionGroup_t) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.QueryKeyValues), global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.QueryKeyValues.Parser, new[]{ "Name", "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions), global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Parser, new[]{ "Predictions", "InGamePredictions", "InGamePredictionCountPerGame", "InGamePredictionVotingPeriodMinutes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction), global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Parser, new[]{ "Type", "Question", "Choices", "SelectionId", "StartDate", "LockDate", "Reward", "AnswerType", "AnswerId", "Answers", "QueryName", "LockOnSelectionId", "LockOnSelectionValue", "LockOnSelectionSet", "UseAnswerValueRanges", "Region", "Phases", "RewardEvent", "LeagueNodeId" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EPredictionType), typeof(global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EAnswerType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.Answers), global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.Answers.Parser, new[]{ "AnswerId" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAvailablePredictions), global::Steam.Protos.Dota2.CMsgAvailablePredictions.Parser, new[]{ "MatchPredictions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAvailablePredictions.Types.MatchPrediction), global::Steam.Protos.Dota2.CMsgAvailablePredictions.Types.MatchPrediction.Parser, new[]{ "MatchId", "Predictions" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLeagueWatchedGames), global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Parser, new[]{ "Leagues" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.Series), global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.Series.Parser, new[]{ "NodeId", "Game" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.League), global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.League.Parser, new[]{ "LeagueId", "Series" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatch), global::Steam.Protos.Dota2.CMsgDOTAMatch.Parser, new[]{ "Duration", "Starttime", "Players", "MatchId", "TowerStatus", "BarracksStatus", "Cluster", "FirstBloodTime", "ReplaySalt", "ServerIp", "ServerPort", "LobbyType", "HumanPlayers", "AverageSkill", "GameBalance", "RadiantTeamId", "DireTeamId", "Leagueid", "RadiantTeamName", "DireTeamName", "RadiantTeamLogo", "DireTeamLogo", "RadiantTeamLogoUrl", "DireTeamLogoUrl", "RadiantTeamComplete", "DireTeamComplete", "GameMode", "PicksBans", "MatchSeqNum", "ReplayState", "RadiantGuildId", "DireGuildId", "RadiantTeamTag", "DireTeamTag", "SeriesId", "SeriesType", "BroadcasterChannels", "Engine", "CustomGameData", "MatchFlags", "PrivateMetadataKey", "RadiantTeamScore", "DireTeamScore", "MatchOutcome", "TournamentId", "TournamentRound", "PreGameDuration", "Coaches" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.ReplayState) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player), global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Parser, new[]{ "AccountId", "PlayerSlot", "HeroId", "Item0", "Item1", "Item2", "Item3", "Item4", "Item5", "Item6", "Item7", "Item8", "Item9", "Item10", "Item10Lvl", "ExpectedTeamContribution", "ScaledMetric", "PreviousRank", "RankChange", "MmrType", "Kills", "Deaths", "Assists", "LeaverStatus", "Gold", "LastHits", "Denies", "GoldPerMin", "XpPerMin", "GoldSpent", "HeroDamage", "TowerDamage", "HeroHealing", "Level", "TimeLastSeen", "PlayerName", "SupportAbilityValue", "FeedingDetected", "SearchRank", "SearchRankUncertainty", "RankUncertaintyChange", "HeroPlayCount", "PartyId", "ScaledHeroDamage", "ScaledTowerDamage", "ScaledHeroHealing", "ScaledKills", "ScaledDeaths", "ScaledAssists", "ClaimedFarmGold", "SupportGold", "ClaimedDenies", "ClaimedMisses", "Misses", "AbilityUpgrades", "AdditionalUnitsInventory", "PermanentBuffs", "ProName", "RealName", "CustomGameData", "ActivePlusSubscription", "NetWorth", "BotDifficulty", "HeroPickOrder", "HeroWasRandomed", "HeroWasDotaPlusSuggestion", "HeroDamageReceived", "HeroDamageDealt", "SecondsDead", "GoldLostToDeath", "LaneSelectionFlags", "BountyRunes", "OutpostsCaptured", "TeamNumber", "TeamSlot", "SelectedFacet" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.CustomGameData), global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.CustomGameData.Parser, new[]{ "DotaTeam", "Winner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived), global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived.Parser, new[]{ "PreReduction", "PostReduction", "DamageType" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterInfo), global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterInfo.Parser, new[]{ "AccountId", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterChannel), global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterChannel.Parser, new[]{ "CountryCode", "Description", "BroadcasterInfos", "LanguageCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Coach), global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Coach.Parser, new[]{ "AccountId", "CoachName", "CoachRating", "CoachTeam", "CoachPartyId", "IsPrivateCoach" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.CustomGameData), global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.CustomGameData.Parser, new[]{ "CustomGameId", "MapName" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPlayerCard), global::Steam.Protos.Dota2.CMsgPlayerCard.Parser, new[]{ "AccountId", "StatModifier" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPlayerCard.Types.StatModifier), global::Steam.Protos.Dota2.CMsgPlayerCard.Types.StatModifier.Parser, new[]{ "Stat", "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats), global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats.Parser, new[]{ "PlayerAccountId", "MatchId", "MatchCompleted", "TeamId", "LeagueId", "Delay", "SeriesId", "SeriesType", "Kills", "Deaths", "Cs", "Gpm", "TowerKills", "RoshanKills", "TeamfightParticipation", "WardsPlaced", "CampsStacked", "RunesGrabbed", "FirstBlood", "Stuns", "Smokes", "NeutralTokens", "Watchers", "Lotuses", "Tormentors", "CourierKills", "TitleStats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerMatchStats), global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerMatchStats.Parser, new[]{ "Matches" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo), global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Parser, new[]{ "Bots", "DesirePushLaneTop", "DesirePushLaneMid", "DesirePushLaneBot", "DesireDefendLaneTop", "DesireDefendLaneMid", "DesireDefendLaneBot", "DesireFarmLaneTop", "DesireFarmLaneMid", "DesireFarmLaneBot", "DesireFarmRoshan", "ExecutionTime", "RuneStatus" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot), global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Parser, new[]{ "PlayerOwnerId", "HeroId", "Difficulty", "PowerCurrent", "PowerMax", "MoveTargetX", "MoveTargetY", "MoveTargetZ", "ActiveModeId", "ExecutionTime", "Modes", "Action" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Mode), global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Mode.Parser, new[]{ "ModeId", "Desire", "TargetEntity", "TargetX", "TargetY", "TargetZ" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Action), global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Action.Parser, new[]{ "ActionId", "ActionTarget" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSuccessfulHero), global::Steam.Protos.Dota2.CMsgSuccessfulHero.Parser, new[]{ "HeroId", "WinPercent", "LongestStreak" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgRecentMatchInfo), global::Steam.Protos.Dota2.CMsgRecentMatchInfo.Parser, new[]{ "MatchId", "GameMode", "Kills", "Deaths", "Assists", "Duration", "PlayerSlot", "MatchOutcome", "Timestamp", "LobbyType", "TeamNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchTips), global::Steam.Protos.Dota2.CMsgMatchTips.Parser, new[]{ "Tips" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchTips.Types.SingleTip), global::Steam.Protos.Dota2.CMsgMatchTips.Types.SingleTip.Parser, new[]{ "SourceAccountId", "TargetAccountId", "TipAmount", "EventId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal), global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Parser, new[]{ "MatchId", "StartTime", "Duration", "GameMode", "Players", "Tourney", "MatchOutcome", "RadiantScore", "DireScore", "LobbyType", "IsPlayerDraft" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Player), global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Player.Parser, new[]{ "AccountId", "HeroId", "Kills", "Deaths", "Assists", "Items", "PlayerSlot", "ProName", "Level", "TeamNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Tourney), global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Tourney.Parser, new[]{ "LeagueId", "SeriesType", "SeriesGame", "WeekendTourneyTournamentId", "WeekendTourneySeasonTrophyId", "WeekendTourneyDivision", "WeekendTourneySkillLevel", "RadiantTeamId", "RadiantTeamName", "RadiantTeamLogo", "RadiantTeamLogoUrl", "DireTeamId", "DireTeamName", "DireTeamLogo", "DireTeamLogoUrl" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgConsumableUsage), global::Steam.Protos.Dota2.CMsgConsumableUsage.Parser, new[]{ "ItemDef", "QuantityChange" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchConsumableUsage), global::Steam.Protos.Dota2.CMsgMatchConsumableUsage.Parser, new[]{ "PlayerConsumablesUsed" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchConsumableUsage.Types.PlayerUsage), global::Steam.Protos.Dota2.CMsgMatchConsumableUsage.Types.PlayerUsage.Parser, new[]{ "AccountId", "ConsumablesUsed" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchEventActionGrants), global::Steam.Protos.Dota2.CMsgMatchEventActionGrants.Parser, new[]{ "PlayerGrants" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchEventActionGrants.Types.PlayerGrants), global::Steam.Protos.Dota2.CMsgMatchEventActionGrants.Types.PlayerGrants.Parser, new[]{ "AccountId", "ActionsGranted" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgCustomGameWhitelist), global::Steam.Protos.Dota2.CMsgCustomGameWhitelist.Parser, new[]{ "Version", "CustomGamesWhitelist", "DisableWhitelist" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgCustomGameWhitelistForEdit), global::Steam.Protos.Dota2.CMsgCustomGameWhitelistForEdit.Parser, new[]{ "WhitelistEntries" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgCustomGameWhitelistForEdit.Types.WhitelistEntry), global::Steam.Protos.Dota2.CMsgCustomGameWhitelistForEdit.Types.WhitelistEntry.Parser, new[]{ "CustomGameId", "WhitelistState" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo), global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo.Parser, new[]{ "MatchId", "Timestamp", "Duration", "Win", "HeroId", "Kills", "Deaths", "Assists" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPlayerMatchRecord), global::Steam.Protos.Dota2.CMsgPlayerMatchRecord.Parser, new[]{ "Wins", "Losses" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes), global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes.Parser, new[]{ "Outcomes", "MatchCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPlayerRecentCommends), global::Steam.Protos.Dota2.CMsgPlayerRecentCommends.Parser, new[]{ "Commends", "MatchCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPlayerRecentAccomplishments), global::Steam.Protos.Dota2.CMsgPlayerRecentAccomplishments.Parser, new[]{ "RecentOutcomes", "TotalRecord", "PredictionStreak", "PlusPredictionStreak", "RecentCommends", "FirstMatchTimestamp", "LastMatch", "RecentMvps" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPlayerHeroRecentAccomplishments), global::Steam.Protos.Dota2.CMsgPlayerHeroRecentAccomplishments.Parser, new[]{ "RecentOutcomes", "TotalRecord", "LastMatch" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgRecentAccomplishments), global::Steam.Protos.Dota2.CMsgRecentAccomplishments.Parser, new[]{ "PlayerAccomplishments", "HeroAccomplishments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishments), global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishments.Parser, new[]{ "AccountId", "HeroId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse), global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.Parser, new[]{ "Result", "PlayerAccomplishments" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgArcanaVoteMatchVotes), global::Steam.Protos.Dota2.CMsgArcanaVoteMatchVotes.Parser, new[]{ "MatchId", "HeroId", "VoteCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfo), global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfo.Parser, new[]{ "AccountId", "NumMatchesToSearch", "MinSharedMatchCount", "NumAdditionalPlayers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfoResponse), global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Parser, new[]{ "Accounts" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Types.Account), global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Types.Account.Parser, new[]{ "AccountId", "NumCommonMatches", "EarliestCommonMatch", "LatestCommonMatch", "Generation", "Persona", "AlreadyBanned" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPullTabsData), global::Steam.Protos.Dota2.CMsgPullTabsData.Parser, new[]{ "Slots", "Jackpots", "LastBoard" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Slot), global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Slot.Parser, new[]{ "EventId", "BoardId", "HeroId", "ActionId", "Redeemed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Jackpot), global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Jackpot.Parser, new[]{ "BoardId", "ActionId", "HeroId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgUnderDraftData), global::Steam.Protos.Dota2.CMsgUnderDraftData.Parser, new[]{ "BenchSlots", "ShopSlots", "Gold", "TotalGold", "NotRestorable" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.BenchSlot), global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.BenchSlot.Parser, new[]{ "SlotId", "HeroId", "Stars" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.ShopSlot), global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.ShopSlot.Parser, new[]{ "SlotId", "HeroId", "IsSpecialReward" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPlayerTitleData), global::Steam.Protos.Dota2.CMsgPlayerTitleData.Parser, new[]{ "Title", "EventId", "Active" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTATriviaQuestion), global::Steam.Protos.Dota2.CMsgDOTATriviaQuestion.Parser, new[]{ "QuestionId", "Category", "Timestamp", "QuestionValue", "AnswerValues", "CorrectAnswerIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTATriviaQuestionAnswersSummary), global::Steam.Protos.Dota2.CMsgDOTATriviaQuestionAnswersSummary.Parser, new[]{ "SummaryAvailable", "PickedCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataSpecialValueBonus), global::Steam.Protos.Dota2.CMsgGameDataSpecialValueBonus.Parser, new[]{ "Name", "Value", "Operation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataSpecialValues), global::Steam.Protos.Dota2.CMsgGameDataSpecialValues.Parser, new[]{ "Name", "ValuesFloat", "IsPercentage", "HeadingLoc", "Bonuses", "ValuesShard", "ValuesScepter", "FacetBonus", "RequiredFacet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataFacetAbilityBonus), global::Steam.Protos.Dota2.CMsgGameDataFacetAbilityBonus.Parser, new[]{ "Name", "Values", "Operation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem), global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem.Parser, new[]{ "Id", "Name", "NameLoc", "DescLoc", "LoreLoc", "NotesLoc", "ShardLoc", "ScepterLoc", "FacetsLoc", "Type", "Behavior", "TargetTeam", "TargetType", "Flags", "Damage", "Immunity", "Dispellable", "MaxLevel", "CastRanges", "CastPoints", "ChannelTimes", "Cooldowns", "Durations", "Damages", "ManaCosts", "GoldCosts", "HealthCosts", "SpecialValues", "IsItem", "AbilityHasScepter", "AbilityHasShard", "AbilityIsGrantedByScepter", "AbilityIsGrantedByShard", "AbilityIsInnate", "ItemCost", "ItemInitialCharges", "ItemNeutralTier", "ItemStockMax", "ItemStockTime", "ItemQuality" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItemList), global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItemList.Parser, new[]{ "Abilities" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataHero), global::Steam.Protos.Dota2.CMsgGameDataHero.Parser, new[]{ "Id", "Name", "OrderId", "NameLoc", "BioLoc", "HypeLoc", "NpeDescLoc", "Facets", "StrBase", "StrGain", "AgiBase", "AgiGain", "IntBase", "IntGain", "PrimaryAttr", "Complexity", "AttackCapability", "RoleLevels", "DamageMin", "DamageMax", "AttackRate", "AttackRange", "ProjectileSpeed", "Armor", "MagicResistance", "MovementSpeed", "TurnRate", "SightRangeDay", "SightRangeNight", "MaxHealth", "HealthRegen", "MaxMana", "ManaRegen", "Abilities", "Talents", "FacetAbilities" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataHero.Types.Facet), global::Steam.Protos.Dota2.CMsgGameDataHero.Types.Facet.Parser, new[]{ "Color", "TitleLoc", "DescriptionLoc", "Name", "Icon", "GradientId", "Index" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataAbilities), global::Steam.Protos.Dota2.CMsgGameDataAbilities.Parser, new[]{ "Abilities" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataItems), global::Steam.Protos.Dota2.CMsgGameDataItems.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataHeroes), global::Steam.Protos.Dota2.CMsgGameDataHeroes.Parser, new[]{ "Heroes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataHeroList), global::Steam.Protos.Dota2.CMsgGameDataHeroList.Parser, new[]{ "Heroes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataHeroList.Types.HeroInfo), global::Steam.Protos.Dota2.CMsgGameDataHeroList.Types.HeroInfo.Parser, new[]{ "Id", "Name", "NameLoc", "NameEnglishLoc", "PrimaryAttr", "Complexity" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList), global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Parser, new[]{ "Itemabilities" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo), global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo.Parser, new[]{ "Id", "Name", "NameLoc", "NameEnglishLoc", "NeutralItemTier", "IsPregameSuggested", "IsEarlygameSuggested", "IsLategameSuggested", "Recipes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo.Types.Recipe), global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo.Types.Recipe.Parser, new[]{ "Items" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyAbilityDraftData), global::Steam.Protos.Dota2.CMsgLobbyAbilityDraftData.Parser, new[]{ "ShuffleDraftOrder" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSOEconItemDropRateBonus), global::Steam.Protos.Dota2.CSOEconItemDropRateBonus.Parser, new[]{ "AccountId", "ExpirationDate", "Bonus", "BonusCount", "ItemId", "DefIndex", "SecondsLeft", "BoosterType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSOEconItemTournamentPassport), global::Steam.Protos.Dota2.CSOEconItemTournamentPassport.Parser, new[]{ "AccountId", "LeagueId", "ItemId", "OriginalPurchaserId", "PassportsBought", "Version", "DefIndex", "RewardFlags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgStickerbookSticker), global::Steam.Protos.Dota2.CMsgStickerbookSticker.Parser, new[]{ "ItemDefId", "StickerNum", "Quality", "PositionX", "PositionY", "PositionZ", "Rotation", "Scale", "SourceItemId", "DepthBias" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgStickerbookPage), global::Steam.Protos.Dota2.CMsgStickerbookPage.Parser, new[]{ "PageNum", "EventId", "TeamId", "Stickers", "PageType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgStickerbookTeamPageOrderSequence), global::Steam.Protos.Dota2.CMsgStickerbookTeamPageOrderSequence.Parser, new[]{ "PageNumbers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgStickerbook), global::Steam.Protos.Dota2.CMsgStickerbook.Parser, new[]{ "Pages", "TeamPageOrderSequence", "FavoritePageNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgStickerHero), global::Steam.Protos.Dota2.CMsgStickerHero.Parser, new[]{ "HeroId", "ItemDefId", "Quality", "SourceItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgStickerHeroes), global::Steam.Protos.Dota2.CMsgStickerHeroes.Parser, new[]{ "Heroes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgHeroRoleStats), global::Steam.Protos.Dota2.CMsgHeroRoleStats.Parser, new[]{ "LaneSelectionFlags", "MatchCount", "WinCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgHeroRoleHeroStats), global::Steam.Protos.Dota2.CMsgHeroRoleHeroStats.Parser, new[]{ "HeroId", "RoleStats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgHeroRoleRankStats), global::Steam.Protos.Dota2.CMsgHeroRoleRankStats.Parser, new[]{ "RankTier", "HeroStats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgHeroRoleAllRanksStats), global::Steam.Protos.Dota2.CMsgHeroRoleAllRanksStats.Parser, new[]{ "StartTimestamp", "EndTimestamp", "RankStats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMapStatsSnapshot), global::Steam.Protos.Dota2.CMsgMapStatsSnapshot.Parser, new[]{ "Timestamp", "LotusesGained", "WisdomRunesGained", "RoshanKillsDay", "RoshanKillsNight", "PortalsUsed", "WatchersTaken", "TormentorKills", "OutpostsCaptured", "ShieldRunesGained" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGlobalMapStats), global::Steam.Protos.Dota2.CMsgGlobalMapStats.Parser, new[]{ "Current", "WindowStart", "WindowEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgTrackedStat), global::Steam.Protos.Dota2.CMsgTrackedStat.Parser, new[]{ "TrackedStatId", "TrackedStatValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse), global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Parser, new[]{ "Result", "RewardResults", "ActionId" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.ResultCode) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.MysteryItemRewardData), global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.MysteryItemRewardData.Parser, new[]{ "ItemDef", "ItemCategory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.LootListRewardData), global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.LootListRewardData.Parser, new[]{ "ItemDef" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.ActionListRewardData), global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.ActionListRewardData.Parser, new[]{ "ActionId", "ResultRewardData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.OverworldTokenRewardData), global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.OverworldTokenRewardData.Parser, new[]{ "Tokens" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.OverworldTokenRewardData.Types.TokenQuantity), global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.OverworldTokenRewardData.Types.TokenQuantity.Parser, new[]{ "TokenId", "TokenCount" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.GrantedRewardData), global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.GrantedRewardData.Parser, new[]{ "GrantIndex", "ScoreIndex", "RewardIndex", "RewardData", "ActionId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedback), global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedback.Parser, new[]{ "Language", "FeedbackItem", "Feedback" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedbackResponse), global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedbackResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedbackResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsg_PredictionResult), global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Parser, new[]{ "AccountId", "MatchId", "Correct", "Predictions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction), global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction.Parser, new[]{ "ItemDef", "NumCorrect", "NumFails", "Result", "GrantedItemDefs" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction.Types.EResult) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Parser, new[]{ "AbilityNameLocToken", "AbilityCategoryLocToken", "AbilityLevel", "CurrentManaCost", "CurrentHealthCost", "CurrentCooldown", "SummaryDescriptionLocToken", "SummaryDescriptionLevelUpLocToken", "SummaryDescriptionEmbedValues", "SummaryDescriptionFacet", "Chunks" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue.Parser, new[]{ "Value", "IsActiveValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Single), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Single.Parser, new[]{ "SingleValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Variable), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Variable.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Delta), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Delta.Parser, new[]{ "Prev", "Next" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue.Parser, new[]{ "Single", "Variable", "Delta" }, new[]{ "AttrValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties.Parser, new[]{ "FacetNameLocToken", "FacetDescLocToken", "FacetIconStyleName", "FacetColorStyleName", "FacetGradientStyleName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.Attribute), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.Attribute.Parser, new[]{ "NameLocToken", "Type", "Value", "Facet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Basic), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Basic.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Specific), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Specific.Parser, new[]{ "TitleLocToken", "DescLocToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Facet), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Facet.Parser, new[]{ "Facet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDescription), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDescription.Parser, new[]{ "Basic", "Specific", "Facet" }, new[]{ "AttrGroupDesc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroup), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroup.Parser, new[]{ "Desc", "Attributes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.ContentChunk_AttributeGroup), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.ContentChunk_AttributeGroup.Parser, new[]{ "Groups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.TooltipContentChunk), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.TooltipContentChunk.Parser, new[]{ "AttributeGroup" }, new[]{ "ContentChunk" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.SummaryDescriptionEmbedValue), global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.SummaryDescriptionEmbedValue.Parser, new[]{ "Name", "Type", "Value" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum ESpecialPingValue {
    [pbr::OriginalName("k_ESpecialPingValue_NoData")] KEspecialPingValueNoData = 16382,
    [pbr::OriginalName("k_ESpecialPingValue_Failed")] KEspecialPingValueFailed = 16383,
  }

  public enum EDOTAGCSessionNeed {
    [pbr::OriginalName("k_EDOTAGCSessionNeed_Unknown")] KEdotagcsessionNeedUnknown = 0,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_UserNoSessionNeeded")] KEdotagcsessionNeedUserNoSessionNeeded = 100,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_UserInOnlineGame")] KEdotagcsessionNeedUserInOnlineGame = 101,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_UserInLocalGame")] KEdotagcsessionNeedUserInLocalGame = 102,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_UserInUIWasConnected")] KEdotagcsessionNeedUserInUiwasConnected = 103,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_UserInUINeverConnected")] KEdotagcsessionNeedUserInUineverConnected = 104,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_UserTutorials")] KEdotagcsessionNeedUserTutorials = 105,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle")] KEdotagcsessionNeedUserInUiwasConnectedIdle = 106,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle")] KEdotagcsessionNeedUserInUineverConnectedIdle = 107,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_GameServerOnline")] KEdotagcsessionNeedGameServerOnline = 200,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_GameServerLocal")] KEdotagcsessionNeedGameServerLocal = 201,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_GameServerIdle")] KEdotagcsessionNeedGameServerIdle = 202,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_GameServerRelay")] KEdotagcsessionNeedGameServerRelay = 203,
    [pbr::OriginalName("k_EDOTAGCSessionNeed_GameServerLocalUpload")] KEdotagcsessionNeedGameServerLocalUpload = 204,
  }

  public enum EDOTAMatchPlayerTimeCustomStat {
    [pbr::OriginalName("k_EDOTA_MatchPlayerTimeCustomStat_HPRegenUnderT1Towers")] KEdotaMatchPlayerTimeCustomStatHpregenUnderT1Towers = 1,
    [pbr::OriginalName("k_EDOTA_MatchPlayerTimeCustomStat_MagicDamageReducedWithNewFormula_Absolute")] KEdotaMatchPlayerTimeCustomStatMagicDamageReducedWithNewFormulaAbsolute = 2,
    [pbr::OriginalName("k_EDOTA_MatchPlayerTimeCustomStat_MagicDamageReducedWithNewFormula_PercentOfTotalHP")] KEdotaMatchPlayerTimeCustomStatMagicDamageReducedWithNewFormulaPercentOfTotalHp = 3,
  }

  public enum DOTA_TournamentEvents {
    [pbr::OriginalName("TE_FIRST_BLOOD")] TeFirstBlood = 0,
    [pbr::OriginalName("TE_GAME_END")] TeGameEnd = 1,
    [pbr::OriginalName("TE_MULTI_KILL")] TeMultiKill = 2,
    [pbr::OriginalName("TE_HERO_DENY")] TeHeroDeny = 3,
    [pbr::OriginalName("TE_AEGIS_DENY")] TeAegisDeny = 4,
    [pbr::OriginalName("TE_AEGIS_STOLEN")] TeAegisStolen = 5,
    [pbr::OriginalName("TE_GODLIKE")] TeGodlike = 6,
    [pbr::OriginalName("TE_COURIER_KILL")] TeCourierKill = 7,
    [pbr::OriginalName("TE_ECHOSLAM")] TeEchoslam = 8,
    [pbr::OriginalName("TE_RAPIER")] TeRapier = 9,
    [pbr::OriginalName("TE_EARLY_ROSHAN")] TeEarlyRoshan = 10,
    [pbr::OriginalName("TE_BLACK_HOLE")] TeBlackHole = 11,
  }

  public enum EBroadcastTimelineEvent {
    [pbr::OriginalName("EBroadcastTimelineEvent_MatchStarted")] MatchStarted = 1,
    [pbr::OriginalName("EBroadcastTimelineEvent_GameStateChanged")] GameStateChanged = 2,
    [pbr::OriginalName("EBroadcastTimelineEvent_TowerDeath")] TowerDeath = 3,
    [pbr::OriginalName("EBroadcastTimelineEvent_BarracksDeath")] BarracksDeath = 4,
    [pbr::OriginalName("EBroadcastTimelineEvent_AncientDeath")] AncientDeath = 5,
    [pbr::OriginalName("EBroadcastTimelineEvent_RoshanDeath")] RoshanDeath = 6,
    [pbr::OriginalName("EBroadcastTimelineEvent_HeroDeath")] HeroDeath = 7,
    [pbr::OriginalName("EBroadcastTimelineEvent_TeamFight")] TeamFight = 8,
    [pbr::OriginalName("EBroadcastTimelineEvent_FirstBlood")] FirstBlood = 9,
  }

  public enum ECustomGameWhitelistState {
    [pbr::OriginalName("CUSTOM_GAME_WHITELIST_STATE_UNKNOWN")] CustomGameWhitelistStateUnknown = 0,
    [pbr::OriginalName("CUSTOM_GAME_WHITELIST_STATE_APPROVED")] CustomGameWhitelistStateApproved = 1,
    [pbr::OriginalName("CUSTOM_GAME_WHITELIST_STATE_REJECTED")] CustomGameWhitelistStateRejected = 2,
  }

  public enum EDOTATriviaQuestionCategory {
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_AbilityIcon")] KEdotatriviaQuestionCategoryAbilityIcon = 0,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_AbilityCooldown")] KEdotatriviaQuestionCategoryAbilityCooldown = 1,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_HeroAttributes")] KEdotatriviaQuestionCategoryHeroAttributes = 2,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_HeroMovementSpeed")] KEdotatriviaQuestionCategoryHeroMovementSpeed = 3,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_TalentTree")] KEdotatriviaQuestionCategoryTalentTree = 4,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_HeroStats")] KEdotatriviaQuestionCategoryHeroStats = 5,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_ItemPrice")] KEdotatriviaQuestionCategoryItemPrice = 6,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_AbilitySound")] KEdotatriviaQuestionCategoryAbilitySound = 7,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_InvokerSpells")] KEdotatriviaQuestionCategoryInvokerSpells = 8,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_AbilityManaCost")] KEdotatriviaQuestionCategoryAbilityManaCost = 9,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_HeroAttackSound")] KEdotatriviaQuestionCategoryHeroAttackSound = 10,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_AbilityName")] KEdotatriviaQuestionCategoryAbilityName = 11,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_ItemComponents")] KEdotatriviaQuestionCategoryItemComponents = 12,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_ItemLore")] KEdotatriviaQuestionCategoryItemLore = 13,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_ItemPassives")] KEdotatriviaQuestionCategoryItemPassives = 14,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_STATIC_QUESTIONS_END")] KEdotatriviaQuestionCategoryStaticQuestionsEnd = 15,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_DYNAMIC_QUESTIONS_START")] KEdotatriviaQuestionCategoryDynamicQuestionsStart = 99,
    [pbr::OriginalName("k_EDOTATriviaQuestionCategory_Dynamic_ItemBuild")] KEdotatriviaQuestionCategoryDynamicItemBuild = 100,
  }

  public enum EOverwatchConviction {
    [pbr::OriginalName("k_EOverwatchConviction_None")] KEoverwatchConvictionNone = 0,
    [pbr::OriginalName("k_EOverwatchConviction_NotGuilty")] KEoverwatchConvictionNotGuilty = 1,
    [pbr::OriginalName("k_EOverwatchConviction_GuiltUnclear")] KEoverwatchConvictionGuiltUnclear = 2,
    [pbr::OriginalName("k_EOverwatchConviction_Guilty")] KEoverwatchConvictionGuilty = 3,
  }

  public enum EHeroRelicRarity {
    [pbr::OriginalName("HERO_RELIC_RARITY_INVALID")] HeroRelicRarityInvalid = -1,
    [pbr::OriginalName("HERO_RELIC_RARITY_COMMON")] HeroRelicRarityCommon = 0,
    [pbr::OriginalName("HERO_RELIC_RARITY_RARE")] HeroRelicRarityRare = 1,
  }

  public enum EStickerbookAuditAction {
    [pbr::OriginalName("STICKERBOOK_AUDIT_CREATE_PAGE")] StickerbookAuditCreatePage = 0,
    [pbr::OriginalName("STICKERBOOK_AUDIT_DELETE_PAGE")] StickerbookAuditDeletePage = 1,
    [pbr::OriginalName("STICKERBOOK_AUDIT_STICK_STICKERS")] StickerbookAuditStickStickers = 2,
    [pbr::OriginalName("STICKERBOOK_AUDIT_REPLACE_STICKERS")] StickerbookAuditReplaceStickers = 3,
    [pbr::OriginalName("STICKERBOOK_AUDIT_HERO_STICKER")] StickerbookAuditHeroSticker = 4,
  }

  public enum EStickerbookPageType {
    [pbr::OriginalName("STICKER_PAGE_GENERIC")] StickerPageGeneric = 0,
    [pbr::OriginalName("STICKER_PAGE_TEAM")] StickerPageTeam = 1,
    [pbr::OriginalName("STICKER_PAGE_TALENT")] StickerPageTalent = 2,
  }

  public enum ENewBloomGiftingResponse {
    [pbr::OriginalName("kENewBloomGifting_Success")] KEnewBloomGiftingSuccess = 0,
    [pbr::OriginalName("kENewBloomGifting_UnknownFailure")] KEnewBloomGiftingUnknownFailure = 1,
    [pbr::OriginalName("kENewBloomGifting_MalformedRequest")] KEnewBloomGiftingMalformedRequest = 2,
    [pbr::OriginalName("kENewBloomGifting_FeatureDisabled")] KEnewBloomGiftingFeatureDisabled = 3,
    [pbr::OriginalName("kENewBloomGifting_ItemNotFound")] KEnewBloomGiftingItemNotFound = 4,
    [pbr::OriginalName("kENewBloomGifting_PlayerNotAllowedToGiveGifts")] KEnewBloomGiftingPlayerNotAllowedToGiveGifts = 5,
    [pbr::OriginalName("kENewBloomGifting_TargetNotAllowedToReceiveGifts")] KEnewBloomGiftingTargetNotAllowedToReceiveGifts = 6,
    [pbr::OriginalName("kENewBloomGifting_ServerNotAuthorized")] KEnewBloomGiftingServerNotAuthorized = 100,
    [pbr::OriginalName("kENewBloomGifting_PlayerNotInLobby")] KEnewBloomGiftingPlayerNotInLobby = 101,
    [pbr::OriginalName("kENewBloomGifting_TargetNotInLobby")] KEnewBloomGiftingTargetNotInLobby = 102,
    [pbr::OriginalName("kENewBloomGifting_LobbyNotEligible")] KEnewBloomGiftingLobbyNotEligible = 103,
    [pbr::OriginalName("kENewBloomGifting_TargetNotFriend")] KEnewBloomGiftingTargetNotFriend = 200,
    [pbr::OriginalName("kENewBloomGifting_TargetFriendDurationTooShort")] KEnewBloomGiftingTargetFriendDurationTooShort = 201,
  }

  #endregion

  #region Messages
  public sealed partial class CSODOTAGameAccountClient : pb::IMessage<CSODOTAGameAccountClient>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAGameAccountClient> _parser = new pb::MessageParser<CSODOTAGameAccountClient>(() => new CSODOTAGameAccountClient());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAGameAccountClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAGameAccountClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAGameAccountClient(CSODOTAGameAccountClient other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      accountId_ = other.accountId_;
      wins_ = other.wins_;
      losses_ = other.losses_;
      xp_ = other.xp_;
      level_ = other.level_;
      initialSkill_ = other.initialSkill_;
      leaverCount_ = other.leaverCount_;
      secondaryLeaverCount_ = other.secondaryLeaverCount_;
      lowPriorityUntilDate_ = other.lowPriorityUntilDate_;
      preventTextChatUntilDate_ = other.preventTextChatUntilDate_;
      preventVoiceUntilDate_ = other.preventVoiceUntilDate_;
      preventPublicTextChatUntilDate_ = other.preventPublicTextChatUntilDate_;
      preventNewPlayerChatUntilDate_ = other.preventNewPlayerChatUntilDate_;
      lastAbandonedGameDate_ = other.lastAbandonedGameDate_;
      lastSecondaryAbandonedGameDate_ = other.lastSecondaryAbandonedGameDate_;
      leaverPenaltyCount_ = other.leaverPenaltyCount_;
      completedGameStreak_ = other.completedGameStreak_;
      accountDisabledUntilDate_ = other.accountDisabledUntilDate_;
      accountDisabledCount_ = other.accountDisabledCount_;
      matchDisabledUntilDate_ = other.matchDisabledUntilDate_;
      matchDisabledCount_ = other.matchDisabledCount_;
      shutdownlawterminatetimestamp_ = other.shutdownlawterminatetimestamp_;
      lowPriorityGamesRemaining_ = other.lowPriorityGamesRemaining_;
      recruitmentLevel_ = other.recruitmentLevel_;
      hasNewNotifications_ = other.hasNewNotifications_;
      isLeagueAdmin_ = other.isLeagueAdmin_;
      casualGamesPlayed_ = other.casualGamesPlayed_;
      soloCompetitiveGamesPlayed_ = other.soloCompetitiveGamesPlayed_;
      partyCompetitiveGamesPlayed_ = other.partyCompetitiveGamesPlayed_;
      casual1V1GamesPlayed_ = other.casual1V1GamesPlayed_;
      currAllHeroChallengeId_ = other.currAllHeroChallengeId_;
      playTimePoints_ = other.playTimePoints_;
      accountFlags_ = other.accountFlags_;
      playTimeLevel_ = other.playTimeLevel_;
      playerBehaviorSeqNumLastReport_ = other.playerBehaviorSeqNumLastReport_;
      playerBehaviorScoreLastReport_ = other.playerBehaviorScoreLastReport_;
      playerBehaviorReportOldData_ = other.playerBehaviorReportOldData_;
      tourneySkillLevel_ = other.tourneySkillLevel_;
      tourneyRecentParticipationDate_ = other.tourneyRecentParticipationDate_;
      anchoredPhoneNumberId_ = other.anchoredPhoneNumberId_;
      rankedMatchmakingBanUntilDate_ = other.rankedMatchmakingBanUntilDate_;
      recentGameTime1_ = other.recentGameTime1_;
      recentGameTime2_ = other.recentGameTime2_;
      recentGameTime3_ = other.recentGameTime3_;
      favoriteTeamPacked_ = other.favoriteTeamPacked_;
      recentReportTime_ = other.recentReportTime_;
      customGameDisabledUntilDate_ = other.customGameDisabledUntilDate_;
      recentWinTime1_ = other.recentWinTime1_;
      recentWinTime2_ = other.recentWinTime2_;
      recentWinTime3_ = other.recentWinTime3_;
      coachRating_ = other.coachRating_;
      queuePoints_ = other.queuePoints_;
      roleHandicaps_ = other.roleHandicaps_.Clone();
      eventModeRecentTime_ = other.eventModeRecentTime_;
      mmrRecalibrationTime_ = other.mmrRecalibrationTime_;
      bannedHeroIds_ = other.bannedHeroIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAGameAccountClient Clone() {
      return new CSODOTAGameAccountClient(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "wins" field.</summary>
    public const int WinsFieldNumber = 3;
    private readonly static uint WinsDefaultValue = 0;

    private uint wins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Wins {
      get { if ((_hasBits0 & 2) != 0) { return wins_; } else { return WinsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        wins_ = value;
      }
    }
    /// <summary>Gets whether the "wins" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWins {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "wins" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWins() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "losses" field.</summary>
    public const int LossesFieldNumber = 4;
    private readonly static uint LossesDefaultValue = 0;

    private uint losses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Losses {
      get { if ((_hasBits0 & 4) != 0) { return losses_; } else { return LossesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        losses_ = value;
      }
    }
    /// <summary>Gets whether the "losses" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLosses {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "losses" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLosses() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "xp" field.</summary>
    public const int XpFieldNumber = 12;
    private readonly static uint XpDefaultValue = 0;

    private uint xp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Xp {
      get { if ((_hasBits0 & 8) != 0) { return xp_; } else { return XpDefaultValue; } }
      set {
        _hasBits0 |= 8;
        xp_ = value;
      }
    }
    /// <summary>Gets whether the "xp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXp {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "xp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearXp() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 13;
    private readonly static uint LevelDefaultValue = 0;

    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { if ((_hasBits0 & 16) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 16;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLevel {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLevel() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "initial_skill" field.</summary>
    public const int InitialSkillFieldNumber = 14;
    private readonly static uint InitialSkillDefaultValue = 0;

    private uint initialSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InitialSkill {
      get { if ((_hasBits0 & 32) != 0) { return initialSkill_; } else { return InitialSkillDefaultValue; } }
      set {
        _hasBits0 |= 32;
        initialSkill_ = value;
      }
    }
    /// <summary>Gets whether the "initial_skill" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInitialSkill {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "initial_skill" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInitialSkill() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "leaver_count" field.</summary>
    public const int LeaverCountFieldNumber = 15;
    private readonly static uint LeaverCountDefaultValue = 0;

    private uint leaverCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaverCount {
      get { if ((_hasBits0 & 64) != 0) { return leaverCount_; } else { return LeaverCountDefaultValue; } }
      set {
        _hasBits0 |= 64;
        leaverCount_ = value;
      }
    }
    /// <summary>Gets whether the "leaver_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaverCount {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "leaver_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaverCount() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "secondary_leaver_count" field.</summary>
    public const int SecondaryLeaverCountFieldNumber = 58;
    private readonly static uint SecondaryLeaverCountDefaultValue = 0;

    private uint secondaryLeaverCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecondaryLeaverCount {
      get { if ((_hasBits0 & 4194304) != 0) { return secondaryLeaverCount_; } else { return SecondaryLeaverCountDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        secondaryLeaverCount_ = value;
      }
    }
    /// <summary>Gets whether the "secondary_leaver_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecondaryLeaverCount {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "secondary_leaver_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecondaryLeaverCount() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "low_priority_until_date" field.</summary>
    public const int LowPriorityUntilDateFieldNumber = 18;
    private readonly static uint LowPriorityUntilDateDefaultValue = 0;

    private uint lowPriorityUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LowPriorityUntilDate {
      get { if ((_hasBits0 & 128) != 0) { return lowPriorityUntilDate_; } else { return LowPriorityUntilDateDefaultValue; } }
      set {
        _hasBits0 |= 128;
        lowPriorityUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "low_priority_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLowPriorityUntilDate {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "low_priority_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowPriorityUntilDate() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "prevent_text_chat_until_date" field.</summary>
    public const int PreventTextChatUntilDateFieldNumber = 20;
    private readonly static uint PreventTextChatUntilDateDefaultValue = 0;

    private uint preventTextChatUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PreventTextChatUntilDate {
      get { if ((_hasBits0 & 256) != 0) { return preventTextChatUntilDate_; } else { return PreventTextChatUntilDateDefaultValue; } }
      set {
        _hasBits0 |= 256;
        preventTextChatUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "prevent_text_chat_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreventTextChatUntilDate {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "prevent_text_chat_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreventTextChatUntilDate() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "prevent_voice_until_date" field.</summary>
    public const int PreventVoiceUntilDateFieldNumber = 21;
    private readonly static uint PreventVoiceUntilDateDefaultValue = 0;

    private uint preventVoiceUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PreventVoiceUntilDate {
      get { if ((_hasBits0 & 512) != 0) { return preventVoiceUntilDate_; } else { return PreventVoiceUntilDateDefaultValue; } }
      set {
        _hasBits0 |= 512;
        preventVoiceUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "prevent_voice_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreventVoiceUntilDate {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "prevent_voice_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreventVoiceUntilDate() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "prevent_public_text_chat_until_date" field.</summary>
    public const int PreventPublicTextChatUntilDateFieldNumber = 86;
    private readonly static uint PreventPublicTextChatUntilDateDefaultValue = 0;

    private uint preventPublicTextChatUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PreventPublicTextChatUntilDate {
      get { if ((_hasBits1 & 32) != 0) { return preventPublicTextChatUntilDate_; } else { return PreventPublicTextChatUntilDateDefaultValue; } }
      set {
        _hasBits1 |= 32;
        preventPublicTextChatUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "prevent_public_text_chat_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreventPublicTextChatUntilDate {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "prevent_public_text_chat_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreventPublicTextChatUntilDate() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "prevent_new_player_chat_until_date" field.</summary>
    public const int PreventNewPlayerChatUntilDateFieldNumber = 122;
    private readonly static uint PreventNewPlayerChatUntilDateDefaultValue = 0;

    private uint preventNewPlayerChatUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PreventNewPlayerChatUntilDate {
      get { if ((_hasBits1 & 2097152) != 0) { return preventNewPlayerChatUntilDate_; } else { return PreventNewPlayerChatUntilDateDefaultValue; } }
      set {
        _hasBits1 |= 2097152;
        preventNewPlayerChatUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "prevent_new_player_chat_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreventNewPlayerChatUntilDate {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "prevent_new_player_chat_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreventNewPlayerChatUntilDate() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "last_abandoned_game_date" field.</summary>
    public const int LastAbandonedGameDateFieldNumber = 22;
    private readonly static uint LastAbandonedGameDateDefaultValue = 0;

    private uint lastAbandonedGameDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastAbandonedGameDate {
      get { if ((_hasBits0 & 1024) != 0) { return lastAbandonedGameDate_; } else { return LastAbandonedGameDateDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        lastAbandonedGameDate_ = value;
      }
    }
    /// <summary>Gets whether the "last_abandoned_game_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastAbandonedGameDate {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "last_abandoned_game_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastAbandonedGameDate() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "last_secondary_abandoned_game_date" field.</summary>
    public const int LastSecondaryAbandonedGameDateFieldNumber = 59;
    private readonly static uint LastSecondaryAbandonedGameDateDefaultValue = 0;

    private uint lastSecondaryAbandonedGameDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastSecondaryAbandonedGameDate {
      get { if ((_hasBits0 & 8388608) != 0) { return lastSecondaryAbandonedGameDate_; } else { return LastSecondaryAbandonedGameDateDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        lastSecondaryAbandonedGameDate_ = value;
      }
    }
    /// <summary>Gets whether the "last_secondary_abandoned_game_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastSecondaryAbandonedGameDate {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "last_secondary_abandoned_game_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastSecondaryAbandonedGameDate() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "leaver_penalty_count" field.</summary>
    public const int LeaverPenaltyCountFieldNumber = 23;
    private readonly static uint LeaverPenaltyCountDefaultValue = 0;

    private uint leaverPenaltyCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaverPenaltyCount {
      get { if ((_hasBits0 & 2048) != 0) { return leaverPenaltyCount_; } else { return LeaverPenaltyCountDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        leaverPenaltyCount_ = value;
      }
    }
    /// <summary>Gets whether the "leaver_penalty_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaverPenaltyCount {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "leaver_penalty_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaverPenaltyCount() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "completed_game_streak" field.</summary>
    public const int CompletedGameStreakFieldNumber = 24;
    private readonly static uint CompletedGameStreakDefaultValue = 0;

    private uint completedGameStreak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CompletedGameStreak {
      get { if ((_hasBits0 & 4096) != 0) { return completedGameStreak_; } else { return CompletedGameStreakDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        completedGameStreak_ = value;
      }
    }
    /// <summary>Gets whether the "completed_game_streak" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompletedGameStreak {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "completed_game_streak" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompletedGameStreak() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "account_disabled_until_date" field.</summary>
    public const int AccountDisabledUntilDateFieldNumber = 38;
    private readonly static uint AccountDisabledUntilDateDefaultValue = 0;

    private uint accountDisabledUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountDisabledUntilDate {
      get { if ((_hasBits0 & 8192) != 0) { return accountDisabledUntilDate_; } else { return AccountDisabledUntilDateDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        accountDisabledUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "account_disabled_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountDisabledUntilDate {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "account_disabled_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountDisabledUntilDate() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "account_disabled_count" field.</summary>
    public const int AccountDisabledCountFieldNumber = 39;
    private readonly static uint AccountDisabledCountDefaultValue = 0;

    private uint accountDisabledCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountDisabledCount {
      get { if ((_hasBits0 & 16384) != 0) { return accountDisabledCount_; } else { return AccountDisabledCountDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        accountDisabledCount_ = value;
      }
    }
    /// <summary>Gets whether the "account_disabled_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountDisabledCount {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "account_disabled_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountDisabledCount() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "match_disabled_until_date" field.</summary>
    public const int MatchDisabledUntilDateFieldNumber = 41;
    private readonly static uint MatchDisabledUntilDateDefaultValue = 0;

    private uint matchDisabledUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchDisabledUntilDate {
      get { if ((_hasBits0 & 32768) != 0) { return matchDisabledUntilDate_; } else { return MatchDisabledUntilDateDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        matchDisabledUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "match_disabled_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchDisabledUntilDate {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "match_disabled_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchDisabledUntilDate() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "match_disabled_count" field.</summary>
    public const int MatchDisabledCountFieldNumber = 42;
    private readonly static uint MatchDisabledCountDefaultValue = 0;

    private uint matchDisabledCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchDisabledCount {
      get { if ((_hasBits0 & 65536) != 0) { return matchDisabledCount_; } else { return MatchDisabledCountDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        matchDisabledCount_ = value;
      }
    }
    /// <summary>Gets whether the "match_disabled_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchDisabledCount {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "match_disabled_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchDisabledCount() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "shutdownlawterminatetimestamp" field.</summary>
    public const int ShutdownlawterminatetimestampFieldNumber = 47;
    private readonly static uint ShutdownlawterminatetimestampDefaultValue = 0;

    private uint shutdownlawterminatetimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Shutdownlawterminatetimestamp {
      get { if ((_hasBits0 & 131072) != 0) { return shutdownlawterminatetimestamp_; } else { return ShutdownlawterminatetimestampDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        shutdownlawterminatetimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "shutdownlawterminatetimestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShutdownlawterminatetimestamp {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "shutdownlawterminatetimestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShutdownlawterminatetimestamp() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "low_priority_games_remaining" field.</summary>
    public const int LowPriorityGamesRemainingFieldNumber = 48;
    private readonly static uint LowPriorityGamesRemainingDefaultValue = 0;

    private uint lowPriorityGamesRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LowPriorityGamesRemaining {
      get { if ((_hasBits0 & 262144) != 0) { return lowPriorityGamesRemaining_; } else { return LowPriorityGamesRemainingDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        lowPriorityGamesRemaining_ = value;
      }
    }
    /// <summary>Gets whether the "low_priority_games_remaining" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLowPriorityGamesRemaining {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "low_priority_games_remaining" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowPriorityGamesRemaining() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "recruitment_level" field.</summary>
    public const int RecruitmentLevelFieldNumber = 55;
    private readonly static uint RecruitmentLevelDefaultValue = 0;

    private uint recruitmentLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecruitmentLevel {
      get { if ((_hasBits0 & 524288) != 0) { return recruitmentLevel_; } else { return RecruitmentLevelDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        recruitmentLevel_ = value;
      }
    }
    /// <summary>Gets whether the "recruitment_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecruitmentLevel {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "recruitment_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecruitmentLevel() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "has_new_notifications" field.</summary>
    public const int HasNewNotificationsFieldNumber = 56;
    private readonly static bool HasNewNotificationsDefaultValue = false;

    private bool hasNewNotifications_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewNotifications {
      get { if ((_hasBits0 & 1048576) != 0) { return hasNewNotifications_; } else { return HasNewNotificationsDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        hasNewNotifications_ = value;
      }
    }
    /// <summary>Gets whether the "has_new_notifications" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasNewNotifications {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "has_new_notifications" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasNewNotifications() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "is_league_admin" field.</summary>
    public const int IsLeagueAdminFieldNumber = 57;
    private readonly static bool IsLeagueAdminDefaultValue = false;

    private bool isLeagueAdmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLeagueAdmin {
      get { if ((_hasBits0 & 2097152) != 0) { return isLeagueAdmin_; } else { return IsLeagueAdminDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        isLeagueAdmin_ = value;
      }
    }
    /// <summary>Gets whether the "is_league_admin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsLeagueAdmin {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "is_league_admin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsLeagueAdmin() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "casual_games_played" field.</summary>
    public const int CasualGamesPlayedFieldNumber = 60;
    private readonly static uint CasualGamesPlayedDefaultValue = 0;

    private uint casualGamesPlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CasualGamesPlayed {
      get { if ((_hasBits0 & 16777216) != 0) { return casualGamesPlayed_; } else { return CasualGamesPlayedDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        casualGamesPlayed_ = value;
      }
    }
    /// <summary>Gets whether the "casual_games_played" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCasualGamesPlayed {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "casual_games_played" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCasualGamesPlayed() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "solo_competitive_games_played" field.</summary>
    public const int SoloCompetitiveGamesPlayedFieldNumber = 61;
    private readonly static uint SoloCompetitiveGamesPlayedDefaultValue = 0;

    private uint soloCompetitiveGamesPlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SoloCompetitiveGamesPlayed {
      get { if ((_hasBits0 & 33554432) != 0) { return soloCompetitiveGamesPlayed_; } else { return SoloCompetitiveGamesPlayedDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        soloCompetitiveGamesPlayed_ = value;
      }
    }
    /// <summary>Gets whether the "solo_competitive_games_played" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSoloCompetitiveGamesPlayed {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "solo_competitive_games_played" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSoloCompetitiveGamesPlayed() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "party_competitive_games_played" field.</summary>
    public const int PartyCompetitiveGamesPlayedFieldNumber = 62;
    private readonly static uint PartyCompetitiveGamesPlayedDefaultValue = 0;

    private uint partyCompetitiveGamesPlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartyCompetitiveGamesPlayed {
      get { if ((_hasBits0 & 67108864) != 0) { return partyCompetitiveGamesPlayed_; } else { return PartyCompetitiveGamesPlayedDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        partyCompetitiveGamesPlayed_ = value;
      }
    }
    /// <summary>Gets whether the "party_competitive_games_played" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartyCompetitiveGamesPlayed {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "party_competitive_games_played" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartyCompetitiveGamesPlayed() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "casual_1v1_games_played" field.</summary>
    public const int Casual1V1GamesPlayedFieldNumber = 65;
    private readonly static uint Casual1V1GamesPlayedDefaultValue = 0;

    private uint casual1V1GamesPlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Casual1V1GamesPlayed {
      get { if ((_hasBits0 & 134217728) != 0) { return casual1V1GamesPlayed_; } else { return Casual1V1GamesPlayedDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        casual1V1GamesPlayed_ = value;
      }
    }
    /// <summary>Gets whether the "casual_1v1_games_played" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCasual1V1GamesPlayed {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "casual_1v1_games_played" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCasual1V1GamesPlayed() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "curr_all_hero_challenge_id" field.</summary>
    public const int CurrAllHeroChallengeIdFieldNumber = 67;
    private readonly static int CurrAllHeroChallengeIdDefaultValue = 0;

    private int currAllHeroChallengeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrAllHeroChallengeId {
      get { if ((_hasBits0 & 268435456) != 0) { return currAllHeroChallengeId_; } else { return CurrAllHeroChallengeIdDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        currAllHeroChallengeId_ = value;
      }
    }
    /// <summary>Gets whether the "curr_all_hero_challenge_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrAllHeroChallengeId {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "curr_all_hero_challenge_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrAllHeroChallengeId() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "play_time_points" field.</summary>
    public const int PlayTimePointsFieldNumber = 68;
    private readonly static uint PlayTimePointsDefaultValue = 0;

    private uint playTimePoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayTimePoints {
      get { if ((_hasBits0 & 536870912) != 0) { return playTimePoints_; } else { return PlayTimePointsDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        playTimePoints_ = value;
      }
    }
    /// <summary>Gets whether the "play_time_points" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayTimePoints {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "play_time_points" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayTimePoints() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "account_flags" field.</summary>
    public const int AccountFlagsFieldNumber = 69;
    private readonly static uint AccountFlagsDefaultValue = 0;

    private uint accountFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountFlags {
      get { if ((_hasBits0 & 1073741824) != 0) { return accountFlags_; } else { return AccountFlagsDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        accountFlags_ = value;
      }
    }
    /// <summary>Gets whether the "account_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountFlags {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "account_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountFlags() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "play_time_level" field.</summary>
    public const int PlayTimeLevelFieldNumber = 70;
    private readonly static uint PlayTimeLevelDefaultValue = 0;

    private uint playTimeLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayTimeLevel {
      get { if ((_hasBits0 & -2147483648) != 0) { return playTimeLevel_; } else { return PlayTimeLevelDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        playTimeLevel_ = value;
      }
    }
    /// <summary>Gets whether the "play_time_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayTimeLevel {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "play_time_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayTimeLevel() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "player_behavior_seq_num_last_report" field.</summary>
    public const int PlayerBehaviorSeqNumLastReportFieldNumber = 71;
    private readonly static uint PlayerBehaviorSeqNumLastReportDefaultValue = 0;

    private uint playerBehaviorSeqNumLastReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerBehaviorSeqNumLastReport {
      get { if ((_hasBits1 & 1) != 0) { return playerBehaviorSeqNumLastReport_; } else { return PlayerBehaviorSeqNumLastReportDefaultValue; } }
      set {
        _hasBits1 |= 1;
        playerBehaviorSeqNumLastReport_ = value;
      }
    }
    /// <summary>Gets whether the "player_behavior_seq_num_last_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerBehaviorSeqNumLastReport {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_behavior_seq_num_last_report" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerBehaviorSeqNumLastReport() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "player_behavior_score_last_report" field.</summary>
    public const int PlayerBehaviorScoreLastReportFieldNumber = 72;
    private readonly static uint PlayerBehaviorScoreLastReportDefaultValue = 0;

    private uint playerBehaviorScoreLastReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerBehaviorScoreLastReport {
      get { if ((_hasBits1 & 2) != 0) { return playerBehaviorScoreLastReport_; } else { return PlayerBehaviorScoreLastReportDefaultValue; } }
      set {
        _hasBits1 |= 2;
        playerBehaviorScoreLastReport_ = value;
      }
    }
    /// <summary>Gets whether the "player_behavior_score_last_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerBehaviorScoreLastReport {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_behavior_score_last_report" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerBehaviorScoreLastReport() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "player_behavior_report_old_data" field.</summary>
    public const int PlayerBehaviorReportOldDataFieldNumber = 73;
    private readonly static bool PlayerBehaviorReportOldDataDefaultValue = false;

    private bool playerBehaviorReportOldData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayerBehaviorReportOldData {
      get { if ((_hasBits1 & 4) != 0) { return playerBehaviorReportOldData_; } else { return PlayerBehaviorReportOldDataDefaultValue; } }
      set {
        _hasBits1 |= 4;
        playerBehaviorReportOldData_ = value;
      }
    }
    /// <summary>Gets whether the "player_behavior_report_old_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerBehaviorReportOldData {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "player_behavior_report_old_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerBehaviorReportOldData() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "tourney_skill_level" field.</summary>
    public const int TourneySkillLevelFieldNumber = 74;
    private readonly static uint TourneySkillLevelDefaultValue = 0;

    private uint tourneySkillLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TourneySkillLevel {
      get { if ((_hasBits1 & 8) != 0) { return tourneySkillLevel_; } else { return TourneySkillLevelDefaultValue; } }
      set {
        _hasBits1 |= 8;
        tourneySkillLevel_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_skill_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneySkillLevel {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "tourney_skill_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneySkillLevel() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "tourney_recent_participation_date" field.</summary>
    public const int TourneyRecentParticipationDateFieldNumber = 85;
    private readonly static uint TourneyRecentParticipationDateDefaultValue = 0;

    private uint tourneyRecentParticipationDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TourneyRecentParticipationDate {
      get { if ((_hasBits1 & 16) != 0) { return tourneyRecentParticipationDate_; } else { return TourneyRecentParticipationDateDefaultValue; } }
      set {
        _hasBits1 |= 16;
        tourneyRecentParticipationDate_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_recent_participation_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneyRecentParticipationDate {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "tourney_recent_participation_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneyRecentParticipationDate() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "anchored_phone_number_id" field.</summary>
    public const int AnchoredPhoneNumberIdFieldNumber = 88;
    private readonly static ulong AnchoredPhoneNumberIdDefaultValue = 0UL;

    private ulong anchoredPhoneNumberId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AnchoredPhoneNumberId {
      get { if ((_hasBits1 & 64) != 0) { return anchoredPhoneNumberId_; } else { return AnchoredPhoneNumberIdDefaultValue; } }
      set {
        _hasBits1 |= 64;
        anchoredPhoneNumberId_ = value;
      }
    }
    /// <summary>Gets whether the "anchored_phone_number_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAnchoredPhoneNumberId {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "anchored_phone_number_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAnchoredPhoneNumberId() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "ranked_matchmaking_ban_until_date" field.</summary>
    public const int RankedMatchmakingBanUntilDateFieldNumber = 89;
    private readonly static uint RankedMatchmakingBanUntilDateDefaultValue = 0;

    private uint rankedMatchmakingBanUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankedMatchmakingBanUntilDate {
      get { if ((_hasBits1 & 128) != 0) { return rankedMatchmakingBanUntilDate_; } else { return RankedMatchmakingBanUntilDateDefaultValue; } }
      set {
        _hasBits1 |= 128;
        rankedMatchmakingBanUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "ranked_matchmaking_ban_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRankedMatchmakingBanUntilDate {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "ranked_matchmaking_ban_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRankedMatchmakingBanUntilDate() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "recent_game_time_1" field.</summary>
    public const int RecentGameTime1FieldNumber = 90;
    private readonly static uint RecentGameTime1DefaultValue = 0;

    private uint recentGameTime1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecentGameTime1 {
      get { if ((_hasBits1 & 256) != 0) { return recentGameTime1_; } else { return RecentGameTime1DefaultValue; } }
      set {
        _hasBits1 |= 256;
        recentGameTime1_ = value;
      }
    }
    /// <summary>Gets whether the "recent_game_time_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecentGameTime1 {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "recent_game_time_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecentGameTime1() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "recent_game_time_2" field.</summary>
    public const int RecentGameTime2FieldNumber = 91;
    private readonly static uint RecentGameTime2DefaultValue = 0;

    private uint recentGameTime2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecentGameTime2 {
      get { if ((_hasBits1 & 512) != 0) { return recentGameTime2_; } else { return RecentGameTime2DefaultValue; } }
      set {
        _hasBits1 |= 512;
        recentGameTime2_ = value;
      }
    }
    /// <summary>Gets whether the "recent_game_time_2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecentGameTime2 {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "recent_game_time_2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecentGameTime2() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "recent_game_time_3" field.</summary>
    public const int RecentGameTime3FieldNumber = 92;
    private readonly static uint RecentGameTime3DefaultValue = 0;

    private uint recentGameTime3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecentGameTime3 {
      get { if ((_hasBits1 & 1024) != 0) { return recentGameTime3_; } else { return RecentGameTime3DefaultValue; } }
      set {
        _hasBits1 |= 1024;
        recentGameTime3_ = value;
      }
    }
    /// <summary>Gets whether the "recent_game_time_3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecentGameTime3 {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "recent_game_time_3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecentGameTime3() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "favorite_team_packed" field.</summary>
    public const int FavoriteTeamPackedFieldNumber = 103;
    private readonly static ulong FavoriteTeamPackedDefaultValue = 0UL;

    private ulong favoriteTeamPacked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FavoriteTeamPacked {
      get { if ((_hasBits1 & 2048) != 0) { return favoriteTeamPacked_; } else { return FavoriteTeamPackedDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        favoriteTeamPacked_ = value;
      }
    }
    /// <summary>Gets whether the "favorite_team_packed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFavoriteTeamPacked {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "favorite_team_packed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFavoriteTeamPacked() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "recent_report_time" field.</summary>
    public const int RecentReportTimeFieldNumber = 104;
    private readonly static uint RecentReportTimeDefaultValue = 0;

    private uint recentReportTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecentReportTime {
      get { if ((_hasBits1 & 4096) != 0) { return recentReportTime_; } else { return RecentReportTimeDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        recentReportTime_ = value;
      }
    }
    /// <summary>Gets whether the "recent_report_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecentReportTime {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "recent_report_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecentReportTime() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "custom_game_disabled_until_date" field.</summary>
    public const int CustomGameDisabledUntilDateFieldNumber = 105;
    private readonly static uint CustomGameDisabledUntilDateDefaultValue = 0;

    private uint customGameDisabledUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CustomGameDisabledUntilDate {
      get { if ((_hasBits1 & 8192) != 0) { return customGameDisabledUntilDate_; } else { return CustomGameDisabledUntilDateDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        customGameDisabledUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_disabled_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameDisabledUntilDate {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_disabled_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameDisabledUntilDate() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "recent_win_time_1" field.</summary>
    public const int RecentWinTime1FieldNumber = 106;
    private readonly static uint RecentWinTime1DefaultValue = 0;

    private uint recentWinTime1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecentWinTime1 {
      get { if ((_hasBits1 & 16384) != 0) { return recentWinTime1_; } else { return RecentWinTime1DefaultValue; } }
      set {
        _hasBits1 |= 16384;
        recentWinTime1_ = value;
      }
    }
    /// <summary>Gets whether the "recent_win_time_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecentWinTime1 {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "recent_win_time_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecentWinTime1() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "recent_win_time_2" field.</summary>
    public const int RecentWinTime2FieldNumber = 107;
    private readonly static uint RecentWinTime2DefaultValue = 0;

    private uint recentWinTime2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecentWinTime2 {
      get { if ((_hasBits1 & 32768) != 0) { return recentWinTime2_; } else { return RecentWinTime2DefaultValue; } }
      set {
        _hasBits1 |= 32768;
        recentWinTime2_ = value;
      }
    }
    /// <summary>Gets whether the "recent_win_time_2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecentWinTime2 {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "recent_win_time_2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecentWinTime2() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "recent_win_time_3" field.</summary>
    public const int RecentWinTime3FieldNumber = 108;
    private readonly static uint RecentWinTime3DefaultValue = 0;

    private uint recentWinTime3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecentWinTime3 {
      get { if ((_hasBits1 & 65536) != 0) { return recentWinTime3_; } else { return RecentWinTime3DefaultValue; } }
      set {
        _hasBits1 |= 65536;
        recentWinTime3_ = value;
      }
    }
    /// <summary>Gets whether the "recent_win_time_3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecentWinTime3 {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "recent_win_time_3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecentWinTime3() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "coach_rating" field.</summary>
    public const int CoachRatingFieldNumber = 109;
    private readonly static uint CoachRatingDefaultValue = 0;

    private uint coachRating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CoachRating {
      get { if ((_hasBits1 & 131072) != 0) { return coachRating_; } else { return CoachRatingDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        coachRating_ = value;
      }
    }
    /// <summary>Gets whether the "coach_rating" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCoachRating {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "coach_rating" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCoachRating() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "queue_points" field.</summary>
    public const int QueuePointsFieldNumber = 114;
    private readonly static uint QueuePointsDefaultValue = 0;

    private uint queuePoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QueuePoints {
      get { if ((_hasBits1 & 262144) != 0) { return queuePoints_; } else { return QueuePointsDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        queuePoints_ = value;
      }
    }
    /// <summary>Gets whether the "queue_points" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQueuePoints {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "queue_points" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQueuePoints() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "role_handicaps" field.</summary>
    public const int RoleHandicapsFieldNumber = 115;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTAGameAccountClient.Types.RoleHandicap> _repeated_roleHandicaps_codec
        = pb::FieldCodec.ForMessage(922, global::Steam.Protos.Dota2.CSODOTAGameAccountClient.Types.RoleHandicap.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAGameAccountClient.Types.RoleHandicap> roleHandicaps_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAGameAccountClient.Types.RoleHandicap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAGameAccountClient.Types.RoleHandicap> RoleHandicaps {
      get { return roleHandicaps_; }
    }

    /// <summary>Field number for the "event_mode_recent_time" field.</summary>
    public const int EventModeRecentTimeFieldNumber = 120;
    private readonly static uint EventModeRecentTimeDefaultValue = 0;

    private uint eventModeRecentTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventModeRecentTime {
      get { if ((_hasBits1 & 524288) != 0) { return eventModeRecentTime_; } else { return EventModeRecentTimeDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        eventModeRecentTime_ = value;
      }
    }
    /// <summary>Gets whether the "event_mode_recent_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventModeRecentTime {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "event_mode_recent_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventModeRecentTime() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "mmr_recalibration_time" field.</summary>
    public const int MmrRecalibrationTimeFieldNumber = 121;
    private readonly static uint MmrRecalibrationTimeDefaultValue = 0;

    private uint mmrRecalibrationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MmrRecalibrationTime {
      get { if ((_hasBits1 & 1048576) != 0) { return mmrRecalibrationTime_; } else { return MmrRecalibrationTimeDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        mmrRecalibrationTime_ = value;
      }
    }
    /// <summary>Gets whether the "mmr_recalibration_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMmrRecalibrationTime {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "mmr_recalibration_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMmrRecalibrationTime() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "banned_hero_ids" field.</summary>
    public const int BannedHeroIdsFieldNumber = 123;
    private static readonly pb::FieldCodec<int> _repeated_bannedHeroIds_codec
        = pb::FieldCodec.ForInt32(984);
    private readonly pbc::RepeatedField<int> bannedHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BannedHeroIds {
      get { return bannedHeroIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAGameAccountClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAGameAccountClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Wins != other.Wins) return false;
      if (Losses != other.Losses) return false;
      if (Xp != other.Xp) return false;
      if (Level != other.Level) return false;
      if (InitialSkill != other.InitialSkill) return false;
      if (LeaverCount != other.LeaverCount) return false;
      if (SecondaryLeaverCount != other.SecondaryLeaverCount) return false;
      if (LowPriorityUntilDate != other.LowPriorityUntilDate) return false;
      if (PreventTextChatUntilDate != other.PreventTextChatUntilDate) return false;
      if (PreventVoiceUntilDate != other.PreventVoiceUntilDate) return false;
      if (PreventPublicTextChatUntilDate != other.PreventPublicTextChatUntilDate) return false;
      if (PreventNewPlayerChatUntilDate != other.PreventNewPlayerChatUntilDate) return false;
      if (LastAbandonedGameDate != other.LastAbandonedGameDate) return false;
      if (LastSecondaryAbandonedGameDate != other.LastSecondaryAbandonedGameDate) return false;
      if (LeaverPenaltyCount != other.LeaverPenaltyCount) return false;
      if (CompletedGameStreak != other.CompletedGameStreak) return false;
      if (AccountDisabledUntilDate != other.AccountDisabledUntilDate) return false;
      if (AccountDisabledCount != other.AccountDisabledCount) return false;
      if (MatchDisabledUntilDate != other.MatchDisabledUntilDate) return false;
      if (MatchDisabledCount != other.MatchDisabledCount) return false;
      if (Shutdownlawterminatetimestamp != other.Shutdownlawterminatetimestamp) return false;
      if (LowPriorityGamesRemaining != other.LowPriorityGamesRemaining) return false;
      if (RecruitmentLevel != other.RecruitmentLevel) return false;
      if (HasNewNotifications != other.HasNewNotifications) return false;
      if (IsLeagueAdmin != other.IsLeagueAdmin) return false;
      if (CasualGamesPlayed != other.CasualGamesPlayed) return false;
      if (SoloCompetitiveGamesPlayed != other.SoloCompetitiveGamesPlayed) return false;
      if (PartyCompetitiveGamesPlayed != other.PartyCompetitiveGamesPlayed) return false;
      if (Casual1V1GamesPlayed != other.Casual1V1GamesPlayed) return false;
      if (CurrAllHeroChallengeId != other.CurrAllHeroChallengeId) return false;
      if (PlayTimePoints != other.PlayTimePoints) return false;
      if (AccountFlags != other.AccountFlags) return false;
      if (PlayTimeLevel != other.PlayTimeLevel) return false;
      if (PlayerBehaviorSeqNumLastReport != other.PlayerBehaviorSeqNumLastReport) return false;
      if (PlayerBehaviorScoreLastReport != other.PlayerBehaviorScoreLastReport) return false;
      if (PlayerBehaviorReportOldData != other.PlayerBehaviorReportOldData) return false;
      if (TourneySkillLevel != other.TourneySkillLevel) return false;
      if (TourneyRecentParticipationDate != other.TourneyRecentParticipationDate) return false;
      if (AnchoredPhoneNumberId != other.AnchoredPhoneNumberId) return false;
      if (RankedMatchmakingBanUntilDate != other.RankedMatchmakingBanUntilDate) return false;
      if (RecentGameTime1 != other.RecentGameTime1) return false;
      if (RecentGameTime2 != other.RecentGameTime2) return false;
      if (RecentGameTime3 != other.RecentGameTime3) return false;
      if (FavoriteTeamPacked != other.FavoriteTeamPacked) return false;
      if (RecentReportTime != other.RecentReportTime) return false;
      if (CustomGameDisabledUntilDate != other.CustomGameDisabledUntilDate) return false;
      if (RecentWinTime1 != other.RecentWinTime1) return false;
      if (RecentWinTime2 != other.RecentWinTime2) return false;
      if (RecentWinTime3 != other.RecentWinTime3) return false;
      if (CoachRating != other.CoachRating) return false;
      if (QueuePoints != other.QueuePoints) return false;
      if(!roleHandicaps_.Equals(other.roleHandicaps_)) return false;
      if (EventModeRecentTime != other.EventModeRecentTime) return false;
      if (MmrRecalibrationTime != other.MmrRecalibrationTime) return false;
      if(!bannedHeroIds_.Equals(other.bannedHeroIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasWins) hash ^= Wins.GetHashCode();
      if (HasLosses) hash ^= Losses.GetHashCode();
      if (HasXp) hash ^= Xp.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasInitialSkill) hash ^= InitialSkill.GetHashCode();
      if (HasLeaverCount) hash ^= LeaverCount.GetHashCode();
      if (HasSecondaryLeaverCount) hash ^= SecondaryLeaverCount.GetHashCode();
      if (HasLowPriorityUntilDate) hash ^= LowPriorityUntilDate.GetHashCode();
      if (HasPreventTextChatUntilDate) hash ^= PreventTextChatUntilDate.GetHashCode();
      if (HasPreventVoiceUntilDate) hash ^= PreventVoiceUntilDate.GetHashCode();
      if (HasPreventPublicTextChatUntilDate) hash ^= PreventPublicTextChatUntilDate.GetHashCode();
      if (HasPreventNewPlayerChatUntilDate) hash ^= PreventNewPlayerChatUntilDate.GetHashCode();
      if (HasLastAbandonedGameDate) hash ^= LastAbandonedGameDate.GetHashCode();
      if (HasLastSecondaryAbandonedGameDate) hash ^= LastSecondaryAbandonedGameDate.GetHashCode();
      if (HasLeaverPenaltyCount) hash ^= LeaverPenaltyCount.GetHashCode();
      if (HasCompletedGameStreak) hash ^= CompletedGameStreak.GetHashCode();
      if (HasAccountDisabledUntilDate) hash ^= AccountDisabledUntilDate.GetHashCode();
      if (HasAccountDisabledCount) hash ^= AccountDisabledCount.GetHashCode();
      if (HasMatchDisabledUntilDate) hash ^= MatchDisabledUntilDate.GetHashCode();
      if (HasMatchDisabledCount) hash ^= MatchDisabledCount.GetHashCode();
      if (HasShutdownlawterminatetimestamp) hash ^= Shutdownlawterminatetimestamp.GetHashCode();
      if (HasLowPriorityGamesRemaining) hash ^= LowPriorityGamesRemaining.GetHashCode();
      if (HasRecruitmentLevel) hash ^= RecruitmentLevel.GetHashCode();
      if (HasHasNewNotifications) hash ^= HasNewNotifications.GetHashCode();
      if (HasIsLeagueAdmin) hash ^= IsLeagueAdmin.GetHashCode();
      if (HasCasualGamesPlayed) hash ^= CasualGamesPlayed.GetHashCode();
      if (HasSoloCompetitiveGamesPlayed) hash ^= SoloCompetitiveGamesPlayed.GetHashCode();
      if (HasPartyCompetitiveGamesPlayed) hash ^= PartyCompetitiveGamesPlayed.GetHashCode();
      if (HasCasual1V1GamesPlayed) hash ^= Casual1V1GamesPlayed.GetHashCode();
      if (HasCurrAllHeroChallengeId) hash ^= CurrAllHeroChallengeId.GetHashCode();
      if (HasPlayTimePoints) hash ^= PlayTimePoints.GetHashCode();
      if (HasAccountFlags) hash ^= AccountFlags.GetHashCode();
      if (HasPlayTimeLevel) hash ^= PlayTimeLevel.GetHashCode();
      if (HasPlayerBehaviorSeqNumLastReport) hash ^= PlayerBehaviorSeqNumLastReport.GetHashCode();
      if (HasPlayerBehaviorScoreLastReport) hash ^= PlayerBehaviorScoreLastReport.GetHashCode();
      if (HasPlayerBehaviorReportOldData) hash ^= PlayerBehaviorReportOldData.GetHashCode();
      if (HasTourneySkillLevel) hash ^= TourneySkillLevel.GetHashCode();
      if (HasTourneyRecentParticipationDate) hash ^= TourneyRecentParticipationDate.GetHashCode();
      if (HasAnchoredPhoneNumberId) hash ^= AnchoredPhoneNumberId.GetHashCode();
      if (HasRankedMatchmakingBanUntilDate) hash ^= RankedMatchmakingBanUntilDate.GetHashCode();
      if (HasRecentGameTime1) hash ^= RecentGameTime1.GetHashCode();
      if (HasRecentGameTime2) hash ^= RecentGameTime2.GetHashCode();
      if (HasRecentGameTime3) hash ^= RecentGameTime3.GetHashCode();
      if (HasFavoriteTeamPacked) hash ^= FavoriteTeamPacked.GetHashCode();
      if (HasRecentReportTime) hash ^= RecentReportTime.GetHashCode();
      if (HasCustomGameDisabledUntilDate) hash ^= CustomGameDisabledUntilDate.GetHashCode();
      if (HasRecentWinTime1) hash ^= RecentWinTime1.GetHashCode();
      if (HasRecentWinTime2) hash ^= RecentWinTime2.GetHashCode();
      if (HasRecentWinTime3) hash ^= RecentWinTime3.GetHashCode();
      if (HasCoachRating) hash ^= CoachRating.GetHashCode();
      if (HasQueuePoints) hash ^= QueuePoints.GetHashCode();
      hash ^= roleHandicaps_.GetHashCode();
      if (HasEventModeRecentTime) hash ^= EventModeRecentTime.GetHashCode();
      if (HasMmrRecalibrationTime) hash ^= MmrRecalibrationTime.GetHashCode();
      hash ^= bannedHeroIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasWins) {
        output.WriteRawTag(24);
        output.WriteUInt32(Wins);
      }
      if (HasLosses) {
        output.WriteRawTag(32);
        output.WriteUInt32(Losses);
      }
      if (HasXp) {
        output.WriteRawTag(96);
        output.WriteUInt32(Xp);
      }
      if (HasLevel) {
        output.WriteRawTag(104);
        output.WriteUInt32(Level);
      }
      if (HasInitialSkill) {
        output.WriteRawTag(112);
        output.WriteUInt32(InitialSkill);
      }
      if (HasLeaverCount) {
        output.WriteRawTag(120);
        output.WriteUInt32(LeaverCount);
      }
      if (HasLowPriorityUntilDate) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(LowPriorityUntilDate);
      }
      if (HasPreventTextChatUntilDate) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(PreventTextChatUntilDate);
      }
      if (HasPreventVoiceUntilDate) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(PreventVoiceUntilDate);
      }
      if (HasLastAbandonedGameDate) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(LastAbandonedGameDate);
      }
      if (HasLeaverPenaltyCount) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(LeaverPenaltyCount);
      }
      if (HasCompletedGameStreak) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(CompletedGameStreak);
      }
      if (HasAccountDisabledUntilDate) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(AccountDisabledUntilDate);
      }
      if (HasAccountDisabledCount) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(AccountDisabledCount);
      }
      if (HasMatchDisabledUntilDate) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(MatchDisabledUntilDate);
      }
      if (HasMatchDisabledCount) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(MatchDisabledCount);
      }
      if (HasShutdownlawterminatetimestamp) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(Shutdownlawterminatetimestamp);
      }
      if (HasLowPriorityGamesRemaining) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(LowPriorityGamesRemaining);
      }
      if (HasRecruitmentLevel) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(RecruitmentLevel);
      }
      if (HasHasNewNotifications) {
        output.WriteRawTag(192, 3);
        output.WriteBool(HasNewNotifications);
      }
      if (HasIsLeagueAdmin) {
        output.WriteRawTag(200, 3);
        output.WriteBool(IsLeagueAdmin);
      }
      if (HasSecondaryLeaverCount) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(SecondaryLeaverCount);
      }
      if (HasLastSecondaryAbandonedGameDate) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(LastSecondaryAbandonedGameDate);
      }
      if (HasCasualGamesPlayed) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(CasualGamesPlayed);
      }
      if (HasSoloCompetitiveGamesPlayed) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(SoloCompetitiveGamesPlayed);
      }
      if (HasPartyCompetitiveGamesPlayed) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(PartyCompetitiveGamesPlayed);
      }
      if (HasCasual1V1GamesPlayed) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(Casual1V1GamesPlayed);
      }
      if (HasCurrAllHeroChallengeId) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(CurrAllHeroChallengeId);
      }
      if (HasPlayTimePoints) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(PlayTimePoints);
      }
      if (HasAccountFlags) {
        output.WriteRawTag(168, 4);
        output.WriteUInt32(AccountFlags);
      }
      if (HasPlayTimeLevel) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(PlayTimeLevel);
      }
      if (HasPlayerBehaviorSeqNumLastReport) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(PlayerBehaviorSeqNumLastReport);
      }
      if (HasPlayerBehaviorScoreLastReport) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(PlayerBehaviorScoreLastReport);
      }
      if (HasPlayerBehaviorReportOldData) {
        output.WriteRawTag(200, 4);
        output.WriteBool(PlayerBehaviorReportOldData);
      }
      if (HasTourneySkillLevel) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(TourneySkillLevel);
      }
      if (HasTourneyRecentParticipationDate) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(TourneyRecentParticipationDate);
      }
      if (HasPreventPublicTextChatUntilDate) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(PreventPublicTextChatUntilDate);
      }
      if (HasAnchoredPhoneNumberId) {
        output.WriteRawTag(192, 5);
        output.WriteUInt64(AnchoredPhoneNumberId);
      }
      if (HasRankedMatchmakingBanUntilDate) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(RankedMatchmakingBanUntilDate);
      }
      if (HasRecentGameTime1) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(RecentGameTime1);
      }
      if (HasRecentGameTime2) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(RecentGameTime2);
      }
      if (HasRecentGameTime3) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(RecentGameTime3);
      }
      if (HasFavoriteTeamPacked) {
        output.WriteRawTag(184, 6);
        output.WriteUInt64(FavoriteTeamPacked);
      }
      if (HasRecentReportTime) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(RecentReportTime);
      }
      if (HasCustomGameDisabledUntilDate) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(CustomGameDisabledUntilDate);
      }
      if (HasRecentWinTime1) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(RecentWinTime1);
      }
      if (HasRecentWinTime2) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(RecentWinTime2);
      }
      if (HasRecentWinTime3) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(RecentWinTime3);
      }
      if (HasCoachRating) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(CoachRating);
      }
      if (HasQueuePoints) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(QueuePoints);
      }
      roleHandicaps_.WriteTo(output, _repeated_roleHandicaps_codec);
      if (HasEventModeRecentTime) {
        output.WriteRawTag(192, 7);
        output.WriteUInt32(EventModeRecentTime);
      }
      if (HasMmrRecalibrationTime) {
        output.WriteRawTag(200, 7);
        output.WriteUInt32(MmrRecalibrationTime);
      }
      if (HasPreventNewPlayerChatUntilDate) {
        output.WriteRawTag(208, 7);
        output.WriteUInt32(PreventNewPlayerChatUntilDate);
      }
      bannedHeroIds_.WriteTo(output, _repeated_bannedHeroIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasWins) {
        output.WriteRawTag(24);
        output.WriteUInt32(Wins);
      }
      if (HasLosses) {
        output.WriteRawTag(32);
        output.WriteUInt32(Losses);
      }
      if (HasXp) {
        output.WriteRawTag(96);
        output.WriteUInt32(Xp);
      }
      if (HasLevel) {
        output.WriteRawTag(104);
        output.WriteUInt32(Level);
      }
      if (HasInitialSkill) {
        output.WriteRawTag(112);
        output.WriteUInt32(InitialSkill);
      }
      if (HasLeaverCount) {
        output.WriteRawTag(120);
        output.WriteUInt32(LeaverCount);
      }
      if (HasLowPriorityUntilDate) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(LowPriorityUntilDate);
      }
      if (HasPreventTextChatUntilDate) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(PreventTextChatUntilDate);
      }
      if (HasPreventVoiceUntilDate) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(PreventVoiceUntilDate);
      }
      if (HasLastAbandonedGameDate) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(LastAbandonedGameDate);
      }
      if (HasLeaverPenaltyCount) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(LeaverPenaltyCount);
      }
      if (HasCompletedGameStreak) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(CompletedGameStreak);
      }
      if (HasAccountDisabledUntilDate) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(AccountDisabledUntilDate);
      }
      if (HasAccountDisabledCount) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(AccountDisabledCount);
      }
      if (HasMatchDisabledUntilDate) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(MatchDisabledUntilDate);
      }
      if (HasMatchDisabledCount) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(MatchDisabledCount);
      }
      if (HasShutdownlawterminatetimestamp) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(Shutdownlawterminatetimestamp);
      }
      if (HasLowPriorityGamesRemaining) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(LowPriorityGamesRemaining);
      }
      if (HasRecruitmentLevel) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(RecruitmentLevel);
      }
      if (HasHasNewNotifications) {
        output.WriteRawTag(192, 3);
        output.WriteBool(HasNewNotifications);
      }
      if (HasIsLeagueAdmin) {
        output.WriteRawTag(200, 3);
        output.WriteBool(IsLeagueAdmin);
      }
      if (HasSecondaryLeaverCount) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(SecondaryLeaverCount);
      }
      if (HasLastSecondaryAbandonedGameDate) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(LastSecondaryAbandonedGameDate);
      }
      if (HasCasualGamesPlayed) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(CasualGamesPlayed);
      }
      if (HasSoloCompetitiveGamesPlayed) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(SoloCompetitiveGamesPlayed);
      }
      if (HasPartyCompetitiveGamesPlayed) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(PartyCompetitiveGamesPlayed);
      }
      if (HasCasual1V1GamesPlayed) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(Casual1V1GamesPlayed);
      }
      if (HasCurrAllHeroChallengeId) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(CurrAllHeroChallengeId);
      }
      if (HasPlayTimePoints) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(PlayTimePoints);
      }
      if (HasAccountFlags) {
        output.WriteRawTag(168, 4);
        output.WriteUInt32(AccountFlags);
      }
      if (HasPlayTimeLevel) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(PlayTimeLevel);
      }
      if (HasPlayerBehaviorSeqNumLastReport) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(PlayerBehaviorSeqNumLastReport);
      }
      if (HasPlayerBehaviorScoreLastReport) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(PlayerBehaviorScoreLastReport);
      }
      if (HasPlayerBehaviorReportOldData) {
        output.WriteRawTag(200, 4);
        output.WriteBool(PlayerBehaviorReportOldData);
      }
      if (HasTourneySkillLevel) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(TourneySkillLevel);
      }
      if (HasTourneyRecentParticipationDate) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(TourneyRecentParticipationDate);
      }
      if (HasPreventPublicTextChatUntilDate) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(PreventPublicTextChatUntilDate);
      }
      if (HasAnchoredPhoneNumberId) {
        output.WriteRawTag(192, 5);
        output.WriteUInt64(AnchoredPhoneNumberId);
      }
      if (HasRankedMatchmakingBanUntilDate) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(RankedMatchmakingBanUntilDate);
      }
      if (HasRecentGameTime1) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(RecentGameTime1);
      }
      if (HasRecentGameTime2) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(RecentGameTime2);
      }
      if (HasRecentGameTime3) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(RecentGameTime3);
      }
      if (HasFavoriteTeamPacked) {
        output.WriteRawTag(184, 6);
        output.WriteUInt64(FavoriteTeamPacked);
      }
      if (HasRecentReportTime) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(RecentReportTime);
      }
      if (HasCustomGameDisabledUntilDate) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(CustomGameDisabledUntilDate);
      }
      if (HasRecentWinTime1) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(RecentWinTime1);
      }
      if (HasRecentWinTime2) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(RecentWinTime2);
      }
      if (HasRecentWinTime3) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(RecentWinTime3);
      }
      if (HasCoachRating) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(CoachRating);
      }
      if (HasQueuePoints) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(QueuePoints);
      }
      roleHandicaps_.WriteTo(ref output, _repeated_roleHandicaps_codec);
      if (HasEventModeRecentTime) {
        output.WriteRawTag(192, 7);
        output.WriteUInt32(EventModeRecentTime);
      }
      if (HasMmrRecalibrationTime) {
        output.WriteRawTag(200, 7);
        output.WriteUInt32(MmrRecalibrationTime);
      }
      if (HasPreventNewPlayerChatUntilDate) {
        output.WriteRawTag(208, 7);
        output.WriteUInt32(PreventNewPlayerChatUntilDate);
      }
      bannedHeroIds_.WriteTo(ref output, _repeated_bannedHeroIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasWins) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Wins);
      }
      if (HasLosses) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Losses);
      }
      if (HasXp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Xp);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HasInitialSkill) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InitialSkill);
      }
      if (HasLeaverCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaverCount);
      }
      if (HasSecondaryLeaverCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SecondaryLeaverCount);
      }
      if (HasLowPriorityUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LowPriorityUntilDate);
      }
      if (HasPreventTextChatUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PreventTextChatUntilDate);
      }
      if (HasPreventVoiceUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PreventVoiceUntilDate);
      }
      if (HasPreventPublicTextChatUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PreventPublicTextChatUntilDate);
      }
      if (HasPreventNewPlayerChatUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PreventNewPlayerChatUntilDate);
      }
      if (HasLastAbandonedGameDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastAbandonedGameDate);
      }
      if (HasLastSecondaryAbandonedGameDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastSecondaryAbandonedGameDate);
      }
      if (HasLeaverPenaltyCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeaverPenaltyCount);
      }
      if (HasCompletedGameStreak) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CompletedGameStreak);
      }
      if (HasAccountDisabledUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AccountDisabledUntilDate);
      }
      if (HasAccountDisabledCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AccountDisabledCount);
      }
      if (HasMatchDisabledUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchDisabledUntilDate);
      }
      if (HasMatchDisabledCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchDisabledCount);
      }
      if (HasShutdownlawterminatetimestamp) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Shutdownlawterminatetimestamp);
      }
      if (HasLowPriorityGamesRemaining) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LowPriorityGamesRemaining);
      }
      if (HasRecruitmentLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecruitmentLevel);
      }
      if (HasHasNewNotifications) {
        size += 2 + 1;
      }
      if (HasIsLeagueAdmin) {
        size += 2 + 1;
      }
      if (HasCasualGamesPlayed) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CasualGamesPlayed);
      }
      if (HasSoloCompetitiveGamesPlayed) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SoloCompetitiveGamesPlayed);
      }
      if (HasPartyCompetitiveGamesPlayed) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PartyCompetitiveGamesPlayed);
      }
      if (HasCasual1V1GamesPlayed) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Casual1V1GamesPlayed);
      }
      if (HasCurrAllHeroChallengeId) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurrAllHeroChallengeId);
      }
      if (HasPlayTimePoints) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayTimePoints);
      }
      if (HasAccountFlags) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AccountFlags);
      }
      if (HasPlayTimeLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayTimeLevel);
      }
      if (HasPlayerBehaviorSeqNumLastReport) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayerBehaviorSeqNumLastReport);
      }
      if (HasPlayerBehaviorScoreLastReport) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayerBehaviorScoreLastReport);
      }
      if (HasPlayerBehaviorReportOldData) {
        size += 2 + 1;
      }
      if (HasTourneySkillLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TourneySkillLevel);
      }
      if (HasTourneyRecentParticipationDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TourneyRecentParticipationDate);
      }
      if (HasAnchoredPhoneNumberId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AnchoredPhoneNumberId);
      }
      if (HasRankedMatchmakingBanUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RankedMatchmakingBanUntilDate);
      }
      if (HasRecentGameTime1) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecentGameTime1);
      }
      if (HasRecentGameTime2) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecentGameTime2);
      }
      if (HasRecentGameTime3) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecentGameTime3);
      }
      if (HasFavoriteTeamPacked) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(FavoriteTeamPacked);
      }
      if (HasRecentReportTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecentReportTime);
      }
      if (HasCustomGameDisabledUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CustomGameDisabledUntilDate);
      }
      if (HasRecentWinTime1) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecentWinTime1);
      }
      if (HasRecentWinTime2) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecentWinTime2);
      }
      if (HasRecentWinTime3) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecentWinTime3);
      }
      if (HasCoachRating) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CoachRating);
      }
      if (HasQueuePoints) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(QueuePoints);
      }
      size += roleHandicaps_.CalculateSize(_repeated_roleHandicaps_codec);
      if (HasEventModeRecentTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EventModeRecentTime);
      }
      if (HasMmrRecalibrationTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MmrRecalibrationTime);
      }
      size += bannedHeroIds_.CalculateSize(_repeated_bannedHeroIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAGameAccountClient other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasWins) {
        Wins = other.Wins;
      }
      if (other.HasLosses) {
        Losses = other.Losses;
      }
      if (other.HasXp) {
        Xp = other.Xp;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasInitialSkill) {
        InitialSkill = other.InitialSkill;
      }
      if (other.HasLeaverCount) {
        LeaverCount = other.LeaverCount;
      }
      if (other.HasSecondaryLeaverCount) {
        SecondaryLeaverCount = other.SecondaryLeaverCount;
      }
      if (other.HasLowPriorityUntilDate) {
        LowPriorityUntilDate = other.LowPriorityUntilDate;
      }
      if (other.HasPreventTextChatUntilDate) {
        PreventTextChatUntilDate = other.PreventTextChatUntilDate;
      }
      if (other.HasPreventVoiceUntilDate) {
        PreventVoiceUntilDate = other.PreventVoiceUntilDate;
      }
      if (other.HasPreventPublicTextChatUntilDate) {
        PreventPublicTextChatUntilDate = other.PreventPublicTextChatUntilDate;
      }
      if (other.HasPreventNewPlayerChatUntilDate) {
        PreventNewPlayerChatUntilDate = other.PreventNewPlayerChatUntilDate;
      }
      if (other.HasLastAbandonedGameDate) {
        LastAbandonedGameDate = other.LastAbandonedGameDate;
      }
      if (other.HasLastSecondaryAbandonedGameDate) {
        LastSecondaryAbandonedGameDate = other.LastSecondaryAbandonedGameDate;
      }
      if (other.HasLeaverPenaltyCount) {
        LeaverPenaltyCount = other.LeaverPenaltyCount;
      }
      if (other.HasCompletedGameStreak) {
        CompletedGameStreak = other.CompletedGameStreak;
      }
      if (other.HasAccountDisabledUntilDate) {
        AccountDisabledUntilDate = other.AccountDisabledUntilDate;
      }
      if (other.HasAccountDisabledCount) {
        AccountDisabledCount = other.AccountDisabledCount;
      }
      if (other.HasMatchDisabledUntilDate) {
        MatchDisabledUntilDate = other.MatchDisabledUntilDate;
      }
      if (other.HasMatchDisabledCount) {
        MatchDisabledCount = other.MatchDisabledCount;
      }
      if (other.HasShutdownlawterminatetimestamp) {
        Shutdownlawterminatetimestamp = other.Shutdownlawterminatetimestamp;
      }
      if (other.HasLowPriorityGamesRemaining) {
        LowPriorityGamesRemaining = other.LowPriorityGamesRemaining;
      }
      if (other.HasRecruitmentLevel) {
        RecruitmentLevel = other.RecruitmentLevel;
      }
      if (other.HasHasNewNotifications) {
        HasNewNotifications = other.HasNewNotifications;
      }
      if (other.HasIsLeagueAdmin) {
        IsLeagueAdmin = other.IsLeagueAdmin;
      }
      if (other.HasCasualGamesPlayed) {
        CasualGamesPlayed = other.CasualGamesPlayed;
      }
      if (other.HasSoloCompetitiveGamesPlayed) {
        SoloCompetitiveGamesPlayed = other.SoloCompetitiveGamesPlayed;
      }
      if (other.HasPartyCompetitiveGamesPlayed) {
        PartyCompetitiveGamesPlayed = other.PartyCompetitiveGamesPlayed;
      }
      if (other.HasCasual1V1GamesPlayed) {
        Casual1V1GamesPlayed = other.Casual1V1GamesPlayed;
      }
      if (other.HasCurrAllHeroChallengeId) {
        CurrAllHeroChallengeId = other.CurrAllHeroChallengeId;
      }
      if (other.HasPlayTimePoints) {
        PlayTimePoints = other.PlayTimePoints;
      }
      if (other.HasAccountFlags) {
        AccountFlags = other.AccountFlags;
      }
      if (other.HasPlayTimeLevel) {
        PlayTimeLevel = other.PlayTimeLevel;
      }
      if (other.HasPlayerBehaviorSeqNumLastReport) {
        PlayerBehaviorSeqNumLastReport = other.PlayerBehaviorSeqNumLastReport;
      }
      if (other.HasPlayerBehaviorScoreLastReport) {
        PlayerBehaviorScoreLastReport = other.PlayerBehaviorScoreLastReport;
      }
      if (other.HasPlayerBehaviorReportOldData) {
        PlayerBehaviorReportOldData = other.PlayerBehaviorReportOldData;
      }
      if (other.HasTourneySkillLevel) {
        TourneySkillLevel = other.TourneySkillLevel;
      }
      if (other.HasTourneyRecentParticipationDate) {
        TourneyRecentParticipationDate = other.TourneyRecentParticipationDate;
      }
      if (other.HasAnchoredPhoneNumberId) {
        AnchoredPhoneNumberId = other.AnchoredPhoneNumberId;
      }
      if (other.HasRankedMatchmakingBanUntilDate) {
        RankedMatchmakingBanUntilDate = other.RankedMatchmakingBanUntilDate;
      }
      if (other.HasRecentGameTime1) {
        RecentGameTime1 = other.RecentGameTime1;
      }
      if (other.HasRecentGameTime2) {
        RecentGameTime2 = other.RecentGameTime2;
      }
      if (other.HasRecentGameTime3) {
        RecentGameTime3 = other.RecentGameTime3;
      }
      if (other.HasFavoriteTeamPacked) {
        FavoriteTeamPacked = other.FavoriteTeamPacked;
      }
      if (other.HasRecentReportTime) {
        RecentReportTime = other.RecentReportTime;
      }
      if (other.HasCustomGameDisabledUntilDate) {
        CustomGameDisabledUntilDate = other.CustomGameDisabledUntilDate;
      }
      if (other.HasRecentWinTime1) {
        RecentWinTime1 = other.RecentWinTime1;
      }
      if (other.HasRecentWinTime2) {
        RecentWinTime2 = other.RecentWinTime2;
      }
      if (other.HasRecentWinTime3) {
        RecentWinTime3 = other.RecentWinTime3;
      }
      if (other.HasCoachRating) {
        CoachRating = other.CoachRating;
      }
      if (other.HasQueuePoints) {
        QueuePoints = other.QueuePoints;
      }
      roleHandicaps_.Add(other.roleHandicaps_);
      if (other.HasEventModeRecentTime) {
        EventModeRecentTime = other.EventModeRecentTime;
      }
      if (other.HasMmrRecalibrationTime) {
        MmrRecalibrationTime = other.MmrRecalibrationTime;
      }
      bannedHeroIds_.Add(other.bannedHeroIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            Wins = input.ReadUInt32();
            break;
          }
          case 32: {
            Losses = input.ReadUInt32();
            break;
          }
          case 96: {
            Xp = input.ReadUInt32();
            break;
          }
          case 104: {
            Level = input.ReadUInt32();
            break;
          }
          case 112: {
            InitialSkill = input.ReadUInt32();
            break;
          }
          case 120: {
            LeaverCount = input.ReadUInt32();
            break;
          }
          case 144: {
            LowPriorityUntilDate = input.ReadUInt32();
            break;
          }
          case 160: {
            PreventTextChatUntilDate = input.ReadUInt32();
            break;
          }
          case 168: {
            PreventVoiceUntilDate = input.ReadUInt32();
            break;
          }
          case 176: {
            LastAbandonedGameDate = input.ReadUInt32();
            break;
          }
          case 184: {
            LeaverPenaltyCount = input.ReadUInt32();
            break;
          }
          case 192: {
            CompletedGameStreak = input.ReadUInt32();
            break;
          }
          case 304: {
            AccountDisabledUntilDate = input.ReadUInt32();
            break;
          }
          case 312: {
            AccountDisabledCount = input.ReadUInt32();
            break;
          }
          case 328: {
            MatchDisabledUntilDate = input.ReadUInt32();
            break;
          }
          case 336: {
            MatchDisabledCount = input.ReadUInt32();
            break;
          }
          case 376: {
            Shutdownlawterminatetimestamp = input.ReadUInt32();
            break;
          }
          case 384: {
            LowPriorityGamesRemaining = input.ReadUInt32();
            break;
          }
          case 440: {
            RecruitmentLevel = input.ReadUInt32();
            break;
          }
          case 448: {
            HasNewNotifications = input.ReadBool();
            break;
          }
          case 456: {
            IsLeagueAdmin = input.ReadBool();
            break;
          }
          case 464: {
            SecondaryLeaverCount = input.ReadUInt32();
            break;
          }
          case 472: {
            LastSecondaryAbandonedGameDate = input.ReadUInt32();
            break;
          }
          case 480: {
            CasualGamesPlayed = input.ReadUInt32();
            break;
          }
          case 488: {
            SoloCompetitiveGamesPlayed = input.ReadUInt32();
            break;
          }
          case 496: {
            PartyCompetitiveGamesPlayed = input.ReadUInt32();
            break;
          }
          case 520: {
            Casual1V1GamesPlayed = input.ReadUInt32();
            break;
          }
          case 536: {
            CurrAllHeroChallengeId = input.ReadInt32();
            break;
          }
          case 544: {
            PlayTimePoints = input.ReadUInt32();
            break;
          }
          case 552: {
            AccountFlags = input.ReadUInt32();
            break;
          }
          case 560: {
            PlayTimeLevel = input.ReadUInt32();
            break;
          }
          case 568: {
            PlayerBehaviorSeqNumLastReport = input.ReadUInt32();
            break;
          }
          case 576: {
            PlayerBehaviorScoreLastReport = input.ReadUInt32();
            break;
          }
          case 584: {
            PlayerBehaviorReportOldData = input.ReadBool();
            break;
          }
          case 592: {
            TourneySkillLevel = input.ReadUInt32();
            break;
          }
          case 680: {
            TourneyRecentParticipationDate = input.ReadUInt32();
            break;
          }
          case 688: {
            PreventPublicTextChatUntilDate = input.ReadUInt32();
            break;
          }
          case 704: {
            AnchoredPhoneNumberId = input.ReadUInt64();
            break;
          }
          case 712: {
            RankedMatchmakingBanUntilDate = input.ReadUInt32();
            break;
          }
          case 720: {
            RecentGameTime1 = input.ReadUInt32();
            break;
          }
          case 728: {
            RecentGameTime2 = input.ReadUInt32();
            break;
          }
          case 736: {
            RecentGameTime3 = input.ReadUInt32();
            break;
          }
          case 824: {
            FavoriteTeamPacked = input.ReadUInt64();
            break;
          }
          case 832: {
            RecentReportTime = input.ReadUInt32();
            break;
          }
          case 840: {
            CustomGameDisabledUntilDate = input.ReadUInt32();
            break;
          }
          case 848: {
            RecentWinTime1 = input.ReadUInt32();
            break;
          }
          case 856: {
            RecentWinTime2 = input.ReadUInt32();
            break;
          }
          case 864: {
            RecentWinTime3 = input.ReadUInt32();
            break;
          }
          case 872: {
            CoachRating = input.ReadUInt32();
            break;
          }
          case 912: {
            QueuePoints = input.ReadUInt32();
            break;
          }
          case 922: {
            roleHandicaps_.AddEntriesFrom(input, _repeated_roleHandicaps_codec);
            break;
          }
          case 960: {
            EventModeRecentTime = input.ReadUInt32();
            break;
          }
          case 968: {
            MmrRecalibrationTime = input.ReadUInt32();
            break;
          }
          case 976: {
            PreventNewPlayerChatUntilDate = input.ReadUInt32();
            break;
          }
          case 986:
          case 984: {
            bannedHeroIds_.AddEntriesFrom(input, _repeated_bannedHeroIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            Wins = input.ReadUInt32();
            break;
          }
          case 32: {
            Losses = input.ReadUInt32();
            break;
          }
          case 96: {
            Xp = input.ReadUInt32();
            break;
          }
          case 104: {
            Level = input.ReadUInt32();
            break;
          }
          case 112: {
            InitialSkill = input.ReadUInt32();
            break;
          }
          case 120: {
            LeaverCount = input.ReadUInt32();
            break;
          }
          case 144: {
            LowPriorityUntilDate = input.ReadUInt32();
            break;
          }
          case 160: {
            PreventTextChatUntilDate = input.ReadUInt32();
            break;
          }
          case 168: {
            PreventVoiceUntilDate = input.ReadUInt32();
            break;
          }
          case 176: {
            LastAbandonedGameDate = input.ReadUInt32();
            break;
          }
          case 184: {
            LeaverPenaltyCount = input.ReadUInt32();
            break;
          }
          case 192: {
            CompletedGameStreak = input.ReadUInt32();
            break;
          }
          case 304: {
            AccountDisabledUntilDate = input.ReadUInt32();
            break;
          }
          case 312: {
            AccountDisabledCount = input.ReadUInt32();
            break;
          }
          case 328: {
            MatchDisabledUntilDate = input.ReadUInt32();
            break;
          }
          case 336: {
            MatchDisabledCount = input.ReadUInt32();
            break;
          }
          case 376: {
            Shutdownlawterminatetimestamp = input.ReadUInt32();
            break;
          }
          case 384: {
            LowPriorityGamesRemaining = input.ReadUInt32();
            break;
          }
          case 440: {
            RecruitmentLevel = input.ReadUInt32();
            break;
          }
          case 448: {
            HasNewNotifications = input.ReadBool();
            break;
          }
          case 456: {
            IsLeagueAdmin = input.ReadBool();
            break;
          }
          case 464: {
            SecondaryLeaverCount = input.ReadUInt32();
            break;
          }
          case 472: {
            LastSecondaryAbandonedGameDate = input.ReadUInt32();
            break;
          }
          case 480: {
            CasualGamesPlayed = input.ReadUInt32();
            break;
          }
          case 488: {
            SoloCompetitiveGamesPlayed = input.ReadUInt32();
            break;
          }
          case 496: {
            PartyCompetitiveGamesPlayed = input.ReadUInt32();
            break;
          }
          case 520: {
            Casual1V1GamesPlayed = input.ReadUInt32();
            break;
          }
          case 536: {
            CurrAllHeroChallengeId = input.ReadInt32();
            break;
          }
          case 544: {
            PlayTimePoints = input.ReadUInt32();
            break;
          }
          case 552: {
            AccountFlags = input.ReadUInt32();
            break;
          }
          case 560: {
            PlayTimeLevel = input.ReadUInt32();
            break;
          }
          case 568: {
            PlayerBehaviorSeqNumLastReport = input.ReadUInt32();
            break;
          }
          case 576: {
            PlayerBehaviorScoreLastReport = input.ReadUInt32();
            break;
          }
          case 584: {
            PlayerBehaviorReportOldData = input.ReadBool();
            break;
          }
          case 592: {
            TourneySkillLevel = input.ReadUInt32();
            break;
          }
          case 680: {
            TourneyRecentParticipationDate = input.ReadUInt32();
            break;
          }
          case 688: {
            PreventPublicTextChatUntilDate = input.ReadUInt32();
            break;
          }
          case 704: {
            AnchoredPhoneNumberId = input.ReadUInt64();
            break;
          }
          case 712: {
            RankedMatchmakingBanUntilDate = input.ReadUInt32();
            break;
          }
          case 720: {
            RecentGameTime1 = input.ReadUInt32();
            break;
          }
          case 728: {
            RecentGameTime2 = input.ReadUInt32();
            break;
          }
          case 736: {
            RecentGameTime3 = input.ReadUInt32();
            break;
          }
          case 824: {
            FavoriteTeamPacked = input.ReadUInt64();
            break;
          }
          case 832: {
            RecentReportTime = input.ReadUInt32();
            break;
          }
          case 840: {
            CustomGameDisabledUntilDate = input.ReadUInt32();
            break;
          }
          case 848: {
            RecentWinTime1 = input.ReadUInt32();
            break;
          }
          case 856: {
            RecentWinTime2 = input.ReadUInt32();
            break;
          }
          case 864: {
            RecentWinTime3 = input.ReadUInt32();
            break;
          }
          case 872: {
            CoachRating = input.ReadUInt32();
            break;
          }
          case 912: {
            QueuePoints = input.ReadUInt32();
            break;
          }
          case 922: {
            roleHandicaps_.AddEntriesFrom(ref input, _repeated_roleHandicaps_codec);
            break;
          }
          case 960: {
            EventModeRecentTime = input.ReadUInt32();
            break;
          }
          case 968: {
            MmrRecalibrationTime = input.ReadUInt32();
            break;
          }
          case 976: {
            PreventNewPlayerChatUntilDate = input.ReadUInt32();
            break;
          }
          case 986:
          case 984: {
            bannedHeroIds_.AddEntriesFrom(ref input, _repeated_bannedHeroIds_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CSODOTAGameAccountClient message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class RoleHandicap : pb::IMessage<RoleHandicap>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RoleHandicap> _parser = new pb::MessageParser<RoleHandicap>(() => new RoleHandicap());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoleHandicap> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CSODOTAGameAccountClient.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoleHandicap() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoleHandicap(RoleHandicap other) : this() {
          _hasBits0 = other._hasBits0;
          role_ = other.role_;
          handicap_ = other.handicap_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoleHandicap Clone() {
          return new RoleHandicap(this);
        }

        /// <summary>Field number for the "role" field.</summary>
        public const int RoleFieldNumber = 1;
        private readonly static uint RoleDefaultValue = 0;

        private uint role_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Role {
          get { if ((_hasBits0 & 1) != 0) { return role_; } else { return RoleDefaultValue; } }
          set {
            _hasBits0 |= 1;
            role_ = value;
          }
        }
        /// <summary>Gets whether the "role" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRole {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "role" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRole() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "handicap" field.</summary>
        public const int HandicapFieldNumber = 2;
        private readonly static float HandicapDefaultValue = 0F;

        private float handicap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Handicap {
          get { if ((_hasBits0 & 2) != 0) { return handicap_; } else { return HandicapDefaultValue; } }
          set {
            _hasBits0 |= 2;
            handicap_ = value;
          }
        }
        /// <summary>Gets whether the "handicap" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHandicap {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "handicap" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHandicap() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RoleHandicap);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RoleHandicap other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Role != other.Role) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Handicap, other.Handicap)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasRole) hash ^= Role.GetHashCode();
          if (HasHandicap) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Handicap);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasRole) {
            output.WriteRawTag(8);
            output.WriteUInt32(Role);
          }
          if (HasHandicap) {
            output.WriteRawTag(21);
            output.WriteFloat(Handicap);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasRole) {
            output.WriteRawTag(8);
            output.WriteUInt32(Role);
          }
          if (HasHandicap) {
            output.WriteRawTag(21);
            output.WriteFloat(Handicap);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasRole) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Role);
          }
          if (HasHandicap) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RoleHandicap other) {
          if (other == null) {
            return;
          }
          if (other.HasRole) {
            Role = other.Role;
          }
          if (other.HasHandicap) {
            Handicap = other.Handicap;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Role = input.ReadUInt32();
                break;
              }
              case 21: {
                Handicap = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Role = input.ReadUInt32();
                break;
              }
              case 21: {
                Handicap = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CSODOTAGameAccountPlus : pb::IMessage<CSODOTAGameAccountPlus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAGameAccountPlus> _parser = new pb::MessageParser<CSODOTAGameAccountPlus>(() => new CSODOTAGameAccountPlus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAGameAccountPlus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAGameAccountPlus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAGameAccountPlus(CSODOTAGameAccountPlus other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      originalStartDate_ = other.originalStartDate_;
      plusFlags_ = other.plusFlags_;
      plusStatus_ = other.plusStatus_;
      prepaidTimeStart_ = other.prepaidTimeStart_;
      prepaidTimeBalance_ = other.prepaidTimeBalance_;
      nextPaymentDate_ = other.nextPaymentDate_;
      steamAgreementId_ = other.steamAgreementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAGameAccountPlus Clone() {
      return new CSODOTAGameAccountPlus(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "original_start_date" field.</summary>
    public const int OriginalStartDateFieldNumber = 2;
    private readonly static uint OriginalStartDateDefaultValue = 0;

    private uint originalStartDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginalStartDate {
      get { if ((_hasBits0 & 2) != 0) { return originalStartDate_; } else { return OriginalStartDateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        originalStartDate_ = value;
      }
    }
    /// <summary>Gets whether the "original_start_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalStartDate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "original_start_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalStartDate() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "plus_flags" field.</summary>
    public const int PlusFlagsFieldNumber = 3;
    private readonly static uint PlusFlagsDefaultValue = 0;

    private uint plusFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlusFlags {
      get { if ((_hasBits0 & 4) != 0) { return plusFlags_; } else { return PlusFlagsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        plusFlags_ = value;
      }
    }
    /// <summary>Gets whether the "plus_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlusFlags {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "plus_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlusFlags() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "plus_status" field.</summary>
    public const int PlusStatusFieldNumber = 4;
    private readonly static uint PlusStatusDefaultValue = 0;

    private uint plusStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlusStatus {
      get { if ((_hasBits0 & 8) != 0) { return plusStatus_; } else { return PlusStatusDefaultValue; } }
      set {
        _hasBits0 |= 8;
        plusStatus_ = value;
      }
    }
    /// <summary>Gets whether the "plus_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlusStatus {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "plus_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlusStatus() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "prepaid_time_start" field.</summary>
    public const int PrepaidTimeStartFieldNumber = 5;
    private readonly static uint PrepaidTimeStartDefaultValue = 0;

    private uint prepaidTimeStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrepaidTimeStart {
      get { if ((_hasBits0 & 16) != 0) { return prepaidTimeStart_; } else { return PrepaidTimeStartDefaultValue; } }
      set {
        _hasBits0 |= 16;
        prepaidTimeStart_ = value;
      }
    }
    /// <summary>Gets whether the "prepaid_time_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrepaidTimeStart {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "prepaid_time_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrepaidTimeStart() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "prepaid_time_balance" field.</summary>
    public const int PrepaidTimeBalanceFieldNumber = 6;
    private readonly static uint PrepaidTimeBalanceDefaultValue = 0;

    private uint prepaidTimeBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrepaidTimeBalance {
      get { if ((_hasBits0 & 32) != 0) { return prepaidTimeBalance_; } else { return PrepaidTimeBalanceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        prepaidTimeBalance_ = value;
      }
    }
    /// <summary>Gets whether the "prepaid_time_balance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrepaidTimeBalance {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "prepaid_time_balance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrepaidTimeBalance() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "next_payment_date" field.</summary>
    public const int NextPaymentDateFieldNumber = 7;
    private readonly static uint NextPaymentDateDefaultValue = 0;

    private uint nextPaymentDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextPaymentDate {
      get { if ((_hasBits0 & 64) != 0) { return nextPaymentDate_; } else { return NextPaymentDateDefaultValue; } }
      set {
        _hasBits0 |= 64;
        nextPaymentDate_ = value;
      }
    }
    /// <summary>Gets whether the "next_payment_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNextPaymentDate {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "next_payment_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNextPaymentDate() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "steam_agreement_id" field.</summary>
    public const int SteamAgreementIdFieldNumber = 8;
    private readonly static ulong SteamAgreementIdDefaultValue = 0UL;

    private ulong steamAgreementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamAgreementId {
      get { if ((_hasBits0 & 128) != 0) { return steamAgreementId_; } else { return SteamAgreementIdDefaultValue; } }
      set {
        _hasBits0 |= 128;
        steamAgreementId_ = value;
      }
    }
    /// <summary>Gets whether the "steam_agreement_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSteamAgreementId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "steam_agreement_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSteamAgreementId() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAGameAccountPlus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAGameAccountPlus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (OriginalStartDate != other.OriginalStartDate) return false;
      if (PlusFlags != other.PlusFlags) return false;
      if (PlusStatus != other.PlusStatus) return false;
      if (PrepaidTimeStart != other.PrepaidTimeStart) return false;
      if (PrepaidTimeBalance != other.PrepaidTimeBalance) return false;
      if (NextPaymentDate != other.NextPaymentDate) return false;
      if (SteamAgreementId != other.SteamAgreementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasOriginalStartDate) hash ^= OriginalStartDate.GetHashCode();
      if (HasPlusFlags) hash ^= PlusFlags.GetHashCode();
      if (HasPlusStatus) hash ^= PlusStatus.GetHashCode();
      if (HasPrepaidTimeStart) hash ^= PrepaidTimeStart.GetHashCode();
      if (HasPrepaidTimeBalance) hash ^= PrepaidTimeBalance.GetHashCode();
      if (HasNextPaymentDate) hash ^= NextPaymentDate.GetHashCode();
      if (HasSteamAgreementId) hash ^= SteamAgreementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasOriginalStartDate) {
        output.WriteRawTag(16);
        output.WriteUInt32(OriginalStartDate);
      }
      if (HasPlusFlags) {
        output.WriteRawTag(24);
        output.WriteUInt32(PlusFlags);
      }
      if (HasPlusStatus) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlusStatus);
      }
      if (HasPrepaidTimeStart) {
        output.WriteRawTag(40);
        output.WriteUInt32(PrepaidTimeStart);
      }
      if (HasPrepaidTimeBalance) {
        output.WriteRawTag(48);
        output.WriteUInt32(PrepaidTimeBalance);
      }
      if (HasNextPaymentDate) {
        output.WriteRawTag(61);
        output.WriteFixed32(NextPaymentDate);
      }
      if (HasSteamAgreementId) {
        output.WriteRawTag(65);
        output.WriteFixed64(SteamAgreementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasOriginalStartDate) {
        output.WriteRawTag(16);
        output.WriteUInt32(OriginalStartDate);
      }
      if (HasPlusFlags) {
        output.WriteRawTag(24);
        output.WriteUInt32(PlusFlags);
      }
      if (HasPlusStatus) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlusStatus);
      }
      if (HasPrepaidTimeStart) {
        output.WriteRawTag(40);
        output.WriteUInt32(PrepaidTimeStart);
      }
      if (HasPrepaidTimeBalance) {
        output.WriteRawTag(48);
        output.WriteUInt32(PrepaidTimeBalance);
      }
      if (HasNextPaymentDate) {
        output.WriteRawTag(61);
        output.WriteFixed32(NextPaymentDate);
      }
      if (HasSteamAgreementId) {
        output.WriteRawTag(65);
        output.WriteFixed64(SteamAgreementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasOriginalStartDate) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginalStartDate);
      }
      if (HasPlusFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlusFlags);
      }
      if (HasPlusStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlusStatus);
      }
      if (HasPrepaidTimeStart) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrepaidTimeStart);
      }
      if (HasPrepaidTimeBalance) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrepaidTimeBalance);
      }
      if (HasNextPaymentDate) {
        size += 1 + 4;
      }
      if (HasSteamAgreementId) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAGameAccountPlus other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasOriginalStartDate) {
        OriginalStartDate = other.OriginalStartDate;
      }
      if (other.HasPlusFlags) {
        PlusFlags = other.PlusFlags;
      }
      if (other.HasPlusStatus) {
        PlusStatus = other.PlusStatus;
      }
      if (other.HasPrepaidTimeStart) {
        PrepaidTimeStart = other.PrepaidTimeStart;
      }
      if (other.HasPrepaidTimeBalance) {
        PrepaidTimeBalance = other.PrepaidTimeBalance;
      }
      if (other.HasNextPaymentDate) {
        NextPaymentDate = other.NextPaymentDate;
      }
      if (other.HasSteamAgreementId) {
        SteamAgreementId = other.SteamAgreementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            OriginalStartDate = input.ReadUInt32();
            break;
          }
          case 24: {
            PlusFlags = input.ReadUInt32();
            break;
          }
          case 32: {
            PlusStatus = input.ReadUInt32();
            break;
          }
          case 40: {
            PrepaidTimeStart = input.ReadUInt32();
            break;
          }
          case 48: {
            PrepaidTimeBalance = input.ReadUInt32();
            break;
          }
          case 61: {
            NextPaymentDate = input.ReadFixed32();
            break;
          }
          case 65: {
            SteamAgreementId = input.ReadFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            OriginalStartDate = input.ReadUInt32();
            break;
          }
          case 24: {
            PlusFlags = input.ReadUInt32();
            break;
          }
          case 32: {
            PlusStatus = input.ReadUInt32();
            break;
          }
          case 40: {
            PrepaidTimeStart = input.ReadUInt32();
            break;
          }
          case 48: {
            PrepaidTimeBalance = input.ReadUInt32();
            break;
          }
          case 61: {
            NextPaymentDate = input.ReadFixed32();
            break;
          }
          case 65: {
            SteamAgreementId = input.ReadFixed64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSODOTAChatWheel : pb::IMessage<CSODOTAChatWheel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAChatWheel> _parser = new pb::MessageParser<CSODOTAChatWheel>(() => new CSODOTAChatWheel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAChatWheel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAChatWheel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAChatWheel(CSODOTAChatWheel other) : this() {
      _hasBits0 = other._hasBits0;
      messageId_ = other.messageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAChatWheel Clone() {
      return new CSODOTAChatWheel(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private readonly static uint MessageIdDefaultValue = 4294967295;

    private uint messageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MessageId {
      get { if ((_hasBits0 & 1) != 0) { return messageId_; } else { return MessageIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        messageId_ = value;
      }
    }
    /// <summary>Gets whether the "message_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "message_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAChatWheel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAChatWheel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMessageId) hash ^= MessageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMessageId) {
        output.WriteRawTag(8);
        output.WriteUInt32(MessageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMessageId) {
        output.WriteRawTag(8);
        output.WriteUInt32(MessageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMessageId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAChatWheel other) {
      if (other == null) {
        return;
      }
      if (other.HasMessageId) {
        MessageId = other.MessageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MessageId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MessageId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLobbyFeaturedGamemodeProgress : pb::IMessage<CMsgLobbyFeaturedGamemodeProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyFeaturedGamemodeProgress> _parser = new pb::MessageParser<CMsgLobbyFeaturedGamemodeProgress>(() => new CMsgLobbyFeaturedGamemodeProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyFeaturedGamemodeProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyFeaturedGamemodeProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyFeaturedGamemodeProgress(CMsgLobbyFeaturedGamemodeProgress other) : this() {
      accounts_ = other.accounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyFeaturedGamemodeProgress Clone() {
      return new CMsgLobbyFeaturedGamemodeProgress(this);
    }

    /// <summary>Field number for the "accounts" field.</summary>
    public const int AccountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgLobbyFeaturedGamemodeProgress.Types.AccountProgress> _repeated_accounts_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgLobbyFeaturedGamemodeProgress.Types.AccountProgress.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyFeaturedGamemodeProgress.Types.AccountProgress> accounts_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyFeaturedGamemodeProgress.Types.AccountProgress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyFeaturedGamemodeProgress.Types.AccountProgress> Accounts {
      get { return accounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyFeaturedGamemodeProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyFeaturedGamemodeProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accounts_.Equals(other.accounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accounts_.WriteTo(output, _repeated_accounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accounts_.WriteTo(ref output, _repeated_accounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accounts_.CalculateSize(_repeated_accounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyFeaturedGamemodeProgress other) {
      if (other == null) {
        return;
      }
      accounts_.Add(other.accounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            accounts_.AddEntriesFrom(ref input, _repeated_accounts_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgLobbyFeaturedGamemodeProgress message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AccountProgress : pb::IMessage<AccountProgress>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AccountProgress> _parser = new pb::MessageParser<AccountProgress>(() => new AccountProgress());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AccountProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgLobbyFeaturedGamemodeProgress.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountProgress(AccountProgress other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          currentValue_ = other.currentValue_;
          maxValue_ = other.maxValue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountProgress Clone() {
          return new AccountProgress(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "current_value" field.</summary>
        public const int CurrentValueFieldNumber = 2;
        private readonly static uint CurrentValueDefaultValue = 0;

        private uint currentValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CurrentValue {
          get { if ((_hasBits0 & 2) != 0) { return currentValue_; } else { return CurrentValueDefaultValue; } }
          set {
            _hasBits0 |= 2;
            currentValue_ = value;
          }
        }
        /// <summary>Gets whether the "current_value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCurrentValue {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "current_value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCurrentValue() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "max_value" field.</summary>
        public const int MaxValueFieldNumber = 3;
        private readonly static uint MaxValueDefaultValue = 0;

        private uint maxValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxValue {
          get { if ((_hasBits0 & 4) != 0) { return maxValue_; } else { return MaxValueDefaultValue; } }
          set {
            _hasBits0 |= 4;
            maxValue_ = value;
          }
        }
        /// <summary>Gets whether the "max_value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMaxValue {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "max_value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMaxValue() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AccountProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AccountProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (CurrentValue != other.CurrentValue) return false;
          if (MaxValue != other.MaxValue) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasCurrentValue) hash ^= CurrentValue.GetHashCode();
          if (HasMaxValue) hash ^= MaxValue.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasCurrentValue) {
            output.WriteRawTag(16);
            output.WriteUInt32(CurrentValue);
          }
          if (HasMaxValue) {
            output.WriteRawTag(24);
            output.WriteUInt32(MaxValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasCurrentValue) {
            output.WriteRawTag(16);
            output.WriteUInt32(CurrentValue);
          }
          if (HasMaxValue) {
            output.WriteRawTag(24);
            output.WriteUInt32(MaxValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasCurrentValue) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentValue);
          }
          if (HasMaxValue) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxValue);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AccountProgress other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasCurrentValue) {
            CurrentValue = other.CurrentValue;
          }
          if (other.HasMaxValue) {
            MaxValue = other.MaxValue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                CurrentValue = input.ReadUInt32();
                break;
              }
              case 24: {
                MaxValue = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                CurrentValue = input.ReadUInt32();
                break;
              }
              case 24: {
                MaxValue = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgBattleCupVictory : pb::IMessage<CMsgBattleCupVictory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgBattleCupVictory> _parser = new pb::MessageParser<CMsgBattleCupVictory>(() => new CMsgBattleCupVictory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgBattleCupVictory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgBattleCupVictory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgBattleCupVictory(CMsgBattleCupVictory other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      winDate_ = other.winDate_;
      validUntil_ = other.validUntil_;
      skillLevel_ = other.skillLevel_;
      tournamentId_ = other.tournamentId_;
      divisionId_ = other.divisionId_;
      teamId_ = other.teamId_;
      streak_ = other.streak_;
      trophyId_ = other.trophyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgBattleCupVictory Clone() {
      return new CMsgBattleCupVictory(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "win_date" field.</summary>
    public const int WinDateFieldNumber = 2;
    private readonly static uint WinDateDefaultValue = 0;

    private uint winDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinDate {
      get { if ((_hasBits0 & 2) != 0) { return winDate_; } else { return WinDateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        winDate_ = value;
      }
    }
    /// <summary>Gets whether the "win_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWinDate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "win_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWinDate() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "valid_until" field.</summary>
    public const int ValidUntilFieldNumber = 3;
    private readonly static uint ValidUntilDefaultValue = 0;

    private uint validUntil_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ValidUntil {
      get { if ((_hasBits0 & 4) != 0) { return validUntil_; } else { return ValidUntilDefaultValue; } }
      set {
        _hasBits0 |= 4;
        validUntil_ = value;
      }
    }
    /// <summary>Gets whether the "valid_until" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValidUntil {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "valid_until" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValidUntil() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "skill_level" field.</summary>
    public const int SkillLevelFieldNumber = 4;
    private readonly static uint SkillLevelDefaultValue = 0;

    private uint skillLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillLevel {
      get { if ((_hasBits0 & 8) != 0) { return skillLevel_; } else { return SkillLevelDefaultValue; } }
      set {
        _hasBits0 |= 8;
        skillLevel_ = value;
      }
    }
    /// <summary>Gets whether the "skill_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillLevel {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "skill_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillLevel() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "tournament_id" field.</summary>
    public const int TournamentIdFieldNumber = 5;
    private readonly static uint TournamentIdDefaultValue = 0;

    private uint tournamentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TournamentId {
      get { if ((_hasBits0 & 16) != 0) { return tournamentId_; } else { return TournamentIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        tournamentId_ = value;
      }
    }
    /// <summary>Gets whether the "tournament_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTournamentId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "tournament_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTournamentId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "division_id" field.</summary>
    public const int DivisionIdFieldNumber = 6;
    private readonly static uint DivisionIdDefaultValue = 0;

    private uint divisionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DivisionId {
      get { if ((_hasBits0 & 32) != 0) { return divisionId_; } else { return DivisionIdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        divisionId_ = value;
      }
    }
    /// <summary>Gets whether the "division_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDivisionId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "division_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDivisionId() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 7;
    private readonly static uint TeamIdDefaultValue = 0;

    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { if ((_hasBits0 & 64) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "streak" field.</summary>
    public const int StreakFieldNumber = 8;
    private readonly static uint StreakDefaultValue = 0;

    private uint streak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Streak {
      get { if ((_hasBits0 & 128) != 0) { return streak_; } else { return StreakDefaultValue; } }
      set {
        _hasBits0 |= 128;
        streak_ = value;
      }
    }
    /// <summary>Gets whether the "streak" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreak {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "streak" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreak() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "trophy_id" field.</summary>
    public const int TrophyIdFieldNumber = 9;
    private readonly static uint TrophyIdDefaultValue = 0;

    private uint trophyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrophyId {
      get { if ((_hasBits0 & 256) != 0) { return trophyId_; } else { return TrophyIdDefaultValue; } }
      set {
        _hasBits0 |= 256;
        trophyId_ = value;
      }
    }
    /// <summary>Gets whether the "trophy_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrophyId {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "trophy_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrophyId() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgBattleCupVictory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgBattleCupVictory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (WinDate != other.WinDate) return false;
      if (ValidUntil != other.ValidUntil) return false;
      if (SkillLevel != other.SkillLevel) return false;
      if (TournamentId != other.TournamentId) return false;
      if (DivisionId != other.DivisionId) return false;
      if (TeamId != other.TeamId) return false;
      if (Streak != other.Streak) return false;
      if (TrophyId != other.TrophyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasWinDate) hash ^= WinDate.GetHashCode();
      if (HasValidUntil) hash ^= ValidUntil.GetHashCode();
      if (HasSkillLevel) hash ^= SkillLevel.GetHashCode();
      if (HasTournamentId) hash ^= TournamentId.GetHashCode();
      if (HasDivisionId) hash ^= DivisionId.GetHashCode();
      if (HasTeamId) hash ^= TeamId.GetHashCode();
      if (HasStreak) hash ^= Streak.GetHashCode();
      if (HasTrophyId) hash ^= TrophyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasWinDate) {
        output.WriteRawTag(16);
        output.WriteUInt32(WinDate);
      }
      if (HasValidUntil) {
        output.WriteRawTag(24);
        output.WriteUInt32(ValidUntil);
      }
      if (HasSkillLevel) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkillLevel);
      }
      if (HasTournamentId) {
        output.WriteRawTag(40);
        output.WriteUInt32(TournamentId);
      }
      if (HasDivisionId) {
        output.WriteRawTag(48);
        output.WriteUInt32(DivisionId);
      }
      if (HasTeamId) {
        output.WriteRawTag(56);
        output.WriteUInt32(TeamId);
      }
      if (HasStreak) {
        output.WriteRawTag(64);
        output.WriteUInt32(Streak);
      }
      if (HasTrophyId) {
        output.WriteRawTag(72);
        output.WriteUInt32(TrophyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasWinDate) {
        output.WriteRawTag(16);
        output.WriteUInt32(WinDate);
      }
      if (HasValidUntil) {
        output.WriteRawTag(24);
        output.WriteUInt32(ValidUntil);
      }
      if (HasSkillLevel) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkillLevel);
      }
      if (HasTournamentId) {
        output.WriteRawTag(40);
        output.WriteUInt32(TournamentId);
      }
      if (HasDivisionId) {
        output.WriteRawTag(48);
        output.WriteUInt32(DivisionId);
      }
      if (HasTeamId) {
        output.WriteRawTag(56);
        output.WriteUInt32(TeamId);
      }
      if (HasStreak) {
        output.WriteRawTag(64);
        output.WriteUInt32(Streak);
      }
      if (HasTrophyId) {
        output.WriteRawTag(72);
        output.WriteUInt32(TrophyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasWinDate) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinDate);
      }
      if (HasValidUntil) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ValidUntil);
      }
      if (HasSkillLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillLevel);
      }
      if (HasTournamentId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TournamentId);
      }
      if (HasDivisionId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DivisionId);
      }
      if (HasTeamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (HasStreak) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Streak);
      }
      if (HasTrophyId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrophyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgBattleCupVictory other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasWinDate) {
        WinDate = other.WinDate;
      }
      if (other.HasValidUntil) {
        ValidUntil = other.ValidUntil;
      }
      if (other.HasSkillLevel) {
        SkillLevel = other.SkillLevel;
      }
      if (other.HasTournamentId) {
        TournamentId = other.TournamentId;
      }
      if (other.HasDivisionId) {
        DivisionId = other.DivisionId;
      }
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      if (other.HasStreak) {
        Streak = other.Streak;
      }
      if (other.HasTrophyId) {
        TrophyId = other.TrophyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            WinDate = input.ReadUInt32();
            break;
          }
          case 24: {
            ValidUntil = input.ReadUInt32();
            break;
          }
          case 32: {
            SkillLevel = input.ReadUInt32();
            break;
          }
          case 40: {
            TournamentId = input.ReadUInt32();
            break;
          }
          case 48: {
            DivisionId = input.ReadUInt32();
            break;
          }
          case 56: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 64: {
            Streak = input.ReadUInt32();
            break;
          }
          case 72: {
            TrophyId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            WinDate = input.ReadUInt32();
            break;
          }
          case 24: {
            ValidUntil = input.ReadUInt32();
            break;
          }
          case 32: {
            SkillLevel = input.ReadUInt32();
            break;
          }
          case 40: {
            TournamentId = input.ReadUInt32();
            break;
          }
          case 48: {
            DivisionId = input.ReadUInt32();
            break;
          }
          case 56: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 64: {
            Streak = input.ReadUInt32();
            break;
          }
          case 72: {
            TrophyId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLobbyBattleCupVictoryList : pb::IMessage<CMsgLobbyBattleCupVictoryList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyBattleCupVictoryList> _parser = new pb::MessageParser<CMsgLobbyBattleCupVictoryList>(() => new CMsgLobbyBattleCupVictoryList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyBattleCupVictoryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyBattleCupVictoryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyBattleCupVictoryList(CMsgLobbyBattleCupVictoryList other) : this() {
      winners_ = other.winners_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyBattleCupVictoryList Clone() {
      return new CMsgLobbyBattleCupVictoryList(this);
    }

    /// <summary>Field number for the "winners" field.</summary>
    public const int WinnersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgBattleCupVictory> _repeated_winners_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgBattleCupVictory.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgBattleCupVictory> winners_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgBattleCupVictory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgBattleCupVictory> Winners {
      get { return winners_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyBattleCupVictoryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyBattleCupVictoryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!winners_.Equals(other.winners_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= winners_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      winners_.WriteTo(output, _repeated_winners_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      winners_.WriteTo(ref output, _repeated_winners_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += winners_.CalculateSize(_repeated_winners_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyBattleCupVictoryList other) {
      if (other == null) {
        return;
      }
      winners_.Add(other.winners_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            winners_.AddEntriesFrom(input, _repeated_winners_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            winners_.AddEntriesFrom(ref input, _repeated_winners_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTABroadcastNotification : pb::IMessage<CMsgDOTABroadcastNotification>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTABroadcastNotification> _parser = new pb::MessageParser<CMsgDOTABroadcastNotification>(() => new CMsgDOTABroadcastNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTABroadcastNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTABroadcastNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTABroadcastNotification(CMsgDOTABroadcastNotification other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTABroadcastNotification Clone() {
      return new CMsgDOTABroadcastNotification(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTABroadcastNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTABroadcastNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMessage) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMessage) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTABroadcastNotification other) {
      if (other == null) {
        return;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CProtoItemHeroStatue : pb::IMessage<CProtoItemHeroStatue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CProtoItemHeroStatue> _parser = new pb::MessageParser<CProtoItemHeroStatue>(() => new CProtoItemHeroStatue());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CProtoItemHeroStatue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CProtoItemHeroStatue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CProtoItemHeroStatue(CProtoItemHeroStatue other) : this() {
      _hasBits0 = other._hasBits0;
      heroId_ = other.heroId_;
      statusEffectIndex_ = other.statusEffectIndex_;
      sequenceName_ = other.sequenceName_;
      cycle_ = other.cycle_;
      wearable_ = other.wearable_.Clone();
      inscription_ = other.inscription_;
      style_ = other.style_.Clone();
      tournamentDrop_ = other.tournamentDrop_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CProtoItemHeroStatue Clone() {
      return new CProtoItemHeroStatue(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "status_effect_index" field.</summary>
    public const int StatusEffectIndexFieldNumber = 2;
    private readonly static uint StatusEffectIndexDefaultValue = 0;

    private uint statusEffectIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StatusEffectIndex {
      get { if ((_hasBits0 & 2) != 0) { return statusEffectIndex_; } else { return StatusEffectIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        statusEffectIndex_ = value;
      }
    }
    /// <summary>Gets whether the "status_effect_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatusEffectIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "status_effect_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatusEffectIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "sequence_name" field.</summary>
    public const int SequenceNameFieldNumber = 3;
    private readonly static string SequenceNameDefaultValue = "";

    private string sequenceName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SequenceName {
      get { return sequenceName_ ?? SequenceNameDefaultValue; }
      set {
        sequenceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sequence_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceName {
      get { return sequenceName_ != null; }
    }
    /// <summary>Clears the value of the "sequence_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceName() {
      sequenceName_ = null;
    }

    /// <summary>Field number for the "cycle" field.</summary>
    public const int CycleFieldNumber = 4;
    private readonly static float CycleDefaultValue = 0F;

    private float cycle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cycle {
      get { if ((_hasBits0 & 4) != 0) { return cycle_; } else { return CycleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cycle_ = value;
      }
    }
    /// <summary>Gets whether the "cycle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCycle {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cycle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCycle() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "wearable" field.</summary>
    public const int WearableFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_wearable_codec
        = pb::FieldCodec.ForUInt32(40);
    private readonly pbc::RepeatedField<uint> wearable_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Wearable {
      get { return wearable_; }
    }

    /// <summary>Field number for the "inscription" field.</summary>
    public const int InscriptionFieldNumber = 6;
    private readonly static string InscriptionDefaultValue = "";

    private string inscription_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Inscription {
      get { return inscription_ ?? InscriptionDefaultValue; }
      set {
        inscription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "inscription" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInscription {
      get { return inscription_ != null; }
    }
    /// <summary>Clears the value of the "inscription" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInscription() {
      inscription_ = null;
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_style_codec
        = pb::FieldCodec.ForUInt32(56);
    private readonly pbc::RepeatedField<uint> style_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Style {
      get { return style_; }
    }

    /// <summary>Field number for the "tournament_drop" field.</summary>
    public const int TournamentDropFieldNumber = 8;
    private readonly static bool TournamentDropDefaultValue = false;

    private bool tournamentDrop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TournamentDrop {
      get { if ((_hasBits0 & 8) != 0) { return tournamentDrop_; } else { return TournamentDropDefaultValue; } }
      set {
        _hasBits0 |= 8;
        tournamentDrop_ = value;
      }
    }
    /// <summary>Gets whether the "tournament_drop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTournamentDrop {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "tournament_drop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTournamentDrop() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CProtoItemHeroStatue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CProtoItemHeroStatue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (StatusEffectIndex != other.StatusEffectIndex) return false;
      if (SequenceName != other.SequenceName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cycle, other.Cycle)) return false;
      if(!wearable_.Equals(other.wearable_)) return false;
      if (Inscription != other.Inscription) return false;
      if(!style_.Equals(other.style_)) return false;
      if (TournamentDrop != other.TournamentDrop) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasStatusEffectIndex) hash ^= StatusEffectIndex.GetHashCode();
      if (HasSequenceName) hash ^= SequenceName.GetHashCode();
      if (HasCycle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cycle);
      hash ^= wearable_.GetHashCode();
      if (HasInscription) hash ^= Inscription.GetHashCode();
      hash ^= style_.GetHashCode();
      if (HasTournamentDrop) hash ^= TournamentDrop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeroId) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (HasStatusEffectIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatusEffectIndex);
      }
      if (HasSequenceName) {
        output.WriteRawTag(26);
        output.WriteString(SequenceName);
      }
      if (HasCycle) {
        output.WriteRawTag(37);
        output.WriteFloat(Cycle);
      }
      wearable_.WriteTo(output, _repeated_wearable_codec);
      if (HasInscription) {
        output.WriteRawTag(50);
        output.WriteString(Inscription);
      }
      style_.WriteTo(output, _repeated_style_codec);
      if (HasTournamentDrop) {
        output.WriteRawTag(64);
        output.WriteBool(TournamentDrop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeroId) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (HasStatusEffectIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatusEffectIndex);
      }
      if (HasSequenceName) {
        output.WriteRawTag(26);
        output.WriteString(SequenceName);
      }
      if (HasCycle) {
        output.WriteRawTag(37);
        output.WriteFloat(Cycle);
      }
      wearable_.WriteTo(ref output, _repeated_wearable_codec);
      if (HasInscription) {
        output.WriteRawTag(50);
        output.WriteString(Inscription);
      }
      style_.WriteTo(ref output, _repeated_style_codec);
      if (HasTournamentDrop) {
        output.WriteRawTag(64);
        output.WriteBool(TournamentDrop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasStatusEffectIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatusEffectIndex);
      }
      if (HasSequenceName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SequenceName);
      }
      if (HasCycle) {
        size += 1 + 4;
      }
      size += wearable_.CalculateSize(_repeated_wearable_codec);
      if (HasInscription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Inscription);
      }
      size += style_.CalculateSize(_repeated_style_codec);
      if (HasTournamentDrop) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CProtoItemHeroStatue other) {
      if (other == null) {
        return;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasStatusEffectIndex) {
        StatusEffectIndex = other.StatusEffectIndex;
      }
      if (other.HasSequenceName) {
        SequenceName = other.SequenceName;
      }
      if (other.HasCycle) {
        Cycle = other.Cycle;
      }
      wearable_.Add(other.wearable_);
      if (other.HasInscription) {
        Inscription = other.Inscription;
      }
      style_.Add(other.style_);
      if (other.HasTournamentDrop) {
        TournamentDrop = other.TournamentDrop;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            StatusEffectIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            SequenceName = input.ReadString();
            break;
          }
          case 37: {
            Cycle = input.ReadFloat();
            break;
          }
          case 42:
          case 40: {
            wearable_.AddEntriesFrom(input, _repeated_wearable_codec);
            break;
          }
          case 50: {
            Inscription = input.ReadString();
            break;
          }
          case 58:
          case 56: {
            style_.AddEntriesFrom(input, _repeated_style_codec);
            break;
          }
          case 64: {
            TournamentDrop = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            StatusEffectIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            SequenceName = input.ReadString();
            break;
          }
          case 37: {
            Cycle = input.ReadFloat();
            break;
          }
          case 42:
          case 40: {
            wearable_.AddEntriesFrom(ref input, _repeated_wearable_codec);
            break;
          }
          case 50: {
            Inscription = input.ReadString();
            break;
          }
          case 58:
          case 56: {
            style_.AddEntriesFrom(ref input, _repeated_style_codec);
            break;
          }
          case 64: {
            TournamentDrop = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMatchPlayerAbilityUpgrade : pb::IMessage<CMatchPlayerAbilityUpgrade>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMatchPlayerAbilityUpgrade> _parser = new pb::MessageParser<CMatchPlayerAbilityUpgrade>(() => new CMatchPlayerAbilityUpgrade());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchPlayerAbilityUpgrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerAbilityUpgrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerAbilityUpgrade(CMatchPlayerAbilityUpgrade other) : this() {
      _hasBits0 = other._hasBits0;
      ability_ = other.ability_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerAbilityUpgrade Clone() {
      return new CMatchPlayerAbilityUpgrade(this);
    }

    /// <summary>Field number for the "ability" field.</summary>
    public const int AbilityFieldNumber = 1;
    private readonly static int AbilityDefaultValue = -1;

    private int ability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ability {
      get { if ((_hasBits0 & 1) != 0) { return ability_; } else { return AbilityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ability_ = value;
      }
    }
    /// <summary>Gets whether the "ability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbility {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbility() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private readonly static uint TimeDefaultValue = 0;

    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { if ((_hasBits0 & 2) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchPlayerAbilityUpgrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchPlayerAbilityUpgrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ability != other.Ability) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAbility) hash ^= Ability.GetHashCode();
      if (HasTime) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAbility) {
        output.WriteRawTag(8);
        output.WriteInt32(Ability);
      }
      if (HasTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAbility) {
        output.WriteRawTag(8);
        output.WriteInt32(Ability);
      }
      if (HasTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAbility) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ability);
      }
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchPlayerAbilityUpgrade other) {
      if (other == null) {
        return;
      }
      if (other.HasAbility) {
        Ability = other.Ability;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ability = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ability = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMatchPlayerTimedCustomStat : pb::IMessage<CMatchPlayerTimedCustomStat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMatchPlayerTimedCustomStat> _parser = new pb::MessageParser<CMatchPlayerTimedCustomStat>(() => new CMatchPlayerTimedCustomStat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchPlayerTimedCustomStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerTimedCustomStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerTimedCustomStat(CMatchPlayerTimedCustomStat other) : this() {
      _hasBits0 = other._hasBits0;
      stat_ = other.stat_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerTimedCustomStat Clone() {
      return new CMatchPlayerTimedCustomStat(this);
    }

    /// <summary>Field number for the "stat" field.</summary>
    public const int StatFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EDOTAMatchPlayerTimeCustomStat StatDefaultValue = global::Steam.Protos.Dota2.EDOTAMatchPlayerTimeCustomStat.KEdotaMatchPlayerTimeCustomStatHpregenUnderT1Towers;

    private global::Steam.Protos.Dota2.EDOTAMatchPlayerTimeCustomStat stat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EDOTAMatchPlayerTimeCustomStat Stat {
      get { if ((_hasBits0 & 1) != 0) { return stat_; } else { return StatDefaultValue; } }
      set {
        _hasBits0 |= 1;
        stat_ = value;
      }
    }
    /// <summary>Gets whether the "stat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStat {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStat() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private readonly static float ValueDefaultValue = 0F;

    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { if ((_hasBits0 & 2) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchPlayerTimedCustomStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchPlayerTimedCustomStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stat != other.Stat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStat) hash ^= Stat.GetHashCode();
      if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStat) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Stat);
      }
      if (HasValue) {
        output.WriteRawTag(29);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStat) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Stat);
      }
      if (HasValue) {
        output.WriteRawTag(29);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStat) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stat);
      }
      if (HasValue) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchPlayerTimedCustomStat other) {
      if (other == null) {
        return;
      }
      if (other.HasStat) {
        Stat = other.Stat;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Stat = (global::Steam.Protos.Dota2.EDOTAMatchPlayerTimeCustomStat) input.ReadEnum();
            break;
          }
          case 29: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            Stat = (global::Steam.Protos.Dota2.EDOTAMatchPlayerTimeCustomStat) input.ReadEnum();
            break;
          }
          case 29: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMatchPlayerTimedStats : pb::IMessage<CMatchPlayerTimedStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMatchPlayerTimedStats> _parser = new pb::MessageParser<CMatchPlayerTimedStats>(() => new CMatchPlayerTimedStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchPlayerTimedStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerTimedStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerTimedStats(CMatchPlayerTimedStats other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      time_ = other.time_;
      kills_ = other.kills_;
      deaths_ = other.deaths_;
      assists_ = other.assists_;
      netWorth_ = other.netWorth_;
      xp_ = other.xp_;
      lastHits_ = other.lastHits_;
      denies_ = other.denies_;
      bountyRuneGold_ = other.bountyRuneGold_;
      rangeCreepUpgradeGold_ = other.rangeCreepUpgradeGold_;
      observerWardsDewarded_ = other.observerWardsDewarded_;
      reliableGoldEarned_ = other.reliableGoldEarned_;
      goldLossPrevented_ = other.goldLossPrevented_;
      heroKillGold_ = other.heroKillGold_;
      creepKillGold_ = other.creepKillGold_;
      buildingGold_ = other.buildingGold_;
      otherGold_ = other.otherGold_;
      comebackGold_ = other.comebackGold_;
      experimentalGold_ = other.experimentalGold_;
      experimental2Gold_ = other.experimental2Gold_;
      creepDenyGold_ = other.creepDenyGold_;
      tpScrollsPurchased1_ = other.tpScrollsPurchased1_;
      tpScrollsPurchased2_ = other.tpScrollsPurchased2_;
      tpScrollsPurchased3_ = other.tpScrollsPurchased3_;
      tpScrollsPurchased4_ = other.tpScrollsPurchased4_;
      tpScrollsPurchased5_ = other.tpScrollsPurchased5_;
      neutralGold_ = other.neutralGold_;
      courierGold_ = other.courierGold_;
      roshanGold_ = other.roshanGold_;
      incomeGold_ = other.incomeGold_;
      itemValue_ = other.itemValue_;
      supportGoldSpent_ = other.supportGoldSpent_;
      campsStacked_ = other.campsStacked_;
      wardsPlaced_ = other.wardsPlaced_;
      tripleKills_ = other.tripleKills_;
      rampages_ = other.rampages_;
      customStats_ = other.customStats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerTimedStats Clone() {
      return new CMatchPlayerTimedStats(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private readonly static uint TimeDefaultValue = 0;

    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { if ((_hasBits0 & 1) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "kills" field.</summary>
    public const int KillsFieldNumber = 2;
    private readonly static uint KillsDefaultValue = 0;

    private uint kills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kills {
      get { if ((_hasBits0 & 2) != 0) { return kills_; } else { return KillsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        kills_ = value;
      }
    }
    /// <summary>Gets whether the "kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKills {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKills() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "deaths" field.</summary>
    public const int DeathsFieldNumber = 3;
    private readonly static uint DeathsDefaultValue = 0;

    private uint deaths_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deaths {
      get { if ((_hasBits0 & 4) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        deaths_ = value;
      }
    }
    /// <summary>Gets whether the "deaths" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeaths {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "deaths" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeaths() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "assists" field.</summary>
    public const int AssistsFieldNumber = 4;
    private readonly static uint AssistsDefaultValue = 0;

    private uint assists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Assists {
      get { if ((_hasBits0 & 8) != 0) { return assists_; } else { return AssistsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        assists_ = value;
      }
    }
    /// <summary>Gets whether the "assists" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssists {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "assists" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssists() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "net_worth" field.</summary>
    public const int NetWorthFieldNumber = 5;
    private readonly static uint NetWorthDefaultValue = 0;

    private uint netWorth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetWorth {
      get { if ((_hasBits0 & 16) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
      set {
        _hasBits0 |= 16;
        netWorth_ = value;
      }
    }
    /// <summary>Gets whether the "net_worth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNetWorth {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "net_worth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNetWorth() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "xp" field.</summary>
    public const int XpFieldNumber = 6;
    private readonly static uint XpDefaultValue = 0;

    private uint xp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Xp {
      get { if ((_hasBits0 & 32) != 0) { return xp_; } else { return XpDefaultValue; } }
      set {
        _hasBits0 |= 32;
        xp_ = value;
      }
    }
    /// <summary>Gets whether the "xp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXp {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "xp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearXp() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "last_hits" field.</summary>
    public const int LastHitsFieldNumber = 7;
    private readonly static uint LastHitsDefaultValue = 0;

    private uint lastHits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastHits {
      get { if ((_hasBits0 & 64) != 0) { return lastHits_; } else { return LastHitsDefaultValue; } }
      set {
        _hasBits0 |= 64;
        lastHits_ = value;
      }
    }
    /// <summary>Gets whether the "last_hits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastHits {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "last_hits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastHits() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "denies" field.</summary>
    public const int DeniesFieldNumber = 8;
    private readonly static uint DeniesDefaultValue = 0;

    private uint denies_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Denies {
      get { if ((_hasBits0 & 128) != 0) { return denies_; } else { return DeniesDefaultValue; } }
      set {
        _hasBits0 |= 128;
        denies_ = value;
      }
    }
    /// <summary>Gets whether the "denies" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDenies {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "denies" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDenies() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "bounty_rune_gold" field.</summary>
    public const int BountyRuneGoldFieldNumber = 9;
    private readonly static uint BountyRuneGoldDefaultValue = 0;

    private uint bountyRuneGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BountyRuneGold {
      get { if ((_hasBits0 & 256) != 0) { return bountyRuneGold_; } else { return BountyRuneGoldDefaultValue; } }
      set {
        _hasBits0 |= 256;
        bountyRuneGold_ = value;
      }
    }
    /// <summary>Gets whether the "bounty_rune_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBountyRuneGold {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "bounty_rune_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBountyRuneGold() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "range_creep_upgrade_gold" field.</summary>
    public const int RangeCreepUpgradeGoldFieldNumber = 10;
    private readonly static uint RangeCreepUpgradeGoldDefaultValue = 0;

    private uint rangeCreepUpgradeGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RangeCreepUpgradeGold {
      get { if ((_hasBits0 & 512) != 0) { return rangeCreepUpgradeGold_; } else { return RangeCreepUpgradeGoldDefaultValue; } }
      set {
        _hasBits0 |= 512;
        rangeCreepUpgradeGold_ = value;
      }
    }
    /// <summary>Gets whether the "range_creep_upgrade_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRangeCreepUpgradeGold {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "range_creep_upgrade_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRangeCreepUpgradeGold() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "observer_wards_dewarded" field.</summary>
    public const int ObserverWardsDewardedFieldNumber = 11;
    private readonly static uint ObserverWardsDewardedDefaultValue = 0;

    private uint observerWardsDewarded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObserverWardsDewarded {
      get { if ((_hasBits0 & 1024) != 0) { return observerWardsDewarded_; } else { return ObserverWardsDewardedDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        observerWardsDewarded_ = value;
      }
    }
    /// <summary>Gets whether the "observer_wards_dewarded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObserverWardsDewarded {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "observer_wards_dewarded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObserverWardsDewarded() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "reliable_gold_earned" field.</summary>
    public const int ReliableGoldEarnedFieldNumber = 12;
    private readonly static uint ReliableGoldEarnedDefaultValue = 0;

    private uint reliableGoldEarned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReliableGoldEarned {
      get { if ((_hasBits0 & 2048) != 0) { return reliableGoldEarned_; } else { return ReliableGoldEarnedDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        reliableGoldEarned_ = value;
      }
    }
    /// <summary>Gets whether the "reliable_gold_earned" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReliableGoldEarned {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "reliable_gold_earned" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReliableGoldEarned() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "gold_loss_prevented" field.</summary>
    public const int GoldLossPreventedFieldNumber = 13;
    private readonly static uint GoldLossPreventedDefaultValue = 0;

    private uint goldLossPrevented_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoldLossPrevented {
      get { if ((_hasBits0 & 4096) != 0) { return goldLossPrevented_; } else { return GoldLossPreventedDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        goldLossPrevented_ = value;
      }
    }
    /// <summary>Gets whether the "gold_loss_prevented" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoldLossPrevented {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "gold_loss_prevented" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoldLossPrevented() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "hero_kill_gold" field.</summary>
    public const int HeroKillGoldFieldNumber = 14;
    private readonly static uint HeroKillGoldDefaultValue = 0;

    private uint heroKillGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroKillGold {
      get { if ((_hasBits0 & 8192) != 0) { return heroKillGold_; } else { return HeroKillGoldDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        heroKillGold_ = value;
      }
    }
    /// <summary>Gets whether the "hero_kill_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroKillGold {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "hero_kill_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroKillGold() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "creep_kill_gold" field.</summary>
    public const int CreepKillGoldFieldNumber = 15;
    private readonly static uint CreepKillGoldDefaultValue = 0;

    private uint creepKillGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreepKillGold {
      get { if ((_hasBits0 & 16384) != 0) { return creepKillGold_; } else { return CreepKillGoldDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        creepKillGold_ = value;
      }
    }
    /// <summary>Gets whether the "creep_kill_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreepKillGold {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "creep_kill_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreepKillGold() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "building_gold" field.</summary>
    public const int BuildingGoldFieldNumber = 16;
    private readonly static uint BuildingGoldDefaultValue = 0;

    private uint buildingGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildingGold {
      get { if ((_hasBits0 & 32768) != 0) { return buildingGold_; } else { return BuildingGoldDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        buildingGold_ = value;
      }
    }
    /// <summary>Gets whether the "building_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuildingGold {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "building_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuildingGold() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "other_gold" field.</summary>
    public const int OtherGoldFieldNumber = 17;
    private readonly static uint OtherGoldDefaultValue = 0;

    private uint otherGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OtherGold {
      get { if ((_hasBits0 & 65536) != 0) { return otherGold_; } else { return OtherGoldDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        otherGold_ = value;
      }
    }
    /// <summary>Gets whether the "other_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOtherGold {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "other_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOtherGold() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "comeback_gold" field.</summary>
    public const int ComebackGoldFieldNumber = 18;
    private readonly static uint ComebackGoldDefaultValue = 0;

    private uint comebackGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ComebackGold {
      get { if ((_hasBits0 & 131072) != 0) { return comebackGold_; } else { return ComebackGoldDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        comebackGold_ = value;
      }
    }
    /// <summary>Gets whether the "comeback_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComebackGold {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "comeback_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComebackGold() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "experimental_gold" field.</summary>
    public const int ExperimentalGoldFieldNumber = 19;
    private readonly static uint ExperimentalGoldDefaultValue = 0;

    private uint experimentalGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExperimentalGold {
      get { if ((_hasBits0 & 262144) != 0) { return experimentalGold_; } else { return ExperimentalGoldDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        experimentalGold_ = value;
      }
    }
    /// <summary>Gets whether the "experimental_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExperimentalGold {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "experimental_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExperimentalGold() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "experimental2_gold" field.</summary>
    public const int Experimental2GoldFieldNumber = 20;
    private readonly static uint Experimental2GoldDefaultValue = 0;

    private uint experimental2Gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Experimental2Gold {
      get { if ((_hasBits0 & 524288) != 0) { return experimental2Gold_; } else { return Experimental2GoldDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        experimental2Gold_ = value;
      }
    }
    /// <summary>Gets whether the "experimental2_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExperimental2Gold {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "experimental2_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExperimental2Gold() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "creep_deny_gold" field.</summary>
    public const int CreepDenyGoldFieldNumber = 21;
    private readonly static uint CreepDenyGoldDefaultValue = 0;

    private uint creepDenyGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreepDenyGold {
      get { if ((_hasBits0 & 1048576) != 0) { return creepDenyGold_; } else { return CreepDenyGoldDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        creepDenyGold_ = value;
      }
    }
    /// <summary>Gets whether the "creep_deny_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreepDenyGold {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "creep_deny_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreepDenyGold() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "tp_scrolls_purchased_1" field.</summary>
    public const int TpScrollsPurchased1FieldNumber = 22;
    private readonly static uint TpScrollsPurchased1DefaultValue = 0;

    private uint tpScrollsPurchased1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TpScrollsPurchased1 {
      get { if ((_hasBits0 & 2097152) != 0) { return tpScrollsPurchased1_; } else { return TpScrollsPurchased1DefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        tpScrollsPurchased1_ = value;
      }
    }
    /// <summary>Gets whether the "tp_scrolls_purchased_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTpScrollsPurchased1 {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "tp_scrolls_purchased_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTpScrollsPurchased1() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "tp_scrolls_purchased_2" field.</summary>
    public const int TpScrollsPurchased2FieldNumber = 23;
    private readonly static uint TpScrollsPurchased2DefaultValue = 0;

    private uint tpScrollsPurchased2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TpScrollsPurchased2 {
      get { if ((_hasBits0 & 4194304) != 0) { return tpScrollsPurchased2_; } else { return TpScrollsPurchased2DefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        tpScrollsPurchased2_ = value;
      }
    }
    /// <summary>Gets whether the "tp_scrolls_purchased_2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTpScrollsPurchased2 {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "tp_scrolls_purchased_2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTpScrollsPurchased2() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "tp_scrolls_purchased_3" field.</summary>
    public const int TpScrollsPurchased3FieldNumber = 24;
    private readonly static uint TpScrollsPurchased3DefaultValue = 0;

    private uint tpScrollsPurchased3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TpScrollsPurchased3 {
      get { if ((_hasBits0 & 8388608) != 0) { return tpScrollsPurchased3_; } else { return TpScrollsPurchased3DefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        tpScrollsPurchased3_ = value;
      }
    }
    /// <summary>Gets whether the "tp_scrolls_purchased_3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTpScrollsPurchased3 {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "tp_scrolls_purchased_3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTpScrollsPurchased3() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "tp_scrolls_purchased_4" field.</summary>
    public const int TpScrollsPurchased4FieldNumber = 25;
    private readonly static uint TpScrollsPurchased4DefaultValue = 0;

    private uint tpScrollsPurchased4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TpScrollsPurchased4 {
      get { if ((_hasBits0 & 16777216) != 0) { return tpScrollsPurchased4_; } else { return TpScrollsPurchased4DefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        tpScrollsPurchased4_ = value;
      }
    }
    /// <summary>Gets whether the "tp_scrolls_purchased_4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTpScrollsPurchased4 {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "tp_scrolls_purchased_4" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTpScrollsPurchased4() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "tp_scrolls_purchased_5" field.</summary>
    public const int TpScrollsPurchased5FieldNumber = 26;
    private readonly static uint TpScrollsPurchased5DefaultValue = 0;

    private uint tpScrollsPurchased5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TpScrollsPurchased5 {
      get { if ((_hasBits0 & 33554432) != 0) { return tpScrollsPurchased5_; } else { return TpScrollsPurchased5DefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        tpScrollsPurchased5_ = value;
      }
    }
    /// <summary>Gets whether the "tp_scrolls_purchased_5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTpScrollsPurchased5 {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "tp_scrolls_purchased_5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTpScrollsPurchased5() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "neutral_gold" field.</summary>
    public const int NeutralGoldFieldNumber = 27;
    private readonly static uint NeutralGoldDefaultValue = 0;

    private uint neutralGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NeutralGold {
      get { if ((_hasBits0 & 67108864) != 0) { return neutralGold_; } else { return NeutralGoldDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        neutralGold_ = value;
      }
    }
    /// <summary>Gets whether the "neutral_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNeutralGold {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "neutral_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNeutralGold() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "courier_gold" field.</summary>
    public const int CourierGoldFieldNumber = 28;
    private readonly static uint CourierGoldDefaultValue = 0;

    private uint courierGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CourierGold {
      get { if ((_hasBits0 & 134217728) != 0) { return courierGold_; } else { return CourierGoldDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        courierGold_ = value;
      }
    }
    /// <summary>Gets whether the "courier_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCourierGold {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "courier_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCourierGold() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "roshan_gold" field.</summary>
    public const int RoshanGoldFieldNumber = 29;
    private readonly static uint RoshanGoldDefaultValue = 0;

    private uint roshanGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoshanGold {
      get { if ((_hasBits0 & 268435456) != 0) { return roshanGold_; } else { return RoshanGoldDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        roshanGold_ = value;
      }
    }
    /// <summary>Gets whether the "roshan_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoshanGold {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "roshan_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoshanGold() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "income_gold" field.</summary>
    public const int IncomeGoldFieldNumber = 30;
    private readonly static uint IncomeGoldDefaultValue = 0;

    private uint incomeGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IncomeGold {
      get { if ((_hasBits0 & 536870912) != 0) { return incomeGold_; } else { return IncomeGoldDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        incomeGold_ = value;
      }
    }
    /// <summary>Gets whether the "income_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIncomeGold {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "income_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIncomeGold() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "item_value" field.</summary>
    public const int ItemValueFieldNumber = 36;
    private readonly static uint ItemValueDefaultValue = 0;

    private uint itemValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemValue {
      get { if ((_hasBits0 & 1073741824) != 0) { return itemValue_; } else { return ItemValueDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        itemValue_ = value;
      }
    }
    /// <summary>Gets whether the "item_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemValue {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "item_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemValue() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "support_gold_spent" field.</summary>
    public const int SupportGoldSpentFieldNumber = 37;
    private readonly static uint SupportGoldSpentDefaultValue = 0;

    private uint supportGoldSpent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SupportGoldSpent {
      get { if ((_hasBits0 & -2147483648) != 0) { return supportGoldSpent_; } else { return SupportGoldSpentDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        supportGoldSpent_ = value;
      }
    }
    /// <summary>Gets whether the "support_gold_spent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSupportGoldSpent {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "support_gold_spent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSupportGoldSpent() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "camps_stacked" field.</summary>
    public const int CampsStackedFieldNumber = 38;
    private readonly static uint CampsStackedDefaultValue = 0;

    private uint campsStacked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CampsStacked {
      get { if ((_hasBits1 & 1) != 0) { return campsStacked_; } else { return CampsStackedDefaultValue; } }
      set {
        _hasBits1 |= 1;
        campsStacked_ = value;
      }
    }
    /// <summary>Gets whether the "camps_stacked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCampsStacked {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "camps_stacked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCampsStacked() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "wards_placed" field.</summary>
    public const int WardsPlacedFieldNumber = 39;
    private readonly static uint WardsPlacedDefaultValue = 0;

    private uint wardsPlaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WardsPlaced {
      get { if ((_hasBits1 & 2) != 0) { return wardsPlaced_; } else { return WardsPlacedDefaultValue; } }
      set {
        _hasBits1 |= 2;
        wardsPlaced_ = value;
      }
    }
    /// <summary>Gets whether the "wards_placed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWardsPlaced {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "wards_placed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWardsPlaced() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "triple_kills" field.</summary>
    public const int TripleKillsFieldNumber = 40;
    private readonly static uint TripleKillsDefaultValue = 0;

    private uint tripleKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TripleKills {
      get { if ((_hasBits1 & 4) != 0) { return tripleKills_; } else { return TripleKillsDefaultValue; } }
      set {
        _hasBits1 |= 4;
        tripleKills_ = value;
      }
    }
    /// <summary>Gets whether the "triple_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTripleKills {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "triple_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTripleKills() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "rampages" field.</summary>
    public const int RampagesFieldNumber = 41;
    private readonly static uint RampagesDefaultValue = 0;

    private uint rampages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rampages {
      get { if ((_hasBits1 & 8) != 0) { return rampages_; } else { return RampagesDefaultValue; } }
      set {
        _hasBits1 |= 8;
        rampages_ = value;
      }
    }
    /// <summary>Gets whether the "rampages" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRampages {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "rampages" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRampages() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "custom_stats" field.</summary>
    public const int CustomStatsFieldNumber = 42;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchPlayerTimedCustomStat> _repeated_customStats_codec
        = pb::FieldCodec.ForMessage(338, global::Steam.Protos.Dota2.CMatchPlayerTimedCustomStat.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerTimedCustomStat> customStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerTimedCustomStat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerTimedCustomStat> CustomStats {
      get { return customStats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchPlayerTimedStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchPlayerTimedStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Kills != other.Kills) return false;
      if (Deaths != other.Deaths) return false;
      if (Assists != other.Assists) return false;
      if (NetWorth != other.NetWorth) return false;
      if (Xp != other.Xp) return false;
      if (LastHits != other.LastHits) return false;
      if (Denies != other.Denies) return false;
      if (BountyRuneGold != other.BountyRuneGold) return false;
      if (RangeCreepUpgradeGold != other.RangeCreepUpgradeGold) return false;
      if (ObserverWardsDewarded != other.ObserverWardsDewarded) return false;
      if (ReliableGoldEarned != other.ReliableGoldEarned) return false;
      if (GoldLossPrevented != other.GoldLossPrevented) return false;
      if (HeroKillGold != other.HeroKillGold) return false;
      if (CreepKillGold != other.CreepKillGold) return false;
      if (BuildingGold != other.BuildingGold) return false;
      if (OtherGold != other.OtherGold) return false;
      if (ComebackGold != other.ComebackGold) return false;
      if (ExperimentalGold != other.ExperimentalGold) return false;
      if (Experimental2Gold != other.Experimental2Gold) return false;
      if (CreepDenyGold != other.CreepDenyGold) return false;
      if (TpScrollsPurchased1 != other.TpScrollsPurchased1) return false;
      if (TpScrollsPurchased2 != other.TpScrollsPurchased2) return false;
      if (TpScrollsPurchased3 != other.TpScrollsPurchased3) return false;
      if (TpScrollsPurchased4 != other.TpScrollsPurchased4) return false;
      if (TpScrollsPurchased5 != other.TpScrollsPurchased5) return false;
      if (NeutralGold != other.NeutralGold) return false;
      if (CourierGold != other.CourierGold) return false;
      if (RoshanGold != other.RoshanGold) return false;
      if (IncomeGold != other.IncomeGold) return false;
      if (ItemValue != other.ItemValue) return false;
      if (SupportGoldSpent != other.SupportGoldSpent) return false;
      if (CampsStacked != other.CampsStacked) return false;
      if (WardsPlaced != other.WardsPlaced) return false;
      if (TripleKills != other.TripleKills) return false;
      if (Rampages != other.Rampages) return false;
      if(!customStats_.Equals(other.customStats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTime) hash ^= Time.GetHashCode();
      if (HasKills) hash ^= Kills.GetHashCode();
      if (HasDeaths) hash ^= Deaths.GetHashCode();
      if (HasAssists) hash ^= Assists.GetHashCode();
      if (HasNetWorth) hash ^= NetWorth.GetHashCode();
      if (HasXp) hash ^= Xp.GetHashCode();
      if (HasLastHits) hash ^= LastHits.GetHashCode();
      if (HasDenies) hash ^= Denies.GetHashCode();
      if (HasBountyRuneGold) hash ^= BountyRuneGold.GetHashCode();
      if (HasRangeCreepUpgradeGold) hash ^= RangeCreepUpgradeGold.GetHashCode();
      if (HasObserverWardsDewarded) hash ^= ObserverWardsDewarded.GetHashCode();
      if (HasReliableGoldEarned) hash ^= ReliableGoldEarned.GetHashCode();
      if (HasGoldLossPrevented) hash ^= GoldLossPrevented.GetHashCode();
      if (HasHeroKillGold) hash ^= HeroKillGold.GetHashCode();
      if (HasCreepKillGold) hash ^= CreepKillGold.GetHashCode();
      if (HasBuildingGold) hash ^= BuildingGold.GetHashCode();
      if (HasOtherGold) hash ^= OtherGold.GetHashCode();
      if (HasComebackGold) hash ^= ComebackGold.GetHashCode();
      if (HasExperimentalGold) hash ^= ExperimentalGold.GetHashCode();
      if (HasExperimental2Gold) hash ^= Experimental2Gold.GetHashCode();
      if (HasCreepDenyGold) hash ^= CreepDenyGold.GetHashCode();
      if (HasTpScrollsPurchased1) hash ^= TpScrollsPurchased1.GetHashCode();
      if (HasTpScrollsPurchased2) hash ^= TpScrollsPurchased2.GetHashCode();
      if (HasTpScrollsPurchased3) hash ^= TpScrollsPurchased3.GetHashCode();
      if (HasTpScrollsPurchased4) hash ^= TpScrollsPurchased4.GetHashCode();
      if (HasTpScrollsPurchased5) hash ^= TpScrollsPurchased5.GetHashCode();
      if (HasNeutralGold) hash ^= NeutralGold.GetHashCode();
      if (HasCourierGold) hash ^= CourierGold.GetHashCode();
      if (HasRoshanGold) hash ^= RoshanGold.GetHashCode();
      if (HasIncomeGold) hash ^= IncomeGold.GetHashCode();
      if (HasItemValue) hash ^= ItemValue.GetHashCode();
      if (HasSupportGoldSpent) hash ^= SupportGoldSpent.GetHashCode();
      if (HasCampsStacked) hash ^= CampsStacked.GetHashCode();
      if (HasWardsPlaced) hash ^= WardsPlaced.GetHashCode();
      if (HasTripleKills) hash ^= TripleKills.GetHashCode();
      if (HasRampages) hash ^= Rampages.GetHashCode();
      hash ^= customStats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteUInt32(Time);
      }
      if (HasKills) {
        output.WriteRawTag(16);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(24);
        output.WriteUInt32(Deaths);
      }
      if (HasAssists) {
        output.WriteRawTag(32);
        output.WriteUInt32(Assists);
      }
      if (HasNetWorth) {
        output.WriteRawTag(40);
        output.WriteUInt32(NetWorth);
      }
      if (HasXp) {
        output.WriteRawTag(48);
        output.WriteUInt32(Xp);
      }
      if (HasLastHits) {
        output.WriteRawTag(56);
        output.WriteUInt32(LastHits);
      }
      if (HasDenies) {
        output.WriteRawTag(64);
        output.WriteUInt32(Denies);
      }
      if (HasBountyRuneGold) {
        output.WriteRawTag(72);
        output.WriteUInt32(BountyRuneGold);
      }
      if (HasRangeCreepUpgradeGold) {
        output.WriteRawTag(80);
        output.WriteUInt32(RangeCreepUpgradeGold);
      }
      if (HasObserverWardsDewarded) {
        output.WriteRawTag(88);
        output.WriteUInt32(ObserverWardsDewarded);
      }
      if (HasReliableGoldEarned) {
        output.WriteRawTag(96);
        output.WriteUInt32(ReliableGoldEarned);
      }
      if (HasGoldLossPrevented) {
        output.WriteRawTag(104);
        output.WriteUInt32(GoldLossPrevented);
      }
      if (HasHeroKillGold) {
        output.WriteRawTag(112);
        output.WriteUInt32(HeroKillGold);
      }
      if (HasCreepKillGold) {
        output.WriteRawTag(120);
        output.WriteUInt32(CreepKillGold);
      }
      if (HasBuildingGold) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(BuildingGold);
      }
      if (HasOtherGold) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(OtherGold);
      }
      if (HasComebackGold) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(ComebackGold);
      }
      if (HasExperimentalGold) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(ExperimentalGold);
      }
      if (HasExperimental2Gold) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Experimental2Gold);
      }
      if (HasCreepDenyGold) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(CreepDenyGold);
      }
      if (HasTpScrollsPurchased1) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(TpScrollsPurchased1);
      }
      if (HasTpScrollsPurchased2) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(TpScrollsPurchased2);
      }
      if (HasTpScrollsPurchased3) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(TpScrollsPurchased3);
      }
      if (HasTpScrollsPurchased4) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(TpScrollsPurchased4);
      }
      if (HasTpScrollsPurchased5) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(TpScrollsPurchased5);
      }
      if (HasNeutralGold) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(NeutralGold);
      }
      if (HasCourierGold) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(CourierGold);
      }
      if (HasRoshanGold) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(RoshanGold);
      }
      if (HasIncomeGold) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(IncomeGold);
      }
      if (HasItemValue) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(ItemValue);
      }
      if (HasSupportGoldSpent) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(SupportGoldSpent);
      }
      if (HasCampsStacked) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(CampsStacked);
      }
      if (HasWardsPlaced) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(WardsPlaced);
      }
      if (HasTripleKills) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(TripleKills);
      }
      if (HasRampages) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(Rampages);
      }
      customStats_.WriteTo(output, _repeated_customStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteUInt32(Time);
      }
      if (HasKills) {
        output.WriteRawTag(16);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(24);
        output.WriteUInt32(Deaths);
      }
      if (HasAssists) {
        output.WriteRawTag(32);
        output.WriteUInt32(Assists);
      }
      if (HasNetWorth) {
        output.WriteRawTag(40);
        output.WriteUInt32(NetWorth);
      }
      if (HasXp) {
        output.WriteRawTag(48);
        output.WriteUInt32(Xp);
      }
      if (HasLastHits) {
        output.WriteRawTag(56);
        output.WriteUInt32(LastHits);
      }
      if (HasDenies) {
        output.WriteRawTag(64);
        output.WriteUInt32(Denies);
      }
      if (HasBountyRuneGold) {
        output.WriteRawTag(72);
        output.WriteUInt32(BountyRuneGold);
      }
      if (HasRangeCreepUpgradeGold) {
        output.WriteRawTag(80);
        output.WriteUInt32(RangeCreepUpgradeGold);
      }
      if (HasObserverWardsDewarded) {
        output.WriteRawTag(88);
        output.WriteUInt32(ObserverWardsDewarded);
      }
      if (HasReliableGoldEarned) {
        output.WriteRawTag(96);
        output.WriteUInt32(ReliableGoldEarned);
      }
      if (HasGoldLossPrevented) {
        output.WriteRawTag(104);
        output.WriteUInt32(GoldLossPrevented);
      }
      if (HasHeroKillGold) {
        output.WriteRawTag(112);
        output.WriteUInt32(HeroKillGold);
      }
      if (HasCreepKillGold) {
        output.WriteRawTag(120);
        output.WriteUInt32(CreepKillGold);
      }
      if (HasBuildingGold) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(BuildingGold);
      }
      if (HasOtherGold) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(OtherGold);
      }
      if (HasComebackGold) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(ComebackGold);
      }
      if (HasExperimentalGold) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(ExperimentalGold);
      }
      if (HasExperimental2Gold) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Experimental2Gold);
      }
      if (HasCreepDenyGold) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(CreepDenyGold);
      }
      if (HasTpScrollsPurchased1) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(TpScrollsPurchased1);
      }
      if (HasTpScrollsPurchased2) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(TpScrollsPurchased2);
      }
      if (HasTpScrollsPurchased3) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(TpScrollsPurchased3);
      }
      if (HasTpScrollsPurchased4) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(TpScrollsPurchased4);
      }
      if (HasTpScrollsPurchased5) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(TpScrollsPurchased5);
      }
      if (HasNeutralGold) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(NeutralGold);
      }
      if (HasCourierGold) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(CourierGold);
      }
      if (HasRoshanGold) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(RoshanGold);
      }
      if (HasIncomeGold) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(IncomeGold);
      }
      if (HasItemValue) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(ItemValue);
      }
      if (HasSupportGoldSpent) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(SupportGoldSpent);
      }
      if (HasCampsStacked) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(CampsStacked);
      }
      if (HasWardsPlaced) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(WardsPlaced);
      }
      if (HasTripleKills) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(TripleKills);
      }
      if (HasRampages) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(Rampages);
      }
      customStats_.WriteTo(ref output, _repeated_customStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (HasKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
      }
      if (HasDeaths) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
      }
      if (HasAssists) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
      }
      if (HasNetWorth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
      }
      if (HasXp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Xp);
      }
      if (HasLastHits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
      }
      if (HasDenies) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Denies);
      }
      if (HasBountyRuneGold) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BountyRuneGold);
      }
      if (HasRangeCreepUpgradeGold) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RangeCreepUpgradeGold);
      }
      if (HasObserverWardsDewarded) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObserverWardsDewarded);
      }
      if (HasReliableGoldEarned) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReliableGoldEarned);
      }
      if (HasGoldLossPrevented) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldLossPrevented);
      }
      if (HasHeroKillGold) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroKillGold);
      }
      if (HasCreepKillGold) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreepKillGold);
      }
      if (HasBuildingGold) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuildingGold);
      }
      if (HasOtherGold) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OtherGold);
      }
      if (HasComebackGold) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ComebackGold);
      }
      if (HasExperimentalGold) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExperimentalGold);
      }
      if (HasExperimental2Gold) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Experimental2Gold);
      }
      if (HasCreepDenyGold) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CreepDenyGold);
      }
      if (HasTpScrollsPurchased1) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TpScrollsPurchased1);
      }
      if (HasTpScrollsPurchased2) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TpScrollsPurchased2);
      }
      if (HasTpScrollsPurchased3) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TpScrollsPurchased3);
      }
      if (HasTpScrollsPurchased4) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TpScrollsPurchased4);
      }
      if (HasTpScrollsPurchased5) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TpScrollsPurchased5);
      }
      if (HasNeutralGold) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NeutralGold);
      }
      if (HasCourierGold) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CourierGold);
      }
      if (HasRoshanGold) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RoshanGold);
      }
      if (HasIncomeGold) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IncomeGold);
      }
      if (HasItemValue) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ItemValue);
      }
      if (HasSupportGoldSpent) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SupportGoldSpent);
      }
      if (HasCampsStacked) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CampsStacked);
      }
      if (HasWardsPlaced) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WardsPlaced);
      }
      if (HasTripleKills) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TripleKills);
      }
      if (HasRampages) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Rampages);
      }
      size += customStats_.CalculateSize(_repeated_customStats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchPlayerTimedStats other) {
      if (other == null) {
        return;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasKills) {
        Kills = other.Kills;
      }
      if (other.HasDeaths) {
        Deaths = other.Deaths;
      }
      if (other.HasAssists) {
        Assists = other.Assists;
      }
      if (other.HasNetWorth) {
        NetWorth = other.NetWorth;
      }
      if (other.HasXp) {
        Xp = other.Xp;
      }
      if (other.HasLastHits) {
        LastHits = other.LastHits;
      }
      if (other.HasDenies) {
        Denies = other.Denies;
      }
      if (other.HasBountyRuneGold) {
        BountyRuneGold = other.BountyRuneGold;
      }
      if (other.HasRangeCreepUpgradeGold) {
        RangeCreepUpgradeGold = other.RangeCreepUpgradeGold;
      }
      if (other.HasObserverWardsDewarded) {
        ObserverWardsDewarded = other.ObserverWardsDewarded;
      }
      if (other.HasReliableGoldEarned) {
        ReliableGoldEarned = other.ReliableGoldEarned;
      }
      if (other.HasGoldLossPrevented) {
        GoldLossPrevented = other.GoldLossPrevented;
      }
      if (other.HasHeroKillGold) {
        HeroKillGold = other.HeroKillGold;
      }
      if (other.HasCreepKillGold) {
        CreepKillGold = other.CreepKillGold;
      }
      if (other.HasBuildingGold) {
        BuildingGold = other.BuildingGold;
      }
      if (other.HasOtherGold) {
        OtherGold = other.OtherGold;
      }
      if (other.HasComebackGold) {
        ComebackGold = other.ComebackGold;
      }
      if (other.HasExperimentalGold) {
        ExperimentalGold = other.ExperimentalGold;
      }
      if (other.HasExperimental2Gold) {
        Experimental2Gold = other.Experimental2Gold;
      }
      if (other.HasCreepDenyGold) {
        CreepDenyGold = other.CreepDenyGold;
      }
      if (other.HasTpScrollsPurchased1) {
        TpScrollsPurchased1 = other.TpScrollsPurchased1;
      }
      if (other.HasTpScrollsPurchased2) {
        TpScrollsPurchased2 = other.TpScrollsPurchased2;
      }
      if (other.HasTpScrollsPurchased3) {
        TpScrollsPurchased3 = other.TpScrollsPurchased3;
      }
      if (other.HasTpScrollsPurchased4) {
        TpScrollsPurchased4 = other.TpScrollsPurchased4;
      }
      if (other.HasTpScrollsPurchased5) {
        TpScrollsPurchased5 = other.TpScrollsPurchased5;
      }
      if (other.HasNeutralGold) {
        NeutralGold = other.NeutralGold;
      }
      if (other.HasCourierGold) {
        CourierGold = other.CourierGold;
      }
      if (other.HasRoshanGold) {
        RoshanGold = other.RoshanGold;
      }
      if (other.HasIncomeGold) {
        IncomeGold = other.IncomeGold;
      }
      if (other.HasItemValue) {
        ItemValue = other.ItemValue;
      }
      if (other.HasSupportGoldSpent) {
        SupportGoldSpent = other.SupportGoldSpent;
      }
      if (other.HasCampsStacked) {
        CampsStacked = other.CampsStacked;
      }
      if (other.HasWardsPlaced) {
        WardsPlaced = other.WardsPlaced;
      }
      if (other.HasTripleKills) {
        TripleKills = other.TripleKills;
      }
      if (other.HasRampages) {
        Rampages = other.Rampages;
      }
      customStats_.Add(other.customStats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadUInt32();
            break;
          }
          case 16: {
            Kills = input.ReadUInt32();
            break;
          }
          case 24: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 32: {
            Assists = input.ReadUInt32();
            break;
          }
          case 40: {
            NetWorth = input.ReadUInt32();
            break;
          }
          case 48: {
            Xp = input.ReadUInt32();
            break;
          }
          case 56: {
            LastHits = input.ReadUInt32();
            break;
          }
          case 64: {
            Denies = input.ReadUInt32();
            break;
          }
          case 72: {
            BountyRuneGold = input.ReadUInt32();
            break;
          }
          case 80: {
            RangeCreepUpgradeGold = input.ReadUInt32();
            break;
          }
          case 88: {
            ObserverWardsDewarded = input.ReadUInt32();
            break;
          }
          case 96: {
            ReliableGoldEarned = input.ReadUInt32();
            break;
          }
          case 104: {
            GoldLossPrevented = input.ReadUInt32();
            break;
          }
          case 112: {
            HeroKillGold = input.ReadUInt32();
            break;
          }
          case 120: {
            CreepKillGold = input.ReadUInt32();
            break;
          }
          case 128: {
            BuildingGold = input.ReadUInt32();
            break;
          }
          case 136: {
            OtherGold = input.ReadUInt32();
            break;
          }
          case 144: {
            ComebackGold = input.ReadUInt32();
            break;
          }
          case 152: {
            ExperimentalGold = input.ReadUInt32();
            break;
          }
          case 160: {
            Experimental2Gold = input.ReadUInt32();
            break;
          }
          case 168: {
            CreepDenyGold = input.ReadUInt32();
            break;
          }
          case 176: {
            TpScrollsPurchased1 = input.ReadUInt32();
            break;
          }
          case 184: {
            TpScrollsPurchased2 = input.ReadUInt32();
            break;
          }
          case 192: {
            TpScrollsPurchased3 = input.ReadUInt32();
            break;
          }
          case 200: {
            TpScrollsPurchased4 = input.ReadUInt32();
            break;
          }
          case 208: {
            TpScrollsPurchased5 = input.ReadUInt32();
            break;
          }
          case 216: {
            NeutralGold = input.ReadUInt32();
            break;
          }
          case 224: {
            CourierGold = input.ReadUInt32();
            break;
          }
          case 232: {
            RoshanGold = input.ReadUInt32();
            break;
          }
          case 240: {
            IncomeGold = input.ReadUInt32();
            break;
          }
          case 288: {
            ItemValue = input.ReadUInt32();
            break;
          }
          case 296: {
            SupportGoldSpent = input.ReadUInt32();
            break;
          }
          case 304: {
            CampsStacked = input.ReadUInt32();
            break;
          }
          case 312: {
            WardsPlaced = input.ReadUInt32();
            break;
          }
          case 320: {
            TripleKills = input.ReadUInt32();
            break;
          }
          case 328: {
            Rampages = input.ReadUInt32();
            break;
          }
          case 338: {
            customStats_.AddEntriesFrom(input, _repeated_customStats_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Time = input.ReadUInt32();
            break;
          }
          case 16: {
            Kills = input.ReadUInt32();
            break;
          }
          case 24: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 32: {
            Assists = input.ReadUInt32();
            break;
          }
          case 40: {
            NetWorth = input.ReadUInt32();
            break;
          }
          case 48: {
            Xp = input.ReadUInt32();
            break;
          }
          case 56: {
            LastHits = input.ReadUInt32();
            break;
          }
          case 64: {
            Denies = input.ReadUInt32();
            break;
          }
          case 72: {
            BountyRuneGold = input.ReadUInt32();
            break;
          }
          case 80: {
            RangeCreepUpgradeGold = input.ReadUInt32();
            break;
          }
          case 88: {
            ObserverWardsDewarded = input.ReadUInt32();
            break;
          }
          case 96: {
            ReliableGoldEarned = input.ReadUInt32();
            break;
          }
          case 104: {
            GoldLossPrevented = input.ReadUInt32();
            break;
          }
          case 112: {
            HeroKillGold = input.ReadUInt32();
            break;
          }
          case 120: {
            CreepKillGold = input.ReadUInt32();
            break;
          }
          case 128: {
            BuildingGold = input.ReadUInt32();
            break;
          }
          case 136: {
            OtherGold = input.ReadUInt32();
            break;
          }
          case 144: {
            ComebackGold = input.ReadUInt32();
            break;
          }
          case 152: {
            ExperimentalGold = input.ReadUInt32();
            break;
          }
          case 160: {
            Experimental2Gold = input.ReadUInt32();
            break;
          }
          case 168: {
            CreepDenyGold = input.ReadUInt32();
            break;
          }
          case 176: {
            TpScrollsPurchased1 = input.ReadUInt32();
            break;
          }
          case 184: {
            TpScrollsPurchased2 = input.ReadUInt32();
            break;
          }
          case 192: {
            TpScrollsPurchased3 = input.ReadUInt32();
            break;
          }
          case 200: {
            TpScrollsPurchased4 = input.ReadUInt32();
            break;
          }
          case 208: {
            TpScrollsPurchased5 = input.ReadUInt32();
            break;
          }
          case 216: {
            NeutralGold = input.ReadUInt32();
            break;
          }
          case 224: {
            CourierGold = input.ReadUInt32();
            break;
          }
          case 232: {
            RoshanGold = input.ReadUInt32();
            break;
          }
          case 240: {
            IncomeGold = input.ReadUInt32();
            break;
          }
          case 288: {
            ItemValue = input.ReadUInt32();
            break;
          }
          case 296: {
            SupportGoldSpent = input.ReadUInt32();
            break;
          }
          case 304: {
            CampsStacked = input.ReadUInt32();
            break;
          }
          case 312: {
            WardsPlaced = input.ReadUInt32();
            break;
          }
          case 320: {
            TripleKills = input.ReadUInt32();
            break;
          }
          case 328: {
            Rampages = input.ReadUInt32();
            break;
          }
          case 338: {
            customStats_.AddEntriesFrom(ref input, _repeated_customStats_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMatchTeamTimedStats : pb::IMessage<CMatchTeamTimedStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMatchTeamTimedStats> _parser = new pb::MessageParser<CMatchTeamTimedStats>(() => new CMatchTeamTimedStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchTeamTimedStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchTeamTimedStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchTeamTimedStats(CMatchTeamTimedStats other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_;
      enemyTowersKilled_ = other.enemyTowersKilled_;
      enemyBarracksKilled_ = other.enemyBarracksKilled_;
      enemyTowersStatus_ = other.enemyTowersStatus_;
      enemyBarracksStatus_ = other.enemyBarracksStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchTeamTimedStats Clone() {
      return new CMatchTeamTimedStats(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private readonly static uint TimeDefaultValue = 0;

    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { if ((_hasBits0 & 1) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "enemy_towers_killed" field.</summary>
    public const int EnemyTowersKilledFieldNumber = 2;
    private readonly static uint EnemyTowersKilledDefaultValue = 0;

    private uint enemyTowersKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnemyTowersKilled {
      get { if ((_hasBits0 & 2) != 0) { return enemyTowersKilled_; } else { return EnemyTowersKilledDefaultValue; } }
      set {
        _hasBits0 |= 2;
        enemyTowersKilled_ = value;
      }
    }
    /// <summary>Gets whether the "enemy_towers_killed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnemyTowersKilled {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "enemy_towers_killed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnemyTowersKilled() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "enemy_barracks_killed" field.</summary>
    public const int EnemyBarracksKilledFieldNumber = 3;
    private readonly static uint EnemyBarracksKilledDefaultValue = 0;

    private uint enemyBarracksKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnemyBarracksKilled {
      get { if ((_hasBits0 & 4) != 0) { return enemyBarracksKilled_; } else { return EnemyBarracksKilledDefaultValue; } }
      set {
        _hasBits0 |= 4;
        enemyBarracksKilled_ = value;
      }
    }
    /// <summary>Gets whether the "enemy_barracks_killed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnemyBarracksKilled {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "enemy_barracks_killed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnemyBarracksKilled() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "enemy_towers_status" field.</summary>
    public const int EnemyTowersStatusFieldNumber = 4;
    private readonly static uint EnemyTowersStatusDefaultValue = 0;

    private uint enemyTowersStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnemyTowersStatus {
      get { if ((_hasBits0 & 8) != 0) { return enemyTowersStatus_; } else { return EnemyTowersStatusDefaultValue; } }
      set {
        _hasBits0 |= 8;
        enemyTowersStatus_ = value;
      }
    }
    /// <summary>Gets whether the "enemy_towers_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnemyTowersStatus {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "enemy_towers_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnemyTowersStatus() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "enemy_barracks_status" field.</summary>
    public const int EnemyBarracksStatusFieldNumber = 5;
    private readonly static uint EnemyBarracksStatusDefaultValue = 0;

    private uint enemyBarracksStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnemyBarracksStatus {
      get { if ((_hasBits0 & 16) != 0) { return enemyBarracksStatus_; } else { return EnemyBarracksStatusDefaultValue; } }
      set {
        _hasBits0 |= 16;
        enemyBarracksStatus_ = value;
      }
    }
    /// <summary>Gets whether the "enemy_barracks_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnemyBarracksStatus {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "enemy_barracks_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnemyBarracksStatus() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchTeamTimedStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchTeamTimedStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (EnemyTowersKilled != other.EnemyTowersKilled) return false;
      if (EnemyBarracksKilled != other.EnemyBarracksKilled) return false;
      if (EnemyTowersStatus != other.EnemyTowersStatus) return false;
      if (EnemyBarracksStatus != other.EnemyBarracksStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTime) hash ^= Time.GetHashCode();
      if (HasEnemyTowersKilled) hash ^= EnemyTowersKilled.GetHashCode();
      if (HasEnemyBarracksKilled) hash ^= EnemyBarracksKilled.GetHashCode();
      if (HasEnemyTowersStatus) hash ^= EnemyTowersStatus.GetHashCode();
      if (HasEnemyBarracksStatus) hash ^= EnemyBarracksStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteUInt32(Time);
      }
      if (HasEnemyTowersKilled) {
        output.WriteRawTag(16);
        output.WriteUInt32(EnemyTowersKilled);
      }
      if (HasEnemyBarracksKilled) {
        output.WriteRawTag(24);
        output.WriteUInt32(EnemyBarracksKilled);
      }
      if (HasEnemyTowersStatus) {
        output.WriteRawTag(32);
        output.WriteUInt32(EnemyTowersStatus);
      }
      if (HasEnemyBarracksStatus) {
        output.WriteRawTag(40);
        output.WriteUInt32(EnemyBarracksStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteUInt32(Time);
      }
      if (HasEnemyTowersKilled) {
        output.WriteRawTag(16);
        output.WriteUInt32(EnemyTowersKilled);
      }
      if (HasEnemyBarracksKilled) {
        output.WriteRawTag(24);
        output.WriteUInt32(EnemyBarracksKilled);
      }
      if (HasEnemyTowersStatus) {
        output.WriteRawTag(32);
        output.WriteUInt32(EnemyTowersStatus);
      }
      if (HasEnemyBarracksStatus) {
        output.WriteRawTag(40);
        output.WriteUInt32(EnemyBarracksStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (HasEnemyTowersKilled) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyTowersKilled);
      }
      if (HasEnemyBarracksKilled) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyBarracksKilled);
      }
      if (HasEnemyTowersStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyTowersStatus);
      }
      if (HasEnemyBarracksStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyBarracksStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchTeamTimedStats other) {
      if (other == null) {
        return;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasEnemyTowersKilled) {
        EnemyTowersKilled = other.EnemyTowersKilled;
      }
      if (other.HasEnemyBarracksKilled) {
        EnemyBarracksKilled = other.EnemyBarracksKilled;
      }
      if (other.HasEnemyTowersStatus) {
        EnemyTowersStatus = other.EnemyTowersStatus;
      }
      if (other.HasEnemyBarracksStatus) {
        EnemyBarracksStatus = other.EnemyBarracksStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadUInt32();
            break;
          }
          case 16: {
            EnemyTowersKilled = input.ReadUInt32();
            break;
          }
          case 24: {
            EnemyBarracksKilled = input.ReadUInt32();
            break;
          }
          case 32: {
            EnemyTowersStatus = input.ReadUInt32();
            break;
          }
          case 40: {
            EnemyBarracksStatus = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Time = input.ReadUInt32();
            break;
          }
          case 16: {
            EnemyTowersKilled = input.ReadUInt32();
            break;
          }
          case 24: {
            EnemyBarracksKilled = input.ReadUInt32();
            break;
          }
          case 32: {
            EnemyTowersStatus = input.ReadUInt32();
            break;
          }
          case 40: {
            EnemyBarracksStatus = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMatchAdditionalUnitInventory : pb::IMessage<CMatchAdditionalUnitInventory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMatchAdditionalUnitInventory> _parser = new pb::MessageParser<CMatchAdditionalUnitInventory>(() => new CMatchAdditionalUnitInventory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchAdditionalUnitInventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchAdditionalUnitInventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchAdditionalUnitInventory(CMatchAdditionalUnitInventory other) : this() {
      unitName_ = other.unitName_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchAdditionalUnitInventory Clone() {
      return new CMatchAdditionalUnitInventory(this);
    }

    /// <summary>Field number for the "unit_name" field.</summary>
    public const int UnitNameFieldNumber = 1;
    private readonly static string UnitNameDefaultValue = "";

    private string unitName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnitName {
      get { return unitName_ ?? UnitNameDefaultValue; }
      set {
        unitName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "unit_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnitName {
      get { return unitName_ != null; }
    }
    /// <summary>Clears the value of the "unit_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnitName() {
      unitName_ = null;
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_items_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchAdditionalUnitInventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchAdditionalUnitInventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitName != other.UnitName) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUnitName) hash ^= UnitName.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUnitName) {
        output.WriteRawTag(10);
        output.WriteString(UnitName);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUnitName) {
        output.WriteRawTag(10);
        output.WriteString(UnitName);
      }
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUnitName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitName);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchAdditionalUnitInventory other) {
      if (other == null) {
        return;
      }
      if (other.HasUnitName) {
        UnitName = other.UnitName;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UnitName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UnitName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMatchPlayerPermanentBuff : pb::IMessage<CMatchPlayerPermanentBuff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMatchPlayerPermanentBuff> _parser = new pb::MessageParser<CMatchPlayerPermanentBuff>(() => new CMatchPlayerPermanentBuff());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchPlayerPermanentBuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerPermanentBuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerPermanentBuff(CMatchPlayerPermanentBuff other) : this() {
      _hasBits0 = other._hasBits0;
      permanentBuff_ = other.permanentBuff_;
      stackCount_ = other.stackCount_;
      grantTime_ = other.grantTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerPermanentBuff Clone() {
      return new CMatchPlayerPermanentBuff(this);
    }

    /// <summary>Field number for the "permanent_buff" field.</summary>
    public const int PermanentBuffFieldNumber = 1;
    private readonly static uint PermanentBuffDefaultValue = 0;

    private uint permanentBuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PermanentBuff {
      get { if ((_hasBits0 & 1) != 0) { return permanentBuff_; } else { return PermanentBuffDefaultValue; } }
      set {
        _hasBits0 |= 1;
        permanentBuff_ = value;
      }
    }
    /// <summary>Gets whether the "permanent_buff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPermanentBuff {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "permanent_buff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPermanentBuff() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stack_count" field.</summary>
    public const int StackCountFieldNumber = 2;
    private readonly static uint StackCountDefaultValue = 0;

    private uint stackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StackCount {
      get { if ((_hasBits0 & 2) != 0) { return stackCount_; } else { return StackCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        stackCount_ = value;
      }
    }
    /// <summary>Gets whether the "stack_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStackCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "stack_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStackCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "grant_time" field.</summary>
    public const int GrantTimeFieldNumber = 3;
    private readonly static uint GrantTimeDefaultValue = 0;

    private uint grantTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GrantTime {
      get { if ((_hasBits0 & 4) != 0) { return grantTime_; } else { return GrantTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        grantTime_ = value;
      }
    }
    /// <summary>Gets whether the "grant_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGrantTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "grant_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGrantTime() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchPlayerPermanentBuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchPlayerPermanentBuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PermanentBuff != other.PermanentBuff) return false;
      if (StackCount != other.StackCount) return false;
      if (GrantTime != other.GrantTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPermanentBuff) hash ^= PermanentBuff.GetHashCode();
      if (HasStackCount) hash ^= StackCount.GetHashCode();
      if (HasGrantTime) hash ^= GrantTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPermanentBuff) {
        output.WriteRawTag(8);
        output.WriteUInt32(PermanentBuff);
      }
      if (HasStackCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(StackCount);
      }
      if (HasGrantTime) {
        output.WriteRawTag(24);
        output.WriteUInt32(GrantTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPermanentBuff) {
        output.WriteRawTag(8);
        output.WriteUInt32(PermanentBuff);
      }
      if (HasStackCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(StackCount);
      }
      if (HasGrantTime) {
        output.WriteRawTag(24);
        output.WriteUInt32(GrantTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPermanentBuff) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PermanentBuff);
      }
      if (HasStackCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StackCount);
      }
      if (HasGrantTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GrantTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchPlayerPermanentBuff other) {
      if (other == null) {
        return;
      }
      if (other.HasPermanentBuff) {
        PermanentBuff = other.PermanentBuff;
      }
      if (other.HasStackCount) {
        StackCount = other.StackCount;
      }
      if (other.HasGrantTime) {
        GrantTime = other.GrantTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PermanentBuff = input.ReadUInt32();
            break;
          }
          case 16: {
            StackCount = input.ReadUInt32();
            break;
          }
          case 24: {
            GrantTime = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PermanentBuff = input.ReadUInt32();
            break;
          }
          case 16: {
            StackCount = input.ReadUInt32();
            break;
          }
          case 24: {
            GrantTime = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMatchHeroSelectEvent : pb::IMessage<CMatchHeroSelectEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMatchHeroSelectEvent> _parser = new pb::MessageParser<CMatchHeroSelectEvent>(() => new CMatchHeroSelectEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchHeroSelectEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchHeroSelectEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchHeroSelectEvent(CMatchHeroSelectEvent other) : this() {
      _hasBits0 = other._hasBits0;
      isPick_ = other.isPick_;
      team_ = other.team_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchHeroSelectEvent Clone() {
      return new CMatchHeroSelectEvent(this);
    }

    /// <summary>Field number for the "is_pick" field.</summary>
    public const int IsPickFieldNumber = 1;
    private readonly static bool IsPickDefaultValue = false;

    private bool isPick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPick {
      get { if ((_hasBits0 & 1) != 0) { return isPick_; } else { return IsPickDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isPick_ = value;
      }
    }
    /// <summary>Gets whether the "is_pick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPick {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_pick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPick() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private readonly static uint TeamDefaultValue = 0;

    private uint team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Team {
      get { if ((_hasBits0 & 2) != 0) { return team_; } else { return TeamDefaultValue; } }
      set {
        _hasBits0 |= 2;
        team_ = value;
      }
    }
    /// <summary>Gets whether the "team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeam {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeam() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchHeroSelectEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchHeroSelectEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsPick != other.IsPick) return false;
      if (Team != other.Team) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsPick) hash ^= IsPick.GetHashCode();
      if (HasTeam) hash ^= Team.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsPick) {
        output.WriteRawTag(8);
        output.WriteBool(IsPick);
      }
      if (HasTeam) {
        output.WriteRawTag(16);
        output.WriteUInt32(Team);
      }
      if (HasHeroId) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsPick) {
        output.WriteRawTag(8);
        output.WriteBool(IsPick);
      }
      if (HasTeam) {
        output.WriteRawTag(16);
        output.WriteUInt32(Team);
      }
      if (HasHeroId) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIsPick) {
        size += 1 + 1;
      }
      if (HasTeam) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchHeroSelectEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasIsPick) {
        IsPick = other.IsPick;
      }
      if (other.HasTeam) {
        Team = other.Team;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsPick = input.ReadBool();
            break;
          }
          case 16: {
            Team = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsPick = input.ReadBool();
            break;
          }
          case 16: {
            Team = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMatchClip : pb::IMessage<CMatchClip>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMatchClip> _parser = new pb::MessageParser<CMatchClip>(() => new CMatchClip());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchClip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchClip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchClip(CMatchClip other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      playerAccountId_ = other.playerAccountId_;
      gameTimeSeconds_ = other.gameTimeSeconds_;
      durationSeconds_ = other.durationSeconds_;
      playerId_ = other.playerId_;
      heroId_ = other.heroId_;
      abilityId_ = other.abilityId_;
      cameraMode_ = other.cameraMode_;
      comment_ = other.comment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchClip Clone() {
      return new CMatchClip(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_account_id" field.</summary>
    public const int PlayerAccountIdFieldNumber = 2;
    private readonly static uint PlayerAccountIdDefaultValue = 0;

    private uint playerAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerAccountId {
      get { if ((_hasBits0 & 2) != 0) { return playerAccountId_; } else { return PlayerAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "player_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "game_time_seconds" field.</summary>
    public const int GameTimeSecondsFieldNumber = 3;
    private readonly static uint GameTimeSecondsDefaultValue = 0;

    private uint gameTimeSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameTimeSeconds {
      get { if ((_hasBits0 & 4) != 0) { return gameTimeSeconds_; } else { return GameTimeSecondsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        gameTimeSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "game_time_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameTimeSeconds {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "game_time_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameTimeSeconds() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "duration_seconds" field.</summary>
    public const int DurationSecondsFieldNumber = 4;
    private readonly static uint DurationSecondsDefaultValue = 0;

    private uint durationSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DurationSeconds {
      get { if ((_hasBits0 & 8) != 0) { return durationSeconds_; } else { return DurationSecondsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        durationSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "duration_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDurationSeconds {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "duration_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDurationSeconds() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private readonly static uint PlayerIdDefaultValue = 0;

    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { if ((_hasBits0 & 16) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 6;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 32) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 7;
    private readonly static int AbilityIdDefaultValue = -1;

    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { if ((_hasBits0 & 64) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        abilityId_ = value;
      }
    }
    /// <summary>Gets whether the "ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "camera_mode" field.</summary>
    public const int CameraModeFieldNumber = 8;
    private readonly static uint CameraModeDefaultValue = 0;

    private uint cameraMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CameraMode {
      get { if ((_hasBits0 & 128) != 0) { return cameraMode_; } else { return CameraModeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        cameraMode_ = value;
      }
    }
    /// <summary>Gets whether the "camera_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCameraMode {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "camera_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCameraMode() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 9;
    private readonly static string CommentDefaultValue = "";

    private string comment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_ ?? CommentDefaultValue; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "comment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComment {
      get { return comment_ != null; }
    }
    /// <summary>Clears the value of the "comment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComment() {
      comment_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchClip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchClip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (PlayerAccountId != other.PlayerAccountId) return false;
      if (GameTimeSeconds != other.GameTimeSeconds) return false;
      if (DurationSeconds != other.DurationSeconds) return false;
      if (PlayerId != other.PlayerId) return false;
      if (HeroId != other.HeroId) return false;
      if (AbilityId != other.AbilityId) return false;
      if (CameraMode != other.CameraMode) return false;
      if (Comment != other.Comment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasPlayerAccountId) hash ^= PlayerAccountId.GetHashCode();
      if (HasGameTimeSeconds) hash ^= GameTimeSeconds.GetHashCode();
      if (HasDurationSeconds) hash ^= DurationSeconds.GetHashCode();
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasAbilityId) hash ^= AbilityId.GetHashCode();
      if (HasCameraMode) hash ^= CameraMode.GetHashCode();
      if (HasComment) hash ^= Comment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasPlayerAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerAccountId);
      }
      if (HasGameTimeSeconds) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameTimeSeconds);
      }
      if (HasDurationSeconds) {
        output.WriteRawTag(32);
        output.WriteUInt32(DurationSeconds);
      }
      if (HasPlayerId) {
        output.WriteRawTag(40);
        output.WriteUInt32(PlayerId);
      }
      if (HasHeroId) {
        output.WriteRawTag(48);
        output.WriteInt32(HeroId);
      }
      if (HasAbilityId) {
        output.WriteRawTag(56);
        output.WriteInt32(AbilityId);
      }
      if (HasCameraMode) {
        output.WriteRawTag(64);
        output.WriteUInt32(CameraMode);
      }
      if (HasComment) {
        output.WriteRawTag(74);
        output.WriteString(Comment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasPlayerAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerAccountId);
      }
      if (HasGameTimeSeconds) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameTimeSeconds);
      }
      if (HasDurationSeconds) {
        output.WriteRawTag(32);
        output.WriteUInt32(DurationSeconds);
      }
      if (HasPlayerId) {
        output.WriteRawTag(40);
        output.WriteUInt32(PlayerId);
      }
      if (HasHeroId) {
        output.WriteRawTag(48);
        output.WriteInt32(HeroId);
      }
      if (HasAbilityId) {
        output.WriteRawTag(56);
        output.WriteInt32(AbilityId);
      }
      if (HasCameraMode) {
        output.WriteRawTag(64);
        output.WriteUInt32(CameraMode);
      }
      if (HasComment) {
        output.WriteRawTag(74);
        output.WriteString(Comment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasPlayerAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerAccountId);
      }
      if (HasGameTimeSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameTimeSeconds);
      }
      if (HasDurationSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DurationSeconds);
      }
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (HasCameraMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CameraMode);
      }
      if (HasComment) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchClip other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasPlayerAccountId) {
        PlayerAccountId = other.PlayerAccountId;
      }
      if (other.HasGameTimeSeconds) {
        GameTimeSeconds = other.GameTimeSeconds;
      }
      if (other.HasDurationSeconds) {
        DurationSeconds = other.DurationSeconds;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasAbilityId) {
        AbilityId = other.AbilityId;
      }
      if (other.HasCameraMode) {
        CameraMode = other.CameraMode;
      }
      if (other.HasComment) {
        Comment = other.Comment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            PlayerAccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            GameTimeSeconds = input.ReadUInt32();
            break;
          }
          case 32: {
            DurationSeconds = input.ReadUInt32();
            break;
          }
          case 40: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 48: {
            HeroId = input.ReadInt32();
            break;
          }
          case 56: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 64: {
            CameraMode = input.ReadUInt32();
            break;
          }
          case 74: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            PlayerAccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            GameTimeSeconds = input.ReadUInt32();
            break;
          }
          case 32: {
            DurationSeconds = input.ReadUInt32();
            break;
          }
          case 40: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 48: {
            HeroId = input.ReadInt32();
            break;
          }
          case 56: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 64: {
            CameraMode = input.ReadUInt32();
            break;
          }
          case 74: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPartySearchClientParty : pb::IMessage<CPartySearchClientParty>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPartySearchClientParty> _parser = new pb::MessageParser<CPartySearchClientParty>(() => new CPartySearchClientParty());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPartySearchClientParty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPartySearchClientParty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPartySearchClientParty(CPartySearchClientParty other) : this() {
      _hasBits0 = other._hasBits0;
      partyId_ = other.partyId_;
      beaconType_ = other.beaconType_;
      partyMembers_ = other.partyMembers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPartySearchClientParty Clone() {
      return new CPartySearchClientParty(this);
    }

    /// <summary>Field number for the "party_id" field.</summary>
    public const int PartyIdFieldNumber = 1;
    private readonly static ulong PartyIdDefaultValue = 0UL;

    private ulong partyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PartyId {
      get { if ((_hasBits0 & 1) != 0) { return partyId_; } else { return PartyIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        partyId_ = value;
      }
    }
    /// <summary>Gets whether the "party_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartyId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "party_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartyId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "beacon_type" field.</summary>
    public const int BeaconTypeFieldNumber = 2;
    private readonly static int BeaconTypeDefaultValue = 0;

    private int beaconType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeaconType {
      get { if ((_hasBits0 & 2) != 0) { return beaconType_; } else { return BeaconTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        beaconType_ = value;
      }
    }
    /// <summary>Gets whether the "beacon_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBeaconType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "beacon_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBeaconType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "party_members" field.</summary>
    public const int PartyMembersFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_partyMembers_codec
        = pb::FieldCodec.ForFixed32(29);
    private readonly pbc::RepeatedField<uint> partyMembers_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PartyMembers {
      get { return partyMembers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPartySearchClientParty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPartySearchClientParty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartyId != other.PartyId) return false;
      if (BeaconType != other.BeaconType) return false;
      if(!partyMembers_.Equals(other.partyMembers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPartyId) hash ^= PartyId.GetHashCode();
      if (HasBeaconType) hash ^= BeaconType.GetHashCode();
      hash ^= partyMembers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPartyId) {
        output.WriteRawTag(9);
        output.WriteFixed64(PartyId);
      }
      if (HasBeaconType) {
        output.WriteRawTag(16);
        output.WriteInt32(BeaconType);
      }
      partyMembers_.WriteTo(output, _repeated_partyMembers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPartyId) {
        output.WriteRawTag(9);
        output.WriteFixed64(PartyId);
      }
      if (HasBeaconType) {
        output.WriteRawTag(16);
        output.WriteInt32(BeaconType);
      }
      partyMembers_.WriteTo(ref output, _repeated_partyMembers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPartyId) {
        size += 1 + 8;
      }
      if (HasBeaconType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeaconType);
      }
      size += partyMembers_.CalculateSize(_repeated_partyMembers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPartySearchClientParty other) {
      if (other == null) {
        return;
      }
      if (other.HasPartyId) {
        PartyId = other.PartyId;
      }
      if (other.HasBeaconType) {
        BeaconType = other.BeaconType;
      }
      partyMembers_.Add(other.partyMembers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            PartyId = input.ReadFixed64();
            break;
          }
          case 16: {
            BeaconType = input.ReadInt32();
            break;
          }
          case 26:
          case 29: {
            partyMembers_.AddEntriesFrom(input, _repeated_partyMembers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            PartyId = input.ReadFixed64();
            break;
          }
          case 16: {
            BeaconType = input.ReadInt32();
            break;
          }
          case 26:
          case 29: {
            partyMembers_.AddEntriesFrom(ref input, _repeated_partyMembers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTAHasItemQuery : pb::IMessage<CMsgDOTAHasItemQuery>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAHasItemQuery> _parser = new pb::MessageParser<CMsgDOTAHasItemQuery>(() => new CMsgDOTAHasItemQuery());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAHasItemQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAHasItemQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAHasItemQuery(CMsgDOTAHasItemQuery other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAHasItemQuery Clone() {
      return new CMsgDOTAHasItemQuery(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private readonly static ulong ItemIdDefaultValue = 0UL;

    private ulong itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemId {
      get { if ((_hasBits0 & 2) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        itemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAHasItemQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAHasItemQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasItemId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAHasItemQuery other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTAHasItemResponse : pb::IMessage<CMsgDOTAHasItemResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAHasItemResponse> _parser = new pb::MessageParser<CMsgDOTAHasItemResponse>(() => new CMsgDOTAHasItemResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAHasItemResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAHasItemResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAHasItemResponse(CMsgDOTAHasItemResponse other) : this() {
      _hasBits0 = other._hasBits0;
      hasItem_ = other.hasItem_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAHasItemResponse Clone() {
      return new CMsgDOTAHasItemResponse(this);
    }

    /// <summary>Field number for the "has_item" field.</summary>
    public const int HasItemFieldNumber = 1;
    private readonly static bool HasItemDefaultValue = false;

    private bool hasItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItem {
      get { if ((_hasBits0 & 1) != 0) { return hasItem_; } else { return HasItemDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hasItem_ = value;
      }
    }
    /// <summary>Gets whether the "has_item" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasItem {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "has_item" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasItem() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAHasItemResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAHasItemResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HasItem != other.HasItem) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHasItem) hash ^= HasItem.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHasItem) {
        output.WriteRawTag(8);
        output.WriteBool(HasItem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHasItem) {
        output.WriteRawTag(8);
        output.WriteBool(HasItem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHasItem) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAHasItemResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasHasItem) {
        HasItem = other.HasItem;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HasItem = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HasItem = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCGetPlayerCardItemInfo : pb::IMessage<CMsgGCGetPlayerCardItemInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCGetPlayerCardItemInfo> _parser = new pb::MessageParser<CMsgGCGetPlayerCardItemInfo>(() => new CMsgGCGetPlayerCardItemInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCGetPlayerCardItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCGetPlayerCardItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCGetPlayerCardItemInfo(CMsgGCGetPlayerCardItemInfo other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      playerCardItemIds_ = other.playerCardItemIds_.Clone();
      allForEvent_ = other.allForEvent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCGetPlayerCardItemInfo Clone() {
      return new CMsgGCGetPlayerCardItemInfo(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_card_item_ids" field.</summary>
    public const int PlayerCardItemIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_playerCardItemIds_codec
        = pb::FieldCodec.ForUInt64(16);
    private readonly pbc::RepeatedField<ulong> playerCardItemIds_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PlayerCardItemIds {
      get { return playerCardItemIds_; }
    }

    /// <summary>Field number for the "all_for_event" field.</summary>
    public const int AllForEventFieldNumber = 3;
    private readonly static uint AllForEventDefaultValue = 0;

    private uint allForEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllForEvent {
      get { if ((_hasBits0 & 2) != 0) { return allForEvent_; } else { return AllForEventDefaultValue; } }
      set {
        _hasBits0 |= 2;
        allForEvent_ = value;
      }
    }
    /// <summary>Gets whether the "all_for_event" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllForEvent {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "all_for_event" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllForEvent() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCGetPlayerCardItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCGetPlayerCardItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if(!playerCardItemIds_.Equals(other.playerCardItemIds_)) return false;
      if (AllForEvent != other.AllForEvent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      hash ^= playerCardItemIds_.GetHashCode();
      if (HasAllForEvent) hash ^= AllForEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      playerCardItemIds_.WriteTo(output, _repeated_playerCardItemIds_codec);
      if (HasAllForEvent) {
        output.WriteRawTag(24);
        output.WriteUInt32(AllForEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      playerCardItemIds_.WriteTo(ref output, _repeated_playerCardItemIds_codec);
      if (HasAllForEvent) {
        output.WriteRawTag(24);
        output.WriteUInt32(AllForEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      size += playerCardItemIds_.CalculateSize(_repeated_playerCardItemIds_codec);
      if (HasAllForEvent) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllForEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCGetPlayerCardItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      playerCardItemIds_.Add(other.playerCardItemIds_);
      if (other.HasAllForEvent) {
        AllForEvent = other.AllForEvent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            playerCardItemIds_.AddEntriesFrom(input, _repeated_playerCardItemIds_codec);
            break;
          }
          case 24: {
            AllForEvent = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            playerCardItemIds_.AddEntriesFrom(ref input, _repeated_playerCardItemIds_codec);
            break;
          }
          case 24: {
            AllForEvent = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCGetPlayerCardItemInfoResponse : pb::IMessage<CMsgGCGetPlayerCardItemInfoResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCGetPlayerCardItemInfoResponse> _parser = new pb::MessageParser<CMsgGCGetPlayerCardItemInfoResponse>(() => new CMsgGCGetPlayerCardItemInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCGetPlayerCardItemInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCGetPlayerCardItemInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCGetPlayerCardItemInfoResponse(CMsgGCGetPlayerCardItemInfoResponse other) : this() {
      playerCardInfos_ = other.playerCardInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCGetPlayerCardItemInfoResponse Clone() {
      return new CMsgGCGetPlayerCardItemInfoResponse(this);
    }

    /// <summary>Field number for the "player_card_infos" field.</summary>
    public const int PlayerCardInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfoResponse.Types.PlayerCardInfo> _repeated_playerCardInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfoResponse.Types.PlayerCardInfo.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfoResponse.Types.PlayerCardInfo> playerCardInfos_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfoResponse.Types.PlayerCardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfoResponse.Types.PlayerCardInfo> PlayerCardInfos {
      get { return playerCardInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCGetPlayerCardItemInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCGetPlayerCardItemInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerCardInfos_.Equals(other.playerCardInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerCardInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      playerCardInfos_.WriteTo(output, _repeated_playerCardInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      playerCardInfos_.WriteTo(ref output, _repeated_playerCardInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerCardInfos_.CalculateSize(_repeated_playerCardInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCGetPlayerCardItemInfoResponse other) {
      if (other == null) {
        return;
      }
      playerCardInfos_.Add(other.playerCardInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerCardInfos_.AddEntriesFrom(input, _repeated_playerCardInfos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            playerCardInfos_.AddEntriesFrom(ref input, _repeated_playerCardInfos_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGCGetPlayerCardItemInfoResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerCardInfo : pb::IMessage<PlayerCardInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerCardInfo> _parser = new pb::MessageParser<PlayerCardInfo>(() => new PlayerCardInfo());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerCardInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGCGetPlayerCardItemInfoResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCardInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCardInfo(PlayerCardInfo other) : this() {
          _hasBits0 = other._hasBits0;
          playerCardItemId_ = other.playerCardItemId_;
          accountId_ = other.accountId_;
          packedBonuses_ = other.packedBonuses_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCardInfo Clone() {
          return new PlayerCardInfo(this);
        }

        /// <summary>Field number for the "player_card_item_id" field.</summary>
        public const int PlayerCardItemIdFieldNumber = 1;
        private readonly static ulong PlayerCardItemIdDefaultValue = 0UL;

        private ulong playerCardItemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong PlayerCardItemId {
          get { if ((_hasBits0 & 1) != 0) { return playerCardItemId_; } else { return PlayerCardItemIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            playerCardItemId_ = value;
          }
        }
        /// <summary>Gets whether the "player_card_item_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerCardItemId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_card_item_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerCardItemId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 2;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 2) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "packed_bonuses" field.</summary>
        public const int PackedBonusesFieldNumber = 3;
        private readonly static ulong PackedBonusesDefaultValue = 0UL;

        private ulong packedBonuses_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong PackedBonuses {
          get { if ((_hasBits0 & 4) != 0) { return packedBonuses_; } else { return PackedBonusesDefaultValue; } }
          set {
            _hasBits0 |= 4;
            packedBonuses_ = value;
          }
        }
        /// <summary>Gets whether the "packed_bonuses" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPackedBonuses {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "packed_bonuses" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPackedBonuses() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerCardInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerCardInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerCardItemId != other.PlayerCardItemId) return false;
          if (AccountId != other.AccountId) return false;
          if (PackedBonuses != other.PackedBonuses) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPlayerCardItemId) hash ^= PlayerCardItemId.GetHashCode();
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasPackedBonuses) hash ^= PackedBonuses.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPlayerCardItemId) {
            output.WriteRawTag(8);
            output.WriteUInt64(PlayerCardItemId);
          }
          if (HasAccountId) {
            output.WriteRawTag(16);
            output.WriteUInt32(AccountId);
          }
          if (HasPackedBonuses) {
            output.WriteRawTag(24);
            output.WriteUInt64(PackedBonuses);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPlayerCardItemId) {
            output.WriteRawTag(8);
            output.WriteUInt64(PlayerCardItemId);
          }
          if (HasAccountId) {
            output.WriteRawTag(16);
            output.WriteUInt32(AccountId);
          }
          if (HasPackedBonuses) {
            output.WriteRawTag(24);
            output.WriteUInt64(PackedBonuses);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPlayerCardItemId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerCardItemId);
          }
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasPackedBonuses) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PackedBonuses);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerCardInfo other) {
          if (other == null) {
            return;
          }
          if (other.HasPlayerCardItemId) {
            PlayerCardItemId = other.PlayerCardItemId;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasPackedBonuses) {
            PackedBonuses = other.PackedBonuses;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerCardItemId = input.ReadUInt64();
                break;
              }
              case 16: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                PackedBonuses = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerCardItemId = input.ReadUInt64();
                break;
              }
              case 16: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                PackedBonuses = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CSODOTAMapLocationState : pb::IMessage<CSODOTAMapLocationState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAMapLocationState> _parser = new pb::MessageParser<CSODOTAMapLocationState>(() => new CSODOTAMapLocationState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAMapLocationState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAMapLocationState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAMapLocationState(CSODOTAMapLocationState other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      locationId_ = other.locationId_;
      completed_ = other.completed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAMapLocationState Clone() {
      return new CSODOTAMapLocationState(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "location_id" field.</summary>
    public const int LocationIdFieldNumber = 2;
    private readonly static int LocationIdDefaultValue = 0;

    private int locationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationId {
      get { if ((_hasBits0 & 2) != 0) { return locationId_; } else { return LocationIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        locationId_ = value;
      }
    }
    /// <summary>Gets whether the "location_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocationId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "location_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocationId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "completed" field.</summary>
    public const int CompletedFieldNumber = 3;
    private readonly static bool CompletedDefaultValue = false;

    private bool completed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Completed {
      get { if ((_hasBits0 & 4) != 0) { return completed_; } else { return CompletedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        completed_ = value;
      }
    }
    /// <summary>Gets whether the "completed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompleted {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "completed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompleted() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAMapLocationState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAMapLocationState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (LocationId != other.LocationId) return false;
      if (Completed != other.Completed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasLocationId) hash ^= LocationId.GetHashCode();
      if (HasCompleted) hash ^= Completed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasLocationId) {
        output.WriteRawTag(16);
        output.WriteInt32(LocationId);
      }
      if (HasCompleted) {
        output.WriteRawTag(24);
        output.WriteBool(Completed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasLocationId) {
        output.WriteRawTag(16);
        output.WriteInt32(LocationId);
      }
      if (HasCompleted) {
        output.WriteRawTag(24);
        output.WriteBool(Completed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasLocationId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocationId);
      }
      if (HasCompleted) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAMapLocationState other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasLocationId) {
        LocationId = other.LocationId;
      }
      if (other.HasCompleted) {
        Completed = other.Completed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            LocationId = input.ReadInt32();
            break;
          }
          case 24: {
            Completed = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            LocationId = input.ReadInt32();
            break;
          }
          case 24: {
            Completed = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLeagueAdminList : pb::IMessage<CMsgLeagueAdminList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLeagueAdminList> _parser = new pb::MessageParser<CMsgLeagueAdminList>(() => new CMsgLeagueAdminList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLeagueAdminList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeagueAdminList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeagueAdminList(CMsgLeagueAdminList other) : this() {
      accountIds_ = other.accountIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeagueAdminList Clone() {
      return new CMsgLeagueAdminList(this);
    }

    /// <summary>Field number for the "account_ids" field.</summary>
    public const int AccountIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_accountIds_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> accountIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AccountIds {
      get { return accountIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLeagueAdminList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLeagueAdminList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accountIds_.Equals(other.accountIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accountIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accountIds_.WriteTo(output, _repeated_accountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accountIds_.WriteTo(ref output, _repeated_accountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accountIds_.CalculateSize(_repeated_accountIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLeagueAdminList other) {
      if (other == null) {
        return;
      }
      accountIds_.Add(other.accountIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            accountIds_.AddEntriesFrom(input, _repeated_accountIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            accountIds_.AddEntriesFrom(ref input, _repeated_accountIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTAProfileCard : pb::IMessage<CMsgDOTAProfileCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAProfileCard> _parser = new pb::MessageParser<CMsgDOTAProfileCard>(() => new CMsgDOTAProfileCard());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAProfileCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAProfileCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAProfileCard(CMsgDOTAProfileCard other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      slots_ = other.slots_.Clone();
      badgePoints_ = other.badgePoints_;
      eventId_ = other.eventId_;
      recentBattleCupVictory_ = other.recentBattleCupVictory_ != null ? other.recentBattleCupVictory_.Clone() : null;
      rankTier_ = other.rankTier_;
      leaderboardRank_ = other.leaderboardRank_;
      isPlusSubscriber_ = other.isPlusSubscriber_;
      plusOriginalStartDate_ = other.plusOriginalStartDate_;
      rankTierScore_ = other.rankTierScore_;
      leaderboardRankCore_ = other.leaderboardRankCore_;
      title_ = other.title_;
      favoriteTeamPacked_ = other.favoriteTeamPacked_;
      lifetimeGames_ = other.lifetimeGames_;
      eventLevel_ = other.eventLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAProfileCard Clone() {
      return new CMsgDOTAProfileCard(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot> _repeated_slots_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot> slots_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot> Slots {
      get { return slots_; }
    }

    /// <summary>Field number for the "badge_points" field.</summary>
    public const int BadgePointsFieldNumber = 4;
    private readonly static uint BadgePointsDefaultValue = 0;

    private uint badgePoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BadgePoints {
      get { if ((_hasBits0 & 2) != 0) { return badgePoints_; } else { return BadgePointsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        badgePoints_ = value;
      }
    }
    /// <summary>Gets whether the "badge_points" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBadgePoints {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "badge_points" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBadgePoints() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 6;
    private readonly static uint EventIdDefaultValue = 0;

    private uint eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { if ((_hasBits0 & 4) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "recent_battle_cup_victory" field.</summary>
    public const int RecentBattleCupVictoryFieldNumber = 7;
    private global::Steam.Protos.Dota2.CMsgBattleCupVictory recentBattleCupVictory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgBattleCupVictory RecentBattleCupVictory {
      get { return recentBattleCupVictory_; }
      set {
        recentBattleCupVictory_ = value;
      }
    }

    /// <summary>Field number for the "rank_tier" field.</summary>
    public const int RankTierFieldNumber = 8;
    private readonly static uint RankTierDefaultValue = 0;

    private uint rankTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankTier {
      get { if ((_hasBits0 & 8) != 0) { return rankTier_; } else { return RankTierDefaultValue; } }
      set {
        _hasBits0 |= 8;
        rankTier_ = value;
      }
    }
    /// <summary>Gets whether the "rank_tier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRankTier {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "rank_tier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRankTier() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "leaderboard_rank" field.</summary>
    public const int LeaderboardRankFieldNumber = 9;
    private readonly static uint LeaderboardRankDefaultValue = 0;

    private uint leaderboardRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderboardRank {
      get { if ((_hasBits0 & 16) != 0) { return leaderboardRank_; } else { return LeaderboardRankDefaultValue; } }
      set {
        _hasBits0 |= 16;
        leaderboardRank_ = value;
      }
    }
    /// <summary>Gets whether the "leaderboard_rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaderboardRank {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "leaderboard_rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaderboardRank() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "is_plus_subscriber" field.</summary>
    public const int IsPlusSubscriberFieldNumber = 10;
    private readonly static bool IsPlusSubscriberDefaultValue = false;

    private bool isPlusSubscriber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlusSubscriber {
      get { if ((_hasBits0 & 32) != 0) { return isPlusSubscriber_; } else { return IsPlusSubscriberDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isPlusSubscriber_ = value;
      }
    }
    /// <summary>Gets whether the "is_plus_subscriber" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPlusSubscriber {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_plus_subscriber" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPlusSubscriber() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "plus_original_start_date" field.</summary>
    public const int PlusOriginalStartDateFieldNumber = 11;
    private readonly static uint PlusOriginalStartDateDefaultValue = 0;

    private uint plusOriginalStartDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlusOriginalStartDate {
      get { if ((_hasBits0 & 64) != 0) { return plusOriginalStartDate_; } else { return PlusOriginalStartDateDefaultValue; } }
      set {
        _hasBits0 |= 64;
        plusOriginalStartDate_ = value;
      }
    }
    /// <summary>Gets whether the "plus_original_start_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlusOriginalStartDate {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "plus_original_start_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlusOriginalStartDate() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "rank_tier_score" field.</summary>
    public const int RankTierScoreFieldNumber = 12;
    private readonly static uint RankTierScoreDefaultValue = 0;

    private uint rankTierScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankTierScore {
      get { if ((_hasBits0 & 128) != 0) { return rankTierScore_; } else { return RankTierScoreDefaultValue; } }
      set {
        _hasBits0 |= 128;
        rankTierScore_ = value;
      }
    }
    /// <summary>Gets whether the "rank_tier_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRankTierScore {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "rank_tier_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRankTierScore() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "leaderboard_rank_core" field.</summary>
    public const int LeaderboardRankCoreFieldNumber = 17;
    private readonly static uint LeaderboardRankCoreDefaultValue = 0;

    private uint leaderboardRankCore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderboardRankCore {
      get { if ((_hasBits0 & 256) != 0) { return leaderboardRankCore_; } else { return LeaderboardRankCoreDefaultValue; } }
      set {
        _hasBits0 |= 256;
        leaderboardRankCore_ = value;
      }
    }
    /// <summary>Gets whether the "leaderboard_rank_core" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaderboardRankCore {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "leaderboard_rank_core" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaderboardRankCore() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 23;
    private readonly static uint TitleDefaultValue = 0;

    private uint title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Title {
      get { if ((_hasBits0 & 512) != 0) { return title_; } else { return TitleDefaultValue; } }
      set {
        _hasBits0 |= 512;
        title_ = value;
      }
    }
    /// <summary>Gets whether the "title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "favorite_team_packed" field.</summary>
    public const int FavoriteTeamPackedFieldNumber = 24;
    private readonly static ulong FavoriteTeamPackedDefaultValue = 0UL;

    private ulong favoriteTeamPacked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FavoriteTeamPacked {
      get { if ((_hasBits0 & 1024) != 0) { return favoriteTeamPacked_; } else { return FavoriteTeamPackedDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        favoriteTeamPacked_ = value;
      }
    }
    /// <summary>Gets whether the "favorite_team_packed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFavoriteTeamPacked {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "favorite_team_packed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFavoriteTeamPacked() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "lifetime_games" field.</summary>
    public const int LifetimeGamesFieldNumber = 25;
    private readonly static uint LifetimeGamesDefaultValue = 0;

    private uint lifetimeGames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LifetimeGames {
      get { if ((_hasBits0 & 2048) != 0) { return lifetimeGames_; } else { return LifetimeGamesDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        lifetimeGames_ = value;
      }
    }
    /// <summary>Gets whether the "lifetime_games" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLifetimeGames {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "lifetime_games" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLifetimeGames() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "event_level" field.</summary>
    public const int EventLevelFieldNumber = 26;
    private readonly static uint EventLevelDefaultValue = 0;

    private uint eventLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventLevel {
      get { if ((_hasBits0 & 4096) != 0) { return eventLevel_; } else { return EventLevelDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        eventLevel_ = value;
      }
    }
    /// <summary>Gets whether the "event_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventLevel {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "event_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventLevel() {
      _hasBits0 &= ~4096;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAProfileCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAProfileCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if(!slots_.Equals(other.slots_)) return false;
      if (BadgePoints != other.BadgePoints) return false;
      if (EventId != other.EventId) return false;
      if (!object.Equals(RecentBattleCupVictory, other.RecentBattleCupVictory)) return false;
      if (RankTier != other.RankTier) return false;
      if (LeaderboardRank != other.LeaderboardRank) return false;
      if (IsPlusSubscriber != other.IsPlusSubscriber) return false;
      if (PlusOriginalStartDate != other.PlusOriginalStartDate) return false;
      if (RankTierScore != other.RankTierScore) return false;
      if (LeaderboardRankCore != other.LeaderboardRankCore) return false;
      if (Title != other.Title) return false;
      if (FavoriteTeamPacked != other.FavoriteTeamPacked) return false;
      if (LifetimeGames != other.LifetimeGames) return false;
      if (EventLevel != other.EventLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      hash ^= slots_.GetHashCode();
      if (HasBadgePoints) hash ^= BadgePoints.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (recentBattleCupVictory_ != null) hash ^= RecentBattleCupVictory.GetHashCode();
      if (HasRankTier) hash ^= RankTier.GetHashCode();
      if (HasLeaderboardRank) hash ^= LeaderboardRank.GetHashCode();
      if (HasIsPlusSubscriber) hash ^= IsPlusSubscriber.GetHashCode();
      if (HasPlusOriginalStartDate) hash ^= PlusOriginalStartDate.GetHashCode();
      if (HasRankTierScore) hash ^= RankTierScore.GetHashCode();
      if (HasLeaderboardRankCore) hash ^= LeaderboardRankCore.GetHashCode();
      if (HasTitle) hash ^= Title.GetHashCode();
      if (HasFavoriteTeamPacked) hash ^= FavoriteTeamPacked.GetHashCode();
      if (HasLifetimeGames) hash ^= LifetimeGames.GetHashCode();
      if (HasEventLevel) hash ^= EventLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      slots_.WriteTo(output, _repeated_slots_codec);
      if (HasBadgePoints) {
        output.WriteRawTag(32);
        output.WriteUInt32(BadgePoints);
      }
      if (HasEventId) {
        output.WriteRawTag(48);
        output.WriteUInt32(EventId);
      }
      if (recentBattleCupVictory_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RecentBattleCupVictory);
      }
      if (HasRankTier) {
        output.WriteRawTag(64);
        output.WriteUInt32(RankTier);
      }
      if (HasLeaderboardRank) {
        output.WriteRawTag(72);
        output.WriteUInt32(LeaderboardRank);
      }
      if (HasIsPlusSubscriber) {
        output.WriteRawTag(80);
        output.WriteBool(IsPlusSubscriber);
      }
      if (HasPlusOriginalStartDate) {
        output.WriteRawTag(88);
        output.WriteUInt32(PlusOriginalStartDate);
      }
      if (HasRankTierScore) {
        output.WriteRawTag(96);
        output.WriteUInt32(RankTierScore);
      }
      if (HasLeaderboardRankCore) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(LeaderboardRankCore);
      }
      if (HasTitle) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Title);
      }
      if (HasFavoriteTeamPacked) {
        output.WriteRawTag(192, 1);
        output.WriteUInt64(FavoriteTeamPacked);
      }
      if (HasLifetimeGames) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(LifetimeGames);
      }
      if (HasEventLevel) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(EventLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      slots_.WriteTo(ref output, _repeated_slots_codec);
      if (HasBadgePoints) {
        output.WriteRawTag(32);
        output.WriteUInt32(BadgePoints);
      }
      if (HasEventId) {
        output.WriteRawTag(48);
        output.WriteUInt32(EventId);
      }
      if (recentBattleCupVictory_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RecentBattleCupVictory);
      }
      if (HasRankTier) {
        output.WriteRawTag(64);
        output.WriteUInt32(RankTier);
      }
      if (HasLeaderboardRank) {
        output.WriteRawTag(72);
        output.WriteUInt32(LeaderboardRank);
      }
      if (HasIsPlusSubscriber) {
        output.WriteRawTag(80);
        output.WriteBool(IsPlusSubscriber);
      }
      if (HasPlusOriginalStartDate) {
        output.WriteRawTag(88);
        output.WriteUInt32(PlusOriginalStartDate);
      }
      if (HasRankTierScore) {
        output.WriteRawTag(96);
        output.WriteUInt32(RankTierScore);
      }
      if (HasLeaderboardRankCore) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(LeaderboardRankCore);
      }
      if (HasTitle) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Title);
      }
      if (HasFavoriteTeamPacked) {
        output.WriteRawTag(192, 1);
        output.WriteUInt64(FavoriteTeamPacked);
      }
      if (HasLifetimeGames) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(LifetimeGames);
      }
      if (HasEventLevel) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(EventLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      size += slots_.CalculateSize(_repeated_slots_codec);
      if (HasBadgePoints) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BadgePoints);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      if (recentBattleCupVictory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecentBattleCupVictory);
      }
      if (HasRankTier) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankTier);
      }
      if (HasLeaderboardRank) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderboardRank);
      }
      if (HasIsPlusSubscriber) {
        size += 1 + 1;
      }
      if (HasPlusOriginalStartDate) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlusOriginalStartDate);
      }
      if (HasRankTierScore) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankTierScore);
      }
      if (HasLeaderboardRankCore) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeaderboardRankCore);
      }
      if (HasTitle) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Title);
      }
      if (HasFavoriteTeamPacked) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(FavoriteTeamPacked);
      }
      if (HasLifetimeGames) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LifetimeGames);
      }
      if (HasEventLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EventLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAProfileCard other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      slots_.Add(other.slots_);
      if (other.HasBadgePoints) {
        BadgePoints = other.BadgePoints;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.recentBattleCupVictory_ != null) {
        if (recentBattleCupVictory_ == null) {
          RecentBattleCupVictory = new global::Steam.Protos.Dota2.CMsgBattleCupVictory();
        }
        RecentBattleCupVictory.MergeFrom(other.RecentBattleCupVictory);
      }
      if (other.HasRankTier) {
        RankTier = other.RankTier;
      }
      if (other.HasLeaderboardRank) {
        LeaderboardRank = other.LeaderboardRank;
      }
      if (other.HasIsPlusSubscriber) {
        IsPlusSubscriber = other.IsPlusSubscriber;
      }
      if (other.HasPlusOriginalStartDate) {
        PlusOriginalStartDate = other.PlusOriginalStartDate;
      }
      if (other.HasRankTierScore) {
        RankTierScore = other.RankTierScore;
      }
      if (other.HasLeaderboardRankCore) {
        LeaderboardRankCore = other.LeaderboardRankCore;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasFavoriteTeamPacked) {
        FavoriteTeamPacked = other.FavoriteTeamPacked;
      }
      if (other.HasLifetimeGames) {
        LifetimeGames = other.LifetimeGames;
      }
      if (other.HasEventLevel) {
        EventLevel = other.EventLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 26: {
            slots_.AddEntriesFrom(input, _repeated_slots_codec);
            break;
          }
          case 32: {
            BadgePoints = input.ReadUInt32();
            break;
          }
          case 48: {
            EventId = input.ReadUInt32();
            break;
          }
          case 58: {
            if (recentBattleCupVictory_ == null) {
              RecentBattleCupVictory = new global::Steam.Protos.Dota2.CMsgBattleCupVictory();
            }
            input.ReadMessage(RecentBattleCupVictory);
            break;
          }
          case 64: {
            RankTier = input.ReadUInt32();
            break;
          }
          case 72: {
            LeaderboardRank = input.ReadUInt32();
            break;
          }
          case 80: {
            IsPlusSubscriber = input.ReadBool();
            break;
          }
          case 88: {
            PlusOriginalStartDate = input.ReadUInt32();
            break;
          }
          case 96: {
            RankTierScore = input.ReadUInt32();
            break;
          }
          case 136: {
            LeaderboardRankCore = input.ReadUInt32();
            break;
          }
          case 184: {
            Title = input.ReadUInt32();
            break;
          }
          case 192: {
            FavoriteTeamPacked = input.ReadUInt64();
            break;
          }
          case 200: {
            LifetimeGames = input.ReadUInt32();
            break;
          }
          case 208: {
            EventLevel = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 26: {
            slots_.AddEntriesFrom(ref input, _repeated_slots_codec);
            break;
          }
          case 32: {
            BadgePoints = input.ReadUInt32();
            break;
          }
          case 48: {
            EventId = input.ReadUInt32();
            break;
          }
          case 58: {
            if (recentBattleCupVictory_ == null) {
              RecentBattleCupVictory = new global::Steam.Protos.Dota2.CMsgBattleCupVictory();
            }
            input.ReadMessage(RecentBattleCupVictory);
            break;
          }
          case 64: {
            RankTier = input.ReadUInt32();
            break;
          }
          case 72: {
            LeaderboardRank = input.ReadUInt32();
            break;
          }
          case 80: {
            IsPlusSubscriber = input.ReadBool();
            break;
          }
          case 88: {
            PlusOriginalStartDate = input.ReadUInt32();
            break;
          }
          case 96: {
            RankTierScore = input.ReadUInt32();
            break;
          }
          case 136: {
            LeaderboardRankCore = input.ReadUInt32();
            break;
          }
          case 184: {
            Title = input.ReadUInt32();
            break;
          }
          case 192: {
            FavoriteTeamPacked = input.ReadUInt64();
            break;
          }
          case 200: {
            LifetimeGames = input.ReadUInt32();
            break;
          }
          case 208: {
            EventLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTAProfileCard message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EStatID {
        [pbr::OriginalName("k_eStat_Wins")] KEStatWins = 3,
        [pbr::OriginalName("k_eStat_Commends")] KEStatCommends = 4,
        [pbr::OriginalName("k_eStat_GamesPlayed")] KEStatGamesPlayed = 5,
        [pbr::OriginalName("k_eStat_FirstMatchDate")] KEStatFirstMatchDate = 6,
        [pbr::OriginalName("k_eStat_PreviousSeasonRank")] KEStatPreviousSeasonRank = 7,
        [pbr::OriginalName("k_eStat_GamesMVP")] KEStatGamesMvp = 8,
      }

      public sealed partial class Slot : pb::IMessage<Slot>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Slot> _parser = new pb::MessageParser<Slot>(() => new Slot());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Slot> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Slot() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Slot(Slot other) : this() {
          _hasBits0 = other._hasBits0;
          slotId_ = other.slotId_;
          trophy_ = other.trophy_ != null ? other.trophy_.Clone() : null;
          stat_ = other.stat_ != null ? other.stat_.Clone() : null;
          item_ = other.item_ != null ? other.item_.Clone() : null;
          hero_ = other.hero_ != null ? other.hero_.Clone() : null;
          emoticon_ = other.emoticon_ != null ? other.emoticon_.Clone() : null;
          team_ = other.team_ != null ? other.team_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Slot Clone() {
          return new Slot(this);
        }

        /// <summary>Field number for the "slot_id" field.</summary>
        public const int SlotIdFieldNumber = 1;
        private readonly static uint SlotIdDefaultValue = 0;

        private uint slotId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SlotId {
          get { if ((_hasBits0 & 1) != 0) { return slotId_; } else { return SlotIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            slotId_ = value;
          }
        }
        /// <summary>Gets whether the "slot_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSlotId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "slot_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSlotId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "trophy" field.</summary>
        public const int TrophyFieldNumber = 2;
        private global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Trophy trophy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Trophy Trophy {
          get { return trophy_; }
          set {
            trophy_ = value;
          }
        }

        /// <summary>Field number for the "stat" field.</summary>
        public const int StatFieldNumber = 3;
        private global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Stat stat_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Stat Stat {
          get { return stat_; }
          set {
            stat_ = value;
          }
        }

        /// <summary>Field number for the "item" field.</summary>
        public const int ItemFieldNumber = 4;
        private global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Item item_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Item Item {
          get { return item_; }
          set {
            item_ = value;
          }
        }

        /// <summary>Field number for the "hero" field.</summary>
        public const int HeroFieldNumber = 5;
        private global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Hero hero_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Hero Hero {
          get { return hero_; }
          set {
            hero_ = value;
          }
        }

        /// <summary>Field number for the "emoticon" field.</summary>
        public const int EmoticonFieldNumber = 6;
        private global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Emoticon emoticon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Emoticon Emoticon {
          get { return emoticon_; }
          set {
            emoticon_ = value;
          }
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 7;
        private global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Team team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Team Team {
          get { return team_; }
          set {
            team_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Slot);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Slot other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SlotId != other.SlotId) return false;
          if (!object.Equals(Trophy, other.Trophy)) return false;
          if (!object.Equals(Stat, other.Stat)) return false;
          if (!object.Equals(Item, other.Item)) return false;
          if (!object.Equals(Hero, other.Hero)) return false;
          if (!object.Equals(Emoticon, other.Emoticon)) return false;
          if (!object.Equals(Team, other.Team)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSlotId) hash ^= SlotId.GetHashCode();
          if (trophy_ != null) hash ^= Trophy.GetHashCode();
          if (stat_ != null) hash ^= Stat.GetHashCode();
          if (item_ != null) hash ^= Item.GetHashCode();
          if (hero_ != null) hash ^= Hero.GetHashCode();
          if (emoticon_ != null) hash ^= Emoticon.GetHashCode();
          if (team_ != null) hash ^= Team.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasSlotId) {
            output.WriteRawTag(8);
            output.WriteUInt32(SlotId);
          }
          if (trophy_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Trophy);
          }
          if (stat_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Stat);
          }
          if (item_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Item);
          }
          if (hero_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Hero);
          }
          if (emoticon_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Emoticon);
          }
          if (team_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Team);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasSlotId) {
            output.WriteRawTag(8);
            output.WriteUInt32(SlotId);
          }
          if (trophy_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Trophy);
          }
          if (stat_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Stat);
          }
          if (item_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Item);
          }
          if (hero_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Hero);
          }
          if (emoticon_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Emoticon);
          }
          if (team_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Team);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSlotId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
          }
          if (trophy_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trophy);
          }
          if (stat_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stat);
          }
          if (item_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
          }
          if (hero_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hero);
          }
          if (emoticon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Emoticon);
          }
          if (team_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Team);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Slot other) {
          if (other == null) {
            return;
          }
          if (other.HasSlotId) {
            SlotId = other.SlotId;
          }
          if (other.trophy_ != null) {
            if (trophy_ == null) {
              Trophy = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Trophy();
            }
            Trophy.MergeFrom(other.Trophy);
          }
          if (other.stat_ != null) {
            if (stat_ == null) {
              Stat = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Stat();
            }
            Stat.MergeFrom(other.Stat);
          }
          if (other.item_ != null) {
            if (item_ == null) {
              Item = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Item();
            }
            Item.MergeFrom(other.Item);
          }
          if (other.hero_ != null) {
            if (hero_ == null) {
              Hero = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Hero();
            }
            Hero.MergeFrom(other.Hero);
          }
          if (other.emoticon_ != null) {
            if (emoticon_ == null) {
              Emoticon = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Emoticon();
            }
            Emoticon.MergeFrom(other.Emoticon);
          }
          if (other.team_ != null) {
            if (team_ == null) {
              Team = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Team();
            }
            Team.MergeFrom(other.Team);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SlotId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (trophy_ == null) {
                  Trophy = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Trophy();
                }
                input.ReadMessage(Trophy);
                break;
              }
              case 26: {
                if (stat_ == null) {
                  Stat = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Stat();
                }
                input.ReadMessage(Stat);
                break;
              }
              case 34: {
                if (item_ == null) {
                  Item = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Item();
                }
                input.ReadMessage(Item);
                break;
              }
              case 42: {
                if (hero_ == null) {
                  Hero = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Hero();
                }
                input.ReadMessage(Hero);
                break;
              }
              case 50: {
                if (emoticon_ == null) {
                  Emoticon = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Emoticon();
                }
                input.ReadMessage(Emoticon);
                break;
              }
              case 58: {
                if (team_ == null) {
                  Team = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Team();
                }
                input.ReadMessage(Team);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                SlotId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (trophy_ == null) {
                  Trophy = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Trophy();
                }
                input.ReadMessage(Trophy);
                break;
              }
              case 26: {
                if (stat_ == null) {
                  Stat = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Stat();
                }
                input.ReadMessage(Stat);
                break;
              }
              case 34: {
                if (item_ == null) {
                  Item = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Item();
                }
                input.ReadMessage(Item);
                break;
              }
              case 42: {
                if (hero_ == null) {
                  Hero = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Hero();
                }
                input.ReadMessage(Hero);
                break;
              }
              case 50: {
                if (emoticon_ == null) {
                  Emoticon = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Emoticon();
                }
                input.ReadMessage(Emoticon);
                break;
              }
              case 58: {
                if (team_ == null) {
                  Team = new global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Types.Team();
                }
                input.ReadMessage(Team);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Slot message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Trophy : pb::IMessage<Trophy>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Trophy> _parser = new pb::MessageParser<Trophy>(() => new Trophy());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Trophy> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Trophy() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Trophy(Trophy other) : this() {
              _hasBits0 = other._hasBits0;
              trophyId_ = other.trophyId_;
              trophyScore_ = other.trophyScore_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Trophy Clone() {
              return new Trophy(this);
            }

            /// <summary>Field number for the "trophy_id" field.</summary>
            public const int TrophyIdFieldNumber = 1;
            private readonly static uint TrophyIdDefaultValue = 0;

            private uint trophyId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TrophyId {
              get { if ((_hasBits0 & 1) != 0) { return trophyId_; } else { return TrophyIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                trophyId_ = value;
              }
            }
            /// <summary>Gets whether the "trophy_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTrophyId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "trophy_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTrophyId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "trophy_score" field.</summary>
            public const int TrophyScoreFieldNumber = 2;
            private readonly static uint TrophyScoreDefaultValue = 0;

            private uint trophyScore_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TrophyScore {
              get { if ((_hasBits0 & 2) != 0) { return trophyScore_; } else { return TrophyScoreDefaultValue; } }
              set {
                _hasBits0 |= 2;
                trophyScore_ = value;
              }
            }
            /// <summary>Gets whether the "trophy_score" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTrophyScore {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "trophy_score" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTrophyScore() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Trophy);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Trophy other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (TrophyId != other.TrophyId) return false;
              if (TrophyScore != other.TrophyScore) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasTrophyId) hash ^= TrophyId.GetHashCode();
              if (HasTrophyScore) hash ^= TrophyScore.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasTrophyId) {
                output.WriteRawTag(8);
                output.WriteUInt32(TrophyId);
              }
              if (HasTrophyScore) {
                output.WriteRawTag(16);
                output.WriteUInt32(TrophyScore);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasTrophyId) {
                output.WriteRawTag(8);
                output.WriteUInt32(TrophyId);
              }
              if (HasTrophyScore) {
                output.WriteRawTag(16);
                output.WriteUInt32(TrophyScore);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasTrophyId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrophyId);
              }
              if (HasTrophyScore) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrophyScore);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Trophy other) {
              if (other == null) {
                return;
              }
              if (other.HasTrophyId) {
                TrophyId = other.TrophyId;
              }
              if (other.HasTrophyScore) {
                TrophyScore = other.TrophyScore;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    TrophyId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    TrophyScore = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    TrophyId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    TrophyScore = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class Stat : pb::IMessage<Stat>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Stat> _parser = new pb::MessageParser<Stat>(() => new Stat());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Stat> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Stat() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Stat(Stat other) : this() {
              _hasBits0 = other._hasBits0;
              statId_ = other.statId_;
              statScore_ = other.statScore_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Stat Clone() {
              return new Stat(this);
            }

            /// <summary>Field number for the "stat_id" field.</summary>
            public const int StatIdFieldNumber = 1;
            private readonly static global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.EStatID StatIdDefaultValue = global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.EStatID.KEStatWins;

            private global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.EStatID statId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.EStatID StatId {
              get { if ((_hasBits0 & 1) != 0) { return statId_; } else { return StatIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                statId_ = value;
              }
            }
            /// <summary>Gets whether the "stat_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasStatId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "stat_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStatId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "stat_score" field.</summary>
            public const int StatScoreFieldNumber = 2;
            private readonly static uint StatScoreDefaultValue = 0;

            private uint statScore_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint StatScore {
              get { if ((_hasBits0 & 2) != 0) { return statScore_; } else { return StatScoreDefaultValue; } }
              set {
                _hasBits0 |= 2;
                statScore_ = value;
              }
            }
            /// <summary>Gets whether the "stat_score" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasStatScore {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "stat_score" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStatScore() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Stat);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Stat other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (StatId != other.StatId) return false;
              if (StatScore != other.StatScore) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasStatId) hash ^= StatId.GetHashCode();
              if (HasStatScore) hash ^= StatScore.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasStatId) {
                output.WriteRawTag(8);
                output.WriteEnum((int) StatId);
              }
              if (HasStatScore) {
                output.WriteRawTag(16);
                output.WriteUInt32(StatScore);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasStatId) {
                output.WriteRawTag(8);
                output.WriteEnum((int) StatId);
              }
              if (HasStatScore) {
                output.WriteRawTag(16);
                output.WriteUInt32(StatScore);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasStatId) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatId);
              }
              if (HasStatScore) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatScore);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Stat other) {
              if (other == null) {
                return;
              }
              if (other.HasStatId) {
                StatId = other.StatId;
              }
              if (other.HasStatScore) {
                StatScore = other.StatScore;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    StatId = (global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.EStatID) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    StatScore = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    StatId = (global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.EStatID) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    StatScore = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class Item : pb::IMessage<Item>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Item() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Item(Item other) : this() {
              _hasBits0 = other._hasBits0;
              serializedItem_ = other.serializedItem_;
              itemId_ = other.itemId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Item Clone() {
              return new Item(this);
            }

            /// <summary>Field number for the "serialized_item" field.</summary>
            public const int SerializedItemFieldNumber = 1;
            private readonly static pb::ByteString SerializedItemDefaultValue = pb::ByteString.Empty;

            private pb::ByteString serializedItem_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString SerializedItem {
              get { return serializedItem_ ?? SerializedItemDefaultValue; }
              set {
                serializedItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "serialized_item" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasSerializedItem {
              get { return serializedItem_ != null; }
            }
            /// <summary>Clears the value of the "serialized_item" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearSerializedItem() {
              serializedItem_ = null;
            }

            /// <summary>Field number for the "item_id" field.</summary>
            public const int ItemIdFieldNumber = 2;
            private readonly static ulong ItemIdDefaultValue = 0UL;

            private ulong itemId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong ItemId {
              get { if ((_hasBits0 & 1) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                itemId_ = value;
              }
            }
            /// <summary>Gets whether the "item_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasItemId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "item_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearItemId() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Item);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Item other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SerializedItem != other.SerializedItem) return false;
              if (ItemId != other.ItemId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasSerializedItem) hash ^= SerializedItem.GetHashCode();
              if (HasItemId) hash ^= ItemId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasSerializedItem) {
                output.WriteRawTag(10);
                output.WriteBytes(SerializedItem);
              }
              if (HasItemId) {
                output.WriteRawTag(16);
                output.WriteUInt64(ItemId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasSerializedItem) {
                output.WriteRawTag(10);
                output.WriteBytes(SerializedItem);
              }
              if (HasItemId) {
                output.WriteRawTag(16);
                output.WriteUInt64(ItemId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasSerializedItem) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(SerializedItem);
              }
              if (HasItemId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Item other) {
              if (other == null) {
                return;
              }
              if (other.HasSerializedItem) {
                SerializedItem = other.SerializedItem;
              }
              if (other.HasItemId) {
                ItemId = other.ItemId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    SerializedItem = input.ReadBytes();
                    break;
                  }
                  case 16: {
                    ItemId = input.ReadUInt64();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    SerializedItem = input.ReadBytes();
                    break;
                  }
                  case 16: {
                    ItemId = input.ReadUInt64();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class Hero : pb::IMessage<Hero>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Hero> _parser = new pb::MessageParser<Hero>(() => new Hero());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Hero> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Hero() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Hero(Hero other) : this() {
              _hasBits0 = other._hasBits0;
              heroId_ = other.heroId_;
              heroWins_ = other.heroWins_;
              heroLosses_ = other.heroLosses_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Hero Clone() {
              return new Hero(this);
            }

            /// <summary>Field number for the "hero_id" field.</summary>
            public const int HeroIdFieldNumber = 1;
            private readonly static int HeroIdDefaultValue = 0;

            private int heroId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int HeroId {
              get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                heroId_ = value;
              }
            }
            /// <summary>Gets whether the "hero_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "hero_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "hero_wins" field.</summary>
            public const int HeroWinsFieldNumber = 2;
            private readonly static uint HeroWinsDefaultValue = 0;

            private uint heroWins_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint HeroWins {
              get { if ((_hasBits0 & 2) != 0) { return heroWins_; } else { return HeroWinsDefaultValue; } }
              set {
                _hasBits0 |= 2;
                heroWins_ = value;
              }
            }
            /// <summary>Gets whether the "hero_wins" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroWins {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "hero_wins" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroWins() {
              _hasBits0 &= ~2;
            }

            /// <summary>Field number for the "hero_losses" field.</summary>
            public const int HeroLossesFieldNumber = 3;
            private readonly static uint HeroLossesDefaultValue = 0;

            private uint heroLosses_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint HeroLosses {
              get { if ((_hasBits0 & 4) != 0) { return heroLosses_; } else { return HeroLossesDefaultValue; } }
              set {
                _hasBits0 |= 4;
                heroLosses_ = value;
              }
            }
            /// <summary>Gets whether the "hero_losses" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasHeroLosses {
              get { return (_hasBits0 & 4) != 0; }
            }
            /// <summary>Clears the value of the "hero_losses" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearHeroLosses() {
              _hasBits0 &= ~4;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Hero);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Hero other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (HeroId != other.HeroId) return false;
              if (HeroWins != other.HeroWins) return false;
              if (HeroLosses != other.HeroLosses) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasHeroId) hash ^= HeroId.GetHashCode();
              if (HasHeroWins) hash ^= HeroWins.GetHashCode();
              if (HasHeroLosses) hash ^= HeroLosses.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasHeroId) {
                output.WriteRawTag(8);
                output.WriteInt32(HeroId);
              }
              if (HasHeroWins) {
                output.WriteRawTag(16);
                output.WriteUInt32(HeroWins);
              }
              if (HasHeroLosses) {
                output.WriteRawTag(24);
                output.WriteUInt32(HeroLosses);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasHeroId) {
                output.WriteRawTag(8);
                output.WriteInt32(HeroId);
              }
              if (HasHeroWins) {
                output.WriteRawTag(16);
                output.WriteUInt32(HeroWins);
              }
              if (HasHeroLosses) {
                output.WriteRawTag(24);
                output.WriteUInt32(HeroLosses);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasHeroId) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
              }
              if (HasHeroWins) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroWins);
              }
              if (HasHeroLosses) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroLosses);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Hero other) {
              if (other == null) {
                return;
              }
              if (other.HasHeroId) {
                HeroId = other.HeroId;
              }
              if (other.HasHeroWins) {
                HeroWins = other.HeroWins;
              }
              if (other.HasHeroLosses) {
                HeroLosses = other.HeroLosses;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    HeroId = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    HeroWins = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    HeroLosses = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    HeroId = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    HeroWins = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    HeroLosses = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class Emoticon : pb::IMessage<Emoticon>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Emoticon> _parser = new pb::MessageParser<Emoticon>(() => new Emoticon());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Emoticon> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Emoticon() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Emoticon(Emoticon other) : this() {
              _hasBits0 = other._hasBits0;
              emoticonId_ = other.emoticonId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Emoticon Clone() {
              return new Emoticon(this);
            }

            /// <summary>Field number for the "emoticon_id" field.</summary>
            public const int EmoticonIdFieldNumber = 1;
            private readonly static uint EmoticonIdDefaultValue = 0;

            private uint emoticonId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EmoticonId {
              get { if ((_hasBits0 & 1) != 0) { return emoticonId_; } else { return EmoticonIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                emoticonId_ = value;
              }
            }
            /// <summary>Gets whether the "emoticon_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasEmoticonId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "emoticon_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearEmoticonId() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Emoticon);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Emoticon other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (EmoticonId != other.EmoticonId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasEmoticonId) hash ^= EmoticonId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasEmoticonId) {
                output.WriteRawTag(8);
                output.WriteUInt32(EmoticonId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasEmoticonId) {
                output.WriteRawTag(8);
                output.WriteUInt32(EmoticonId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasEmoticonId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EmoticonId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Emoticon other) {
              if (other == null) {
                return;
              }
              if (other.HasEmoticonId) {
                EmoticonId = other.EmoticonId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    EmoticonId = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    EmoticonId = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class Team : pb::IMessage<Team>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Team> _parser = new pb::MessageParser<Team>(() => new Team());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Team> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTAProfileCard.Types.Slot.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Team() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Team(Team other) : this() {
              _hasBits0 = other._hasBits0;
              teamId_ = other.teamId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Team Clone() {
              return new Team(this);
            }

            /// <summary>Field number for the "team_id" field.</summary>
            public const int TeamIdFieldNumber = 1;
            private readonly static uint TeamIdDefaultValue = 0;

            private uint teamId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TeamId {
              get { if ((_hasBits0 & 1) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                teamId_ = value;
              }
            }
            /// <summary>Gets whether the "team_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTeamId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "team_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTeamId() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Team);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Team other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (TeamId != other.TeamId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasTeamId) hash ^= TeamId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasTeamId) {
                output.WriteRawTag(8);
                output.WriteUInt32(TeamId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasTeamId) {
                output.WriteRawTag(8);
                output.WriteUInt32(TeamId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasTeamId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Team other) {
              if (other == null) {
                return;
              }
              if (other.HasTeamId) {
                TeamId = other.TeamId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    TeamId = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    TeamId = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CSODOTAPlayerChallenge : pb::IMessage<CSODOTAPlayerChallenge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAPlayerChallenge> _parser = new pb::MessageParser<CSODOTAPlayerChallenge>(() => new CSODOTAPlayerChallenge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAPlayerChallenge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAPlayerChallenge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAPlayerChallenge(CSODOTAPlayerChallenge other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      eventId_ = other.eventId_;
      slotId_ = other.slotId_;
      intParam0_ = other.intParam0_;
      intParam1_ = other.intParam1_;
      createdTime_ = other.createdTime_;
      completed_ = other.completed_;
      sequenceId_ = other.sequenceId_;
      challengeTier_ = other.challengeTier_;
      flags_ = other.flags_;
      attempts_ = other.attempts_;
      completeLimit_ = other.completeLimit_;
      questRank_ = other.questRank_;
      maxQuestRank_ = other.maxQuestRank_;
      instanceId_ = other.instanceId_;
      heroId_ = other.heroId_;
      templateId_ = other.templateId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAPlayerChallenge Clone() {
      return new CSODOTAPlayerChallenge(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private readonly static uint EventIdDefaultValue = 0;

    private uint eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { if ((_hasBits0 & 2) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 3;
    private readonly static uint SlotIdDefaultValue = 0;

    private uint slotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotId {
      get { if ((_hasBits0 & 4) != 0) { return slotId_; } else { return SlotIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        slotId_ = value;
      }
    }
    /// <summary>Gets whether the "slot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlotId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "slot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlotId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "int_param_0" field.</summary>
    public const int IntParam0FieldNumber = 5;
    private readonly static uint IntParam0DefaultValue = 0;

    private uint intParam0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntParam0 {
      get { if ((_hasBits0 & 8) != 0) { return intParam0_; } else { return IntParam0DefaultValue; } }
      set {
        _hasBits0 |= 8;
        intParam0_ = value;
      }
    }
    /// <summary>Gets whether the "int_param_0" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntParam0 {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "int_param_0" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntParam0() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "int_param_1" field.</summary>
    public const int IntParam1FieldNumber = 6;
    private readonly static uint IntParam1DefaultValue = 0;

    private uint intParam1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntParam1 {
      get { if ((_hasBits0 & 16) != 0) { return intParam1_; } else { return IntParam1DefaultValue; } }
      set {
        _hasBits0 |= 16;
        intParam1_ = value;
      }
    }
    /// <summary>Gets whether the "int_param_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntParam1 {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "int_param_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntParam1() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "created_time" field.</summary>
    public const int CreatedTimeFieldNumber = 7;
    private readonly static uint CreatedTimeDefaultValue = 0;

    private uint createdTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreatedTime {
      get { if ((_hasBits0 & 32) != 0) { return createdTime_; } else { return CreatedTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        createdTime_ = value;
      }
    }
    /// <summary>Gets whether the "created_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreatedTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "created_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreatedTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "completed" field.</summary>
    public const int CompletedFieldNumber = 8;
    private readonly static uint CompletedDefaultValue = 0;

    private uint completed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Completed {
      get { if ((_hasBits0 & 64) != 0) { return completed_; } else { return CompletedDefaultValue; } }
      set {
        _hasBits0 |= 64;
        completed_ = value;
      }
    }
    /// <summary>Gets whether the "completed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompleted {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "completed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompleted() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "sequence_id" field.</summary>
    public const int SequenceIdFieldNumber = 9;
    private readonly static uint SequenceIdDefaultValue = 0;

    private uint sequenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SequenceId {
      get { if ((_hasBits0 & 128) != 0) { return sequenceId_; } else { return SequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 128;
        sequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceId() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "challenge_tier" field.</summary>
    public const int ChallengeTierFieldNumber = 10;
    private readonly static uint ChallengeTierDefaultValue = 0;

    private uint challengeTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeTier {
      get { if ((_hasBits0 & 256) != 0) { return challengeTier_; } else { return ChallengeTierDefaultValue; } }
      set {
        _hasBits0 |= 256;
        challengeTier_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_tier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeTier {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "challenge_tier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeTier() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 11;
    private readonly static uint FlagsDefaultValue = 0;

    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { if ((_hasBits0 & 512) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 512;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "attempts" field.</summary>
    public const int AttemptsFieldNumber = 12;
    private readonly static uint AttemptsDefaultValue = 0;

    private uint attempts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Attempts {
      get { if ((_hasBits0 & 1024) != 0) { return attempts_; } else { return AttemptsDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        attempts_ = value;
      }
    }
    /// <summary>Gets whether the "attempts" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttempts {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "attempts" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttempts() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "complete_limit" field.</summary>
    public const int CompleteLimitFieldNumber = 13;
    private readonly static uint CompleteLimitDefaultValue = 0;

    private uint completeLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CompleteLimit {
      get { if ((_hasBits0 & 2048) != 0) { return completeLimit_; } else { return CompleteLimitDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        completeLimit_ = value;
      }
    }
    /// <summary>Gets whether the "complete_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompleteLimit {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "complete_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompleteLimit() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "quest_rank" field.</summary>
    public const int QuestRankFieldNumber = 14;
    private readonly static uint QuestRankDefaultValue = 0;

    private uint questRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuestRank {
      get { if ((_hasBits0 & 4096) != 0) { return questRank_; } else { return QuestRankDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        questRank_ = value;
      }
    }
    /// <summary>Gets whether the "quest_rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestRank {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "quest_rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestRank() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "max_quest_rank" field.</summary>
    public const int MaxQuestRankFieldNumber = 15;
    private readonly static uint MaxQuestRankDefaultValue = 0;

    private uint maxQuestRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxQuestRank {
      get { if ((_hasBits0 & 8192) != 0) { return maxQuestRank_; } else { return MaxQuestRankDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        maxQuestRank_ = value;
      }
    }
    /// <summary>Gets whether the "max_quest_rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxQuestRank {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "max_quest_rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxQuestRank() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 16;
    private readonly static uint InstanceIdDefaultValue = 0;

    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { if ((_hasBits0 & 16384) != 0) { return instanceId_; } else { return InstanceIdDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        instanceId_ = value;
      }
    }
    /// <summary>Gets whether the "instance_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInstanceId {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "instance_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInstanceId() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 17;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 32768) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 18;
    private readonly static uint TemplateIdDefaultValue = 0;

    private uint templateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TemplateId {
      get { if ((_hasBits0 & 65536) != 0) { return templateId_; } else { return TemplateIdDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        templateId_ = value;
      }
    }
    /// <summary>Gets whether the "template_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTemplateId {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "template_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTemplateId() {
      _hasBits0 &= ~65536;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAPlayerChallenge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAPlayerChallenge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (EventId != other.EventId) return false;
      if (SlotId != other.SlotId) return false;
      if (IntParam0 != other.IntParam0) return false;
      if (IntParam1 != other.IntParam1) return false;
      if (CreatedTime != other.CreatedTime) return false;
      if (Completed != other.Completed) return false;
      if (SequenceId != other.SequenceId) return false;
      if (ChallengeTier != other.ChallengeTier) return false;
      if (Flags != other.Flags) return false;
      if (Attempts != other.Attempts) return false;
      if (CompleteLimit != other.CompleteLimit) return false;
      if (QuestRank != other.QuestRank) return false;
      if (MaxQuestRank != other.MaxQuestRank) return false;
      if (InstanceId != other.InstanceId) return false;
      if (HeroId != other.HeroId) return false;
      if (TemplateId != other.TemplateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasSlotId) hash ^= SlotId.GetHashCode();
      if (HasIntParam0) hash ^= IntParam0.GetHashCode();
      if (HasIntParam1) hash ^= IntParam1.GetHashCode();
      if (HasCreatedTime) hash ^= CreatedTime.GetHashCode();
      if (HasCompleted) hash ^= Completed.GetHashCode();
      if (HasSequenceId) hash ^= SequenceId.GetHashCode();
      if (HasChallengeTier) hash ^= ChallengeTier.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      if (HasAttempts) hash ^= Attempts.GetHashCode();
      if (HasCompleteLimit) hash ^= CompleteLimit.GetHashCode();
      if (HasQuestRank) hash ^= QuestRank.GetHashCode();
      if (HasMaxQuestRank) hash ^= MaxQuestRank.GetHashCode();
      if (HasInstanceId) hash ^= InstanceId.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasTemplateId) hash ^= TemplateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteUInt32(EventId);
      }
      if (HasSlotId) {
        output.WriteRawTag(24);
        output.WriteUInt32(SlotId);
      }
      if (HasIntParam0) {
        output.WriteRawTag(40);
        output.WriteUInt32(IntParam0);
      }
      if (HasIntParam1) {
        output.WriteRawTag(48);
        output.WriteUInt32(IntParam1);
      }
      if (HasCreatedTime) {
        output.WriteRawTag(56);
        output.WriteUInt32(CreatedTime);
      }
      if (HasCompleted) {
        output.WriteRawTag(64);
        output.WriteUInt32(Completed);
      }
      if (HasSequenceId) {
        output.WriteRawTag(72);
        output.WriteUInt32(SequenceId);
      }
      if (HasChallengeTier) {
        output.WriteRawTag(80);
        output.WriteUInt32(ChallengeTier);
      }
      if (HasFlags) {
        output.WriteRawTag(88);
        output.WriteUInt32(Flags);
      }
      if (HasAttempts) {
        output.WriteRawTag(96);
        output.WriteUInt32(Attempts);
      }
      if (HasCompleteLimit) {
        output.WriteRawTag(104);
        output.WriteUInt32(CompleteLimit);
      }
      if (HasQuestRank) {
        output.WriteRawTag(112);
        output.WriteUInt32(QuestRank);
      }
      if (HasMaxQuestRank) {
        output.WriteRawTag(120);
        output.WriteUInt32(MaxQuestRank);
      }
      if (HasInstanceId) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(InstanceId);
      }
      if (HasHeroId) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(HeroId);
      }
      if (HasTemplateId) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(TemplateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteUInt32(EventId);
      }
      if (HasSlotId) {
        output.WriteRawTag(24);
        output.WriteUInt32(SlotId);
      }
      if (HasIntParam0) {
        output.WriteRawTag(40);
        output.WriteUInt32(IntParam0);
      }
      if (HasIntParam1) {
        output.WriteRawTag(48);
        output.WriteUInt32(IntParam1);
      }
      if (HasCreatedTime) {
        output.WriteRawTag(56);
        output.WriteUInt32(CreatedTime);
      }
      if (HasCompleted) {
        output.WriteRawTag(64);
        output.WriteUInt32(Completed);
      }
      if (HasSequenceId) {
        output.WriteRawTag(72);
        output.WriteUInt32(SequenceId);
      }
      if (HasChallengeTier) {
        output.WriteRawTag(80);
        output.WriteUInt32(ChallengeTier);
      }
      if (HasFlags) {
        output.WriteRawTag(88);
        output.WriteUInt32(Flags);
      }
      if (HasAttempts) {
        output.WriteRawTag(96);
        output.WriteUInt32(Attempts);
      }
      if (HasCompleteLimit) {
        output.WriteRawTag(104);
        output.WriteUInt32(CompleteLimit);
      }
      if (HasQuestRank) {
        output.WriteRawTag(112);
        output.WriteUInt32(QuestRank);
      }
      if (HasMaxQuestRank) {
        output.WriteRawTag(120);
        output.WriteUInt32(MaxQuestRank);
      }
      if (HasInstanceId) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(InstanceId);
      }
      if (HasHeroId) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(HeroId);
      }
      if (HasTemplateId) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(TemplateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      if (HasSlotId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
      }
      if (HasIntParam0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntParam0);
      }
      if (HasIntParam1) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntParam1);
      }
      if (HasCreatedTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreatedTime);
      }
      if (HasCompleted) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Completed);
      }
      if (HasSequenceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceId);
      }
      if (HasChallengeTier) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeTier);
      }
      if (HasFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (HasAttempts) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Attempts);
      }
      if (HasCompleteLimit) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CompleteLimit);
      }
      if (HasQuestRank) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuestRank);
      }
      if (HasMaxQuestRank) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxQuestRank);
      }
      if (HasInstanceId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (HasHeroId) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasTemplateId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TemplateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAPlayerChallenge other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasSlotId) {
        SlotId = other.SlotId;
      }
      if (other.HasIntParam0) {
        IntParam0 = other.IntParam0;
      }
      if (other.HasIntParam1) {
        IntParam1 = other.IntParam1;
      }
      if (other.HasCreatedTime) {
        CreatedTime = other.CreatedTime;
      }
      if (other.HasCompleted) {
        Completed = other.Completed;
      }
      if (other.HasSequenceId) {
        SequenceId = other.SequenceId;
      }
      if (other.HasChallengeTier) {
        ChallengeTier = other.ChallengeTier;
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      if (other.HasAttempts) {
        Attempts = other.Attempts;
      }
      if (other.HasCompleteLimit) {
        CompleteLimit = other.CompleteLimit;
      }
      if (other.HasQuestRank) {
        QuestRank = other.QuestRank;
      }
      if (other.HasMaxQuestRank) {
        MaxQuestRank = other.MaxQuestRank;
      }
      if (other.HasInstanceId) {
        InstanceId = other.InstanceId;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasTemplateId) {
        TemplateId = other.TemplateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            EventId = input.ReadUInt32();
            break;
          }
          case 24: {
            SlotId = input.ReadUInt32();
            break;
          }
          case 40: {
            IntParam0 = input.ReadUInt32();
            break;
          }
          case 48: {
            IntParam1 = input.ReadUInt32();
            break;
          }
          case 56: {
            CreatedTime = input.ReadUInt32();
            break;
          }
          case 64: {
            Completed = input.ReadUInt32();
            break;
          }
          case 72: {
            SequenceId = input.ReadUInt32();
            break;
          }
          case 80: {
            ChallengeTier = input.ReadUInt32();
            break;
          }
          case 88: {
            Flags = input.ReadUInt32();
            break;
          }
          case 96: {
            Attempts = input.ReadUInt32();
            break;
          }
          case 104: {
            CompleteLimit = input.ReadUInt32();
            break;
          }
          case 112: {
            QuestRank = input.ReadUInt32();
            break;
          }
          case 120: {
            MaxQuestRank = input.ReadUInt32();
            break;
          }
          case 128: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 136: {
            HeroId = input.ReadInt32();
            break;
          }
          case 144: {
            TemplateId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            EventId = input.ReadUInt32();
            break;
          }
          case 24: {
            SlotId = input.ReadUInt32();
            break;
          }
          case 40: {
            IntParam0 = input.ReadUInt32();
            break;
          }
          case 48: {
            IntParam1 = input.ReadUInt32();
            break;
          }
          case 56: {
            CreatedTime = input.ReadUInt32();
            break;
          }
          case 64: {
            Completed = input.ReadUInt32();
            break;
          }
          case 72: {
            SequenceId = input.ReadUInt32();
            break;
          }
          case 80: {
            ChallengeTier = input.ReadUInt32();
            break;
          }
          case 88: {
            Flags = input.ReadUInt32();
            break;
          }
          case 96: {
            Attempts = input.ReadUInt32();
            break;
          }
          case 104: {
            CompleteLimit = input.ReadUInt32();
            break;
          }
          case 112: {
            QuestRank = input.ReadUInt32();
            break;
          }
          case 120: {
            MaxQuestRank = input.ReadUInt32();
            break;
          }
          case 128: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 136: {
            HeroId = input.ReadInt32();
            break;
          }
          case 144: {
            TemplateId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCRerollPlayerChallenge : pb::IMessage<CMsgClientToGCRerollPlayerChallenge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCRerollPlayerChallenge> _parser = new pb::MessageParser<CMsgClientToGCRerollPlayerChallenge>(() => new CMsgClientToGCRerollPlayerChallenge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCRerollPlayerChallenge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCRerollPlayerChallenge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCRerollPlayerChallenge(CMsgClientToGCRerollPlayerChallenge other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      sequenceId_ = other.sequenceId_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCRerollPlayerChallenge Clone() {
      return new CMsgClientToGCRerollPlayerChallenge(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sequence_id" field.</summary>
    public const int SequenceIdFieldNumber = 3;
    private readonly static uint SequenceIdDefaultValue = 0;

    private uint sequenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SequenceId {
      get { if ((_hasBits0 & 2) != 0) { return sequenceId_; } else { return SequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCRerollPlayerChallenge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCRerollPlayerChallenge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (SequenceId != other.SequenceId) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasSequenceId) hash ^= SequenceId.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      if (HasSequenceId) {
        output.WriteRawTag(24);
        output.WriteUInt32(SequenceId);
      }
      if (HasHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      if (HasSequenceId) {
        output.WriteRawTag(24);
        output.WriteUInt32(SequenceId);
      }
      if (HasHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasSequenceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceId);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCRerollPlayerChallenge other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasSequenceId) {
        SequenceId = other.SequenceId;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            SequenceId = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            SequenceId = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCRerollPlayerChallengeResponse : pb::IMessage<CMsgGCRerollPlayerChallengeResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCRerollPlayerChallengeResponse> _parser = new pb::MessageParser<CMsgGCRerollPlayerChallengeResponse>(() => new CMsgGCRerollPlayerChallengeResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCRerollPlayerChallengeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCRerollPlayerChallengeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCRerollPlayerChallengeResponse(CMsgGCRerollPlayerChallengeResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCRerollPlayerChallengeResponse Clone() {
      return new CMsgGCRerollPlayerChallengeResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgGCRerollPlayerChallengeResponse.Types.EResult ResultDefaultValue = global::Steam.Protos.Dota2.CMsgGCRerollPlayerChallengeResponse.Types.EResult.Success;

    private global::Steam.Protos.Dota2.CMsgGCRerollPlayerChallengeResponse.Types.EResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgGCRerollPlayerChallengeResponse.Types.EResult Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCRerollPlayerChallengeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCRerollPlayerChallengeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCRerollPlayerChallengeResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Steam.Protos.Dota2.CMsgGCRerollPlayerChallengeResponse.Types.EResult) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = (global::Steam.Protos.Dota2.CMsgGCRerollPlayerChallengeResponse.Types.EResult) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGCRerollPlayerChallengeResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResult {
        [pbr::OriginalName("eResult_Success")] Success = 0,
        [pbr::OriginalName("eResult_Dropped")] Dropped = 1,
        [pbr::OriginalName("eResult_NotFound")] NotFound = 2,
        [pbr::OriginalName("eResult_CantReroll")] CantReroll = 3,
        [pbr::OriginalName("eResult_ServerError")] ServerError = 4,
      }

    }
    #endregion

  }

  public sealed partial class CMsgGCTopCustomGamesList : pb::IMessage<CMsgGCTopCustomGamesList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCTopCustomGamesList> _parser = new pb::MessageParser<CMsgGCTopCustomGamesList>(() => new CMsgGCTopCustomGamesList());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCTopCustomGamesList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCTopCustomGamesList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCTopCustomGamesList(CMsgGCTopCustomGamesList other) : this() {
      _hasBits0 = other._hasBits0;
      topCustomGames_ = other.topCustomGames_.Clone();
      gameOfTheDay_ = other.gameOfTheDay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCTopCustomGamesList Clone() {
      return new CMsgGCTopCustomGamesList(this);
    }

    /// <summary>Field number for the "top_custom_games" field.</summary>
    public const int TopCustomGamesFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_topCustomGames_codec
        = pb::FieldCodec.ForUInt64(8);
    private readonly pbc::RepeatedField<ulong> topCustomGames_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> TopCustomGames {
      get { return topCustomGames_; }
    }

    /// <summary>Field number for the "game_of_the_day" field.</summary>
    public const int GameOfTheDayFieldNumber = 2;
    private readonly static ulong GameOfTheDayDefaultValue = 0UL;

    private ulong gameOfTheDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameOfTheDay {
      get { if ((_hasBits0 & 1) != 0) { return gameOfTheDay_; } else { return GameOfTheDayDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gameOfTheDay_ = value;
      }
    }
    /// <summary>Gets whether the "game_of_the_day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameOfTheDay {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "game_of_the_day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameOfTheDay() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCTopCustomGamesList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCTopCustomGamesList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!topCustomGames_.Equals(other.topCustomGames_)) return false;
      if (GameOfTheDay != other.GameOfTheDay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= topCustomGames_.GetHashCode();
      if (HasGameOfTheDay) hash ^= GameOfTheDay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      topCustomGames_.WriteTo(output, _repeated_topCustomGames_codec);
      if (HasGameOfTheDay) {
        output.WriteRawTag(16);
        output.WriteUInt64(GameOfTheDay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      topCustomGames_.WriteTo(ref output, _repeated_topCustomGames_codec);
      if (HasGameOfTheDay) {
        output.WriteRawTag(16);
        output.WriteUInt64(GameOfTheDay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += topCustomGames_.CalculateSize(_repeated_topCustomGames_codec);
      if (HasGameOfTheDay) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameOfTheDay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCTopCustomGamesList other) {
      if (other == null) {
        return;
      }
      topCustomGames_.Add(other.topCustomGames_);
      if (other.HasGameOfTheDay) {
        GameOfTheDay = other.GameOfTheDay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            topCustomGames_.AddEntriesFrom(input, _repeated_topCustomGames_codec);
            break;
          }
          case 16: {
            GameOfTheDay = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            topCustomGames_.AddEntriesFrom(ref input, _repeated_topCustomGames_codec);
            break;
          }
          case 16: {
            GameOfTheDay = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTARealtimeGameStats : pb::IMessage<CMsgDOTARealtimeGameStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTARealtimeGameStats> _parser = new pb::MessageParser<CMsgDOTARealtimeGameStats>(() => new CMsgDOTARealtimeGameStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTARealtimeGameStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTARealtimeGameStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTARealtimeGameStats(CMsgDOTARealtimeGameStats other) : this() {
      _hasBits0 = other._hasBits0;
      match_ = other.match_ != null ? other.match_.Clone() : null;
      teams_ = other.teams_.Clone();
      buildings_ = other.buildings_.Clone();
      graphData_ = other.graphData_ != null ? other.graphData_.Clone() : null;
      deltaFrame_ = other.deltaFrame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTARealtimeGameStats Clone() {
      return new CMsgDOTARealtimeGameStats(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.MatchDetails match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.MatchDetails Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.TeamDetails> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.TeamDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.TeamDetails> teams_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.TeamDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.TeamDetails> Teams {
      get { return teams_; }
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int BuildingsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BuildingDetails> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BuildingDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BuildingDetails> buildings_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BuildingDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BuildingDetails> Buildings {
      get { return buildings_; }
    }

    /// <summary>Field number for the "graph_data" field.</summary>
    public const int GraphDataFieldNumber = 4;
    private global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData graphData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData GraphData {
      get { return graphData_; }
      set {
        graphData_ = value;
      }
    }

    /// <summary>Field number for the "delta_frame" field.</summary>
    public const int DeltaFrameFieldNumber = 5;
    private readonly static bool DeltaFrameDefaultValue = false;

    private bool deltaFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeltaFrame {
      get { if ((_hasBits0 & 1) != 0) { return deltaFrame_; } else { return DeltaFrameDefaultValue; } }
      set {
        _hasBits0 |= 1;
        deltaFrame_ = value;
      }
    }
    /// <summary>Gets whether the "delta_frame" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeltaFrame {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "delta_frame" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeltaFrame() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTARealtimeGameStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTARealtimeGameStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Match, other.Match)) return false;
      if(!teams_.Equals(other.teams_)) return false;
      if(!buildings_.Equals(other.buildings_)) return false;
      if (!object.Equals(GraphData, other.GraphData)) return false;
      if (DeltaFrame != other.DeltaFrame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (match_ != null) hash ^= Match.GetHashCode();
      hash ^= teams_.GetHashCode();
      hash ^= buildings_.GetHashCode();
      if (graphData_ != null) hash ^= GraphData.GetHashCode();
      if (HasDeltaFrame) hash ^= DeltaFrame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      teams_.WriteTo(output, _repeated_teams_codec);
      buildings_.WriteTo(output, _repeated_buildings_codec);
      if (graphData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GraphData);
      }
      if (HasDeltaFrame) {
        output.WriteRawTag(40);
        output.WriteBool(DeltaFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      teams_.WriteTo(ref output, _repeated_teams_codec);
      buildings_.WriteTo(ref output, _repeated_buildings_codec);
      if (graphData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GraphData);
      }
      if (HasDeltaFrame) {
        output.WriteRawTag(40);
        output.WriteBool(DeltaFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      size += teams_.CalculateSize(_repeated_teams_codec);
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      if (graphData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphData);
      }
      if (HasDeltaFrame) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTARealtimeGameStats other) {
      if (other == null) {
        return;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          Match = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.MatchDetails();
        }
        Match.MergeFrom(other.Match);
      }
      teams_.Add(other.teams_);
      buildings_.Add(other.buildings_);
      if (other.graphData_ != null) {
        if (graphData_ == null) {
          GraphData = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData();
        }
        GraphData.MergeFrom(other.GraphData);
      }
      if (other.HasDeltaFrame) {
        DeltaFrame = other.DeltaFrame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (match_ == null) {
              Match = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.MatchDetails();
            }
            input.ReadMessage(Match);
            break;
          }
          case 18: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
          case 26: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
          case 34: {
            if (graphData_ == null) {
              GraphData = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData();
            }
            input.ReadMessage(GraphData);
            break;
          }
          case 40: {
            DeltaFrame = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (match_ == null) {
              Match = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.MatchDetails();
            }
            input.ReadMessage(Match);
            break;
          }
          case 18: {
            teams_.AddEntriesFrom(ref input, _repeated_teams_codec);
            break;
          }
          case 26: {
            buildings_.AddEntriesFrom(ref input, _repeated_buildings_codec);
            break;
          }
          case 34: {
            if (graphData_ == null) {
              GraphData = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData();
            }
            input.ReadMessage(GraphData);
            break;
          }
          case 40: {
            DeltaFrame = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTARealtimeGameStats message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TeamDetails : pb::IMessage<TeamDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TeamDetails> _parser = new pb::MessageParser<TeamDetails>(() => new TeamDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TeamDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamDetails(TeamDetails other) : this() {
          _hasBits0 = other._hasBits0;
          teamNumber_ = other.teamNumber_;
          teamId_ = other.teamId_;
          teamName_ = other.teamName_;
          teamLogo_ = other.teamLogo_;
          teamTag_ = other.teamTag_;
          score_ = other.score_;
          netWorth_ = other.netWorth_;
          players_ = other.players_.Clone();
          onlyTeam_ = other.onlyTeam_;
          cheers_ = other.cheers_;
          teamLogoUrl_ = other.teamLogoUrl_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamDetails Clone() {
          return new TeamDetails(this);
        }

        /// <summary>Field number for the "team_number" field.</summary>
        public const int TeamNumberFieldNumber = 1;
        private readonly static uint TeamNumberDefaultValue = 0;

        private uint teamNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamNumber {
          get { if ((_hasBits0 & 1) != 0) { return teamNumber_; } else { return TeamNumberDefaultValue; } }
          set {
            _hasBits0 |= 1;
            teamNumber_ = value;
          }
        }
        /// <summary>Gets whether the "team_number" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamNumber {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "team_number" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamNumber() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "team_id" field.</summary>
        public const int TeamIdFieldNumber = 2;
        private readonly static uint TeamIdDefaultValue = 0;

        private uint teamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamId {
          get { if ((_hasBits0 & 2) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            teamId_ = value;
          }
        }
        /// <summary>Gets whether the "team_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "team_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "team_name" field.</summary>
        public const int TeamNameFieldNumber = 3;
        private readonly static string TeamNameDefaultValue = "";

        private string teamName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TeamName {
          get { return teamName_ ?? TeamNameDefaultValue; }
          set {
            teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "team_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamName {
          get { return teamName_ != null; }
        }
        /// <summary>Clears the value of the "team_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamName() {
          teamName_ = null;
        }

        /// <summary>Field number for the "team_logo" field.</summary>
        public const int TeamLogoFieldNumber = 4;
        private readonly static ulong TeamLogoDefaultValue = 0UL;

        private ulong teamLogo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TeamLogo {
          get { if ((_hasBits0 & 4) != 0) { return teamLogo_; } else { return TeamLogoDefaultValue; } }
          set {
            _hasBits0 |= 4;
            teamLogo_ = value;
          }
        }
        /// <summary>Gets whether the "team_logo" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamLogo {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "team_logo" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamLogo() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "team_tag" field.</summary>
        public const int TeamTagFieldNumber = 10;
        private readonly static string TeamTagDefaultValue = "";

        private string teamTag_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TeamTag {
          get { return teamTag_ ?? TeamTagDefaultValue; }
          set {
            teamTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "team_tag" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamTag {
          get { return teamTag_ != null; }
        }
        /// <summary>Clears the value of the "team_tag" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamTag() {
          teamTag_ = null;
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 5;
        private readonly static uint ScoreDefaultValue = 0;

        private uint score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Score {
          get { if ((_hasBits0 & 8) != 0) { return score_; } else { return ScoreDefaultValue; } }
          set {
            _hasBits0 |= 8;
            score_ = value;
          }
        }
        /// <summary>Gets whether the "score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScore {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScore() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "net_worth" field.</summary>
        public const int NetWorthFieldNumber = 9;
        private readonly static uint NetWorthDefaultValue = 0;

        private uint netWorth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NetWorth {
          get { if ((_hasBits0 & 64) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
          set {
            _hasBits0 |= 64;
            netWorth_ = value;
          }
        }
        /// <summary>Gets whether the "net_worth" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNetWorth {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "net_worth" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNetWorth() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PlayerDetails> _repeated_players_codec
            = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PlayerDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PlayerDetails> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PlayerDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PlayerDetails> Players {
          get { return players_; }
        }

        /// <summary>Field number for the "only_team" field.</summary>
        public const int OnlyTeamFieldNumber = 7;
        private readonly static bool OnlyTeamDefaultValue = false;

        private bool onlyTeam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool OnlyTeam {
          get { if ((_hasBits0 & 16) != 0) { return onlyTeam_; } else { return OnlyTeamDefaultValue; } }
          set {
            _hasBits0 |= 16;
            onlyTeam_ = value;
          }
        }
        /// <summary>Gets whether the "only_team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOnlyTeam {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "only_team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOnlyTeam() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "cheers" field.</summary>
        public const int CheersFieldNumber = 8;
        private readonly static uint CheersDefaultValue = 0;

        private uint cheers_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Cheers {
          get { if ((_hasBits0 & 32) != 0) { return cheers_; } else { return CheersDefaultValue; } }
          set {
            _hasBits0 |= 32;
            cheers_ = value;
          }
        }
        /// <summary>Gets whether the "cheers" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCheers {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "cheers" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCheers() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "team_logo_url" field.</summary>
        public const int TeamLogoUrlFieldNumber = 11;
        private readonly static string TeamLogoUrlDefaultValue = "";

        private string teamLogoUrl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TeamLogoUrl {
          get { return teamLogoUrl_ ?? TeamLogoUrlDefaultValue; }
          set {
            teamLogoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "team_logo_url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamLogoUrl {
          get { return teamLogoUrl_ != null; }
        }
        /// <summary>Clears the value of the "team_logo_url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamLogoUrl() {
          teamLogoUrl_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TeamDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TeamDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TeamNumber != other.TeamNumber) return false;
          if (TeamId != other.TeamId) return false;
          if (TeamName != other.TeamName) return false;
          if (TeamLogo != other.TeamLogo) return false;
          if (TeamTag != other.TeamTag) return false;
          if (Score != other.Score) return false;
          if (NetWorth != other.NetWorth) return false;
          if(!players_.Equals(other.players_)) return false;
          if (OnlyTeam != other.OnlyTeam) return false;
          if (Cheers != other.Cheers) return false;
          if (TeamLogoUrl != other.TeamLogoUrl) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTeamNumber) hash ^= TeamNumber.GetHashCode();
          if (HasTeamId) hash ^= TeamId.GetHashCode();
          if (HasTeamName) hash ^= TeamName.GetHashCode();
          if (HasTeamLogo) hash ^= TeamLogo.GetHashCode();
          if (HasTeamTag) hash ^= TeamTag.GetHashCode();
          if (HasScore) hash ^= Score.GetHashCode();
          if (HasNetWorth) hash ^= NetWorth.GetHashCode();
          hash ^= players_.GetHashCode();
          if (HasOnlyTeam) hash ^= OnlyTeam.GetHashCode();
          if (HasCheers) hash ^= Cheers.GetHashCode();
          if (HasTeamLogoUrl) hash ^= TeamLogoUrl.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasTeamNumber) {
            output.WriteRawTag(8);
            output.WriteUInt32(TeamNumber);
          }
          if (HasTeamId) {
            output.WriteRawTag(16);
            output.WriteUInt32(TeamId);
          }
          if (HasTeamName) {
            output.WriteRawTag(26);
            output.WriteString(TeamName);
          }
          if (HasTeamLogo) {
            output.WriteRawTag(33);
            output.WriteFixed64(TeamLogo);
          }
          if (HasScore) {
            output.WriteRawTag(40);
            output.WriteUInt32(Score);
          }
          players_.WriteTo(output, _repeated_players_codec);
          if (HasOnlyTeam) {
            output.WriteRawTag(56);
            output.WriteBool(OnlyTeam);
          }
          if (HasCheers) {
            output.WriteRawTag(64);
            output.WriteUInt32(Cheers);
          }
          if (HasNetWorth) {
            output.WriteRawTag(72);
            output.WriteUInt32(NetWorth);
          }
          if (HasTeamTag) {
            output.WriteRawTag(82);
            output.WriteString(TeamTag);
          }
          if (HasTeamLogoUrl) {
            output.WriteRawTag(90);
            output.WriteString(TeamLogoUrl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasTeamNumber) {
            output.WriteRawTag(8);
            output.WriteUInt32(TeamNumber);
          }
          if (HasTeamId) {
            output.WriteRawTag(16);
            output.WriteUInt32(TeamId);
          }
          if (HasTeamName) {
            output.WriteRawTag(26);
            output.WriteString(TeamName);
          }
          if (HasTeamLogo) {
            output.WriteRawTag(33);
            output.WriteFixed64(TeamLogo);
          }
          if (HasScore) {
            output.WriteRawTag(40);
            output.WriteUInt32(Score);
          }
          players_.WriteTo(ref output, _repeated_players_codec);
          if (HasOnlyTeam) {
            output.WriteRawTag(56);
            output.WriteBool(OnlyTeam);
          }
          if (HasCheers) {
            output.WriteRawTag(64);
            output.WriteUInt32(Cheers);
          }
          if (HasNetWorth) {
            output.WriteRawTag(72);
            output.WriteUInt32(NetWorth);
          }
          if (HasTeamTag) {
            output.WriteRawTag(82);
            output.WriteString(TeamTag);
          }
          if (HasTeamLogoUrl) {
            output.WriteRawTag(90);
            output.WriteString(TeamLogoUrl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTeamNumber) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamNumber);
          }
          if (HasTeamId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
          }
          if (HasTeamName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
          }
          if (HasTeamLogo) {
            size += 1 + 8;
          }
          if (HasTeamTag) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamTag);
          }
          if (HasScore) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
          }
          if (HasNetWorth) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
          }
          size += players_.CalculateSize(_repeated_players_codec);
          if (HasOnlyTeam) {
            size += 1 + 1;
          }
          if (HasCheers) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cheers);
          }
          if (HasTeamLogoUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamLogoUrl);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TeamDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasTeamNumber) {
            TeamNumber = other.TeamNumber;
          }
          if (other.HasTeamId) {
            TeamId = other.TeamId;
          }
          if (other.HasTeamName) {
            TeamName = other.TeamName;
          }
          if (other.HasTeamLogo) {
            TeamLogo = other.TeamLogo;
          }
          if (other.HasTeamTag) {
            TeamTag = other.TeamTag;
          }
          if (other.HasScore) {
            Score = other.Score;
          }
          if (other.HasNetWorth) {
            NetWorth = other.NetWorth;
          }
          players_.Add(other.players_);
          if (other.HasOnlyTeam) {
            OnlyTeam = other.OnlyTeam;
          }
          if (other.HasCheers) {
            Cheers = other.Cheers;
          }
          if (other.HasTeamLogoUrl) {
            TeamLogoUrl = other.TeamLogoUrl;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TeamNumber = input.ReadUInt32();
                break;
              }
              case 16: {
                TeamId = input.ReadUInt32();
                break;
              }
              case 26: {
                TeamName = input.ReadString();
                break;
              }
              case 33: {
                TeamLogo = input.ReadFixed64();
                break;
              }
              case 40: {
                Score = input.ReadUInt32();
                break;
              }
              case 50: {
                players_.AddEntriesFrom(input, _repeated_players_codec);
                break;
              }
              case 56: {
                OnlyTeam = input.ReadBool();
                break;
              }
              case 64: {
                Cheers = input.ReadUInt32();
                break;
              }
              case 72: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 82: {
                TeamTag = input.ReadString();
                break;
              }
              case 90: {
                TeamLogoUrl = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                TeamNumber = input.ReadUInt32();
                break;
              }
              case 16: {
                TeamId = input.ReadUInt32();
                break;
              }
              case 26: {
                TeamName = input.ReadString();
                break;
              }
              case 33: {
                TeamLogo = input.ReadFixed64();
                break;
              }
              case 40: {
                Score = input.ReadUInt32();
                break;
              }
              case 50: {
                players_.AddEntriesFrom(ref input, _repeated_players_codec);
                break;
              }
              case 56: {
                OnlyTeam = input.ReadBool();
                break;
              }
              case 64: {
                Cheers = input.ReadUInt32();
                break;
              }
              case 72: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 82: {
                TeamTag = input.ReadString();
                break;
              }
              case 90: {
                TeamLogoUrl = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class ItemDetails : pb::IMessage<ItemDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ItemDetails> _parser = new pb::MessageParser<ItemDetails>(() => new ItemDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemDetails(ItemDetails other) : this() {
          _hasBits0 = other._hasBits0;
          itemAbilityId_ = other.itemAbilityId_;
          name_ = other.name_;
          time_ = other.time_;
          sold_ = other.sold_;
          stackcount_ = other.stackcount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemDetails Clone() {
          return new ItemDetails(this);
        }

        /// <summary>Field number for the "item_ability_id" field.</summary>
        public const int ItemAbilityIdFieldNumber = 1;
        private readonly static int ItemAbilityIdDefaultValue = -1;

        private int itemAbilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ItemAbilityId {
          get { if ((_hasBits0 & 1) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            itemAbilityId_ = value;
          }
        }
        /// <summary>Gets whether the "item_ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItemAbilityId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "item_ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItemAbilityId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 3;
        private readonly static int TimeDefaultValue = 0;

        private int time_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Time {
          get { if ((_hasBits0 & 2) != 0) { return time_; } else { return TimeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            time_ = value;
          }
        }
        /// <summary>Gets whether the "time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTime {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTime() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "sold" field.</summary>
        public const int SoldFieldNumber = 4;
        private readonly static bool SoldDefaultValue = false;

        private bool sold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Sold {
          get { if ((_hasBits0 & 4) != 0) { return sold_; } else { return SoldDefaultValue; } }
          set {
            _hasBits0 |= 4;
            sold_ = value;
          }
        }
        /// <summary>Gets whether the "sold" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSold {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "sold" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSold() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "stackcount" field.</summary>
        public const int StackcountFieldNumber = 5;
        private readonly static uint StackcountDefaultValue = 0;

        private uint stackcount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Stackcount {
          get { if ((_hasBits0 & 8) != 0) { return stackcount_; } else { return StackcountDefaultValue; } }
          set {
            _hasBits0 |= 8;
            stackcount_ = value;
          }
        }
        /// <summary>Gets whether the "stackcount" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStackcount {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "stackcount" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStackcount() {
          _hasBits0 &= ~8;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ItemDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ItemDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemAbilityId != other.ItemAbilityId) return false;
          if (Name != other.Name) return false;
          if (Time != other.Time) return false;
          if (Sold != other.Sold) return false;
          if (Stackcount != other.Stackcount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (HasTime) hash ^= Time.GetHashCode();
          if (HasSold) hash ^= Sold.GetHashCode();
          if (HasStackcount) hash ^= Stackcount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasItemAbilityId) {
            output.WriteRawTag(8);
            output.WriteInt32(ItemAbilityId);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasTime) {
            output.WriteRawTag(24);
            output.WriteInt32(Time);
          }
          if (HasSold) {
            output.WriteRawTag(32);
            output.WriteBool(Sold);
          }
          if (HasStackcount) {
            output.WriteRawTag(40);
            output.WriteUInt32(Stackcount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasItemAbilityId) {
            output.WriteRawTag(8);
            output.WriteInt32(ItemAbilityId);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasTime) {
            output.WriteRawTag(24);
            output.WriteInt32(Time);
          }
          if (HasSold) {
            output.WriteRawTag(32);
            output.WriteBool(Sold);
          }
          if (HasStackcount) {
            output.WriteRawTag(40);
            output.WriteUInt32(Stackcount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasItemAbilityId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasTime) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
          }
          if (HasSold) {
            size += 1 + 1;
          }
          if (HasStackcount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stackcount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ItemDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasItemAbilityId) {
            ItemAbilityId = other.ItemAbilityId;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasTime) {
            Time = other.Time;
          }
          if (other.HasSold) {
            Sold = other.Sold;
          }
          if (other.HasStackcount) {
            Stackcount = other.Stackcount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemAbilityId = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                Time = input.ReadInt32();
                break;
              }
              case 32: {
                Sold = input.ReadBool();
                break;
              }
              case 40: {
                Stackcount = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ItemAbilityId = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                Time = input.ReadInt32();
                break;
              }
              case 32: {
                Sold = input.ReadBool();
                break;
              }
              case 40: {
                Stackcount = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AbilityDetails : pb::IMessage<AbilityDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AbilityDetails> _parser = new pb::MessageParser<AbilityDetails>(() => new AbilityDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AbilityDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityDetails(AbilityDetails other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          name_ = other.name_;
          level_ = other.level_;
          cooldown_ = other.cooldown_;
          cooldownMax_ = other.cooldownMax_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityDetails Clone() {
          return new AbilityDetails(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static int IdDefaultValue = -1;

        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 3;
        private readonly static uint LevelDefaultValue = 0;

        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { if ((_hasBits0 & 2) != 0) { return level_; } else { return LevelDefaultValue; } }
          set {
            _hasBits0 |= 2;
            level_ = value;
          }
        }
        /// <summary>Gets whether the "level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLevel {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLevel() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "cooldown" field.</summary>
        public const int CooldownFieldNumber = 4;
        private readonly static float CooldownDefaultValue = 0F;

        private float cooldown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Cooldown {
          get { if ((_hasBits0 & 4) != 0) { return cooldown_; } else { return CooldownDefaultValue; } }
          set {
            _hasBits0 |= 4;
            cooldown_ = value;
          }
        }
        /// <summary>Gets whether the "cooldown" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCooldown {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "cooldown" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCooldown() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "cooldown_max" field.</summary>
        public const int CooldownMaxFieldNumber = 5;
        private readonly static float CooldownMaxDefaultValue = 0F;

        private float cooldownMax_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CooldownMax {
          get { if ((_hasBits0 & 8) != 0) { return cooldownMax_; } else { return CooldownMaxDefaultValue; } }
          set {
            _hasBits0 |= 8;
            cooldownMax_ = value;
          }
        }
        /// <summary>Gets whether the "cooldown_max" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCooldownMax {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "cooldown_max" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCooldownMax() {
          _hasBits0 &= ~8;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AbilityDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AbilityDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (Level != other.Level) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cooldown, other.Cooldown)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CooldownMax, other.CooldownMax)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (HasLevel) hash ^= Level.GetHashCode();
          if (HasCooldown) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cooldown);
          if (HasCooldownMax) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CooldownMax);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasLevel) {
            output.WriteRawTag(24);
            output.WriteUInt32(Level);
          }
          if (HasCooldown) {
            output.WriteRawTag(37);
            output.WriteFloat(Cooldown);
          }
          if (HasCooldownMax) {
            output.WriteRawTag(45);
            output.WriteFloat(CooldownMax);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasLevel) {
            output.WriteRawTag(24);
            output.WriteUInt32(Level);
          }
          if (HasCooldown) {
            output.WriteRawTag(37);
            output.WriteFloat(Cooldown);
          }
          if (HasCooldownMax) {
            output.WriteRawTag(45);
            output.WriteFloat(CooldownMax);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasLevel) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (HasCooldown) {
            size += 1 + 4;
          }
          if (HasCooldownMax) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AbilityDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasLevel) {
            Level = other.Level;
          }
          if (other.HasCooldown) {
            Cooldown = other.Cooldown;
          }
          if (other.HasCooldownMax) {
            CooldownMax = other.CooldownMax;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                Level = input.ReadUInt32();
                break;
              }
              case 37: {
                Cooldown = input.ReadFloat();
                break;
              }
              case 45: {
                CooldownMax = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                Level = input.ReadUInt32();
                break;
              }
              case 37: {
                Cooldown = input.ReadFloat();
                break;
              }
              case 45: {
                CooldownMax = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class HeroToHeroStats : pb::IMessage<HeroToHeroStats>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<HeroToHeroStats> _parser = new pb::MessageParser<HeroToHeroStats>(() => new HeroToHeroStats());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HeroToHeroStats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroToHeroStats() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroToHeroStats(HeroToHeroStats other) : this() {
          _hasBits0 = other._hasBits0;
          victimid_ = other.victimid_;
          kills_ = other.kills_;
          assists_ = other.assists_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroToHeroStats Clone() {
          return new HeroToHeroStats(this);
        }

        /// <summary>Field number for the "victimid" field.</summary>
        public const int VictimidFieldNumber = 1;
        private readonly static int VictimidDefaultValue = -1;

        private int victimid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Victimid {
          get { if ((_hasBits0 & 1) != 0) { return victimid_; } else { return VictimidDefaultValue; } }
          set {
            _hasBits0 |= 1;
            victimid_ = value;
          }
        }
        /// <summary>Gets whether the "victimid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVictimid {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "victimid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVictimid() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 2;
        private readonly static uint KillsDefaultValue = 0;

        private uint kills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Kills {
          get { if ((_hasBits0 & 2) != 0) { return kills_; } else { return KillsDefaultValue; } }
          set {
            _hasBits0 |= 2;
            kills_ = value;
          }
        }
        /// <summary>Gets whether the "kills" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKills {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "kills" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKills() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "assists" field.</summary>
        public const int AssistsFieldNumber = 3;
        private readonly static uint AssistsDefaultValue = 0;

        private uint assists_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Assists {
          get { if ((_hasBits0 & 4) != 0) { return assists_; } else { return AssistsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            assists_ = value;
          }
        }
        /// <summary>Gets whether the "assists" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAssists {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "assists" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAssists() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HeroToHeroStats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HeroToHeroStats other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Victimid != other.Victimid) return false;
          if (Kills != other.Kills) return false;
          if (Assists != other.Assists) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasVictimid) hash ^= Victimid.GetHashCode();
          if (HasKills) hash ^= Kills.GetHashCode();
          if (HasAssists) hash ^= Assists.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasVictimid) {
            output.WriteRawTag(8);
            output.WriteInt32(Victimid);
          }
          if (HasKills) {
            output.WriteRawTag(16);
            output.WriteUInt32(Kills);
          }
          if (HasAssists) {
            output.WriteRawTag(24);
            output.WriteUInt32(Assists);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasVictimid) {
            output.WriteRawTag(8);
            output.WriteInt32(Victimid);
          }
          if (HasKills) {
            output.WriteRawTag(16);
            output.WriteUInt32(Kills);
          }
          if (HasAssists) {
            output.WriteRawTag(24);
            output.WriteUInt32(Assists);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasVictimid) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Victimid);
          }
          if (HasKills) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
          }
          if (HasAssists) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HeroToHeroStats other) {
          if (other == null) {
            return;
          }
          if (other.HasVictimid) {
            Victimid = other.Victimid;
          }
          if (other.HasKills) {
            Kills = other.Kills;
          }
          if (other.HasAssists) {
            Assists = other.Assists;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Victimid = input.ReadInt32();
                break;
              }
              case 16: {
                Kills = input.ReadUInt32();
                break;
              }
              case 24: {
                Assists = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Victimid = input.ReadInt32();
                break;
              }
              case 16: {
                Kills = input.ReadUInt32();
                break;
              }
              case 24: {
                Assists = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AbilityList : pb::IMessage<AbilityList>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AbilityList> _parser = new pb::MessageParser<AbilityList>(() => new AbilityList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AbilityList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityList(AbilityList other) : this() {
          id_ = other.id_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityList Clone() {
          return new AbilityList(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private static readonly pb::FieldCodec<int> _repeated_id_codec
            = pb::FieldCodec.ForInt32(8);
        private readonly pbc::RepeatedField<int> id_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Id {
          get { return id_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AbilityList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AbilityList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!id_.Equals(other.id_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= id_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          id_.WriteTo(output, _repeated_id_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          id_.WriteTo(ref output, _repeated_id_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += id_.CalculateSize(_repeated_id_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AbilityList other) {
          if (other == null) {
            return;
          }
          id_.Add(other.id_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                id_.AddEntriesFrom(input, _repeated_id_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 8: {
                id_.AddEntriesFrom(ref input, _repeated_id_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PlayerDetails : pb::IMessage<PlayerDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerDetails> _parser = new pb::MessageParser<PlayerDetails>(() => new PlayerDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        private int _hasBits1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDetails(PlayerDetails other) : this() {
          _hasBits0 = other._hasBits0;
          _hasBits1 = other._hasBits1;
          accountid_ = other.accountid_;
          playerid_ = other.playerid_;
          name_ = other.name_;
          team_ = other.team_;
          heroid_ = other.heroid_;
          healthpoints_ = other.healthpoints_;
          maxhealthpoints_ = other.maxhealthpoints_;
          healthregenrate_ = other.healthregenrate_;
          manapoints_ = other.manapoints_;
          maxmanapoints_ = other.maxmanapoints_;
          manaregenrate_ = other.manaregenrate_;
          baseStrength_ = other.baseStrength_;
          baseAgility_ = other.baseAgility_;
          baseIntelligence_ = other.baseIntelligence_;
          baseArmor_ = other.baseArmor_;
          baseMovespeed_ = other.baseMovespeed_;
          baseDamage_ = other.baseDamage_;
          strength_ = other.strength_;
          agility_ = other.agility_;
          intelligence_ = other.intelligence_;
          armor_ = other.armor_;
          movespeed_ = other.movespeed_;
          damage_ = other.damage_;
          heroDamage_ = other.heroDamage_;
          towerDamage_ = other.towerDamage_;
          abilities_ = other.abilities_.Clone();
          level_ = other.level_;
          killCount_ = other.killCount_;
          deathCount_ = other.deathCount_;
          assistsCount_ = other.assistsCount_;
          deniesCount_ = other.deniesCount_;
          lhCount_ = other.lhCount_;
          heroHealing_ = other.heroHealing_;
          goldPerMin_ = other.goldPerMin_;
          xpPerMin_ = other.xpPerMin_;
          netGold_ = other.netGold_;
          gold_ = other.gold_;
          x_ = other.x_;
          y_ = other.y_;
          respawnTime_ = other.respawnTime_;
          ultimateCooldown_ = other.ultimateCooldown_;
          hasBuyback_ = other.hasBuyback_;
          items_ = other.items_.Clone();
          stashitems_ = other.stashitems_.Clone();
          itemshoppinglist_ = other.itemshoppinglist_.Clone();
          levelpoints_ = other.levelpoints_.Clone();
          heroToHeroStats_ = other.heroToHeroStats_.Clone();
          hasUltimate_ = other.hasUltimate_;
          hasUltimateMana_ = other.hasUltimateMana_;
          teamSlot_ = other.teamSlot_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDetails Clone() {
          return new PlayerDetails(this);
        }

        /// <summary>Field number for the "accountid" field.</summary>
        public const int AccountidFieldNumber = 1;
        private readonly static uint AccountidDefaultValue = 0;

        private uint accountid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Accountid {
          get { if ((_hasBits0 & 1) != 0) { return accountid_; } else { return AccountidDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountid_ = value;
          }
        }
        /// <summary>Gets whether the "accountid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountid {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "accountid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountid() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "playerid" field.</summary>
        public const int PlayeridFieldNumber = 2;
        private readonly static int PlayeridDefaultValue = -1;

        private int playerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Playerid {
          get { if ((_hasBits0 & 2) != 0) { return playerid_; } else { return PlayeridDefaultValue; } }
          set {
            _hasBits0 |= 2;
            playerid_ = value;
          }
        }
        /// <summary>Gets whether the "playerid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerid {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "playerid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerid() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 4;
        private readonly static uint TeamDefaultValue = 0;

        private uint team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team {
          get { if ((_hasBits0 & 4) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 4;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "heroid" field.</summary>
        public const int HeroidFieldNumber = 5;
        private readonly static int HeroidDefaultValue = 0;

        private int heroid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Heroid {
          get { if ((_hasBits0 & 8) != 0) { return heroid_; } else { return HeroidDefaultValue; } }
          set {
            _hasBits0 |= 8;
            heroid_ = value;
          }
        }
        /// <summary>Gets whether the "heroid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroid {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "heroid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroid() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "healthpoints" field.</summary>
        public const int HealthpointsFieldNumber = 6;
        private readonly static uint HealthpointsDefaultValue = 0;

        private uint healthpoints_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Healthpoints {
          get { if ((_hasBits0 & 16) != 0) { return healthpoints_; } else { return HealthpointsDefaultValue; } }
          set {
            _hasBits0 |= 16;
            healthpoints_ = value;
          }
        }
        /// <summary>Gets whether the "healthpoints" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHealthpoints {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "healthpoints" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHealthpoints() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "maxhealthpoints" field.</summary>
        public const int MaxhealthpointsFieldNumber = 7;
        private readonly static uint MaxhealthpointsDefaultValue = 0;

        private uint maxhealthpoints_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Maxhealthpoints {
          get { if ((_hasBits0 & 32) != 0) { return maxhealthpoints_; } else { return MaxhealthpointsDefaultValue; } }
          set {
            _hasBits0 |= 32;
            maxhealthpoints_ = value;
          }
        }
        /// <summary>Gets whether the "maxhealthpoints" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMaxhealthpoints {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "maxhealthpoints" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMaxhealthpoints() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "healthregenrate" field.</summary>
        public const int HealthregenrateFieldNumber = 8;
        private readonly static float HealthregenrateDefaultValue = 0F;

        private float healthregenrate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Healthregenrate {
          get { if ((_hasBits0 & 64) != 0) { return healthregenrate_; } else { return HealthregenrateDefaultValue; } }
          set {
            _hasBits0 |= 64;
            healthregenrate_ = value;
          }
        }
        /// <summary>Gets whether the "healthregenrate" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHealthregenrate {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "healthregenrate" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHealthregenrate() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "manapoints" field.</summary>
        public const int ManapointsFieldNumber = 9;
        private readonly static uint ManapointsDefaultValue = 0;

        private uint manapoints_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Manapoints {
          get { if ((_hasBits0 & 128) != 0) { return manapoints_; } else { return ManapointsDefaultValue; } }
          set {
            _hasBits0 |= 128;
            manapoints_ = value;
          }
        }
        /// <summary>Gets whether the "manapoints" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasManapoints {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "manapoints" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearManapoints() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "maxmanapoints" field.</summary>
        public const int MaxmanapointsFieldNumber = 10;
        private readonly static uint MaxmanapointsDefaultValue = 0;

        private uint maxmanapoints_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Maxmanapoints {
          get { if ((_hasBits0 & 256) != 0) { return maxmanapoints_; } else { return MaxmanapointsDefaultValue; } }
          set {
            _hasBits0 |= 256;
            maxmanapoints_ = value;
          }
        }
        /// <summary>Gets whether the "maxmanapoints" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMaxmanapoints {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "maxmanapoints" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMaxmanapoints() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "manaregenrate" field.</summary>
        public const int ManaregenrateFieldNumber = 11;
        private readonly static float ManaregenrateDefaultValue = 0F;

        private float manaregenrate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Manaregenrate {
          get { if ((_hasBits0 & 512) != 0) { return manaregenrate_; } else { return ManaregenrateDefaultValue; } }
          set {
            _hasBits0 |= 512;
            manaregenrate_ = value;
          }
        }
        /// <summary>Gets whether the "manaregenrate" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasManaregenrate {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "manaregenrate" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearManaregenrate() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "base_strength" field.</summary>
        public const int BaseStrengthFieldNumber = 12;
        private readonly static uint BaseStrengthDefaultValue = 0;

        private uint baseStrength_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BaseStrength {
          get { if ((_hasBits0 & 1024) != 0) { return baseStrength_; } else { return BaseStrengthDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            baseStrength_ = value;
          }
        }
        /// <summary>Gets whether the "base_strength" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBaseStrength {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "base_strength" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBaseStrength() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "base_agility" field.</summary>
        public const int BaseAgilityFieldNumber = 13;
        private readonly static uint BaseAgilityDefaultValue = 0;

        private uint baseAgility_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BaseAgility {
          get { if ((_hasBits0 & 2048) != 0) { return baseAgility_; } else { return BaseAgilityDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            baseAgility_ = value;
          }
        }
        /// <summary>Gets whether the "base_agility" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBaseAgility {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "base_agility" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBaseAgility() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "base_intelligence" field.</summary>
        public const int BaseIntelligenceFieldNumber = 14;
        private readonly static uint BaseIntelligenceDefaultValue = 0;

        private uint baseIntelligence_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BaseIntelligence {
          get { if ((_hasBits0 & 4096) != 0) { return baseIntelligence_; } else { return BaseIntelligenceDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            baseIntelligence_ = value;
          }
        }
        /// <summary>Gets whether the "base_intelligence" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBaseIntelligence {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "base_intelligence" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBaseIntelligence() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "base_armor" field.</summary>
        public const int BaseArmorFieldNumber = 15;
        private readonly static int BaseArmorDefaultValue = 0;

        private int baseArmor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BaseArmor {
          get { if ((_hasBits0 & 8192) != 0) { return baseArmor_; } else { return BaseArmorDefaultValue; } }
          set {
            _hasBits0 |= 8192;
            baseArmor_ = value;
          }
        }
        /// <summary>Gets whether the "base_armor" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBaseArmor {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "base_armor" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBaseArmor() {
          _hasBits0 &= ~8192;
        }

        /// <summary>Field number for the "base_movespeed" field.</summary>
        public const int BaseMovespeedFieldNumber = 16;
        private readonly static uint BaseMovespeedDefaultValue = 0;

        private uint baseMovespeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BaseMovespeed {
          get { if ((_hasBits0 & 16384) != 0) { return baseMovespeed_; } else { return BaseMovespeedDefaultValue; } }
          set {
            _hasBits0 |= 16384;
            baseMovespeed_ = value;
          }
        }
        /// <summary>Gets whether the "base_movespeed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBaseMovespeed {
          get { return (_hasBits0 & 16384) != 0; }
        }
        /// <summary>Clears the value of the "base_movespeed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBaseMovespeed() {
          _hasBits0 &= ~16384;
        }

        /// <summary>Field number for the "base_damage" field.</summary>
        public const int BaseDamageFieldNumber = 17;
        private readonly static uint BaseDamageDefaultValue = 0;

        private uint baseDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BaseDamage {
          get { if ((_hasBits0 & 32768) != 0) { return baseDamage_; } else { return BaseDamageDefaultValue; } }
          set {
            _hasBits0 |= 32768;
            baseDamage_ = value;
          }
        }
        /// <summary>Gets whether the "base_damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBaseDamage {
          get { return (_hasBits0 & 32768) != 0; }
        }
        /// <summary>Clears the value of the "base_damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBaseDamage() {
          _hasBits0 &= ~32768;
        }

        /// <summary>Field number for the "strength" field.</summary>
        public const int StrengthFieldNumber = 18;
        private readonly static uint StrengthDefaultValue = 0;

        private uint strength_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Strength {
          get { if ((_hasBits0 & 65536) != 0) { return strength_; } else { return StrengthDefaultValue; } }
          set {
            _hasBits0 |= 65536;
            strength_ = value;
          }
        }
        /// <summary>Gets whether the "strength" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStrength {
          get { return (_hasBits0 & 65536) != 0; }
        }
        /// <summary>Clears the value of the "strength" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStrength() {
          _hasBits0 &= ~65536;
        }

        /// <summary>Field number for the "agility" field.</summary>
        public const int AgilityFieldNumber = 19;
        private readonly static uint AgilityDefaultValue = 0;

        private uint agility_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Agility {
          get { if ((_hasBits0 & 131072) != 0) { return agility_; } else { return AgilityDefaultValue; } }
          set {
            _hasBits0 |= 131072;
            agility_ = value;
          }
        }
        /// <summary>Gets whether the "agility" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAgility {
          get { return (_hasBits0 & 131072) != 0; }
        }
        /// <summary>Clears the value of the "agility" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAgility() {
          _hasBits0 &= ~131072;
        }

        /// <summary>Field number for the "intelligence" field.</summary>
        public const int IntelligenceFieldNumber = 20;
        private readonly static uint IntelligenceDefaultValue = 0;

        private uint intelligence_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Intelligence {
          get { if ((_hasBits0 & 262144) != 0) { return intelligence_; } else { return IntelligenceDefaultValue; } }
          set {
            _hasBits0 |= 262144;
            intelligence_ = value;
          }
        }
        /// <summary>Gets whether the "intelligence" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIntelligence {
          get { return (_hasBits0 & 262144) != 0; }
        }
        /// <summary>Clears the value of the "intelligence" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIntelligence() {
          _hasBits0 &= ~262144;
        }

        /// <summary>Field number for the "armor" field.</summary>
        public const int ArmorFieldNumber = 21;
        private readonly static int ArmorDefaultValue = 0;

        private int armor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Armor {
          get { if ((_hasBits0 & 524288) != 0) { return armor_; } else { return ArmorDefaultValue; } }
          set {
            _hasBits0 |= 524288;
            armor_ = value;
          }
        }
        /// <summary>Gets whether the "armor" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasArmor {
          get { return (_hasBits0 & 524288) != 0; }
        }
        /// <summary>Clears the value of the "armor" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearArmor() {
          _hasBits0 &= ~524288;
        }

        /// <summary>Field number for the "movespeed" field.</summary>
        public const int MovespeedFieldNumber = 22;
        private readonly static uint MovespeedDefaultValue = 0;

        private uint movespeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Movespeed {
          get { if ((_hasBits0 & 1048576) != 0) { return movespeed_; } else { return MovespeedDefaultValue; } }
          set {
            _hasBits0 |= 1048576;
            movespeed_ = value;
          }
        }
        /// <summary>Gets whether the "movespeed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMovespeed {
          get { return (_hasBits0 & 1048576) != 0; }
        }
        /// <summary>Clears the value of the "movespeed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMovespeed() {
          _hasBits0 &= ~1048576;
        }

        /// <summary>Field number for the "damage" field.</summary>
        public const int DamageFieldNumber = 23;
        private readonly static uint DamageDefaultValue = 0;

        private uint damage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Damage {
          get { if ((_hasBits0 & 2097152) != 0) { return damage_; } else { return DamageDefaultValue; } }
          set {
            _hasBits0 |= 2097152;
            damage_ = value;
          }
        }
        /// <summary>Gets whether the "damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDamage {
          get { return (_hasBits0 & 2097152) != 0; }
        }
        /// <summary>Clears the value of the "damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDamage() {
          _hasBits0 &= ~2097152;
        }

        /// <summary>Field number for the "hero_damage" field.</summary>
        public const int HeroDamageFieldNumber = 24;
        private readonly static uint HeroDamageDefaultValue = 0;

        private uint heroDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroDamage {
          get { if ((_hasBits0 & 4194304) != 0) { return heroDamage_; } else { return HeroDamageDefaultValue; } }
          set {
            _hasBits0 |= 4194304;
            heroDamage_ = value;
          }
        }
        /// <summary>Gets whether the "hero_damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroDamage {
          get { return (_hasBits0 & 4194304) != 0; }
        }
        /// <summary>Clears the value of the "hero_damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroDamage() {
          _hasBits0 &= ~4194304;
        }

        /// <summary>Field number for the "tower_damage" field.</summary>
        public const int TowerDamageFieldNumber = 25;
        private readonly static uint TowerDamageDefaultValue = 0;

        private uint towerDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TowerDamage {
          get { if ((_hasBits0 & 8388608) != 0) { return towerDamage_; } else { return TowerDamageDefaultValue; } }
          set {
            _hasBits0 |= 8388608;
            towerDamage_ = value;
          }
        }
        /// <summary>Gets whether the "tower_damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTowerDamage {
          get { return (_hasBits0 & 8388608) != 0; }
        }
        /// <summary>Clears the value of the "tower_damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTowerDamage() {
          _hasBits0 &= ~8388608;
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 26;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityDetails> _repeated_abilities_codec
            = pb::FieldCodec.ForMessage(210, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityDetails> abilities_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityDetails> Abilities {
          get { return abilities_; }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 27;
        private readonly static uint LevelDefaultValue = 0;

        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { if ((_hasBits0 & 16777216) != 0) { return level_; } else { return LevelDefaultValue; } }
          set {
            _hasBits0 |= 16777216;
            level_ = value;
          }
        }
        /// <summary>Gets whether the "level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLevel {
          get { return (_hasBits0 & 16777216) != 0; }
        }
        /// <summary>Clears the value of the "level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLevel() {
          _hasBits0 &= ~16777216;
        }

        /// <summary>Field number for the "kill_count" field.</summary>
        public const int KillCountFieldNumber = 28;
        private readonly static uint KillCountDefaultValue = 0;

        private uint killCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint KillCount {
          get { if ((_hasBits0 & 33554432) != 0) { return killCount_; } else { return KillCountDefaultValue; } }
          set {
            _hasBits0 |= 33554432;
            killCount_ = value;
          }
        }
        /// <summary>Gets whether the "kill_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKillCount {
          get { return (_hasBits0 & 33554432) != 0; }
        }
        /// <summary>Clears the value of the "kill_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKillCount() {
          _hasBits0 &= ~33554432;
        }

        /// <summary>Field number for the "death_count" field.</summary>
        public const int DeathCountFieldNumber = 29;
        private readonly static uint DeathCountDefaultValue = 0;

        private uint deathCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DeathCount {
          get { if ((_hasBits0 & 67108864) != 0) { return deathCount_; } else { return DeathCountDefaultValue; } }
          set {
            _hasBits0 |= 67108864;
            deathCount_ = value;
          }
        }
        /// <summary>Gets whether the "death_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeathCount {
          get { return (_hasBits0 & 67108864) != 0; }
        }
        /// <summary>Clears the value of the "death_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeathCount() {
          _hasBits0 &= ~67108864;
        }

        /// <summary>Field number for the "assists_count" field.</summary>
        public const int AssistsCountFieldNumber = 30;
        private readonly static uint AssistsCountDefaultValue = 0;

        private uint assistsCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AssistsCount {
          get { if ((_hasBits0 & 134217728) != 0) { return assistsCount_; } else { return AssistsCountDefaultValue; } }
          set {
            _hasBits0 |= 134217728;
            assistsCount_ = value;
          }
        }
        /// <summary>Gets whether the "assists_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAssistsCount {
          get { return (_hasBits0 & 134217728) != 0; }
        }
        /// <summary>Clears the value of the "assists_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAssistsCount() {
          _hasBits0 &= ~134217728;
        }

        /// <summary>Field number for the "denies_count" field.</summary>
        public const int DeniesCountFieldNumber = 31;
        private readonly static uint DeniesCountDefaultValue = 0;

        private uint deniesCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DeniesCount {
          get { if ((_hasBits0 & 268435456) != 0) { return deniesCount_; } else { return DeniesCountDefaultValue; } }
          set {
            _hasBits0 |= 268435456;
            deniesCount_ = value;
          }
        }
        /// <summary>Gets whether the "denies_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeniesCount {
          get { return (_hasBits0 & 268435456) != 0; }
        }
        /// <summary>Clears the value of the "denies_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeniesCount() {
          _hasBits0 &= ~268435456;
        }

        /// <summary>Field number for the "lh_count" field.</summary>
        public const int LhCountFieldNumber = 32;
        private readonly static uint LhCountDefaultValue = 0;

        private uint lhCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LhCount {
          get { if ((_hasBits0 & 536870912) != 0) { return lhCount_; } else { return LhCountDefaultValue; } }
          set {
            _hasBits0 |= 536870912;
            lhCount_ = value;
          }
        }
        /// <summary>Gets whether the "lh_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLhCount {
          get { return (_hasBits0 & 536870912) != 0; }
        }
        /// <summary>Clears the value of the "lh_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLhCount() {
          _hasBits0 &= ~536870912;
        }

        /// <summary>Field number for the "hero_healing" field.</summary>
        public const int HeroHealingFieldNumber = 33;
        private readonly static uint HeroHealingDefaultValue = 0;

        private uint heroHealing_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroHealing {
          get { if ((_hasBits0 & 1073741824) != 0) { return heroHealing_; } else { return HeroHealingDefaultValue; } }
          set {
            _hasBits0 |= 1073741824;
            heroHealing_ = value;
          }
        }
        /// <summary>Gets whether the "hero_healing" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroHealing {
          get { return (_hasBits0 & 1073741824) != 0; }
        }
        /// <summary>Clears the value of the "hero_healing" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroHealing() {
          _hasBits0 &= ~1073741824;
        }

        /// <summary>Field number for the "gold_per_min" field.</summary>
        public const int GoldPerMinFieldNumber = 34;
        private readonly static uint GoldPerMinDefaultValue = 0;

        private uint goldPerMin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GoldPerMin {
          get { if ((_hasBits0 & -2147483648) != 0) { return goldPerMin_; } else { return GoldPerMinDefaultValue; } }
          set {
            _hasBits0 |= -2147483648;
            goldPerMin_ = value;
          }
        }
        /// <summary>Gets whether the "gold_per_min" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGoldPerMin {
          get { return (_hasBits0 & -2147483648) != 0; }
        }
        /// <summary>Clears the value of the "gold_per_min" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGoldPerMin() {
          _hasBits0 &= ~-2147483648;
        }

        /// <summary>Field number for the "xp_per_min" field.</summary>
        public const int XpPerMinFieldNumber = 35;
        private readonly static uint XpPerMinDefaultValue = 0;

        private uint xpPerMin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint XpPerMin {
          get { if ((_hasBits1 & 1) != 0) { return xpPerMin_; } else { return XpPerMinDefaultValue; } }
          set {
            _hasBits1 |= 1;
            xpPerMin_ = value;
          }
        }
        /// <summary>Gets whether the "xp_per_min" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasXpPerMin {
          get { return (_hasBits1 & 1) != 0; }
        }
        /// <summary>Clears the value of the "xp_per_min" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearXpPerMin() {
          _hasBits1 &= ~1;
        }

        /// <summary>Field number for the "net_gold" field.</summary>
        public const int NetGoldFieldNumber = 36;
        private readonly static uint NetGoldDefaultValue = 0;

        private uint netGold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NetGold {
          get { if ((_hasBits1 & 2) != 0) { return netGold_; } else { return NetGoldDefaultValue; } }
          set {
            _hasBits1 |= 2;
            netGold_ = value;
          }
        }
        /// <summary>Gets whether the "net_gold" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNetGold {
          get { return (_hasBits1 & 2) != 0; }
        }
        /// <summary>Clears the value of the "net_gold" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNetGold() {
          _hasBits1 &= ~2;
        }

        /// <summary>Field number for the "gold" field.</summary>
        public const int GoldFieldNumber = 37;
        private readonly static uint GoldDefaultValue = 0;

        private uint gold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Gold {
          get { if ((_hasBits1 & 4) != 0) { return gold_; } else { return GoldDefaultValue; } }
          set {
            _hasBits1 |= 4;
            gold_ = value;
          }
        }
        /// <summary>Gets whether the "gold" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGold {
          get { return (_hasBits1 & 4) != 0; }
        }
        /// <summary>Clears the value of the "gold" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGold() {
          _hasBits1 &= ~4;
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 38;
        private readonly static float XDefaultValue = 0F;

        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { if ((_hasBits1 & 8) != 0) { return x_; } else { return XDefaultValue; } }
          set {
            _hasBits1 |= 8;
            x_ = value;
          }
        }
        /// <summary>Gets whether the "x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasX {
          get { return (_hasBits1 & 8) != 0; }
        }
        /// <summary>Clears the value of the "x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearX() {
          _hasBits1 &= ~8;
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 39;
        private readonly static float YDefaultValue = 0F;

        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { if ((_hasBits1 & 16) != 0) { return y_; } else { return YDefaultValue; } }
          set {
            _hasBits1 |= 16;
            y_ = value;
          }
        }
        /// <summary>Gets whether the "y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasY {
          get { return (_hasBits1 & 16) != 0; }
        }
        /// <summary>Clears the value of the "y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearY() {
          _hasBits1 &= ~16;
        }

        /// <summary>Field number for the "respawn_time" field.</summary>
        public const int RespawnTimeFieldNumber = 40;
        private readonly static int RespawnTimeDefaultValue = 0;

        private int respawnTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RespawnTime {
          get { if ((_hasBits1 & 32) != 0) { return respawnTime_; } else { return RespawnTimeDefaultValue; } }
          set {
            _hasBits1 |= 32;
            respawnTime_ = value;
          }
        }
        /// <summary>Gets whether the "respawn_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRespawnTime {
          get { return (_hasBits1 & 32) != 0; }
        }
        /// <summary>Clears the value of the "respawn_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRespawnTime() {
          _hasBits1 &= ~32;
        }

        /// <summary>Field number for the "ultimate_cooldown" field.</summary>
        public const int UltimateCooldownFieldNumber = 41;
        private readonly static uint UltimateCooldownDefaultValue = 0;

        private uint ultimateCooldown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UltimateCooldown {
          get { if ((_hasBits1 & 64) != 0) { return ultimateCooldown_; } else { return UltimateCooldownDefaultValue; } }
          set {
            _hasBits1 |= 64;
            ultimateCooldown_ = value;
          }
        }
        /// <summary>Gets whether the "ultimate_cooldown" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUltimateCooldown {
          get { return (_hasBits1 & 64) != 0; }
        }
        /// <summary>Clears the value of the "ultimate_cooldown" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUltimateCooldown() {
          _hasBits1 &= ~64;
        }

        /// <summary>Field number for the "has_buyback" field.</summary>
        public const int HasBuybackFieldNumber = 42;
        private readonly static bool HasBuybackDefaultValue = false;

        private bool hasBuyback_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuyback {
          get { if ((_hasBits1 & 128) != 0) { return hasBuyback_; } else { return HasBuybackDefaultValue; } }
          set {
            _hasBits1 |= 128;
            hasBuyback_ = value;
          }
        }
        /// <summary>Gets whether the "has_buyback" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasBuyback {
          get { return (_hasBits1 & 128) != 0; }
        }
        /// <summary>Clears the value of the "has_buyback" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasBuyback() {
          _hasBits1 &= ~128;
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 43;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails> _repeated_items_codec
            = pb::FieldCodec.ForMessage(346, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails> items_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails> Items {
          get { return items_; }
        }

        /// <summary>Field number for the "stashitems" field.</summary>
        public const int StashitemsFieldNumber = 44;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails> _repeated_stashitems_codec
            = pb::FieldCodec.ForMessage(354, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails> stashitems_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails> Stashitems {
          get { return stashitems_; }
        }

        /// <summary>Field number for the "itemshoppinglist" field.</summary>
        public const int ItemshoppinglistFieldNumber = 45;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails> _repeated_itemshoppinglist_codec
            = pb::FieldCodec.ForMessage(362, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails> itemshoppinglist_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.ItemDetails> Itemshoppinglist {
          get { return itemshoppinglist_; }
        }

        /// <summary>Field number for the "levelpoints" field.</summary>
        public const int LevelpointsFieldNumber = 46;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityList> _repeated_levelpoints_codec
            = pb::FieldCodec.ForMessage(370, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityList.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityList> levelpoints_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityList>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.AbilityList> Levelpoints {
          get { return levelpoints_; }
        }

        /// <summary>Field number for the "hero_to_hero_stats" field.</summary>
        public const int HeroToHeroStatsFieldNumber = 47;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.HeroToHeroStats> _repeated_heroToHeroStats_codec
            = pb::FieldCodec.ForMessage(378, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.HeroToHeroStats.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.HeroToHeroStats> heroToHeroStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.HeroToHeroStats>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.HeroToHeroStats> HeroToHeroStats {
          get { return heroToHeroStats_; }
        }

        /// <summary>Field number for the "has_ultimate" field.</summary>
        public const int HasUltimateFieldNumber = 48;
        private readonly static bool HasUltimateDefaultValue = false;

        private bool hasUltimate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUltimate {
          get { if ((_hasBits1 & 256) != 0) { return hasUltimate_; } else { return HasUltimateDefaultValue; } }
          set {
            _hasBits1 |= 256;
            hasUltimate_ = value;
          }
        }
        /// <summary>Gets whether the "has_ultimate" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasUltimate {
          get { return (_hasBits1 & 256) != 0; }
        }
        /// <summary>Clears the value of the "has_ultimate" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasUltimate() {
          _hasBits1 &= ~256;
        }

        /// <summary>Field number for the "has_ultimate_mana" field.</summary>
        public const int HasUltimateManaFieldNumber = 49;
        private readonly static bool HasUltimateManaDefaultValue = false;

        private bool hasUltimateMana_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUltimateMana {
          get { if ((_hasBits1 & 512) != 0) { return hasUltimateMana_; } else { return HasUltimateManaDefaultValue; } }
          set {
            _hasBits1 |= 512;
            hasUltimateMana_ = value;
          }
        }
        /// <summary>Gets whether the "has_ultimate_mana" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasUltimateMana {
          get { return (_hasBits1 & 512) != 0; }
        }
        /// <summary>Clears the value of the "has_ultimate_mana" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasUltimateMana() {
          _hasBits1 &= ~512;
        }

        /// <summary>Field number for the "team_slot" field.</summary>
        public const int TeamSlotFieldNumber = 50;
        private readonly static uint TeamSlotDefaultValue = 0;

        private uint teamSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamSlot {
          get { if ((_hasBits1 & 1024) != 0) { return teamSlot_; } else { return TeamSlotDefaultValue; } }
          set {
            _hasBits1 |= 1024;
            teamSlot_ = value;
          }
        }
        /// <summary>Gets whether the "team_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamSlot {
          get { return (_hasBits1 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "team_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamSlot() {
          _hasBits1 &= ~1024;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accountid != other.Accountid) return false;
          if (Playerid != other.Playerid) return false;
          if (Name != other.Name) return false;
          if (Team != other.Team) return false;
          if (Heroid != other.Heroid) return false;
          if (Healthpoints != other.Healthpoints) return false;
          if (Maxhealthpoints != other.Maxhealthpoints) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Healthregenrate, other.Healthregenrate)) return false;
          if (Manapoints != other.Manapoints) return false;
          if (Maxmanapoints != other.Maxmanapoints) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Manaregenrate, other.Manaregenrate)) return false;
          if (BaseStrength != other.BaseStrength) return false;
          if (BaseAgility != other.BaseAgility) return false;
          if (BaseIntelligence != other.BaseIntelligence) return false;
          if (BaseArmor != other.BaseArmor) return false;
          if (BaseMovespeed != other.BaseMovespeed) return false;
          if (BaseDamage != other.BaseDamage) return false;
          if (Strength != other.Strength) return false;
          if (Agility != other.Agility) return false;
          if (Intelligence != other.Intelligence) return false;
          if (Armor != other.Armor) return false;
          if (Movespeed != other.Movespeed) return false;
          if (Damage != other.Damage) return false;
          if (HeroDamage != other.HeroDamage) return false;
          if (TowerDamage != other.TowerDamage) return false;
          if(!abilities_.Equals(other.abilities_)) return false;
          if (Level != other.Level) return false;
          if (KillCount != other.KillCount) return false;
          if (DeathCount != other.DeathCount) return false;
          if (AssistsCount != other.AssistsCount) return false;
          if (DeniesCount != other.DeniesCount) return false;
          if (LhCount != other.LhCount) return false;
          if (HeroHealing != other.HeroHealing) return false;
          if (GoldPerMin != other.GoldPerMin) return false;
          if (XpPerMin != other.XpPerMin) return false;
          if (NetGold != other.NetGold) return false;
          if (Gold != other.Gold) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (RespawnTime != other.RespawnTime) return false;
          if (UltimateCooldown != other.UltimateCooldown) return false;
          if (HasBuyback != other.HasBuyback) return false;
          if(!items_.Equals(other.items_)) return false;
          if(!stashitems_.Equals(other.stashitems_)) return false;
          if(!itemshoppinglist_.Equals(other.itemshoppinglist_)) return false;
          if(!levelpoints_.Equals(other.levelpoints_)) return false;
          if(!heroToHeroStats_.Equals(other.heroToHeroStats_)) return false;
          if (HasUltimate != other.HasUltimate) return false;
          if (HasUltimateMana != other.HasUltimateMana) return false;
          if (TeamSlot != other.TeamSlot) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountid) hash ^= Accountid.GetHashCode();
          if (HasPlayerid) hash ^= Playerid.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (HasTeam) hash ^= Team.GetHashCode();
          if (HasHeroid) hash ^= Heroid.GetHashCode();
          if (HasHealthpoints) hash ^= Healthpoints.GetHashCode();
          if (HasMaxhealthpoints) hash ^= Maxhealthpoints.GetHashCode();
          if (HasHealthregenrate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Healthregenrate);
          if (HasManapoints) hash ^= Manapoints.GetHashCode();
          if (HasMaxmanapoints) hash ^= Maxmanapoints.GetHashCode();
          if (HasManaregenrate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Manaregenrate);
          if (HasBaseStrength) hash ^= BaseStrength.GetHashCode();
          if (HasBaseAgility) hash ^= BaseAgility.GetHashCode();
          if (HasBaseIntelligence) hash ^= BaseIntelligence.GetHashCode();
          if (HasBaseArmor) hash ^= BaseArmor.GetHashCode();
          if (HasBaseMovespeed) hash ^= BaseMovespeed.GetHashCode();
          if (HasBaseDamage) hash ^= BaseDamage.GetHashCode();
          if (HasStrength) hash ^= Strength.GetHashCode();
          if (HasAgility) hash ^= Agility.GetHashCode();
          if (HasIntelligence) hash ^= Intelligence.GetHashCode();
          if (HasArmor) hash ^= Armor.GetHashCode();
          if (HasMovespeed) hash ^= Movespeed.GetHashCode();
          if (HasDamage) hash ^= Damage.GetHashCode();
          if (HasHeroDamage) hash ^= HeroDamage.GetHashCode();
          if (HasTowerDamage) hash ^= TowerDamage.GetHashCode();
          hash ^= abilities_.GetHashCode();
          if (HasLevel) hash ^= Level.GetHashCode();
          if (HasKillCount) hash ^= KillCount.GetHashCode();
          if (HasDeathCount) hash ^= DeathCount.GetHashCode();
          if (HasAssistsCount) hash ^= AssistsCount.GetHashCode();
          if (HasDeniesCount) hash ^= DeniesCount.GetHashCode();
          if (HasLhCount) hash ^= LhCount.GetHashCode();
          if (HasHeroHealing) hash ^= HeroHealing.GetHashCode();
          if (HasGoldPerMin) hash ^= GoldPerMin.GetHashCode();
          if (HasXpPerMin) hash ^= XpPerMin.GetHashCode();
          if (HasNetGold) hash ^= NetGold.GetHashCode();
          if (HasGold) hash ^= Gold.GetHashCode();
          if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (HasRespawnTime) hash ^= RespawnTime.GetHashCode();
          if (HasUltimateCooldown) hash ^= UltimateCooldown.GetHashCode();
          if (HasHasBuyback) hash ^= HasBuyback.GetHashCode();
          hash ^= items_.GetHashCode();
          hash ^= stashitems_.GetHashCode();
          hash ^= itemshoppinglist_.GetHashCode();
          hash ^= levelpoints_.GetHashCode();
          hash ^= heroToHeroStats_.GetHashCode();
          if (HasHasUltimate) hash ^= HasUltimate.GetHashCode();
          if (HasHasUltimateMana) hash ^= HasUltimateMana.GetHashCode();
          if (HasTeamSlot) hash ^= TeamSlot.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountid) {
            output.WriteRawTag(8);
            output.WriteUInt32(Accountid);
          }
          if (HasPlayerid) {
            output.WriteRawTag(16);
            output.WriteInt32(Playerid);
          }
          if (HasName) {
            output.WriteRawTag(26);
            output.WriteString(Name);
          }
          if (HasTeam) {
            output.WriteRawTag(32);
            output.WriteUInt32(Team);
          }
          if (HasHeroid) {
            output.WriteRawTag(40);
            output.WriteInt32(Heroid);
          }
          if (HasHealthpoints) {
            output.WriteRawTag(48);
            output.WriteUInt32(Healthpoints);
          }
          if (HasMaxhealthpoints) {
            output.WriteRawTag(56);
            output.WriteUInt32(Maxhealthpoints);
          }
          if (HasHealthregenrate) {
            output.WriteRawTag(69);
            output.WriteFloat(Healthregenrate);
          }
          if (HasManapoints) {
            output.WriteRawTag(72);
            output.WriteUInt32(Manapoints);
          }
          if (HasMaxmanapoints) {
            output.WriteRawTag(80);
            output.WriteUInt32(Maxmanapoints);
          }
          if (HasManaregenrate) {
            output.WriteRawTag(93);
            output.WriteFloat(Manaregenrate);
          }
          if (HasBaseStrength) {
            output.WriteRawTag(96);
            output.WriteUInt32(BaseStrength);
          }
          if (HasBaseAgility) {
            output.WriteRawTag(104);
            output.WriteUInt32(BaseAgility);
          }
          if (HasBaseIntelligence) {
            output.WriteRawTag(112);
            output.WriteUInt32(BaseIntelligence);
          }
          if (HasBaseArmor) {
            output.WriteRawTag(120);
            output.WriteInt32(BaseArmor);
          }
          if (HasBaseMovespeed) {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(BaseMovespeed);
          }
          if (HasBaseDamage) {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(BaseDamage);
          }
          if (HasStrength) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(Strength);
          }
          if (HasAgility) {
            output.WriteRawTag(152, 1);
            output.WriteUInt32(Agility);
          }
          if (HasIntelligence) {
            output.WriteRawTag(160, 1);
            output.WriteUInt32(Intelligence);
          }
          if (HasArmor) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(Armor);
          }
          if (HasMovespeed) {
            output.WriteRawTag(176, 1);
            output.WriteUInt32(Movespeed);
          }
          if (HasDamage) {
            output.WriteRawTag(184, 1);
            output.WriteUInt32(Damage);
          }
          if (HasHeroDamage) {
            output.WriteRawTag(192, 1);
            output.WriteUInt32(HeroDamage);
          }
          if (HasTowerDamage) {
            output.WriteRawTag(200, 1);
            output.WriteUInt32(TowerDamage);
          }
          abilities_.WriteTo(output, _repeated_abilities_codec);
          if (HasLevel) {
            output.WriteRawTag(216, 1);
            output.WriteUInt32(Level);
          }
          if (HasKillCount) {
            output.WriteRawTag(224, 1);
            output.WriteUInt32(KillCount);
          }
          if (HasDeathCount) {
            output.WriteRawTag(232, 1);
            output.WriteUInt32(DeathCount);
          }
          if (HasAssistsCount) {
            output.WriteRawTag(240, 1);
            output.WriteUInt32(AssistsCount);
          }
          if (HasDeniesCount) {
            output.WriteRawTag(248, 1);
            output.WriteUInt32(DeniesCount);
          }
          if (HasLhCount) {
            output.WriteRawTag(128, 2);
            output.WriteUInt32(LhCount);
          }
          if (HasHeroHealing) {
            output.WriteRawTag(136, 2);
            output.WriteUInt32(HeroHealing);
          }
          if (HasGoldPerMin) {
            output.WriteRawTag(144, 2);
            output.WriteUInt32(GoldPerMin);
          }
          if (HasXpPerMin) {
            output.WriteRawTag(152, 2);
            output.WriteUInt32(XpPerMin);
          }
          if (HasNetGold) {
            output.WriteRawTag(160, 2);
            output.WriteUInt32(NetGold);
          }
          if (HasGold) {
            output.WriteRawTag(168, 2);
            output.WriteUInt32(Gold);
          }
          if (HasX) {
            output.WriteRawTag(181, 2);
            output.WriteFloat(X);
          }
          if (HasY) {
            output.WriteRawTag(189, 2);
            output.WriteFloat(Y);
          }
          if (HasRespawnTime) {
            output.WriteRawTag(192, 2);
            output.WriteInt32(RespawnTime);
          }
          if (HasUltimateCooldown) {
            output.WriteRawTag(200, 2);
            output.WriteUInt32(UltimateCooldown);
          }
          if (HasHasBuyback) {
            output.WriteRawTag(208, 2);
            output.WriteBool(HasBuyback);
          }
          items_.WriteTo(output, _repeated_items_codec);
          stashitems_.WriteTo(output, _repeated_stashitems_codec);
          itemshoppinglist_.WriteTo(output, _repeated_itemshoppinglist_codec);
          levelpoints_.WriteTo(output, _repeated_levelpoints_codec);
          heroToHeroStats_.WriteTo(output, _repeated_heroToHeroStats_codec);
          if (HasHasUltimate) {
            output.WriteRawTag(128, 3);
            output.WriteBool(HasUltimate);
          }
          if (HasHasUltimateMana) {
            output.WriteRawTag(136, 3);
            output.WriteBool(HasUltimateMana);
          }
          if (HasTeamSlot) {
            output.WriteRawTag(144, 3);
            output.WriteUInt32(TeamSlot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountid) {
            output.WriteRawTag(8);
            output.WriteUInt32(Accountid);
          }
          if (HasPlayerid) {
            output.WriteRawTag(16);
            output.WriteInt32(Playerid);
          }
          if (HasName) {
            output.WriteRawTag(26);
            output.WriteString(Name);
          }
          if (HasTeam) {
            output.WriteRawTag(32);
            output.WriteUInt32(Team);
          }
          if (HasHeroid) {
            output.WriteRawTag(40);
            output.WriteInt32(Heroid);
          }
          if (HasHealthpoints) {
            output.WriteRawTag(48);
            output.WriteUInt32(Healthpoints);
          }
          if (HasMaxhealthpoints) {
            output.WriteRawTag(56);
            output.WriteUInt32(Maxhealthpoints);
          }
          if (HasHealthregenrate) {
            output.WriteRawTag(69);
            output.WriteFloat(Healthregenrate);
          }
          if (HasManapoints) {
            output.WriteRawTag(72);
            output.WriteUInt32(Manapoints);
          }
          if (HasMaxmanapoints) {
            output.WriteRawTag(80);
            output.WriteUInt32(Maxmanapoints);
          }
          if (HasManaregenrate) {
            output.WriteRawTag(93);
            output.WriteFloat(Manaregenrate);
          }
          if (HasBaseStrength) {
            output.WriteRawTag(96);
            output.WriteUInt32(BaseStrength);
          }
          if (HasBaseAgility) {
            output.WriteRawTag(104);
            output.WriteUInt32(BaseAgility);
          }
          if (HasBaseIntelligence) {
            output.WriteRawTag(112);
            output.WriteUInt32(BaseIntelligence);
          }
          if (HasBaseArmor) {
            output.WriteRawTag(120);
            output.WriteInt32(BaseArmor);
          }
          if (HasBaseMovespeed) {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(BaseMovespeed);
          }
          if (HasBaseDamage) {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(BaseDamage);
          }
          if (HasStrength) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(Strength);
          }
          if (HasAgility) {
            output.WriteRawTag(152, 1);
            output.WriteUInt32(Agility);
          }
          if (HasIntelligence) {
            output.WriteRawTag(160, 1);
            output.WriteUInt32(Intelligence);
          }
          if (HasArmor) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(Armor);
          }
          if (HasMovespeed) {
            output.WriteRawTag(176, 1);
            output.WriteUInt32(Movespeed);
          }
          if (HasDamage) {
            output.WriteRawTag(184, 1);
            output.WriteUInt32(Damage);
          }
          if (HasHeroDamage) {
            output.WriteRawTag(192, 1);
            output.WriteUInt32(HeroDamage);
          }
          if (HasTowerDamage) {
            output.WriteRawTag(200, 1);
            output.WriteUInt32(TowerDamage);
          }
          abilities_.WriteTo(ref output, _repeated_abilities_codec);
          if (HasLevel) {
            output.WriteRawTag(216, 1);
            output.WriteUInt32(Level);
          }
          if (HasKillCount) {
            output.WriteRawTag(224, 1);
            output.WriteUInt32(KillCount);
          }
          if (HasDeathCount) {
            output.WriteRawTag(232, 1);
            output.WriteUInt32(DeathCount);
          }
          if (HasAssistsCount) {
            output.WriteRawTag(240, 1);
            output.WriteUInt32(AssistsCount);
          }
          if (HasDeniesCount) {
            output.WriteRawTag(248, 1);
            output.WriteUInt32(DeniesCount);
          }
          if (HasLhCount) {
            output.WriteRawTag(128, 2);
            output.WriteUInt32(LhCount);
          }
          if (HasHeroHealing) {
            output.WriteRawTag(136, 2);
            output.WriteUInt32(HeroHealing);
          }
          if (HasGoldPerMin) {
            output.WriteRawTag(144, 2);
            output.WriteUInt32(GoldPerMin);
          }
          if (HasXpPerMin) {
            output.WriteRawTag(152, 2);
            output.WriteUInt32(XpPerMin);
          }
          if (HasNetGold) {
            output.WriteRawTag(160, 2);
            output.WriteUInt32(NetGold);
          }
          if (HasGold) {
            output.WriteRawTag(168, 2);
            output.WriteUInt32(Gold);
          }
          if (HasX) {
            output.WriteRawTag(181, 2);
            output.WriteFloat(X);
          }
          if (HasY) {
            output.WriteRawTag(189, 2);
            output.WriteFloat(Y);
          }
          if (HasRespawnTime) {
            output.WriteRawTag(192, 2);
            output.WriteInt32(RespawnTime);
          }
          if (HasUltimateCooldown) {
            output.WriteRawTag(200, 2);
            output.WriteUInt32(UltimateCooldown);
          }
          if (HasHasBuyback) {
            output.WriteRawTag(208, 2);
            output.WriteBool(HasBuyback);
          }
          items_.WriteTo(ref output, _repeated_items_codec);
          stashitems_.WriteTo(ref output, _repeated_stashitems_codec);
          itemshoppinglist_.WriteTo(ref output, _repeated_itemshoppinglist_codec);
          levelpoints_.WriteTo(ref output, _repeated_levelpoints_codec);
          heroToHeroStats_.WriteTo(ref output, _repeated_heroToHeroStats_codec);
          if (HasHasUltimate) {
            output.WriteRawTag(128, 3);
            output.WriteBool(HasUltimate);
          }
          if (HasHasUltimateMana) {
            output.WriteRawTag(136, 3);
            output.WriteBool(HasUltimateMana);
          }
          if (HasTeamSlot) {
            output.WriteRawTag(144, 3);
            output.WriteUInt32(TeamSlot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountid) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Accountid);
          }
          if (HasPlayerid) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playerid);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
          }
          if (HasHeroid) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heroid);
          }
          if (HasHealthpoints) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Healthpoints);
          }
          if (HasMaxhealthpoints) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxhealthpoints);
          }
          if (HasHealthregenrate) {
            size += 1 + 4;
          }
          if (HasManapoints) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Manapoints);
          }
          if (HasMaxmanapoints) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxmanapoints);
          }
          if (HasManaregenrate) {
            size += 1 + 4;
          }
          if (HasBaseStrength) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseStrength);
          }
          if (HasBaseAgility) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseAgility);
          }
          if (HasBaseIntelligence) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseIntelligence);
          }
          if (HasBaseArmor) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseArmor);
          }
          if (HasBaseMovespeed) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BaseMovespeed);
          }
          if (HasBaseDamage) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BaseDamage);
          }
          if (HasStrength) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Strength);
          }
          if (HasAgility) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Agility);
          }
          if (HasIntelligence) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Intelligence);
          }
          if (HasArmor) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Armor);
          }
          if (HasMovespeed) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Movespeed);
          }
          if (HasDamage) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Damage);
          }
          if (HasHeroDamage) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroDamage);
          }
          if (HasTowerDamage) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TowerDamage);
          }
          size += abilities_.CalculateSize(_repeated_abilities_codec);
          if (HasLevel) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (HasKillCount) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KillCount);
          }
          if (HasDeathCount) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeathCount);
          }
          if (HasAssistsCount) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistsCount);
          }
          if (HasDeniesCount) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeniesCount);
          }
          if (HasLhCount) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LhCount);
          }
          if (HasHeroHealing) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroHealing);
          }
          if (HasGoldPerMin) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GoldPerMin);
          }
          if (HasXpPerMin) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(XpPerMin);
          }
          if (HasNetGold) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetGold);
          }
          if (HasGold) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Gold);
          }
          if (HasX) {
            size += 2 + 4;
          }
          if (HasY) {
            size += 2 + 4;
          }
          if (HasRespawnTime) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RespawnTime);
          }
          if (HasUltimateCooldown) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UltimateCooldown);
          }
          if (HasHasBuyback) {
            size += 2 + 1;
          }
          size += items_.CalculateSize(_repeated_items_codec);
          size += stashitems_.CalculateSize(_repeated_stashitems_codec);
          size += itemshoppinglist_.CalculateSize(_repeated_itemshoppinglist_codec);
          size += levelpoints_.CalculateSize(_repeated_levelpoints_codec);
          size += heroToHeroStats_.CalculateSize(_repeated_heroToHeroStats_codec);
          if (HasHasUltimate) {
            size += 2 + 1;
          }
          if (HasHasUltimateMana) {
            size += 2 + 1;
          }
          if (HasTeamSlot) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeamSlot);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountid) {
            Accountid = other.Accountid;
          }
          if (other.HasPlayerid) {
            Playerid = other.Playerid;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          if (other.HasHeroid) {
            Heroid = other.Heroid;
          }
          if (other.HasHealthpoints) {
            Healthpoints = other.Healthpoints;
          }
          if (other.HasMaxhealthpoints) {
            Maxhealthpoints = other.Maxhealthpoints;
          }
          if (other.HasHealthregenrate) {
            Healthregenrate = other.Healthregenrate;
          }
          if (other.HasManapoints) {
            Manapoints = other.Manapoints;
          }
          if (other.HasMaxmanapoints) {
            Maxmanapoints = other.Maxmanapoints;
          }
          if (other.HasManaregenrate) {
            Manaregenrate = other.Manaregenrate;
          }
          if (other.HasBaseStrength) {
            BaseStrength = other.BaseStrength;
          }
          if (other.HasBaseAgility) {
            BaseAgility = other.BaseAgility;
          }
          if (other.HasBaseIntelligence) {
            BaseIntelligence = other.BaseIntelligence;
          }
          if (other.HasBaseArmor) {
            BaseArmor = other.BaseArmor;
          }
          if (other.HasBaseMovespeed) {
            BaseMovespeed = other.BaseMovespeed;
          }
          if (other.HasBaseDamage) {
            BaseDamage = other.BaseDamage;
          }
          if (other.HasStrength) {
            Strength = other.Strength;
          }
          if (other.HasAgility) {
            Agility = other.Agility;
          }
          if (other.HasIntelligence) {
            Intelligence = other.Intelligence;
          }
          if (other.HasArmor) {
            Armor = other.Armor;
          }
          if (other.HasMovespeed) {
            Movespeed = other.Movespeed;
          }
          if (other.HasDamage) {
            Damage = other.Damage;
          }
          if (other.HasHeroDamage) {
            HeroDamage = other.HeroDamage;
          }
          if (other.HasTowerDamage) {
            TowerDamage = other.TowerDamage;
          }
          abilities_.Add(other.abilities_);
          if (other.HasLevel) {
            Level = other.Level;
          }
          if (other.HasKillCount) {
            KillCount = other.KillCount;
          }
          if (other.HasDeathCount) {
            DeathCount = other.DeathCount;
          }
          if (other.HasAssistsCount) {
            AssistsCount = other.AssistsCount;
          }
          if (other.HasDeniesCount) {
            DeniesCount = other.DeniesCount;
          }
          if (other.HasLhCount) {
            LhCount = other.LhCount;
          }
          if (other.HasHeroHealing) {
            HeroHealing = other.HeroHealing;
          }
          if (other.HasGoldPerMin) {
            GoldPerMin = other.GoldPerMin;
          }
          if (other.HasXpPerMin) {
            XpPerMin = other.XpPerMin;
          }
          if (other.HasNetGold) {
            NetGold = other.NetGold;
          }
          if (other.HasGold) {
            Gold = other.Gold;
          }
          if (other.HasX) {
            X = other.X;
          }
          if (other.HasY) {
            Y = other.Y;
          }
          if (other.HasRespawnTime) {
            RespawnTime = other.RespawnTime;
          }
          if (other.HasUltimateCooldown) {
            UltimateCooldown = other.UltimateCooldown;
          }
          if (other.HasHasBuyback) {
            HasBuyback = other.HasBuyback;
          }
          items_.Add(other.items_);
          stashitems_.Add(other.stashitems_);
          itemshoppinglist_.Add(other.itemshoppinglist_);
          levelpoints_.Add(other.levelpoints_);
          heroToHeroStats_.Add(other.heroToHeroStats_);
          if (other.HasHasUltimate) {
            HasUltimate = other.HasUltimate;
          }
          if (other.HasHasUltimateMana) {
            HasUltimateMana = other.HasUltimateMana;
          }
          if (other.HasTeamSlot) {
            TeamSlot = other.TeamSlot;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Accountid = input.ReadUInt32();
                break;
              }
              case 16: {
                Playerid = input.ReadInt32();
                break;
              }
              case 26: {
                Name = input.ReadString();
                break;
              }
              case 32: {
                Team = input.ReadUInt32();
                break;
              }
              case 40: {
                Heroid = input.ReadInt32();
                break;
              }
              case 48: {
                Healthpoints = input.ReadUInt32();
                break;
              }
              case 56: {
                Maxhealthpoints = input.ReadUInt32();
                break;
              }
              case 69: {
                Healthregenrate = input.ReadFloat();
                break;
              }
              case 72: {
                Manapoints = input.ReadUInt32();
                break;
              }
              case 80: {
                Maxmanapoints = input.ReadUInt32();
                break;
              }
              case 93: {
                Manaregenrate = input.ReadFloat();
                break;
              }
              case 96: {
                BaseStrength = input.ReadUInt32();
                break;
              }
              case 104: {
                BaseAgility = input.ReadUInt32();
                break;
              }
              case 112: {
                BaseIntelligence = input.ReadUInt32();
                break;
              }
              case 120: {
                BaseArmor = input.ReadInt32();
                break;
              }
              case 128: {
                BaseMovespeed = input.ReadUInt32();
                break;
              }
              case 136: {
                BaseDamage = input.ReadUInt32();
                break;
              }
              case 144: {
                Strength = input.ReadUInt32();
                break;
              }
              case 152: {
                Agility = input.ReadUInt32();
                break;
              }
              case 160: {
                Intelligence = input.ReadUInt32();
                break;
              }
              case 168: {
                Armor = input.ReadInt32();
                break;
              }
              case 176: {
                Movespeed = input.ReadUInt32();
                break;
              }
              case 184: {
                Damage = input.ReadUInt32();
                break;
              }
              case 192: {
                HeroDamage = input.ReadUInt32();
                break;
              }
              case 200: {
                TowerDamage = input.ReadUInt32();
                break;
              }
              case 210: {
                abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                break;
              }
              case 216: {
                Level = input.ReadUInt32();
                break;
              }
              case 224: {
                KillCount = input.ReadUInt32();
                break;
              }
              case 232: {
                DeathCount = input.ReadUInt32();
                break;
              }
              case 240: {
                AssistsCount = input.ReadUInt32();
                break;
              }
              case 248: {
                DeniesCount = input.ReadUInt32();
                break;
              }
              case 256: {
                LhCount = input.ReadUInt32();
                break;
              }
              case 264: {
                HeroHealing = input.ReadUInt32();
                break;
              }
              case 272: {
                GoldPerMin = input.ReadUInt32();
                break;
              }
              case 280: {
                XpPerMin = input.ReadUInt32();
                break;
              }
              case 288: {
                NetGold = input.ReadUInt32();
                break;
              }
              case 296: {
                Gold = input.ReadUInt32();
                break;
              }
              case 309: {
                X = input.ReadFloat();
                break;
              }
              case 317: {
                Y = input.ReadFloat();
                break;
              }
              case 320: {
                RespawnTime = input.ReadInt32();
                break;
              }
              case 328: {
                UltimateCooldown = input.ReadUInt32();
                break;
              }
              case 336: {
                HasBuyback = input.ReadBool();
                break;
              }
              case 346: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 354: {
                stashitems_.AddEntriesFrom(input, _repeated_stashitems_codec);
                break;
              }
              case 362: {
                itemshoppinglist_.AddEntriesFrom(input, _repeated_itemshoppinglist_codec);
                break;
              }
              case 370: {
                levelpoints_.AddEntriesFrom(input, _repeated_levelpoints_codec);
                break;
              }
              case 378: {
                heroToHeroStats_.AddEntriesFrom(input, _repeated_heroToHeroStats_codec);
                break;
              }
              case 384: {
                HasUltimate = input.ReadBool();
                break;
              }
              case 392: {
                HasUltimateMana = input.ReadBool();
                break;
              }
              case 400: {
                TeamSlot = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Accountid = input.ReadUInt32();
                break;
              }
              case 16: {
                Playerid = input.ReadInt32();
                break;
              }
              case 26: {
                Name = input.ReadString();
                break;
              }
              case 32: {
                Team = input.ReadUInt32();
                break;
              }
              case 40: {
                Heroid = input.ReadInt32();
                break;
              }
              case 48: {
                Healthpoints = input.ReadUInt32();
                break;
              }
              case 56: {
                Maxhealthpoints = input.ReadUInt32();
                break;
              }
              case 69: {
                Healthregenrate = input.ReadFloat();
                break;
              }
              case 72: {
                Manapoints = input.ReadUInt32();
                break;
              }
              case 80: {
                Maxmanapoints = input.ReadUInt32();
                break;
              }
              case 93: {
                Manaregenrate = input.ReadFloat();
                break;
              }
              case 96: {
                BaseStrength = input.ReadUInt32();
                break;
              }
              case 104: {
                BaseAgility = input.ReadUInt32();
                break;
              }
              case 112: {
                BaseIntelligence = input.ReadUInt32();
                break;
              }
              case 120: {
                BaseArmor = input.ReadInt32();
                break;
              }
              case 128: {
                BaseMovespeed = input.ReadUInt32();
                break;
              }
              case 136: {
                BaseDamage = input.ReadUInt32();
                break;
              }
              case 144: {
                Strength = input.ReadUInt32();
                break;
              }
              case 152: {
                Agility = input.ReadUInt32();
                break;
              }
              case 160: {
                Intelligence = input.ReadUInt32();
                break;
              }
              case 168: {
                Armor = input.ReadInt32();
                break;
              }
              case 176: {
                Movespeed = input.ReadUInt32();
                break;
              }
              case 184: {
                Damage = input.ReadUInt32();
                break;
              }
              case 192: {
                HeroDamage = input.ReadUInt32();
                break;
              }
              case 200: {
                TowerDamage = input.ReadUInt32();
                break;
              }
              case 210: {
                abilities_.AddEntriesFrom(ref input, _repeated_abilities_codec);
                break;
              }
              case 216: {
                Level = input.ReadUInt32();
                break;
              }
              case 224: {
                KillCount = input.ReadUInt32();
                break;
              }
              case 232: {
                DeathCount = input.ReadUInt32();
                break;
              }
              case 240: {
                AssistsCount = input.ReadUInt32();
                break;
              }
              case 248: {
                DeniesCount = input.ReadUInt32();
                break;
              }
              case 256: {
                LhCount = input.ReadUInt32();
                break;
              }
              case 264: {
                HeroHealing = input.ReadUInt32();
                break;
              }
              case 272: {
                GoldPerMin = input.ReadUInt32();
                break;
              }
              case 280: {
                XpPerMin = input.ReadUInt32();
                break;
              }
              case 288: {
                NetGold = input.ReadUInt32();
                break;
              }
              case 296: {
                Gold = input.ReadUInt32();
                break;
              }
              case 309: {
                X = input.ReadFloat();
                break;
              }
              case 317: {
                Y = input.ReadFloat();
                break;
              }
              case 320: {
                RespawnTime = input.ReadInt32();
                break;
              }
              case 328: {
                UltimateCooldown = input.ReadUInt32();
                break;
              }
              case 336: {
                HasBuyback = input.ReadBool();
                break;
              }
              case 346: {
                items_.AddEntriesFrom(ref input, _repeated_items_codec);
                break;
              }
              case 354: {
                stashitems_.AddEntriesFrom(ref input, _repeated_stashitems_codec);
                break;
              }
              case 362: {
                itemshoppinglist_.AddEntriesFrom(ref input, _repeated_itemshoppinglist_codec);
                break;
              }
              case 370: {
                levelpoints_.AddEntriesFrom(ref input, _repeated_levelpoints_codec);
                break;
              }
              case 378: {
                heroToHeroStats_.AddEntriesFrom(ref input, _repeated_heroToHeroStats_codec);
                break;
              }
              case 384: {
                HasUltimate = input.ReadBool();
                break;
              }
              case 392: {
                HasUltimateMana = input.ReadBool();
                break;
              }
              case 400: {
                TeamSlot = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class BuildingDetails : pb::IMessage<BuildingDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BuildingDetails> _parser = new pb::MessageParser<BuildingDetails>(() => new BuildingDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BuildingDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuildingDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuildingDetails(BuildingDetails other) : this() {
          _hasBits0 = other._hasBits0;
          team_ = other.team_;
          heading_ = other.heading_;
          lane_ = other.lane_;
          tier_ = other.tier_;
          type_ = other.type_;
          x_ = other.x_;
          y_ = other.y_;
          destroyed_ = other.destroyed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuildingDetails Clone() {
          return new BuildingDetails(this);
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 2;
        private readonly static uint TeamDefaultValue = 0;

        private uint team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team {
          get { if ((_hasBits0 & 1) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 1;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "heading" field.</summary>
        public const int HeadingFieldNumber = 3;
        private readonly static float HeadingDefaultValue = 0F;

        private float heading_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Heading {
          get { if ((_hasBits0 & 2) != 0) { return heading_; } else { return HeadingDefaultValue; } }
          set {
            _hasBits0 |= 2;
            heading_ = value;
          }
        }
        /// <summary>Gets whether the "heading" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeading {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "heading" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeading() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "lane" field.</summary>
        public const int LaneFieldNumber = 4;
        private readonly static uint LaneDefaultValue = 0;

        private uint lane_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Lane {
          get { if ((_hasBits0 & 4) != 0) { return lane_; } else { return LaneDefaultValue; } }
          set {
            _hasBits0 |= 4;
            lane_ = value;
          }
        }
        /// <summary>Gets whether the "lane" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLane {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "lane" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLane() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "tier" field.</summary>
        public const int TierFieldNumber = 5;
        private readonly static uint TierDefaultValue = 0;

        private uint tier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Tier {
          get { if ((_hasBits0 & 8) != 0) { return tier_; } else { return TierDefaultValue; } }
          set {
            _hasBits0 |= 8;
            tier_ = value;
          }
        }
        /// <summary>Gets whether the "tier" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTier {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "tier" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTier() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 6;
        private readonly static uint TypeDefaultValue = 0;

        private uint type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Type {
          get { if ((_hasBits0 & 16) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 16;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 7;
        private readonly static float XDefaultValue = 0F;

        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { if ((_hasBits0 & 32) != 0) { return x_; } else { return XDefaultValue; } }
          set {
            _hasBits0 |= 32;
            x_ = value;
          }
        }
        /// <summary>Gets whether the "x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasX {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearX() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 8;
        private readonly static float YDefaultValue = 0F;

        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { if ((_hasBits0 & 64) != 0) { return y_; } else { return YDefaultValue; } }
          set {
            _hasBits0 |= 64;
            y_ = value;
          }
        }
        /// <summary>Gets whether the "y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasY {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearY() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "destroyed" field.</summary>
        public const int DestroyedFieldNumber = 9;
        private readonly static bool DestroyedDefaultValue = false;

        private bool destroyed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Destroyed {
          get { if ((_hasBits0 & 128) != 0) { return destroyed_; } else { return DestroyedDefaultValue; } }
          set {
            _hasBits0 |= 128;
            destroyed_ = value;
          }
        }
        /// <summary>Gets whether the "destroyed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDestroyed {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "destroyed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDestroyed() {
          _hasBits0 &= ~128;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BuildingDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BuildingDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Team != other.Team) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Heading, other.Heading)) return false;
          if (Lane != other.Lane) return false;
          if (Tier != other.Tier) return false;
          if (Type != other.Type) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (Destroyed != other.Destroyed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTeam) hash ^= Team.GetHashCode();
          if (HasHeading) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Heading);
          if (HasLane) hash ^= Lane.GetHashCode();
          if (HasTier) hash ^= Tier.GetHashCode();
          if (HasType) hash ^= Type.GetHashCode();
          if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (HasDestroyed) hash ^= Destroyed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasTeam) {
            output.WriteRawTag(16);
            output.WriteUInt32(Team);
          }
          if (HasHeading) {
            output.WriteRawTag(29);
            output.WriteFloat(Heading);
          }
          if (HasLane) {
            output.WriteRawTag(32);
            output.WriteUInt32(Lane);
          }
          if (HasTier) {
            output.WriteRawTag(40);
            output.WriteUInt32(Tier);
          }
          if (HasType) {
            output.WriteRawTag(48);
            output.WriteUInt32(Type);
          }
          if (HasX) {
            output.WriteRawTag(61);
            output.WriteFloat(X);
          }
          if (HasY) {
            output.WriteRawTag(69);
            output.WriteFloat(Y);
          }
          if (HasDestroyed) {
            output.WriteRawTag(72);
            output.WriteBool(Destroyed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasTeam) {
            output.WriteRawTag(16);
            output.WriteUInt32(Team);
          }
          if (HasHeading) {
            output.WriteRawTag(29);
            output.WriteFloat(Heading);
          }
          if (HasLane) {
            output.WriteRawTag(32);
            output.WriteUInt32(Lane);
          }
          if (HasTier) {
            output.WriteRawTag(40);
            output.WriteUInt32(Tier);
          }
          if (HasType) {
            output.WriteRawTag(48);
            output.WriteUInt32(Type);
          }
          if (HasX) {
            output.WriteRawTag(61);
            output.WriteFloat(X);
          }
          if (HasY) {
            output.WriteRawTag(69);
            output.WriteFloat(Y);
          }
          if (HasDestroyed) {
            output.WriteRawTag(72);
            output.WriteBool(Destroyed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
          }
          if (HasHeading) {
            size += 1 + 4;
          }
          if (HasLane) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lane);
          }
          if (HasTier) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tier);
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
          }
          if (HasX) {
            size += 1 + 4;
          }
          if (HasY) {
            size += 1 + 4;
          }
          if (HasDestroyed) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BuildingDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          if (other.HasHeading) {
            Heading = other.Heading;
          }
          if (other.HasLane) {
            Lane = other.Lane;
          }
          if (other.HasTier) {
            Tier = other.Tier;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasX) {
            X = other.X;
          }
          if (other.HasY) {
            Y = other.Y;
          }
          if (other.HasDestroyed) {
            Destroyed = other.Destroyed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 16: {
                Team = input.ReadUInt32();
                break;
              }
              case 29: {
                Heading = input.ReadFloat();
                break;
              }
              case 32: {
                Lane = input.ReadUInt32();
                break;
              }
              case 40: {
                Tier = input.ReadUInt32();
                break;
              }
              case 48: {
                Type = input.ReadUInt32();
                break;
              }
              case 61: {
                X = input.ReadFloat();
                break;
              }
              case 69: {
                Y = input.ReadFloat();
                break;
              }
              case 72: {
                Destroyed = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 16: {
                Team = input.ReadUInt32();
                break;
              }
              case 29: {
                Heading = input.ReadFloat();
                break;
              }
              case 32: {
                Lane = input.ReadUInt32();
                break;
              }
              case 40: {
                Tier = input.ReadUInt32();
                break;
              }
              case 48: {
                Type = input.ReadUInt32();
                break;
              }
              case 61: {
                X = input.ReadFloat();
                break;
              }
              case 69: {
                Y = input.ReadFloat();
                break;
              }
              case 72: {
                Destroyed = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class KillDetails : pb::IMessage<KillDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<KillDetails> _parser = new pb::MessageParser<KillDetails>(() => new KillDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KillDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KillDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KillDetails(KillDetails other) : this() {
          _hasBits0 = other._hasBits0;
          playerId_ = other.playerId_;
          deathTime_ = other.deathTime_;
          killerPlayerId_ = other.killerPlayerId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KillDetails Clone() {
          return new KillDetails(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static int PlayerIdDefaultValue = -1;

        private int playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerId {
          get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            playerId_ = value;
          }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "death_time" field.</summary>
        public const int DeathTimeFieldNumber = 2;
        private readonly static int DeathTimeDefaultValue = 0;

        private int deathTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DeathTime {
          get { if ((_hasBits0 & 2) != 0) { return deathTime_; } else { return DeathTimeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            deathTime_ = value;
          }
        }
        /// <summary>Gets whether the "death_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeathTime {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "death_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeathTime() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "killer_player_id" field.</summary>
        public const int KillerPlayerIdFieldNumber = 3;
        private readonly static int KillerPlayerIdDefaultValue = -1;

        private int killerPlayerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int KillerPlayerId {
          get { if ((_hasBits0 & 4) != 0) { return killerPlayerId_; } else { return KillerPlayerIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            killerPlayerId_ = value;
          }
        }
        /// <summary>Gets whether the "killer_player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKillerPlayerId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "killer_player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKillerPlayerId() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KillDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KillDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerId != other.PlayerId) return false;
          if (DeathTime != other.DeathTime) return false;
          if (KillerPlayerId != other.KillerPlayerId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPlayerId) hash ^= PlayerId.GetHashCode();
          if (HasDeathTime) hash ^= DeathTime.GetHashCode();
          if (HasKillerPlayerId) hash ^= KillerPlayerId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPlayerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerId);
          }
          if (HasDeathTime) {
            output.WriteRawTag(16);
            output.WriteInt32(DeathTime);
          }
          if (HasKillerPlayerId) {
            output.WriteRawTag(24);
            output.WriteInt32(KillerPlayerId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPlayerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerId);
          }
          if (HasDeathTime) {
            output.WriteRawTag(16);
            output.WriteInt32(DeathTime);
          }
          if (HasKillerPlayerId) {
            output.WriteRawTag(24);
            output.WriteInt32(KillerPlayerId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPlayerId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
          }
          if (HasDeathTime) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeathTime);
          }
          if (HasKillerPlayerId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillerPlayerId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KillDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasPlayerId) {
            PlayerId = other.PlayerId;
          }
          if (other.HasDeathTime) {
            DeathTime = other.DeathTime;
          }
          if (other.HasKillerPlayerId) {
            KillerPlayerId = other.KillerPlayerId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerId = input.ReadInt32();
                break;
              }
              case 16: {
                DeathTime = input.ReadInt32();
                break;
              }
              case 24: {
                KillerPlayerId = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerId = input.ReadInt32();
                break;
              }
              case 16: {
                DeathTime = input.ReadInt32();
                break;
              }
              case 24: {
                KillerPlayerId = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class BroadcasterDetails : pb::IMessage<BroadcasterDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BroadcasterDetails> _parser = new pb::MessageParser<BroadcasterDetails>(() => new BroadcasterDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BroadcasterDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterDetails(BroadcasterDetails other) : this() {
          _hasBits0 = other._hasBits0;
          playerId_ = other.playerId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterDetails Clone() {
          return new BroadcasterDetails(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static int PlayerIdDefaultValue = -1;

        private int playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerId {
          get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            playerId_ = value;
          }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BroadcasterDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BroadcasterDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerId != other.PlayerId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPlayerId) hash ^= PlayerId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPlayerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPlayerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPlayerId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BroadcasterDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasPlayerId) {
            PlayerId = other.PlayerId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerId = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerId = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PickBanDetails : pb::IMessage<PickBanDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PickBanDetails> _parser = new pb::MessageParser<PickBanDetails>(() => new PickBanDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PickBanDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickBanDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickBanDetails(PickBanDetails other) : this() {
          _hasBits0 = other._hasBits0;
          hero_ = other.hero_;
          team_ = other.team_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickBanDetails Clone() {
          return new PickBanDetails(this);
        }

        /// <summary>Field number for the "hero" field.</summary>
        public const int HeroFieldNumber = 1;
        private readonly static int HeroDefaultValue = 0;

        private int hero_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Hero {
          get { if ((_hasBits0 & 1) != 0) { return hero_; } else { return HeroDefaultValue; } }
          set {
            _hasBits0 |= 1;
            hero_ = value;
          }
        }
        /// <summary>Gets whether the "hero" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHero {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "hero" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHero() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 2;
        private readonly static uint TeamDefaultValue = 0;

        private uint team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team {
          get { if ((_hasBits0 & 2) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 2;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PickBanDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PickBanDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hero != other.Hero) return false;
          if (Team != other.Team) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasHero) hash ^= Hero.GetHashCode();
          if (HasTeam) hash ^= Team.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasHero) {
            output.WriteRawTag(8);
            output.WriteInt32(Hero);
          }
          if (HasTeam) {
            output.WriteRawTag(16);
            output.WriteUInt32(Team);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasHero) {
            output.WriteRawTag(8);
            output.WriteInt32(Hero);
          }
          if (HasTeam) {
            output.WriteRawTag(16);
            output.WriteUInt32(Team);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasHero) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hero);
          }
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PickBanDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasHero) {
            Hero = other.Hero;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Hero = input.ReadInt32();
                break;
              }
              case 16: {
                Team = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Hero = input.ReadInt32();
                break;
              }
              case 16: {
                Team = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class MatchDetails : pb::IMessage<MatchDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MatchDetails> _parser = new pb::MessageParser<MatchDetails>(() => new MatchDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchDetails(MatchDetails other) : this() {
          _hasBits0 = other._hasBits0;
          serverSteamId_ = other.serverSteamId_;
          matchId_ = other.matchId_;
          timestamp_ = other.timestamp_;
          timeOfDay_ = other.timeOfDay_;
          isNightstalkerNight_ = other.isNightstalkerNight_;
          gameTime_ = other.gameTime_;
          gameState_ = other.gameState_;
          teamidRadiant_ = other.teamidRadiant_;
          teamidDire_ = other.teamidDire_;
          picks_ = other.picks_.Clone();
          bans_ = other.bans_.Clone();
          kills_ = other.kills_.Clone();
          broadcasters_ = other.broadcasters_.Clone();
          gameMode_ = other.gameMode_;
          leagueId_ = other.leagueId_;
          leagueNodeId_ = other.leagueNodeId_;
          singleTeam_ = other.singleTeam_;
          cheersPeak_ = other.cheersPeak_;
          lobbyType_ = other.lobbyType_;
          startTimestamp_ = other.startTimestamp_;
          isPlayerDraft_ = other.isPlayerDraft_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchDetails Clone() {
          return new MatchDetails(this);
        }

        /// <summary>Field number for the "server_steam_id" field.</summary>
        public const int ServerSteamIdFieldNumber = 1;
        private readonly static ulong ServerSteamIdDefaultValue = 0UL;

        private ulong serverSteamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ServerSteamId {
          get { if ((_hasBits0 & 1) != 0) { return serverSteamId_; } else { return ServerSteamIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            serverSteamId_ = value;
          }
        }
        /// <summary>Gets whether the "server_steam_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasServerSteamId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "server_steam_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearServerSteamId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "match_id" field.</summary>
        public const int MatchIdFieldNumber = 2;
        private readonly static ulong MatchIdDefaultValue = 0UL;

        private ulong matchId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong MatchId {
          get { if ((_hasBits0 & 2) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            matchId_ = value;
          }
        }
        /// <summary>Gets whether the "match_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMatchId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "match_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMatchId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 3;
        private readonly static uint TimestampDefaultValue = 0;

        private uint timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Timestamp {
          get { if ((_hasBits0 & 4) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
          set {
            _hasBits0 |= 4;
            timestamp_ = value;
          }
        }
        /// <summary>Gets whether the "timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimestamp {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimestamp() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "time_of_day" field.</summary>
        public const int TimeOfDayFieldNumber = 4;
        private readonly static float TimeOfDayDefaultValue = 0F;

        private float timeOfDay_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float TimeOfDay {
          get { if ((_hasBits0 & 8) != 0) { return timeOfDay_; } else { return TimeOfDayDefaultValue; } }
          set {
            _hasBits0 |= 8;
            timeOfDay_ = value;
          }
        }
        /// <summary>Gets whether the "time_of_day" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimeOfDay {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "time_of_day" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimeOfDay() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "is_nightstalker_night" field.</summary>
        public const int IsNightstalkerNightFieldNumber = 5;
        private readonly static bool IsNightstalkerNightDefaultValue = false;

        private bool isNightstalkerNight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsNightstalkerNight {
          get { if ((_hasBits0 & 16) != 0) { return isNightstalkerNight_; } else { return IsNightstalkerNightDefaultValue; } }
          set {
            _hasBits0 |= 16;
            isNightstalkerNight_ = value;
          }
        }
        /// <summary>Gets whether the "is_nightstalker_night" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsNightstalkerNight {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "is_nightstalker_night" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsNightstalkerNight() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "game_time" field.</summary>
        public const int GameTimeFieldNumber = 6;
        private readonly static int GameTimeDefaultValue = 0;

        private int gameTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GameTime {
          get { if ((_hasBits0 & 32) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
          set {
            _hasBits0 |= 32;
            gameTime_ = value;
          }
        }
        /// <summary>Gets whether the "game_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameTime {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "game_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameTime() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "game_state" field.</summary>
        public const int GameStateFieldNumber = 19;
        private readonly static uint GameStateDefaultValue = 0;

        private uint gameState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameState {
          get { if ((_hasBits0 & 8192) != 0) { return gameState_; } else { return GameStateDefaultValue; } }
          set {
            _hasBits0 |= 8192;
            gameState_ = value;
          }
        }
        /// <summary>Gets whether the "game_state" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameState {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "game_state" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameState() {
          _hasBits0 &= ~8192;
        }

        /// <summary>Field number for the "teamid_radiant" field.</summary>
        public const int TeamidRadiantFieldNumber = 8;
        private readonly static uint TeamidRadiantDefaultValue = 0;

        private uint teamidRadiant_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamidRadiant {
          get { if ((_hasBits0 & 64) != 0) { return teamidRadiant_; } else { return TeamidRadiantDefaultValue; } }
          set {
            _hasBits0 |= 64;
            teamidRadiant_ = value;
          }
        }
        /// <summary>Gets whether the "teamid_radiant" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamidRadiant {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "teamid_radiant" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamidRadiant() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "teamid_dire" field.</summary>
        public const int TeamidDireFieldNumber = 9;
        private readonly static uint TeamidDireDefaultValue = 0;

        private uint teamidDire_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamidDire {
          get { if ((_hasBits0 & 128) != 0) { return teamidDire_; } else { return TeamidDireDefaultValue; } }
          set {
            _hasBits0 |= 128;
            teamidDire_ = value;
          }
        }
        /// <summary>Gets whether the "teamid_dire" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamidDire {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "teamid_dire" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamidDire() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "picks" field.</summary>
        public const int PicksFieldNumber = 10;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails> _repeated_picks_codec
            = pb::FieldCodec.ForMessage(82, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails> picks_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails> Picks {
          get { return picks_; }
        }

        /// <summary>Field number for the "bans" field.</summary>
        public const int BansFieldNumber = 11;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails> _repeated_bans_codec
            = pb::FieldCodec.ForMessage(90, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails> bans_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.PickBanDetails> Bans {
          get { return bans_; }
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 12;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.KillDetails> _repeated_kills_codec
            = pb::FieldCodec.ForMessage(98, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.KillDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.KillDetails> kills_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.KillDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.KillDetails> Kills {
          get { return kills_; }
        }

        /// <summary>Field number for the "broadcasters" field.</summary>
        public const int BroadcastersFieldNumber = 13;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BroadcasterDetails> _repeated_broadcasters_codec
            = pb::FieldCodec.ForMessage(106, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BroadcasterDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BroadcasterDetails> broadcasters_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BroadcasterDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.BroadcasterDetails> Broadcasters {
          get { return broadcasters_; }
        }

        /// <summary>Field number for the "game_mode" field.</summary>
        public const int GameModeFieldNumber = 14;
        private readonly static uint GameModeDefaultValue = 0;

        private uint gameMode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameMode {
          get { if ((_hasBits0 & 256) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
          set {
            _hasBits0 |= 256;
            gameMode_ = value;
          }
        }
        /// <summary>Gets whether the "game_mode" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameMode {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "game_mode" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameMode() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "league_id" field.</summary>
        public const int LeagueIdFieldNumber = 15;
        private readonly static uint LeagueIdDefaultValue = 0;

        private uint leagueId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeagueId {
          get { if ((_hasBits0 & 512) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
          set {
            _hasBits0 |= 512;
            leagueId_ = value;
          }
        }
        /// <summary>Gets whether the "league_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeagueId {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "league_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeagueId() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "league_node_id" field.</summary>
        public const int LeagueNodeIdFieldNumber = 18;
        private readonly static uint LeagueNodeIdDefaultValue = 0;

        private uint leagueNodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeagueNodeId {
          get { if ((_hasBits0 & 4096) != 0) { return leagueNodeId_; } else { return LeagueNodeIdDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            leagueNodeId_ = value;
          }
        }
        /// <summary>Gets whether the "league_node_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeagueNodeId {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "league_node_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeagueNodeId() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "single_team" field.</summary>
        public const int SingleTeamFieldNumber = 16;
        private readonly static bool SingleTeamDefaultValue = false;

        private bool singleTeam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SingleTeam {
          get { if ((_hasBits0 & 1024) != 0) { return singleTeam_; } else { return SingleTeamDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            singleTeam_ = value;
          }
        }
        /// <summary>Gets whether the "single_team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSingleTeam {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "single_team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSingleTeam() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "cheers_peak" field.</summary>
        public const int CheersPeakFieldNumber = 17;
        private readonly static uint CheersPeakDefaultValue = 0;

        private uint cheersPeak_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CheersPeak {
          get { if ((_hasBits0 & 2048) != 0) { return cheersPeak_; } else { return CheersPeakDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            cheersPeak_ = value;
          }
        }
        /// <summary>Gets whether the "cheers_peak" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCheersPeak {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "cheers_peak" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCheersPeak() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "lobby_type" field.</summary>
        public const int LobbyTypeFieldNumber = 20;
        private readonly static uint LobbyTypeDefaultValue = 0;

        private uint lobbyType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LobbyType {
          get { if ((_hasBits0 & 16384) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
          set {
            _hasBits0 |= 16384;
            lobbyType_ = value;
          }
        }
        /// <summary>Gets whether the "lobby_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLobbyType {
          get { return (_hasBits0 & 16384) != 0; }
        }
        /// <summary>Clears the value of the "lobby_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLobbyType() {
          _hasBits0 &= ~16384;
        }

        /// <summary>Field number for the "start_timestamp" field.</summary>
        public const int StartTimestampFieldNumber = 21;
        private readonly static uint StartTimestampDefaultValue = 0;

        private uint startTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartTimestamp {
          get { if ((_hasBits0 & 32768) != 0) { return startTimestamp_; } else { return StartTimestampDefaultValue; } }
          set {
            _hasBits0 |= 32768;
            startTimestamp_ = value;
          }
        }
        /// <summary>Gets whether the "start_timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStartTimestamp {
          get { return (_hasBits0 & 32768) != 0; }
        }
        /// <summary>Clears the value of the "start_timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStartTimestamp() {
          _hasBits0 &= ~32768;
        }

        /// <summary>Field number for the "is_player_draft" field.</summary>
        public const int IsPlayerDraftFieldNumber = 22;
        private readonly static bool IsPlayerDraftDefaultValue = false;

        private bool isPlayerDraft_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsPlayerDraft {
          get { if ((_hasBits0 & 65536) != 0) { return isPlayerDraft_; } else { return IsPlayerDraftDefaultValue; } }
          set {
            _hasBits0 |= 65536;
            isPlayerDraft_ = value;
          }
        }
        /// <summary>Gets whether the "is_player_draft" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsPlayerDraft {
          get { return (_hasBits0 & 65536) != 0; }
        }
        /// <summary>Clears the value of the "is_player_draft" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsPlayerDraft() {
          _hasBits0 &= ~65536;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MatchDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ServerSteamId != other.ServerSteamId) return false;
          if (MatchId != other.MatchId) return false;
          if (Timestamp != other.Timestamp) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeOfDay, other.TimeOfDay)) return false;
          if (IsNightstalkerNight != other.IsNightstalkerNight) return false;
          if (GameTime != other.GameTime) return false;
          if (GameState != other.GameState) return false;
          if (TeamidRadiant != other.TeamidRadiant) return false;
          if (TeamidDire != other.TeamidDire) return false;
          if(!picks_.Equals(other.picks_)) return false;
          if(!bans_.Equals(other.bans_)) return false;
          if(!kills_.Equals(other.kills_)) return false;
          if(!broadcasters_.Equals(other.broadcasters_)) return false;
          if (GameMode != other.GameMode) return false;
          if (LeagueId != other.LeagueId) return false;
          if (LeagueNodeId != other.LeagueNodeId) return false;
          if (SingleTeam != other.SingleTeam) return false;
          if (CheersPeak != other.CheersPeak) return false;
          if (LobbyType != other.LobbyType) return false;
          if (StartTimestamp != other.StartTimestamp) return false;
          if (IsPlayerDraft != other.IsPlayerDraft) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasServerSteamId) hash ^= ServerSteamId.GetHashCode();
          if (HasMatchId) hash ^= MatchId.GetHashCode();
          if (HasTimestamp) hash ^= Timestamp.GetHashCode();
          if (HasTimeOfDay) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeOfDay);
          if (HasIsNightstalkerNight) hash ^= IsNightstalkerNight.GetHashCode();
          if (HasGameTime) hash ^= GameTime.GetHashCode();
          if (HasGameState) hash ^= GameState.GetHashCode();
          if (HasTeamidRadiant) hash ^= TeamidRadiant.GetHashCode();
          if (HasTeamidDire) hash ^= TeamidDire.GetHashCode();
          hash ^= picks_.GetHashCode();
          hash ^= bans_.GetHashCode();
          hash ^= kills_.GetHashCode();
          hash ^= broadcasters_.GetHashCode();
          if (HasGameMode) hash ^= GameMode.GetHashCode();
          if (HasLeagueId) hash ^= LeagueId.GetHashCode();
          if (HasLeagueNodeId) hash ^= LeagueNodeId.GetHashCode();
          if (HasSingleTeam) hash ^= SingleTeam.GetHashCode();
          if (HasCheersPeak) hash ^= CheersPeak.GetHashCode();
          if (HasLobbyType) hash ^= LobbyType.GetHashCode();
          if (HasStartTimestamp) hash ^= StartTimestamp.GetHashCode();
          if (HasIsPlayerDraft) hash ^= IsPlayerDraft.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasServerSteamId) {
            output.WriteRawTag(9);
            output.WriteFixed64(ServerSteamId);
          }
          if (HasMatchId) {
            output.WriteRawTag(16);
            output.WriteUInt64(MatchId);
          }
          if (HasTimestamp) {
            output.WriteRawTag(24);
            output.WriteUInt32(Timestamp);
          }
          if (HasTimeOfDay) {
            output.WriteRawTag(37);
            output.WriteFloat(TimeOfDay);
          }
          if (HasIsNightstalkerNight) {
            output.WriteRawTag(40);
            output.WriteBool(IsNightstalkerNight);
          }
          if (HasGameTime) {
            output.WriteRawTag(48);
            output.WriteInt32(GameTime);
          }
          if (HasTeamidRadiant) {
            output.WriteRawTag(64);
            output.WriteUInt32(TeamidRadiant);
          }
          if (HasTeamidDire) {
            output.WriteRawTag(72);
            output.WriteUInt32(TeamidDire);
          }
          picks_.WriteTo(output, _repeated_picks_codec);
          bans_.WriteTo(output, _repeated_bans_codec);
          kills_.WriteTo(output, _repeated_kills_codec);
          broadcasters_.WriteTo(output, _repeated_broadcasters_codec);
          if (HasGameMode) {
            output.WriteRawTag(112);
            output.WriteUInt32(GameMode);
          }
          if (HasLeagueId) {
            output.WriteRawTag(120);
            output.WriteUInt32(LeagueId);
          }
          if (HasSingleTeam) {
            output.WriteRawTag(128, 1);
            output.WriteBool(SingleTeam);
          }
          if (HasCheersPeak) {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(CheersPeak);
          }
          if (HasLeagueNodeId) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(LeagueNodeId);
          }
          if (HasGameState) {
            output.WriteRawTag(152, 1);
            output.WriteUInt32(GameState);
          }
          if (HasLobbyType) {
            output.WriteRawTag(160, 1);
            output.WriteUInt32(LobbyType);
          }
          if (HasStartTimestamp) {
            output.WriteRawTag(168, 1);
            output.WriteUInt32(StartTimestamp);
          }
          if (HasIsPlayerDraft) {
            output.WriteRawTag(176, 1);
            output.WriteBool(IsPlayerDraft);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasServerSteamId) {
            output.WriteRawTag(9);
            output.WriteFixed64(ServerSteamId);
          }
          if (HasMatchId) {
            output.WriteRawTag(16);
            output.WriteUInt64(MatchId);
          }
          if (HasTimestamp) {
            output.WriteRawTag(24);
            output.WriteUInt32(Timestamp);
          }
          if (HasTimeOfDay) {
            output.WriteRawTag(37);
            output.WriteFloat(TimeOfDay);
          }
          if (HasIsNightstalkerNight) {
            output.WriteRawTag(40);
            output.WriteBool(IsNightstalkerNight);
          }
          if (HasGameTime) {
            output.WriteRawTag(48);
            output.WriteInt32(GameTime);
          }
          if (HasTeamidRadiant) {
            output.WriteRawTag(64);
            output.WriteUInt32(TeamidRadiant);
          }
          if (HasTeamidDire) {
            output.WriteRawTag(72);
            output.WriteUInt32(TeamidDire);
          }
          picks_.WriteTo(ref output, _repeated_picks_codec);
          bans_.WriteTo(ref output, _repeated_bans_codec);
          kills_.WriteTo(ref output, _repeated_kills_codec);
          broadcasters_.WriteTo(ref output, _repeated_broadcasters_codec);
          if (HasGameMode) {
            output.WriteRawTag(112);
            output.WriteUInt32(GameMode);
          }
          if (HasLeagueId) {
            output.WriteRawTag(120);
            output.WriteUInt32(LeagueId);
          }
          if (HasSingleTeam) {
            output.WriteRawTag(128, 1);
            output.WriteBool(SingleTeam);
          }
          if (HasCheersPeak) {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(CheersPeak);
          }
          if (HasLeagueNodeId) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(LeagueNodeId);
          }
          if (HasGameState) {
            output.WriteRawTag(152, 1);
            output.WriteUInt32(GameState);
          }
          if (HasLobbyType) {
            output.WriteRawTag(160, 1);
            output.WriteUInt32(LobbyType);
          }
          if (HasStartTimestamp) {
            output.WriteRawTag(168, 1);
            output.WriteUInt32(StartTimestamp);
          }
          if (HasIsPlayerDraft) {
            output.WriteRawTag(176, 1);
            output.WriteBool(IsPlayerDraft);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasServerSteamId) {
            size += 1 + 8;
          }
          if (HasMatchId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
          }
          if (HasTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
          }
          if (HasTimeOfDay) {
            size += 1 + 4;
          }
          if (HasIsNightstalkerNight) {
            size += 1 + 1;
          }
          if (HasGameTime) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
          }
          if (HasGameState) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GameState);
          }
          if (HasTeamidRadiant) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamidRadiant);
          }
          if (HasTeamidDire) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamidDire);
          }
          size += picks_.CalculateSize(_repeated_picks_codec);
          size += bans_.CalculateSize(_repeated_bans_codec);
          size += kills_.CalculateSize(_repeated_kills_codec);
          size += broadcasters_.CalculateSize(_repeated_broadcasters_codec);
          if (HasGameMode) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameMode);
          }
          if (HasLeagueId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
          }
          if (HasLeagueNodeId) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeagueNodeId);
          }
          if (HasSingleTeam) {
            size += 2 + 1;
          }
          if (HasCheersPeak) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CheersPeak);
          }
          if (HasLobbyType) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LobbyType);
          }
          if (HasStartTimestamp) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StartTimestamp);
          }
          if (HasIsPlayerDraft) {
            size += 2 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasServerSteamId) {
            ServerSteamId = other.ServerSteamId;
          }
          if (other.HasMatchId) {
            MatchId = other.MatchId;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          if (other.HasTimeOfDay) {
            TimeOfDay = other.TimeOfDay;
          }
          if (other.HasIsNightstalkerNight) {
            IsNightstalkerNight = other.IsNightstalkerNight;
          }
          if (other.HasGameTime) {
            GameTime = other.GameTime;
          }
          if (other.HasGameState) {
            GameState = other.GameState;
          }
          if (other.HasTeamidRadiant) {
            TeamidRadiant = other.TeamidRadiant;
          }
          if (other.HasTeamidDire) {
            TeamidDire = other.TeamidDire;
          }
          picks_.Add(other.picks_);
          bans_.Add(other.bans_);
          kills_.Add(other.kills_);
          broadcasters_.Add(other.broadcasters_);
          if (other.HasGameMode) {
            GameMode = other.GameMode;
          }
          if (other.HasLeagueId) {
            LeagueId = other.LeagueId;
          }
          if (other.HasLeagueNodeId) {
            LeagueNodeId = other.LeagueNodeId;
          }
          if (other.HasSingleTeam) {
            SingleTeam = other.SingleTeam;
          }
          if (other.HasCheersPeak) {
            CheersPeak = other.CheersPeak;
          }
          if (other.HasLobbyType) {
            LobbyType = other.LobbyType;
          }
          if (other.HasStartTimestamp) {
            StartTimestamp = other.StartTimestamp;
          }
          if (other.HasIsPlayerDraft) {
            IsPlayerDraft = other.IsPlayerDraft;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                ServerSteamId = input.ReadFixed64();
                break;
              }
              case 16: {
                MatchId = input.ReadUInt64();
                break;
              }
              case 24: {
                Timestamp = input.ReadUInt32();
                break;
              }
              case 37: {
                TimeOfDay = input.ReadFloat();
                break;
              }
              case 40: {
                IsNightstalkerNight = input.ReadBool();
                break;
              }
              case 48: {
                GameTime = input.ReadInt32();
                break;
              }
              case 64: {
                TeamidRadiant = input.ReadUInt32();
                break;
              }
              case 72: {
                TeamidDire = input.ReadUInt32();
                break;
              }
              case 82: {
                picks_.AddEntriesFrom(input, _repeated_picks_codec);
                break;
              }
              case 90: {
                bans_.AddEntriesFrom(input, _repeated_bans_codec);
                break;
              }
              case 98: {
                kills_.AddEntriesFrom(input, _repeated_kills_codec);
                break;
              }
              case 106: {
                broadcasters_.AddEntriesFrom(input, _repeated_broadcasters_codec);
                break;
              }
              case 112: {
                GameMode = input.ReadUInt32();
                break;
              }
              case 120: {
                LeagueId = input.ReadUInt32();
                break;
              }
              case 128: {
                SingleTeam = input.ReadBool();
                break;
              }
              case 136: {
                CheersPeak = input.ReadUInt32();
                break;
              }
              case 144: {
                LeagueNodeId = input.ReadUInt32();
                break;
              }
              case 152: {
                GameState = input.ReadUInt32();
                break;
              }
              case 160: {
                LobbyType = input.ReadUInt32();
                break;
              }
              case 168: {
                StartTimestamp = input.ReadUInt32();
                break;
              }
              case 176: {
                IsPlayerDraft = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                ServerSteamId = input.ReadFixed64();
                break;
              }
              case 16: {
                MatchId = input.ReadUInt64();
                break;
              }
              case 24: {
                Timestamp = input.ReadUInt32();
                break;
              }
              case 37: {
                TimeOfDay = input.ReadFloat();
                break;
              }
              case 40: {
                IsNightstalkerNight = input.ReadBool();
                break;
              }
              case 48: {
                GameTime = input.ReadInt32();
                break;
              }
              case 64: {
                TeamidRadiant = input.ReadUInt32();
                break;
              }
              case 72: {
                TeamidDire = input.ReadUInt32();
                break;
              }
              case 82: {
                picks_.AddEntriesFrom(ref input, _repeated_picks_codec);
                break;
              }
              case 90: {
                bans_.AddEntriesFrom(ref input, _repeated_bans_codec);
                break;
              }
              case 98: {
                kills_.AddEntriesFrom(ref input, _repeated_kills_codec);
                break;
              }
              case 106: {
                broadcasters_.AddEntriesFrom(ref input, _repeated_broadcasters_codec);
                break;
              }
              case 112: {
                GameMode = input.ReadUInt32();
                break;
              }
              case 120: {
                LeagueId = input.ReadUInt32();
                break;
              }
              case 128: {
                SingleTeam = input.ReadBool();
                break;
              }
              case 136: {
                CheersPeak = input.ReadUInt32();
                break;
              }
              case 144: {
                LeagueNodeId = input.ReadUInt32();
                break;
              }
              case 152: {
                GameState = input.ReadUInt32();
                break;
              }
              case 160: {
                LobbyType = input.ReadUInt32();
                break;
              }
              case 168: {
                StartTimestamp = input.ReadUInt32();
                break;
              }
              case 176: {
                IsPlayerDraft = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class GraphData : pb::IMessage<GraphData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GraphData> _parser = new pb::MessageParser<GraphData>(() => new GraphData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GraphData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphData(GraphData other) : this() {
          graphGold_ = other.graphGold_.Clone();
          graphXp_ = other.graphXp_.Clone();
          graphKill_ = other.graphKill_.Clone();
          graphTower_ = other.graphTower_.Clone();
          graphRax_ = other.graphRax_.Clone();
          teamLocStats_ = other.teamLocStats_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphData Clone() {
          return new GraphData(this);
        }

        /// <summary>Field number for the "graph_gold" field.</summary>
        public const int GraphGoldFieldNumber = 1;
        private static readonly pb::FieldCodec<int> _repeated_graphGold_codec
            = pb::FieldCodec.ForInt32(8);
        private readonly pbc::RepeatedField<int> graphGold_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> GraphGold {
          get { return graphGold_; }
        }

        /// <summary>Field number for the "graph_xp" field.</summary>
        public const int GraphXpFieldNumber = 2;
        private static readonly pb::FieldCodec<int> _repeated_graphXp_codec
            = pb::FieldCodec.ForInt32(16);
        private readonly pbc::RepeatedField<int> graphXp_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> GraphXp {
          get { return graphXp_; }
        }

        /// <summary>Field number for the "graph_kill" field.</summary>
        public const int GraphKillFieldNumber = 3;
        private static readonly pb::FieldCodec<int> _repeated_graphKill_codec
            = pb::FieldCodec.ForInt32(24);
        private readonly pbc::RepeatedField<int> graphKill_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> GraphKill {
          get { return graphKill_; }
        }

        /// <summary>Field number for the "graph_tower" field.</summary>
        public const int GraphTowerFieldNumber = 4;
        private static readonly pb::FieldCodec<int> _repeated_graphTower_codec
            = pb::FieldCodec.ForInt32(32);
        private readonly pbc::RepeatedField<int> graphTower_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> GraphTower {
          get { return graphTower_; }
        }

        /// <summary>Field number for the "graph_rax" field.</summary>
        public const int GraphRaxFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_graphRax_codec
            = pb::FieldCodec.ForInt32(40);
        private readonly pbc::RepeatedField<int> graphRax_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> GraphRax {
          get { return graphRax_; }
        }

        /// <summary>Field number for the "team_loc_stats" field.</summary>
        public const int TeamLocStatsFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.TeamLocationStats> _repeated_teamLocStats_codec
            = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.TeamLocationStats.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.TeamLocationStats> teamLocStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.TeamLocationStats>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.TeamLocationStats> TeamLocStats {
          get { return teamLocStats_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GraphData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GraphData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!graphGold_.Equals(other.graphGold_)) return false;
          if(!graphXp_.Equals(other.graphXp_)) return false;
          if(!graphKill_.Equals(other.graphKill_)) return false;
          if(!graphTower_.Equals(other.graphTower_)) return false;
          if(!graphRax_.Equals(other.graphRax_)) return false;
          if(!teamLocStats_.Equals(other.teamLocStats_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= graphGold_.GetHashCode();
          hash ^= graphXp_.GetHashCode();
          hash ^= graphKill_.GetHashCode();
          hash ^= graphTower_.GetHashCode();
          hash ^= graphRax_.GetHashCode();
          hash ^= teamLocStats_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          graphGold_.WriteTo(output, _repeated_graphGold_codec);
          graphXp_.WriteTo(output, _repeated_graphXp_codec);
          graphKill_.WriteTo(output, _repeated_graphKill_codec);
          graphTower_.WriteTo(output, _repeated_graphTower_codec);
          graphRax_.WriteTo(output, _repeated_graphRax_codec);
          teamLocStats_.WriteTo(output, _repeated_teamLocStats_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          graphGold_.WriteTo(ref output, _repeated_graphGold_codec);
          graphXp_.WriteTo(ref output, _repeated_graphXp_codec);
          graphKill_.WriteTo(ref output, _repeated_graphKill_codec);
          graphTower_.WriteTo(ref output, _repeated_graphTower_codec);
          graphRax_.WriteTo(ref output, _repeated_graphRax_codec);
          teamLocStats_.WriteTo(ref output, _repeated_teamLocStats_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += graphGold_.CalculateSize(_repeated_graphGold_codec);
          size += graphXp_.CalculateSize(_repeated_graphXp_codec);
          size += graphKill_.CalculateSize(_repeated_graphKill_codec);
          size += graphTower_.CalculateSize(_repeated_graphTower_codec);
          size += graphRax_.CalculateSize(_repeated_graphRax_codec);
          size += teamLocStats_.CalculateSize(_repeated_teamLocStats_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GraphData other) {
          if (other == null) {
            return;
          }
          graphGold_.Add(other.graphGold_);
          graphXp_.Add(other.graphXp_);
          graphKill_.Add(other.graphKill_);
          graphTower_.Add(other.graphTower_);
          graphRax_.Add(other.graphRax_);
          teamLocStats_.Add(other.teamLocStats_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                graphGold_.AddEntriesFrom(input, _repeated_graphGold_codec);
                break;
              }
              case 18:
              case 16: {
                graphXp_.AddEntriesFrom(input, _repeated_graphXp_codec);
                break;
              }
              case 26:
              case 24: {
                graphKill_.AddEntriesFrom(input, _repeated_graphKill_codec);
                break;
              }
              case 34:
              case 32: {
                graphTower_.AddEntriesFrom(input, _repeated_graphTower_codec);
                break;
              }
              case 42:
              case 40: {
                graphRax_.AddEntriesFrom(input, _repeated_graphRax_codec);
                break;
              }
              case 50: {
                teamLocStats_.AddEntriesFrom(input, _repeated_teamLocStats_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 8: {
                graphGold_.AddEntriesFrom(ref input, _repeated_graphGold_codec);
                break;
              }
              case 18:
              case 16: {
                graphXp_.AddEntriesFrom(ref input, _repeated_graphXp_codec);
                break;
              }
              case 26:
              case 24: {
                graphKill_.AddEntriesFrom(ref input, _repeated_graphKill_codec);
                break;
              }
              case 34:
              case 32: {
                graphTower_.AddEntriesFrom(ref input, _repeated_graphTower_codec);
                break;
              }
              case 42:
              case 40: {
                graphRax_.AddEntriesFrom(ref input, _repeated_graphRax_codec);
                break;
              }
              case 50: {
                teamLocStats_.AddEntriesFrom(ref input, _repeated_teamLocStats_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the GraphData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum eStat {
            [pbr::OriginalName("CreepGoldEarned")] CreepGoldEarned = 0,
            [pbr::OriginalName("KillGoldEarned")] KillGoldEarned = 1,
            [pbr::OriginalName("DeathAndBuybackGoldLost")] DeathAndBuybackGoldLost = 2,
            [pbr::OriginalName("XPEarned")] Xpearned = 3,
          }

          public enum eLocation {
            [pbr::OriginalName("BotLane")] BotLane = 0,
            [pbr::OriginalName("MidLane")] MidLane = 1,
            [pbr::OriginalName("TopLane")] TopLane = 2,
            [pbr::OriginalName("Jungle")] Jungle = 3,
            [pbr::OriginalName("Ancients")] Ancients = 4,
            [pbr::OriginalName("Other")] Other = 5,
          }

          public sealed partial class LocationStats : pb::IMessage<LocationStats>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<LocationStats> _parser = new pb::MessageParser<LocationStats>(() => new LocationStats());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<LocationStats> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LocationStats() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LocationStats(LocationStats other) : this() {
              stats_ = other.stats_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LocationStats Clone() {
              return new LocationStats(this);
            }

            /// <summary>Field number for the "stats" field.</summary>
            public const int StatsFieldNumber = 1;
            private static readonly pb::FieldCodec<int> _repeated_stats_codec
                = pb::FieldCodec.ForInt32(8);
            private readonly pbc::RepeatedField<int> stats_ = new pbc::RepeatedField<int>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<int> Stats {
              get { return stats_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as LocationStats);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(LocationStats other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!stats_.Equals(other.stats_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= stats_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              stats_.WriteTo(output, _repeated_stats_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              stats_.WriteTo(ref output, _repeated_stats_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += stats_.CalculateSize(_repeated_stats_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(LocationStats other) {
              if (other == null) {
                return;
              }
              stats_.Add(other.stats_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    stats_.AddEntriesFrom(input, _repeated_stats_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10:
                  case 8: {
                    stats_.AddEntriesFrom(ref input, _repeated_stats_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class TeamLocationStats : pb::IMessage<TeamLocationStats>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<TeamLocationStats> _parser = new pb::MessageParser<TeamLocationStats>(() => new TeamLocationStats());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TeamLocationStats> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TeamLocationStats() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TeamLocationStats(TeamLocationStats other) : this() {
              locStats_ = other.locStats_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TeamLocationStats Clone() {
              return new TeamLocationStats(this);
            }

            /// <summary>Field number for the "loc_stats" field.</summary>
            public const int LocStatsFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.LocationStats> _repeated_locStats_codec
                = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.LocationStats.Parser);
            private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.LocationStats> locStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.LocationStats>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStats.Types.GraphData.Types.LocationStats> LocStats {
              get { return locStats_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TeamLocationStats);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TeamLocationStats other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!locStats_.Equals(other.locStats_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= locStats_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              locStats_.WriteTo(output, _repeated_locStats_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              locStats_.WriteTo(ref output, _repeated_locStats_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += locStats_.CalculateSize(_repeated_locStats_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TeamLocationStats other) {
              if (other == null) {
                return;
              }
              locStats_.Add(other.locStats_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    locStats_.AddEntriesFrom(input, _repeated_locStats_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    locStats_.AddEntriesFrom(ref input, _repeated_locStats_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CMsgDOTARealtimeGameStatsTerse : pb::IMessage<CMsgDOTARealtimeGameStatsTerse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTARealtimeGameStatsTerse> _parser = new pb::MessageParser<CMsgDOTARealtimeGameStatsTerse>(() => new CMsgDOTARealtimeGameStatsTerse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTARealtimeGameStatsTerse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTARealtimeGameStatsTerse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTARealtimeGameStatsTerse(CMsgDOTARealtimeGameStatsTerse other) : this() {
      _hasBits0 = other._hasBits0;
      match_ = other.match_ != null ? other.match_.Clone() : null;
      teams_ = other.teams_.Clone();
      buildings_ = other.buildings_.Clone();
      graphData_ = other.graphData_ != null ? other.graphData_.Clone() : null;
      deltaFrame_ = other.deltaFrame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTARealtimeGameStatsTerse Clone() {
      return new CMsgDOTARealtimeGameStatsTerse(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.MatchDetails match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.MatchDetails Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.TeamDetails> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.TeamDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.TeamDetails> teams_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.TeamDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.TeamDetails> Teams {
      get { return teams_; }
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int BuildingsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.BuildingDetails> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.BuildingDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.BuildingDetails> buildings_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.BuildingDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.BuildingDetails> Buildings {
      get { return buildings_; }
    }

    /// <summary>Field number for the "graph_data" field.</summary>
    public const int GraphDataFieldNumber = 4;
    private global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.GraphData graphData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.GraphData GraphData {
      get { return graphData_; }
      set {
        graphData_ = value;
      }
    }

    /// <summary>Field number for the "delta_frame" field.</summary>
    public const int DeltaFrameFieldNumber = 5;
    private readonly static bool DeltaFrameDefaultValue = false;

    private bool deltaFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeltaFrame {
      get { if ((_hasBits0 & 1) != 0) { return deltaFrame_; } else { return DeltaFrameDefaultValue; } }
      set {
        _hasBits0 |= 1;
        deltaFrame_ = value;
      }
    }
    /// <summary>Gets whether the "delta_frame" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeltaFrame {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "delta_frame" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeltaFrame() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTARealtimeGameStatsTerse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTARealtimeGameStatsTerse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Match, other.Match)) return false;
      if(!teams_.Equals(other.teams_)) return false;
      if(!buildings_.Equals(other.buildings_)) return false;
      if (!object.Equals(GraphData, other.GraphData)) return false;
      if (DeltaFrame != other.DeltaFrame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (match_ != null) hash ^= Match.GetHashCode();
      hash ^= teams_.GetHashCode();
      hash ^= buildings_.GetHashCode();
      if (graphData_ != null) hash ^= GraphData.GetHashCode();
      if (HasDeltaFrame) hash ^= DeltaFrame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      teams_.WriteTo(output, _repeated_teams_codec);
      buildings_.WriteTo(output, _repeated_buildings_codec);
      if (graphData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GraphData);
      }
      if (HasDeltaFrame) {
        output.WriteRawTag(40);
        output.WriteBool(DeltaFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      teams_.WriteTo(ref output, _repeated_teams_codec);
      buildings_.WriteTo(ref output, _repeated_buildings_codec);
      if (graphData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GraphData);
      }
      if (HasDeltaFrame) {
        output.WriteRawTag(40);
        output.WriteBool(DeltaFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      size += teams_.CalculateSize(_repeated_teams_codec);
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      if (graphData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphData);
      }
      if (HasDeltaFrame) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTARealtimeGameStatsTerse other) {
      if (other == null) {
        return;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          Match = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.MatchDetails();
        }
        Match.MergeFrom(other.Match);
      }
      teams_.Add(other.teams_);
      buildings_.Add(other.buildings_);
      if (other.graphData_ != null) {
        if (graphData_ == null) {
          GraphData = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.GraphData();
        }
        GraphData.MergeFrom(other.GraphData);
      }
      if (other.HasDeltaFrame) {
        DeltaFrame = other.DeltaFrame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (match_ == null) {
              Match = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.MatchDetails();
            }
            input.ReadMessage(Match);
            break;
          }
          case 18: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
          case 26: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
          case 34: {
            if (graphData_ == null) {
              GraphData = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.GraphData();
            }
            input.ReadMessage(GraphData);
            break;
          }
          case 40: {
            DeltaFrame = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (match_ == null) {
              Match = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.MatchDetails();
            }
            input.ReadMessage(Match);
            break;
          }
          case 18: {
            teams_.AddEntriesFrom(ref input, _repeated_teams_codec);
            break;
          }
          case 26: {
            buildings_.AddEntriesFrom(ref input, _repeated_buildings_codec);
            break;
          }
          case 34: {
            if (graphData_ == null) {
              GraphData = new global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.GraphData();
            }
            input.ReadMessage(GraphData);
            break;
          }
          case 40: {
            DeltaFrame = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTARealtimeGameStatsTerse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TeamDetails : pb::IMessage<TeamDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TeamDetails> _parser = new pb::MessageParser<TeamDetails>(() => new TeamDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TeamDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamDetails(TeamDetails other) : this() {
          _hasBits0 = other._hasBits0;
          teamNumber_ = other.teamNumber_;
          teamId_ = other.teamId_;
          teamName_ = other.teamName_;
          teamTag_ = other.teamTag_;
          teamLogo_ = other.teamLogo_;
          score_ = other.score_;
          netWorth_ = other.netWorth_;
          teamLogoUrl_ = other.teamLogoUrl_;
          players_ = other.players_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamDetails Clone() {
          return new TeamDetails(this);
        }

        /// <summary>Field number for the "team_number" field.</summary>
        public const int TeamNumberFieldNumber = 1;
        private readonly static uint TeamNumberDefaultValue = 0;

        private uint teamNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamNumber {
          get { if ((_hasBits0 & 1) != 0) { return teamNumber_; } else { return TeamNumberDefaultValue; } }
          set {
            _hasBits0 |= 1;
            teamNumber_ = value;
          }
        }
        /// <summary>Gets whether the "team_number" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamNumber {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "team_number" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamNumber() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "team_id" field.</summary>
        public const int TeamIdFieldNumber = 2;
        private readonly static uint TeamIdDefaultValue = 0;

        private uint teamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamId {
          get { if ((_hasBits0 & 2) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            teamId_ = value;
          }
        }
        /// <summary>Gets whether the "team_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "team_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "team_name" field.</summary>
        public const int TeamNameFieldNumber = 3;
        private readonly static string TeamNameDefaultValue = "";

        private string teamName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TeamName {
          get { return teamName_ ?? TeamNameDefaultValue; }
          set {
            teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "team_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamName {
          get { return teamName_ != null; }
        }
        /// <summary>Clears the value of the "team_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamName() {
          teamName_ = null;
        }

        /// <summary>Field number for the "team_tag" field.</summary>
        public const int TeamTagFieldNumber = 8;
        private readonly static string TeamTagDefaultValue = "";

        private string teamTag_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TeamTag {
          get { return teamTag_ ?? TeamTagDefaultValue; }
          set {
            teamTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "team_tag" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamTag {
          get { return teamTag_ != null; }
        }
        /// <summary>Clears the value of the "team_tag" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamTag() {
          teamTag_ = null;
        }

        /// <summary>Field number for the "team_logo" field.</summary>
        public const int TeamLogoFieldNumber = 4;
        private readonly static ulong TeamLogoDefaultValue = 0UL;

        private ulong teamLogo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TeamLogo {
          get { if ((_hasBits0 & 4) != 0) { return teamLogo_; } else { return TeamLogoDefaultValue; } }
          set {
            _hasBits0 |= 4;
            teamLogo_ = value;
          }
        }
        /// <summary>Gets whether the "team_logo" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamLogo {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "team_logo" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamLogo() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 5;
        private readonly static uint ScoreDefaultValue = 0;

        private uint score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Score {
          get { if ((_hasBits0 & 8) != 0) { return score_; } else { return ScoreDefaultValue; } }
          set {
            _hasBits0 |= 8;
            score_ = value;
          }
        }
        /// <summary>Gets whether the "score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScore {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScore() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "net_worth" field.</summary>
        public const int NetWorthFieldNumber = 7;
        private readonly static uint NetWorthDefaultValue = 0;

        private uint netWorth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NetWorth {
          get { if ((_hasBits0 & 16) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
          set {
            _hasBits0 |= 16;
            netWorth_ = value;
          }
        }
        /// <summary>Gets whether the "net_worth" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNetWorth {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "net_worth" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNetWorth() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "team_logo_url" field.</summary>
        public const int TeamLogoUrlFieldNumber = 9;
        private readonly static string TeamLogoUrlDefaultValue = "";

        private string teamLogoUrl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TeamLogoUrl {
          get { return teamLogoUrl_ ?? TeamLogoUrlDefaultValue; }
          set {
            teamLogoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "team_logo_url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamLogoUrl {
          get { return teamLogoUrl_ != null; }
        }
        /// <summary>Clears the value of the "team_logo_url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamLogoUrl() {
          teamLogoUrl_ = null;
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PlayerDetails> _repeated_players_codec
            = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PlayerDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PlayerDetails> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PlayerDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PlayerDetails> Players {
          get { return players_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TeamDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TeamDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TeamNumber != other.TeamNumber) return false;
          if (TeamId != other.TeamId) return false;
          if (TeamName != other.TeamName) return false;
          if (TeamTag != other.TeamTag) return false;
          if (TeamLogo != other.TeamLogo) return false;
          if (Score != other.Score) return false;
          if (NetWorth != other.NetWorth) return false;
          if (TeamLogoUrl != other.TeamLogoUrl) return false;
          if(!players_.Equals(other.players_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTeamNumber) hash ^= TeamNumber.GetHashCode();
          if (HasTeamId) hash ^= TeamId.GetHashCode();
          if (HasTeamName) hash ^= TeamName.GetHashCode();
          if (HasTeamTag) hash ^= TeamTag.GetHashCode();
          if (HasTeamLogo) hash ^= TeamLogo.GetHashCode();
          if (HasScore) hash ^= Score.GetHashCode();
          if (HasNetWorth) hash ^= NetWorth.GetHashCode();
          if (HasTeamLogoUrl) hash ^= TeamLogoUrl.GetHashCode();
          hash ^= players_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasTeamNumber) {
            output.WriteRawTag(8);
            output.WriteUInt32(TeamNumber);
          }
          if (HasTeamId) {
            output.WriteRawTag(16);
            output.WriteUInt32(TeamId);
          }
          if (HasTeamName) {
            output.WriteRawTag(26);
            output.WriteString(TeamName);
          }
          if (HasTeamLogo) {
            output.WriteRawTag(33);
            output.WriteFixed64(TeamLogo);
          }
          if (HasScore) {
            output.WriteRawTag(40);
            output.WriteUInt32(Score);
          }
          players_.WriteTo(output, _repeated_players_codec);
          if (HasNetWorth) {
            output.WriteRawTag(56);
            output.WriteUInt32(NetWorth);
          }
          if (HasTeamTag) {
            output.WriteRawTag(66);
            output.WriteString(TeamTag);
          }
          if (HasTeamLogoUrl) {
            output.WriteRawTag(74);
            output.WriteString(TeamLogoUrl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasTeamNumber) {
            output.WriteRawTag(8);
            output.WriteUInt32(TeamNumber);
          }
          if (HasTeamId) {
            output.WriteRawTag(16);
            output.WriteUInt32(TeamId);
          }
          if (HasTeamName) {
            output.WriteRawTag(26);
            output.WriteString(TeamName);
          }
          if (HasTeamLogo) {
            output.WriteRawTag(33);
            output.WriteFixed64(TeamLogo);
          }
          if (HasScore) {
            output.WriteRawTag(40);
            output.WriteUInt32(Score);
          }
          players_.WriteTo(ref output, _repeated_players_codec);
          if (HasNetWorth) {
            output.WriteRawTag(56);
            output.WriteUInt32(NetWorth);
          }
          if (HasTeamTag) {
            output.WriteRawTag(66);
            output.WriteString(TeamTag);
          }
          if (HasTeamLogoUrl) {
            output.WriteRawTag(74);
            output.WriteString(TeamLogoUrl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTeamNumber) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamNumber);
          }
          if (HasTeamId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
          }
          if (HasTeamName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
          }
          if (HasTeamTag) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamTag);
          }
          if (HasTeamLogo) {
            size += 1 + 8;
          }
          if (HasScore) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
          }
          if (HasNetWorth) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
          }
          if (HasTeamLogoUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamLogoUrl);
          }
          size += players_.CalculateSize(_repeated_players_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TeamDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasTeamNumber) {
            TeamNumber = other.TeamNumber;
          }
          if (other.HasTeamId) {
            TeamId = other.TeamId;
          }
          if (other.HasTeamName) {
            TeamName = other.TeamName;
          }
          if (other.HasTeamTag) {
            TeamTag = other.TeamTag;
          }
          if (other.HasTeamLogo) {
            TeamLogo = other.TeamLogo;
          }
          if (other.HasScore) {
            Score = other.Score;
          }
          if (other.HasNetWorth) {
            NetWorth = other.NetWorth;
          }
          if (other.HasTeamLogoUrl) {
            TeamLogoUrl = other.TeamLogoUrl;
          }
          players_.Add(other.players_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TeamNumber = input.ReadUInt32();
                break;
              }
              case 16: {
                TeamId = input.ReadUInt32();
                break;
              }
              case 26: {
                TeamName = input.ReadString();
                break;
              }
              case 33: {
                TeamLogo = input.ReadFixed64();
                break;
              }
              case 40: {
                Score = input.ReadUInt32();
                break;
              }
              case 50: {
                players_.AddEntriesFrom(input, _repeated_players_codec);
                break;
              }
              case 56: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 66: {
                TeamTag = input.ReadString();
                break;
              }
              case 74: {
                TeamLogoUrl = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                TeamNumber = input.ReadUInt32();
                break;
              }
              case 16: {
                TeamId = input.ReadUInt32();
                break;
              }
              case 26: {
                TeamName = input.ReadString();
                break;
              }
              case 33: {
                TeamLogo = input.ReadFixed64();
                break;
              }
              case 40: {
                Score = input.ReadUInt32();
                break;
              }
              case 50: {
                players_.AddEntriesFrom(ref input, _repeated_players_codec);
                break;
              }
              case 56: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 66: {
                TeamTag = input.ReadString();
                break;
              }
              case 74: {
                TeamLogoUrl = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PlayerDetails : pb::IMessage<PlayerDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerDetails> _parser = new pb::MessageParser<PlayerDetails>(() => new PlayerDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDetails(PlayerDetails other) : this() {
          _hasBits0 = other._hasBits0;
          accountid_ = other.accountid_;
          playerid_ = other.playerid_;
          name_ = other.name_;
          team_ = other.team_;
          heroid_ = other.heroid_;
          level_ = other.level_;
          killCount_ = other.killCount_;
          deathCount_ = other.deathCount_;
          assistsCount_ = other.assistsCount_;
          deniesCount_ = other.deniesCount_;
          lhCount_ = other.lhCount_;
          gold_ = other.gold_;
          x_ = other.x_;
          y_ = other.y_;
          netWorth_ = other.netWorth_;
          abilities_ = other.abilities_.Clone();
          items_ = other.items_.Clone();
          teamSlot_ = other.teamSlot_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerDetails Clone() {
          return new PlayerDetails(this);
        }

        /// <summary>Field number for the "accountid" field.</summary>
        public const int AccountidFieldNumber = 1;
        private readonly static uint AccountidDefaultValue = 0;

        private uint accountid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Accountid {
          get { if ((_hasBits0 & 1) != 0) { return accountid_; } else { return AccountidDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountid_ = value;
          }
        }
        /// <summary>Gets whether the "accountid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountid {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "accountid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountid() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "playerid" field.</summary>
        public const int PlayeridFieldNumber = 2;
        private readonly static int PlayeridDefaultValue = -1;

        private int playerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Playerid {
          get { if ((_hasBits0 & 2) != 0) { return playerid_; } else { return PlayeridDefaultValue; } }
          set {
            _hasBits0 |= 2;
            playerid_ = value;
          }
        }
        /// <summary>Gets whether the "playerid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerid {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "playerid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerid() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 4;
        private readonly static uint TeamDefaultValue = 0;

        private uint team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team {
          get { if ((_hasBits0 & 4) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 4;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "heroid" field.</summary>
        public const int HeroidFieldNumber = 5;
        private readonly static int HeroidDefaultValue = 0;

        private int heroid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Heroid {
          get { if ((_hasBits0 & 8) != 0) { return heroid_; } else { return HeroidDefaultValue; } }
          set {
            _hasBits0 |= 8;
            heroid_ = value;
          }
        }
        /// <summary>Gets whether the "heroid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroid {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "heroid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroid() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 6;
        private readonly static uint LevelDefaultValue = 0;

        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { if ((_hasBits0 & 16) != 0) { return level_; } else { return LevelDefaultValue; } }
          set {
            _hasBits0 |= 16;
            level_ = value;
          }
        }
        /// <summary>Gets whether the "level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLevel {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLevel() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "kill_count" field.</summary>
        public const int KillCountFieldNumber = 7;
        private readonly static uint KillCountDefaultValue = 0;

        private uint killCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint KillCount {
          get { if ((_hasBits0 & 32) != 0) { return killCount_; } else { return KillCountDefaultValue; } }
          set {
            _hasBits0 |= 32;
            killCount_ = value;
          }
        }
        /// <summary>Gets whether the "kill_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKillCount {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "kill_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKillCount() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "death_count" field.</summary>
        public const int DeathCountFieldNumber = 8;
        private readonly static uint DeathCountDefaultValue = 0;

        private uint deathCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DeathCount {
          get { if ((_hasBits0 & 64) != 0) { return deathCount_; } else { return DeathCountDefaultValue; } }
          set {
            _hasBits0 |= 64;
            deathCount_ = value;
          }
        }
        /// <summary>Gets whether the "death_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeathCount {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "death_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeathCount() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "assists_count" field.</summary>
        public const int AssistsCountFieldNumber = 9;
        private readonly static uint AssistsCountDefaultValue = 0;

        private uint assistsCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AssistsCount {
          get { if ((_hasBits0 & 128) != 0) { return assistsCount_; } else { return AssistsCountDefaultValue; } }
          set {
            _hasBits0 |= 128;
            assistsCount_ = value;
          }
        }
        /// <summary>Gets whether the "assists_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAssistsCount {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "assists_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAssistsCount() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "denies_count" field.</summary>
        public const int DeniesCountFieldNumber = 10;
        private readonly static uint DeniesCountDefaultValue = 0;

        private uint deniesCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DeniesCount {
          get { if ((_hasBits0 & 256) != 0) { return deniesCount_; } else { return DeniesCountDefaultValue; } }
          set {
            _hasBits0 |= 256;
            deniesCount_ = value;
          }
        }
        /// <summary>Gets whether the "denies_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeniesCount {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "denies_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeniesCount() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "lh_count" field.</summary>
        public const int LhCountFieldNumber = 11;
        private readonly static uint LhCountDefaultValue = 0;

        private uint lhCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LhCount {
          get { if ((_hasBits0 & 512) != 0) { return lhCount_; } else { return LhCountDefaultValue; } }
          set {
            _hasBits0 |= 512;
            lhCount_ = value;
          }
        }
        /// <summary>Gets whether the "lh_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLhCount {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "lh_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLhCount() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "gold" field.</summary>
        public const int GoldFieldNumber = 12;
        private readonly static uint GoldDefaultValue = 0;

        private uint gold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Gold {
          get { if ((_hasBits0 & 1024) != 0) { return gold_; } else { return GoldDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            gold_ = value;
          }
        }
        /// <summary>Gets whether the "gold" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGold {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "gold" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGold() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 13;
        private readonly static float XDefaultValue = 0F;

        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { if ((_hasBits0 & 2048) != 0) { return x_; } else { return XDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            x_ = value;
          }
        }
        /// <summary>Gets whether the "x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasX {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearX() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 14;
        private readonly static float YDefaultValue = 0F;

        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { if ((_hasBits0 & 4096) != 0) { return y_; } else { return YDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            y_ = value;
          }
        }
        /// <summary>Gets whether the "y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasY {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearY() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "net_worth" field.</summary>
        public const int NetWorthFieldNumber = 15;
        private readonly static uint NetWorthDefaultValue = 0;

        private uint netWorth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NetWorth {
          get { if ((_hasBits0 & 8192) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
          set {
            _hasBits0 |= 8192;
            netWorth_ = value;
          }
        }
        /// <summary>Gets whether the "net_worth" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNetWorth {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "net_worth" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNetWorth() {
          _hasBits0 &= ~8192;
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 16;
        private static readonly pb::FieldCodec<int> _repeated_abilities_codec
            = pb::FieldCodec.ForInt32(128);
        private readonly pbc::RepeatedField<int> abilities_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Abilities {
          get { return abilities_; }
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 17;
        private static readonly pb::FieldCodec<int> _repeated_items_codec
            = pb::FieldCodec.ForInt32(136);
        private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Items {
          get { return items_; }
        }

        /// <summary>Field number for the "team_slot" field.</summary>
        public const int TeamSlotFieldNumber = 18;
        private readonly static uint TeamSlotDefaultValue = 0;

        private uint teamSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamSlot {
          get { if ((_hasBits0 & 16384) != 0) { return teamSlot_; } else { return TeamSlotDefaultValue; } }
          set {
            _hasBits0 |= 16384;
            teamSlot_ = value;
          }
        }
        /// <summary>Gets whether the "team_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamSlot {
          get { return (_hasBits0 & 16384) != 0; }
        }
        /// <summary>Clears the value of the "team_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamSlot() {
          _hasBits0 &= ~16384;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accountid != other.Accountid) return false;
          if (Playerid != other.Playerid) return false;
          if (Name != other.Name) return false;
          if (Team != other.Team) return false;
          if (Heroid != other.Heroid) return false;
          if (Level != other.Level) return false;
          if (KillCount != other.KillCount) return false;
          if (DeathCount != other.DeathCount) return false;
          if (AssistsCount != other.AssistsCount) return false;
          if (DeniesCount != other.DeniesCount) return false;
          if (LhCount != other.LhCount) return false;
          if (Gold != other.Gold) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (NetWorth != other.NetWorth) return false;
          if(!abilities_.Equals(other.abilities_)) return false;
          if(!items_.Equals(other.items_)) return false;
          if (TeamSlot != other.TeamSlot) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountid) hash ^= Accountid.GetHashCode();
          if (HasPlayerid) hash ^= Playerid.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (HasTeam) hash ^= Team.GetHashCode();
          if (HasHeroid) hash ^= Heroid.GetHashCode();
          if (HasLevel) hash ^= Level.GetHashCode();
          if (HasKillCount) hash ^= KillCount.GetHashCode();
          if (HasDeathCount) hash ^= DeathCount.GetHashCode();
          if (HasAssistsCount) hash ^= AssistsCount.GetHashCode();
          if (HasDeniesCount) hash ^= DeniesCount.GetHashCode();
          if (HasLhCount) hash ^= LhCount.GetHashCode();
          if (HasGold) hash ^= Gold.GetHashCode();
          if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (HasNetWorth) hash ^= NetWorth.GetHashCode();
          hash ^= abilities_.GetHashCode();
          hash ^= items_.GetHashCode();
          if (HasTeamSlot) hash ^= TeamSlot.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountid) {
            output.WriteRawTag(8);
            output.WriteUInt32(Accountid);
          }
          if (HasPlayerid) {
            output.WriteRawTag(16);
            output.WriteInt32(Playerid);
          }
          if (HasName) {
            output.WriteRawTag(26);
            output.WriteString(Name);
          }
          if (HasTeam) {
            output.WriteRawTag(32);
            output.WriteUInt32(Team);
          }
          if (HasHeroid) {
            output.WriteRawTag(40);
            output.WriteInt32(Heroid);
          }
          if (HasLevel) {
            output.WriteRawTag(48);
            output.WriteUInt32(Level);
          }
          if (HasKillCount) {
            output.WriteRawTag(56);
            output.WriteUInt32(KillCount);
          }
          if (HasDeathCount) {
            output.WriteRawTag(64);
            output.WriteUInt32(DeathCount);
          }
          if (HasAssistsCount) {
            output.WriteRawTag(72);
            output.WriteUInt32(AssistsCount);
          }
          if (HasDeniesCount) {
            output.WriteRawTag(80);
            output.WriteUInt32(DeniesCount);
          }
          if (HasLhCount) {
            output.WriteRawTag(88);
            output.WriteUInt32(LhCount);
          }
          if (HasGold) {
            output.WriteRawTag(96);
            output.WriteUInt32(Gold);
          }
          if (HasX) {
            output.WriteRawTag(109);
            output.WriteFloat(X);
          }
          if (HasY) {
            output.WriteRawTag(117);
            output.WriteFloat(Y);
          }
          if (HasNetWorth) {
            output.WriteRawTag(120);
            output.WriteUInt32(NetWorth);
          }
          abilities_.WriteTo(output, _repeated_abilities_codec);
          items_.WriteTo(output, _repeated_items_codec);
          if (HasTeamSlot) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(TeamSlot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountid) {
            output.WriteRawTag(8);
            output.WriteUInt32(Accountid);
          }
          if (HasPlayerid) {
            output.WriteRawTag(16);
            output.WriteInt32(Playerid);
          }
          if (HasName) {
            output.WriteRawTag(26);
            output.WriteString(Name);
          }
          if (HasTeam) {
            output.WriteRawTag(32);
            output.WriteUInt32(Team);
          }
          if (HasHeroid) {
            output.WriteRawTag(40);
            output.WriteInt32(Heroid);
          }
          if (HasLevel) {
            output.WriteRawTag(48);
            output.WriteUInt32(Level);
          }
          if (HasKillCount) {
            output.WriteRawTag(56);
            output.WriteUInt32(KillCount);
          }
          if (HasDeathCount) {
            output.WriteRawTag(64);
            output.WriteUInt32(DeathCount);
          }
          if (HasAssistsCount) {
            output.WriteRawTag(72);
            output.WriteUInt32(AssistsCount);
          }
          if (HasDeniesCount) {
            output.WriteRawTag(80);
            output.WriteUInt32(DeniesCount);
          }
          if (HasLhCount) {
            output.WriteRawTag(88);
            output.WriteUInt32(LhCount);
          }
          if (HasGold) {
            output.WriteRawTag(96);
            output.WriteUInt32(Gold);
          }
          if (HasX) {
            output.WriteRawTag(109);
            output.WriteFloat(X);
          }
          if (HasY) {
            output.WriteRawTag(117);
            output.WriteFloat(Y);
          }
          if (HasNetWorth) {
            output.WriteRawTag(120);
            output.WriteUInt32(NetWorth);
          }
          abilities_.WriteTo(ref output, _repeated_abilities_codec);
          items_.WriteTo(ref output, _repeated_items_codec);
          if (HasTeamSlot) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(TeamSlot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountid) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Accountid);
          }
          if (HasPlayerid) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playerid);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
          }
          if (HasHeroid) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heroid);
          }
          if (HasLevel) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (HasKillCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillCount);
          }
          if (HasDeathCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeathCount);
          }
          if (HasAssistsCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AssistsCount);
          }
          if (HasDeniesCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeniesCount);
          }
          if (HasLhCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LhCount);
          }
          if (HasGold) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gold);
          }
          if (HasX) {
            size += 1 + 4;
          }
          if (HasY) {
            size += 1 + 4;
          }
          if (HasNetWorth) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
          }
          size += abilities_.CalculateSize(_repeated_abilities_codec);
          size += items_.CalculateSize(_repeated_items_codec);
          if (HasTeamSlot) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeamSlot);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountid) {
            Accountid = other.Accountid;
          }
          if (other.HasPlayerid) {
            Playerid = other.Playerid;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          if (other.HasHeroid) {
            Heroid = other.Heroid;
          }
          if (other.HasLevel) {
            Level = other.Level;
          }
          if (other.HasKillCount) {
            KillCount = other.KillCount;
          }
          if (other.HasDeathCount) {
            DeathCount = other.DeathCount;
          }
          if (other.HasAssistsCount) {
            AssistsCount = other.AssistsCount;
          }
          if (other.HasDeniesCount) {
            DeniesCount = other.DeniesCount;
          }
          if (other.HasLhCount) {
            LhCount = other.LhCount;
          }
          if (other.HasGold) {
            Gold = other.Gold;
          }
          if (other.HasX) {
            X = other.X;
          }
          if (other.HasY) {
            Y = other.Y;
          }
          if (other.HasNetWorth) {
            NetWorth = other.NetWorth;
          }
          abilities_.Add(other.abilities_);
          items_.Add(other.items_);
          if (other.HasTeamSlot) {
            TeamSlot = other.TeamSlot;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Accountid = input.ReadUInt32();
                break;
              }
              case 16: {
                Playerid = input.ReadInt32();
                break;
              }
              case 26: {
                Name = input.ReadString();
                break;
              }
              case 32: {
                Team = input.ReadUInt32();
                break;
              }
              case 40: {
                Heroid = input.ReadInt32();
                break;
              }
              case 48: {
                Level = input.ReadUInt32();
                break;
              }
              case 56: {
                KillCount = input.ReadUInt32();
                break;
              }
              case 64: {
                DeathCount = input.ReadUInt32();
                break;
              }
              case 72: {
                AssistsCount = input.ReadUInt32();
                break;
              }
              case 80: {
                DeniesCount = input.ReadUInt32();
                break;
              }
              case 88: {
                LhCount = input.ReadUInt32();
                break;
              }
              case 96: {
                Gold = input.ReadUInt32();
                break;
              }
              case 109: {
                X = input.ReadFloat();
                break;
              }
              case 117: {
                Y = input.ReadFloat();
                break;
              }
              case 120: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 130:
              case 128: {
                abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                break;
              }
              case 138:
              case 136: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 144: {
                TeamSlot = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Accountid = input.ReadUInt32();
                break;
              }
              case 16: {
                Playerid = input.ReadInt32();
                break;
              }
              case 26: {
                Name = input.ReadString();
                break;
              }
              case 32: {
                Team = input.ReadUInt32();
                break;
              }
              case 40: {
                Heroid = input.ReadInt32();
                break;
              }
              case 48: {
                Level = input.ReadUInt32();
                break;
              }
              case 56: {
                KillCount = input.ReadUInt32();
                break;
              }
              case 64: {
                DeathCount = input.ReadUInt32();
                break;
              }
              case 72: {
                AssistsCount = input.ReadUInt32();
                break;
              }
              case 80: {
                DeniesCount = input.ReadUInt32();
                break;
              }
              case 88: {
                LhCount = input.ReadUInt32();
                break;
              }
              case 96: {
                Gold = input.ReadUInt32();
                break;
              }
              case 109: {
                X = input.ReadFloat();
                break;
              }
              case 117: {
                Y = input.ReadFloat();
                break;
              }
              case 120: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 130:
              case 128: {
                abilities_.AddEntriesFrom(ref input, _repeated_abilities_codec);
                break;
              }
              case 138:
              case 136: {
                items_.AddEntriesFrom(ref input, _repeated_items_codec);
                break;
              }
              case 144: {
                TeamSlot = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class BuildingDetails : pb::IMessage<BuildingDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BuildingDetails> _parser = new pb::MessageParser<BuildingDetails>(() => new BuildingDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BuildingDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuildingDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuildingDetails(BuildingDetails other) : this() {
          _hasBits0 = other._hasBits0;
          team_ = other.team_;
          heading_ = other.heading_;
          type_ = other.type_;
          lane_ = other.lane_;
          tier_ = other.tier_;
          x_ = other.x_;
          y_ = other.y_;
          destroyed_ = other.destroyed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuildingDetails Clone() {
          return new BuildingDetails(this);
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 1;
        private readonly static uint TeamDefaultValue = 0;

        private uint team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team {
          get { if ((_hasBits0 & 1) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 1;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "heading" field.</summary>
        public const int HeadingFieldNumber = 2;
        private readonly static float HeadingDefaultValue = 0F;

        private float heading_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Heading {
          get { if ((_hasBits0 & 2) != 0) { return heading_; } else { return HeadingDefaultValue; } }
          set {
            _hasBits0 |= 2;
            heading_ = value;
          }
        }
        /// <summary>Gets whether the "heading" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeading {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "heading" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeading() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private readonly static uint TypeDefaultValue = 0;

        private uint type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Type {
          get { if ((_hasBits0 & 4) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 4;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "lane" field.</summary>
        public const int LaneFieldNumber = 4;
        private readonly static uint LaneDefaultValue = 0;

        private uint lane_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Lane {
          get { if ((_hasBits0 & 8) != 0) { return lane_; } else { return LaneDefaultValue; } }
          set {
            _hasBits0 |= 8;
            lane_ = value;
          }
        }
        /// <summary>Gets whether the "lane" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLane {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "lane" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLane() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "tier" field.</summary>
        public const int TierFieldNumber = 5;
        private readonly static uint TierDefaultValue = 0;

        private uint tier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Tier {
          get { if ((_hasBits0 & 16) != 0) { return tier_; } else { return TierDefaultValue; } }
          set {
            _hasBits0 |= 16;
            tier_ = value;
          }
        }
        /// <summary>Gets whether the "tier" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTier {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "tier" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTier() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 6;
        private readonly static float XDefaultValue = 0F;

        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { if ((_hasBits0 & 32) != 0) { return x_; } else { return XDefaultValue; } }
          set {
            _hasBits0 |= 32;
            x_ = value;
          }
        }
        /// <summary>Gets whether the "x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasX {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearX() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 7;
        private readonly static float YDefaultValue = 0F;

        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { if ((_hasBits0 & 64) != 0) { return y_; } else { return YDefaultValue; } }
          set {
            _hasBits0 |= 64;
            y_ = value;
          }
        }
        /// <summary>Gets whether the "y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasY {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearY() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "destroyed" field.</summary>
        public const int DestroyedFieldNumber = 8;
        private readonly static bool DestroyedDefaultValue = false;

        private bool destroyed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Destroyed {
          get { if ((_hasBits0 & 128) != 0) { return destroyed_; } else { return DestroyedDefaultValue; } }
          set {
            _hasBits0 |= 128;
            destroyed_ = value;
          }
        }
        /// <summary>Gets whether the "destroyed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDestroyed {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "destroyed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDestroyed() {
          _hasBits0 &= ~128;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BuildingDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BuildingDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Team != other.Team) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Heading, other.Heading)) return false;
          if (Type != other.Type) return false;
          if (Lane != other.Lane) return false;
          if (Tier != other.Tier) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (Destroyed != other.Destroyed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTeam) hash ^= Team.GetHashCode();
          if (HasHeading) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Heading);
          if (HasType) hash ^= Type.GetHashCode();
          if (HasLane) hash ^= Lane.GetHashCode();
          if (HasTier) hash ^= Tier.GetHashCode();
          if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (HasDestroyed) hash ^= Destroyed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasTeam) {
            output.WriteRawTag(8);
            output.WriteUInt32(Team);
          }
          if (HasHeading) {
            output.WriteRawTag(21);
            output.WriteFloat(Heading);
          }
          if (HasType) {
            output.WriteRawTag(24);
            output.WriteUInt32(Type);
          }
          if (HasLane) {
            output.WriteRawTag(32);
            output.WriteUInt32(Lane);
          }
          if (HasTier) {
            output.WriteRawTag(40);
            output.WriteUInt32(Tier);
          }
          if (HasX) {
            output.WriteRawTag(53);
            output.WriteFloat(X);
          }
          if (HasY) {
            output.WriteRawTag(61);
            output.WriteFloat(Y);
          }
          if (HasDestroyed) {
            output.WriteRawTag(64);
            output.WriteBool(Destroyed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasTeam) {
            output.WriteRawTag(8);
            output.WriteUInt32(Team);
          }
          if (HasHeading) {
            output.WriteRawTag(21);
            output.WriteFloat(Heading);
          }
          if (HasType) {
            output.WriteRawTag(24);
            output.WriteUInt32(Type);
          }
          if (HasLane) {
            output.WriteRawTag(32);
            output.WriteUInt32(Lane);
          }
          if (HasTier) {
            output.WriteRawTag(40);
            output.WriteUInt32(Tier);
          }
          if (HasX) {
            output.WriteRawTag(53);
            output.WriteFloat(X);
          }
          if (HasY) {
            output.WriteRawTag(61);
            output.WriteFloat(Y);
          }
          if (HasDestroyed) {
            output.WriteRawTag(64);
            output.WriteBool(Destroyed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
          }
          if (HasHeading) {
            size += 1 + 4;
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
          }
          if (HasLane) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lane);
          }
          if (HasTier) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tier);
          }
          if (HasX) {
            size += 1 + 4;
          }
          if (HasY) {
            size += 1 + 4;
          }
          if (HasDestroyed) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BuildingDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          if (other.HasHeading) {
            Heading = other.Heading;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasLane) {
            Lane = other.Lane;
          }
          if (other.HasTier) {
            Tier = other.Tier;
          }
          if (other.HasX) {
            X = other.X;
          }
          if (other.HasY) {
            Y = other.Y;
          }
          if (other.HasDestroyed) {
            Destroyed = other.Destroyed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Team = input.ReadUInt32();
                break;
              }
              case 21: {
                Heading = input.ReadFloat();
                break;
              }
              case 24: {
                Type = input.ReadUInt32();
                break;
              }
              case 32: {
                Lane = input.ReadUInt32();
                break;
              }
              case 40: {
                Tier = input.ReadUInt32();
                break;
              }
              case 53: {
                X = input.ReadFloat();
                break;
              }
              case 61: {
                Y = input.ReadFloat();
                break;
              }
              case 64: {
                Destroyed = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Team = input.ReadUInt32();
                break;
              }
              case 21: {
                Heading = input.ReadFloat();
                break;
              }
              case 24: {
                Type = input.ReadUInt32();
                break;
              }
              case 32: {
                Lane = input.ReadUInt32();
                break;
              }
              case 40: {
                Tier = input.ReadUInt32();
                break;
              }
              case 53: {
                X = input.ReadFloat();
                break;
              }
              case 61: {
                Y = input.ReadFloat();
                break;
              }
              case 64: {
                Destroyed = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PickBanDetails : pb::IMessage<PickBanDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PickBanDetails> _parser = new pb::MessageParser<PickBanDetails>(() => new PickBanDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PickBanDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickBanDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickBanDetails(PickBanDetails other) : this() {
          _hasBits0 = other._hasBits0;
          hero_ = other.hero_;
          team_ = other.team_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickBanDetails Clone() {
          return new PickBanDetails(this);
        }

        /// <summary>Field number for the "hero" field.</summary>
        public const int HeroFieldNumber = 1;
        private readonly static int HeroDefaultValue = 0;

        private int hero_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Hero {
          get { if ((_hasBits0 & 1) != 0) { return hero_; } else { return HeroDefaultValue; } }
          set {
            _hasBits0 |= 1;
            hero_ = value;
          }
        }
        /// <summary>Gets whether the "hero" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHero {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "hero" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHero() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 2;
        private readonly static uint TeamDefaultValue = 0;

        private uint team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team {
          get { if ((_hasBits0 & 2) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 2;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PickBanDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PickBanDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hero != other.Hero) return false;
          if (Team != other.Team) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasHero) hash ^= Hero.GetHashCode();
          if (HasTeam) hash ^= Team.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasHero) {
            output.WriteRawTag(8);
            output.WriteInt32(Hero);
          }
          if (HasTeam) {
            output.WriteRawTag(16);
            output.WriteUInt32(Team);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasHero) {
            output.WriteRawTag(8);
            output.WriteInt32(Hero);
          }
          if (HasTeam) {
            output.WriteRawTag(16);
            output.WriteUInt32(Team);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasHero) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hero);
          }
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PickBanDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasHero) {
            Hero = other.Hero;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Hero = input.ReadInt32();
                break;
              }
              case 16: {
                Team = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Hero = input.ReadInt32();
                break;
              }
              case 16: {
                Team = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class MatchDetails : pb::IMessage<MatchDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MatchDetails> _parser = new pb::MessageParser<MatchDetails>(() => new MatchDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchDetails(MatchDetails other) : this() {
          _hasBits0 = other._hasBits0;
          serverSteamId_ = other.serverSteamId_;
          matchId_ = other.matchId_;
          timestamp_ = other.timestamp_;
          gameTime_ = other.gameTime_;
          steamBroadcasterAccountIds_ = other.steamBroadcasterAccountIds_.Clone();
          gameMode_ = other.gameMode_;
          leagueId_ = other.leagueId_;
          leagueNodeId_ = other.leagueNodeId_;
          gameState_ = other.gameState_;
          picks_ = other.picks_.Clone();
          bans_ = other.bans_.Clone();
          lobbyType_ = other.lobbyType_;
          startTimestamp_ = other.startTimestamp_;
          isPlayerDraft_ = other.isPlayerDraft_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchDetails Clone() {
          return new MatchDetails(this);
        }

        /// <summary>Field number for the "server_steam_id" field.</summary>
        public const int ServerSteamIdFieldNumber = 1;
        private readonly static ulong ServerSteamIdDefaultValue = 0UL;

        private ulong serverSteamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ServerSteamId {
          get { if ((_hasBits0 & 1) != 0) { return serverSteamId_; } else { return ServerSteamIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            serverSteamId_ = value;
          }
        }
        /// <summary>Gets whether the "server_steam_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasServerSteamId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "server_steam_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearServerSteamId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "match_id" field.</summary>
        public const int MatchIdFieldNumber = 2;
        private readonly static ulong MatchIdDefaultValue = 0UL;

        private ulong matchId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong MatchId {
          get { if ((_hasBits0 & 2) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            matchId_ = value;
          }
        }
        /// <summary>Gets whether the "match_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMatchId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "match_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMatchId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 3;
        private readonly static uint TimestampDefaultValue = 0;

        private uint timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Timestamp {
          get { if ((_hasBits0 & 4) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
          set {
            _hasBits0 |= 4;
            timestamp_ = value;
          }
        }
        /// <summary>Gets whether the "timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimestamp {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimestamp() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "game_time" field.</summary>
        public const int GameTimeFieldNumber = 4;
        private readonly static int GameTimeDefaultValue = 0;

        private int gameTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GameTime {
          get { if ((_hasBits0 & 8) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
          set {
            _hasBits0 |= 8;
            gameTime_ = value;
          }
        }
        /// <summary>Gets whether the "game_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameTime {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "game_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameTime() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "steam_broadcaster_account_ids" field.</summary>
        public const int SteamBroadcasterAccountIdsFieldNumber = 6;
        private static readonly pb::FieldCodec<uint> _repeated_steamBroadcasterAccountIds_codec
            = pb::FieldCodec.ForUInt32(48);
        private readonly pbc::RepeatedField<uint> steamBroadcasterAccountIds_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SteamBroadcasterAccountIds {
          get { return steamBroadcasterAccountIds_; }
        }

        /// <summary>Field number for the "game_mode" field.</summary>
        public const int GameModeFieldNumber = 7;
        private readonly static uint GameModeDefaultValue = 0;

        private uint gameMode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameMode {
          get { if ((_hasBits0 & 16) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
          set {
            _hasBits0 |= 16;
            gameMode_ = value;
          }
        }
        /// <summary>Gets whether the "game_mode" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameMode {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "game_mode" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameMode() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "league_id" field.</summary>
        public const int LeagueIdFieldNumber = 8;
        private readonly static uint LeagueIdDefaultValue = 0;

        private uint leagueId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeagueId {
          get { if ((_hasBits0 & 32) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
          set {
            _hasBits0 |= 32;
            leagueId_ = value;
          }
        }
        /// <summary>Gets whether the "league_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeagueId {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "league_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeagueId() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "league_node_id" field.</summary>
        public const int LeagueNodeIdFieldNumber = 9;
        private readonly static uint LeagueNodeIdDefaultValue = 0;

        private uint leagueNodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeagueNodeId {
          get { if ((_hasBits0 & 64) != 0) { return leagueNodeId_; } else { return LeagueNodeIdDefaultValue; } }
          set {
            _hasBits0 |= 64;
            leagueNodeId_ = value;
          }
        }
        /// <summary>Gets whether the "league_node_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeagueNodeId {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "league_node_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeagueNodeId() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "game_state" field.</summary>
        public const int GameStateFieldNumber = 10;
        private readonly static uint GameStateDefaultValue = 0;

        private uint gameState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameState {
          get { if ((_hasBits0 & 128) != 0) { return gameState_; } else { return GameStateDefaultValue; } }
          set {
            _hasBits0 |= 128;
            gameState_ = value;
          }
        }
        /// <summary>Gets whether the "game_state" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameState {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "game_state" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameState() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "picks" field.</summary>
        public const int PicksFieldNumber = 11;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails> _repeated_picks_codec
            = pb::FieldCodec.ForMessage(90, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails> picks_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails> Picks {
          get { return picks_; }
        }

        /// <summary>Field number for the "bans" field.</summary>
        public const int BansFieldNumber = 12;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails> _repeated_bans_codec
            = pb::FieldCodec.ForMessage(98, global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails> bans_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Types.PickBanDetails> Bans {
          get { return bans_; }
        }

        /// <summary>Field number for the "lobby_type" field.</summary>
        public const int LobbyTypeFieldNumber = 13;
        private readonly static uint LobbyTypeDefaultValue = 0;

        private uint lobbyType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LobbyType {
          get { if ((_hasBits0 & 256) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
          set {
            _hasBits0 |= 256;
            lobbyType_ = value;
          }
        }
        /// <summary>Gets whether the "lobby_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLobbyType {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "lobby_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLobbyType() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "start_timestamp" field.</summary>
        public const int StartTimestampFieldNumber = 14;
        private readonly static uint StartTimestampDefaultValue = 0;

        private uint startTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartTimestamp {
          get { if ((_hasBits0 & 512) != 0) { return startTimestamp_; } else { return StartTimestampDefaultValue; } }
          set {
            _hasBits0 |= 512;
            startTimestamp_ = value;
          }
        }
        /// <summary>Gets whether the "start_timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStartTimestamp {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "start_timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStartTimestamp() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "is_player_draft" field.</summary>
        public const int IsPlayerDraftFieldNumber = 15;
        private readonly static bool IsPlayerDraftDefaultValue = false;

        private bool isPlayerDraft_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsPlayerDraft {
          get { if ((_hasBits0 & 1024) != 0) { return isPlayerDraft_; } else { return IsPlayerDraftDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            isPlayerDraft_ = value;
          }
        }
        /// <summary>Gets whether the "is_player_draft" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsPlayerDraft {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "is_player_draft" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsPlayerDraft() {
          _hasBits0 &= ~1024;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MatchDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ServerSteamId != other.ServerSteamId) return false;
          if (MatchId != other.MatchId) return false;
          if (Timestamp != other.Timestamp) return false;
          if (GameTime != other.GameTime) return false;
          if(!steamBroadcasterAccountIds_.Equals(other.steamBroadcasterAccountIds_)) return false;
          if (GameMode != other.GameMode) return false;
          if (LeagueId != other.LeagueId) return false;
          if (LeagueNodeId != other.LeagueNodeId) return false;
          if (GameState != other.GameState) return false;
          if(!picks_.Equals(other.picks_)) return false;
          if(!bans_.Equals(other.bans_)) return false;
          if (LobbyType != other.LobbyType) return false;
          if (StartTimestamp != other.StartTimestamp) return false;
          if (IsPlayerDraft != other.IsPlayerDraft) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasServerSteamId) hash ^= ServerSteamId.GetHashCode();
          if (HasMatchId) hash ^= MatchId.GetHashCode();
          if (HasTimestamp) hash ^= Timestamp.GetHashCode();
          if (HasGameTime) hash ^= GameTime.GetHashCode();
          hash ^= steamBroadcasterAccountIds_.GetHashCode();
          if (HasGameMode) hash ^= GameMode.GetHashCode();
          if (HasLeagueId) hash ^= LeagueId.GetHashCode();
          if (HasLeagueNodeId) hash ^= LeagueNodeId.GetHashCode();
          if (HasGameState) hash ^= GameState.GetHashCode();
          hash ^= picks_.GetHashCode();
          hash ^= bans_.GetHashCode();
          if (HasLobbyType) hash ^= LobbyType.GetHashCode();
          if (HasStartTimestamp) hash ^= StartTimestamp.GetHashCode();
          if (HasIsPlayerDraft) hash ^= IsPlayerDraft.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasServerSteamId) {
            output.WriteRawTag(9);
            output.WriteFixed64(ServerSteamId);
          }
          if (HasMatchId) {
            output.WriteRawTag(16);
            output.WriteUInt64(MatchId);
          }
          if (HasTimestamp) {
            output.WriteRawTag(24);
            output.WriteUInt32(Timestamp);
          }
          if (HasGameTime) {
            output.WriteRawTag(32);
            output.WriteInt32(GameTime);
          }
          steamBroadcasterAccountIds_.WriteTo(output, _repeated_steamBroadcasterAccountIds_codec);
          if (HasGameMode) {
            output.WriteRawTag(56);
            output.WriteUInt32(GameMode);
          }
          if (HasLeagueId) {
            output.WriteRawTag(64);
            output.WriteUInt32(LeagueId);
          }
          if (HasLeagueNodeId) {
            output.WriteRawTag(72);
            output.WriteUInt32(LeagueNodeId);
          }
          if (HasGameState) {
            output.WriteRawTag(80);
            output.WriteUInt32(GameState);
          }
          picks_.WriteTo(output, _repeated_picks_codec);
          bans_.WriteTo(output, _repeated_bans_codec);
          if (HasLobbyType) {
            output.WriteRawTag(104);
            output.WriteUInt32(LobbyType);
          }
          if (HasStartTimestamp) {
            output.WriteRawTag(112);
            output.WriteUInt32(StartTimestamp);
          }
          if (HasIsPlayerDraft) {
            output.WriteRawTag(120);
            output.WriteBool(IsPlayerDraft);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasServerSteamId) {
            output.WriteRawTag(9);
            output.WriteFixed64(ServerSteamId);
          }
          if (HasMatchId) {
            output.WriteRawTag(16);
            output.WriteUInt64(MatchId);
          }
          if (HasTimestamp) {
            output.WriteRawTag(24);
            output.WriteUInt32(Timestamp);
          }
          if (HasGameTime) {
            output.WriteRawTag(32);
            output.WriteInt32(GameTime);
          }
          steamBroadcasterAccountIds_.WriteTo(ref output, _repeated_steamBroadcasterAccountIds_codec);
          if (HasGameMode) {
            output.WriteRawTag(56);
            output.WriteUInt32(GameMode);
          }
          if (HasLeagueId) {
            output.WriteRawTag(64);
            output.WriteUInt32(LeagueId);
          }
          if (HasLeagueNodeId) {
            output.WriteRawTag(72);
            output.WriteUInt32(LeagueNodeId);
          }
          if (HasGameState) {
            output.WriteRawTag(80);
            output.WriteUInt32(GameState);
          }
          picks_.WriteTo(ref output, _repeated_picks_codec);
          bans_.WriteTo(ref output, _repeated_bans_codec);
          if (HasLobbyType) {
            output.WriteRawTag(104);
            output.WriteUInt32(LobbyType);
          }
          if (HasStartTimestamp) {
            output.WriteRawTag(112);
            output.WriteUInt32(StartTimestamp);
          }
          if (HasIsPlayerDraft) {
            output.WriteRawTag(120);
            output.WriteBool(IsPlayerDraft);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasServerSteamId) {
            size += 1 + 8;
          }
          if (HasMatchId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
          }
          if (HasTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
          }
          if (HasGameTime) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
          }
          size += steamBroadcasterAccountIds_.CalculateSize(_repeated_steamBroadcasterAccountIds_codec);
          if (HasGameMode) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameMode);
          }
          if (HasLeagueId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
          }
          if (HasLeagueNodeId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueNodeId);
          }
          if (HasGameState) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameState);
          }
          size += picks_.CalculateSize(_repeated_picks_codec);
          size += bans_.CalculateSize(_repeated_bans_codec);
          if (HasLobbyType) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LobbyType);
          }
          if (HasStartTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTimestamp);
          }
          if (HasIsPlayerDraft) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasServerSteamId) {
            ServerSteamId = other.ServerSteamId;
          }
          if (other.HasMatchId) {
            MatchId = other.MatchId;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          if (other.HasGameTime) {
            GameTime = other.GameTime;
          }
          steamBroadcasterAccountIds_.Add(other.steamBroadcasterAccountIds_);
          if (other.HasGameMode) {
            GameMode = other.GameMode;
          }
          if (other.HasLeagueId) {
            LeagueId = other.LeagueId;
          }
          if (other.HasLeagueNodeId) {
            LeagueNodeId = other.LeagueNodeId;
          }
          if (other.HasGameState) {
            GameState = other.GameState;
          }
          picks_.Add(other.picks_);
          bans_.Add(other.bans_);
          if (other.HasLobbyType) {
            LobbyType = other.LobbyType;
          }
          if (other.HasStartTimestamp) {
            StartTimestamp = other.StartTimestamp;
          }
          if (other.HasIsPlayerDraft) {
            IsPlayerDraft = other.IsPlayerDraft;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                ServerSteamId = input.ReadFixed64();
                break;
              }
              case 16: {
                MatchId = input.ReadUInt64();
                break;
              }
              case 24: {
                Timestamp = input.ReadUInt32();
                break;
              }
              case 32: {
                GameTime = input.ReadInt32();
                break;
              }
              case 50:
              case 48: {
                steamBroadcasterAccountIds_.AddEntriesFrom(input, _repeated_steamBroadcasterAccountIds_codec);
                break;
              }
              case 56: {
                GameMode = input.ReadUInt32();
                break;
              }
              case 64: {
                LeagueId = input.ReadUInt32();
                break;
              }
              case 72: {
                LeagueNodeId = input.ReadUInt32();
                break;
              }
              case 80: {
                GameState = input.ReadUInt32();
                break;
              }
              case 90: {
                picks_.AddEntriesFrom(input, _repeated_picks_codec);
                break;
              }
              case 98: {
                bans_.AddEntriesFrom(input, _repeated_bans_codec);
                break;
              }
              case 104: {
                LobbyType = input.ReadUInt32();
                break;
              }
              case 112: {
                StartTimestamp = input.ReadUInt32();
                break;
              }
              case 120: {
                IsPlayerDraft = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                ServerSteamId = input.ReadFixed64();
                break;
              }
              case 16: {
                MatchId = input.ReadUInt64();
                break;
              }
              case 24: {
                Timestamp = input.ReadUInt32();
                break;
              }
              case 32: {
                GameTime = input.ReadInt32();
                break;
              }
              case 50:
              case 48: {
                steamBroadcasterAccountIds_.AddEntriesFrom(ref input, _repeated_steamBroadcasterAccountIds_codec);
                break;
              }
              case 56: {
                GameMode = input.ReadUInt32();
                break;
              }
              case 64: {
                LeagueId = input.ReadUInt32();
                break;
              }
              case 72: {
                LeagueNodeId = input.ReadUInt32();
                break;
              }
              case 80: {
                GameState = input.ReadUInt32();
                break;
              }
              case 90: {
                picks_.AddEntriesFrom(ref input, _repeated_picks_codec);
                break;
              }
              case 98: {
                bans_.AddEntriesFrom(ref input, _repeated_bans_codec);
                break;
              }
              case 104: {
                LobbyType = input.ReadUInt32();
                break;
              }
              case 112: {
                StartTimestamp = input.ReadUInt32();
                break;
              }
              case 120: {
                IsPlayerDraft = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class GraphData : pb::IMessage<GraphData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GraphData> _parser = new pb::MessageParser<GraphData>(() => new GraphData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GraphData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTARealtimeGameStatsTerse.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphData(GraphData other) : this() {
          graphGold_ = other.graphGold_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphData Clone() {
          return new GraphData(this);
        }

        /// <summary>Field number for the "graph_gold" field.</summary>
        public const int GraphGoldFieldNumber = 1;
        private static readonly pb::FieldCodec<int> _repeated_graphGold_codec
            = pb::FieldCodec.ForInt32(8);
        private readonly pbc::RepeatedField<int> graphGold_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> GraphGold {
          get { return graphGold_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GraphData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GraphData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!graphGold_.Equals(other.graphGold_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= graphGold_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          graphGold_.WriteTo(output, _repeated_graphGold_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          graphGold_.WriteTo(ref output, _repeated_graphGold_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += graphGold_.CalculateSize(_repeated_graphGold_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GraphData other) {
          if (other == null) {
            return;
          }
          graphGold_.Add(other.graphGold_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                graphGold_.AddEntriesFrom(input, _repeated_graphGold_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 8: {
                graphGold_.AddEntriesFrom(ref input, _repeated_graphGold_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgDOTABroadcastTimelineEvent : pb::IMessage<CMsgDOTABroadcastTimelineEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTABroadcastTimelineEvent> _parser = new pb::MessageParser<CMsgDOTABroadcastTimelineEvent>(() => new CMsgDOTABroadcastTimelineEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTABroadcastTimelineEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTABroadcastTimelineEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTABroadcastTimelineEvent(CMsgDOTABroadcastTimelineEvent other) : this() {
      _hasBits0 = other._hasBits0;
      event_ = other.event_;
      timestamp_ = other.timestamp_;
      data_ = other.data_;
      stringData_ = other.stringData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTABroadcastTimelineEvent Clone() {
      return new CMsgDOTABroadcastTimelineEvent(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EBroadcastTimelineEvent EventDefaultValue = global::Steam.Protos.Dota2.EBroadcastTimelineEvent.MatchStarted;

    private global::Steam.Protos.Dota2.EBroadcastTimelineEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EBroadcastTimelineEvent Event {
      get { if ((_hasBits0 & 1) != 0) { return event_; } else { return EventDefaultValue; } }
      set {
        _hasBits0 |= 1;
        event_ = value;
      }
    }
    /// <summary>Gets whether the "event" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEvent {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private readonly static uint TimestampDefaultValue = 0;

    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { if ((_hasBits0 & 2) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private readonly static uint DataDefaultValue = 0;

    private uint data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Data {
      get { if ((_hasBits0 & 4) != 0) { return data_; } else { return DataDefaultValue; } }
      set {
        _hasBits0 |= 4;
        data_ = value;
      }
    }
    /// <summary>Gets whether the "data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasData {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "string_data" field.</summary>
    public const int StringDataFieldNumber = 4;
    private readonly static string StringDataDefaultValue = "";

    private string stringData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringData {
      get { return stringData_ ?? StringDataDefaultValue; }
      set {
        stringData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "string_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStringData {
      get { return stringData_ != null; }
    }
    /// <summary>Clears the value of the "string_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStringData() {
      stringData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTABroadcastTimelineEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTABroadcastTimelineEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Event != other.Event) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Data != other.Data) return false;
      if (StringData != other.StringData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEvent) hash ^= Event.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasData) hash ^= Data.GetHashCode();
      if (HasStringData) hash ^= StringData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEvent) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Event);
      }
      if (HasTimestamp) {
        output.WriteRawTag(21);
        output.WriteFixed32(Timestamp);
      }
      if (HasData) {
        output.WriteRawTag(24);
        output.WriteUInt32(Data);
      }
      if (HasStringData) {
        output.WriteRawTag(34);
        output.WriteString(StringData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEvent) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Event);
      }
      if (HasTimestamp) {
        output.WriteRawTag(21);
        output.WriteFixed32(Timestamp);
      }
      if (HasData) {
        output.WriteRawTag(24);
        output.WriteUInt32(Data);
      }
      if (HasStringData) {
        output.WriteRawTag(34);
        output.WriteString(StringData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEvent) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Event);
      }
      if (HasTimestamp) {
        size += 1 + 4;
      }
      if (HasData) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Data);
      }
      if (HasStringData) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTABroadcastTimelineEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasEvent) {
        Event = other.Event;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      if (other.HasStringData) {
        StringData = other.StringData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Event = (global::Steam.Protos.Dota2.EBroadcastTimelineEvent) input.ReadEnum();
            break;
          }
          case 21: {
            Timestamp = input.ReadFixed32();
            break;
          }
          case 24: {
            Data = input.ReadUInt32();
            break;
          }
          case 34: {
            StringData = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Event = (global::Steam.Protos.Dota2.EBroadcastTimelineEvent) input.ReadEnum();
            break;
          }
          case 21: {
            Timestamp = input.ReadFixed32();
            break;
          }
          case 24: {
            Data = input.ReadUInt32();
            break;
          }
          case 34: {
            StringData = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCToClientMatchGroupsVersion : pb::IMessage<CMsgGCToClientMatchGroupsVersion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToClientMatchGroupsVersion> _parser = new pb::MessageParser<CMsgGCToClientMatchGroupsVersion>(() => new CMsgGCToClientMatchGroupsVersion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToClientMatchGroupsVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientMatchGroupsVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientMatchGroupsVersion(CMsgGCToClientMatchGroupsVersion other) : this() {
      _hasBits0 = other._hasBits0;
      matchgroupsVersion_ = other.matchgroupsVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientMatchGroupsVersion Clone() {
      return new CMsgGCToClientMatchGroupsVersion(this);
    }

    /// <summary>Field number for the "matchgroups_version" field.</summary>
    public const int MatchgroupsVersionFieldNumber = 1;
    private readonly static uint MatchgroupsVersionDefaultValue = 0;

    private uint matchgroupsVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchgroupsVersion {
      get { if ((_hasBits0 & 1) != 0) { return matchgroupsVersion_; } else { return MatchgroupsVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchgroupsVersion_ = value;
      }
    }
    /// <summary>Gets whether the "matchgroups_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchgroupsVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "matchgroups_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchgroupsVersion() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToClientMatchGroupsVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToClientMatchGroupsVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchgroupsVersion != other.MatchgroupsVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchgroupsVersion) hash ^= MatchgroupsVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchgroupsVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(MatchgroupsVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchgroupsVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(MatchgroupsVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchgroupsVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchgroupsVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToClientMatchGroupsVersion other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchgroupsVersion) {
        MatchgroupsVersion = other.MatchgroupsVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchgroupsVersion = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchgroupsVersion = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTASDOHeroStatsHistory : pb::IMessage<CMsgDOTASDOHeroStatsHistory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTASDOHeroStatsHistory> _parser = new pb::MessageParser<CMsgDOTASDOHeroStatsHistory>(() => new CMsgDOTASDOHeroStatsHistory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTASDOHeroStatsHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTASDOHeroStatsHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTASDOHeroStatsHistory(CMsgDOTASDOHeroStatsHistory other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      gameMode_ = other.gameMode_;
      lobbyType_ = other.lobbyType_;
      startTime_ = other.startTime_;
      won_ = other.won_;
      gpm_ = other.gpm_;
      xpm_ = other.xpm_;
      kills_ = other.kills_;
      deaths_ = other.deaths_;
      assists_ = other.assists_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTASDOHeroStatsHistory Clone() {
      return new CMsgDOTASDOHeroStatsHistory(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 2;
    private readonly static uint GameModeDefaultValue = 0;

    private uint gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameMode {
      get { if ((_hasBits0 & 2) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameMode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameMode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lobby_type" field.</summary>
    public const int LobbyTypeFieldNumber = 3;
    private readonly static uint LobbyTypeDefaultValue = 0;

    private uint lobbyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyType {
      get { if ((_hasBits0 & 4) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lobbyType_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lobby_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 4;
    private readonly static uint StartTimeDefaultValue = 0;

    private uint startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { if ((_hasBits0 & 8) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        startTime_ = value;
      }
    }
    /// <summary>Gets whether the "start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "won" field.</summary>
    public const int WonFieldNumber = 5;
    private readonly static bool WonDefaultValue = false;

    private bool won_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Won {
      get { if ((_hasBits0 & 16) != 0) { return won_; } else { return WonDefaultValue; } }
      set {
        _hasBits0 |= 16;
        won_ = value;
      }
    }
    /// <summary>Gets whether the "won" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWon {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "won" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWon() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "gpm" field.</summary>
    public const int GpmFieldNumber = 6;
    private readonly static uint GpmDefaultValue = 0;

    private uint gpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gpm {
      get { if ((_hasBits0 & 32) != 0) { return gpm_; } else { return GpmDefaultValue; } }
      set {
        _hasBits0 |= 32;
        gpm_ = value;
      }
    }
    /// <summary>Gets whether the "gpm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGpm {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "gpm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGpm() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "xpm" field.</summary>
    public const int XpmFieldNumber = 7;
    private readonly static uint XpmDefaultValue = 0;

    private uint xpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Xpm {
      get { if ((_hasBits0 & 64) != 0) { return xpm_; } else { return XpmDefaultValue; } }
      set {
        _hasBits0 |= 64;
        xpm_ = value;
      }
    }
    /// <summary>Gets whether the "xpm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXpm {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "xpm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearXpm() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "kills" field.</summary>
    public const int KillsFieldNumber = 8;
    private readonly static uint KillsDefaultValue = 0;

    private uint kills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kills {
      get { if ((_hasBits0 & 128) != 0) { return kills_; } else { return KillsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        kills_ = value;
      }
    }
    /// <summary>Gets whether the "kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKills {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKills() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "deaths" field.</summary>
    public const int DeathsFieldNumber = 9;
    private readonly static uint DeathsDefaultValue = 0;

    private uint deaths_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deaths {
      get { if ((_hasBits0 & 256) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
      set {
        _hasBits0 |= 256;
        deaths_ = value;
      }
    }
    /// <summary>Gets whether the "deaths" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeaths {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "deaths" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeaths() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "assists" field.</summary>
    public const int AssistsFieldNumber = 10;
    private readonly static uint AssistsDefaultValue = 0;

    private uint assists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Assists {
      get { if ((_hasBits0 & 512) != 0) { return assists_; } else { return AssistsDefaultValue; } }
      set {
        _hasBits0 |= 512;
        assists_ = value;
      }
    }
    /// <summary>Gets whether the "assists" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssists {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "assists" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssists() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTASDOHeroStatsHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTASDOHeroStatsHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (GameMode != other.GameMode) return false;
      if (LobbyType != other.LobbyType) return false;
      if (StartTime != other.StartTime) return false;
      if (Won != other.Won) return false;
      if (Gpm != other.Gpm) return false;
      if (Xpm != other.Xpm) return false;
      if (Kills != other.Kills) return false;
      if (Deaths != other.Deaths) return false;
      if (Assists != other.Assists) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasLobbyType) hash ^= LobbyType.GetHashCode();
      if (HasStartTime) hash ^= StartTime.GetHashCode();
      if (HasWon) hash ^= Won.GetHashCode();
      if (HasGpm) hash ^= Gpm.GetHashCode();
      if (HasXpm) hash ^= Xpm.GetHashCode();
      if (HasKills) hash ^= Kills.GetHashCode();
      if (HasDeaths) hash ^= Deaths.GetHashCode();
      if (HasAssists) hash ^= Assists.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasGameMode) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameMode);
      }
      if (HasLobbyType) {
        output.WriteRawTag(24);
        output.WriteUInt32(LobbyType);
      }
      if (HasStartTime) {
        output.WriteRawTag(32);
        output.WriteUInt32(StartTime);
      }
      if (HasWon) {
        output.WriteRawTag(40);
        output.WriteBool(Won);
      }
      if (HasGpm) {
        output.WriteRawTag(48);
        output.WriteUInt32(Gpm);
      }
      if (HasXpm) {
        output.WriteRawTag(56);
        output.WriteUInt32(Xpm);
      }
      if (HasKills) {
        output.WriteRawTag(64);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(72);
        output.WriteUInt32(Deaths);
      }
      if (HasAssists) {
        output.WriteRawTag(80);
        output.WriteUInt32(Assists);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasGameMode) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameMode);
      }
      if (HasLobbyType) {
        output.WriteRawTag(24);
        output.WriteUInt32(LobbyType);
      }
      if (HasStartTime) {
        output.WriteRawTag(32);
        output.WriteUInt32(StartTime);
      }
      if (HasWon) {
        output.WriteRawTag(40);
        output.WriteBool(Won);
      }
      if (HasGpm) {
        output.WriteRawTag(48);
        output.WriteUInt32(Gpm);
      }
      if (HasXpm) {
        output.WriteRawTag(56);
        output.WriteUInt32(Xpm);
      }
      if (HasKills) {
        output.WriteRawTag(64);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(72);
        output.WriteUInt32(Deaths);
      }
      if (HasAssists) {
        output.WriteRawTag(80);
        output.WriteUInt32(Assists);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasGameMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameMode);
      }
      if (HasLobbyType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LobbyType);
      }
      if (HasStartTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (HasWon) {
        size += 1 + 1;
      }
      if (HasGpm) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gpm);
      }
      if (HasXpm) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Xpm);
      }
      if (HasKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
      }
      if (HasDeaths) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
      }
      if (HasAssists) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTASDOHeroStatsHistory other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasLobbyType) {
        LobbyType = other.LobbyType;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasWon) {
        Won = other.Won;
      }
      if (other.HasGpm) {
        Gpm = other.Gpm;
      }
      if (other.HasXpm) {
        Xpm = other.Xpm;
      }
      if (other.HasKills) {
        Kills = other.Kills;
      }
      if (other.HasDeaths) {
        Deaths = other.Deaths;
      }
      if (other.HasAssists) {
        Assists = other.Assists;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            GameMode = input.ReadUInt32();
            break;
          }
          case 24: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 32: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 40: {
            Won = input.ReadBool();
            break;
          }
          case 48: {
            Gpm = input.ReadUInt32();
            break;
          }
          case 56: {
            Xpm = input.ReadUInt32();
            break;
          }
          case 64: {
            Kills = input.ReadUInt32();
            break;
          }
          case 72: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 80: {
            Assists = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            GameMode = input.ReadUInt32();
            break;
          }
          case 24: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 32: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 40: {
            Won = input.ReadBool();
            break;
          }
          case 48: {
            Gpm = input.ReadUInt32();
            break;
          }
          case 56: {
            Xpm = input.ReadUInt32();
            break;
          }
          case 64: {
            Kills = input.ReadUInt32();
            break;
          }
          case 72: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 80: {
            Assists = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPredictionChoice : pb::IMessage<CMsgPredictionChoice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPredictionChoice> _parser = new pb::MessageParser<CMsgPredictionChoice>(() => new CMsgPredictionChoice());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPredictionChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPredictionChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPredictionChoice(CMsgPredictionChoice other) : this() {
      _hasBits0 = other._hasBits0;
      value_ = other.value_;
      name_ = other.name_;
      minRawValue_ = other.minRawValue_;
      maxRawValue_ = other.maxRawValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPredictionChoice Clone() {
      return new CMsgPredictionChoice(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private readonly static uint ValueDefaultValue = 0;

    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "min_raw_value" field.</summary>
    public const int MinRawValueFieldNumber = 3;
    private readonly static uint MinRawValueDefaultValue = 0;

    private uint minRawValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinRawValue {
      get { if ((_hasBits0 & 2) != 0) { return minRawValue_; } else { return MinRawValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        minRawValue_ = value;
      }
    }
    /// <summary>Gets whether the "min_raw_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinRawValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "min_raw_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinRawValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max_raw_value" field.</summary>
    public const int MaxRawValueFieldNumber = 4;
    private readonly static uint MaxRawValueDefaultValue = 0;

    private uint maxRawValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxRawValue {
      get { if ((_hasBits0 & 4) != 0) { return maxRawValue_; } else { return MaxRawValueDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxRawValue_ = value;
      }
    }
    /// <summary>Gets whether the "max_raw_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxRawValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_raw_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxRawValue() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPredictionChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPredictionChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (Name != other.Name) return false;
      if (MinRawValue != other.MinRawValue) return false;
      if (MaxRawValue != other.MaxRawValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasMinRawValue) hash ^= MinRawValue.GetHashCode();
      if (HasMaxRawValue) hash ^= MaxRawValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasValue) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasMinRawValue) {
        output.WriteRawTag(24);
        output.WriteUInt32(MinRawValue);
      }
      if (HasMaxRawValue) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxRawValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasValue) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasMinRawValue) {
        output.WriteRawTag(24);
        output.WriteUInt32(MinRawValue);
      }
      if (HasMaxRawValue) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxRawValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasMinRawValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinRawValue);
      }
      if (HasMaxRawValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxRawValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPredictionChoice other) {
      if (other == null) {
        return;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasMinRawValue) {
        MinRawValue = other.MinRawValue;
      }
      if (other.HasMaxRawValue) {
        MaxRawValue = other.MaxRawValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MinRawValue = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxRawValue = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MinRawValue = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxRawValue = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgInGamePrediction : pb::IMessage<CMsgInGamePrediction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgInGamePrediction> _parser = new pb::MessageParser<CMsgInGamePrediction>(() => new CMsgInGamePrediction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgInGamePrediction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInGamePrediction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInGamePrediction(CMsgInGamePrediction other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      type_ = other.type_;
      group_ = other.group_;
      question_ = other.question_;
      choices_ = other.choices_.Clone();
      requiredHeroes_ = other.requiredHeroes_.Clone();
      queryName_ = other.queryName_;
      queryValues_ = other.queryValues_.Clone();
      answerResolutionType_ = other.answerResolutionType_;
      pointsToGrant_ = other.pointsToGrant_;
      rewardAction_ = other.rewardAction_;
      debugForceSelection_ = other.debugForceSelection_;
      rawValueType_ = other.rawValueType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgInGamePrediction Clone() {
      return new CMsgInGamePrediction(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EPredictionType TypeDefaultValue = global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EPredictionType.Generic;

    private global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EPredictionType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EPredictionType Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 4;
    private readonly static global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERandomSelectionGroup_t GroupDefaultValue = global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERandomSelectionGroup_t.EarlyGame;

    private global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERandomSelectionGroup_t group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERandomSelectionGroup_t Group {
      get { if ((_hasBits0 & 4) != 0) { return group_; } else { return GroupDefaultValue; } }
      set {
        _hasBits0 |= 4;
        group_ = value;
      }
    }
    /// <summary>Gets whether the "group" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroup {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "group" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroup() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "question" field.</summary>
    public const int QuestionFieldNumber = 5;
    private readonly static string QuestionDefaultValue = "";

    private string question_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Question {
      get { return question_ ?? QuestionDefaultValue; }
      set {
        question_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "question" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestion {
      get { return question_ != null; }
    }
    /// <summary>Clears the value of the "question" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestion() {
      question_ = null;
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgPredictionChoice> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CMsgPredictionChoice.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPredictionChoice> choices_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPredictionChoice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPredictionChoice> Choices {
      get { return choices_; }
    }

    /// <summary>Field number for the "required_heroes" field.</summary>
    public const int RequiredHeroesFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_requiredHeroes_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> requiredHeroes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RequiredHeroes {
      get { return requiredHeroes_; }
    }

    /// <summary>Field number for the "query_name" field.</summary>
    public const int QueryNameFieldNumber = 8;
    private readonly static string QueryNameDefaultValue = "";

    private string queryName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueryName {
      get { return queryName_ ?? QueryNameDefaultValue; }
      set {
        queryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "query_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQueryName {
      get { return queryName_ != null; }
    }
    /// <summary>Clears the value of the "query_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQueryName() {
      queryName_ = null;
    }

    /// <summary>Field number for the "query_values" field.</summary>
    public const int QueryValuesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.QueryKeyValues> _repeated_queryValues_codec
        = pb::FieldCodec.ForMessage(74, global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.QueryKeyValues.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.QueryKeyValues> queryValues_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.QueryKeyValues>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.QueryKeyValues> QueryValues {
      get { return queryValues_; }
    }

    /// <summary>Field number for the "answer_resolution_type" field.</summary>
    public const int AnswerResolutionTypeFieldNumber = 10;
    private readonly static global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EResolutionType_t AnswerResolutionTypeDefaultValue = global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EResolutionType_t.InvalidQuery;

    private global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EResolutionType_t answerResolutionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EResolutionType_t AnswerResolutionType {
      get { if ((_hasBits0 & 8) != 0) { return answerResolutionType_; } else { return AnswerResolutionTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        answerResolutionType_ = value;
      }
    }
    /// <summary>Gets whether the "answer_resolution_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAnswerResolutionType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "answer_resolution_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAnswerResolutionType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "points_to_grant" field.</summary>
    public const int PointsToGrantFieldNumber = 11;
    private readonly static uint PointsToGrantDefaultValue = 0;

    private uint pointsToGrant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PointsToGrant {
      get { if ((_hasBits0 & 16) != 0) { return pointsToGrant_; } else { return PointsToGrantDefaultValue; } }
      set {
        _hasBits0 |= 16;
        pointsToGrant_ = value;
      }
    }
    /// <summary>Gets whether the "points_to_grant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPointsToGrant {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "points_to_grant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPointsToGrant() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "reward_action" field.</summary>
    public const int RewardActionFieldNumber = 12;
    private readonly static uint RewardActionDefaultValue = 0;

    private uint rewardAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardAction {
      get { if ((_hasBits0 & 32) != 0) { return rewardAction_; } else { return RewardActionDefaultValue; } }
      set {
        _hasBits0 |= 32;
        rewardAction_ = value;
      }
    }
    /// <summary>Gets whether the "reward_action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRewardAction {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "reward_action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRewardAction() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "debug_force_selection" field.</summary>
    public const int DebugForceSelectionFieldNumber = 13;
    private readonly static uint DebugForceSelectionDefaultValue = 0;

    private uint debugForceSelection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DebugForceSelection {
      get { if ((_hasBits0 & 64) != 0) { return debugForceSelection_; } else { return DebugForceSelectionDefaultValue; } }
      set {
        _hasBits0 |= 64;
        debugForceSelection_ = value;
      }
    }
    /// <summary>Gets whether the "debug_force_selection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDebugForceSelection {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "debug_force_selection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDebugForceSelection() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "raw_value_type" field.</summary>
    public const int RawValueTypeFieldNumber = 14;
    private readonly static global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERawValueType_t RawValueTypeDefaultValue = global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERawValueType_t.Number;

    private global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERawValueType_t rawValueType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERawValueType_t RawValueType {
      get { if ((_hasBits0 & 128) != 0) { return rawValueType_; } else { return RawValueTypeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        rawValueType_ = value;
      }
    }
    /// <summary>Gets whether the "raw_value_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRawValueType {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "raw_value_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRawValueType() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgInGamePrediction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgInGamePrediction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Group != other.Group) return false;
      if (Question != other.Question) return false;
      if(!choices_.Equals(other.choices_)) return false;
      if(!requiredHeroes_.Equals(other.requiredHeroes_)) return false;
      if (QueryName != other.QueryName) return false;
      if(!queryValues_.Equals(other.queryValues_)) return false;
      if (AnswerResolutionType != other.AnswerResolutionType) return false;
      if (PointsToGrant != other.PointsToGrant) return false;
      if (RewardAction != other.RewardAction) return false;
      if (DebugForceSelection != other.DebugForceSelection) return false;
      if (RawValueType != other.RawValueType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasGroup) hash ^= Group.GetHashCode();
      if (HasQuestion) hash ^= Question.GetHashCode();
      hash ^= choices_.GetHashCode();
      hash ^= requiredHeroes_.GetHashCode();
      if (HasQueryName) hash ^= QueryName.GetHashCode();
      hash ^= queryValues_.GetHashCode();
      if (HasAnswerResolutionType) hash ^= AnswerResolutionType.GetHashCode();
      if (HasPointsToGrant) hash ^= PointsToGrant.GetHashCode();
      if (HasRewardAction) hash ^= RewardAction.GetHashCode();
      if (HasDebugForceSelection) hash ^= DebugForceSelection.GetHashCode();
      if (HasRawValueType) hash ^= RawValueType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (HasGroup) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Group);
      }
      if (HasQuestion) {
        output.WriteRawTag(42);
        output.WriteString(Question);
      }
      choices_.WriteTo(output, _repeated_choices_codec);
      requiredHeroes_.WriteTo(output, _repeated_requiredHeroes_codec);
      if (HasQueryName) {
        output.WriteRawTag(66);
        output.WriteString(QueryName);
      }
      queryValues_.WriteTo(output, _repeated_queryValues_codec);
      if (HasAnswerResolutionType) {
        output.WriteRawTag(80);
        output.WriteEnum((int) AnswerResolutionType);
      }
      if (HasPointsToGrant) {
        output.WriteRawTag(88);
        output.WriteUInt32(PointsToGrant);
      }
      if (HasRewardAction) {
        output.WriteRawTag(96);
        output.WriteUInt32(RewardAction);
      }
      if (HasDebugForceSelection) {
        output.WriteRawTag(104);
        output.WriteUInt32(DebugForceSelection);
      }
      if (HasRawValueType) {
        output.WriteRawTag(112);
        output.WriteEnum((int) RawValueType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (HasGroup) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Group);
      }
      if (HasQuestion) {
        output.WriteRawTag(42);
        output.WriteString(Question);
      }
      choices_.WriteTo(ref output, _repeated_choices_codec);
      requiredHeroes_.WriteTo(ref output, _repeated_requiredHeroes_codec);
      if (HasQueryName) {
        output.WriteRawTag(66);
        output.WriteString(QueryName);
      }
      queryValues_.WriteTo(ref output, _repeated_queryValues_codec);
      if (HasAnswerResolutionType) {
        output.WriteRawTag(80);
        output.WriteEnum((int) AnswerResolutionType);
      }
      if (HasPointsToGrant) {
        output.WriteRawTag(88);
        output.WriteUInt32(PointsToGrant);
      }
      if (HasRewardAction) {
        output.WriteRawTag(96);
        output.WriteUInt32(RewardAction);
      }
      if (HasDebugForceSelection) {
        output.WriteRawTag(104);
        output.WriteUInt32(DebugForceSelection);
      }
      if (HasRawValueType) {
        output.WriteRawTag(112);
        output.WriteEnum((int) RawValueType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasGroup) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Group);
      }
      if (HasQuestion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Question);
      }
      size += choices_.CalculateSize(_repeated_choices_codec);
      size += requiredHeroes_.CalculateSize(_repeated_requiredHeroes_codec);
      if (HasQueryName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryName);
      }
      size += queryValues_.CalculateSize(_repeated_queryValues_codec);
      if (HasAnswerResolutionType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AnswerResolutionType);
      }
      if (HasPointsToGrant) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PointsToGrant);
      }
      if (HasRewardAction) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardAction);
      }
      if (HasDebugForceSelection) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DebugForceSelection);
      }
      if (HasRawValueType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RawValueType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgInGamePrediction other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasGroup) {
        Group = other.Group;
      }
      if (other.HasQuestion) {
        Question = other.Question;
      }
      choices_.Add(other.choices_);
      requiredHeroes_.Add(other.requiredHeroes_);
      if (other.HasQueryName) {
        QueryName = other.QueryName;
      }
      queryValues_.Add(other.queryValues_);
      if (other.HasAnswerResolutionType) {
        AnswerResolutionType = other.AnswerResolutionType;
      }
      if (other.HasPointsToGrant) {
        PointsToGrant = other.PointsToGrant;
      }
      if (other.HasRewardAction) {
        RewardAction = other.RewardAction;
      }
      if (other.HasDebugForceSelection) {
        DebugForceSelection = other.DebugForceSelection;
      }
      if (other.HasRawValueType) {
        RawValueType = other.RawValueType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EPredictionType) input.ReadEnum();
            break;
          }
          case 32: {
            Group = (global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERandomSelectionGroup_t) input.ReadEnum();
            break;
          }
          case 42: {
            Question = input.ReadString();
            break;
          }
          case 50: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
          case 58: {
            requiredHeroes_.AddEntriesFrom(input, _repeated_requiredHeroes_codec);
            break;
          }
          case 66: {
            QueryName = input.ReadString();
            break;
          }
          case 74: {
            queryValues_.AddEntriesFrom(input, _repeated_queryValues_codec);
            break;
          }
          case 80: {
            AnswerResolutionType = (global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EResolutionType_t) input.ReadEnum();
            break;
          }
          case 88: {
            PointsToGrant = input.ReadUInt32();
            break;
          }
          case 96: {
            RewardAction = input.ReadUInt32();
            break;
          }
          case 104: {
            DebugForceSelection = input.ReadUInt32();
            break;
          }
          case 112: {
            RawValueType = (global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERawValueType_t) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EPredictionType) input.ReadEnum();
            break;
          }
          case 32: {
            Group = (global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERandomSelectionGroup_t) input.ReadEnum();
            break;
          }
          case 42: {
            Question = input.ReadString();
            break;
          }
          case 50: {
            choices_.AddEntriesFrom(ref input, _repeated_choices_codec);
            break;
          }
          case 58: {
            requiredHeroes_.AddEntriesFrom(ref input, _repeated_requiredHeroes_codec);
            break;
          }
          case 66: {
            QueryName = input.ReadString();
            break;
          }
          case 74: {
            queryValues_.AddEntriesFrom(ref input, _repeated_queryValues_codec);
            break;
          }
          case 80: {
            AnswerResolutionType = (global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.EResolutionType_t) input.ReadEnum();
            break;
          }
          case 88: {
            PointsToGrant = input.ReadUInt32();
            break;
          }
          case 96: {
            RewardAction = input.ReadUInt32();
            break;
          }
          case 104: {
            DebugForceSelection = input.ReadUInt32();
            break;
          }
          case 112: {
            RawValueType = (global::Steam.Protos.Dota2.CMsgInGamePrediction.Types.ERawValueType_t) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgInGamePrediction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ERawValueType_t {
        [pbr::OriginalName("Number")] Number = 0,
        [pbr::OriginalName("Time")] Time = 1,
      }

      public enum EPredictionType {
        [pbr::OriginalName("Generic")] Generic = 0,
        [pbr::OriginalName("Hero")] Hero = 1,
        [pbr::OriginalName("Team")] Team = 2,
        [pbr::OriginalName("Player")] Player = 3,
        [pbr::OriginalName("Special")] Special = 4,
        [pbr::OriginalName("YesNo")] YesNo = 5,
        [pbr::OriginalName("QualifiersTeam")] QualifiersTeam = 6,
      }

      public enum EResolutionType_t {
        [pbr::OriginalName("InvalidQuery")] InvalidQuery = 0,
        [pbr::OriginalName("FirstToPassQuery")] FirstToPassQuery = 1,
        [pbr::OriginalName("LastToPassQuery")] LastToPassQuery = 2,
        [pbr::OriginalName("LastRemainingQuery")] LastRemainingQuery = 3,
        [pbr::OriginalName("MaxToPassQuery")] MaxToPassQuery = 4,
        [pbr::OriginalName("MinToPassQuery")] MinToPassQuery = 5,
        [pbr::OriginalName("SumQuery")] SumQuery = 6,
        [pbr::OriginalName("MaxTeamSumToPassQuery")] MaxTeamSumToPassQuery = 7,
        [pbr::OriginalName("MinTeamSumToPassQuery")] MinTeamSumToPassQuery = 8,
      }

      public enum ERandomSelectionGroup_t {
        [pbr::OriginalName("EarlyGame")] EarlyGame = 0,
        [pbr::OriginalName("MidGame")] MidGame = 1,
        [pbr::OriginalName("LateGame")] LateGame = 2,
        [pbr::OriginalName("Count")] Count = 3,
      }

      public sealed partial class QueryKeyValues : pb::IMessage<QueryKeyValues>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<QueryKeyValues> _parser = new pb::MessageParser<QueryKeyValues>(() => new QueryKeyValues());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<QueryKeyValues> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgInGamePrediction.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryKeyValues() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryKeyValues(QueryKeyValues other) : this() {
          name_ = other.name_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryKeyValues Clone() {
          return new QueryKeyValues(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private readonly static string ValueDefaultValue = "";

        private string value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_ ?? ValueDefaultValue; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValue {
          get { return value_ != null; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as QueryKeyValues);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(QueryKeyValues other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasName) hash ^= Name.GetHashCode();
          if (HasValue) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasValue) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasValue) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasValue) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(QueryKeyValues other) {
          if (other == null) {
            return;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgDOTASeasonPredictions : pb::IMessage<CMsgDOTASeasonPredictions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTASeasonPredictions> _parser = new pb::MessageParser<CMsgDOTASeasonPredictions>(() => new CMsgDOTASeasonPredictions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTASeasonPredictions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTASeasonPredictions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTASeasonPredictions(CMsgDOTASeasonPredictions other) : this() {
      _hasBits0 = other._hasBits0;
      predictions_ = other.predictions_.Clone();
      inGamePredictions_ = other.inGamePredictions_.Clone();
      inGamePredictionCountPerGame_ = other.inGamePredictionCountPerGame_;
      inGamePredictionVotingPeriodMinutes_ = other.inGamePredictionVotingPeriodMinutes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTASeasonPredictions Clone() {
      return new CMsgDOTASeasonPredictions(this);
    }

    /// <summary>Field number for the "predictions" field.</summary>
    public const int PredictionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction> _repeated_predictions_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction> predictions_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction> Predictions {
      get { return predictions_; }
    }

    /// <summary>Field number for the "in_game_predictions" field.</summary>
    public const int InGamePredictionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgInGamePrediction> _repeated_inGamePredictions_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgInGamePrediction.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgInGamePrediction> inGamePredictions_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgInGamePrediction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgInGamePrediction> InGamePredictions {
      get { return inGamePredictions_; }
    }

    /// <summary>Field number for the "in_game_prediction_count_per_game" field.</summary>
    public const int InGamePredictionCountPerGameFieldNumber = 3;
    private readonly static uint InGamePredictionCountPerGameDefaultValue = 0;

    private uint inGamePredictionCountPerGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InGamePredictionCountPerGame {
      get { if ((_hasBits0 & 1) != 0) { return inGamePredictionCountPerGame_; } else { return InGamePredictionCountPerGameDefaultValue; } }
      set {
        _hasBits0 |= 1;
        inGamePredictionCountPerGame_ = value;
      }
    }
    /// <summary>Gets whether the "in_game_prediction_count_per_game" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInGamePredictionCountPerGame {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "in_game_prediction_count_per_game" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInGamePredictionCountPerGame() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "in_game_prediction_voting_period_minutes" field.</summary>
    public const int InGamePredictionVotingPeriodMinutesFieldNumber = 4;
    private readonly static uint InGamePredictionVotingPeriodMinutesDefaultValue = 0;

    private uint inGamePredictionVotingPeriodMinutes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InGamePredictionVotingPeriodMinutes {
      get { if ((_hasBits0 & 2) != 0) { return inGamePredictionVotingPeriodMinutes_; } else { return InGamePredictionVotingPeriodMinutesDefaultValue; } }
      set {
        _hasBits0 |= 2;
        inGamePredictionVotingPeriodMinutes_ = value;
      }
    }
    /// <summary>Gets whether the "in_game_prediction_voting_period_minutes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInGamePredictionVotingPeriodMinutes {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "in_game_prediction_voting_period_minutes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInGamePredictionVotingPeriodMinutes() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTASeasonPredictions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTASeasonPredictions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!predictions_.Equals(other.predictions_)) return false;
      if(!inGamePredictions_.Equals(other.inGamePredictions_)) return false;
      if (InGamePredictionCountPerGame != other.InGamePredictionCountPerGame) return false;
      if (InGamePredictionVotingPeriodMinutes != other.InGamePredictionVotingPeriodMinutes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= predictions_.GetHashCode();
      hash ^= inGamePredictions_.GetHashCode();
      if (HasInGamePredictionCountPerGame) hash ^= InGamePredictionCountPerGame.GetHashCode();
      if (HasInGamePredictionVotingPeriodMinutes) hash ^= InGamePredictionVotingPeriodMinutes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      predictions_.WriteTo(output, _repeated_predictions_codec);
      inGamePredictions_.WriteTo(output, _repeated_inGamePredictions_codec);
      if (HasInGamePredictionCountPerGame) {
        output.WriteRawTag(24);
        output.WriteUInt32(InGamePredictionCountPerGame);
      }
      if (HasInGamePredictionVotingPeriodMinutes) {
        output.WriteRawTag(32);
        output.WriteUInt32(InGamePredictionVotingPeriodMinutes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      predictions_.WriteTo(ref output, _repeated_predictions_codec);
      inGamePredictions_.WriteTo(ref output, _repeated_inGamePredictions_codec);
      if (HasInGamePredictionCountPerGame) {
        output.WriteRawTag(24);
        output.WriteUInt32(InGamePredictionCountPerGame);
      }
      if (HasInGamePredictionVotingPeriodMinutes) {
        output.WriteRawTag(32);
        output.WriteUInt32(InGamePredictionVotingPeriodMinutes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += predictions_.CalculateSize(_repeated_predictions_codec);
      size += inGamePredictions_.CalculateSize(_repeated_inGamePredictions_codec);
      if (HasInGamePredictionCountPerGame) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InGamePredictionCountPerGame);
      }
      if (HasInGamePredictionVotingPeriodMinutes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InGamePredictionVotingPeriodMinutes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTASeasonPredictions other) {
      if (other == null) {
        return;
      }
      predictions_.Add(other.predictions_);
      inGamePredictions_.Add(other.inGamePredictions_);
      if (other.HasInGamePredictionCountPerGame) {
        InGamePredictionCountPerGame = other.InGamePredictionCountPerGame;
      }
      if (other.HasInGamePredictionVotingPeriodMinutes) {
        InGamePredictionVotingPeriodMinutes = other.InGamePredictionVotingPeriodMinutes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            predictions_.AddEntriesFrom(input, _repeated_predictions_codec);
            break;
          }
          case 18: {
            inGamePredictions_.AddEntriesFrom(input, _repeated_inGamePredictions_codec);
            break;
          }
          case 24: {
            InGamePredictionCountPerGame = input.ReadUInt32();
            break;
          }
          case 32: {
            InGamePredictionVotingPeriodMinutes = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            predictions_.AddEntriesFrom(ref input, _repeated_predictions_codec);
            break;
          }
          case 18: {
            inGamePredictions_.AddEntriesFrom(ref input, _repeated_inGamePredictions_codec);
            break;
          }
          case 24: {
            InGamePredictionCountPerGame = input.ReadUInt32();
            break;
          }
          case 32: {
            InGamePredictionVotingPeriodMinutes = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTASeasonPredictions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Prediction : pb::IMessage<Prediction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Prediction> _parser = new pb::MessageParser<Prediction>(() => new Prediction());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Prediction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction(Prediction other) : this() {
          _hasBits0 = other._hasBits0;
          type_ = other.type_;
          question_ = other.question_;
          choices_ = other.choices_.Clone();
          selectionId_ = other.selectionId_;
          startDate_ = other.startDate_;
          lockDate_ = other.lockDate_;
          reward_ = other.reward_;
          answerType_ = other.answerType_;
          answerId_ = other.answerId_;
          answers_ = other.answers_.Clone();
          queryName_ = other.queryName_;
          lockOnSelectionId_ = other.lockOnSelectionId_;
          lockOnSelectionValue_ = other.lockOnSelectionValue_;
          lockOnSelectionSet_ = other.lockOnSelectionSet_;
          useAnswerValueRanges_ = other.useAnswerValueRanges_;
          region_ = other.region_;
          phases_ = other.phases_.Clone();
          rewardEvent_ = other.rewardEvent_;
          leagueNodeId_ = other.leagueNodeId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction Clone() {
          return new Prediction(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EPredictionType TypeDefaultValue = global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EPredictionType.Generic;

        private global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EPredictionType type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EPredictionType Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "question" field.</summary>
        public const int QuestionFieldNumber = 2;
        private readonly static string QuestionDefaultValue = "";

        private string question_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Question {
          get { return question_ ?? QuestionDefaultValue; }
          set {
            question_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "question" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQuestion {
          get { return question_ != null; }
        }
        /// <summary>Clears the value of the "question" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuestion() {
          question_ = null;
        }

        /// <summary>Field number for the "choices" field.</summary>
        public const int ChoicesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgPredictionChoice> _repeated_choices_codec
            = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgPredictionChoice.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPredictionChoice> choices_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPredictionChoice>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPredictionChoice> Choices {
          get { return choices_; }
        }

        /// <summary>Field number for the "selection_id" field.</summary>
        public const int SelectionIdFieldNumber = 4;
        private readonly static uint SelectionIdDefaultValue = 0;

        private uint selectionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SelectionId {
          get { if ((_hasBits0 & 2) != 0) { return selectionId_; } else { return SelectionIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            selectionId_ = value;
          }
        }
        /// <summary>Gets whether the "selection_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelectionId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "selection_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelectionId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "start_date" field.</summary>
        public const int StartDateFieldNumber = 5;
        private readonly static uint StartDateDefaultValue = 0;

        private uint startDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartDate {
          get { if ((_hasBits0 & 4) != 0) { return startDate_; } else { return StartDateDefaultValue; } }
          set {
            _hasBits0 |= 4;
            startDate_ = value;
          }
        }
        /// <summary>Gets whether the "start_date" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStartDate {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "start_date" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStartDate() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "lock_date" field.</summary>
        public const int LockDateFieldNumber = 6;
        private readonly static uint LockDateDefaultValue = 0;

        private uint lockDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LockDate {
          get { if ((_hasBits0 & 8) != 0) { return lockDate_; } else { return LockDateDefaultValue; } }
          set {
            _hasBits0 |= 8;
            lockDate_ = value;
          }
        }
        /// <summary>Gets whether the "lock_date" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLockDate {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "lock_date" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLockDate() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "reward" field.</summary>
        public const int RewardFieldNumber = 7;
        private readonly static uint RewardDefaultValue = 0;

        private uint reward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Reward {
          get { if ((_hasBits0 & 16) != 0) { return reward_; } else { return RewardDefaultValue; } }
          set {
            _hasBits0 |= 16;
            reward_ = value;
          }
        }
        /// <summary>Gets whether the "reward" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReward {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "reward" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReward() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "answer_type" field.</summary>
        public const int AnswerTypeFieldNumber = 8;
        private readonly static global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EAnswerType AnswerTypeDefaultValue = global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EAnswerType.SingleInt;

        private global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EAnswerType answerType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EAnswerType AnswerType {
          get { if ((_hasBits0 & 32) != 0) { return answerType_; } else { return AnswerTypeDefaultValue; } }
          set {
            _hasBits0 |= 32;
            answerType_ = value;
          }
        }
        /// <summary>Gets whether the "answer_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAnswerType {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "answer_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAnswerType() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "answer_id" field.</summary>
        public const int AnswerIdFieldNumber = 9;
        private readonly static uint AnswerIdDefaultValue = 0;

        private uint answerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AnswerId {
          get { if ((_hasBits0 & 64) != 0) { return answerId_; } else { return AnswerIdDefaultValue; } }
          set {
            _hasBits0 |= 64;
            answerId_ = value;
          }
        }
        /// <summary>Gets whether the "answer_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAnswerId {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "answer_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAnswerId() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "answers" field.</summary>
        public const int AnswersFieldNumber = 10;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.Answers> _repeated_answers_codec
            = pb::FieldCodec.ForMessage(82, global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.Answers.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.Answers> answers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.Answers>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.Answers> Answers {
          get { return answers_; }
        }

        /// <summary>Field number for the "query_name" field.</summary>
        public const int QueryNameFieldNumber = 11;
        private readonly static string QueryNameDefaultValue = "";

        private string queryName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string QueryName {
          get { return queryName_ ?? QueryNameDefaultValue; }
          set {
            queryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "query_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQueryName {
          get { return queryName_ != null; }
        }
        /// <summary>Clears the value of the "query_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQueryName() {
          queryName_ = null;
        }

        /// <summary>Field number for the "lock_on_selection_id" field.</summary>
        public const int LockOnSelectionIdFieldNumber = 13;
        private readonly static uint LockOnSelectionIdDefaultValue = 0;

        private uint lockOnSelectionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LockOnSelectionId {
          get { if ((_hasBits0 & 128) != 0) { return lockOnSelectionId_; } else { return LockOnSelectionIdDefaultValue; } }
          set {
            _hasBits0 |= 128;
            lockOnSelectionId_ = value;
          }
        }
        /// <summary>Gets whether the "lock_on_selection_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLockOnSelectionId {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "lock_on_selection_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLockOnSelectionId() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "lock_on_selection_value" field.</summary>
        public const int LockOnSelectionValueFieldNumber = 14;
        private readonly static uint LockOnSelectionValueDefaultValue = 0;

        private uint lockOnSelectionValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LockOnSelectionValue {
          get { if ((_hasBits0 & 256) != 0) { return lockOnSelectionValue_; } else { return LockOnSelectionValueDefaultValue; } }
          set {
            _hasBits0 |= 256;
            lockOnSelectionValue_ = value;
          }
        }
        /// <summary>Gets whether the "lock_on_selection_value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLockOnSelectionValue {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "lock_on_selection_value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLockOnSelectionValue() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "lock_on_selection_set" field.</summary>
        public const int LockOnSelectionSetFieldNumber = 15;
        private readonly static bool LockOnSelectionSetDefaultValue = false;

        private bool lockOnSelectionSet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool LockOnSelectionSet {
          get { if ((_hasBits0 & 512) != 0) { return lockOnSelectionSet_; } else { return LockOnSelectionSetDefaultValue; } }
          set {
            _hasBits0 |= 512;
            lockOnSelectionSet_ = value;
          }
        }
        /// <summary>Gets whether the "lock_on_selection_set" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLockOnSelectionSet {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "lock_on_selection_set" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLockOnSelectionSet() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "use_answer_value_ranges" field.</summary>
        public const int UseAnswerValueRangesFieldNumber = 16;
        private readonly static bool UseAnswerValueRangesDefaultValue = false;

        private bool useAnswerValueRanges_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UseAnswerValueRanges {
          get { if ((_hasBits0 & 1024) != 0) { return useAnswerValueRanges_; } else { return UseAnswerValueRangesDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            useAnswerValueRanges_ = value;
          }
        }
        /// <summary>Gets whether the "use_answer_value_ranges" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUseAnswerValueRanges {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "use_answer_value_ranges" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUseAnswerValueRanges() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "region" field.</summary>
        public const int RegionFieldNumber = 17;
        private readonly static global::Steam.Protos.Dota2.ELeagueRegion RegionDefaultValue = global::Steam.Protos.Dota2.ELeagueRegion.LeagueRegionUnset;

        private global::Steam.Protos.Dota2.ELeagueRegion region_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.ELeagueRegion Region {
          get { if ((_hasBits0 & 2048) != 0) { return region_; } else { return RegionDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            region_ = value;
          }
        }
        /// <summary>Gets whether the "region" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRegion {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "region" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRegion() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "phases" field.</summary>
        public const int PhasesFieldNumber = 18;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.ELeaguePhase> _repeated_phases_codec
            = pb::FieldCodec.ForEnum(144, x => (int) x, x => (global::Steam.Protos.Dota2.ELeaguePhase) x);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.ELeaguePhase> phases_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.ELeaguePhase>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.ELeaguePhase> Phases {
          get { return phases_; }
        }

        /// <summary>Field number for the "reward_event" field.</summary>
        public const int RewardEventFieldNumber = 19;
        private readonly static global::Steam.Protos.Dota2.EEvent RewardEventDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

        private global::Steam.Protos.Dota2.EEvent rewardEvent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.EEvent RewardEvent {
          get { if ((_hasBits0 & 4096) != 0) { return rewardEvent_; } else { return RewardEventDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            rewardEvent_ = value;
          }
        }
        /// <summary>Gets whether the "reward_event" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRewardEvent {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "reward_event" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRewardEvent() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "league_node_id" field.</summary>
        public const int LeagueNodeIdFieldNumber = 20;
        private readonly static uint LeagueNodeIdDefaultValue = 0;

        private uint leagueNodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeagueNodeId {
          get { if ((_hasBits0 & 8192) != 0) { return leagueNodeId_; } else { return LeagueNodeIdDefaultValue; } }
          set {
            _hasBits0 |= 8192;
            leagueNodeId_ = value;
          }
        }
        /// <summary>Gets whether the "league_node_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeagueNodeId {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "league_node_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeagueNodeId() {
          _hasBits0 &= ~8192;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Prediction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Prediction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Question != other.Question) return false;
          if(!choices_.Equals(other.choices_)) return false;
          if (SelectionId != other.SelectionId) return false;
          if (StartDate != other.StartDate) return false;
          if (LockDate != other.LockDate) return false;
          if (Reward != other.Reward) return false;
          if (AnswerType != other.AnswerType) return false;
          if (AnswerId != other.AnswerId) return false;
          if(!answers_.Equals(other.answers_)) return false;
          if (QueryName != other.QueryName) return false;
          if (LockOnSelectionId != other.LockOnSelectionId) return false;
          if (LockOnSelectionValue != other.LockOnSelectionValue) return false;
          if (LockOnSelectionSet != other.LockOnSelectionSet) return false;
          if (UseAnswerValueRanges != other.UseAnswerValueRanges) return false;
          if (Region != other.Region) return false;
          if(!phases_.Equals(other.phases_)) return false;
          if (RewardEvent != other.RewardEvent) return false;
          if (LeagueNodeId != other.LeagueNodeId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasType) hash ^= Type.GetHashCode();
          if (HasQuestion) hash ^= Question.GetHashCode();
          hash ^= choices_.GetHashCode();
          if (HasSelectionId) hash ^= SelectionId.GetHashCode();
          if (HasStartDate) hash ^= StartDate.GetHashCode();
          if (HasLockDate) hash ^= LockDate.GetHashCode();
          if (HasReward) hash ^= Reward.GetHashCode();
          if (HasAnswerType) hash ^= AnswerType.GetHashCode();
          if (HasAnswerId) hash ^= AnswerId.GetHashCode();
          hash ^= answers_.GetHashCode();
          if (HasQueryName) hash ^= QueryName.GetHashCode();
          if (HasLockOnSelectionId) hash ^= LockOnSelectionId.GetHashCode();
          if (HasLockOnSelectionValue) hash ^= LockOnSelectionValue.GetHashCode();
          if (HasLockOnSelectionSet) hash ^= LockOnSelectionSet.GetHashCode();
          if (HasUseAnswerValueRanges) hash ^= UseAnswerValueRanges.GetHashCode();
          if (HasRegion) hash ^= Region.GetHashCode();
          hash ^= phases_.GetHashCode();
          if (HasRewardEvent) hash ^= RewardEvent.GetHashCode();
          if (HasLeagueNodeId) hash ^= LeagueNodeId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (HasQuestion) {
            output.WriteRawTag(18);
            output.WriteString(Question);
          }
          choices_.WriteTo(output, _repeated_choices_codec);
          if (HasSelectionId) {
            output.WriteRawTag(32);
            output.WriteUInt32(SelectionId);
          }
          if (HasStartDate) {
            output.WriteRawTag(40);
            output.WriteUInt32(StartDate);
          }
          if (HasLockDate) {
            output.WriteRawTag(48);
            output.WriteUInt32(LockDate);
          }
          if (HasReward) {
            output.WriteRawTag(56);
            output.WriteUInt32(Reward);
          }
          if (HasAnswerType) {
            output.WriteRawTag(64);
            output.WriteEnum((int) AnswerType);
          }
          if (HasAnswerId) {
            output.WriteRawTag(72);
            output.WriteUInt32(AnswerId);
          }
          answers_.WriteTo(output, _repeated_answers_codec);
          if (HasQueryName) {
            output.WriteRawTag(90);
            output.WriteString(QueryName);
          }
          if (HasLockOnSelectionId) {
            output.WriteRawTag(104);
            output.WriteUInt32(LockOnSelectionId);
          }
          if (HasLockOnSelectionValue) {
            output.WriteRawTag(112);
            output.WriteUInt32(LockOnSelectionValue);
          }
          if (HasLockOnSelectionSet) {
            output.WriteRawTag(120);
            output.WriteBool(LockOnSelectionSet);
          }
          if (HasUseAnswerValueRanges) {
            output.WriteRawTag(128, 1);
            output.WriteBool(UseAnswerValueRanges);
          }
          if (HasRegion) {
            output.WriteRawTag(136, 1);
            output.WriteEnum((int) Region);
          }
          phases_.WriteTo(output, _repeated_phases_codec);
          if (HasRewardEvent) {
            output.WriteRawTag(152, 1);
            output.WriteEnum((int) RewardEvent);
          }
          if (HasLeagueNodeId) {
            output.WriteRawTag(160, 1);
            output.WriteUInt32(LeagueNodeId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (HasQuestion) {
            output.WriteRawTag(18);
            output.WriteString(Question);
          }
          choices_.WriteTo(ref output, _repeated_choices_codec);
          if (HasSelectionId) {
            output.WriteRawTag(32);
            output.WriteUInt32(SelectionId);
          }
          if (HasStartDate) {
            output.WriteRawTag(40);
            output.WriteUInt32(StartDate);
          }
          if (HasLockDate) {
            output.WriteRawTag(48);
            output.WriteUInt32(LockDate);
          }
          if (HasReward) {
            output.WriteRawTag(56);
            output.WriteUInt32(Reward);
          }
          if (HasAnswerType) {
            output.WriteRawTag(64);
            output.WriteEnum((int) AnswerType);
          }
          if (HasAnswerId) {
            output.WriteRawTag(72);
            output.WriteUInt32(AnswerId);
          }
          answers_.WriteTo(ref output, _repeated_answers_codec);
          if (HasQueryName) {
            output.WriteRawTag(90);
            output.WriteString(QueryName);
          }
          if (HasLockOnSelectionId) {
            output.WriteRawTag(104);
            output.WriteUInt32(LockOnSelectionId);
          }
          if (HasLockOnSelectionValue) {
            output.WriteRawTag(112);
            output.WriteUInt32(LockOnSelectionValue);
          }
          if (HasLockOnSelectionSet) {
            output.WriteRawTag(120);
            output.WriteBool(LockOnSelectionSet);
          }
          if (HasUseAnswerValueRanges) {
            output.WriteRawTag(128, 1);
            output.WriteBool(UseAnswerValueRanges);
          }
          if (HasRegion) {
            output.WriteRawTag(136, 1);
            output.WriteEnum((int) Region);
          }
          phases_.WriteTo(ref output, _repeated_phases_codec);
          if (HasRewardEvent) {
            output.WriteRawTag(152, 1);
            output.WriteEnum((int) RewardEvent);
          }
          if (HasLeagueNodeId) {
            output.WriteRawTag(160, 1);
            output.WriteUInt32(LeagueNodeId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (HasQuestion) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Question);
          }
          size += choices_.CalculateSize(_repeated_choices_codec);
          if (HasSelectionId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectionId);
          }
          if (HasStartDate) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartDate);
          }
          if (HasLockDate) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LockDate);
          }
          if (HasReward) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reward);
          }
          if (HasAnswerType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AnswerType);
          }
          if (HasAnswerId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AnswerId);
          }
          size += answers_.CalculateSize(_repeated_answers_codec);
          if (HasQueryName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryName);
          }
          if (HasLockOnSelectionId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LockOnSelectionId);
          }
          if (HasLockOnSelectionValue) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LockOnSelectionValue);
          }
          if (HasLockOnSelectionSet) {
            size += 1 + 1;
          }
          if (HasUseAnswerValueRanges) {
            size += 2 + 1;
          }
          if (HasRegion) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Region);
          }
          size += phases_.CalculateSize(_repeated_phases_codec);
          if (HasRewardEvent) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RewardEvent);
          }
          if (HasLeagueNodeId) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeagueNodeId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Prediction other) {
          if (other == null) {
            return;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasQuestion) {
            Question = other.Question;
          }
          choices_.Add(other.choices_);
          if (other.HasSelectionId) {
            SelectionId = other.SelectionId;
          }
          if (other.HasStartDate) {
            StartDate = other.StartDate;
          }
          if (other.HasLockDate) {
            LockDate = other.LockDate;
          }
          if (other.HasReward) {
            Reward = other.Reward;
          }
          if (other.HasAnswerType) {
            AnswerType = other.AnswerType;
          }
          if (other.HasAnswerId) {
            AnswerId = other.AnswerId;
          }
          answers_.Add(other.answers_);
          if (other.HasQueryName) {
            QueryName = other.QueryName;
          }
          if (other.HasLockOnSelectionId) {
            LockOnSelectionId = other.LockOnSelectionId;
          }
          if (other.HasLockOnSelectionValue) {
            LockOnSelectionValue = other.LockOnSelectionValue;
          }
          if (other.HasLockOnSelectionSet) {
            LockOnSelectionSet = other.LockOnSelectionSet;
          }
          if (other.HasUseAnswerValueRanges) {
            UseAnswerValueRanges = other.UseAnswerValueRanges;
          }
          if (other.HasRegion) {
            Region = other.Region;
          }
          phases_.Add(other.phases_);
          if (other.HasRewardEvent) {
            RewardEvent = other.RewardEvent;
          }
          if (other.HasLeagueNodeId) {
            LeagueNodeId = other.LeagueNodeId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EPredictionType) input.ReadEnum();
                break;
              }
              case 18: {
                Question = input.ReadString();
                break;
              }
              case 26: {
                choices_.AddEntriesFrom(input, _repeated_choices_codec);
                break;
              }
              case 32: {
                SelectionId = input.ReadUInt32();
                break;
              }
              case 40: {
                StartDate = input.ReadUInt32();
                break;
              }
              case 48: {
                LockDate = input.ReadUInt32();
                break;
              }
              case 56: {
                Reward = input.ReadUInt32();
                break;
              }
              case 64: {
                AnswerType = (global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EAnswerType) input.ReadEnum();
                break;
              }
              case 72: {
                AnswerId = input.ReadUInt32();
                break;
              }
              case 82: {
                answers_.AddEntriesFrom(input, _repeated_answers_codec);
                break;
              }
              case 90: {
                QueryName = input.ReadString();
                break;
              }
              case 104: {
                LockOnSelectionId = input.ReadUInt32();
                break;
              }
              case 112: {
                LockOnSelectionValue = input.ReadUInt32();
                break;
              }
              case 120: {
                LockOnSelectionSet = input.ReadBool();
                break;
              }
              case 128: {
                UseAnswerValueRanges = input.ReadBool();
                break;
              }
              case 136: {
                Region = (global::Steam.Protos.Dota2.ELeagueRegion) input.ReadEnum();
                break;
              }
              case 146:
              case 144: {
                phases_.AddEntriesFrom(input, _repeated_phases_codec);
                break;
              }
              case 152: {
                RewardEvent = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
                break;
              }
              case 160: {
                LeagueNodeId = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Type = (global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EPredictionType) input.ReadEnum();
                break;
              }
              case 18: {
                Question = input.ReadString();
                break;
              }
              case 26: {
                choices_.AddEntriesFrom(ref input, _repeated_choices_codec);
                break;
              }
              case 32: {
                SelectionId = input.ReadUInt32();
                break;
              }
              case 40: {
                StartDate = input.ReadUInt32();
                break;
              }
              case 48: {
                LockDate = input.ReadUInt32();
                break;
              }
              case 56: {
                Reward = input.ReadUInt32();
                break;
              }
              case 64: {
                AnswerType = (global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Types.EAnswerType) input.ReadEnum();
                break;
              }
              case 72: {
                AnswerId = input.ReadUInt32();
                break;
              }
              case 82: {
                answers_.AddEntriesFrom(ref input, _repeated_answers_codec);
                break;
              }
              case 90: {
                QueryName = input.ReadString();
                break;
              }
              case 104: {
                LockOnSelectionId = input.ReadUInt32();
                break;
              }
              case 112: {
                LockOnSelectionValue = input.ReadUInt32();
                break;
              }
              case 120: {
                LockOnSelectionSet = input.ReadBool();
                break;
              }
              case 128: {
                UseAnswerValueRanges = input.ReadBool();
                break;
              }
              case 136: {
                Region = (global::Steam.Protos.Dota2.ELeagueRegion) input.ReadEnum();
                break;
              }
              case 146:
              case 144: {
                phases_.AddEntriesFrom(ref input, _repeated_phases_codec);
                break;
              }
              case 152: {
                RewardEvent = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
                break;
              }
              case 160: {
                LeagueNodeId = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Prediction message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum EPredictionType {
            [pbr::OriginalName("Generic")] Generic = 0,
            [pbr::OriginalName("Hero")] Hero = 1,
            [pbr::OriginalName("Team")] Team = 2,
            [pbr::OriginalName("Player")] Player = 3,
            [pbr::OriginalName("Special")] Special = 4,
            [pbr::OriginalName("YesNo")] YesNo = 5,
            [pbr::OriginalName("QualifiersTeam")] QualifiersTeam = 6,
            [pbr::OriginalName("LastChanceTeam")] LastChanceTeam = 7,
          }

          public enum EAnswerType {
            [pbr::OriginalName("SingleInt")] SingleInt = 0,
            [pbr::OriginalName("SingleFloat")] SingleFloat = 1,
            [pbr::OriginalName("MultipleInt")] MultipleInt = 2,
            [pbr::OriginalName("MultipleFloat")] MultipleFloat = 3,
            [pbr::OriginalName("AnswerTeam")] AnswerTeam = 4,
            [pbr::OriginalName("SingleTime")] SingleTime = 5,
            [pbr::OriginalName("MultipleTime")] MultipleTime = 6,
            [pbr::OriginalName("NoAnswer")] NoAnswer = 7,
          }

          public sealed partial class Answers : pb::IMessage<Answers>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Answers> _parser = new pb::MessageParser<Answers>(() => new Answers());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Answers> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTASeasonPredictions.Types.Prediction.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Answers() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Answers(Answers other) : this() {
              _hasBits0 = other._hasBits0;
              answerId_ = other.answerId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Answers Clone() {
              return new Answers(this);
            }

            /// <summary>Field number for the "answer_id" field.</summary>
            public const int AnswerIdFieldNumber = 1;
            private readonly static uint AnswerIdDefaultValue = 0;

            private uint answerId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AnswerId {
              get { if ((_hasBits0 & 1) != 0) { return answerId_; } else { return AnswerIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                answerId_ = value;
              }
            }
            /// <summary>Gets whether the "answer_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasAnswerId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "answer_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearAnswerId() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Answers);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Answers other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (AnswerId != other.AnswerId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasAnswerId) hash ^= AnswerId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasAnswerId) {
                output.WriteRawTag(8);
                output.WriteUInt32(AnswerId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasAnswerId) {
                output.WriteRawTag(8);
                output.WriteUInt32(AnswerId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasAnswerId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AnswerId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Answers other) {
              if (other == null) {
                return;
              }
              if (other.HasAnswerId) {
                AnswerId = other.AnswerId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    AnswerId = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    AnswerId = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CMsgAvailablePredictions : pb::IMessage<CMsgAvailablePredictions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgAvailablePredictions> _parser = new pb::MessageParser<CMsgAvailablePredictions>(() => new CMsgAvailablePredictions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgAvailablePredictions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAvailablePredictions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAvailablePredictions(CMsgAvailablePredictions other) : this() {
      matchPredictions_ = other.matchPredictions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAvailablePredictions Clone() {
      return new CMsgAvailablePredictions(this);
    }

    /// <summary>Field number for the "match_predictions" field.</summary>
    public const int MatchPredictionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgAvailablePredictions.Types.MatchPrediction> _repeated_matchPredictions_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgAvailablePredictions.Types.MatchPrediction.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAvailablePredictions.Types.MatchPrediction> matchPredictions_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAvailablePredictions.Types.MatchPrediction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAvailablePredictions.Types.MatchPrediction> MatchPredictions {
      get { return matchPredictions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgAvailablePredictions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgAvailablePredictions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matchPredictions_.Equals(other.matchPredictions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matchPredictions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      matchPredictions_.WriteTo(output, _repeated_matchPredictions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      matchPredictions_.WriteTo(ref output, _repeated_matchPredictions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matchPredictions_.CalculateSize(_repeated_matchPredictions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgAvailablePredictions other) {
      if (other == null) {
        return;
      }
      matchPredictions_.Add(other.matchPredictions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matchPredictions_.AddEntriesFrom(input, _repeated_matchPredictions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            matchPredictions_.AddEntriesFrom(ref input, _repeated_matchPredictions_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgAvailablePredictions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MatchPrediction : pb::IMessage<MatchPrediction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MatchPrediction> _parser = new pb::MessageParser<MatchPrediction>(() => new MatchPrediction());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchPrediction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgAvailablePredictions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchPrediction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchPrediction(MatchPrediction other) : this() {
          _hasBits0 = other._hasBits0;
          matchId_ = other.matchId_;
          predictions_ = other.predictions_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchPrediction Clone() {
          return new MatchPrediction(this);
        }

        /// <summary>Field number for the "match_id" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private readonly static ulong MatchIdDefaultValue = 0UL;

        private ulong matchId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong MatchId {
          get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            matchId_ = value;
          }
        }
        /// <summary>Gets whether the "match_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMatchId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "match_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMatchId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "predictions" field.</summary>
        public const int PredictionsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgInGamePrediction> _repeated_predictions_codec
            = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgInGamePrediction.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgInGamePrediction> predictions_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgInGamePrediction>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgInGamePrediction> Predictions {
          get { return predictions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MatchPrediction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchPrediction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MatchId != other.MatchId) return false;
          if(!predictions_.Equals(other.predictions_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMatchId) hash ^= MatchId.GetHashCode();
          hash ^= predictions_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMatchId) {
            output.WriteRawTag(8);
            output.WriteUInt64(MatchId);
          }
          predictions_.WriteTo(output, _repeated_predictions_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMatchId) {
            output.WriteRawTag(8);
            output.WriteUInt64(MatchId);
          }
          predictions_.WriteTo(ref output, _repeated_predictions_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasMatchId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
          }
          size += predictions_.CalculateSize(_repeated_predictions_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchPrediction other) {
          if (other == null) {
            return;
          }
          if (other.HasMatchId) {
            MatchId = other.MatchId;
          }
          predictions_.Add(other.predictions_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MatchId = input.ReadUInt64();
                break;
              }
              case 18: {
                predictions_.AddEntriesFrom(input, _repeated_predictions_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                MatchId = input.ReadUInt64();
                break;
              }
              case 18: {
                predictions_.AddEntriesFrom(ref input, _repeated_predictions_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgLeagueWatchedGames : pb::IMessage<CMsgLeagueWatchedGames>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLeagueWatchedGames> _parser = new pb::MessageParser<CMsgLeagueWatchedGames>(() => new CMsgLeagueWatchedGames());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLeagueWatchedGames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeagueWatchedGames() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeagueWatchedGames(CMsgLeagueWatchedGames other) : this() {
      leagues_ = other.leagues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeagueWatchedGames Clone() {
      return new CMsgLeagueWatchedGames(this);
    }

    /// <summary>Field number for the "leagues" field.</summary>
    public const int LeaguesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.League> _repeated_leagues_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.League.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.League> leagues_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.League>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.League> Leagues {
      get { return leagues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLeagueWatchedGames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLeagueWatchedGames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!leagues_.Equals(other.leagues_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= leagues_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      leagues_.WriteTo(output, _repeated_leagues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      leagues_.WriteTo(ref output, _repeated_leagues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += leagues_.CalculateSize(_repeated_leagues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLeagueWatchedGames other) {
      if (other == null) {
        return;
      }
      leagues_.Add(other.leagues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            leagues_.AddEntriesFrom(input, _repeated_leagues_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            leagues_.AddEntriesFrom(ref input, _repeated_leagues_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgLeagueWatchedGames message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Series : pb::IMessage<Series>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Series> _parser = new pb::MessageParser<Series>(() => new Series());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Series> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Series() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Series(Series other) : this() {
          _hasBits0 = other._hasBits0;
          nodeId_ = other.nodeId_;
          game_ = other.game_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Series Clone() {
          return new Series(this);
        }

        /// <summary>Field number for the "node_id" field.</summary>
        public const int NodeIdFieldNumber = 1;
        private readonly static uint NodeIdDefaultValue = 0;

        private uint nodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NodeId {
          get { if ((_hasBits0 & 1) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            nodeId_ = value;
          }
        }
        /// <summary>Gets whether the "node_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNodeId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "node_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNodeId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "game" field.</summary>
        public const int GameFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_game_codec
            = pb::FieldCodec.ForUInt32(16);
        private readonly pbc::RepeatedField<uint> game_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Game {
          get { return game_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Series);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Series other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NodeId != other.NodeId) return false;
          if(!game_.Equals(other.game_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasNodeId) hash ^= NodeId.GetHashCode();
          hash ^= game_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasNodeId) {
            output.WriteRawTag(8);
            output.WriteUInt32(NodeId);
          }
          game_.WriteTo(output, _repeated_game_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasNodeId) {
            output.WriteRawTag(8);
            output.WriteUInt32(NodeId);
          }
          game_.WriteTo(ref output, _repeated_game_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasNodeId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
          }
          size += game_.CalculateSize(_repeated_game_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Series other) {
          if (other == null) {
            return;
          }
          if (other.HasNodeId) {
            NodeId = other.NodeId;
          }
          game_.Add(other.game_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                NodeId = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                game_.AddEntriesFrom(input, _repeated_game_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                NodeId = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                game_.AddEntriesFrom(ref input, _repeated_game_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class League : pb::IMessage<League>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<League> _parser = new pb::MessageParser<League>(() => new League());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<League> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public League() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public League(League other) : this() {
          _hasBits0 = other._hasBits0;
          leagueId_ = other.leagueId_;
          series_ = other.series_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public League Clone() {
          return new League(this);
        }

        /// <summary>Field number for the "league_id" field.</summary>
        public const int LeagueIdFieldNumber = 1;
        private readonly static uint LeagueIdDefaultValue = 0;

        private uint leagueId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeagueId {
          get { if ((_hasBits0 & 1) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            leagueId_ = value;
          }
        }
        /// <summary>Gets whether the "league_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeagueId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "league_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeagueId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "series" field.</summary>
        public const int SeriesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.Series> _repeated_series_codec
            = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.Series.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.Series> series_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.Series>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLeagueWatchedGames.Types.Series> Series {
          get { return series_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as League);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(League other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LeagueId != other.LeagueId) return false;
          if(!series_.Equals(other.series_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasLeagueId) hash ^= LeagueId.GetHashCode();
          hash ^= series_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasLeagueId) {
            output.WriteRawTag(8);
            output.WriteUInt32(LeagueId);
          }
          series_.WriteTo(output, _repeated_series_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasLeagueId) {
            output.WriteRawTag(8);
            output.WriteUInt32(LeagueId);
          }
          series_.WriteTo(ref output, _repeated_series_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasLeagueId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
          }
          size += series_.CalculateSize(_repeated_series_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(League other) {
          if (other == null) {
            return;
          }
          if (other.HasLeagueId) {
            LeagueId = other.LeagueId;
          }
          series_.Add(other.series_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                LeagueId = input.ReadUInt32();
                break;
              }
              case 18: {
                series_.AddEntriesFrom(input, _repeated_series_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                LeagueId = input.ReadUInt32();
                break;
              }
              case 18: {
                series_.AddEntriesFrom(ref input, _repeated_series_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgDOTAMatch : pb::IMessage<CMsgDOTAMatch>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAMatch> _parser = new pb::MessageParser<CMsgDOTAMatch>(() => new CMsgDOTAMatch());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAMatch(CMsgDOTAMatch other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      duration_ = other.duration_;
      starttime_ = other.starttime_;
      players_ = other.players_.Clone();
      matchId_ = other.matchId_;
      towerStatus_ = other.towerStatus_.Clone();
      barracksStatus_ = other.barracksStatus_.Clone();
      cluster_ = other.cluster_;
      firstBloodTime_ = other.firstBloodTime_;
      replaySalt_ = other.replaySalt_;
      serverIp_ = other.serverIp_;
      serverPort_ = other.serverPort_;
      lobbyType_ = other.lobbyType_;
      humanPlayers_ = other.humanPlayers_;
      averageSkill_ = other.averageSkill_;
      gameBalance_ = other.gameBalance_;
      radiantTeamId_ = other.radiantTeamId_;
      direTeamId_ = other.direTeamId_;
      leagueid_ = other.leagueid_;
      radiantTeamName_ = other.radiantTeamName_;
      direTeamName_ = other.direTeamName_;
      radiantTeamLogo_ = other.radiantTeamLogo_;
      direTeamLogo_ = other.direTeamLogo_;
      radiantTeamLogoUrl_ = other.radiantTeamLogoUrl_;
      direTeamLogoUrl_ = other.direTeamLogoUrl_;
      radiantTeamComplete_ = other.radiantTeamComplete_;
      direTeamComplete_ = other.direTeamComplete_;
      gameMode_ = other.gameMode_;
      picksBans_ = other.picksBans_.Clone();
      matchSeqNum_ = other.matchSeqNum_;
      replayState_ = other.replayState_;
      radiantGuildId_ = other.radiantGuildId_;
      direGuildId_ = other.direGuildId_;
      radiantTeamTag_ = other.radiantTeamTag_;
      direTeamTag_ = other.direTeamTag_;
      seriesId_ = other.seriesId_;
      seriesType_ = other.seriesType_;
      broadcasterChannels_ = other.broadcasterChannels_.Clone();
      engine_ = other.engine_;
      customGameData_ = other.customGameData_ != null ? other.customGameData_.Clone() : null;
      matchFlags_ = other.matchFlags_;
      privateMetadataKey_ = other.privateMetadataKey_;
      radiantTeamScore_ = other.radiantTeamScore_;
      direTeamScore_ = other.direTeamScore_;
      matchOutcome_ = other.matchOutcome_;
      tournamentId_ = other.tournamentId_;
      tournamentRound_ = other.tournamentRound_;
      preGameDuration_ = other.preGameDuration_;
      coaches_ = other.coaches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAMatch Clone() {
      return new CMsgDOTAMatch(this);
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { if ((_hasBits0 & 1) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 1;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "starttime" field.</summary>
    public const int StarttimeFieldNumber = 4;
    private readonly static uint StarttimeDefaultValue = 0;

    private uint starttime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Starttime {
      get { if ((_hasBits0 & 2) != 0) { return starttime_; } else { return StarttimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        starttime_ = value;
      }
    }
    /// <summary>Gets whether the "starttime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStarttime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "starttime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStarttime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(42, global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 6;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 4) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "tower_status" field.</summary>
    public const int TowerStatusFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_towerStatus_codec
        = pb::FieldCodec.ForUInt32(64);
    private readonly pbc::RepeatedField<uint> towerStatus_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TowerStatus {
      get { return towerStatus_; }
    }

    /// <summary>Field number for the "barracks_status" field.</summary>
    public const int BarracksStatusFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_barracksStatus_codec
        = pb::FieldCodec.ForUInt32(72);
    private readonly pbc::RepeatedField<uint> barracksStatus_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BarracksStatus {
      get { return barracksStatus_; }
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 10;
    private readonly static uint ClusterDefaultValue = 0;

    private uint cluster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cluster {
      get { if ((_hasBits0 & 8) != 0) { return cluster_; } else { return ClusterDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cluster_ = value;
      }
    }
    /// <summary>Gets whether the "cluster" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCluster {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cluster" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCluster() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "first_blood_time" field.</summary>
    public const int FirstBloodTimeFieldNumber = 12;
    private readonly static uint FirstBloodTimeDefaultValue = 0;

    private uint firstBloodTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstBloodTime {
      get { if ((_hasBits0 & 16) != 0) { return firstBloodTime_; } else { return FirstBloodTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        firstBloodTime_ = value;
      }
    }
    /// <summary>Gets whether the "first_blood_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstBloodTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "first_blood_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstBloodTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "replay_salt" field.</summary>
    public const int ReplaySaltFieldNumber = 13;
    private readonly static uint ReplaySaltDefaultValue = 0;

    private uint replaySalt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReplaySalt {
      get { if ((_hasBits0 & 32) != 0) { return replaySalt_; } else { return ReplaySaltDefaultValue; } }
      set {
        _hasBits0 |= 32;
        replaySalt_ = value;
      }
    }
    /// <summary>Gets whether the "replay_salt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReplaySalt {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "replay_salt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReplaySalt() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "server_ip" field.</summary>
    public const int ServerIpFieldNumber = 14;
    private readonly static uint ServerIpDefaultValue = 0;

    private uint serverIp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerIp {
      get { if ((_hasBits0 & 64) != 0) { return serverIp_; } else { return ServerIpDefaultValue; } }
      set {
        _hasBits0 |= 64;
        serverIp_ = value;
      }
    }
    /// <summary>Gets whether the "server_ip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerIp {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "server_ip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerIp() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "server_port" field.</summary>
    public const int ServerPortFieldNumber = 15;
    private readonly static uint ServerPortDefaultValue = 0;

    private uint serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerPort {
      get { if ((_hasBits0 & 128) != 0) { return serverPort_; } else { return ServerPortDefaultValue; } }
      set {
        _hasBits0 |= 128;
        serverPort_ = value;
      }
    }
    /// <summary>Gets whether the "server_port" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerPort {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "server_port" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerPort() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "lobby_type" field.</summary>
    public const int LobbyTypeFieldNumber = 16;
    private readonly static uint LobbyTypeDefaultValue = 0;

    private uint lobbyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyType {
      get { if ((_hasBits0 & 256) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        lobbyType_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyType {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "lobby_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyType() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "human_players" field.</summary>
    public const int HumanPlayersFieldNumber = 17;
    private readonly static uint HumanPlayersDefaultValue = 0;

    private uint humanPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HumanPlayers {
      get { if ((_hasBits0 & 512) != 0) { return humanPlayers_; } else { return HumanPlayersDefaultValue; } }
      set {
        _hasBits0 |= 512;
        humanPlayers_ = value;
      }
    }
    /// <summary>Gets whether the "human_players" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHumanPlayers {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "human_players" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHumanPlayers() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "average_skill" field.</summary>
    public const int AverageSkillFieldNumber = 18;
    private readonly static uint AverageSkillDefaultValue = 0;

    private uint averageSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AverageSkill {
      get { if ((_hasBits0 & 1024) != 0) { return averageSkill_; } else { return AverageSkillDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        averageSkill_ = value;
      }
    }
    /// <summary>Gets whether the "average_skill" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAverageSkill {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "average_skill" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAverageSkill() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "game_balance" field.</summary>
    public const int GameBalanceFieldNumber = 19;
    private readonly static float GameBalanceDefaultValue = 0F;

    private float gameBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameBalance {
      get { if ((_hasBits0 & 2048) != 0) { return gameBalance_; } else { return GameBalanceDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        gameBalance_ = value;
      }
    }
    /// <summary>Gets whether the "game_balance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameBalance {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "game_balance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameBalance() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "radiant_team_id" field.</summary>
    public const int RadiantTeamIdFieldNumber = 20;
    private readonly static uint RadiantTeamIdDefaultValue = 0;

    private uint radiantTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantTeamId {
      get { if ((_hasBits0 & 4096) != 0) { return radiantTeamId_; } else { return RadiantTeamIdDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        radiantTeamId_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantTeamId {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "radiant_team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantTeamId() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "dire_team_id" field.</summary>
    public const int DireTeamIdFieldNumber = 21;
    private readonly static uint DireTeamIdDefaultValue = 0;

    private uint direTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireTeamId {
      get { if ((_hasBits0 & 8192) != 0) { return direTeamId_; } else { return DireTeamIdDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        direTeamId_ = value;
      }
    }
    /// <summary>Gets whether the "dire_team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireTeamId {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "dire_team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireTeamId() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 22;
    private readonly static uint LeagueidDefaultValue = 0;

    private uint leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leagueid {
      get { if ((_hasBits0 & 16384) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueid {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueid() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "radiant_team_name" field.</summary>
    public const int RadiantTeamNameFieldNumber = 23;
    private readonly static string RadiantTeamNameDefaultValue = "";

    private string radiantTeamName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadiantTeamName {
      get { return radiantTeamName_ ?? RadiantTeamNameDefaultValue; }
      set {
        radiantTeamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "radiant_team_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantTeamName {
      get { return radiantTeamName_ != null; }
    }
    /// <summary>Clears the value of the "radiant_team_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantTeamName() {
      radiantTeamName_ = null;
    }

    /// <summary>Field number for the "dire_team_name" field.</summary>
    public const int DireTeamNameFieldNumber = 24;
    private readonly static string DireTeamNameDefaultValue = "";

    private string direTeamName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DireTeamName {
      get { return direTeamName_ ?? DireTeamNameDefaultValue; }
      set {
        direTeamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dire_team_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireTeamName {
      get { return direTeamName_ != null; }
    }
    /// <summary>Clears the value of the "dire_team_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireTeamName() {
      direTeamName_ = null;
    }

    /// <summary>Field number for the "radiant_team_logo" field.</summary>
    public const int RadiantTeamLogoFieldNumber = 25;
    private readonly static ulong RadiantTeamLogoDefaultValue = 0UL;

    private ulong radiantTeamLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RadiantTeamLogo {
      get { if ((_hasBits0 & 32768) != 0) { return radiantTeamLogo_; } else { return RadiantTeamLogoDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        radiantTeamLogo_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_team_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantTeamLogo {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "radiant_team_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantTeamLogo() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "dire_team_logo" field.</summary>
    public const int DireTeamLogoFieldNumber = 26;
    private readonly static ulong DireTeamLogoDefaultValue = 0UL;

    private ulong direTeamLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DireTeamLogo {
      get { if ((_hasBits0 & 65536) != 0) { return direTeamLogo_; } else { return DireTeamLogoDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        direTeamLogo_ = value;
      }
    }
    /// <summary>Gets whether the "dire_team_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireTeamLogo {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "dire_team_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireTeamLogo() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "radiant_team_logo_url" field.</summary>
    public const int RadiantTeamLogoUrlFieldNumber = 54;
    private readonly static string RadiantTeamLogoUrlDefaultValue = "";

    private string radiantTeamLogoUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadiantTeamLogoUrl {
      get { return radiantTeamLogoUrl_ ?? RadiantTeamLogoUrlDefaultValue; }
      set {
        radiantTeamLogoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "radiant_team_logo_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantTeamLogoUrl {
      get { return radiantTeamLogoUrl_ != null; }
    }
    /// <summary>Clears the value of the "radiant_team_logo_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantTeamLogoUrl() {
      radiantTeamLogoUrl_ = null;
    }

    /// <summary>Field number for the "dire_team_logo_url" field.</summary>
    public const int DireTeamLogoUrlFieldNumber = 55;
    private readonly static string DireTeamLogoUrlDefaultValue = "";

    private string direTeamLogoUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DireTeamLogoUrl {
      get { return direTeamLogoUrl_ ?? DireTeamLogoUrlDefaultValue; }
      set {
        direTeamLogoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dire_team_logo_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireTeamLogoUrl {
      get { return direTeamLogoUrl_ != null; }
    }
    /// <summary>Clears the value of the "dire_team_logo_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireTeamLogoUrl() {
      direTeamLogoUrl_ = null;
    }

    /// <summary>Field number for the "radiant_team_complete" field.</summary>
    public const int RadiantTeamCompleteFieldNumber = 27;
    private readonly static uint RadiantTeamCompleteDefaultValue = 0;

    private uint radiantTeamComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantTeamComplete {
      get { if ((_hasBits0 & 131072) != 0) { return radiantTeamComplete_; } else { return RadiantTeamCompleteDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        radiantTeamComplete_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_team_complete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantTeamComplete {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "radiant_team_complete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantTeamComplete() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "dire_team_complete" field.</summary>
    public const int DireTeamCompleteFieldNumber = 28;
    private readonly static uint DireTeamCompleteDefaultValue = 0;

    private uint direTeamComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireTeamComplete {
      get { if ((_hasBits0 & 262144) != 0) { return direTeamComplete_; } else { return DireTeamCompleteDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        direTeamComplete_ = value;
      }
    }
    /// <summary>Gets whether the "dire_team_complete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireTeamComplete {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "dire_team_complete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireTeamComplete() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 31;
    private readonly static global::Steam.Protos.Dota2.DOTA_GameMode GameModeDefaultValue = global::Steam.Protos.Dota2.DOTA_GameMode.None;

    private global::Steam.Protos.Dota2.DOTA_GameMode gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GameMode GameMode {
      get { if ((_hasBits0 & 524288) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameMode {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameMode() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "picks_bans" field.</summary>
    public const int PicksBansFieldNumber = 32;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchHeroSelectEvent> _repeated_picksBans_codec
        = pb::FieldCodec.ForMessage(258, global::Steam.Protos.Dota2.CMatchHeroSelectEvent.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchHeroSelectEvent> picksBans_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchHeroSelectEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchHeroSelectEvent> PicksBans {
      get { return picksBans_; }
    }

    /// <summary>Field number for the "match_seq_num" field.</summary>
    public const int MatchSeqNumFieldNumber = 33;
    private readonly static ulong MatchSeqNumDefaultValue = 0UL;

    private ulong matchSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchSeqNum {
      get { if ((_hasBits0 & 1048576) != 0) { return matchSeqNum_; } else { return MatchSeqNumDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        matchSeqNum_ = value;
      }
    }
    /// <summary>Gets whether the "match_seq_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchSeqNum {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "match_seq_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchSeqNum() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "replay_state" field.</summary>
    public const int ReplayStateFieldNumber = 34;
    private readonly static global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.ReplayState ReplayStateDefaultValue = global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.ReplayState.ReplayAvailable;

    private global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.ReplayState replayState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.ReplayState ReplayState {
      get { if ((_hasBits0 & 2097152) != 0) { return replayState_; } else { return ReplayStateDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        replayState_ = value;
      }
    }
    /// <summary>Gets whether the "replay_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReplayState {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "replay_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReplayState() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "radiant_guild_id" field.</summary>
    public const int RadiantGuildIdFieldNumber = 35;
    private readonly static uint RadiantGuildIdDefaultValue = 0;

    private uint radiantGuildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantGuildId {
      get { if ((_hasBits0 & 4194304) != 0) { return radiantGuildId_; } else { return RadiantGuildIdDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        radiantGuildId_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_guild_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantGuildId {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "radiant_guild_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantGuildId() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "dire_guild_id" field.</summary>
    public const int DireGuildIdFieldNumber = 36;
    private readonly static uint DireGuildIdDefaultValue = 0;

    private uint direGuildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireGuildId {
      get { if ((_hasBits0 & 8388608) != 0) { return direGuildId_; } else { return DireGuildIdDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        direGuildId_ = value;
      }
    }
    /// <summary>Gets whether the "dire_guild_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireGuildId {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "dire_guild_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireGuildId() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "radiant_team_tag" field.</summary>
    public const int RadiantTeamTagFieldNumber = 37;
    private readonly static string RadiantTeamTagDefaultValue = "";

    private string radiantTeamTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadiantTeamTag {
      get { return radiantTeamTag_ ?? RadiantTeamTagDefaultValue; }
      set {
        radiantTeamTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "radiant_team_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantTeamTag {
      get { return radiantTeamTag_ != null; }
    }
    /// <summary>Clears the value of the "radiant_team_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantTeamTag() {
      radiantTeamTag_ = null;
    }

    /// <summary>Field number for the "dire_team_tag" field.</summary>
    public const int DireTeamTagFieldNumber = 38;
    private readonly static string DireTeamTagDefaultValue = "";

    private string direTeamTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DireTeamTag {
      get { return direTeamTag_ ?? DireTeamTagDefaultValue; }
      set {
        direTeamTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dire_team_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireTeamTag {
      get { return direTeamTag_ != null; }
    }
    /// <summary>Clears the value of the "dire_team_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireTeamTag() {
      direTeamTag_ = null;
    }

    /// <summary>Field number for the "series_id" field.</summary>
    public const int SeriesIdFieldNumber = 39;
    private readonly static uint SeriesIdDefaultValue = 0;

    private uint seriesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeriesId {
      get { if ((_hasBits0 & 16777216) != 0) { return seriesId_; } else { return SeriesIdDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        seriesId_ = value;
      }
    }
    /// <summary>Gets whether the "series_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesId {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "series_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesId() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "series_type" field.</summary>
    public const int SeriesTypeFieldNumber = 40;
    private readonly static uint SeriesTypeDefaultValue = 0;

    private uint seriesType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeriesType {
      get { if ((_hasBits0 & 33554432) != 0) { return seriesType_; } else { return SeriesTypeDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        seriesType_ = value;
      }
    }
    /// <summary>Gets whether the "series_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesType {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "series_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesType() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "broadcaster_channels" field.</summary>
    public const int BroadcasterChannelsFieldNumber = 43;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterChannel> _repeated_broadcasterChannels_codec
        = pb::FieldCodec.ForMessage(346, global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterChannel.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterChannel> broadcasterChannels_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterChannel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterChannel> BroadcasterChannels {
      get { return broadcasterChannels_; }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 44;
    private readonly static uint EngineDefaultValue = 0;

    private uint engine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Engine {
      get { if ((_hasBits0 & 67108864) != 0) { return engine_; } else { return EngineDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        engine_ = value;
      }
    }
    /// <summary>Gets whether the "engine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngine {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "engine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngine() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "custom_game_data" field.</summary>
    public const int CustomGameDataFieldNumber = 45;
    private global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.CustomGameData customGameData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.CustomGameData CustomGameData {
      get { return customGameData_; }
      set {
        customGameData_ = value;
      }
    }

    /// <summary>Field number for the "match_flags" field.</summary>
    public const int MatchFlagsFieldNumber = 46;
    private readonly static uint MatchFlagsDefaultValue = 0;

    private uint matchFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchFlags {
      get { if ((_hasBits0 & 134217728) != 0) { return matchFlags_; } else { return MatchFlagsDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        matchFlags_ = value;
      }
    }
    /// <summary>Gets whether the "match_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchFlags {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "match_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchFlags() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "private_metadata_key" field.</summary>
    public const int PrivateMetadataKeyFieldNumber = 47;
    private readonly static uint PrivateMetadataKeyDefaultValue = 0;

    private uint privateMetadataKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrivateMetadataKey {
      get { if ((_hasBits0 & 268435456) != 0) { return privateMetadataKey_; } else { return PrivateMetadataKeyDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        privateMetadataKey_ = value;
      }
    }
    /// <summary>Gets whether the "private_metadata_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivateMetadataKey {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "private_metadata_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivateMetadataKey() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "radiant_team_score" field.</summary>
    public const int RadiantTeamScoreFieldNumber = 48;
    private readonly static uint RadiantTeamScoreDefaultValue = 0;

    private uint radiantTeamScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantTeamScore {
      get { if ((_hasBits0 & 536870912) != 0) { return radiantTeamScore_; } else { return RadiantTeamScoreDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        radiantTeamScore_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_team_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantTeamScore {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "radiant_team_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantTeamScore() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "dire_team_score" field.</summary>
    public const int DireTeamScoreFieldNumber = 49;
    private readonly static uint DireTeamScoreDefaultValue = 0;

    private uint direTeamScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireTeamScore {
      get { if ((_hasBits0 & 1073741824) != 0) { return direTeamScore_; } else { return DireTeamScoreDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        direTeamScore_ = value;
      }
    }
    /// <summary>Gets whether the "dire_team_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireTeamScore {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "dire_team_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireTeamScore() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "match_outcome" field.</summary>
    public const int MatchOutcomeFieldNumber = 50;
    private readonly static global::Steam.Protos.Dota2.EMatchOutcome MatchOutcomeDefaultValue = global::Steam.Protos.Dota2.EMatchOutcome.KEmatchOutcomeUnknown;

    private global::Steam.Protos.Dota2.EMatchOutcome matchOutcome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EMatchOutcome MatchOutcome {
      get { if ((_hasBits0 & -2147483648) != 0) { return matchOutcome_; } else { return MatchOutcomeDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        matchOutcome_ = value;
      }
    }
    /// <summary>Gets whether the "match_outcome" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchOutcome {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "match_outcome" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchOutcome() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "tournament_id" field.</summary>
    public const int TournamentIdFieldNumber = 51;
    private readonly static uint TournamentIdDefaultValue = 0;

    private uint tournamentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TournamentId {
      get { if ((_hasBits1 & 1) != 0) { return tournamentId_; } else { return TournamentIdDefaultValue; } }
      set {
        _hasBits1 |= 1;
        tournamentId_ = value;
      }
    }
    /// <summary>Gets whether the "tournament_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTournamentId {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tournament_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTournamentId() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "tournament_round" field.</summary>
    public const int TournamentRoundFieldNumber = 52;
    private readonly static uint TournamentRoundDefaultValue = 0;

    private uint tournamentRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TournamentRound {
      get { if ((_hasBits1 & 2) != 0) { return tournamentRound_; } else { return TournamentRoundDefaultValue; } }
      set {
        _hasBits1 |= 2;
        tournamentRound_ = value;
      }
    }
    /// <summary>Gets whether the "tournament_round" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTournamentRound {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tournament_round" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTournamentRound() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "pre_game_duration" field.</summary>
    public const int PreGameDurationFieldNumber = 53;
    private readonly static uint PreGameDurationDefaultValue = 0;

    private uint preGameDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PreGameDuration {
      get { if ((_hasBits1 & 4) != 0) { return preGameDuration_; } else { return PreGameDurationDefaultValue; } }
      set {
        _hasBits1 |= 4;
        preGameDuration_ = value;
      }
    }
    /// <summary>Gets whether the "pre_game_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreGameDuration {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "pre_game_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreGameDuration() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "coaches" field.</summary>
    public const int CoachesFieldNumber = 57;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Coach> _repeated_coaches_codec
        = pb::FieldCodec.ForMessage(458, global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Coach.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Coach> coaches_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Coach>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Coach> Coaches {
      get { return coaches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Duration != other.Duration) return false;
      if (Starttime != other.Starttime) return false;
      if(!players_.Equals(other.players_)) return false;
      if (MatchId != other.MatchId) return false;
      if(!towerStatus_.Equals(other.towerStatus_)) return false;
      if(!barracksStatus_.Equals(other.barracksStatus_)) return false;
      if (Cluster != other.Cluster) return false;
      if (FirstBloodTime != other.FirstBloodTime) return false;
      if (ReplaySalt != other.ReplaySalt) return false;
      if (ServerIp != other.ServerIp) return false;
      if (ServerPort != other.ServerPort) return false;
      if (LobbyType != other.LobbyType) return false;
      if (HumanPlayers != other.HumanPlayers) return false;
      if (AverageSkill != other.AverageSkill) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameBalance, other.GameBalance)) return false;
      if (RadiantTeamId != other.RadiantTeamId) return false;
      if (DireTeamId != other.DireTeamId) return false;
      if (Leagueid != other.Leagueid) return false;
      if (RadiantTeamName != other.RadiantTeamName) return false;
      if (DireTeamName != other.DireTeamName) return false;
      if (RadiantTeamLogo != other.RadiantTeamLogo) return false;
      if (DireTeamLogo != other.DireTeamLogo) return false;
      if (RadiantTeamLogoUrl != other.RadiantTeamLogoUrl) return false;
      if (DireTeamLogoUrl != other.DireTeamLogoUrl) return false;
      if (RadiantTeamComplete != other.RadiantTeamComplete) return false;
      if (DireTeamComplete != other.DireTeamComplete) return false;
      if (GameMode != other.GameMode) return false;
      if(!picksBans_.Equals(other.picksBans_)) return false;
      if (MatchSeqNum != other.MatchSeqNum) return false;
      if (ReplayState != other.ReplayState) return false;
      if (RadiantGuildId != other.RadiantGuildId) return false;
      if (DireGuildId != other.DireGuildId) return false;
      if (RadiantTeamTag != other.RadiantTeamTag) return false;
      if (DireTeamTag != other.DireTeamTag) return false;
      if (SeriesId != other.SeriesId) return false;
      if (SeriesType != other.SeriesType) return false;
      if(!broadcasterChannels_.Equals(other.broadcasterChannels_)) return false;
      if (Engine != other.Engine) return false;
      if (!object.Equals(CustomGameData, other.CustomGameData)) return false;
      if (MatchFlags != other.MatchFlags) return false;
      if (PrivateMetadataKey != other.PrivateMetadataKey) return false;
      if (RadiantTeamScore != other.RadiantTeamScore) return false;
      if (DireTeamScore != other.DireTeamScore) return false;
      if (MatchOutcome != other.MatchOutcome) return false;
      if (TournamentId != other.TournamentId) return false;
      if (TournamentRound != other.TournamentRound) return false;
      if (PreGameDuration != other.PreGameDuration) return false;
      if(!coaches_.Equals(other.coaches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasStarttime) hash ^= Starttime.GetHashCode();
      hash ^= players_.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      hash ^= towerStatus_.GetHashCode();
      hash ^= barracksStatus_.GetHashCode();
      if (HasCluster) hash ^= Cluster.GetHashCode();
      if (HasFirstBloodTime) hash ^= FirstBloodTime.GetHashCode();
      if (HasReplaySalt) hash ^= ReplaySalt.GetHashCode();
      if (HasServerIp) hash ^= ServerIp.GetHashCode();
      if (HasServerPort) hash ^= ServerPort.GetHashCode();
      if (HasLobbyType) hash ^= LobbyType.GetHashCode();
      if (HasHumanPlayers) hash ^= HumanPlayers.GetHashCode();
      if (HasAverageSkill) hash ^= AverageSkill.GetHashCode();
      if (HasGameBalance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameBalance);
      if (HasRadiantTeamId) hash ^= RadiantTeamId.GetHashCode();
      if (HasDireTeamId) hash ^= DireTeamId.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasRadiantTeamName) hash ^= RadiantTeamName.GetHashCode();
      if (HasDireTeamName) hash ^= DireTeamName.GetHashCode();
      if (HasRadiantTeamLogo) hash ^= RadiantTeamLogo.GetHashCode();
      if (HasDireTeamLogo) hash ^= DireTeamLogo.GetHashCode();
      if (HasRadiantTeamLogoUrl) hash ^= RadiantTeamLogoUrl.GetHashCode();
      if (HasDireTeamLogoUrl) hash ^= DireTeamLogoUrl.GetHashCode();
      if (HasRadiantTeamComplete) hash ^= RadiantTeamComplete.GetHashCode();
      if (HasDireTeamComplete) hash ^= DireTeamComplete.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      hash ^= picksBans_.GetHashCode();
      if (HasMatchSeqNum) hash ^= MatchSeqNum.GetHashCode();
      if (HasReplayState) hash ^= ReplayState.GetHashCode();
      if (HasRadiantGuildId) hash ^= RadiantGuildId.GetHashCode();
      if (HasDireGuildId) hash ^= DireGuildId.GetHashCode();
      if (HasRadiantTeamTag) hash ^= RadiantTeamTag.GetHashCode();
      if (HasDireTeamTag) hash ^= DireTeamTag.GetHashCode();
      if (HasSeriesId) hash ^= SeriesId.GetHashCode();
      if (HasSeriesType) hash ^= SeriesType.GetHashCode();
      hash ^= broadcasterChannels_.GetHashCode();
      if (HasEngine) hash ^= Engine.GetHashCode();
      if (customGameData_ != null) hash ^= CustomGameData.GetHashCode();
      if (HasMatchFlags) hash ^= MatchFlags.GetHashCode();
      if (HasPrivateMetadataKey) hash ^= PrivateMetadataKey.GetHashCode();
      if (HasRadiantTeamScore) hash ^= RadiantTeamScore.GetHashCode();
      if (HasDireTeamScore) hash ^= DireTeamScore.GetHashCode();
      if (HasMatchOutcome) hash ^= MatchOutcome.GetHashCode();
      if (HasTournamentId) hash ^= TournamentId.GetHashCode();
      if (HasTournamentRound) hash ^= TournamentRound.GetHashCode();
      if (HasPreGameDuration) hash ^= PreGameDuration.GetHashCode();
      hash ^= coaches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasStarttime) {
        output.WriteRawTag(37);
        output.WriteFixed32(Starttime);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (HasMatchId) {
        output.WriteRawTag(48);
        output.WriteUInt64(MatchId);
      }
      towerStatus_.WriteTo(output, _repeated_towerStatus_codec);
      barracksStatus_.WriteTo(output, _repeated_barracksStatus_codec);
      if (HasCluster) {
        output.WriteRawTag(80);
        output.WriteUInt32(Cluster);
      }
      if (HasFirstBloodTime) {
        output.WriteRawTag(96);
        output.WriteUInt32(FirstBloodTime);
      }
      if (HasReplaySalt) {
        output.WriteRawTag(109);
        output.WriteFixed32(ReplaySalt);
      }
      if (HasServerIp) {
        output.WriteRawTag(117);
        output.WriteFixed32(ServerIp);
      }
      if (HasServerPort) {
        output.WriteRawTag(120);
        output.WriteUInt32(ServerPort);
      }
      if (HasLobbyType) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(LobbyType);
      }
      if (HasHumanPlayers) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(HumanPlayers);
      }
      if (HasAverageSkill) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(AverageSkill);
      }
      if (HasGameBalance) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(GameBalance);
      }
      if (HasRadiantTeamId) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(RadiantTeamId);
      }
      if (HasDireTeamId) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(DireTeamId);
      }
      if (HasLeagueid) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Leagueid);
      }
      if (HasRadiantTeamName) {
        output.WriteRawTag(186, 1);
        output.WriteString(RadiantTeamName);
      }
      if (HasDireTeamName) {
        output.WriteRawTag(194, 1);
        output.WriteString(DireTeamName);
      }
      if (HasRadiantTeamLogo) {
        output.WriteRawTag(200, 1);
        output.WriteUInt64(RadiantTeamLogo);
      }
      if (HasDireTeamLogo) {
        output.WriteRawTag(208, 1);
        output.WriteUInt64(DireTeamLogo);
      }
      if (HasRadiantTeamComplete) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(RadiantTeamComplete);
      }
      if (HasDireTeamComplete) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(DireTeamComplete);
      }
      if (HasGameMode) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) GameMode);
      }
      picksBans_.WriteTo(output, _repeated_picksBans_codec);
      if (HasMatchSeqNum) {
        output.WriteRawTag(136, 2);
        output.WriteUInt64(MatchSeqNum);
      }
      if (HasReplayState) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) ReplayState);
      }
      if (HasRadiantGuildId) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(RadiantGuildId);
      }
      if (HasDireGuildId) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(DireGuildId);
      }
      if (HasRadiantTeamTag) {
        output.WriteRawTag(170, 2);
        output.WriteString(RadiantTeamTag);
      }
      if (HasDireTeamTag) {
        output.WriteRawTag(178, 2);
        output.WriteString(DireTeamTag);
      }
      if (HasSeriesId) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(SeriesId);
      }
      if (HasSeriesType) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(SeriesType);
      }
      broadcasterChannels_.WriteTo(output, _repeated_broadcasterChannels_codec);
      if (HasEngine) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(Engine);
      }
      if (customGameData_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(CustomGameData);
      }
      if (HasMatchFlags) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(MatchFlags);
      }
      if (HasPrivateMetadataKey) {
        output.WriteRawTag(253, 2);
        output.WriteFixed32(PrivateMetadataKey);
      }
      if (HasRadiantTeamScore) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(RadiantTeamScore);
      }
      if (HasDireTeamScore) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(DireTeamScore);
      }
      if (HasMatchOutcome) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) MatchOutcome);
      }
      if (HasTournamentId) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(TournamentId);
      }
      if (HasTournamentRound) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(TournamentRound);
      }
      if (HasPreGameDuration) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(PreGameDuration);
      }
      if (HasRadiantTeamLogoUrl) {
        output.WriteRawTag(178, 3);
        output.WriteString(RadiantTeamLogoUrl);
      }
      if (HasDireTeamLogoUrl) {
        output.WriteRawTag(186, 3);
        output.WriteString(DireTeamLogoUrl);
      }
      coaches_.WriteTo(output, _repeated_coaches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasStarttime) {
        output.WriteRawTag(37);
        output.WriteFixed32(Starttime);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      if (HasMatchId) {
        output.WriteRawTag(48);
        output.WriteUInt64(MatchId);
      }
      towerStatus_.WriteTo(ref output, _repeated_towerStatus_codec);
      barracksStatus_.WriteTo(ref output, _repeated_barracksStatus_codec);
      if (HasCluster) {
        output.WriteRawTag(80);
        output.WriteUInt32(Cluster);
      }
      if (HasFirstBloodTime) {
        output.WriteRawTag(96);
        output.WriteUInt32(FirstBloodTime);
      }
      if (HasReplaySalt) {
        output.WriteRawTag(109);
        output.WriteFixed32(ReplaySalt);
      }
      if (HasServerIp) {
        output.WriteRawTag(117);
        output.WriteFixed32(ServerIp);
      }
      if (HasServerPort) {
        output.WriteRawTag(120);
        output.WriteUInt32(ServerPort);
      }
      if (HasLobbyType) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(LobbyType);
      }
      if (HasHumanPlayers) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(HumanPlayers);
      }
      if (HasAverageSkill) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(AverageSkill);
      }
      if (HasGameBalance) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(GameBalance);
      }
      if (HasRadiantTeamId) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(RadiantTeamId);
      }
      if (HasDireTeamId) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(DireTeamId);
      }
      if (HasLeagueid) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Leagueid);
      }
      if (HasRadiantTeamName) {
        output.WriteRawTag(186, 1);
        output.WriteString(RadiantTeamName);
      }
      if (HasDireTeamName) {
        output.WriteRawTag(194, 1);
        output.WriteString(DireTeamName);
      }
      if (HasRadiantTeamLogo) {
        output.WriteRawTag(200, 1);
        output.WriteUInt64(RadiantTeamLogo);
      }
      if (HasDireTeamLogo) {
        output.WriteRawTag(208, 1);
        output.WriteUInt64(DireTeamLogo);
      }
      if (HasRadiantTeamComplete) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(RadiantTeamComplete);
      }
      if (HasDireTeamComplete) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(DireTeamComplete);
      }
      if (HasGameMode) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) GameMode);
      }
      picksBans_.WriteTo(ref output, _repeated_picksBans_codec);
      if (HasMatchSeqNum) {
        output.WriteRawTag(136, 2);
        output.WriteUInt64(MatchSeqNum);
      }
      if (HasReplayState) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) ReplayState);
      }
      if (HasRadiantGuildId) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(RadiantGuildId);
      }
      if (HasDireGuildId) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(DireGuildId);
      }
      if (HasRadiantTeamTag) {
        output.WriteRawTag(170, 2);
        output.WriteString(RadiantTeamTag);
      }
      if (HasDireTeamTag) {
        output.WriteRawTag(178, 2);
        output.WriteString(DireTeamTag);
      }
      if (HasSeriesId) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(SeriesId);
      }
      if (HasSeriesType) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(SeriesType);
      }
      broadcasterChannels_.WriteTo(ref output, _repeated_broadcasterChannels_codec);
      if (HasEngine) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(Engine);
      }
      if (customGameData_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(CustomGameData);
      }
      if (HasMatchFlags) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(MatchFlags);
      }
      if (HasPrivateMetadataKey) {
        output.WriteRawTag(253, 2);
        output.WriteFixed32(PrivateMetadataKey);
      }
      if (HasRadiantTeamScore) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(RadiantTeamScore);
      }
      if (HasDireTeamScore) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(DireTeamScore);
      }
      if (HasMatchOutcome) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) MatchOutcome);
      }
      if (HasTournamentId) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(TournamentId);
      }
      if (HasTournamentRound) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(TournamentRound);
      }
      if (HasPreGameDuration) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(PreGameDuration);
      }
      if (HasRadiantTeamLogoUrl) {
        output.WriteRawTag(178, 3);
        output.WriteString(RadiantTeamLogoUrl);
      }
      if (HasDireTeamLogoUrl) {
        output.WriteRawTag(186, 3);
        output.WriteString(DireTeamLogoUrl);
      }
      coaches_.WriteTo(ref output, _repeated_coaches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasStarttime) {
        size += 1 + 4;
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      size += towerStatus_.CalculateSize(_repeated_towerStatus_codec);
      size += barracksStatus_.CalculateSize(_repeated_barracksStatus_codec);
      if (HasCluster) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cluster);
      }
      if (HasFirstBloodTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirstBloodTime);
      }
      if (HasReplaySalt) {
        size += 1 + 4;
      }
      if (HasServerIp) {
        size += 1 + 4;
      }
      if (HasServerPort) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerPort);
      }
      if (HasLobbyType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LobbyType);
      }
      if (HasHumanPlayers) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HumanPlayers);
      }
      if (HasAverageSkill) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AverageSkill);
      }
      if (HasGameBalance) {
        size += 2 + 4;
      }
      if (HasRadiantTeamId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RadiantTeamId);
      }
      if (HasDireTeamId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DireTeamId);
      }
      if (HasLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leagueid);
      }
      if (HasRadiantTeamName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RadiantTeamName);
      }
      if (HasDireTeamName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DireTeamName);
      }
      if (HasRadiantTeamLogo) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RadiantTeamLogo);
      }
      if (HasDireTeamLogo) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(DireTeamLogo);
      }
      if (HasRadiantTeamLogoUrl) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RadiantTeamLogoUrl);
      }
      if (HasDireTeamLogoUrl) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DireTeamLogoUrl);
      }
      if (HasRadiantTeamComplete) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RadiantTeamComplete);
      }
      if (HasDireTeamComplete) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DireTeamComplete);
      }
      if (HasGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      size += picksBans_.CalculateSize(_repeated_picksBans_codec);
      if (HasMatchSeqNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MatchSeqNum);
      }
      if (HasReplayState) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ReplayState);
      }
      if (HasRadiantGuildId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RadiantGuildId);
      }
      if (HasDireGuildId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DireGuildId);
      }
      if (HasRadiantTeamTag) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RadiantTeamTag);
      }
      if (HasDireTeamTag) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DireTeamTag);
      }
      if (HasSeriesId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeriesId);
      }
      if (HasSeriesType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeriesType);
      }
      size += broadcasterChannels_.CalculateSize(_repeated_broadcasterChannels_codec);
      if (HasEngine) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Engine);
      }
      if (customGameData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CustomGameData);
      }
      if (HasMatchFlags) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchFlags);
      }
      if (HasPrivateMetadataKey) {
        size += 2 + 4;
      }
      if (HasRadiantTeamScore) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RadiantTeamScore);
      }
      if (HasDireTeamScore) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DireTeamScore);
      }
      if (HasMatchOutcome) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MatchOutcome);
      }
      if (HasTournamentId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TournamentId);
      }
      if (HasTournamentRound) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TournamentRound);
      }
      if (HasPreGameDuration) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PreGameDuration);
      }
      size += coaches_.CalculateSize(_repeated_coaches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAMatch other) {
      if (other == null) {
        return;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      players_.Add(other.players_);
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      towerStatus_.Add(other.towerStatus_);
      barracksStatus_.Add(other.barracksStatus_);
      if (other.HasCluster) {
        Cluster = other.Cluster;
      }
      if (other.HasFirstBloodTime) {
        FirstBloodTime = other.FirstBloodTime;
      }
      if (other.HasReplaySalt) {
        ReplaySalt = other.ReplaySalt;
      }
      if (other.HasServerIp) {
        ServerIp = other.ServerIp;
      }
      if (other.HasServerPort) {
        ServerPort = other.ServerPort;
      }
      if (other.HasLobbyType) {
        LobbyType = other.LobbyType;
      }
      if (other.HasHumanPlayers) {
        HumanPlayers = other.HumanPlayers;
      }
      if (other.HasAverageSkill) {
        AverageSkill = other.AverageSkill;
      }
      if (other.HasGameBalance) {
        GameBalance = other.GameBalance;
      }
      if (other.HasRadiantTeamId) {
        RadiantTeamId = other.RadiantTeamId;
      }
      if (other.HasDireTeamId) {
        DireTeamId = other.DireTeamId;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasRadiantTeamName) {
        RadiantTeamName = other.RadiantTeamName;
      }
      if (other.HasDireTeamName) {
        DireTeamName = other.DireTeamName;
      }
      if (other.HasRadiantTeamLogo) {
        RadiantTeamLogo = other.RadiantTeamLogo;
      }
      if (other.HasDireTeamLogo) {
        DireTeamLogo = other.DireTeamLogo;
      }
      if (other.HasRadiantTeamLogoUrl) {
        RadiantTeamLogoUrl = other.RadiantTeamLogoUrl;
      }
      if (other.HasDireTeamLogoUrl) {
        DireTeamLogoUrl = other.DireTeamLogoUrl;
      }
      if (other.HasRadiantTeamComplete) {
        RadiantTeamComplete = other.RadiantTeamComplete;
      }
      if (other.HasDireTeamComplete) {
        DireTeamComplete = other.DireTeamComplete;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      picksBans_.Add(other.picksBans_);
      if (other.HasMatchSeqNum) {
        MatchSeqNum = other.MatchSeqNum;
      }
      if (other.HasReplayState) {
        ReplayState = other.ReplayState;
      }
      if (other.HasRadiantGuildId) {
        RadiantGuildId = other.RadiantGuildId;
      }
      if (other.HasDireGuildId) {
        DireGuildId = other.DireGuildId;
      }
      if (other.HasRadiantTeamTag) {
        RadiantTeamTag = other.RadiantTeamTag;
      }
      if (other.HasDireTeamTag) {
        DireTeamTag = other.DireTeamTag;
      }
      if (other.HasSeriesId) {
        SeriesId = other.SeriesId;
      }
      if (other.HasSeriesType) {
        SeriesType = other.SeriesType;
      }
      broadcasterChannels_.Add(other.broadcasterChannels_);
      if (other.HasEngine) {
        Engine = other.Engine;
      }
      if (other.customGameData_ != null) {
        if (customGameData_ == null) {
          CustomGameData = new global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.CustomGameData();
        }
        CustomGameData.MergeFrom(other.CustomGameData);
      }
      if (other.HasMatchFlags) {
        MatchFlags = other.MatchFlags;
      }
      if (other.HasPrivateMetadataKey) {
        PrivateMetadataKey = other.PrivateMetadataKey;
      }
      if (other.HasRadiantTeamScore) {
        RadiantTeamScore = other.RadiantTeamScore;
      }
      if (other.HasDireTeamScore) {
        DireTeamScore = other.DireTeamScore;
      }
      if (other.HasMatchOutcome) {
        MatchOutcome = other.MatchOutcome;
      }
      if (other.HasTournamentId) {
        TournamentId = other.TournamentId;
      }
      if (other.HasTournamentRound) {
        TournamentRound = other.TournamentRound;
      }
      if (other.HasPreGameDuration) {
        PreGameDuration = other.PreGameDuration;
      }
      coaches_.Add(other.coaches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 37: {
            Starttime = input.ReadFixed32();
            break;
          }
          case 42: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 48: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 66:
          case 64: {
            towerStatus_.AddEntriesFrom(input, _repeated_towerStatus_codec);
            break;
          }
          case 74:
          case 72: {
            barracksStatus_.AddEntriesFrom(input, _repeated_barracksStatus_codec);
            break;
          }
          case 80: {
            Cluster = input.ReadUInt32();
            break;
          }
          case 96: {
            FirstBloodTime = input.ReadUInt32();
            break;
          }
          case 109: {
            ReplaySalt = input.ReadFixed32();
            break;
          }
          case 117: {
            ServerIp = input.ReadFixed32();
            break;
          }
          case 120: {
            ServerPort = input.ReadUInt32();
            break;
          }
          case 128: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 136: {
            HumanPlayers = input.ReadUInt32();
            break;
          }
          case 144: {
            AverageSkill = input.ReadUInt32();
            break;
          }
          case 157: {
            GameBalance = input.ReadFloat();
            break;
          }
          case 160: {
            RadiantTeamId = input.ReadUInt32();
            break;
          }
          case 168: {
            DireTeamId = input.ReadUInt32();
            break;
          }
          case 176: {
            Leagueid = input.ReadUInt32();
            break;
          }
          case 186: {
            RadiantTeamName = input.ReadString();
            break;
          }
          case 194: {
            DireTeamName = input.ReadString();
            break;
          }
          case 200: {
            RadiantTeamLogo = input.ReadUInt64();
            break;
          }
          case 208: {
            DireTeamLogo = input.ReadUInt64();
            break;
          }
          case 216: {
            RadiantTeamComplete = input.ReadUInt32();
            break;
          }
          case 224: {
            DireTeamComplete = input.ReadUInt32();
            break;
          }
          case 248: {
            GameMode = (global::Steam.Protos.Dota2.DOTA_GameMode) input.ReadEnum();
            break;
          }
          case 258: {
            picksBans_.AddEntriesFrom(input, _repeated_picksBans_codec);
            break;
          }
          case 264: {
            MatchSeqNum = input.ReadUInt64();
            break;
          }
          case 272: {
            ReplayState = (global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.ReplayState) input.ReadEnum();
            break;
          }
          case 280: {
            RadiantGuildId = input.ReadUInt32();
            break;
          }
          case 288: {
            DireGuildId = input.ReadUInt32();
            break;
          }
          case 298: {
            RadiantTeamTag = input.ReadString();
            break;
          }
          case 306: {
            DireTeamTag = input.ReadString();
            break;
          }
          case 312: {
            SeriesId = input.ReadUInt32();
            break;
          }
          case 320: {
            SeriesType = input.ReadUInt32();
            break;
          }
          case 346: {
            broadcasterChannels_.AddEntriesFrom(input, _repeated_broadcasterChannels_codec);
            break;
          }
          case 352: {
            Engine = input.ReadUInt32();
            break;
          }
          case 362: {
            if (customGameData_ == null) {
              CustomGameData = new global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.CustomGameData();
            }
            input.ReadMessage(CustomGameData);
            break;
          }
          case 368: {
            MatchFlags = input.ReadUInt32();
            break;
          }
          case 381: {
            PrivateMetadataKey = input.ReadFixed32();
            break;
          }
          case 384: {
            RadiantTeamScore = input.ReadUInt32();
            break;
          }
          case 392: {
            DireTeamScore = input.ReadUInt32();
            break;
          }
          case 400: {
            MatchOutcome = (global::Steam.Protos.Dota2.EMatchOutcome) input.ReadEnum();
            break;
          }
          case 408: {
            TournamentId = input.ReadUInt32();
            break;
          }
          case 416: {
            TournamentRound = input.ReadUInt32();
            break;
          }
          case 424: {
            PreGameDuration = input.ReadUInt32();
            break;
          }
          case 434: {
            RadiantTeamLogoUrl = input.ReadString();
            break;
          }
          case 442: {
            DireTeamLogoUrl = input.ReadString();
            break;
          }
          case 458: {
            coaches_.AddEntriesFrom(input, _repeated_coaches_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 37: {
            Starttime = input.ReadFixed32();
            break;
          }
          case 42: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 48: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 66:
          case 64: {
            towerStatus_.AddEntriesFrom(ref input, _repeated_towerStatus_codec);
            break;
          }
          case 74:
          case 72: {
            barracksStatus_.AddEntriesFrom(ref input, _repeated_barracksStatus_codec);
            break;
          }
          case 80: {
            Cluster = input.ReadUInt32();
            break;
          }
          case 96: {
            FirstBloodTime = input.ReadUInt32();
            break;
          }
          case 109: {
            ReplaySalt = input.ReadFixed32();
            break;
          }
          case 117: {
            ServerIp = input.ReadFixed32();
            break;
          }
          case 120: {
            ServerPort = input.ReadUInt32();
            break;
          }
          case 128: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 136: {
            HumanPlayers = input.ReadUInt32();
            break;
          }
          case 144: {
            AverageSkill = input.ReadUInt32();
            break;
          }
          case 157: {
            GameBalance = input.ReadFloat();
            break;
          }
          case 160: {
            RadiantTeamId = input.ReadUInt32();
            break;
          }
          case 168: {
            DireTeamId = input.ReadUInt32();
            break;
          }
          case 176: {
            Leagueid = input.ReadUInt32();
            break;
          }
          case 186: {
            RadiantTeamName = input.ReadString();
            break;
          }
          case 194: {
            DireTeamName = input.ReadString();
            break;
          }
          case 200: {
            RadiantTeamLogo = input.ReadUInt64();
            break;
          }
          case 208: {
            DireTeamLogo = input.ReadUInt64();
            break;
          }
          case 216: {
            RadiantTeamComplete = input.ReadUInt32();
            break;
          }
          case 224: {
            DireTeamComplete = input.ReadUInt32();
            break;
          }
          case 248: {
            GameMode = (global::Steam.Protos.Dota2.DOTA_GameMode) input.ReadEnum();
            break;
          }
          case 258: {
            picksBans_.AddEntriesFrom(ref input, _repeated_picksBans_codec);
            break;
          }
          case 264: {
            MatchSeqNum = input.ReadUInt64();
            break;
          }
          case 272: {
            ReplayState = (global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.ReplayState) input.ReadEnum();
            break;
          }
          case 280: {
            RadiantGuildId = input.ReadUInt32();
            break;
          }
          case 288: {
            DireGuildId = input.ReadUInt32();
            break;
          }
          case 298: {
            RadiantTeamTag = input.ReadString();
            break;
          }
          case 306: {
            DireTeamTag = input.ReadString();
            break;
          }
          case 312: {
            SeriesId = input.ReadUInt32();
            break;
          }
          case 320: {
            SeriesType = input.ReadUInt32();
            break;
          }
          case 346: {
            broadcasterChannels_.AddEntriesFrom(ref input, _repeated_broadcasterChannels_codec);
            break;
          }
          case 352: {
            Engine = input.ReadUInt32();
            break;
          }
          case 362: {
            if (customGameData_ == null) {
              CustomGameData = new global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.CustomGameData();
            }
            input.ReadMessage(CustomGameData);
            break;
          }
          case 368: {
            MatchFlags = input.ReadUInt32();
            break;
          }
          case 381: {
            PrivateMetadataKey = input.ReadFixed32();
            break;
          }
          case 384: {
            RadiantTeamScore = input.ReadUInt32();
            break;
          }
          case 392: {
            DireTeamScore = input.ReadUInt32();
            break;
          }
          case 400: {
            MatchOutcome = (global::Steam.Protos.Dota2.EMatchOutcome) input.ReadEnum();
            break;
          }
          case 408: {
            TournamentId = input.ReadUInt32();
            break;
          }
          case 416: {
            TournamentRound = input.ReadUInt32();
            break;
          }
          case 424: {
            PreGameDuration = input.ReadUInt32();
            break;
          }
          case 434: {
            RadiantTeamLogoUrl = input.ReadString();
            break;
          }
          case 442: {
            DireTeamLogoUrl = input.ReadString();
            break;
          }
          case 458: {
            coaches_.AddEntriesFrom(ref input, _repeated_coaches_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTAMatch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ReplayState {
        [pbr::OriginalName("REPLAY_AVAILABLE")] ReplayAvailable = 0,
        [pbr::OriginalName("REPLAY_NOT_RECORDED")] ReplayNotRecorded = 1,
        [pbr::OriginalName("REPLAY_EXPIRED")] ReplayExpired = 2,
      }

      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        private int _hasBits1;
        private int _hasBits2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAMatch.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          _hasBits1 = other._hasBits1;
          _hasBits2 = other._hasBits2;
          accountId_ = other.accountId_;
          playerSlot_ = other.playerSlot_;
          heroId_ = other.heroId_;
          item0_ = other.item0_;
          item1_ = other.item1_;
          item2_ = other.item2_;
          item3_ = other.item3_;
          item4_ = other.item4_;
          item5_ = other.item5_;
          item6_ = other.item6_;
          item7_ = other.item7_;
          item8_ = other.item8_;
          item9_ = other.item9_;
          item10_ = other.item10_;
          item10Lvl_ = other.item10Lvl_;
          expectedTeamContribution_ = other.expectedTeamContribution_;
          scaledMetric_ = other.scaledMetric_;
          previousRank_ = other.previousRank_;
          rankChange_ = other.rankChange_;
          mmrType_ = other.mmrType_;
          kills_ = other.kills_;
          deaths_ = other.deaths_;
          assists_ = other.assists_;
          leaverStatus_ = other.leaverStatus_;
          gold_ = other.gold_;
          lastHits_ = other.lastHits_;
          denies_ = other.denies_;
          goldPerMin_ = other.goldPerMin_;
          xpPerMin_ = other.xpPerMin_;
          goldSpent_ = other.goldSpent_;
          heroDamage_ = other.heroDamage_;
          towerDamage_ = other.towerDamage_;
          heroHealing_ = other.heroHealing_;
          level_ = other.level_;
          timeLastSeen_ = other.timeLastSeen_;
          playerName_ = other.playerName_;
          supportAbilityValue_ = other.supportAbilityValue_;
          feedingDetected_ = other.feedingDetected_;
          searchRank_ = other.searchRank_;
          searchRankUncertainty_ = other.searchRankUncertainty_;
          rankUncertaintyChange_ = other.rankUncertaintyChange_;
          heroPlayCount_ = other.heroPlayCount_;
          partyId_ = other.partyId_;
          scaledHeroDamage_ = other.scaledHeroDamage_;
          scaledTowerDamage_ = other.scaledTowerDamage_;
          scaledHeroHealing_ = other.scaledHeroHealing_;
          scaledKills_ = other.scaledKills_;
          scaledDeaths_ = other.scaledDeaths_;
          scaledAssists_ = other.scaledAssists_;
          claimedFarmGold_ = other.claimedFarmGold_;
          supportGold_ = other.supportGold_;
          claimedDenies_ = other.claimedDenies_;
          claimedMisses_ = other.claimedMisses_;
          misses_ = other.misses_;
          abilityUpgrades_ = other.abilityUpgrades_.Clone();
          additionalUnitsInventory_ = other.additionalUnitsInventory_.Clone();
          permanentBuffs_ = other.permanentBuffs_.Clone();
          proName_ = other.proName_;
          realName_ = other.realName_;
          customGameData_ = other.customGameData_ != null ? other.customGameData_.Clone() : null;
          activePlusSubscription_ = other.activePlusSubscription_;
          netWorth_ = other.netWorth_;
          botDifficulty_ = other.botDifficulty_;
          heroPickOrder_ = other.heroPickOrder_;
          heroWasRandomed_ = other.heroWasRandomed_;
          heroWasDotaPlusSuggestion_ = other.heroWasDotaPlusSuggestion_;
          heroDamageReceived_ = other.heroDamageReceived_.Clone();
          heroDamageDealt_ = other.heroDamageDealt_.Clone();
          secondsDead_ = other.secondsDead_;
          goldLostToDeath_ = other.goldLostToDeath_;
          laneSelectionFlags_ = other.laneSelectionFlags_;
          bountyRunes_ = other.bountyRunes_;
          outpostsCaptured_ = other.outpostsCaptured_;
          teamNumber_ = other.teamNumber_;
          teamSlot_ = other.teamSlot_;
          selectedFacet_ = other.selectedFacet_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "player_slot" field.</summary>
        public const int PlayerSlotFieldNumber = 2;
        private readonly static uint PlayerSlotDefaultValue = 0;

        private uint playerSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerSlot {
          get { if ((_hasBits0 & 2) != 0) { return playerSlot_; } else { return PlayerSlotDefaultValue; } }
          set {
            _hasBits0 |= 2;
            playerSlot_ = value;
          }
        }
        /// <summary>Gets whether the "player_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerSlot {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "player_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerSlot() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 3;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "item_0" field.</summary>
        public const int Item0FieldNumber = 4;
        private readonly static int Item0DefaultValue = -1;

        private int item0_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item0 {
          get { if ((_hasBits0 & 8) != 0) { return item0_; } else { return Item0DefaultValue; } }
          set {
            _hasBits0 |= 8;
            item0_ = value;
          }
        }
        /// <summary>Gets whether the "item_0" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem0 {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "item_0" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem0() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "item_1" field.</summary>
        public const int Item1FieldNumber = 5;
        private readonly static int Item1DefaultValue = -1;

        private int item1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item1 {
          get { if ((_hasBits0 & 16) != 0) { return item1_; } else { return Item1DefaultValue; } }
          set {
            _hasBits0 |= 16;
            item1_ = value;
          }
        }
        /// <summary>Gets whether the "item_1" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem1 {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "item_1" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem1() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "item_2" field.</summary>
        public const int Item2FieldNumber = 6;
        private readonly static int Item2DefaultValue = -1;

        private int item2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item2 {
          get { if ((_hasBits0 & 32) != 0) { return item2_; } else { return Item2DefaultValue; } }
          set {
            _hasBits0 |= 32;
            item2_ = value;
          }
        }
        /// <summary>Gets whether the "item_2" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem2 {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "item_2" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem2() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "item_3" field.</summary>
        public const int Item3FieldNumber = 7;
        private readonly static int Item3DefaultValue = -1;

        private int item3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item3 {
          get { if ((_hasBits0 & 64) != 0) { return item3_; } else { return Item3DefaultValue; } }
          set {
            _hasBits0 |= 64;
            item3_ = value;
          }
        }
        /// <summary>Gets whether the "item_3" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem3 {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "item_3" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem3() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "item_4" field.</summary>
        public const int Item4FieldNumber = 8;
        private readonly static int Item4DefaultValue = -1;

        private int item4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item4 {
          get { if ((_hasBits0 & 128) != 0) { return item4_; } else { return Item4DefaultValue; } }
          set {
            _hasBits0 |= 128;
            item4_ = value;
          }
        }
        /// <summary>Gets whether the "item_4" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem4 {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "item_4" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem4() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "item_5" field.</summary>
        public const int Item5FieldNumber = 9;
        private readonly static int Item5DefaultValue = -1;

        private int item5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item5 {
          get { if ((_hasBits0 & 256) != 0) { return item5_; } else { return Item5DefaultValue; } }
          set {
            _hasBits0 |= 256;
            item5_ = value;
          }
        }
        /// <summary>Gets whether the "item_5" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem5 {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "item_5" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem5() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "item_6" field.</summary>
        public const int Item6FieldNumber = 59;
        private readonly static int Item6DefaultValue = -1;

        private int item6_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item6 {
          get { if ((_hasBits1 & 131072) != 0) { return item6_; } else { return Item6DefaultValue; } }
          set {
            _hasBits1 |= 131072;
            item6_ = value;
          }
        }
        /// <summary>Gets whether the "item_6" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem6 {
          get { return (_hasBits1 & 131072) != 0; }
        }
        /// <summary>Clears the value of the "item_6" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem6() {
          _hasBits1 &= ~131072;
        }

        /// <summary>Field number for the "item_7" field.</summary>
        public const int Item7FieldNumber = 60;
        private readonly static int Item7DefaultValue = -1;

        private int item7_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item7 {
          get { if ((_hasBits1 & 262144) != 0) { return item7_; } else { return Item7DefaultValue; } }
          set {
            _hasBits1 |= 262144;
            item7_ = value;
          }
        }
        /// <summary>Gets whether the "item_7" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem7 {
          get { return (_hasBits1 & 262144) != 0; }
        }
        /// <summary>Clears the value of the "item_7" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem7() {
          _hasBits1 &= ~262144;
        }

        /// <summary>Field number for the "item_8" field.</summary>
        public const int Item8FieldNumber = 61;
        private readonly static int Item8DefaultValue = -1;

        private int item8_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item8 {
          get { if ((_hasBits1 & 524288) != 0) { return item8_; } else { return Item8DefaultValue; } }
          set {
            _hasBits1 |= 524288;
            item8_ = value;
          }
        }
        /// <summary>Gets whether the "item_8" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem8 {
          get { return (_hasBits1 & 524288) != 0; }
        }
        /// <summary>Clears the value of the "item_8" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem8() {
          _hasBits1 &= ~524288;
        }

        /// <summary>Field number for the "item_9" field.</summary>
        public const int Item9FieldNumber = 76;
        private readonly static int Item9DefaultValue = -1;

        private int item9_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item9 {
          get { if ((_hasBits1 & 134217728) != 0) { return item9_; } else { return Item9DefaultValue; } }
          set {
            _hasBits1 |= 134217728;
            item9_ = value;
          }
        }
        /// <summary>Gets whether the "item_9" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem9 {
          get { return (_hasBits1 & 134217728) != 0; }
        }
        /// <summary>Clears the value of the "item_9" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem9() {
          _hasBits1 &= ~134217728;
        }

        /// <summary>Field number for the "item_10" field.</summary>
        public const int Item10FieldNumber = 83;
        private readonly static int Item10DefaultValue = -1;

        private int item10_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item10 {
          get { if ((_hasBits2 & 2) != 0) { return item10_; } else { return Item10DefaultValue; } }
          set {
            _hasBits2 |= 2;
            item10_ = value;
          }
        }
        /// <summary>Gets whether the "item_10" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem10 {
          get { return (_hasBits2 & 2) != 0; }
        }
        /// <summary>Clears the value of the "item_10" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem10() {
          _hasBits2 &= ~2;
        }

        /// <summary>Field number for the "item_10_lvl" field.</summary>
        public const int Item10LvlFieldNumber = 84;
        private readonly static int Item10LvlDefaultValue = 0;

        private int item10Lvl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Item10Lvl {
          get { if ((_hasBits2 & 4) != 0) { return item10Lvl_; } else { return Item10LvlDefaultValue; } }
          set {
            _hasBits2 |= 4;
            item10Lvl_ = value;
          }
        }
        /// <summary>Gets whether the "item_10_lvl" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItem10Lvl {
          get { return (_hasBits2 & 4) != 0; }
        }
        /// <summary>Clears the value of the "item_10_lvl" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItem10Lvl() {
          _hasBits2 &= ~4;
        }

        /// <summary>Field number for the "expected_team_contribution" field.</summary>
        public const int ExpectedTeamContributionFieldNumber = 10;
        private readonly static float ExpectedTeamContributionDefaultValue = 0F;

        private float expectedTeamContribution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ExpectedTeamContribution {
          get { if ((_hasBits0 & 512) != 0) { return expectedTeamContribution_; } else { return ExpectedTeamContributionDefaultValue; } }
          set {
            _hasBits0 |= 512;
            expectedTeamContribution_ = value;
          }
        }
        /// <summary>Gets whether the "expected_team_contribution" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExpectedTeamContribution {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "expected_team_contribution" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExpectedTeamContribution() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "scaled_metric" field.</summary>
        public const int ScaledMetricFieldNumber = 11;
        private readonly static float ScaledMetricDefaultValue = 0F;

        private float scaledMetric_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ScaledMetric {
          get { if ((_hasBits0 & 1024) != 0) { return scaledMetric_; } else { return ScaledMetricDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            scaledMetric_ = value;
          }
        }
        /// <summary>Gets whether the "scaled_metric" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScaledMetric {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "scaled_metric" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScaledMetric() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "previous_rank" field.</summary>
        public const int PreviousRankFieldNumber = 12;
        private readonly static uint PreviousRankDefaultValue = 0;

        private uint previousRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PreviousRank {
          get { if ((_hasBits0 & 2048) != 0) { return previousRank_; } else { return PreviousRankDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            previousRank_ = value;
          }
        }
        /// <summary>Gets whether the "previous_rank" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPreviousRank {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "previous_rank" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPreviousRank() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "rank_change" field.</summary>
        public const int RankChangeFieldNumber = 13;
        private readonly static int RankChangeDefaultValue = 0;

        private int rankChange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RankChange {
          get { if ((_hasBits0 & 4096) != 0) { return rankChange_; } else { return RankChangeDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            rankChange_ = value;
          }
        }
        /// <summary>Gets whether the "rank_change" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRankChange {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "rank_change" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRankChange() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "mmr_type" field.</summary>
        public const int MmrTypeFieldNumber = 74;
        private readonly static uint MmrTypeDefaultValue = 0;

        private uint mmrType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MmrType {
          get { if ((_hasBits1 & 33554432) != 0) { return mmrType_; } else { return MmrTypeDefaultValue; } }
          set {
            _hasBits1 |= 33554432;
            mmrType_ = value;
          }
        }
        /// <summary>Gets whether the "mmr_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMmrType {
          get { return (_hasBits1 & 33554432) != 0; }
        }
        /// <summary>Clears the value of the "mmr_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMmrType() {
          _hasBits1 &= ~33554432;
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 14;
        private readonly static uint KillsDefaultValue = 0;

        private uint kills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Kills {
          get { if ((_hasBits0 & 8192) != 0) { return kills_; } else { return KillsDefaultValue; } }
          set {
            _hasBits0 |= 8192;
            kills_ = value;
          }
        }
        /// <summary>Gets whether the "kills" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKills {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "kills" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKills() {
          _hasBits0 &= ~8192;
        }

        /// <summary>Field number for the "deaths" field.</summary>
        public const int DeathsFieldNumber = 15;
        private readonly static uint DeathsDefaultValue = 0;

        private uint deaths_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Deaths {
          get { if ((_hasBits0 & 16384) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
          set {
            _hasBits0 |= 16384;
            deaths_ = value;
          }
        }
        /// <summary>Gets whether the "deaths" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeaths {
          get { return (_hasBits0 & 16384) != 0; }
        }
        /// <summary>Clears the value of the "deaths" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeaths() {
          _hasBits0 &= ~16384;
        }

        /// <summary>Field number for the "assists" field.</summary>
        public const int AssistsFieldNumber = 16;
        private readonly static uint AssistsDefaultValue = 0;

        private uint assists_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Assists {
          get { if ((_hasBits0 & 32768) != 0) { return assists_; } else { return AssistsDefaultValue; } }
          set {
            _hasBits0 |= 32768;
            assists_ = value;
          }
        }
        /// <summary>Gets whether the "assists" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAssists {
          get { return (_hasBits0 & 32768) != 0; }
        }
        /// <summary>Clears the value of the "assists" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAssists() {
          _hasBits0 &= ~32768;
        }

        /// <summary>Field number for the "leaver_status" field.</summary>
        public const int LeaverStatusFieldNumber = 17;
        private readonly static uint LeaverStatusDefaultValue = 0;

        private uint leaverStatus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeaverStatus {
          get { if ((_hasBits0 & 65536) != 0) { return leaverStatus_; } else { return LeaverStatusDefaultValue; } }
          set {
            _hasBits0 |= 65536;
            leaverStatus_ = value;
          }
        }
        /// <summary>Gets whether the "leaver_status" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeaverStatus {
          get { return (_hasBits0 & 65536) != 0; }
        }
        /// <summary>Clears the value of the "leaver_status" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeaverStatus() {
          _hasBits0 &= ~65536;
        }

        /// <summary>Field number for the "gold" field.</summary>
        public const int GoldFieldNumber = 18;
        private readonly static uint GoldDefaultValue = 0;

        private uint gold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Gold {
          get { if ((_hasBits0 & 131072) != 0) { return gold_; } else { return GoldDefaultValue; } }
          set {
            _hasBits0 |= 131072;
            gold_ = value;
          }
        }
        /// <summary>Gets whether the "gold" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGold {
          get { return (_hasBits0 & 131072) != 0; }
        }
        /// <summary>Clears the value of the "gold" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGold() {
          _hasBits0 &= ~131072;
        }

        /// <summary>Field number for the "last_hits" field.</summary>
        public const int LastHitsFieldNumber = 19;
        private readonly static uint LastHitsDefaultValue = 0;

        private uint lastHits_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LastHits {
          get { if ((_hasBits0 & 262144) != 0) { return lastHits_; } else { return LastHitsDefaultValue; } }
          set {
            _hasBits0 |= 262144;
            lastHits_ = value;
          }
        }
        /// <summary>Gets whether the "last_hits" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLastHits {
          get { return (_hasBits0 & 262144) != 0; }
        }
        /// <summary>Clears the value of the "last_hits" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLastHits() {
          _hasBits0 &= ~262144;
        }

        /// <summary>Field number for the "denies" field.</summary>
        public const int DeniesFieldNumber = 20;
        private readonly static uint DeniesDefaultValue = 0;

        private uint denies_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Denies {
          get { if ((_hasBits0 & 524288) != 0) { return denies_; } else { return DeniesDefaultValue; } }
          set {
            _hasBits0 |= 524288;
            denies_ = value;
          }
        }
        /// <summary>Gets whether the "denies" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDenies {
          get { return (_hasBits0 & 524288) != 0; }
        }
        /// <summary>Clears the value of the "denies" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDenies() {
          _hasBits0 &= ~524288;
        }

        /// <summary>Field number for the "gold_per_min" field.</summary>
        public const int GoldPerMinFieldNumber = 21;
        private readonly static uint GoldPerMinDefaultValue = 0;

        private uint goldPerMin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GoldPerMin {
          get { if ((_hasBits0 & 1048576) != 0) { return goldPerMin_; } else { return GoldPerMinDefaultValue; } }
          set {
            _hasBits0 |= 1048576;
            goldPerMin_ = value;
          }
        }
        /// <summary>Gets whether the "gold_per_min" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGoldPerMin {
          get { return (_hasBits0 & 1048576) != 0; }
        }
        /// <summary>Clears the value of the "gold_per_min" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGoldPerMin() {
          _hasBits0 &= ~1048576;
        }

        /// <summary>Field number for the "xp_per_min" field.</summary>
        public const int XpPerMinFieldNumber = 22;
        private readonly static uint XpPerMinDefaultValue = 0;

        private uint xpPerMin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint XpPerMin {
          get { if ((_hasBits0 & 2097152) != 0) { return xpPerMin_; } else { return XpPerMinDefaultValue; } }
          set {
            _hasBits0 |= 2097152;
            xpPerMin_ = value;
          }
        }
        /// <summary>Gets whether the "xp_per_min" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasXpPerMin {
          get { return (_hasBits0 & 2097152) != 0; }
        }
        /// <summary>Clears the value of the "xp_per_min" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearXpPerMin() {
          _hasBits0 &= ~2097152;
        }

        /// <summary>Field number for the "gold_spent" field.</summary>
        public const int GoldSpentFieldNumber = 23;
        private readonly static uint GoldSpentDefaultValue = 0;

        private uint goldSpent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GoldSpent {
          get { if ((_hasBits0 & 4194304) != 0) { return goldSpent_; } else { return GoldSpentDefaultValue; } }
          set {
            _hasBits0 |= 4194304;
            goldSpent_ = value;
          }
        }
        /// <summary>Gets whether the "gold_spent" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGoldSpent {
          get { return (_hasBits0 & 4194304) != 0; }
        }
        /// <summary>Clears the value of the "gold_spent" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGoldSpent() {
          _hasBits0 &= ~4194304;
        }

        /// <summary>Field number for the "hero_damage" field.</summary>
        public const int HeroDamageFieldNumber = 24;
        private readonly static uint HeroDamageDefaultValue = 0;

        private uint heroDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroDamage {
          get { if ((_hasBits0 & 8388608) != 0) { return heroDamage_; } else { return HeroDamageDefaultValue; } }
          set {
            _hasBits0 |= 8388608;
            heroDamage_ = value;
          }
        }
        /// <summary>Gets whether the "hero_damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroDamage {
          get { return (_hasBits0 & 8388608) != 0; }
        }
        /// <summary>Clears the value of the "hero_damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroDamage() {
          _hasBits0 &= ~8388608;
        }

        /// <summary>Field number for the "tower_damage" field.</summary>
        public const int TowerDamageFieldNumber = 25;
        private readonly static uint TowerDamageDefaultValue = 0;

        private uint towerDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TowerDamage {
          get { if ((_hasBits0 & 16777216) != 0) { return towerDamage_; } else { return TowerDamageDefaultValue; } }
          set {
            _hasBits0 |= 16777216;
            towerDamage_ = value;
          }
        }
        /// <summary>Gets whether the "tower_damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTowerDamage {
          get { return (_hasBits0 & 16777216) != 0; }
        }
        /// <summary>Clears the value of the "tower_damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTowerDamage() {
          _hasBits0 &= ~16777216;
        }

        /// <summary>Field number for the "hero_healing" field.</summary>
        public const int HeroHealingFieldNumber = 26;
        private readonly static uint HeroHealingDefaultValue = 0;

        private uint heroHealing_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroHealing {
          get { if ((_hasBits0 & 33554432) != 0) { return heroHealing_; } else { return HeroHealingDefaultValue; } }
          set {
            _hasBits0 |= 33554432;
            heroHealing_ = value;
          }
        }
        /// <summary>Gets whether the "hero_healing" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroHealing {
          get { return (_hasBits0 & 33554432) != 0; }
        }
        /// <summary>Clears the value of the "hero_healing" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroHealing() {
          _hasBits0 &= ~33554432;
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 27;
        private readonly static uint LevelDefaultValue = 0;

        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { if ((_hasBits0 & 67108864) != 0) { return level_; } else { return LevelDefaultValue; } }
          set {
            _hasBits0 |= 67108864;
            level_ = value;
          }
        }
        /// <summary>Gets whether the "level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLevel {
          get { return (_hasBits0 & 67108864) != 0; }
        }
        /// <summary>Clears the value of the "level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLevel() {
          _hasBits0 &= ~67108864;
        }

        /// <summary>Field number for the "time_last_seen" field.</summary>
        public const int TimeLastSeenFieldNumber = 28;
        private readonly static uint TimeLastSeenDefaultValue = 0;

        private uint timeLastSeen_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeLastSeen {
          get { if ((_hasBits0 & 134217728) != 0) { return timeLastSeen_; } else { return TimeLastSeenDefaultValue; } }
          set {
            _hasBits0 |= 134217728;
            timeLastSeen_ = value;
          }
        }
        /// <summary>Gets whether the "time_last_seen" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimeLastSeen {
          get { return (_hasBits0 & 134217728) != 0; }
        }
        /// <summary>Clears the value of the "time_last_seen" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimeLastSeen() {
          _hasBits0 &= ~134217728;
        }

        /// <summary>Field number for the "player_name" field.</summary>
        public const int PlayerNameFieldNumber = 29;
        private readonly static string PlayerNameDefaultValue = "";

        private string playerName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerName {
          get { return playerName_ ?? PlayerNameDefaultValue; }
          set {
            playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "player_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerName {
          get { return playerName_ != null; }
        }
        /// <summary>Clears the value of the "player_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerName() {
          playerName_ = null;
        }

        /// <summary>Field number for the "support_ability_value" field.</summary>
        public const int SupportAbilityValueFieldNumber = 30;
        private readonly static uint SupportAbilityValueDefaultValue = 0;

        private uint supportAbilityValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SupportAbilityValue {
          get { if ((_hasBits0 & 268435456) != 0) { return supportAbilityValue_; } else { return SupportAbilityValueDefaultValue; } }
          set {
            _hasBits0 |= 268435456;
            supportAbilityValue_ = value;
          }
        }
        /// <summary>Gets whether the "support_ability_value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSupportAbilityValue {
          get { return (_hasBits0 & 268435456) != 0; }
        }
        /// <summary>Clears the value of the "support_ability_value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSupportAbilityValue() {
          _hasBits0 &= ~268435456;
        }

        /// <summary>Field number for the "feeding_detected" field.</summary>
        public const int FeedingDetectedFieldNumber = 32;
        private readonly static bool FeedingDetectedDefaultValue = false;

        private bool feedingDetected_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FeedingDetected {
          get { if ((_hasBits0 & 536870912) != 0) { return feedingDetected_; } else { return FeedingDetectedDefaultValue; } }
          set {
            _hasBits0 |= 536870912;
            feedingDetected_ = value;
          }
        }
        /// <summary>Gets whether the "feeding_detected" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFeedingDetected {
          get { return (_hasBits0 & 536870912) != 0; }
        }
        /// <summary>Clears the value of the "feeding_detected" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFeedingDetected() {
          _hasBits0 &= ~536870912;
        }

        /// <summary>Field number for the "search_rank" field.</summary>
        public const int SearchRankFieldNumber = 34;
        private readonly static uint SearchRankDefaultValue = 0;

        private uint searchRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SearchRank {
          get { if ((_hasBits0 & 1073741824) != 0) { return searchRank_; } else { return SearchRankDefaultValue; } }
          set {
            _hasBits0 |= 1073741824;
            searchRank_ = value;
          }
        }
        /// <summary>Gets whether the "search_rank" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSearchRank {
          get { return (_hasBits0 & 1073741824) != 0; }
        }
        /// <summary>Clears the value of the "search_rank" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSearchRank() {
          _hasBits0 &= ~1073741824;
        }

        /// <summary>Field number for the "search_rank_uncertainty" field.</summary>
        public const int SearchRankUncertaintyFieldNumber = 35;
        private readonly static uint SearchRankUncertaintyDefaultValue = 0;

        private uint searchRankUncertainty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SearchRankUncertainty {
          get { if ((_hasBits0 & -2147483648) != 0) { return searchRankUncertainty_; } else { return SearchRankUncertaintyDefaultValue; } }
          set {
            _hasBits0 |= -2147483648;
            searchRankUncertainty_ = value;
          }
        }
        /// <summary>Gets whether the "search_rank_uncertainty" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSearchRankUncertainty {
          get { return (_hasBits0 & -2147483648) != 0; }
        }
        /// <summary>Clears the value of the "search_rank_uncertainty" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSearchRankUncertainty() {
          _hasBits0 &= ~-2147483648;
        }

        /// <summary>Field number for the "rank_uncertainty_change" field.</summary>
        public const int RankUncertaintyChangeFieldNumber = 36;
        private readonly static int RankUncertaintyChangeDefaultValue = 0;

        private int rankUncertaintyChange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RankUncertaintyChange {
          get { if ((_hasBits1 & 1) != 0) { return rankUncertaintyChange_; } else { return RankUncertaintyChangeDefaultValue; } }
          set {
            _hasBits1 |= 1;
            rankUncertaintyChange_ = value;
          }
        }
        /// <summary>Gets whether the "rank_uncertainty_change" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRankUncertaintyChange {
          get { return (_hasBits1 & 1) != 0; }
        }
        /// <summary>Clears the value of the "rank_uncertainty_change" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRankUncertaintyChange() {
          _hasBits1 &= ~1;
        }

        /// <summary>Field number for the "hero_play_count" field.</summary>
        public const int HeroPlayCountFieldNumber = 37;
        private readonly static uint HeroPlayCountDefaultValue = 0;

        private uint heroPlayCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroPlayCount {
          get { if ((_hasBits1 & 2) != 0) { return heroPlayCount_; } else { return HeroPlayCountDefaultValue; } }
          set {
            _hasBits1 |= 2;
            heroPlayCount_ = value;
          }
        }
        /// <summary>Gets whether the "hero_play_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroPlayCount {
          get { return (_hasBits1 & 2) != 0; }
        }
        /// <summary>Clears the value of the "hero_play_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroPlayCount() {
          _hasBits1 &= ~2;
        }

        /// <summary>Field number for the "party_id" field.</summary>
        public const int PartyIdFieldNumber = 38;
        private readonly static ulong PartyIdDefaultValue = 0UL;

        private ulong partyId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong PartyId {
          get { if ((_hasBits1 & 4) != 0) { return partyId_; } else { return PartyIdDefaultValue; } }
          set {
            _hasBits1 |= 4;
            partyId_ = value;
          }
        }
        /// <summary>Gets whether the "party_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPartyId {
          get { return (_hasBits1 & 4) != 0; }
        }
        /// <summary>Clears the value of the "party_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPartyId() {
          _hasBits1 &= ~4;
        }

        /// <summary>Field number for the "scaled_hero_damage" field.</summary>
        public const int ScaledHeroDamageFieldNumber = 54;
        private readonly static uint ScaledHeroDamageDefaultValue = 0;

        private uint scaledHeroDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScaledHeroDamage {
          get { if ((_hasBits1 & 8192) != 0) { return scaledHeroDamage_; } else { return ScaledHeroDamageDefaultValue; } }
          set {
            _hasBits1 |= 8192;
            scaledHeroDamage_ = value;
          }
        }
        /// <summary>Gets whether the "scaled_hero_damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScaledHeroDamage {
          get { return (_hasBits1 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "scaled_hero_damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScaledHeroDamage() {
          _hasBits1 &= ~8192;
        }

        /// <summary>Field number for the "scaled_tower_damage" field.</summary>
        public const int ScaledTowerDamageFieldNumber = 55;
        private readonly static uint ScaledTowerDamageDefaultValue = 0;

        private uint scaledTowerDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScaledTowerDamage {
          get { if ((_hasBits1 & 16384) != 0) { return scaledTowerDamage_; } else { return ScaledTowerDamageDefaultValue; } }
          set {
            _hasBits1 |= 16384;
            scaledTowerDamage_ = value;
          }
        }
        /// <summary>Gets whether the "scaled_tower_damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScaledTowerDamage {
          get { return (_hasBits1 & 16384) != 0; }
        }
        /// <summary>Clears the value of the "scaled_tower_damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScaledTowerDamage() {
          _hasBits1 &= ~16384;
        }

        /// <summary>Field number for the "scaled_hero_healing" field.</summary>
        public const int ScaledHeroHealingFieldNumber = 56;
        private readonly static uint ScaledHeroHealingDefaultValue = 0;

        private uint scaledHeroHealing_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScaledHeroHealing {
          get { if ((_hasBits1 & 32768) != 0) { return scaledHeroHealing_; } else { return ScaledHeroHealingDefaultValue; } }
          set {
            _hasBits1 |= 32768;
            scaledHeroHealing_ = value;
          }
        }
        /// <summary>Gets whether the "scaled_hero_healing" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScaledHeroHealing {
          get { return (_hasBits1 & 32768) != 0; }
        }
        /// <summary>Clears the value of the "scaled_hero_healing" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScaledHeroHealing() {
          _hasBits1 &= ~32768;
        }

        /// <summary>Field number for the "scaled_kills" field.</summary>
        public const int ScaledKillsFieldNumber = 39;
        private readonly static float ScaledKillsDefaultValue = 0F;

        private float scaledKills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ScaledKills {
          get { if ((_hasBits1 & 8) != 0) { return scaledKills_; } else { return ScaledKillsDefaultValue; } }
          set {
            _hasBits1 |= 8;
            scaledKills_ = value;
          }
        }
        /// <summary>Gets whether the "scaled_kills" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScaledKills {
          get { return (_hasBits1 & 8) != 0; }
        }
        /// <summary>Clears the value of the "scaled_kills" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScaledKills() {
          _hasBits1 &= ~8;
        }

        /// <summary>Field number for the "scaled_deaths" field.</summary>
        public const int ScaledDeathsFieldNumber = 40;
        private readonly static float ScaledDeathsDefaultValue = 0F;

        private float scaledDeaths_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ScaledDeaths {
          get { if ((_hasBits1 & 16) != 0) { return scaledDeaths_; } else { return ScaledDeathsDefaultValue; } }
          set {
            _hasBits1 |= 16;
            scaledDeaths_ = value;
          }
        }
        /// <summary>Gets whether the "scaled_deaths" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScaledDeaths {
          get { return (_hasBits1 & 16) != 0; }
        }
        /// <summary>Clears the value of the "scaled_deaths" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScaledDeaths() {
          _hasBits1 &= ~16;
        }

        /// <summary>Field number for the "scaled_assists" field.</summary>
        public const int ScaledAssistsFieldNumber = 41;
        private readonly static float ScaledAssistsDefaultValue = 0F;

        private float scaledAssists_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ScaledAssists {
          get { if ((_hasBits1 & 32) != 0) { return scaledAssists_; } else { return ScaledAssistsDefaultValue; } }
          set {
            _hasBits1 |= 32;
            scaledAssists_ = value;
          }
        }
        /// <summary>Gets whether the "scaled_assists" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScaledAssists {
          get { return (_hasBits1 & 32) != 0; }
        }
        /// <summary>Clears the value of the "scaled_assists" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScaledAssists() {
          _hasBits1 &= ~32;
        }

        /// <summary>Field number for the "claimed_farm_gold" field.</summary>
        public const int ClaimedFarmGoldFieldNumber = 42;
        private readonly static uint ClaimedFarmGoldDefaultValue = 0;

        private uint claimedFarmGold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ClaimedFarmGold {
          get { if ((_hasBits1 & 64) != 0) { return claimedFarmGold_; } else { return ClaimedFarmGoldDefaultValue; } }
          set {
            _hasBits1 |= 64;
            claimedFarmGold_ = value;
          }
        }
        /// <summary>Gets whether the "claimed_farm_gold" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasClaimedFarmGold {
          get { return (_hasBits1 & 64) != 0; }
        }
        /// <summary>Clears the value of the "claimed_farm_gold" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearClaimedFarmGold() {
          _hasBits1 &= ~64;
        }

        /// <summary>Field number for the "support_gold" field.</summary>
        public const int SupportGoldFieldNumber = 43;
        private readonly static uint SupportGoldDefaultValue = 0;

        private uint supportGold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SupportGold {
          get { if ((_hasBits1 & 128) != 0) { return supportGold_; } else { return SupportGoldDefaultValue; } }
          set {
            _hasBits1 |= 128;
            supportGold_ = value;
          }
        }
        /// <summary>Gets whether the "support_gold" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSupportGold {
          get { return (_hasBits1 & 128) != 0; }
        }
        /// <summary>Clears the value of the "support_gold" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSupportGold() {
          _hasBits1 &= ~128;
        }

        /// <summary>Field number for the "claimed_denies" field.</summary>
        public const int ClaimedDeniesFieldNumber = 44;
        private readonly static uint ClaimedDeniesDefaultValue = 0;

        private uint claimedDenies_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ClaimedDenies {
          get { if ((_hasBits1 & 256) != 0) { return claimedDenies_; } else { return ClaimedDeniesDefaultValue; } }
          set {
            _hasBits1 |= 256;
            claimedDenies_ = value;
          }
        }
        /// <summary>Gets whether the "claimed_denies" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasClaimedDenies {
          get { return (_hasBits1 & 256) != 0; }
        }
        /// <summary>Clears the value of the "claimed_denies" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearClaimedDenies() {
          _hasBits1 &= ~256;
        }

        /// <summary>Field number for the "claimed_misses" field.</summary>
        public const int ClaimedMissesFieldNumber = 45;
        private readonly static uint ClaimedMissesDefaultValue = 0;

        private uint claimedMisses_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ClaimedMisses {
          get { if ((_hasBits1 & 512) != 0) { return claimedMisses_; } else { return ClaimedMissesDefaultValue; } }
          set {
            _hasBits1 |= 512;
            claimedMisses_ = value;
          }
        }
        /// <summary>Gets whether the "claimed_misses" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasClaimedMisses {
          get { return (_hasBits1 & 512) != 0; }
        }
        /// <summary>Clears the value of the "claimed_misses" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearClaimedMisses() {
          _hasBits1 &= ~512;
        }

        /// <summary>Field number for the "misses" field.</summary>
        public const int MissesFieldNumber = 46;
        private readonly static uint MissesDefaultValue = 0;

        private uint misses_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Misses {
          get { if ((_hasBits1 & 1024) != 0) { return misses_; } else { return MissesDefaultValue; } }
          set {
            _hasBits1 |= 1024;
            misses_ = value;
          }
        }
        /// <summary>Gets whether the "misses" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMisses {
          get { return (_hasBits1 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "misses" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMisses() {
          _hasBits1 &= ~1024;
        }

        /// <summary>Field number for the "ability_upgrades" field.</summary>
        public const int AbilityUpgradesFieldNumber = 47;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade> _repeated_abilityUpgrades_codec
            = pb::FieldCodec.ForMessage(378, global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade> abilityUpgrades_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerAbilityUpgrade> AbilityUpgrades {
          get { return abilityUpgrades_; }
        }

        /// <summary>Field number for the "additional_units_inventory" field.</summary>
        public const int AdditionalUnitsInventoryFieldNumber = 48;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory> _repeated_additionalUnitsInventory_codec
            = pb::FieldCodec.ForMessage(386, global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory> additionalUnitsInventory_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchAdditionalUnitInventory> AdditionalUnitsInventory {
          get { return additionalUnitsInventory_; }
        }

        /// <summary>Field number for the "permanent_buffs" field.</summary>
        public const int PermanentBuffsFieldNumber = 57;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff> _repeated_permanentBuffs_codec
            = pb::FieldCodec.ForMessage(458, global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff> permanentBuffs_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMatchPlayerPermanentBuff> PermanentBuffs {
          get { return permanentBuffs_; }
        }

        /// <summary>Field number for the "pro_name" field.</summary>
        public const int ProNameFieldNumber = 72;
        private readonly static string ProNameDefaultValue = "";

        private string proName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProName {
          get { return proName_ ?? ProNameDefaultValue; }
          set {
            proName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "pro_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProName {
          get { return proName_ != null; }
        }
        /// <summary>Clears the value of the "pro_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProName() {
          proName_ = null;
        }

        /// <summary>Field number for the "real_name" field.</summary>
        public const int RealNameFieldNumber = 73;
        private readonly static string RealNameDefaultValue = "";

        private string realName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RealName {
          get { return realName_ ?? RealNameDefaultValue; }
          set {
            realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "real_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRealName {
          get { return realName_ != null; }
        }
        /// <summary>Clears the value of the "real_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRealName() {
          realName_ = null;
        }

        /// <summary>Field number for the "custom_game_data" field.</summary>
        public const int CustomGameDataFieldNumber = 50;
        private global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.CustomGameData customGameData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.CustomGameData CustomGameData {
          get { return customGameData_; }
          set {
            customGameData_ = value;
          }
        }

        /// <summary>Field number for the "active_plus_subscription" field.</summary>
        public const int ActivePlusSubscriptionFieldNumber = 51;
        private readonly static bool ActivePlusSubscriptionDefaultValue = false;

        private bool activePlusSubscription_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ActivePlusSubscription {
          get { if ((_hasBits1 & 2048) != 0) { return activePlusSubscription_; } else { return ActivePlusSubscriptionDefaultValue; } }
          set {
            _hasBits1 |= 2048;
            activePlusSubscription_ = value;
          }
        }
        /// <summary>Gets whether the "active_plus_subscription" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActivePlusSubscription {
          get { return (_hasBits1 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "active_plus_subscription" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActivePlusSubscription() {
          _hasBits1 &= ~2048;
        }

        /// <summary>Field number for the "net_worth" field.</summary>
        public const int NetWorthFieldNumber = 52;
        private readonly static uint NetWorthDefaultValue = 0;

        private uint netWorth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NetWorth {
          get { if ((_hasBits1 & 4096) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
          set {
            _hasBits1 |= 4096;
            netWorth_ = value;
          }
        }
        /// <summary>Gets whether the "net_worth" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNetWorth {
          get { return (_hasBits1 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "net_worth" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNetWorth() {
          _hasBits1 &= ~4096;
        }

        /// <summary>Field number for the "bot_difficulty" field.</summary>
        public const int BotDifficultyFieldNumber = 58;
        private readonly static uint BotDifficultyDefaultValue = 0;

        private uint botDifficulty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BotDifficulty {
          get { if ((_hasBits1 & 65536) != 0) { return botDifficulty_; } else { return BotDifficultyDefaultValue; } }
          set {
            _hasBits1 |= 65536;
            botDifficulty_ = value;
          }
        }
        /// <summary>Gets whether the "bot_difficulty" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBotDifficulty {
          get { return (_hasBits1 & 65536) != 0; }
        }
        /// <summary>Clears the value of the "bot_difficulty" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBotDifficulty() {
          _hasBits1 &= ~65536;
        }

        /// <summary>Field number for the "hero_pick_order" field.</summary>
        public const int HeroPickOrderFieldNumber = 63;
        private readonly static uint HeroPickOrderDefaultValue = 0;

        private uint heroPickOrder_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroPickOrder {
          get { if ((_hasBits1 & 1048576) != 0) { return heroPickOrder_; } else { return HeroPickOrderDefaultValue; } }
          set {
            _hasBits1 |= 1048576;
            heroPickOrder_ = value;
          }
        }
        /// <summary>Gets whether the "hero_pick_order" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroPickOrder {
          get { return (_hasBits1 & 1048576) != 0; }
        }
        /// <summary>Clears the value of the "hero_pick_order" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroPickOrder() {
          _hasBits1 &= ~1048576;
        }

        /// <summary>Field number for the "hero_was_randomed" field.</summary>
        public const int HeroWasRandomedFieldNumber = 64;
        private readonly static bool HeroWasRandomedDefaultValue = false;

        private bool heroWasRandomed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HeroWasRandomed {
          get { if ((_hasBits1 & 2097152) != 0) { return heroWasRandomed_; } else { return HeroWasRandomedDefaultValue; } }
          set {
            _hasBits1 |= 2097152;
            heroWasRandomed_ = value;
          }
        }
        /// <summary>Gets whether the "hero_was_randomed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroWasRandomed {
          get { return (_hasBits1 & 2097152) != 0; }
        }
        /// <summary>Clears the value of the "hero_was_randomed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroWasRandomed() {
          _hasBits1 &= ~2097152;
        }

        /// <summary>Field number for the "hero_was_dota_plus_suggestion" field.</summary>
        public const int HeroWasDotaPlusSuggestionFieldNumber = 69;
        private readonly static bool HeroWasDotaPlusSuggestionDefaultValue = false;

        private bool heroWasDotaPlusSuggestion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HeroWasDotaPlusSuggestion {
          get { if ((_hasBits1 & 4194304) != 0) { return heroWasDotaPlusSuggestion_; } else { return HeroWasDotaPlusSuggestionDefaultValue; } }
          set {
            _hasBits1 |= 4194304;
            heroWasDotaPlusSuggestion_ = value;
          }
        }
        /// <summary>Gets whether the "hero_was_dota_plus_suggestion" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroWasDotaPlusSuggestion {
          get { return (_hasBits1 & 4194304) != 0; }
        }
        /// <summary>Clears the value of the "hero_was_dota_plus_suggestion" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroWasDotaPlusSuggestion() {
          _hasBits1 &= ~4194304;
        }

        /// <summary>Field number for the "hero_damage_received" field.</summary>
        public const int HeroDamageReceivedFieldNumber = 67;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived> _repeated_heroDamageReceived_codec
            = pb::FieldCodec.ForMessage(538, global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived> heroDamageReceived_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived> HeroDamageReceived {
          get { return heroDamageReceived_; }
        }

        /// <summary>Field number for the "hero_damage_dealt" field.</summary>
        public const int HeroDamageDealtFieldNumber = 79;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived> _repeated_heroDamageDealt_codec
            = pb::FieldCodec.ForMessage(634, global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived> heroDamageDealt_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageReceived> HeroDamageDealt {
          get { return heroDamageDealt_; }
        }

        /// <summary>Field number for the "seconds_dead" field.</summary>
        public const int SecondsDeadFieldNumber = 70;
        private readonly static uint SecondsDeadDefaultValue = 0;

        private uint secondsDead_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SecondsDead {
          get { if ((_hasBits1 & 8388608) != 0) { return secondsDead_; } else { return SecondsDeadDefaultValue; } }
          set {
            _hasBits1 |= 8388608;
            secondsDead_ = value;
          }
        }
        /// <summary>Gets whether the "seconds_dead" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSecondsDead {
          get { return (_hasBits1 & 8388608) != 0; }
        }
        /// <summary>Clears the value of the "seconds_dead" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSecondsDead() {
          _hasBits1 &= ~8388608;
        }

        /// <summary>Field number for the "gold_lost_to_death" field.</summary>
        public const int GoldLostToDeathFieldNumber = 71;
        private readonly static uint GoldLostToDeathDefaultValue = 0;

        private uint goldLostToDeath_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GoldLostToDeath {
          get { if ((_hasBits1 & 16777216) != 0) { return goldLostToDeath_; } else { return GoldLostToDeathDefaultValue; } }
          set {
            _hasBits1 |= 16777216;
            goldLostToDeath_ = value;
          }
        }
        /// <summary>Gets whether the "gold_lost_to_death" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGoldLostToDeath {
          get { return (_hasBits1 & 16777216) != 0; }
        }
        /// <summary>Clears the value of the "gold_lost_to_death" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGoldLostToDeath() {
          _hasBits1 &= ~16777216;
        }

        /// <summary>Field number for the "lane_selection_flags" field.</summary>
        public const int LaneSelectionFlagsFieldNumber = 75;
        private readonly static uint LaneSelectionFlagsDefaultValue = 0;

        private uint laneSelectionFlags_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LaneSelectionFlags {
          get { if ((_hasBits1 & 67108864) != 0) { return laneSelectionFlags_; } else { return LaneSelectionFlagsDefaultValue; } }
          set {
            _hasBits1 |= 67108864;
            laneSelectionFlags_ = value;
          }
        }
        /// <summary>Gets whether the "lane_selection_flags" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLaneSelectionFlags {
          get { return (_hasBits1 & 67108864) != 0; }
        }
        /// <summary>Clears the value of the "lane_selection_flags" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLaneSelectionFlags() {
          _hasBits1 &= ~67108864;
        }

        /// <summary>Field number for the "bounty_runes" field.</summary>
        public const int BountyRunesFieldNumber = 77;
        private readonly static uint BountyRunesDefaultValue = 0;

        private uint bountyRunes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BountyRunes {
          get { if ((_hasBits1 & 268435456) != 0) { return bountyRunes_; } else { return BountyRunesDefaultValue; } }
          set {
            _hasBits1 |= 268435456;
            bountyRunes_ = value;
          }
        }
        /// <summary>Gets whether the "bounty_runes" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBountyRunes {
          get { return (_hasBits1 & 268435456) != 0; }
        }
        /// <summary>Clears the value of the "bounty_runes" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBountyRunes() {
          _hasBits1 &= ~268435456;
        }

        /// <summary>Field number for the "outposts_captured" field.</summary>
        public const int OutpostsCapturedFieldNumber = 78;
        private readonly static uint OutpostsCapturedDefaultValue = 0;

        private uint outpostsCaptured_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OutpostsCaptured {
          get { if ((_hasBits1 & 536870912) != 0) { return outpostsCaptured_; } else { return OutpostsCapturedDefaultValue; } }
          set {
            _hasBits1 |= 536870912;
            outpostsCaptured_ = value;
          }
        }
        /// <summary>Gets whether the "outposts_captured" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOutpostsCaptured {
          get { return (_hasBits1 & 536870912) != 0; }
        }
        /// <summary>Clears the value of the "outposts_captured" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOutpostsCaptured() {
          _hasBits1 &= ~536870912;
        }

        /// <summary>Field number for the "team_number" field.</summary>
        public const int TeamNumberFieldNumber = 80;
        private readonly static global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamNumberDefaultValue = global::Steam.Protos.Dota2.DOTA_GC_TEAM.GoodGuys;

        private global::Steam.Protos.Dota2.DOTA_GC_TEAM teamNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamNumber {
          get { if ((_hasBits1 & 1073741824) != 0) { return teamNumber_; } else { return TeamNumberDefaultValue; } }
          set {
            _hasBits1 |= 1073741824;
            teamNumber_ = value;
          }
        }
        /// <summary>Gets whether the "team_number" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamNumber {
          get { return (_hasBits1 & 1073741824) != 0; }
        }
        /// <summary>Clears the value of the "team_number" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamNumber() {
          _hasBits1 &= ~1073741824;
        }

        /// <summary>Field number for the "team_slot" field.</summary>
        public const int TeamSlotFieldNumber = 81;
        private readonly static uint TeamSlotDefaultValue = 0;

        private uint teamSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeamSlot {
          get { if ((_hasBits1 & -2147483648) != 0) { return teamSlot_; } else { return TeamSlotDefaultValue; } }
          set {
            _hasBits1 |= -2147483648;
            teamSlot_ = value;
          }
        }
        /// <summary>Gets whether the "team_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamSlot {
          get { return (_hasBits1 & -2147483648) != 0; }
        }
        /// <summary>Clears the value of the "team_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamSlot() {
          _hasBits1 &= ~-2147483648;
        }

        /// <summary>Field number for the "selected_facet" field.</summary>
        public const int SelectedFacetFieldNumber = 82;
        private readonly static uint SelectedFacetDefaultValue = 0;

        private uint selectedFacet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SelectedFacet {
          get { if ((_hasBits2 & 1) != 0) { return selectedFacet_; } else { return SelectedFacetDefaultValue; } }
          set {
            _hasBits2 |= 1;
            selectedFacet_ = value;
          }
        }
        /// <summary>Gets whether the "selected_facet" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelectedFacet {
          get { return (_hasBits2 & 1) != 0; }
        }
        /// <summary>Clears the value of the "selected_facet" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelectedFacet() {
          _hasBits2 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (PlayerSlot != other.PlayerSlot) return false;
          if (HeroId != other.HeroId) return false;
          if (Item0 != other.Item0) return false;
          if (Item1 != other.Item1) return false;
          if (Item2 != other.Item2) return false;
          if (Item3 != other.Item3) return false;
          if (Item4 != other.Item4) return false;
          if (Item5 != other.Item5) return false;
          if (Item6 != other.Item6) return false;
          if (Item7 != other.Item7) return false;
          if (Item8 != other.Item8) return false;
          if (Item9 != other.Item9) return false;
          if (Item10 != other.Item10) return false;
          if (Item10Lvl != other.Item10Lvl) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpectedTeamContribution, other.ExpectedTeamContribution)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaledMetric, other.ScaledMetric)) return false;
          if (PreviousRank != other.PreviousRank) return false;
          if (RankChange != other.RankChange) return false;
          if (MmrType != other.MmrType) return false;
          if (Kills != other.Kills) return false;
          if (Deaths != other.Deaths) return false;
          if (Assists != other.Assists) return false;
          if (LeaverStatus != other.LeaverStatus) return false;
          if (Gold != other.Gold) return false;
          if (LastHits != other.LastHits) return false;
          if (Denies != other.Denies) return false;
          if (GoldPerMin != other.GoldPerMin) return false;
          if (XpPerMin != other.XpPerMin) return false;
          if (GoldSpent != other.GoldSpent) return false;
          if (HeroDamage != other.HeroDamage) return false;
          if (TowerDamage != other.TowerDamage) return false;
          if (HeroHealing != other.HeroHealing) return false;
          if (Level != other.Level) return false;
          if (TimeLastSeen != other.TimeLastSeen) return false;
          if (PlayerName != other.PlayerName) return false;
          if (SupportAbilityValue != other.SupportAbilityValue) return false;
          if (FeedingDetected != other.FeedingDetected) return false;
          if (SearchRank != other.SearchRank) return false;
          if (SearchRankUncertainty != other.SearchRankUncertainty) return false;
          if (RankUncertaintyChange != other.RankUncertaintyChange) return false;
          if (HeroPlayCount != other.HeroPlayCount) return false;
          if (PartyId != other.PartyId) return false;
          if (ScaledHeroDamage != other.ScaledHeroDamage) return false;
          if (ScaledTowerDamage != other.ScaledTowerDamage) return false;
          if (ScaledHeroHealing != other.ScaledHeroHealing) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaledKills, other.ScaledKills)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaledDeaths, other.ScaledDeaths)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaledAssists, other.ScaledAssists)) return false;
          if (ClaimedFarmGold != other.ClaimedFarmGold) return false;
          if (SupportGold != other.SupportGold) return false;
          if (ClaimedDenies != other.ClaimedDenies) return false;
          if (ClaimedMisses != other.ClaimedMisses) return false;
          if (Misses != other.Misses) return false;
          if(!abilityUpgrades_.Equals(other.abilityUpgrades_)) return false;
          if(!additionalUnitsInventory_.Equals(other.additionalUnitsInventory_)) return false;
          if(!permanentBuffs_.Equals(other.permanentBuffs_)) return false;
          if (ProName != other.ProName) return false;
          if (RealName != other.RealName) return false;
          if (!object.Equals(CustomGameData, other.CustomGameData)) return false;
          if (ActivePlusSubscription != other.ActivePlusSubscription) return false;
          if (NetWorth != other.NetWorth) return false;
          if (BotDifficulty != other.BotDifficulty) return false;
          if (HeroPickOrder != other.HeroPickOrder) return false;
          if (HeroWasRandomed != other.HeroWasRandomed) return false;
          if (HeroWasDotaPlusSuggestion != other.HeroWasDotaPlusSuggestion) return false;
          if(!heroDamageReceived_.Equals(other.heroDamageReceived_)) return false;
          if(!heroDamageDealt_.Equals(other.heroDamageDealt_)) return false;
          if (SecondsDead != other.SecondsDead) return false;
          if (GoldLostToDeath != other.GoldLostToDeath) return false;
          if (LaneSelectionFlags != other.LaneSelectionFlags) return false;
          if (BountyRunes != other.BountyRunes) return false;
          if (OutpostsCaptured != other.OutpostsCaptured) return false;
          if (TeamNumber != other.TeamNumber) return false;
          if (TeamSlot != other.TeamSlot) return false;
          if (SelectedFacet != other.SelectedFacet) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasPlayerSlot) hash ^= PlayerSlot.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasItem0) hash ^= Item0.GetHashCode();
          if (HasItem1) hash ^= Item1.GetHashCode();
          if (HasItem2) hash ^= Item2.GetHashCode();
          if (HasItem3) hash ^= Item3.GetHashCode();
          if (HasItem4) hash ^= Item4.GetHashCode();
          if (HasItem5) hash ^= Item5.GetHashCode();
          if (HasItem6) hash ^= Item6.GetHashCode();
          if (HasItem7) hash ^= Item7.GetHashCode();
          if (HasItem8) hash ^= Item8.GetHashCode();
          if (HasItem9) hash ^= Item9.GetHashCode();
          if (HasItem10) hash ^= Item10.GetHashCode();
          if (HasItem10Lvl) hash ^= Item10Lvl.GetHashCode();
          if (HasExpectedTeamContribution) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpectedTeamContribution);
          if (HasScaledMetric) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaledMetric);
          if (HasPreviousRank) hash ^= PreviousRank.GetHashCode();
          if (HasRankChange) hash ^= RankChange.GetHashCode();
          if (HasMmrType) hash ^= MmrType.GetHashCode();
          if (HasKills) hash ^= Kills.GetHashCode();
          if (HasDeaths) hash ^= Deaths.GetHashCode();
          if (HasAssists) hash ^= Assists.GetHashCode();
          if (HasLeaverStatus) hash ^= LeaverStatus.GetHashCode();
          if (HasGold) hash ^= Gold.GetHashCode();
          if (HasLastHits) hash ^= LastHits.GetHashCode();
          if (HasDenies) hash ^= Denies.GetHashCode();
          if (HasGoldPerMin) hash ^= GoldPerMin.GetHashCode();
          if (HasXpPerMin) hash ^= XpPerMin.GetHashCode();
          if (HasGoldSpent) hash ^= GoldSpent.GetHashCode();
          if (HasHeroDamage) hash ^= HeroDamage.GetHashCode();
          if (HasTowerDamage) hash ^= TowerDamage.GetHashCode();
          if (HasHeroHealing) hash ^= HeroHealing.GetHashCode();
          if (HasLevel) hash ^= Level.GetHashCode();
          if (HasTimeLastSeen) hash ^= TimeLastSeen.GetHashCode();
          if (HasPlayerName) hash ^= PlayerName.GetHashCode();
          if (HasSupportAbilityValue) hash ^= SupportAbilityValue.GetHashCode();
          if (HasFeedingDetected) hash ^= FeedingDetected.GetHashCode();
          if (HasSearchRank) hash ^= SearchRank.GetHashCode();
          if (HasSearchRankUncertainty) hash ^= SearchRankUncertainty.GetHashCode();
          if (HasRankUncertaintyChange) hash ^= RankUncertaintyChange.GetHashCode();
          if (HasHeroPlayCount) hash ^= HeroPlayCount.GetHashCode();
          if (HasPartyId) hash ^= PartyId.GetHashCode();
          if (HasScaledHeroDamage) hash ^= ScaledHeroDamage.GetHashCode();
          if (HasScaledTowerDamage) hash ^= ScaledTowerDamage.GetHashCode();
          if (HasScaledHeroHealing) hash ^= ScaledHeroHealing.GetHashCode();
          if (HasScaledKills) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaledKills);
          if (HasScaledDeaths) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaledDeaths);
          if (HasScaledAssists) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaledAssists);
          if (HasClaimedFarmGold) hash ^= ClaimedFarmGold.GetHashCode();
          if (HasSupportGold) hash ^= SupportGold.GetHashCode();
          if (HasClaimedDenies) hash ^= ClaimedDenies.GetHashCode();
          if (HasClaimedMisses) hash ^= ClaimedMisses.GetHashCode();
          if (HasMisses) hash ^= Misses.GetHashCode();
          hash ^= abilityUpgrades_.GetHashCode();
          hash ^= additionalUnitsInventory_.GetHashCode();
          hash ^= permanentBuffs_.GetHashCode();
          if (HasProName) hash ^= ProName.GetHashCode();
          if (HasRealName) hash ^= RealName.GetHashCode();
          if (customGameData_ != null) hash ^= CustomGameData.GetHashCode();
          if (HasActivePlusSubscription) hash ^= ActivePlusSubscription.GetHashCode();
          if (HasNetWorth) hash ^= NetWorth.GetHashCode();
          if (HasBotDifficulty) hash ^= BotDifficulty.GetHashCode();
          if (HasHeroPickOrder) hash ^= HeroPickOrder.GetHashCode();
          if (HasHeroWasRandomed) hash ^= HeroWasRandomed.GetHashCode();
          if (HasHeroWasDotaPlusSuggestion) hash ^= HeroWasDotaPlusSuggestion.GetHashCode();
          hash ^= heroDamageReceived_.GetHashCode();
          hash ^= heroDamageDealt_.GetHashCode();
          if (HasSecondsDead) hash ^= SecondsDead.GetHashCode();
          if (HasGoldLostToDeath) hash ^= GoldLostToDeath.GetHashCode();
          if (HasLaneSelectionFlags) hash ^= LaneSelectionFlags.GetHashCode();
          if (HasBountyRunes) hash ^= BountyRunes.GetHashCode();
          if (HasOutpostsCaptured) hash ^= OutpostsCaptured.GetHashCode();
          if (HasTeamNumber) hash ^= TeamNumber.GetHashCode();
          if (HasTeamSlot) hash ^= TeamSlot.GetHashCode();
          if (HasSelectedFacet) hash ^= SelectedFacet.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasPlayerSlot) {
            output.WriteRawTag(16);
            output.WriteUInt32(PlayerSlot);
          }
          if (HasHeroId) {
            output.WriteRawTag(24);
            output.WriteInt32(HeroId);
          }
          if (HasItem0) {
            output.WriteRawTag(32);
            output.WriteInt32(Item0);
          }
          if (HasItem1) {
            output.WriteRawTag(40);
            output.WriteInt32(Item1);
          }
          if (HasItem2) {
            output.WriteRawTag(48);
            output.WriteInt32(Item2);
          }
          if (HasItem3) {
            output.WriteRawTag(56);
            output.WriteInt32(Item3);
          }
          if (HasItem4) {
            output.WriteRawTag(64);
            output.WriteInt32(Item4);
          }
          if (HasItem5) {
            output.WriteRawTag(72);
            output.WriteInt32(Item5);
          }
          if (HasExpectedTeamContribution) {
            output.WriteRawTag(85);
            output.WriteFloat(ExpectedTeamContribution);
          }
          if (HasScaledMetric) {
            output.WriteRawTag(93);
            output.WriteFloat(ScaledMetric);
          }
          if (HasPreviousRank) {
            output.WriteRawTag(96);
            output.WriteUInt32(PreviousRank);
          }
          if (HasRankChange) {
            output.WriteRawTag(104);
            output.WriteSInt32(RankChange);
          }
          if (HasKills) {
            output.WriteRawTag(112);
            output.WriteUInt32(Kills);
          }
          if (HasDeaths) {
            output.WriteRawTag(120);
            output.WriteUInt32(Deaths);
          }
          if (HasAssists) {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(Assists);
          }
          if (HasLeaverStatus) {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(LeaverStatus);
          }
          if (HasGold) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(Gold);
          }
          if (HasLastHits) {
            output.WriteRawTag(152, 1);
            output.WriteUInt32(LastHits);
          }
          if (HasDenies) {
            output.WriteRawTag(160, 1);
            output.WriteUInt32(Denies);
          }
          if (HasGoldPerMin) {
            output.WriteRawTag(168, 1);
            output.WriteUInt32(GoldPerMin);
          }
          if (HasXpPerMin) {
            output.WriteRawTag(176, 1);
            output.WriteUInt32(XpPerMin);
          }
          if (HasGoldSpent) {
            output.WriteRawTag(184, 1);
            output.WriteUInt32(GoldSpent);
          }
          if (HasHeroDamage) {
            output.WriteRawTag(192, 1);
            output.WriteUInt32(HeroDamage);
          }
          if (HasTowerDamage) {
            output.WriteRawTag(200, 1);
            output.WriteUInt32(TowerDamage);
          }
          if (HasHeroHealing) {
            output.WriteRawTag(208, 1);
            output.WriteUInt32(HeroHealing);
          }
          if (HasLevel) {
            output.WriteRawTag(216, 1);
            output.WriteUInt32(Level);
          }
          if (HasTimeLastSeen) {
            output.WriteRawTag(224, 1);
            output.WriteUInt32(TimeLastSeen);
          }
          if (HasPlayerName) {
            output.WriteRawTag(234, 1);
            output.WriteString(PlayerName);
          }
          if (HasSupportAbilityValue) {
            output.WriteRawTag(240, 1);
            output.WriteUInt32(SupportAbilityValue);
          }
          if (HasFeedingDetected) {
            output.WriteRawTag(128, 2);
            output.WriteBool(FeedingDetected);
          }
          if (HasSearchRank) {
            output.WriteRawTag(144, 2);
            output.WriteUInt32(SearchRank);
          }
          if (HasSearchRankUncertainty) {
            output.WriteRawTag(152, 2);
            output.WriteUInt32(SearchRankUncertainty);
          }
          if (HasRankUncertaintyChange) {
            output.WriteRawTag(160, 2);
            output.WriteInt32(RankUncertaintyChange);
          }
          if (HasHeroPlayCount) {
            output.WriteRawTag(168, 2);
            output.WriteUInt32(HeroPlayCount);
          }
          if (HasPartyId) {
            output.WriteRawTag(177, 2);
            output.WriteFixed64(PartyId);
          }
          if (HasScaledKills) {
            output.WriteRawTag(189, 2);
            output.WriteFloat(ScaledKills);
          }
          if (HasScaledDeaths) {
            output.WriteRawTag(197, 2);
            output.WriteFloat(ScaledDeaths);
          }
          if (HasScaledAssists) {
            output.WriteRawTag(205, 2);
            output.WriteFloat(ScaledAssists);
          }
          if (HasClaimedFarmGold) {
            output.WriteRawTag(208, 2);
            output.WriteUInt32(ClaimedFarmGold);
          }
          if (HasSupportGold) {
            output.WriteRawTag(216, 2);
            output.WriteUInt32(SupportGold);
          }
          if (HasClaimedDenies) {
            output.WriteRawTag(224, 2);
            output.WriteUInt32(ClaimedDenies);
          }
          if (HasClaimedMisses) {
            output.WriteRawTag(232, 2);
            output.WriteUInt32(ClaimedMisses);
          }
          if (HasMisses) {
            output.WriteRawTag(240, 2);
            output.WriteUInt32(Misses);
          }
          abilityUpgrades_.WriteTo(output, _repeated_abilityUpgrades_codec);
          additionalUnitsInventory_.WriteTo(output, _repeated_additionalUnitsInventory_codec);
          if (customGameData_ != null) {
            output.WriteRawTag(146, 3);
            output.WriteMessage(CustomGameData);
          }
          if (HasActivePlusSubscription) {
            output.WriteRawTag(152, 3);
            output.WriteBool(ActivePlusSubscription);
          }
          if (HasNetWorth) {
            output.WriteRawTag(160, 3);
            output.WriteUInt32(NetWorth);
          }
          if (HasScaledHeroDamage) {
            output.WriteRawTag(176, 3);
            output.WriteUInt32(ScaledHeroDamage);
          }
          if (HasScaledTowerDamage) {
            output.WriteRawTag(184, 3);
            output.WriteUInt32(ScaledTowerDamage);
          }
          if (HasScaledHeroHealing) {
            output.WriteRawTag(192, 3);
            output.WriteUInt32(ScaledHeroHealing);
          }
          permanentBuffs_.WriteTo(output, _repeated_permanentBuffs_codec);
          if (HasBotDifficulty) {
            output.WriteRawTag(208, 3);
            output.WriteUInt32(BotDifficulty);
          }
          if (HasItem6) {
            output.WriteRawTag(216, 3);
            output.WriteInt32(Item6);
          }
          if (HasItem7) {
            output.WriteRawTag(224, 3);
            output.WriteInt32(Item7);
          }
          if (HasItem8) {
            output.WriteRawTag(232, 3);
            output.WriteInt32(Item8);
          }
          if (HasHeroPickOrder) {
            output.WriteRawTag(248, 3);
            output.WriteUInt32(HeroPickOrder);
          }
          if (HasHeroWasRandomed) {
            output.WriteRawTag(128, 4);
            output.WriteBool(HeroWasRandomed);
          }
          heroDamageReceived_.WriteTo(output, _repeated_heroDamageReceived_codec);
          if (HasHeroWasDotaPlusSuggestion) {
            output.WriteRawTag(168, 4);
            output.WriteBool(HeroWasDotaPlusSuggestion);
          }
          if (HasSecondsDead) {
            output.WriteRawTag(176, 4);
            output.WriteUInt32(SecondsDead);
          }
          if (HasGoldLostToDeath) {
            output.WriteRawTag(184, 4);
            output.WriteUInt32(GoldLostToDeath);
          }
          if (HasProName) {
            output.WriteRawTag(194, 4);
            output.WriteString(ProName);
          }
          if (HasRealName) {
            output.WriteRawTag(202, 4);
            output.WriteString(RealName);
          }
          if (HasMmrType) {
            output.WriteRawTag(208, 4);
            output.WriteUInt32(MmrType);
          }
          if (HasLaneSelectionFlags) {
            output.WriteRawTag(216, 4);
            output.WriteUInt32(LaneSelectionFlags);
          }
          if (HasItem9) {
            output.WriteRawTag(224, 4);
            output.WriteInt32(Item9);
          }
          if (HasBountyRunes) {
            output.WriteRawTag(232, 4);
            output.WriteUInt32(BountyRunes);
          }
          if (HasOutpostsCaptured) {
            output.WriteRawTag(240, 4);
            output.WriteUInt32(OutpostsCaptured);
          }
          heroDamageDealt_.WriteTo(output, _repeated_heroDamageDealt_codec);
          if (HasTeamNumber) {
            output.WriteRawTag(128, 5);
            output.WriteEnum((int) TeamNumber);
          }
          if (HasTeamSlot) {
            output.WriteRawTag(136, 5);
            output.WriteUInt32(TeamSlot);
          }
          if (HasSelectedFacet) {
            output.WriteRawTag(144, 5);
            output.WriteUInt32(SelectedFacet);
          }
          if (HasItem10) {
            output.WriteRawTag(152, 5);
            output.WriteInt32(Item10);
          }
          if (HasItem10Lvl) {
            output.WriteRawTag(160, 5);
            output.WriteInt32(Item10Lvl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasPlayerSlot) {
            output.WriteRawTag(16);
            output.WriteUInt32(PlayerSlot);
          }
          if (HasHeroId) {
            output.WriteRawTag(24);
            output.WriteInt32(HeroId);
          }
          if (HasItem0) {
            output.WriteRawTag(32);
            output.WriteInt32(Item0);
          }
          if (HasItem1) {
            output.WriteRawTag(40);
            output.WriteInt32(Item1);
          }
          if (HasItem2) {
            output.WriteRawTag(48);
            output.WriteInt32(Item2);
          }
          if (HasItem3) {
            output.WriteRawTag(56);
            output.WriteInt32(Item3);
          }
          if (HasItem4) {
            output.WriteRawTag(64);
            output.WriteInt32(Item4);
          }
          if (HasItem5) {
            output.WriteRawTag(72);
            output.WriteInt32(Item5);
          }
          if (HasExpectedTeamContribution) {
            output.WriteRawTag(85);
            output.WriteFloat(ExpectedTeamContribution);
          }
          if (HasScaledMetric) {
            output.WriteRawTag(93);
            output.WriteFloat(ScaledMetric);
          }
          if (HasPreviousRank) {
            output.WriteRawTag(96);
            output.WriteUInt32(PreviousRank);
          }
          if (HasRankChange) {
            output.WriteRawTag(104);
            output.WriteSInt32(RankChange);
          }
          if (HasKills) {
            output.WriteRawTag(112);
            output.WriteUInt32(Kills);
          }
          if (HasDeaths) {
            output.WriteRawTag(120);
            output.WriteUInt32(Deaths);
          }
          if (HasAssists) {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(Assists);
          }
          if (HasLeaverStatus) {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(LeaverStatus);
          }
          if (HasGold) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(Gold);
          }
          if (HasLastHits) {
            output.WriteRawTag(152, 1);
            output.WriteUInt32(LastHits);
          }
          if (HasDenies) {
            output.WriteRawTag(160, 1);
            output.WriteUInt32(Denies);
          }
          if (HasGoldPerMin) {
            output.WriteRawTag(168, 1);
            output.WriteUInt32(GoldPerMin);
          }
          if (HasXpPerMin) {
            output.WriteRawTag(176, 1);
            output.WriteUInt32(XpPerMin);
          }
          if (HasGoldSpent) {
            output.WriteRawTag(184, 1);
            output.WriteUInt32(GoldSpent);
          }
          if (HasHeroDamage) {
            output.WriteRawTag(192, 1);
            output.WriteUInt32(HeroDamage);
          }
          if (HasTowerDamage) {
            output.WriteRawTag(200, 1);
            output.WriteUInt32(TowerDamage);
          }
          if (HasHeroHealing) {
            output.WriteRawTag(208, 1);
            output.WriteUInt32(HeroHealing);
          }
          if (HasLevel) {
            output.WriteRawTag(216, 1);
            output.WriteUInt32(Level);
          }
          if (HasTimeLastSeen) {
            output.WriteRawTag(224, 1);
            output.WriteUInt32(TimeLastSeen);
          }
          if (HasPlayerName) {
            output.WriteRawTag(234, 1);
            output.WriteString(PlayerName);
          }
          if (HasSupportAbilityValue) {
            output.WriteRawTag(240, 1);
            output.WriteUInt32(SupportAbilityValue);
          }
          if (HasFeedingDetected) {
            output.WriteRawTag(128, 2);
            output.WriteBool(FeedingDetected);
          }
          if (HasSearchRank) {
            output.WriteRawTag(144, 2);
            output.WriteUInt32(SearchRank);
          }
          if (HasSearchRankUncertainty) {
            output.WriteRawTag(152, 2);
            output.WriteUInt32(SearchRankUncertainty);
          }
          if (HasRankUncertaintyChange) {
            output.WriteRawTag(160, 2);
            output.WriteInt32(RankUncertaintyChange);
          }
          if (HasHeroPlayCount) {
            output.WriteRawTag(168, 2);
            output.WriteUInt32(HeroPlayCount);
          }
          if (HasPartyId) {
            output.WriteRawTag(177, 2);
            output.WriteFixed64(PartyId);
          }
          if (HasScaledKills) {
            output.WriteRawTag(189, 2);
            output.WriteFloat(ScaledKills);
          }
          if (HasScaledDeaths) {
            output.WriteRawTag(197, 2);
            output.WriteFloat(ScaledDeaths);
          }
          if (HasScaledAssists) {
            output.WriteRawTag(205, 2);
            output.WriteFloat(ScaledAssists);
          }
          if (HasClaimedFarmGold) {
            output.WriteRawTag(208, 2);
            output.WriteUInt32(ClaimedFarmGold);
          }
          if (HasSupportGold) {
            output.WriteRawTag(216, 2);
            output.WriteUInt32(SupportGold);
          }
          if (HasClaimedDenies) {
            output.WriteRawTag(224, 2);
            output.WriteUInt32(ClaimedDenies);
          }
          if (HasClaimedMisses) {
            output.WriteRawTag(232, 2);
            output.WriteUInt32(ClaimedMisses);
          }
          if (HasMisses) {
            output.WriteRawTag(240, 2);
            output.WriteUInt32(Misses);
          }
          abilityUpgrades_.WriteTo(ref output, _repeated_abilityUpgrades_codec);
          additionalUnitsInventory_.WriteTo(ref output, _repeated_additionalUnitsInventory_codec);
          if (customGameData_ != null) {
            output.WriteRawTag(146, 3);
            output.WriteMessage(CustomGameData);
          }
          if (HasActivePlusSubscription) {
            output.WriteRawTag(152, 3);
            output.WriteBool(ActivePlusSubscription);
          }
          if (HasNetWorth) {
            output.WriteRawTag(160, 3);
            output.WriteUInt32(NetWorth);
          }
          if (HasScaledHeroDamage) {
            output.WriteRawTag(176, 3);
            output.WriteUInt32(ScaledHeroDamage);
          }
          if (HasScaledTowerDamage) {
            output.WriteRawTag(184, 3);
            output.WriteUInt32(ScaledTowerDamage);
          }
          if (HasScaledHeroHealing) {
            output.WriteRawTag(192, 3);
            output.WriteUInt32(ScaledHeroHealing);
          }
          permanentBuffs_.WriteTo(ref output, _repeated_permanentBuffs_codec);
          if (HasBotDifficulty) {
            output.WriteRawTag(208, 3);
            output.WriteUInt32(BotDifficulty);
          }
          if (HasItem6) {
            output.WriteRawTag(216, 3);
            output.WriteInt32(Item6);
          }
          if (HasItem7) {
            output.WriteRawTag(224, 3);
            output.WriteInt32(Item7);
          }
          if (HasItem8) {
            output.WriteRawTag(232, 3);
            output.WriteInt32(Item8);
          }
          if (HasHeroPickOrder) {
            output.WriteRawTag(248, 3);
            output.WriteUInt32(HeroPickOrder);
          }
          if (HasHeroWasRandomed) {
            output.WriteRawTag(128, 4);
            output.WriteBool(HeroWasRandomed);
          }
          heroDamageReceived_.WriteTo(ref output, _repeated_heroDamageReceived_codec);
          if (HasHeroWasDotaPlusSuggestion) {
            output.WriteRawTag(168, 4);
            output.WriteBool(HeroWasDotaPlusSuggestion);
          }
          if (HasSecondsDead) {
            output.WriteRawTag(176, 4);
            output.WriteUInt32(SecondsDead);
          }
          if (HasGoldLostToDeath) {
            output.WriteRawTag(184, 4);
            output.WriteUInt32(GoldLostToDeath);
          }
          if (HasProName) {
            output.WriteRawTag(194, 4);
            output.WriteString(ProName);
          }
          if (HasRealName) {
            output.WriteRawTag(202, 4);
            output.WriteString(RealName);
          }
          if (HasMmrType) {
            output.WriteRawTag(208, 4);
            output.WriteUInt32(MmrType);
          }
          if (HasLaneSelectionFlags) {
            output.WriteRawTag(216, 4);
            output.WriteUInt32(LaneSelectionFlags);
          }
          if (HasItem9) {
            output.WriteRawTag(224, 4);
            output.WriteInt32(Item9);
          }
          if (HasBountyRunes) {
            output.WriteRawTag(232, 4);
            output.WriteUInt32(BountyRunes);
          }
          if (HasOutpostsCaptured) {
            output.WriteRawTag(240, 4);
            output.WriteUInt32(OutpostsCaptured);
          }
          heroDamageDealt_.WriteTo(ref output, _repeated_heroDamageDealt_codec);
          if (HasTeamNumber) {
            output.WriteRawTag(128, 5);
            output.WriteEnum((int) TeamNumber);
          }
          if (HasTeamSlot) {
            output.WriteRawTag(136, 5);
            output.WriteUInt32(TeamSlot);
          }
          if (HasSelectedFacet) {
            output.WriteRawTag(144, 5);
            output.WriteUInt32(SelectedFacet);
          }
          if (HasItem10) {
            output.WriteRawTag(152, 5);
            output.WriteInt32(Item10);
          }
          if (HasItem10Lvl) {
            output.WriteRawTag(160, 5);
            output.WriteInt32(Item10Lvl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasPlayerSlot) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasItem0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item0);
          }
          if (HasItem1) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item1);
          }
          if (HasItem2) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item2);
          }
          if (HasItem3) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item3);
          }
          if (HasItem4) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item4);
          }
          if (HasItem5) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item5);
          }
          if (HasItem6) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item6);
          }
          if (HasItem7) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item7);
          }
          if (HasItem8) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item8);
          }
          if (HasItem9) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item9);
          }
          if (HasItem10) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item10);
          }
          if (HasItem10Lvl) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Item10Lvl);
          }
          if (HasExpectedTeamContribution) {
            size += 1 + 4;
          }
          if (HasScaledMetric) {
            size += 1 + 4;
          }
          if (HasPreviousRank) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreviousRank);
          }
          if (HasRankChange) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RankChange);
          }
          if (HasMmrType) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MmrType);
          }
          if (HasKills) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
          }
          if (HasDeaths) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
          }
          if (HasAssists) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
          }
          if (HasLeaverStatus) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeaverStatus);
          }
          if (HasGold) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Gold);
          }
          if (HasLastHits) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
          }
          if (HasDenies) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Denies);
          }
          if (HasGoldPerMin) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GoldPerMin);
          }
          if (HasXpPerMin) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(XpPerMin);
          }
          if (HasGoldSpent) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GoldSpent);
          }
          if (HasHeroDamage) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroDamage);
          }
          if (HasTowerDamage) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TowerDamage);
          }
          if (HasHeroHealing) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroHealing);
          }
          if (HasLevel) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (HasTimeLastSeen) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TimeLastSeen);
          }
          if (HasPlayerName) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
          }
          if (HasSupportAbilityValue) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SupportAbilityValue);
          }
          if (HasFeedingDetected) {
            size += 2 + 1;
          }
          if (HasSearchRank) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SearchRank);
          }
          if (HasSearchRankUncertainty) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SearchRankUncertainty);
          }
          if (HasRankUncertaintyChange) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankUncertaintyChange);
          }
          if (HasHeroPlayCount) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroPlayCount);
          }
          if (HasPartyId) {
            size += 2 + 8;
          }
          if (HasScaledHeroDamage) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScaledHeroDamage);
          }
          if (HasScaledTowerDamage) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScaledTowerDamage);
          }
          if (HasScaledHeroHealing) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScaledHeroHealing);
          }
          if (HasScaledKills) {
            size += 2 + 4;
          }
          if (HasScaledDeaths) {
            size += 2 + 4;
          }
          if (HasScaledAssists) {
            size += 2 + 4;
          }
          if (HasClaimedFarmGold) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClaimedFarmGold);
          }
          if (HasSupportGold) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SupportGold);
          }
          if (HasClaimedDenies) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClaimedDenies);
          }
          if (HasClaimedMisses) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClaimedMisses);
          }
          if (HasMisses) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Misses);
          }
          size += abilityUpgrades_.CalculateSize(_repeated_abilityUpgrades_codec);
          size += additionalUnitsInventory_.CalculateSize(_repeated_additionalUnitsInventory_codec);
          size += permanentBuffs_.CalculateSize(_repeated_permanentBuffs_codec);
          if (HasProName) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ProName);
          }
          if (HasRealName) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(RealName);
          }
          if (customGameData_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(CustomGameData);
          }
          if (HasActivePlusSubscription) {
            size += 2 + 1;
          }
          if (HasNetWorth) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
          }
          if (HasBotDifficulty) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BotDifficulty);
          }
          if (HasHeroPickOrder) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroPickOrder);
          }
          if (HasHeroWasRandomed) {
            size += 2 + 1;
          }
          if (HasHeroWasDotaPlusSuggestion) {
            size += 2 + 1;
          }
          size += heroDamageReceived_.CalculateSize(_repeated_heroDamageReceived_codec);
          size += heroDamageDealt_.CalculateSize(_repeated_heroDamageDealt_codec);
          if (HasSecondsDead) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SecondsDead);
          }
          if (HasGoldLostToDeath) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GoldLostToDeath);
          }
          if (HasLaneSelectionFlags) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LaneSelectionFlags);
          }
          if (HasBountyRunes) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BountyRunes);
          }
          if (HasOutpostsCaptured) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OutpostsCaptured);
          }
          if (HasTeamNumber) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TeamNumber);
          }
          if (HasTeamSlot) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeamSlot);
          }
          if (HasSelectedFacet) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SelectedFacet);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasPlayerSlot) {
            PlayerSlot = other.PlayerSlot;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasItem0) {
            Item0 = other.Item0;
          }
          if (other.HasItem1) {
            Item1 = other.Item1;
          }
          if (other.HasItem2) {
            Item2 = other.Item2;
          }
          if (other.HasItem3) {
            Item3 = other.Item3;
          }
          if (other.HasItem4) {
            Item4 = other.Item4;
          }
          if (other.HasItem5) {
            Item5 = other.Item5;
          }
          if (other.HasItem6) {
            Item6 = other.Item6;
          }
          if (other.HasItem7) {
            Item7 = other.Item7;
          }
          if (other.HasItem8) {
            Item8 = other.Item8;
          }
          if (other.HasItem9) {
            Item9 = other.Item9;
          }
          if (other.HasItem10) {
            Item10 = other.Item10;
          }
          if (other.HasItem10Lvl) {
            Item10Lvl = other.Item10Lvl;
          }
          if (other.HasExpectedTeamContribution) {
            ExpectedTeamContribution = other.ExpectedTeamContribution;
          }
          if (other.HasScaledMetric) {
            ScaledMetric = other.ScaledMetric;
          }
          if (other.HasPreviousRank) {
            PreviousRank = other.PreviousRank;
          }
          if (other.HasRankChange) {
            RankChange = other.RankChange;
          }
          if (other.HasMmrType) {
            MmrType = other.MmrType;
          }
          if (other.HasKills) {
            Kills = other.Kills;
          }
          if (other.HasDeaths) {
            Deaths = other.Deaths;
          }
          if (other.HasAssists) {
            Assists = other.Assists;
          }
          if (other.HasLeaverStatus) {
            LeaverStatus = other.LeaverStatus;
          }
          if (other.HasGold) {
            Gold = other.Gold;
          }
          if (other.HasLastHits) {
            LastHits = other.LastHits;
          }
          if (other.HasDenies) {
            Denies = other.Denies;
          }
          if (other.HasGoldPerMin) {
            GoldPerMin = other.GoldPerMin;
          }
          if (other.HasXpPerMin) {
            XpPerMin = other.XpPerMin;
          }
          if (other.HasGoldSpent) {
            GoldSpent = other.GoldSpent;
          }
          if (other.HasHeroDamage) {
            HeroDamage = other.HeroDamage;
          }
          if (other.HasTowerDamage) {
            TowerDamage = other.TowerDamage;
          }
          if (other.HasHeroHealing) {
            HeroHealing = other.HeroHealing;
          }
          if (other.HasLevel) {
            Level = other.Level;
          }
          if (other.HasTimeLastSeen) {
            TimeLastSeen = other.TimeLastSeen;
          }
          if (other.HasPlayerName) {
            PlayerName = other.PlayerName;
          }
          if (other.HasSupportAbilityValue) {
            SupportAbilityValue = other.SupportAbilityValue;
          }
          if (other.HasFeedingDetected) {
            FeedingDetected = other.FeedingDetected;
          }
          if (other.HasSearchRank) {
            SearchRank = other.SearchRank;
          }
          if (other.HasSearchRankUncertainty) {
            SearchRankUncertainty = other.SearchRankUncertainty;
          }
          if (other.HasRankUncertaintyChange) {
            RankUncertaintyChange = other.RankUncertaintyChange;
          }
          if (other.HasHeroPlayCount) {
            HeroPlayCount = other.HeroPlayCount;
          }
          if (other.HasPartyId) {
            PartyId = other.PartyId;
          }
          if (other.HasScaledHeroDamage) {
            ScaledHeroDamage = other.ScaledHeroDamage;
          }
          if (other.HasScaledTowerDamage) {
            ScaledTowerDamage = other.ScaledTowerDamage;
          }
          if (other.HasScaledHeroHealing) {
            ScaledHeroHealing = other.ScaledHeroHealing;
          }
          if (other.HasScaledKills) {
            ScaledKills = other.ScaledKills;
          }
          if (other.HasScaledDeaths) {
            ScaledDeaths = other.ScaledDeaths;
          }
          if (other.HasScaledAssists) {
            ScaledAssists = other.ScaledAssists;
          }
          if (other.HasClaimedFarmGold) {
            ClaimedFarmGold = other.ClaimedFarmGold;
          }
          if (other.HasSupportGold) {
            SupportGold = other.SupportGold;
          }
          if (other.HasClaimedDenies) {
            ClaimedDenies = other.ClaimedDenies;
          }
          if (other.HasClaimedMisses) {
            ClaimedMisses = other.ClaimedMisses;
          }
          if (other.HasMisses) {
            Misses = other.Misses;
          }
          abilityUpgrades_.Add(other.abilityUpgrades_);
          additionalUnitsInventory_.Add(other.additionalUnitsInventory_);
          permanentBuffs_.Add(other.permanentBuffs_);
          if (other.HasProName) {
            ProName = other.ProName;
          }
          if (other.HasRealName) {
            RealName = other.RealName;
          }
          if (other.customGameData_ != null) {
            if (customGameData_ == null) {
              CustomGameData = new global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.CustomGameData();
            }
            CustomGameData.MergeFrom(other.CustomGameData);
          }
          if (other.HasActivePlusSubscription) {
            ActivePlusSubscription = other.ActivePlusSubscription;
          }
          if (other.HasNetWorth) {
            NetWorth = other.NetWorth;
          }
          if (other.HasBotDifficulty) {
            BotDifficulty = other.BotDifficulty;
          }
          if (other.HasHeroPickOrder) {
            HeroPickOrder = other.HeroPickOrder;
          }
          if (other.HasHeroWasRandomed) {
            HeroWasRandomed = other.HeroWasRandomed;
          }
          if (other.HasHeroWasDotaPlusSuggestion) {
            HeroWasDotaPlusSuggestion = other.HeroWasDotaPlusSuggestion;
          }
          heroDamageReceived_.Add(other.heroDamageReceived_);
          heroDamageDealt_.Add(other.heroDamageDealt_);
          if (other.HasSecondsDead) {
            SecondsDead = other.SecondsDead;
          }
          if (other.HasGoldLostToDeath) {
            GoldLostToDeath = other.GoldLostToDeath;
          }
          if (other.HasLaneSelectionFlags) {
            LaneSelectionFlags = other.LaneSelectionFlags;
          }
          if (other.HasBountyRunes) {
            BountyRunes = other.BountyRunes;
          }
          if (other.HasOutpostsCaptured) {
            OutpostsCaptured = other.OutpostsCaptured;
          }
          if (other.HasTeamNumber) {
            TeamNumber = other.TeamNumber;
          }
          if (other.HasTeamSlot) {
            TeamSlot = other.TeamSlot;
          }
          if (other.HasSelectedFacet) {
            SelectedFacet = other.SelectedFacet;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadInt32();
                break;
              }
              case 32: {
                Item0 = input.ReadInt32();
                break;
              }
              case 40: {
                Item1 = input.ReadInt32();
                break;
              }
              case 48: {
                Item2 = input.ReadInt32();
                break;
              }
              case 56: {
                Item3 = input.ReadInt32();
                break;
              }
              case 64: {
                Item4 = input.ReadInt32();
                break;
              }
              case 72: {
                Item5 = input.ReadInt32();
                break;
              }
              case 85: {
                ExpectedTeamContribution = input.ReadFloat();
                break;
              }
              case 93: {
                ScaledMetric = input.ReadFloat();
                break;
              }
              case 96: {
                PreviousRank = input.ReadUInt32();
                break;
              }
              case 104: {
                RankChange = input.ReadSInt32();
                break;
              }
              case 112: {
                Kills = input.ReadUInt32();
                break;
              }
              case 120: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 128: {
                Assists = input.ReadUInt32();
                break;
              }
              case 136: {
                LeaverStatus = input.ReadUInt32();
                break;
              }
              case 144: {
                Gold = input.ReadUInt32();
                break;
              }
              case 152: {
                LastHits = input.ReadUInt32();
                break;
              }
              case 160: {
                Denies = input.ReadUInt32();
                break;
              }
              case 168: {
                GoldPerMin = input.ReadUInt32();
                break;
              }
              case 176: {
                XpPerMin = input.ReadUInt32();
                break;
              }
              case 184: {
                GoldSpent = input.ReadUInt32();
                break;
              }
              case 192: {
                HeroDamage = input.ReadUInt32();
                break;
              }
              case 200: {
                TowerDamage = input.ReadUInt32();
                break;
              }
              case 208: {
                HeroHealing = input.ReadUInt32();
                break;
              }
              case 216: {
                Level = input.ReadUInt32();
                break;
              }
              case 224: {
                TimeLastSeen = input.ReadUInt32();
                break;
              }
              case 234: {
                PlayerName = input.ReadString();
                break;
              }
              case 240: {
                SupportAbilityValue = input.ReadUInt32();
                break;
              }
              case 256: {
                FeedingDetected = input.ReadBool();
                break;
              }
              case 272: {
                SearchRank = input.ReadUInt32();
                break;
              }
              case 280: {
                SearchRankUncertainty = input.ReadUInt32();
                break;
              }
              case 288: {
                RankUncertaintyChange = input.ReadInt32();
                break;
              }
              case 296: {
                HeroPlayCount = input.ReadUInt32();
                break;
              }
              case 305: {
                PartyId = input.ReadFixed64();
                break;
              }
              case 317: {
                ScaledKills = input.ReadFloat();
                break;
              }
              case 325: {
                ScaledDeaths = input.ReadFloat();
                break;
              }
              case 333: {
                ScaledAssists = input.ReadFloat();
                break;
              }
              case 336: {
                ClaimedFarmGold = input.ReadUInt32();
                break;
              }
              case 344: {
                SupportGold = input.ReadUInt32();
                break;
              }
              case 352: {
                ClaimedDenies = input.ReadUInt32();
                break;
              }
              case 360: {
                ClaimedMisses = input.ReadUInt32();
                break;
              }
              case 368: {
                Misses = input.ReadUInt32();
                break;
              }
              case 378: {
                abilityUpgrades_.AddEntriesFrom(input, _repeated_abilityUpgrades_codec);
                break;
              }
              case 386: {
                additionalUnitsInventory_.AddEntriesFrom(input, _repeated_additionalUnitsInventory_codec);
                break;
              }
              case 402: {
                if (customGameData_ == null) {
                  CustomGameData = new global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.CustomGameData();
                }
                input.ReadMessage(CustomGameData);
                break;
              }
              case 408: {
                ActivePlusSubscription = input.ReadBool();
                break;
              }
              case 416: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 432: {
                ScaledHeroDamage = input.ReadUInt32();
                break;
              }
              case 440: {
                ScaledTowerDamage = input.ReadUInt32();
                break;
              }
              case 448: {
                ScaledHeroHealing = input.ReadUInt32();
                break;
              }
              case 458: {
                permanentBuffs_.AddEntriesFrom(input, _repeated_permanentBuffs_codec);
                break;
              }
              case 464: {
                BotDifficulty = input.ReadUInt32();
                break;
              }
              case 472: {
                Item6 = input.ReadInt32();
                break;
              }
              case 480: {
                Item7 = input.ReadInt32();
                break;
              }
              case 488: {
                Item8 = input.ReadInt32();
                break;
              }
              case 504: {
                HeroPickOrder = input.ReadUInt32();
                break;
              }
              case 512: {
                HeroWasRandomed = input.ReadBool();
                break;
              }
              case 538: {
                heroDamageReceived_.AddEntriesFrom(input, _repeated_heroDamageReceived_codec);
                break;
              }
              case 552: {
                HeroWasDotaPlusSuggestion = input.ReadBool();
                break;
              }
              case 560: {
                SecondsDead = input.ReadUInt32();
                break;
              }
              case 568: {
                GoldLostToDeath = input.ReadUInt32();
                break;
              }
              case 578: {
                ProName = input.ReadString();
                break;
              }
              case 586: {
                RealName = input.ReadString();
                break;
              }
              case 592: {
                MmrType = input.ReadUInt32();
                break;
              }
              case 600: {
                LaneSelectionFlags = input.ReadUInt32();
                break;
              }
              case 608: {
                Item9 = input.ReadInt32();
                break;
              }
              case 616: {
                BountyRunes = input.ReadUInt32();
                break;
              }
              case 624: {
                OutpostsCaptured = input.ReadUInt32();
                break;
              }
              case 634: {
                heroDamageDealt_.AddEntriesFrom(input, _repeated_heroDamageDealt_codec);
                break;
              }
              case 640: {
                TeamNumber = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
                break;
              }
              case 648: {
                TeamSlot = input.ReadUInt32();
                break;
              }
              case 656: {
                SelectedFacet = input.ReadUInt32();
                break;
              }
              case 664: {
                Item10 = input.ReadInt32();
                break;
              }
              case 672: {
                Item10Lvl = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadInt32();
                break;
              }
              case 32: {
                Item0 = input.ReadInt32();
                break;
              }
              case 40: {
                Item1 = input.ReadInt32();
                break;
              }
              case 48: {
                Item2 = input.ReadInt32();
                break;
              }
              case 56: {
                Item3 = input.ReadInt32();
                break;
              }
              case 64: {
                Item4 = input.ReadInt32();
                break;
              }
              case 72: {
                Item5 = input.ReadInt32();
                break;
              }
              case 85: {
                ExpectedTeamContribution = input.ReadFloat();
                break;
              }
              case 93: {
                ScaledMetric = input.ReadFloat();
                break;
              }
              case 96: {
                PreviousRank = input.ReadUInt32();
                break;
              }
              case 104: {
                RankChange = input.ReadSInt32();
                break;
              }
              case 112: {
                Kills = input.ReadUInt32();
                break;
              }
              case 120: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 128: {
                Assists = input.ReadUInt32();
                break;
              }
              case 136: {
                LeaverStatus = input.ReadUInt32();
                break;
              }
              case 144: {
                Gold = input.ReadUInt32();
                break;
              }
              case 152: {
                LastHits = input.ReadUInt32();
                break;
              }
              case 160: {
                Denies = input.ReadUInt32();
                break;
              }
              case 168: {
                GoldPerMin = input.ReadUInt32();
                break;
              }
              case 176: {
                XpPerMin = input.ReadUInt32();
                break;
              }
              case 184: {
                GoldSpent = input.ReadUInt32();
                break;
              }
              case 192: {
                HeroDamage = input.ReadUInt32();
                break;
              }
              case 200: {
                TowerDamage = input.ReadUInt32();
                break;
              }
              case 208: {
                HeroHealing = input.ReadUInt32();
                break;
              }
              case 216: {
                Level = input.ReadUInt32();
                break;
              }
              case 224: {
                TimeLastSeen = input.ReadUInt32();
                break;
              }
              case 234: {
                PlayerName = input.ReadString();
                break;
              }
              case 240: {
                SupportAbilityValue = input.ReadUInt32();
                break;
              }
              case 256: {
                FeedingDetected = input.ReadBool();
                break;
              }
              case 272: {
                SearchRank = input.ReadUInt32();
                break;
              }
              case 280: {
                SearchRankUncertainty = input.ReadUInt32();
                break;
              }
              case 288: {
                RankUncertaintyChange = input.ReadInt32();
                break;
              }
              case 296: {
                HeroPlayCount = input.ReadUInt32();
                break;
              }
              case 305: {
                PartyId = input.ReadFixed64();
                break;
              }
              case 317: {
                ScaledKills = input.ReadFloat();
                break;
              }
              case 325: {
                ScaledDeaths = input.ReadFloat();
                break;
              }
              case 333: {
                ScaledAssists = input.ReadFloat();
                break;
              }
              case 336: {
                ClaimedFarmGold = input.ReadUInt32();
                break;
              }
              case 344: {
                SupportGold = input.ReadUInt32();
                break;
              }
              case 352: {
                ClaimedDenies = input.ReadUInt32();
                break;
              }
              case 360: {
                ClaimedMisses = input.ReadUInt32();
                break;
              }
              case 368: {
                Misses = input.ReadUInt32();
                break;
              }
              case 378: {
                abilityUpgrades_.AddEntriesFrom(ref input, _repeated_abilityUpgrades_codec);
                break;
              }
              case 386: {
                additionalUnitsInventory_.AddEntriesFrom(ref input, _repeated_additionalUnitsInventory_codec);
                break;
              }
              case 402: {
                if (customGameData_ == null) {
                  CustomGameData = new global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.CustomGameData();
                }
                input.ReadMessage(CustomGameData);
                break;
              }
              case 408: {
                ActivePlusSubscription = input.ReadBool();
                break;
              }
              case 416: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 432: {
                ScaledHeroDamage = input.ReadUInt32();
                break;
              }
              case 440: {
                ScaledTowerDamage = input.ReadUInt32();
                break;
              }
              case 448: {
                ScaledHeroHealing = input.ReadUInt32();
                break;
              }
              case 458: {
                permanentBuffs_.AddEntriesFrom(ref input, _repeated_permanentBuffs_codec);
                break;
              }
              case 464: {
                BotDifficulty = input.ReadUInt32();
                break;
              }
              case 472: {
                Item6 = input.ReadInt32();
                break;
              }
              case 480: {
                Item7 = input.ReadInt32();
                break;
              }
              case 488: {
                Item8 = input.ReadInt32();
                break;
              }
              case 504: {
                HeroPickOrder = input.ReadUInt32();
                break;
              }
              case 512: {
                HeroWasRandomed = input.ReadBool();
                break;
              }
              case 538: {
                heroDamageReceived_.AddEntriesFrom(ref input, _repeated_heroDamageReceived_codec);
                break;
              }
              case 552: {
                HeroWasDotaPlusSuggestion = input.ReadBool();
                break;
              }
              case 560: {
                SecondsDead = input.ReadUInt32();
                break;
              }
              case 568: {
                GoldLostToDeath = input.ReadUInt32();
                break;
              }
              case 578: {
                ProName = input.ReadString();
                break;
              }
              case 586: {
                RealName = input.ReadString();
                break;
              }
              case 592: {
                MmrType = input.ReadUInt32();
                break;
              }
              case 600: {
                LaneSelectionFlags = input.ReadUInt32();
                break;
              }
              case 608: {
                Item9 = input.ReadInt32();
                break;
              }
              case 616: {
                BountyRunes = input.ReadUInt32();
                break;
              }
              case 624: {
                OutpostsCaptured = input.ReadUInt32();
                break;
              }
              case 634: {
                heroDamageDealt_.AddEntriesFrom(ref input, _repeated_heroDamageDealt_codec);
                break;
              }
              case 640: {
                TeamNumber = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
                break;
              }
              case 648: {
                TeamSlot = input.ReadUInt32();
                break;
              }
              case 656: {
                SelectedFacet = input.ReadUInt32();
                break;
              }
              case 664: {
                Item10 = input.ReadInt32();
                break;
              }
              case 672: {
                Item10Lvl = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Player message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum HeroDamageType {
            [pbr::OriginalName("HERO_DAMAGE_PHYSICAL")] HeroDamagePhysical = 0,
            [pbr::OriginalName("HERO_DAMAGE_MAGICAL")] HeroDamageMagical = 1,
            [pbr::OriginalName("HERO_DAMAGE_PURE")] HeroDamagePure = 2,
          }

          public sealed partial class CustomGameData : pb::IMessage<CustomGameData>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<CustomGameData> _parser = new pb::MessageParser<CustomGameData>(() => new CustomGameData());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CustomGameData> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CustomGameData() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CustomGameData(CustomGameData other) : this() {
              _hasBits0 = other._hasBits0;
              dotaTeam_ = other.dotaTeam_;
              winner_ = other.winner_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CustomGameData Clone() {
              return new CustomGameData(this);
            }

            /// <summary>Field number for the "dota_team" field.</summary>
            public const int DotaTeamFieldNumber = 1;
            private readonly static uint DotaTeamDefaultValue = 0;

            private uint dotaTeam_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint DotaTeam {
              get { if ((_hasBits0 & 1) != 0) { return dotaTeam_; } else { return DotaTeamDefaultValue; } }
              set {
                _hasBits0 |= 1;
                dotaTeam_ = value;
              }
            }
            /// <summary>Gets whether the "dota_team" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDotaTeam {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "dota_team" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDotaTeam() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "winner" field.</summary>
            public const int WinnerFieldNumber = 2;
            private readonly static bool WinnerDefaultValue = false;

            private bool winner_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Winner {
              get { if ((_hasBits0 & 2) != 0) { return winner_; } else { return WinnerDefaultValue; } }
              set {
                _hasBits0 |= 2;
                winner_ = value;
              }
            }
            /// <summary>Gets whether the "winner" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasWinner {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "winner" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearWinner() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CustomGameData);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CustomGameData other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (DotaTeam != other.DotaTeam) return false;
              if (Winner != other.Winner) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasDotaTeam) hash ^= DotaTeam.GetHashCode();
              if (HasWinner) hash ^= Winner.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasDotaTeam) {
                output.WriteRawTag(8);
                output.WriteUInt32(DotaTeam);
              }
              if (HasWinner) {
                output.WriteRawTag(16);
                output.WriteBool(Winner);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasDotaTeam) {
                output.WriteRawTag(8);
                output.WriteUInt32(DotaTeam);
              }
              if (HasWinner) {
                output.WriteRawTag(16);
                output.WriteBool(Winner);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasDotaTeam) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DotaTeam);
              }
              if (HasWinner) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CustomGameData other) {
              if (other == null) {
                return;
              }
              if (other.HasDotaTeam) {
                DotaTeam = other.DotaTeam;
              }
              if (other.HasWinner) {
                Winner = other.Winner;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    DotaTeam = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Winner = input.ReadBool();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    DotaTeam = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Winner = input.ReadBool();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class HeroDamageReceived : pb::IMessage<HeroDamageReceived>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<HeroDamageReceived> _parser = new pb::MessageParser<HeroDamageReceived>(() => new HeroDamageReceived());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<HeroDamageReceived> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HeroDamageReceived() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HeroDamageReceived(HeroDamageReceived other) : this() {
              _hasBits0 = other._hasBits0;
              preReduction_ = other.preReduction_;
              postReduction_ = other.postReduction_;
              damageType_ = other.damageType_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HeroDamageReceived Clone() {
              return new HeroDamageReceived(this);
            }

            /// <summary>Field number for the "pre_reduction" field.</summary>
            public const int PreReductionFieldNumber = 1;
            private readonly static uint PreReductionDefaultValue = 0;

            private uint preReduction_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PreReduction {
              get { if ((_hasBits0 & 1) != 0) { return preReduction_; } else { return PreReductionDefaultValue; } }
              set {
                _hasBits0 |= 1;
                preReduction_ = value;
              }
            }
            /// <summary>Gets whether the "pre_reduction" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPreReduction {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "pre_reduction" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPreReduction() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "post_reduction" field.</summary>
            public const int PostReductionFieldNumber = 2;
            private readonly static uint PostReductionDefaultValue = 0;

            private uint postReduction_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PostReduction {
              get { if ((_hasBits0 & 2) != 0) { return postReduction_; } else { return PostReductionDefaultValue; } }
              set {
                _hasBits0 |= 2;
                postReduction_ = value;
              }
            }
            /// <summary>Gets whether the "post_reduction" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPostReduction {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "post_reduction" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPostReduction() {
              _hasBits0 &= ~2;
            }

            /// <summary>Field number for the "damage_type" field.</summary>
            public const int DamageTypeFieldNumber = 3;
            private readonly static global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageType DamageTypeDefaultValue = global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageType.HeroDamagePhysical;

            private global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageType damageType_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageType DamageType {
              get { if ((_hasBits0 & 4) != 0) { return damageType_; } else { return DamageTypeDefaultValue; } }
              set {
                _hasBits0 |= 4;
                damageType_ = value;
              }
            }
            /// <summary>Gets whether the "damage_type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDamageType {
              get { return (_hasBits0 & 4) != 0; }
            }
            /// <summary>Clears the value of the "damage_type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDamageType() {
              _hasBits0 &= ~4;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as HeroDamageReceived);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(HeroDamageReceived other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (PreReduction != other.PreReduction) return false;
              if (PostReduction != other.PostReduction) return false;
              if (DamageType != other.DamageType) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasPreReduction) hash ^= PreReduction.GetHashCode();
              if (HasPostReduction) hash ^= PostReduction.GetHashCode();
              if (HasDamageType) hash ^= DamageType.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasPreReduction) {
                output.WriteRawTag(8);
                output.WriteUInt32(PreReduction);
              }
              if (HasPostReduction) {
                output.WriteRawTag(16);
                output.WriteUInt32(PostReduction);
              }
              if (HasDamageType) {
                output.WriteRawTag(24);
                output.WriteEnum((int) DamageType);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasPreReduction) {
                output.WriteRawTag(8);
                output.WriteUInt32(PreReduction);
              }
              if (HasPostReduction) {
                output.WriteRawTag(16);
                output.WriteUInt32(PostReduction);
              }
              if (HasDamageType) {
                output.WriteRawTag(24);
                output.WriteEnum((int) DamageType);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasPreReduction) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreReduction);
              }
              if (HasPostReduction) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PostReduction);
              }
              if (HasDamageType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DamageType);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(HeroDamageReceived other) {
              if (other == null) {
                return;
              }
              if (other.HasPreReduction) {
                PreReduction = other.PreReduction;
              }
              if (other.HasPostReduction) {
                PostReduction = other.PostReduction;
              }
              if (other.HasDamageType) {
                DamageType = other.DamageType;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    PreReduction = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    PostReduction = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    DamageType = (global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageType) input.ReadEnum();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    PreReduction = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    PostReduction = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    DamageType = (global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.Player.Types.HeroDamageType) input.ReadEnum();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      public sealed partial class BroadcasterInfo : pb::IMessage<BroadcasterInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BroadcasterInfo> _parser = new pb::MessageParser<BroadcasterInfo>(() => new BroadcasterInfo());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BroadcasterInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAMatch.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterInfo(BroadcasterInfo other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterInfo Clone() {
          return new BroadcasterInfo(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BroadcasterInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BroadcasterInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BroadcasterInfo other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class BroadcasterChannel : pb::IMessage<BroadcasterChannel>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BroadcasterChannel> _parser = new pb::MessageParser<BroadcasterChannel>(() => new BroadcasterChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BroadcasterChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAMatch.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterChannel(BroadcasterChannel other) : this() {
          countryCode_ = other.countryCode_;
          description_ = other.description_;
          broadcasterInfos_ = other.broadcasterInfos_.Clone();
          languageCode_ = other.languageCode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterChannel Clone() {
          return new BroadcasterChannel(this);
        }

        /// <summary>Field number for the "country_code" field.</summary>
        public const int CountryCodeFieldNumber = 1;
        private readonly static string CountryCodeDefaultValue = "";

        private string countryCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CountryCode {
          get { return countryCode_ ?? CountryCodeDefaultValue; }
          set {
            countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "country_code" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCountryCode {
          get { return countryCode_ != null; }
        }
        /// <summary>Clears the value of the "country_code" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCountryCode() {
          countryCode_ = null;
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private readonly static string DescriptionDefaultValue = "";

        private string description_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_ ?? DescriptionDefaultValue; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "description" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDescription {
          get { return description_ != null; }
        }
        /// <summary>Clears the value of the "description" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDescription() {
          description_ = null;
        }

        /// <summary>Field number for the "broadcaster_infos" field.</summary>
        public const int BroadcasterInfosFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterInfo> _repeated_broadcasterInfos_codec
            = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterInfo.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterInfo> broadcasterInfos_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatch.Types.BroadcasterInfo> BroadcasterInfos {
          get { return broadcasterInfos_; }
        }

        /// <summary>Field number for the "language_code" field.</summary>
        public const int LanguageCodeFieldNumber = 4;
        private readonly static string LanguageCodeDefaultValue = "";

        private string languageCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LanguageCode {
          get { return languageCode_ ?? LanguageCodeDefaultValue; }
          set {
            languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "language_code" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLanguageCode {
          get { return languageCode_ != null; }
        }
        /// <summary>Clears the value of the "language_code" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLanguageCode() {
          languageCode_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BroadcasterChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BroadcasterChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CountryCode != other.CountryCode) return false;
          if (Description != other.Description) return false;
          if(!broadcasterInfos_.Equals(other.broadcasterInfos_)) return false;
          if (LanguageCode != other.LanguageCode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCountryCode) hash ^= CountryCode.GetHashCode();
          if (HasDescription) hash ^= Description.GetHashCode();
          hash ^= broadcasterInfos_.GetHashCode();
          if (HasLanguageCode) hash ^= LanguageCode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasCountryCode) {
            output.WriteRawTag(10);
            output.WriteString(CountryCode);
          }
          if (HasDescription) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          broadcasterInfos_.WriteTo(output, _repeated_broadcasterInfos_codec);
          if (HasLanguageCode) {
            output.WriteRawTag(34);
            output.WriteString(LanguageCode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasCountryCode) {
            output.WriteRawTag(10);
            output.WriteString(CountryCode);
          }
          if (HasDescription) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          broadcasterInfos_.WriteTo(ref output, _repeated_broadcasterInfos_codec);
          if (HasLanguageCode) {
            output.WriteRawTag(34);
            output.WriteString(LanguageCode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCountryCode) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
          }
          if (HasDescription) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          size += broadcasterInfos_.CalculateSize(_repeated_broadcasterInfos_codec);
          if (HasLanguageCode) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BroadcasterChannel other) {
          if (other == null) {
            return;
          }
          if (other.HasCountryCode) {
            CountryCode = other.CountryCode;
          }
          if (other.HasDescription) {
            Description = other.Description;
          }
          broadcasterInfos_.Add(other.broadcasterInfos_);
          if (other.HasLanguageCode) {
            LanguageCode = other.LanguageCode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CountryCode = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
              case 26: {
                broadcasterInfos_.AddEntriesFrom(input, _repeated_broadcasterInfos_codec);
                break;
              }
              case 34: {
                LanguageCode = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                CountryCode = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
              case 26: {
                broadcasterInfos_.AddEntriesFrom(ref input, _repeated_broadcasterInfos_codec);
                break;
              }
              case 34: {
                LanguageCode = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Coach : pb::IMessage<Coach>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Coach> _parser = new pb::MessageParser<Coach>(() => new Coach());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Coach> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAMatch.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Coach() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Coach(Coach other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          coachName_ = other.coachName_;
          coachRating_ = other.coachRating_;
          coachTeam_ = other.coachTeam_;
          coachPartyId_ = other.coachPartyId_;
          isPrivateCoach_ = other.isPrivateCoach_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Coach Clone() {
          return new Coach(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "coach_name" field.</summary>
        public const int CoachNameFieldNumber = 2;
        private readonly static string CoachNameDefaultValue = "";

        private string coachName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CoachName {
          get { return coachName_ ?? CoachNameDefaultValue; }
          set {
            coachName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "coach_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCoachName {
          get { return coachName_ != null; }
        }
        /// <summary>Clears the value of the "coach_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCoachName() {
          coachName_ = null;
        }

        /// <summary>Field number for the "coach_rating" field.</summary>
        public const int CoachRatingFieldNumber = 3;
        private readonly static uint CoachRatingDefaultValue = 0;

        private uint coachRating_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CoachRating {
          get { if ((_hasBits0 & 2) != 0) { return coachRating_; } else { return CoachRatingDefaultValue; } }
          set {
            _hasBits0 |= 2;
            coachRating_ = value;
          }
        }
        /// <summary>Gets whether the "coach_rating" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCoachRating {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "coach_rating" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCoachRating() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "coach_team" field.</summary>
        public const int CoachTeamFieldNumber = 4;
        private readonly static uint CoachTeamDefaultValue = 0;

        private uint coachTeam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CoachTeam {
          get { if ((_hasBits0 & 4) != 0) { return coachTeam_; } else { return CoachTeamDefaultValue; } }
          set {
            _hasBits0 |= 4;
            coachTeam_ = value;
          }
        }
        /// <summary>Gets whether the "coach_team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCoachTeam {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "coach_team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCoachTeam() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "coach_party_id" field.</summary>
        public const int CoachPartyIdFieldNumber = 5;
        private readonly static ulong CoachPartyIdDefaultValue = 0UL;

        private ulong coachPartyId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CoachPartyId {
          get { if ((_hasBits0 & 8) != 0) { return coachPartyId_; } else { return CoachPartyIdDefaultValue; } }
          set {
            _hasBits0 |= 8;
            coachPartyId_ = value;
          }
        }
        /// <summary>Gets whether the "coach_party_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCoachPartyId {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "coach_party_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCoachPartyId() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "is_private_coach" field.</summary>
        public const int IsPrivateCoachFieldNumber = 6;
        private readonly static bool IsPrivateCoachDefaultValue = false;

        private bool isPrivateCoach_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsPrivateCoach {
          get { if ((_hasBits0 & 16) != 0) { return isPrivateCoach_; } else { return IsPrivateCoachDefaultValue; } }
          set {
            _hasBits0 |= 16;
            isPrivateCoach_ = value;
          }
        }
        /// <summary>Gets whether the "is_private_coach" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsPrivateCoach {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "is_private_coach" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsPrivateCoach() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Coach);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Coach other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (CoachName != other.CoachName) return false;
          if (CoachRating != other.CoachRating) return false;
          if (CoachTeam != other.CoachTeam) return false;
          if (CoachPartyId != other.CoachPartyId) return false;
          if (IsPrivateCoach != other.IsPrivateCoach) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasCoachName) hash ^= CoachName.GetHashCode();
          if (HasCoachRating) hash ^= CoachRating.GetHashCode();
          if (HasCoachTeam) hash ^= CoachTeam.GetHashCode();
          if (HasCoachPartyId) hash ^= CoachPartyId.GetHashCode();
          if (HasIsPrivateCoach) hash ^= IsPrivateCoach.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasCoachName) {
            output.WriteRawTag(18);
            output.WriteString(CoachName);
          }
          if (HasCoachRating) {
            output.WriteRawTag(24);
            output.WriteUInt32(CoachRating);
          }
          if (HasCoachTeam) {
            output.WriteRawTag(32);
            output.WriteUInt32(CoachTeam);
          }
          if (HasCoachPartyId) {
            output.WriteRawTag(40);
            output.WriteUInt64(CoachPartyId);
          }
          if (HasIsPrivateCoach) {
            output.WriteRawTag(48);
            output.WriteBool(IsPrivateCoach);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasCoachName) {
            output.WriteRawTag(18);
            output.WriteString(CoachName);
          }
          if (HasCoachRating) {
            output.WriteRawTag(24);
            output.WriteUInt32(CoachRating);
          }
          if (HasCoachTeam) {
            output.WriteRawTag(32);
            output.WriteUInt32(CoachTeam);
          }
          if (HasCoachPartyId) {
            output.WriteRawTag(40);
            output.WriteUInt64(CoachPartyId);
          }
          if (HasIsPrivateCoach) {
            output.WriteRawTag(48);
            output.WriteBool(IsPrivateCoach);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasCoachName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CoachName);
          }
          if (HasCoachRating) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoachRating);
          }
          if (HasCoachTeam) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoachTeam);
          }
          if (HasCoachPartyId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CoachPartyId);
          }
          if (HasIsPrivateCoach) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Coach other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasCoachName) {
            CoachName = other.CoachName;
          }
          if (other.HasCoachRating) {
            CoachRating = other.CoachRating;
          }
          if (other.HasCoachTeam) {
            CoachTeam = other.CoachTeam;
          }
          if (other.HasCoachPartyId) {
            CoachPartyId = other.CoachPartyId;
          }
          if (other.HasIsPrivateCoach) {
            IsPrivateCoach = other.IsPrivateCoach;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                CoachName = input.ReadString();
                break;
              }
              case 24: {
                CoachRating = input.ReadUInt32();
                break;
              }
              case 32: {
                CoachTeam = input.ReadUInt32();
                break;
              }
              case 40: {
                CoachPartyId = input.ReadUInt64();
                break;
              }
              case 48: {
                IsPrivateCoach = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                CoachName = input.ReadString();
                break;
              }
              case 24: {
                CoachRating = input.ReadUInt32();
                break;
              }
              case 32: {
                CoachTeam = input.ReadUInt32();
                break;
              }
              case 40: {
                CoachPartyId = input.ReadUInt64();
                break;
              }
              case 48: {
                IsPrivateCoach = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class CustomGameData : pb::IMessage<CustomGameData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CustomGameData> _parser = new pb::MessageParser<CustomGameData>(() => new CustomGameData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CustomGameData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAMatch.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomGameData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomGameData(CustomGameData other) : this() {
          _hasBits0 = other._hasBits0;
          customGameId_ = other.customGameId_;
          mapName_ = other.mapName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomGameData Clone() {
          return new CustomGameData(this);
        }

        /// <summary>Field number for the "custom_game_id" field.</summary>
        public const int CustomGameIdFieldNumber = 1;
        private readonly static ulong CustomGameIdDefaultValue = 0UL;

        private ulong customGameId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CustomGameId {
          get { if ((_hasBits0 & 1) != 0) { return customGameId_; } else { return CustomGameIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            customGameId_ = value;
          }
        }
        /// <summary>Gets whether the "custom_game_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCustomGameId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "custom_game_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCustomGameId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "map_name" field.</summary>
        public const int MapNameFieldNumber = 2;
        private readonly static string MapNameDefaultValue = "";

        private string mapName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MapName {
          get { return mapName_ ?? MapNameDefaultValue; }
          set {
            mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "map_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMapName {
          get { return mapName_ != null; }
        }
        /// <summary>Clears the value of the "map_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMapName() {
          mapName_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CustomGameData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CustomGameData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CustomGameId != other.CustomGameId) return false;
          if (MapName != other.MapName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCustomGameId) hash ^= CustomGameId.GetHashCode();
          if (HasMapName) hash ^= MapName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasCustomGameId) {
            output.WriteRawTag(8);
            output.WriteUInt64(CustomGameId);
          }
          if (HasMapName) {
            output.WriteRawTag(18);
            output.WriteString(MapName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasCustomGameId) {
            output.WriteRawTag(8);
            output.WriteUInt64(CustomGameId);
          }
          if (HasMapName) {
            output.WriteRawTag(18);
            output.WriteString(MapName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCustomGameId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomGameId);
          }
          if (HasMapName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CustomGameData other) {
          if (other == null) {
            return;
          }
          if (other.HasCustomGameId) {
            CustomGameId = other.CustomGameId;
          }
          if (other.HasMapName) {
            MapName = other.MapName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CustomGameId = input.ReadUInt64();
                break;
              }
              case 18: {
                MapName = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                CustomGameId = input.ReadUInt64();
                break;
              }
              case 18: {
                MapName = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgPlayerCard : pb::IMessage<CMsgPlayerCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPlayerCard> _parser = new pb::MessageParser<CMsgPlayerCard>(() => new CMsgPlayerCard());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPlayerCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerCard(CMsgPlayerCard other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      statModifier_ = other.statModifier_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerCard Clone() {
      return new CMsgPlayerCard(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stat_modifier" field.</summary>
    public const int StatModifierFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgPlayerCard.Types.StatModifier> _repeated_statModifier_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgPlayerCard.Types.StatModifier.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPlayerCard.Types.StatModifier> statModifier_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPlayerCard.Types.StatModifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPlayerCard.Types.StatModifier> StatModifier {
      get { return statModifier_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPlayerCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPlayerCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if(!statModifier_.Equals(other.statModifier_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      hash ^= statModifier_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      statModifier_.WriteTo(output, _repeated_statModifier_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      statModifier_.WriteTo(ref output, _repeated_statModifier_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      size += statModifier_.CalculateSize(_repeated_statModifier_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPlayerCard other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      statModifier_.Add(other.statModifier_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            statModifier_.AddEntriesFrom(input, _repeated_statModifier_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            statModifier_.AddEntriesFrom(ref input, _repeated_statModifier_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgPlayerCard message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StatModifier : pb::IMessage<StatModifier>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<StatModifier> _parser = new pb::MessageParser<StatModifier>(() => new StatModifier());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StatModifier> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgPlayerCard.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatModifier() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatModifier(StatModifier other) : this() {
          _hasBits0 = other._hasBits0;
          stat_ = other.stat_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatModifier Clone() {
          return new StatModifier(this);
        }

        /// <summary>Field number for the "stat" field.</summary>
        public const int StatFieldNumber = 1;
        private readonly static uint StatDefaultValue = 0;

        private uint stat_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Stat {
          get { if ((_hasBits0 & 1) != 0) { return stat_; } else { return StatDefaultValue; } }
          set {
            _hasBits0 |= 1;
            stat_ = value;
          }
        }
        /// <summary>Gets whether the "stat" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStat {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "stat" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStat() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private readonly static uint ValueDefaultValue = 0;

        private uint value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Value {
          get { if ((_hasBits0 & 2) != 0) { return value_; } else { return ValueDefaultValue; } }
          set {
            _hasBits0 |= 2;
            value_ = value;
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValue {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StatModifier);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StatModifier other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Stat != other.Stat) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasStat) hash ^= Stat.GetHashCode();
          if (HasValue) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasStat) {
            output.WriteRawTag(8);
            output.WriteUInt32(Stat);
          }
          if (HasValue) {
            output.WriteRawTag(16);
            output.WriteUInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasStat) {
            output.WriteRawTag(8);
            output.WriteUInt32(Stat);
          }
          if (HasValue) {
            output.WriteRawTag(16);
            output.WriteUInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasStat) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stat);
          }
          if (HasValue) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StatModifier other) {
          if (other == null) {
            return;
          }
          if (other.HasStat) {
            Stat = other.Stat;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Stat = input.ReadUInt32();
                break;
              }
              case 16: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Stat = input.ReadUInt32();
                break;
              }
              case 16: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgDOTAFantasyPlayerStats : pb::IMessage<CMsgDOTAFantasyPlayerStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAFantasyPlayerStats> _parser = new pb::MessageParser<CMsgDOTAFantasyPlayerStats>(() => new CMsgDOTAFantasyPlayerStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAFantasyPlayerStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyPlayerStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyPlayerStats(CMsgDOTAFantasyPlayerStats other) : this() {
      _hasBits0 = other._hasBits0;
      playerAccountId_ = other.playerAccountId_;
      matchId_ = other.matchId_;
      matchCompleted_ = other.matchCompleted_;
      teamId_ = other.teamId_;
      leagueId_ = other.leagueId_;
      delay_ = other.delay_;
      seriesId_ = other.seriesId_;
      seriesType_ = other.seriesType_;
      kills_ = other.kills_;
      deaths_ = other.deaths_;
      cs_ = other.cs_;
      gpm_ = other.gpm_;
      towerKills_ = other.towerKills_;
      roshanKills_ = other.roshanKills_;
      teamfightParticipation_ = other.teamfightParticipation_;
      wardsPlaced_ = other.wardsPlaced_;
      campsStacked_ = other.campsStacked_;
      runesGrabbed_ = other.runesGrabbed_;
      firstBlood_ = other.firstBlood_;
      stuns_ = other.stuns_;
      smokes_ = other.smokes_;
      neutralTokens_ = other.neutralTokens_;
      watchers_ = other.watchers_;
      lotuses_ = other.lotuses_;
      tormentors_ = other.tormentors_;
      courierKills_ = other.courierKills_;
      titleStats_ = other.titleStats_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyPlayerStats Clone() {
      return new CMsgDOTAFantasyPlayerStats(this);
    }

    /// <summary>Field number for the "player_account_id" field.</summary>
    public const int PlayerAccountIdFieldNumber = 1;
    private readonly static uint PlayerAccountIdDefaultValue = 0;

    private uint playerAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerAccountId {
      get { if ((_hasBits0 & 1) != 0) { return playerAccountId_; } else { return PlayerAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "player_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 2) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "match_completed" field.</summary>
    public const int MatchCompletedFieldNumber = 3;
    private readonly static bool MatchCompletedDefaultValue = false;

    private bool matchCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MatchCompleted {
      get { if ((_hasBits0 & 4) != 0) { return matchCompleted_; } else { return MatchCompletedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        matchCompleted_ = value;
      }
    }
    /// <summary>Gets whether the "match_completed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchCompleted {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "match_completed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchCompleted() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 4;
    private readonly static uint TeamIdDefaultValue = 0;

    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { if ((_hasBits0 & 8) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "league_id" field.</summary>
    public const int LeagueIdFieldNumber = 5;
    private readonly static uint LeagueIdDefaultValue = 0;

    private uint leagueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeagueId {
      get { if ((_hasBits0 & 16) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        leagueId_ = value;
      }
    }
    /// <summary>Gets whether the "league_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "league_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 6;
    private readonly static uint DelayDefaultValue = 0;

    private uint delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Delay {
      get { if ((_hasBits0 & 32) != 0) { return delay_; } else { return DelayDefaultValue; } }
      set {
        _hasBits0 |= 32;
        delay_ = value;
      }
    }
    /// <summary>Gets whether the "delay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDelay {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "delay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDelay() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "series_id" field.</summary>
    public const int SeriesIdFieldNumber = 7;
    private readonly static uint SeriesIdDefaultValue = 0;

    private uint seriesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeriesId {
      get { if ((_hasBits0 & 64) != 0) { return seriesId_; } else { return SeriesIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        seriesId_ = value;
      }
    }
    /// <summary>Gets whether the "series_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "series_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "series_type" field.</summary>
    public const int SeriesTypeFieldNumber = 8;
    private readonly static uint SeriesTypeDefaultValue = 0;

    private uint seriesType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeriesType {
      get { if ((_hasBits0 & 128) != 0) { return seriesType_; } else { return SeriesTypeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        seriesType_ = value;
      }
    }
    /// <summary>Gets whether the "series_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesType {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "series_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesType() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "kills" field.</summary>
    public const int KillsFieldNumber = 10;
    private readonly static uint KillsDefaultValue = 0;

    private uint kills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kills {
      get { if ((_hasBits0 & 256) != 0) { return kills_; } else { return KillsDefaultValue; } }
      set {
        _hasBits0 |= 256;
        kills_ = value;
      }
    }
    /// <summary>Gets whether the "kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKills {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKills() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "deaths" field.</summary>
    public const int DeathsFieldNumber = 11;
    private readonly static uint DeathsDefaultValue = 0;

    private uint deaths_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deaths {
      get { if ((_hasBits0 & 512) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
      set {
        _hasBits0 |= 512;
        deaths_ = value;
      }
    }
    /// <summary>Gets whether the "deaths" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeaths {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "deaths" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeaths() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "cs" field.</summary>
    public const int CsFieldNumber = 12;
    private readonly static uint CsDefaultValue = 0;

    private uint cs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cs {
      get { if ((_hasBits0 & 1024) != 0) { return cs_; } else { return CsDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        cs_ = value;
      }
    }
    /// <summary>Gets whether the "cs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCs {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "cs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCs() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "gpm" field.</summary>
    public const int GpmFieldNumber = 13;
    private readonly static float GpmDefaultValue = 0F;

    private float gpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Gpm {
      get { if ((_hasBits0 & 2048) != 0) { return gpm_; } else { return GpmDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        gpm_ = value;
      }
    }
    /// <summary>Gets whether the "gpm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGpm {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "gpm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGpm() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "tower_kills" field.</summary>
    public const int TowerKillsFieldNumber = 14;
    private readonly static uint TowerKillsDefaultValue = 0;

    private uint towerKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TowerKills {
      get { if ((_hasBits0 & 4096) != 0) { return towerKills_; } else { return TowerKillsDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        towerKills_ = value;
      }
    }
    /// <summary>Gets whether the "tower_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTowerKills {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "tower_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTowerKills() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "roshan_kills" field.</summary>
    public const int RoshanKillsFieldNumber = 15;
    private readonly static uint RoshanKillsDefaultValue = 0;

    private uint roshanKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoshanKills {
      get { if ((_hasBits0 & 8192) != 0) { return roshanKills_; } else { return RoshanKillsDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        roshanKills_ = value;
      }
    }
    /// <summary>Gets whether the "roshan_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoshanKills {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "roshan_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoshanKills() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "teamfight_participation" field.</summary>
    public const int TeamfightParticipationFieldNumber = 16;
    private readonly static float TeamfightParticipationDefaultValue = 0F;

    private float teamfightParticipation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TeamfightParticipation {
      get { if ((_hasBits0 & 16384) != 0) { return teamfightParticipation_; } else { return TeamfightParticipationDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        teamfightParticipation_ = value;
      }
    }
    /// <summary>Gets whether the "teamfight_participation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamfightParticipation {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "teamfight_participation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamfightParticipation() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "wards_placed" field.</summary>
    public const int WardsPlacedFieldNumber = 17;
    private readonly static uint WardsPlacedDefaultValue = 0;

    private uint wardsPlaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WardsPlaced {
      get { if ((_hasBits0 & 32768) != 0) { return wardsPlaced_; } else { return WardsPlacedDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        wardsPlaced_ = value;
      }
    }
    /// <summary>Gets whether the "wards_placed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWardsPlaced {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "wards_placed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWardsPlaced() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "camps_stacked" field.</summary>
    public const int CampsStackedFieldNumber = 18;
    private readonly static uint CampsStackedDefaultValue = 0;

    private uint campsStacked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CampsStacked {
      get { if ((_hasBits0 & 65536) != 0) { return campsStacked_; } else { return CampsStackedDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        campsStacked_ = value;
      }
    }
    /// <summary>Gets whether the "camps_stacked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCampsStacked {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "camps_stacked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCampsStacked() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "runes_grabbed" field.</summary>
    public const int RunesGrabbedFieldNumber = 19;
    private readonly static uint RunesGrabbedDefaultValue = 0;

    private uint runesGrabbed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RunesGrabbed {
      get { if ((_hasBits0 & 131072) != 0) { return runesGrabbed_; } else { return RunesGrabbedDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        runesGrabbed_ = value;
      }
    }
    /// <summary>Gets whether the "runes_grabbed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRunesGrabbed {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "runes_grabbed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRunesGrabbed() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "first_blood" field.</summary>
    public const int FirstBloodFieldNumber = 20;
    private readonly static uint FirstBloodDefaultValue = 0;

    private uint firstBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstBlood {
      get { if ((_hasBits0 & 262144) != 0) { return firstBlood_; } else { return FirstBloodDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        firstBlood_ = value;
      }
    }
    /// <summary>Gets whether the "first_blood" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstBlood {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "first_blood" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstBlood() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "stuns" field.</summary>
    public const int StunsFieldNumber = 21;
    private readonly static float StunsDefaultValue = 0F;

    private float stuns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Stuns {
      get { if ((_hasBits0 & 524288) != 0) { return stuns_; } else { return StunsDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        stuns_ = value;
      }
    }
    /// <summary>Gets whether the "stuns" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStuns {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "stuns" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStuns() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "smokes" field.</summary>
    public const int SmokesFieldNumber = 22;
    private readonly static uint SmokesDefaultValue = 0;

    private uint smokes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Smokes {
      get { if ((_hasBits0 & 1048576) != 0) { return smokes_; } else { return SmokesDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        smokes_ = value;
      }
    }
    /// <summary>Gets whether the "smokes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSmokes {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "smokes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSmokes() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "neutral_tokens" field.</summary>
    public const int NeutralTokensFieldNumber = 23;
    private readonly static uint NeutralTokensDefaultValue = 0;

    private uint neutralTokens_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NeutralTokens {
      get { if ((_hasBits0 & 2097152) != 0) { return neutralTokens_; } else { return NeutralTokensDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        neutralTokens_ = value;
      }
    }
    /// <summary>Gets whether the "neutral_tokens" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNeutralTokens {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "neutral_tokens" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNeutralTokens() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "watchers" field.</summary>
    public const int WatchersFieldNumber = 24;
    private readonly static uint WatchersDefaultValue = 0;

    private uint watchers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Watchers {
      get { if ((_hasBits0 & 4194304) != 0) { return watchers_; } else { return WatchersDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        watchers_ = value;
      }
    }
    /// <summary>Gets whether the "watchers" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWatchers {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "watchers" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWatchers() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "lotuses" field.</summary>
    public const int LotusesFieldNumber = 25;
    private readonly static uint LotusesDefaultValue = 0;

    private uint lotuses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lotuses {
      get { if ((_hasBits0 & 8388608) != 0) { return lotuses_; } else { return LotusesDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        lotuses_ = value;
      }
    }
    /// <summary>Gets whether the "lotuses" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLotuses {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "lotuses" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLotuses() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "tormentors" field.</summary>
    public const int TormentorsFieldNumber = 26;
    private readonly static uint TormentorsDefaultValue = 0;

    private uint tormentors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tormentors {
      get { if ((_hasBits0 & 16777216) != 0) { return tormentors_; } else { return TormentorsDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        tormentors_ = value;
      }
    }
    /// <summary>Gets whether the "tormentors" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTormentors {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "tormentors" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTormentors() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "courier_kills" field.</summary>
    public const int CourierKillsFieldNumber = 27;
    private readonly static uint CourierKillsDefaultValue = 0;

    private uint courierKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CourierKills {
      get { if ((_hasBits0 & 33554432) != 0) { return courierKills_; } else { return CourierKillsDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        courierKills_ = value;
      }
    }
    /// <summary>Gets whether the "courier_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCourierKills {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "courier_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCourierKills() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "title_stats" field.</summary>
    public const int TitleStatsFieldNumber = 28;
    private readonly static ulong TitleStatsDefaultValue = 0UL;

    private ulong titleStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TitleStats {
      get { if ((_hasBits0 & 67108864) != 0) { return titleStats_; } else { return TitleStatsDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        titleStats_ = value;
      }
    }
    /// <summary>Gets whether the "title_stats" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitleStats {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "title_stats" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitleStats() {
      _hasBits0 &= ~67108864;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAFantasyPlayerStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAFantasyPlayerStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerAccountId != other.PlayerAccountId) return false;
      if (MatchId != other.MatchId) return false;
      if (MatchCompleted != other.MatchCompleted) return false;
      if (TeamId != other.TeamId) return false;
      if (LeagueId != other.LeagueId) return false;
      if (Delay != other.Delay) return false;
      if (SeriesId != other.SeriesId) return false;
      if (SeriesType != other.SeriesType) return false;
      if (Kills != other.Kills) return false;
      if (Deaths != other.Deaths) return false;
      if (Cs != other.Cs) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gpm, other.Gpm)) return false;
      if (TowerKills != other.TowerKills) return false;
      if (RoshanKills != other.RoshanKills) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TeamfightParticipation, other.TeamfightParticipation)) return false;
      if (WardsPlaced != other.WardsPlaced) return false;
      if (CampsStacked != other.CampsStacked) return false;
      if (RunesGrabbed != other.RunesGrabbed) return false;
      if (FirstBlood != other.FirstBlood) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Stuns, other.Stuns)) return false;
      if (Smokes != other.Smokes) return false;
      if (NeutralTokens != other.NeutralTokens) return false;
      if (Watchers != other.Watchers) return false;
      if (Lotuses != other.Lotuses) return false;
      if (Tormentors != other.Tormentors) return false;
      if (CourierKills != other.CourierKills) return false;
      if (TitleStats != other.TitleStats) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerAccountId) hash ^= PlayerAccountId.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasMatchCompleted) hash ^= MatchCompleted.GetHashCode();
      if (HasTeamId) hash ^= TeamId.GetHashCode();
      if (HasLeagueId) hash ^= LeagueId.GetHashCode();
      if (HasDelay) hash ^= Delay.GetHashCode();
      if (HasSeriesId) hash ^= SeriesId.GetHashCode();
      if (HasSeriesType) hash ^= SeriesType.GetHashCode();
      if (HasKills) hash ^= Kills.GetHashCode();
      if (HasDeaths) hash ^= Deaths.GetHashCode();
      if (HasCs) hash ^= Cs.GetHashCode();
      if (HasGpm) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gpm);
      if (HasTowerKills) hash ^= TowerKills.GetHashCode();
      if (HasRoshanKills) hash ^= RoshanKills.GetHashCode();
      if (HasTeamfightParticipation) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TeamfightParticipation);
      if (HasWardsPlaced) hash ^= WardsPlaced.GetHashCode();
      if (HasCampsStacked) hash ^= CampsStacked.GetHashCode();
      if (HasRunesGrabbed) hash ^= RunesGrabbed.GetHashCode();
      if (HasFirstBlood) hash ^= FirstBlood.GetHashCode();
      if (HasStuns) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Stuns);
      if (HasSmokes) hash ^= Smokes.GetHashCode();
      if (HasNeutralTokens) hash ^= NeutralTokens.GetHashCode();
      if (HasWatchers) hash ^= Watchers.GetHashCode();
      if (HasLotuses) hash ^= Lotuses.GetHashCode();
      if (HasTormentors) hash ^= Tormentors.GetHashCode();
      if (HasCourierKills) hash ^= CourierKills.GetHashCode();
      if (HasTitleStats) hash ^= TitleStats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerAccountId);
      }
      if (HasMatchId) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (HasMatchCompleted) {
        output.WriteRawTag(24);
        output.WriteBool(MatchCompleted);
      }
      if (HasTeamId) {
        output.WriteRawTag(32);
        output.WriteUInt32(TeamId);
      }
      if (HasLeagueId) {
        output.WriteRawTag(40);
        output.WriteUInt32(LeagueId);
      }
      if (HasDelay) {
        output.WriteRawTag(48);
        output.WriteUInt32(Delay);
      }
      if (HasSeriesId) {
        output.WriteRawTag(56);
        output.WriteUInt32(SeriesId);
      }
      if (HasSeriesType) {
        output.WriteRawTag(64);
        output.WriteUInt32(SeriesType);
      }
      if (HasKills) {
        output.WriteRawTag(80);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(88);
        output.WriteUInt32(Deaths);
      }
      if (HasCs) {
        output.WriteRawTag(96);
        output.WriteUInt32(Cs);
      }
      if (HasGpm) {
        output.WriteRawTag(109);
        output.WriteFloat(Gpm);
      }
      if (HasTowerKills) {
        output.WriteRawTag(112);
        output.WriteUInt32(TowerKills);
      }
      if (HasRoshanKills) {
        output.WriteRawTag(120);
        output.WriteUInt32(RoshanKills);
      }
      if (HasTeamfightParticipation) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(TeamfightParticipation);
      }
      if (HasWardsPlaced) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(WardsPlaced);
      }
      if (HasCampsStacked) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(CampsStacked);
      }
      if (HasRunesGrabbed) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(RunesGrabbed);
      }
      if (HasFirstBlood) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(FirstBlood);
      }
      if (HasStuns) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(Stuns);
      }
      if (HasSmokes) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Smokes);
      }
      if (HasNeutralTokens) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(NeutralTokens);
      }
      if (HasWatchers) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Watchers);
      }
      if (HasLotuses) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Lotuses);
      }
      if (HasTormentors) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Tormentors);
      }
      if (HasCourierKills) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(CourierKills);
      }
      if (HasTitleStats) {
        output.WriteRawTag(225, 1);
        output.WriteFixed64(TitleStats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerAccountId);
      }
      if (HasMatchId) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (HasMatchCompleted) {
        output.WriteRawTag(24);
        output.WriteBool(MatchCompleted);
      }
      if (HasTeamId) {
        output.WriteRawTag(32);
        output.WriteUInt32(TeamId);
      }
      if (HasLeagueId) {
        output.WriteRawTag(40);
        output.WriteUInt32(LeagueId);
      }
      if (HasDelay) {
        output.WriteRawTag(48);
        output.WriteUInt32(Delay);
      }
      if (HasSeriesId) {
        output.WriteRawTag(56);
        output.WriteUInt32(SeriesId);
      }
      if (HasSeriesType) {
        output.WriteRawTag(64);
        output.WriteUInt32(SeriesType);
      }
      if (HasKills) {
        output.WriteRawTag(80);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(88);
        output.WriteUInt32(Deaths);
      }
      if (HasCs) {
        output.WriteRawTag(96);
        output.WriteUInt32(Cs);
      }
      if (HasGpm) {
        output.WriteRawTag(109);
        output.WriteFloat(Gpm);
      }
      if (HasTowerKills) {
        output.WriteRawTag(112);
        output.WriteUInt32(TowerKills);
      }
      if (HasRoshanKills) {
        output.WriteRawTag(120);
        output.WriteUInt32(RoshanKills);
      }
      if (HasTeamfightParticipation) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(TeamfightParticipation);
      }
      if (HasWardsPlaced) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(WardsPlaced);
      }
      if (HasCampsStacked) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(CampsStacked);
      }
      if (HasRunesGrabbed) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(RunesGrabbed);
      }
      if (HasFirstBlood) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(FirstBlood);
      }
      if (HasStuns) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(Stuns);
      }
      if (HasSmokes) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Smokes);
      }
      if (HasNeutralTokens) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(NeutralTokens);
      }
      if (HasWatchers) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Watchers);
      }
      if (HasLotuses) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Lotuses);
      }
      if (HasTormentors) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Tormentors);
      }
      if (HasCourierKills) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(CourierKills);
      }
      if (HasTitleStats) {
        output.WriteRawTag(225, 1);
        output.WriteFixed64(TitleStats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerAccountId);
      }
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasMatchCompleted) {
        size += 1 + 1;
      }
      if (HasTeamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (HasLeagueId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
      }
      if (HasDelay) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Delay);
      }
      if (HasSeriesId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeriesId);
      }
      if (HasSeriesType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeriesType);
      }
      if (HasKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
      }
      if (HasDeaths) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
      }
      if (HasCs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cs);
      }
      if (HasGpm) {
        size += 1 + 4;
      }
      if (HasTowerKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TowerKills);
      }
      if (HasRoshanKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoshanKills);
      }
      if (HasTeamfightParticipation) {
        size += 2 + 4;
      }
      if (HasWardsPlaced) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WardsPlaced);
      }
      if (HasCampsStacked) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CampsStacked);
      }
      if (HasRunesGrabbed) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RunesGrabbed);
      }
      if (HasFirstBlood) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FirstBlood);
      }
      if (HasStuns) {
        size += 2 + 4;
      }
      if (HasSmokes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Smokes);
      }
      if (HasNeutralTokens) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NeutralTokens);
      }
      if (HasWatchers) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Watchers);
      }
      if (HasLotuses) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Lotuses);
      }
      if (HasTormentors) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Tormentors);
      }
      if (HasCourierKills) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CourierKills);
      }
      if (HasTitleStats) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAFantasyPlayerStats other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerAccountId) {
        PlayerAccountId = other.PlayerAccountId;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasMatchCompleted) {
        MatchCompleted = other.MatchCompleted;
      }
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      if (other.HasLeagueId) {
        LeagueId = other.LeagueId;
      }
      if (other.HasDelay) {
        Delay = other.Delay;
      }
      if (other.HasSeriesId) {
        SeriesId = other.SeriesId;
      }
      if (other.HasSeriesType) {
        SeriesType = other.SeriesType;
      }
      if (other.HasKills) {
        Kills = other.Kills;
      }
      if (other.HasDeaths) {
        Deaths = other.Deaths;
      }
      if (other.HasCs) {
        Cs = other.Cs;
      }
      if (other.HasGpm) {
        Gpm = other.Gpm;
      }
      if (other.HasTowerKills) {
        TowerKills = other.TowerKills;
      }
      if (other.HasRoshanKills) {
        RoshanKills = other.RoshanKills;
      }
      if (other.HasTeamfightParticipation) {
        TeamfightParticipation = other.TeamfightParticipation;
      }
      if (other.HasWardsPlaced) {
        WardsPlaced = other.WardsPlaced;
      }
      if (other.HasCampsStacked) {
        CampsStacked = other.CampsStacked;
      }
      if (other.HasRunesGrabbed) {
        RunesGrabbed = other.RunesGrabbed;
      }
      if (other.HasFirstBlood) {
        FirstBlood = other.FirstBlood;
      }
      if (other.HasStuns) {
        Stuns = other.Stuns;
      }
      if (other.HasSmokes) {
        Smokes = other.Smokes;
      }
      if (other.HasNeutralTokens) {
        NeutralTokens = other.NeutralTokens;
      }
      if (other.HasWatchers) {
        Watchers = other.Watchers;
      }
      if (other.HasLotuses) {
        Lotuses = other.Lotuses;
      }
      if (other.HasTormentors) {
        Tormentors = other.Tormentors;
      }
      if (other.HasCourierKills) {
        CourierKills = other.CourierKills;
      }
      if (other.HasTitleStats) {
        TitleStats = other.TitleStats;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 24: {
            MatchCompleted = input.ReadBool();
            break;
          }
          case 32: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 40: {
            LeagueId = input.ReadUInt32();
            break;
          }
          case 48: {
            Delay = input.ReadUInt32();
            break;
          }
          case 56: {
            SeriesId = input.ReadUInt32();
            break;
          }
          case 64: {
            SeriesType = input.ReadUInt32();
            break;
          }
          case 80: {
            Kills = input.ReadUInt32();
            break;
          }
          case 88: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 96: {
            Cs = input.ReadUInt32();
            break;
          }
          case 109: {
            Gpm = input.ReadFloat();
            break;
          }
          case 112: {
            TowerKills = input.ReadUInt32();
            break;
          }
          case 120: {
            RoshanKills = input.ReadUInt32();
            break;
          }
          case 133: {
            TeamfightParticipation = input.ReadFloat();
            break;
          }
          case 136: {
            WardsPlaced = input.ReadUInt32();
            break;
          }
          case 144: {
            CampsStacked = input.ReadUInt32();
            break;
          }
          case 152: {
            RunesGrabbed = input.ReadUInt32();
            break;
          }
          case 160: {
            FirstBlood = input.ReadUInt32();
            break;
          }
          case 173: {
            Stuns = input.ReadFloat();
            break;
          }
          case 176: {
            Smokes = input.ReadUInt32();
            break;
          }
          case 184: {
            NeutralTokens = input.ReadUInt32();
            break;
          }
          case 192: {
            Watchers = input.ReadUInt32();
            break;
          }
          case 200: {
            Lotuses = input.ReadUInt32();
            break;
          }
          case 208: {
            Tormentors = input.ReadUInt32();
            break;
          }
          case 216: {
            CourierKills = input.ReadUInt32();
            break;
          }
          case 225: {
            TitleStats = input.ReadFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 24: {
            MatchCompleted = input.ReadBool();
            break;
          }
          case 32: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 40: {
            LeagueId = input.ReadUInt32();
            break;
          }
          case 48: {
            Delay = input.ReadUInt32();
            break;
          }
          case 56: {
            SeriesId = input.ReadUInt32();
            break;
          }
          case 64: {
            SeriesType = input.ReadUInt32();
            break;
          }
          case 80: {
            Kills = input.ReadUInt32();
            break;
          }
          case 88: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 96: {
            Cs = input.ReadUInt32();
            break;
          }
          case 109: {
            Gpm = input.ReadFloat();
            break;
          }
          case 112: {
            TowerKills = input.ReadUInt32();
            break;
          }
          case 120: {
            RoshanKills = input.ReadUInt32();
            break;
          }
          case 133: {
            TeamfightParticipation = input.ReadFloat();
            break;
          }
          case 136: {
            WardsPlaced = input.ReadUInt32();
            break;
          }
          case 144: {
            CampsStacked = input.ReadUInt32();
            break;
          }
          case 152: {
            RunesGrabbed = input.ReadUInt32();
            break;
          }
          case 160: {
            FirstBlood = input.ReadUInt32();
            break;
          }
          case 173: {
            Stuns = input.ReadFloat();
            break;
          }
          case 176: {
            Smokes = input.ReadUInt32();
            break;
          }
          case 184: {
            NeutralTokens = input.ReadUInt32();
            break;
          }
          case 192: {
            Watchers = input.ReadUInt32();
            break;
          }
          case 200: {
            Lotuses = input.ReadUInt32();
            break;
          }
          case 208: {
            Tormentors = input.ReadUInt32();
            break;
          }
          case 216: {
            CourierKills = input.ReadUInt32();
            break;
          }
          case 225: {
            TitleStats = input.ReadFixed64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTAFantasyPlayerMatchStats : pb::IMessage<CMsgDOTAFantasyPlayerMatchStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAFantasyPlayerMatchStats> _parser = new pb::MessageParser<CMsgDOTAFantasyPlayerMatchStats>(() => new CMsgDOTAFantasyPlayerMatchStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAFantasyPlayerMatchStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyPlayerMatchStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyPlayerMatchStats(CMsgDOTAFantasyPlayerMatchStats other) : this() {
      matches_ = other.matches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAFantasyPlayerMatchStats Clone() {
      return new CMsgDOTAFantasyPlayerMatchStats(this);
    }

    /// <summary>Field number for the "matches" field.</summary>
    public const int MatchesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> _repeated_matches_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> matches_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAFantasyPlayerStats> Matches {
      get { return matches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAFantasyPlayerMatchStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAFantasyPlayerMatchStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matches_.Equals(other.matches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      matches_.WriteTo(output, _repeated_matches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      matches_.WriteTo(ref output, _repeated_matches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matches_.CalculateSize(_repeated_matches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAFantasyPlayerMatchStats other) {
      if (other == null) {
        return;
      }
      matches_.Add(other.matches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matches_.AddEntriesFrom(input, _repeated_matches_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            matches_.AddEntriesFrom(ref input, _repeated_matches_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTABotDebugInfo : pb::IMessage<CMsgDOTABotDebugInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTABotDebugInfo> _parser = new pb::MessageParser<CMsgDOTABotDebugInfo>(() => new CMsgDOTABotDebugInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTABotDebugInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTABotDebugInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTABotDebugInfo(CMsgDOTABotDebugInfo other) : this() {
      _hasBits0 = other._hasBits0;
      bots_ = other.bots_.Clone();
      desirePushLaneTop_ = other.desirePushLaneTop_;
      desirePushLaneMid_ = other.desirePushLaneMid_;
      desirePushLaneBot_ = other.desirePushLaneBot_;
      desireDefendLaneTop_ = other.desireDefendLaneTop_;
      desireDefendLaneMid_ = other.desireDefendLaneMid_;
      desireDefendLaneBot_ = other.desireDefendLaneBot_;
      desireFarmLaneTop_ = other.desireFarmLaneTop_;
      desireFarmLaneMid_ = other.desireFarmLaneMid_;
      desireFarmLaneBot_ = other.desireFarmLaneBot_;
      desireFarmRoshan_ = other.desireFarmRoshan_;
      executionTime_ = other.executionTime_;
      runeStatus_ = other.runeStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTABotDebugInfo Clone() {
      return new CMsgDOTABotDebugInfo(this);
    }

    /// <summary>Field number for the "bots" field.</summary>
    public const int BotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot> _repeated_bots_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot> bots_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot> Bots {
      get { return bots_; }
    }

    /// <summary>Field number for the "desire_push_lane_top" field.</summary>
    public const int DesirePushLaneTopFieldNumber = 2;
    private readonly static float DesirePushLaneTopDefaultValue = 0F;

    private float desirePushLaneTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesirePushLaneTop {
      get { if ((_hasBits0 & 1) != 0) { return desirePushLaneTop_; } else { return DesirePushLaneTopDefaultValue; } }
      set {
        _hasBits0 |= 1;
        desirePushLaneTop_ = value;
      }
    }
    /// <summary>Gets whether the "desire_push_lane_top" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesirePushLaneTop {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "desire_push_lane_top" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesirePushLaneTop() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "desire_push_lane_mid" field.</summary>
    public const int DesirePushLaneMidFieldNumber = 3;
    private readonly static float DesirePushLaneMidDefaultValue = 0F;

    private float desirePushLaneMid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesirePushLaneMid {
      get { if ((_hasBits0 & 2) != 0) { return desirePushLaneMid_; } else { return DesirePushLaneMidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        desirePushLaneMid_ = value;
      }
    }
    /// <summary>Gets whether the "desire_push_lane_mid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesirePushLaneMid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "desire_push_lane_mid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesirePushLaneMid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "desire_push_lane_bot" field.</summary>
    public const int DesirePushLaneBotFieldNumber = 4;
    private readonly static float DesirePushLaneBotDefaultValue = 0F;

    private float desirePushLaneBot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesirePushLaneBot {
      get { if ((_hasBits0 & 4) != 0) { return desirePushLaneBot_; } else { return DesirePushLaneBotDefaultValue; } }
      set {
        _hasBits0 |= 4;
        desirePushLaneBot_ = value;
      }
    }
    /// <summary>Gets whether the "desire_push_lane_bot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesirePushLaneBot {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "desire_push_lane_bot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesirePushLaneBot() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "desire_defend_lane_top" field.</summary>
    public const int DesireDefendLaneTopFieldNumber = 5;
    private readonly static float DesireDefendLaneTopDefaultValue = 0F;

    private float desireDefendLaneTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesireDefendLaneTop {
      get { if ((_hasBits0 & 8) != 0) { return desireDefendLaneTop_; } else { return DesireDefendLaneTopDefaultValue; } }
      set {
        _hasBits0 |= 8;
        desireDefendLaneTop_ = value;
      }
    }
    /// <summary>Gets whether the "desire_defend_lane_top" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesireDefendLaneTop {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "desire_defend_lane_top" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesireDefendLaneTop() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "desire_defend_lane_mid" field.</summary>
    public const int DesireDefendLaneMidFieldNumber = 6;
    private readonly static float DesireDefendLaneMidDefaultValue = 0F;

    private float desireDefendLaneMid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesireDefendLaneMid {
      get { if ((_hasBits0 & 16) != 0) { return desireDefendLaneMid_; } else { return DesireDefendLaneMidDefaultValue; } }
      set {
        _hasBits0 |= 16;
        desireDefendLaneMid_ = value;
      }
    }
    /// <summary>Gets whether the "desire_defend_lane_mid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesireDefendLaneMid {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "desire_defend_lane_mid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesireDefendLaneMid() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "desire_defend_lane_bot" field.</summary>
    public const int DesireDefendLaneBotFieldNumber = 7;
    private readonly static float DesireDefendLaneBotDefaultValue = 0F;

    private float desireDefendLaneBot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesireDefendLaneBot {
      get { if ((_hasBits0 & 32) != 0) { return desireDefendLaneBot_; } else { return DesireDefendLaneBotDefaultValue; } }
      set {
        _hasBits0 |= 32;
        desireDefendLaneBot_ = value;
      }
    }
    /// <summary>Gets whether the "desire_defend_lane_bot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesireDefendLaneBot {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "desire_defend_lane_bot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesireDefendLaneBot() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "desire_farm_lane_top" field.</summary>
    public const int DesireFarmLaneTopFieldNumber = 8;
    private readonly static float DesireFarmLaneTopDefaultValue = 0F;

    private float desireFarmLaneTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesireFarmLaneTop {
      get { if ((_hasBits0 & 64) != 0) { return desireFarmLaneTop_; } else { return DesireFarmLaneTopDefaultValue; } }
      set {
        _hasBits0 |= 64;
        desireFarmLaneTop_ = value;
      }
    }
    /// <summary>Gets whether the "desire_farm_lane_top" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesireFarmLaneTop {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "desire_farm_lane_top" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesireFarmLaneTop() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "desire_farm_lane_mid" field.</summary>
    public const int DesireFarmLaneMidFieldNumber = 9;
    private readonly static float DesireFarmLaneMidDefaultValue = 0F;

    private float desireFarmLaneMid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesireFarmLaneMid {
      get { if ((_hasBits0 & 128) != 0) { return desireFarmLaneMid_; } else { return DesireFarmLaneMidDefaultValue; } }
      set {
        _hasBits0 |= 128;
        desireFarmLaneMid_ = value;
      }
    }
    /// <summary>Gets whether the "desire_farm_lane_mid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesireFarmLaneMid {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "desire_farm_lane_mid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesireFarmLaneMid() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "desire_farm_lane_bot" field.</summary>
    public const int DesireFarmLaneBotFieldNumber = 10;
    private readonly static float DesireFarmLaneBotDefaultValue = 0F;

    private float desireFarmLaneBot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesireFarmLaneBot {
      get { if ((_hasBits0 & 256) != 0) { return desireFarmLaneBot_; } else { return DesireFarmLaneBotDefaultValue; } }
      set {
        _hasBits0 |= 256;
        desireFarmLaneBot_ = value;
      }
    }
    /// <summary>Gets whether the "desire_farm_lane_bot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesireFarmLaneBot {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "desire_farm_lane_bot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesireFarmLaneBot() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "desire_farm_roshan" field.</summary>
    public const int DesireFarmRoshanFieldNumber = 11;
    private readonly static float DesireFarmRoshanDefaultValue = 0F;

    private float desireFarmRoshan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesireFarmRoshan {
      get { if ((_hasBits0 & 512) != 0) { return desireFarmRoshan_; } else { return DesireFarmRoshanDefaultValue; } }
      set {
        _hasBits0 |= 512;
        desireFarmRoshan_ = value;
      }
    }
    /// <summary>Gets whether the "desire_farm_roshan" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesireFarmRoshan {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "desire_farm_roshan" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesireFarmRoshan() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "execution_time" field.</summary>
    public const int ExecutionTimeFieldNumber = 12;
    private readonly static float ExecutionTimeDefaultValue = 0F;

    private float executionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExecutionTime {
      get { if ((_hasBits0 & 1024) != 0) { return executionTime_; } else { return ExecutionTimeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        executionTime_ = value;
      }
    }
    /// <summary>Gets whether the "execution_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExecutionTime {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "execution_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExecutionTime() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "rune_status" field.</summary>
    public const int RuneStatusFieldNumber = 13;
    private static readonly pb::FieldCodec<uint> _repeated_runeStatus_codec
        = pb::FieldCodec.ForUInt32(104);
    private readonly pbc::RepeatedField<uint> runeStatus_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RuneStatus {
      get { return runeStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTABotDebugInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTABotDebugInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bots_.Equals(other.bots_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesirePushLaneTop, other.DesirePushLaneTop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesirePushLaneMid, other.DesirePushLaneMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesirePushLaneBot, other.DesirePushLaneBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesireDefendLaneTop, other.DesireDefendLaneTop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesireDefendLaneMid, other.DesireDefendLaneMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesireDefendLaneBot, other.DesireDefendLaneBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesireFarmLaneTop, other.DesireFarmLaneTop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesireFarmLaneMid, other.DesireFarmLaneMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesireFarmLaneBot, other.DesireFarmLaneBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesireFarmRoshan, other.DesireFarmRoshan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExecutionTime, other.ExecutionTime)) return false;
      if(!runeStatus_.Equals(other.runeStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bots_.GetHashCode();
      if (HasDesirePushLaneTop) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesirePushLaneTop);
      if (HasDesirePushLaneMid) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesirePushLaneMid);
      if (HasDesirePushLaneBot) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesirePushLaneBot);
      if (HasDesireDefendLaneTop) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesireDefendLaneTop);
      if (HasDesireDefendLaneMid) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesireDefendLaneMid);
      if (HasDesireDefendLaneBot) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesireDefendLaneBot);
      if (HasDesireFarmLaneTop) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesireFarmLaneTop);
      if (HasDesireFarmLaneMid) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesireFarmLaneMid);
      if (HasDesireFarmLaneBot) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesireFarmLaneBot);
      if (HasDesireFarmRoshan) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesireFarmRoshan);
      if (HasExecutionTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExecutionTime);
      hash ^= runeStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      bots_.WriteTo(output, _repeated_bots_codec);
      if (HasDesirePushLaneTop) {
        output.WriteRawTag(21);
        output.WriteFloat(DesirePushLaneTop);
      }
      if (HasDesirePushLaneMid) {
        output.WriteRawTag(29);
        output.WriteFloat(DesirePushLaneMid);
      }
      if (HasDesirePushLaneBot) {
        output.WriteRawTag(37);
        output.WriteFloat(DesirePushLaneBot);
      }
      if (HasDesireDefendLaneTop) {
        output.WriteRawTag(45);
        output.WriteFloat(DesireDefendLaneTop);
      }
      if (HasDesireDefendLaneMid) {
        output.WriteRawTag(53);
        output.WriteFloat(DesireDefendLaneMid);
      }
      if (HasDesireDefendLaneBot) {
        output.WriteRawTag(61);
        output.WriteFloat(DesireDefendLaneBot);
      }
      if (HasDesireFarmLaneTop) {
        output.WriteRawTag(69);
        output.WriteFloat(DesireFarmLaneTop);
      }
      if (HasDesireFarmLaneMid) {
        output.WriteRawTag(77);
        output.WriteFloat(DesireFarmLaneMid);
      }
      if (HasDesireFarmLaneBot) {
        output.WriteRawTag(85);
        output.WriteFloat(DesireFarmLaneBot);
      }
      if (HasDesireFarmRoshan) {
        output.WriteRawTag(93);
        output.WriteFloat(DesireFarmRoshan);
      }
      if (HasExecutionTime) {
        output.WriteRawTag(101);
        output.WriteFloat(ExecutionTime);
      }
      runeStatus_.WriteTo(output, _repeated_runeStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      bots_.WriteTo(ref output, _repeated_bots_codec);
      if (HasDesirePushLaneTop) {
        output.WriteRawTag(21);
        output.WriteFloat(DesirePushLaneTop);
      }
      if (HasDesirePushLaneMid) {
        output.WriteRawTag(29);
        output.WriteFloat(DesirePushLaneMid);
      }
      if (HasDesirePushLaneBot) {
        output.WriteRawTag(37);
        output.WriteFloat(DesirePushLaneBot);
      }
      if (HasDesireDefendLaneTop) {
        output.WriteRawTag(45);
        output.WriteFloat(DesireDefendLaneTop);
      }
      if (HasDesireDefendLaneMid) {
        output.WriteRawTag(53);
        output.WriteFloat(DesireDefendLaneMid);
      }
      if (HasDesireDefendLaneBot) {
        output.WriteRawTag(61);
        output.WriteFloat(DesireDefendLaneBot);
      }
      if (HasDesireFarmLaneTop) {
        output.WriteRawTag(69);
        output.WriteFloat(DesireFarmLaneTop);
      }
      if (HasDesireFarmLaneMid) {
        output.WriteRawTag(77);
        output.WriteFloat(DesireFarmLaneMid);
      }
      if (HasDesireFarmLaneBot) {
        output.WriteRawTag(85);
        output.WriteFloat(DesireFarmLaneBot);
      }
      if (HasDesireFarmRoshan) {
        output.WriteRawTag(93);
        output.WriteFloat(DesireFarmRoshan);
      }
      if (HasExecutionTime) {
        output.WriteRawTag(101);
        output.WriteFloat(ExecutionTime);
      }
      runeStatus_.WriteTo(ref output, _repeated_runeStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bots_.CalculateSize(_repeated_bots_codec);
      if (HasDesirePushLaneTop) {
        size += 1 + 4;
      }
      if (HasDesirePushLaneMid) {
        size += 1 + 4;
      }
      if (HasDesirePushLaneBot) {
        size += 1 + 4;
      }
      if (HasDesireDefendLaneTop) {
        size += 1 + 4;
      }
      if (HasDesireDefendLaneMid) {
        size += 1 + 4;
      }
      if (HasDesireDefendLaneBot) {
        size += 1 + 4;
      }
      if (HasDesireFarmLaneTop) {
        size += 1 + 4;
      }
      if (HasDesireFarmLaneMid) {
        size += 1 + 4;
      }
      if (HasDesireFarmLaneBot) {
        size += 1 + 4;
      }
      if (HasDesireFarmRoshan) {
        size += 1 + 4;
      }
      if (HasExecutionTime) {
        size += 1 + 4;
      }
      size += runeStatus_.CalculateSize(_repeated_runeStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTABotDebugInfo other) {
      if (other == null) {
        return;
      }
      bots_.Add(other.bots_);
      if (other.HasDesirePushLaneTop) {
        DesirePushLaneTop = other.DesirePushLaneTop;
      }
      if (other.HasDesirePushLaneMid) {
        DesirePushLaneMid = other.DesirePushLaneMid;
      }
      if (other.HasDesirePushLaneBot) {
        DesirePushLaneBot = other.DesirePushLaneBot;
      }
      if (other.HasDesireDefendLaneTop) {
        DesireDefendLaneTop = other.DesireDefendLaneTop;
      }
      if (other.HasDesireDefendLaneMid) {
        DesireDefendLaneMid = other.DesireDefendLaneMid;
      }
      if (other.HasDesireDefendLaneBot) {
        DesireDefendLaneBot = other.DesireDefendLaneBot;
      }
      if (other.HasDesireFarmLaneTop) {
        DesireFarmLaneTop = other.DesireFarmLaneTop;
      }
      if (other.HasDesireFarmLaneMid) {
        DesireFarmLaneMid = other.DesireFarmLaneMid;
      }
      if (other.HasDesireFarmLaneBot) {
        DesireFarmLaneBot = other.DesireFarmLaneBot;
      }
      if (other.HasDesireFarmRoshan) {
        DesireFarmRoshan = other.DesireFarmRoshan;
      }
      if (other.HasExecutionTime) {
        ExecutionTime = other.ExecutionTime;
      }
      runeStatus_.Add(other.runeStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bots_.AddEntriesFrom(input, _repeated_bots_codec);
            break;
          }
          case 21: {
            DesirePushLaneTop = input.ReadFloat();
            break;
          }
          case 29: {
            DesirePushLaneMid = input.ReadFloat();
            break;
          }
          case 37: {
            DesirePushLaneBot = input.ReadFloat();
            break;
          }
          case 45: {
            DesireDefendLaneTop = input.ReadFloat();
            break;
          }
          case 53: {
            DesireDefendLaneMid = input.ReadFloat();
            break;
          }
          case 61: {
            DesireDefendLaneBot = input.ReadFloat();
            break;
          }
          case 69: {
            DesireFarmLaneTop = input.ReadFloat();
            break;
          }
          case 77: {
            DesireFarmLaneMid = input.ReadFloat();
            break;
          }
          case 85: {
            DesireFarmLaneBot = input.ReadFloat();
            break;
          }
          case 93: {
            DesireFarmRoshan = input.ReadFloat();
            break;
          }
          case 101: {
            ExecutionTime = input.ReadFloat();
            break;
          }
          case 106:
          case 104: {
            runeStatus_.AddEntriesFrom(input, _repeated_runeStatus_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bots_.AddEntriesFrom(ref input, _repeated_bots_codec);
            break;
          }
          case 21: {
            DesirePushLaneTop = input.ReadFloat();
            break;
          }
          case 29: {
            DesirePushLaneMid = input.ReadFloat();
            break;
          }
          case 37: {
            DesirePushLaneBot = input.ReadFloat();
            break;
          }
          case 45: {
            DesireDefendLaneTop = input.ReadFloat();
            break;
          }
          case 53: {
            DesireDefendLaneMid = input.ReadFloat();
            break;
          }
          case 61: {
            DesireDefendLaneBot = input.ReadFloat();
            break;
          }
          case 69: {
            DesireFarmLaneTop = input.ReadFloat();
            break;
          }
          case 77: {
            DesireFarmLaneMid = input.ReadFloat();
            break;
          }
          case 85: {
            DesireFarmLaneBot = input.ReadFloat();
            break;
          }
          case 93: {
            DesireFarmRoshan = input.ReadFloat();
            break;
          }
          case 101: {
            ExecutionTime = input.ReadFloat();
            break;
          }
          case 106:
          case 104: {
            runeStatus_.AddEntriesFrom(ref input, _repeated_runeStatus_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTABotDebugInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Bot : pb::IMessage<Bot>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Bot> _parser = new pb::MessageParser<Bot>(() => new Bot());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Bot> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bot() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bot(Bot other) : this() {
          _hasBits0 = other._hasBits0;
          playerOwnerId_ = other.playerOwnerId_;
          heroId_ = other.heroId_;
          difficulty_ = other.difficulty_;
          powerCurrent_ = other.powerCurrent_;
          powerMax_ = other.powerMax_;
          moveTargetX_ = other.moveTargetX_;
          moveTargetY_ = other.moveTargetY_;
          moveTargetZ_ = other.moveTargetZ_;
          activeModeId_ = other.activeModeId_;
          executionTime_ = other.executionTime_;
          modes_ = other.modes_.Clone();
          action_ = other.action_ != null ? other.action_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bot Clone() {
          return new Bot(this);
        }

        /// <summary>Field number for the "player_owner_id" field.</summary>
        public const int PlayerOwnerIdFieldNumber = 1;
        private readonly static int PlayerOwnerIdDefaultValue = -1;

        private int playerOwnerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerOwnerId {
          get { if ((_hasBits0 & 1) != 0) { return playerOwnerId_; } else { return PlayerOwnerIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            playerOwnerId_ = value;
          }
        }
        /// <summary>Gets whether the "player_owner_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerOwnerId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_owner_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerOwnerId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 2;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "difficulty" field.</summary>
        public const int DifficultyFieldNumber = 3;
        private readonly static uint DifficultyDefaultValue = 0;

        private uint difficulty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Difficulty {
          get { if ((_hasBits0 & 4) != 0) { return difficulty_; } else { return DifficultyDefaultValue; } }
          set {
            _hasBits0 |= 4;
            difficulty_ = value;
          }
        }
        /// <summary>Gets whether the "difficulty" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDifficulty {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "difficulty" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDifficulty() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "power_current" field.</summary>
        public const int PowerCurrentFieldNumber = 4;
        private readonly static uint PowerCurrentDefaultValue = 0;

        private uint powerCurrent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PowerCurrent {
          get { if ((_hasBits0 & 8) != 0) { return powerCurrent_; } else { return PowerCurrentDefaultValue; } }
          set {
            _hasBits0 |= 8;
            powerCurrent_ = value;
          }
        }
        /// <summary>Gets whether the "power_current" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPowerCurrent {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "power_current" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPowerCurrent() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "power_max" field.</summary>
        public const int PowerMaxFieldNumber = 5;
        private readonly static uint PowerMaxDefaultValue = 0;

        private uint powerMax_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PowerMax {
          get { if ((_hasBits0 & 16) != 0) { return powerMax_; } else { return PowerMaxDefaultValue; } }
          set {
            _hasBits0 |= 16;
            powerMax_ = value;
          }
        }
        /// <summary>Gets whether the "power_max" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPowerMax {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "power_max" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPowerMax() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "move_target_x" field.</summary>
        public const int MoveTargetXFieldNumber = 6;
        private readonly static uint MoveTargetXDefaultValue = 0;

        private uint moveTargetX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MoveTargetX {
          get { if ((_hasBits0 & 32) != 0) { return moveTargetX_; } else { return MoveTargetXDefaultValue; } }
          set {
            _hasBits0 |= 32;
            moveTargetX_ = value;
          }
        }
        /// <summary>Gets whether the "move_target_x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMoveTargetX {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "move_target_x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMoveTargetX() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "move_target_y" field.</summary>
        public const int MoveTargetYFieldNumber = 7;
        private readonly static uint MoveTargetYDefaultValue = 0;

        private uint moveTargetY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MoveTargetY {
          get { if ((_hasBits0 & 64) != 0) { return moveTargetY_; } else { return MoveTargetYDefaultValue; } }
          set {
            _hasBits0 |= 64;
            moveTargetY_ = value;
          }
        }
        /// <summary>Gets whether the "move_target_y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMoveTargetY {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "move_target_y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMoveTargetY() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "move_target_z" field.</summary>
        public const int MoveTargetZFieldNumber = 8;
        private readonly static uint MoveTargetZDefaultValue = 0;

        private uint moveTargetZ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MoveTargetZ {
          get { if ((_hasBits0 & 128) != 0) { return moveTargetZ_; } else { return MoveTargetZDefaultValue; } }
          set {
            _hasBits0 |= 128;
            moveTargetZ_ = value;
          }
        }
        /// <summary>Gets whether the "move_target_z" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMoveTargetZ {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "move_target_z" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMoveTargetZ() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "active_mode_id" field.</summary>
        public const int ActiveModeIdFieldNumber = 9;
        private readonly static uint ActiveModeIdDefaultValue = 0;

        private uint activeModeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActiveModeId {
          get { if ((_hasBits0 & 256) != 0) { return activeModeId_; } else { return ActiveModeIdDefaultValue; } }
          set {
            _hasBits0 |= 256;
            activeModeId_ = value;
          }
        }
        /// <summary>Gets whether the "active_mode_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActiveModeId {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "active_mode_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActiveModeId() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "execution_time" field.</summary>
        public const int ExecutionTimeFieldNumber = 10;
        private readonly static float ExecutionTimeDefaultValue = 0F;

        private float executionTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ExecutionTime {
          get { if ((_hasBits0 & 512) != 0) { return executionTime_; } else { return ExecutionTimeDefaultValue; } }
          set {
            _hasBits0 |= 512;
            executionTime_ = value;
          }
        }
        /// <summary>Gets whether the "execution_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExecutionTime {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "execution_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExecutionTime() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "modes" field.</summary>
        public const int ModesFieldNumber = 11;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Mode> _repeated_modes_codec
            = pb::FieldCodec.ForMessage(90, global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Mode.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Mode> modes_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Mode>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Mode> Modes {
          get { return modes_; }
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 12;
        private global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Action action_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Action Action {
          get { return action_; }
          set {
            action_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Bot);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Bot other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerOwnerId != other.PlayerOwnerId) return false;
          if (HeroId != other.HeroId) return false;
          if (Difficulty != other.Difficulty) return false;
          if (PowerCurrent != other.PowerCurrent) return false;
          if (PowerMax != other.PowerMax) return false;
          if (MoveTargetX != other.MoveTargetX) return false;
          if (MoveTargetY != other.MoveTargetY) return false;
          if (MoveTargetZ != other.MoveTargetZ) return false;
          if (ActiveModeId != other.ActiveModeId) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExecutionTime, other.ExecutionTime)) return false;
          if(!modes_.Equals(other.modes_)) return false;
          if (!object.Equals(Action, other.Action)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPlayerOwnerId) hash ^= PlayerOwnerId.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasDifficulty) hash ^= Difficulty.GetHashCode();
          if (HasPowerCurrent) hash ^= PowerCurrent.GetHashCode();
          if (HasPowerMax) hash ^= PowerMax.GetHashCode();
          if (HasMoveTargetX) hash ^= MoveTargetX.GetHashCode();
          if (HasMoveTargetY) hash ^= MoveTargetY.GetHashCode();
          if (HasMoveTargetZ) hash ^= MoveTargetZ.GetHashCode();
          if (HasActiveModeId) hash ^= ActiveModeId.GetHashCode();
          if (HasExecutionTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExecutionTime);
          hash ^= modes_.GetHashCode();
          if (action_ != null) hash ^= Action.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPlayerOwnerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerOwnerId);
          }
          if (HasHeroId) {
            output.WriteRawTag(16);
            output.WriteInt32(HeroId);
          }
          if (HasDifficulty) {
            output.WriteRawTag(24);
            output.WriteUInt32(Difficulty);
          }
          if (HasPowerCurrent) {
            output.WriteRawTag(32);
            output.WriteUInt32(PowerCurrent);
          }
          if (HasPowerMax) {
            output.WriteRawTag(40);
            output.WriteUInt32(PowerMax);
          }
          if (HasMoveTargetX) {
            output.WriteRawTag(48);
            output.WriteUInt32(MoveTargetX);
          }
          if (HasMoveTargetY) {
            output.WriteRawTag(56);
            output.WriteUInt32(MoveTargetY);
          }
          if (HasMoveTargetZ) {
            output.WriteRawTag(64);
            output.WriteUInt32(MoveTargetZ);
          }
          if (HasActiveModeId) {
            output.WriteRawTag(72);
            output.WriteUInt32(ActiveModeId);
          }
          if (HasExecutionTime) {
            output.WriteRawTag(85);
            output.WriteFloat(ExecutionTime);
          }
          modes_.WriteTo(output, _repeated_modes_codec);
          if (action_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(Action);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPlayerOwnerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerOwnerId);
          }
          if (HasHeroId) {
            output.WriteRawTag(16);
            output.WriteInt32(HeroId);
          }
          if (HasDifficulty) {
            output.WriteRawTag(24);
            output.WriteUInt32(Difficulty);
          }
          if (HasPowerCurrent) {
            output.WriteRawTag(32);
            output.WriteUInt32(PowerCurrent);
          }
          if (HasPowerMax) {
            output.WriteRawTag(40);
            output.WriteUInt32(PowerMax);
          }
          if (HasMoveTargetX) {
            output.WriteRawTag(48);
            output.WriteUInt32(MoveTargetX);
          }
          if (HasMoveTargetY) {
            output.WriteRawTag(56);
            output.WriteUInt32(MoveTargetY);
          }
          if (HasMoveTargetZ) {
            output.WriteRawTag(64);
            output.WriteUInt32(MoveTargetZ);
          }
          if (HasActiveModeId) {
            output.WriteRawTag(72);
            output.WriteUInt32(ActiveModeId);
          }
          if (HasExecutionTime) {
            output.WriteRawTag(85);
            output.WriteFloat(ExecutionTime);
          }
          modes_.WriteTo(ref output, _repeated_modes_codec);
          if (action_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(Action);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPlayerOwnerId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerOwnerId);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasDifficulty) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Difficulty);
          }
          if (HasPowerCurrent) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PowerCurrent);
          }
          if (HasPowerMax) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PowerMax);
          }
          if (HasMoveTargetX) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoveTargetX);
          }
          if (HasMoveTargetY) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoveTargetY);
          }
          if (HasMoveTargetZ) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoveTargetZ);
          }
          if (HasActiveModeId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveModeId);
          }
          if (HasExecutionTime) {
            size += 1 + 4;
          }
          size += modes_.CalculateSize(_repeated_modes_codec);
          if (action_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Bot other) {
          if (other == null) {
            return;
          }
          if (other.HasPlayerOwnerId) {
            PlayerOwnerId = other.PlayerOwnerId;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasDifficulty) {
            Difficulty = other.Difficulty;
          }
          if (other.HasPowerCurrent) {
            PowerCurrent = other.PowerCurrent;
          }
          if (other.HasPowerMax) {
            PowerMax = other.PowerMax;
          }
          if (other.HasMoveTargetX) {
            MoveTargetX = other.MoveTargetX;
          }
          if (other.HasMoveTargetY) {
            MoveTargetY = other.MoveTargetY;
          }
          if (other.HasMoveTargetZ) {
            MoveTargetZ = other.MoveTargetZ;
          }
          if (other.HasActiveModeId) {
            ActiveModeId = other.ActiveModeId;
          }
          if (other.HasExecutionTime) {
            ExecutionTime = other.ExecutionTime;
          }
          modes_.Add(other.modes_);
          if (other.action_ != null) {
            if (action_ == null) {
              Action = new global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Action();
            }
            Action.MergeFrom(other.Action);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerOwnerId = input.ReadInt32();
                break;
              }
              case 16: {
                HeroId = input.ReadInt32();
                break;
              }
              case 24: {
                Difficulty = input.ReadUInt32();
                break;
              }
              case 32: {
                PowerCurrent = input.ReadUInt32();
                break;
              }
              case 40: {
                PowerMax = input.ReadUInt32();
                break;
              }
              case 48: {
                MoveTargetX = input.ReadUInt32();
                break;
              }
              case 56: {
                MoveTargetY = input.ReadUInt32();
                break;
              }
              case 64: {
                MoveTargetZ = input.ReadUInt32();
                break;
              }
              case 72: {
                ActiveModeId = input.ReadUInt32();
                break;
              }
              case 85: {
                ExecutionTime = input.ReadFloat();
                break;
              }
              case 90: {
                modes_.AddEntriesFrom(input, _repeated_modes_codec);
                break;
              }
              case 98: {
                if (action_ == null) {
                  Action = new global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Action();
                }
                input.ReadMessage(Action);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerOwnerId = input.ReadInt32();
                break;
              }
              case 16: {
                HeroId = input.ReadInt32();
                break;
              }
              case 24: {
                Difficulty = input.ReadUInt32();
                break;
              }
              case 32: {
                PowerCurrent = input.ReadUInt32();
                break;
              }
              case 40: {
                PowerMax = input.ReadUInt32();
                break;
              }
              case 48: {
                MoveTargetX = input.ReadUInt32();
                break;
              }
              case 56: {
                MoveTargetY = input.ReadUInt32();
                break;
              }
              case 64: {
                MoveTargetZ = input.ReadUInt32();
                break;
              }
              case 72: {
                ActiveModeId = input.ReadUInt32();
                break;
              }
              case 85: {
                ExecutionTime = input.ReadFloat();
                break;
              }
              case 90: {
                modes_.AddEntriesFrom(ref input, _repeated_modes_codec);
                break;
              }
              case 98: {
                if (action_ == null) {
                  Action = new global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Types.Action();
                }
                input.ReadMessage(Action);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Bot message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Mode : pb::IMessage<Mode>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Mode> _parser = new pb::MessageParser<Mode>(() => new Mode());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Mode> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Mode() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Mode(Mode other) : this() {
              _hasBits0 = other._hasBits0;
              modeId_ = other.modeId_;
              desire_ = other.desire_;
              targetEntity_ = other.targetEntity_;
              targetX_ = other.targetX_;
              targetY_ = other.targetY_;
              targetZ_ = other.targetZ_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Mode Clone() {
              return new Mode(this);
            }

            /// <summary>Field number for the "mode_id" field.</summary>
            public const int ModeIdFieldNumber = 1;
            private readonly static uint ModeIdDefaultValue = 0;

            private uint modeId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ModeId {
              get { if ((_hasBits0 & 1) != 0) { return modeId_; } else { return ModeIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                modeId_ = value;
              }
            }
            /// <summary>Gets whether the "mode_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasModeId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "mode_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearModeId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "desire" field.</summary>
            public const int DesireFieldNumber = 2;
            private readonly static float DesireDefaultValue = 0F;

            private float desire_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Desire {
              get { if ((_hasBits0 & 2) != 0) { return desire_; } else { return DesireDefaultValue; } }
              set {
                _hasBits0 |= 2;
                desire_ = value;
              }
            }
            /// <summary>Gets whether the "desire" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDesire {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "desire" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDesire() {
              _hasBits0 &= ~2;
            }

            /// <summary>Field number for the "target_entity" field.</summary>
            public const int TargetEntityFieldNumber = 3;
            private readonly static int TargetEntityDefaultValue = -1;

            private int targetEntity_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int TargetEntity {
              get { if ((_hasBits0 & 4) != 0) { return targetEntity_; } else { return TargetEntityDefaultValue; } }
              set {
                _hasBits0 |= 4;
                targetEntity_ = value;
              }
            }
            /// <summary>Gets whether the "target_entity" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTargetEntity {
              get { return (_hasBits0 & 4) != 0; }
            }
            /// <summary>Clears the value of the "target_entity" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTargetEntity() {
              _hasBits0 &= ~4;
            }

            /// <summary>Field number for the "target_x" field.</summary>
            public const int TargetXFieldNumber = 4;
            private readonly static uint TargetXDefaultValue = 0;

            private uint targetX_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TargetX {
              get { if ((_hasBits0 & 8) != 0) { return targetX_; } else { return TargetXDefaultValue; } }
              set {
                _hasBits0 |= 8;
                targetX_ = value;
              }
            }
            /// <summary>Gets whether the "target_x" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTargetX {
              get { return (_hasBits0 & 8) != 0; }
            }
            /// <summary>Clears the value of the "target_x" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTargetX() {
              _hasBits0 &= ~8;
            }

            /// <summary>Field number for the "target_y" field.</summary>
            public const int TargetYFieldNumber = 5;
            private readonly static uint TargetYDefaultValue = 0;

            private uint targetY_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TargetY {
              get { if ((_hasBits0 & 16) != 0) { return targetY_; } else { return TargetYDefaultValue; } }
              set {
                _hasBits0 |= 16;
                targetY_ = value;
              }
            }
            /// <summary>Gets whether the "target_y" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTargetY {
              get { return (_hasBits0 & 16) != 0; }
            }
            /// <summary>Clears the value of the "target_y" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTargetY() {
              _hasBits0 &= ~16;
            }

            /// <summary>Field number for the "target_z" field.</summary>
            public const int TargetZFieldNumber = 6;
            private readonly static uint TargetZDefaultValue = 0;

            private uint targetZ_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TargetZ {
              get { if ((_hasBits0 & 32) != 0) { return targetZ_; } else { return TargetZDefaultValue; } }
              set {
                _hasBits0 |= 32;
                targetZ_ = value;
              }
            }
            /// <summary>Gets whether the "target_z" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTargetZ {
              get { return (_hasBits0 & 32) != 0; }
            }
            /// <summary>Clears the value of the "target_z" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTargetZ() {
              _hasBits0 &= ~32;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Mode);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Mode other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ModeId != other.ModeId) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Desire, other.Desire)) return false;
              if (TargetEntity != other.TargetEntity) return false;
              if (TargetX != other.TargetX) return false;
              if (TargetY != other.TargetY) return false;
              if (TargetZ != other.TargetZ) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasModeId) hash ^= ModeId.GetHashCode();
              if (HasDesire) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Desire);
              if (HasTargetEntity) hash ^= TargetEntity.GetHashCode();
              if (HasTargetX) hash ^= TargetX.GetHashCode();
              if (HasTargetY) hash ^= TargetY.GetHashCode();
              if (HasTargetZ) hash ^= TargetZ.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasModeId) {
                output.WriteRawTag(8);
                output.WriteUInt32(ModeId);
              }
              if (HasDesire) {
                output.WriteRawTag(21);
                output.WriteFloat(Desire);
              }
              if (HasTargetEntity) {
                output.WriteRawTag(24);
                output.WriteInt32(TargetEntity);
              }
              if (HasTargetX) {
                output.WriteRawTag(32);
                output.WriteUInt32(TargetX);
              }
              if (HasTargetY) {
                output.WriteRawTag(40);
                output.WriteUInt32(TargetY);
              }
              if (HasTargetZ) {
                output.WriteRawTag(48);
                output.WriteUInt32(TargetZ);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasModeId) {
                output.WriteRawTag(8);
                output.WriteUInt32(ModeId);
              }
              if (HasDesire) {
                output.WriteRawTag(21);
                output.WriteFloat(Desire);
              }
              if (HasTargetEntity) {
                output.WriteRawTag(24);
                output.WriteInt32(TargetEntity);
              }
              if (HasTargetX) {
                output.WriteRawTag(32);
                output.WriteUInt32(TargetX);
              }
              if (HasTargetY) {
                output.WriteRawTag(40);
                output.WriteUInt32(TargetY);
              }
              if (HasTargetZ) {
                output.WriteRawTag(48);
                output.WriteUInt32(TargetZ);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasModeId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ModeId);
              }
              if (HasDesire) {
                size += 1 + 4;
              }
              if (HasTargetEntity) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntity);
              }
              if (HasTargetX) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetX);
              }
              if (HasTargetY) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetY);
              }
              if (HasTargetZ) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetZ);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Mode other) {
              if (other == null) {
                return;
              }
              if (other.HasModeId) {
                ModeId = other.ModeId;
              }
              if (other.HasDesire) {
                Desire = other.Desire;
              }
              if (other.HasTargetEntity) {
                TargetEntity = other.TargetEntity;
              }
              if (other.HasTargetX) {
                TargetX = other.TargetX;
              }
              if (other.HasTargetY) {
                TargetY = other.TargetY;
              }
              if (other.HasTargetZ) {
                TargetZ = other.TargetZ;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    ModeId = input.ReadUInt32();
                    break;
                  }
                  case 21: {
                    Desire = input.ReadFloat();
                    break;
                  }
                  case 24: {
                    TargetEntity = input.ReadInt32();
                    break;
                  }
                  case 32: {
                    TargetX = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    TargetY = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    TargetZ = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    ModeId = input.ReadUInt32();
                    break;
                  }
                  case 21: {
                    Desire = input.ReadFloat();
                    break;
                  }
                  case 24: {
                    TargetEntity = input.ReadInt32();
                    break;
                  }
                  case 32: {
                    TargetX = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    TargetY = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    TargetZ = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class Action : pb::IMessage<Action>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Action> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTABotDebugInfo.Types.Bot.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Action() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Action(Action other) : this() {
              _hasBits0 = other._hasBits0;
              actionId_ = other.actionId_;
              actionTarget_ = other.actionTarget_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Action Clone() {
              return new Action(this);
            }

            /// <summary>Field number for the "action_id" field.</summary>
            public const int ActionIdFieldNumber = 1;
            private readonly static uint ActionIdDefaultValue = 0;

            private uint actionId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ActionId {
              get { if ((_hasBits0 & 1) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                actionId_ = value;
              }
            }
            /// <summary>Gets whether the "action_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasActionId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "action_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearActionId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "action_target" field.</summary>
            public const int ActionTargetFieldNumber = 2;
            private readonly static string ActionTargetDefaultValue = "";

            private string actionTarget_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ActionTarget {
              get { return actionTarget_ ?? ActionTargetDefaultValue; }
              set {
                actionTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "action_target" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasActionTarget {
              get { return actionTarget_ != null; }
            }
            /// <summary>Clears the value of the "action_target" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearActionTarget() {
              actionTarget_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Action);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Action other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ActionId != other.ActionId) return false;
              if (ActionTarget != other.ActionTarget) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasActionId) hash ^= ActionId.GetHashCode();
              if (HasActionTarget) hash ^= ActionTarget.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasActionId) {
                output.WriteRawTag(8);
                output.WriteUInt32(ActionId);
              }
              if (HasActionTarget) {
                output.WriteRawTag(18);
                output.WriteString(ActionTarget);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasActionId) {
                output.WriteRawTag(8);
                output.WriteUInt32(ActionId);
              }
              if (HasActionTarget) {
                output.WriteRawTag(18);
                output.WriteString(ActionTarget);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasActionId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionId);
              }
              if (HasActionTarget) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionTarget);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Action other) {
              if (other == null) {
                return;
              }
              if (other.HasActionId) {
                ActionId = other.ActionId;
              }
              if (other.HasActionTarget) {
                ActionTarget = other.ActionTarget;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    ActionId = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    ActionTarget = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    ActionId = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    ActionTarget = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CMsgSuccessfulHero : pb::IMessage<CMsgSuccessfulHero>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSuccessfulHero> _parser = new pb::MessageParser<CMsgSuccessfulHero>(() => new CMsgSuccessfulHero());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSuccessfulHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSuccessfulHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSuccessfulHero(CMsgSuccessfulHero other) : this() {
      _hasBits0 = other._hasBits0;
      heroId_ = other.heroId_;
      winPercent_ = other.winPercent_;
      longestStreak_ = other.longestStreak_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSuccessfulHero Clone() {
      return new CMsgSuccessfulHero(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "win_percent" field.</summary>
    public const int WinPercentFieldNumber = 2;
    private readonly static float WinPercentDefaultValue = 0F;

    private float winPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WinPercent {
      get { if ((_hasBits0 & 2) != 0) { return winPercent_; } else { return WinPercentDefaultValue; } }
      set {
        _hasBits0 |= 2;
        winPercent_ = value;
      }
    }
    /// <summary>Gets whether the "win_percent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWinPercent {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "win_percent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWinPercent() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "longest_streak" field.</summary>
    public const int LongestStreakFieldNumber = 3;
    private readonly static uint LongestStreakDefaultValue = 0;

    private uint longestStreak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LongestStreak {
      get { if ((_hasBits0 & 4) != 0) { return longestStreak_; } else { return LongestStreakDefaultValue; } }
      set {
        _hasBits0 |= 4;
        longestStreak_ = value;
      }
    }
    /// <summary>Gets whether the "longest_streak" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLongestStreak {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "longest_streak" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLongestStreak() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSuccessfulHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSuccessfulHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WinPercent, other.WinPercent)) return false;
      if (LongestStreak != other.LongestStreak) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasWinPercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WinPercent);
      if (HasLongestStreak) hash ^= LongestStreak.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeroId) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (HasWinPercent) {
        output.WriteRawTag(21);
        output.WriteFloat(WinPercent);
      }
      if (HasLongestStreak) {
        output.WriteRawTag(24);
        output.WriteUInt32(LongestStreak);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeroId) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (HasWinPercent) {
        output.WriteRawTag(21);
        output.WriteFloat(WinPercent);
      }
      if (HasLongestStreak) {
        output.WriteRawTag(24);
        output.WriteUInt32(LongestStreak);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasWinPercent) {
        size += 1 + 4;
      }
      if (HasLongestStreak) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LongestStreak);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSuccessfulHero other) {
      if (other == null) {
        return;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasWinPercent) {
        WinPercent = other.WinPercent;
      }
      if (other.HasLongestStreak) {
        LongestStreak = other.LongestStreak;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 21: {
            WinPercent = input.ReadFloat();
            break;
          }
          case 24: {
            LongestStreak = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 21: {
            WinPercent = input.ReadFloat();
            break;
          }
          case 24: {
            LongestStreak = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgRecentMatchInfo : pb::IMessage<CMsgRecentMatchInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgRecentMatchInfo> _parser = new pb::MessageParser<CMsgRecentMatchInfo>(() => new CMsgRecentMatchInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgRecentMatchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgRecentMatchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgRecentMatchInfo(CMsgRecentMatchInfo other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      gameMode_ = other.gameMode_;
      kills_ = other.kills_;
      deaths_ = other.deaths_;
      assists_ = other.assists_;
      duration_ = other.duration_;
      playerSlot_ = other.playerSlot_;
      matchOutcome_ = other.matchOutcome_;
      timestamp_ = other.timestamp_;
      lobbyType_ = other.lobbyType_;
      teamNumber_ = other.teamNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgRecentMatchInfo Clone() {
      return new CMsgRecentMatchInfo(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.DOTA_GameMode GameModeDefaultValue = global::Steam.Protos.Dota2.DOTA_GameMode.None;

    private global::Steam.Protos.Dota2.DOTA_GameMode gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GameMode GameMode {
      get { if ((_hasBits0 & 2) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameMode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameMode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "kills" field.</summary>
    public const int KillsFieldNumber = 3;
    private readonly static uint KillsDefaultValue = 0;

    private uint kills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kills {
      get { if ((_hasBits0 & 4) != 0) { return kills_; } else { return KillsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        kills_ = value;
      }
    }
    /// <summary>Gets whether the "kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKills {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKills() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "deaths" field.</summary>
    public const int DeathsFieldNumber = 4;
    private readonly static uint DeathsDefaultValue = 0;

    private uint deaths_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deaths {
      get { if ((_hasBits0 & 8) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        deaths_ = value;
      }
    }
    /// <summary>Gets whether the "deaths" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeaths {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "deaths" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeaths() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "assists" field.</summary>
    public const int AssistsFieldNumber = 5;
    private readonly static uint AssistsDefaultValue = 0;

    private uint assists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Assists {
      get { if ((_hasBits0 & 16) != 0) { return assists_; } else { return AssistsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        assists_ = value;
      }
    }
    /// <summary>Gets whether the "assists" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssists {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "assists" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssists() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 6;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { if ((_hasBits0 & 32) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 32;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "player_slot" field.</summary>
    public const int PlayerSlotFieldNumber = 7;
    private readonly static uint PlayerSlotDefaultValue = 0;

    private uint playerSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerSlot {
      get { if ((_hasBits0 & 64) != 0) { return playerSlot_; } else { return PlayerSlotDefaultValue; } }
      set {
        _hasBits0 |= 64;
        playerSlot_ = value;
      }
    }
    /// <summary>Gets whether the "player_slot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerSlot {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "player_slot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerSlot() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "match_outcome" field.</summary>
    public const int MatchOutcomeFieldNumber = 8;
    private readonly static global::Steam.Protos.Dota2.EMatchOutcome MatchOutcomeDefaultValue = global::Steam.Protos.Dota2.EMatchOutcome.KEmatchOutcomeUnknown;

    private global::Steam.Protos.Dota2.EMatchOutcome matchOutcome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EMatchOutcome MatchOutcome {
      get { if ((_hasBits0 & 128) != 0) { return matchOutcome_; } else { return MatchOutcomeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        matchOutcome_ = value;
      }
    }
    /// <summary>Gets whether the "match_outcome" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchOutcome {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "match_outcome" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchOutcome() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 9;
    private readonly static uint TimestampDefaultValue = 0;

    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { if ((_hasBits0 & 256) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 256;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "lobby_type" field.</summary>
    public const int LobbyTypeFieldNumber = 10;
    private readonly static uint LobbyTypeDefaultValue = 0;

    private uint lobbyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyType {
      get { if ((_hasBits0 & 512) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        lobbyType_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyType {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "lobby_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyType() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "team_number" field.</summary>
    public const int TeamNumberFieldNumber = 11;
    private readonly static uint TeamNumberDefaultValue = 0;

    private uint teamNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamNumber {
      get { if ((_hasBits0 & 1024) != 0) { return teamNumber_; } else { return TeamNumberDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        teamNumber_ = value;
      }
    }
    /// <summary>Gets whether the "team_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamNumber {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "team_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamNumber() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgRecentMatchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgRecentMatchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (GameMode != other.GameMode) return false;
      if (Kills != other.Kills) return false;
      if (Deaths != other.Deaths) return false;
      if (Assists != other.Assists) return false;
      if (Duration != other.Duration) return false;
      if (PlayerSlot != other.PlayerSlot) return false;
      if (MatchOutcome != other.MatchOutcome) return false;
      if (Timestamp != other.Timestamp) return false;
      if (LobbyType != other.LobbyType) return false;
      if (TeamNumber != other.TeamNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasKills) hash ^= Kills.GetHashCode();
      if (HasDeaths) hash ^= Deaths.GetHashCode();
      if (HasAssists) hash ^= Assists.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasPlayerSlot) hash ^= PlayerSlot.GetHashCode();
      if (HasMatchOutcome) hash ^= MatchOutcome.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasLobbyType) hash ^= LobbyType.GetHashCode();
      if (HasTeamNumber) hash ^= TeamNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasGameMode) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameMode);
      }
      if (HasKills) {
        output.WriteRawTag(24);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(32);
        output.WriteUInt32(Deaths);
      }
      if (HasAssists) {
        output.WriteRawTag(40);
        output.WriteUInt32(Assists);
      }
      if (HasDuration) {
        output.WriteRawTag(48);
        output.WriteUInt32(Duration);
      }
      if (HasPlayerSlot) {
        output.WriteRawTag(56);
        output.WriteUInt32(PlayerSlot);
      }
      if (HasMatchOutcome) {
        output.WriteRawTag(64);
        output.WriteEnum((int) MatchOutcome);
      }
      if (HasTimestamp) {
        output.WriteRawTag(72);
        output.WriteUInt32(Timestamp);
      }
      if (HasLobbyType) {
        output.WriteRawTag(80);
        output.WriteUInt32(LobbyType);
      }
      if (HasTeamNumber) {
        output.WriteRawTag(88);
        output.WriteUInt32(TeamNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasGameMode) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameMode);
      }
      if (HasKills) {
        output.WriteRawTag(24);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(32);
        output.WriteUInt32(Deaths);
      }
      if (HasAssists) {
        output.WriteRawTag(40);
        output.WriteUInt32(Assists);
      }
      if (HasDuration) {
        output.WriteRawTag(48);
        output.WriteUInt32(Duration);
      }
      if (HasPlayerSlot) {
        output.WriteRawTag(56);
        output.WriteUInt32(PlayerSlot);
      }
      if (HasMatchOutcome) {
        output.WriteRawTag(64);
        output.WriteEnum((int) MatchOutcome);
      }
      if (HasTimestamp) {
        output.WriteRawTag(72);
        output.WriteUInt32(Timestamp);
      }
      if (HasLobbyType) {
        output.WriteRawTag(80);
        output.WriteUInt32(LobbyType);
      }
      if (HasTeamNumber) {
        output.WriteRawTag(88);
        output.WriteUInt32(TeamNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasGameMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (HasKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
      }
      if (HasDeaths) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
      }
      if (HasAssists) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasPlayerSlot) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
      }
      if (HasMatchOutcome) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchOutcome);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (HasLobbyType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LobbyType);
      }
      if (HasTeamNumber) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgRecentMatchInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasKills) {
        Kills = other.Kills;
      }
      if (other.HasDeaths) {
        Deaths = other.Deaths;
      }
      if (other.HasAssists) {
        Assists = other.Assists;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasPlayerSlot) {
        PlayerSlot = other.PlayerSlot;
      }
      if (other.HasMatchOutcome) {
        MatchOutcome = other.MatchOutcome;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasLobbyType) {
        LobbyType = other.LobbyType;
      }
      if (other.HasTeamNumber) {
        TeamNumber = other.TeamNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            GameMode = (global::Steam.Protos.Dota2.DOTA_GameMode) input.ReadEnum();
            break;
          }
          case 24: {
            Kills = input.ReadUInt32();
            break;
          }
          case 32: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 40: {
            Assists = input.ReadUInt32();
            break;
          }
          case 48: {
            Duration = input.ReadUInt32();
            break;
          }
          case 56: {
            PlayerSlot = input.ReadUInt32();
            break;
          }
          case 64: {
            MatchOutcome = (global::Steam.Protos.Dota2.EMatchOutcome) input.ReadEnum();
            break;
          }
          case 72: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 80: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 88: {
            TeamNumber = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            GameMode = (global::Steam.Protos.Dota2.DOTA_GameMode) input.ReadEnum();
            break;
          }
          case 24: {
            Kills = input.ReadUInt32();
            break;
          }
          case 32: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 40: {
            Assists = input.ReadUInt32();
            break;
          }
          case 48: {
            Duration = input.ReadUInt32();
            break;
          }
          case 56: {
            PlayerSlot = input.ReadUInt32();
            break;
          }
          case 64: {
            MatchOutcome = (global::Steam.Protos.Dota2.EMatchOutcome) input.ReadEnum();
            break;
          }
          case 72: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 80: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 88: {
            TeamNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgMatchTips : pb::IMessage<CMsgMatchTips>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgMatchTips> _parser = new pb::MessageParser<CMsgMatchTips>(() => new CMsgMatchTips());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgMatchTips> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchTips() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchTips(CMsgMatchTips other) : this() {
      tips_ = other.tips_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchTips Clone() {
      return new CMsgMatchTips(this);
    }

    /// <summary>Field number for the "tips" field.</summary>
    public const int TipsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgMatchTips.Types.SingleTip> _repeated_tips_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgMatchTips.Types.SingleTip.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchTips.Types.SingleTip> tips_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchTips.Types.SingleTip>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchTips.Types.SingleTip> Tips {
      get { return tips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgMatchTips);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgMatchTips other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tips_.Equals(other.tips_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tips_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tips_.WriteTo(output, _repeated_tips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tips_.WriteTo(ref output, _repeated_tips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tips_.CalculateSize(_repeated_tips_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgMatchTips other) {
      if (other == null) {
        return;
      }
      tips_.Add(other.tips_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            tips_.AddEntriesFrom(input, _repeated_tips_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            tips_.AddEntriesFrom(ref input, _repeated_tips_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgMatchTips message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SingleTip : pb::IMessage<SingleTip>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SingleTip> _parser = new pb::MessageParser<SingleTip>(() => new SingleTip());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SingleTip> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgMatchTips.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingleTip() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingleTip(SingleTip other) : this() {
          _hasBits0 = other._hasBits0;
          sourceAccountId_ = other.sourceAccountId_;
          targetAccountId_ = other.targetAccountId_;
          tipAmount_ = other.tipAmount_;
          eventId_ = other.eventId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingleTip Clone() {
          return new SingleTip(this);
        }

        /// <summary>Field number for the "source_account_id" field.</summary>
        public const int SourceAccountIdFieldNumber = 1;
        private readonly static uint SourceAccountIdDefaultValue = 0;

        private uint sourceAccountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SourceAccountId {
          get { if ((_hasBits0 & 1) != 0) { return sourceAccountId_; } else { return SourceAccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            sourceAccountId_ = value;
          }
        }
        /// <summary>Gets whether the "source_account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSourceAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "source_account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSourceAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "target_account_id" field.</summary>
        public const int TargetAccountIdFieldNumber = 2;
        private readonly static uint TargetAccountIdDefaultValue = 0;

        private uint targetAccountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TargetAccountId {
          get { if ((_hasBits0 & 2) != 0) { return targetAccountId_; } else { return TargetAccountIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            targetAccountId_ = value;
          }
        }
        /// <summary>Gets whether the "target_account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTargetAccountId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "target_account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTargetAccountId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "tip_amount" field.</summary>
        public const int TipAmountFieldNumber = 3;
        private readonly static uint TipAmountDefaultValue = 0;

        private uint tipAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TipAmount {
          get { if ((_hasBits0 & 4) != 0) { return tipAmount_; } else { return TipAmountDefaultValue; } }
          set {
            _hasBits0 |= 4;
            tipAmount_ = value;
          }
        }
        /// <summary>Gets whether the "tip_amount" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTipAmount {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "tip_amount" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTipAmount() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "event_id" field.</summary>
        public const int EventIdFieldNumber = 4;
        private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

        private global::Steam.Protos.Dota2.EEvent eventId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.EEvent EventId {
          get { if ((_hasBits0 & 8) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
          set {
            _hasBits0 |= 8;
            eventId_ = value;
          }
        }
        /// <summary>Gets whether the "event_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEventId {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "event_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEventId() {
          _hasBits0 &= ~8;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SingleTip);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SingleTip other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SourceAccountId != other.SourceAccountId) return false;
          if (TargetAccountId != other.TargetAccountId) return false;
          if (TipAmount != other.TipAmount) return false;
          if (EventId != other.EventId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSourceAccountId) hash ^= SourceAccountId.GetHashCode();
          if (HasTargetAccountId) hash ^= TargetAccountId.GetHashCode();
          if (HasTipAmount) hash ^= TipAmount.GetHashCode();
          if (HasEventId) hash ^= EventId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasSourceAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(SourceAccountId);
          }
          if (HasTargetAccountId) {
            output.WriteRawTag(16);
            output.WriteUInt32(TargetAccountId);
          }
          if (HasTipAmount) {
            output.WriteRawTag(24);
            output.WriteUInt32(TipAmount);
          }
          if (HasEventId) {
            output.WriteRawTag(32);
            output.WriteEnum((int) EventId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasSourceAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(SourceAccountId);
          }
          if (HasTargetAccountId) {
            output.WriteRawTag(16);
            output.WriteUInt32(TargetAccountId);
          }
          if (HasTipAmount) {
            output.WriteRawTag(24);
            output.WriteUInt32(TipAmount);
          }
          if (HasEventId) {
            output.WriteRawTag(32);
            output.WriteEnum((int) EventId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSourceAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceAccountId);
          }
          if (HasTargetAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetAccountId);
          }
          if (HasTipAmount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TipAmount);
          }
          if (HasEventId) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SingleTip other) {
          if (other == null) {
            return;
          }
          if (other.HasSourceAccountId) {
            SourceAccountId = other.SourceAccountId;
          }
          if (other.HasTargetAccountId) {
            TargetAccountId = other.TargetAccountId;
          }
          if (other.HasTipAmount) {
            TipAmount = other.TipAmount;
          }
          if (other.HasEventId) {
            EventId = other.EventId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SourceAccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                TargetAccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                TipAmount = input.ReadUInt32();
                break;
              }
              case 32: {
                EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                SourceAccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                TargetAccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                TipAmount = input.ReadUInt32();
                break;
              }
              case 32: {
                EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgDOTAMatchMinimal : pb::IMessage<CMsgDOTAMatchMinimal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAMatchMinimal> _parser = new pb::MessageParser<CMsgDOTAMatchMinimal>(() => new CMsgDOTAMatchMinimal());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAMatchMinimal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAMatchMinimal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAMatchMinimal(CMsgDOTAMatchMinimal other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      startTime_ = other.startTime_;
      duration_ = other.duration_;
      gameMode_ = other.gameMode_;
      players_ = other.players_.Clone();
      tourney_ = other.tourney_ != null ? other.tourney_.Clone() : null;
      matchOutcome_ = other.matchOutcome_;
      radiantScore_ = other.radiantScore_;
      direScore_ = other.direScore_;
      lobbyType_ = other.lobbyType_;
      isPlayerDraft_ = other.isPlayerDraft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAMatchMinimal Clone() {
      return new CMsgDOTAMatchMinimal(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private readonly static uint StartTimeDefaultValue = 0;

    private uint startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { if ((_hasBits0 & 2) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        startTime_ = value;
      }
    }
    /// <summary>Gets whether the "start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { if ((_hasBits0 & 4) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 4;
    private readonly static global::Steam.Protos.Dota2.DOTA_GameMode GameModeDefaultValue = global::Steam.Protos.Dota2.DOTA_GameMode.None;

    private global::Steam.Protos.Dota2.DOTA_GameMode gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GameMode GameMode {
      get { if ((_hasBits0 & 8) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameMode {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameMode() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "tourney" field.</summary>
    public const int TourneyFieldNumber = 7;
    private global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Tourney tourney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Tourney Tourney {
      get { return tourney_; }
      set {
        tourney_ = value;
      }
    }

    /// <summary>Field number for the "match_outcome" field.</summary>
    public const int MatchOutcomeFieldNumber = 8;
    private readonly static global::Steam.Protos.Dota2.EMatchOutcome MatchOutcomeDefaultValue = global::Steam.Protos.Dota2.EMatchOutcome.KEmatchOutcomeUnknown;

    private global::Steam.Protos.Dota2.EMatchOutcome matchOutcome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EMatchOutcome MatchOutcome {
      get { if ((_hasBits0 & 16) != 0) { return matchOutcome_; } else { return MatchOutcomeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        matchOutcome_ = value;
      }
    }
    /// <summary>Gets whether the "match_outcome" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchOutcome {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "match_outcome" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchOutcome() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "radiant_score" field.</summary>
    public const int RadiantScoreFieldNumber = 9;
    private readonly static uint RadiantScoreDefaultValue = 0;

    private uint radiantScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantScore {
      get { if ((_hasBits0 & 32) != 0) { return radiantScore_; } else { return RadiantScoreDefaultValue; } }
      set {
        _hasBits0 |= 32;
        radiantScore_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantScore {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "radiant_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantScore() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "dire_score" field.</summary>
    public const int DireScoreFieldNumber = 10;
    private readonly static uint DireScoreDefaultValue = 0;

    private uint direScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireScore {
      get { if ((_hasBits0 & 64) != 0) { return direScore_; } else { return DireScoreDefaultValue; } }
      set {
        _hasBits0 |= 64;
        direScore_ = value;
      }
    }
    /// <summary>Gets whether the "dire_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireScore {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "dire_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireScore() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "lobby_type" field.</summary>
    public const int LobbyTypeFieldNumber = 11;
    private readonly static uint LobbyTypeDefaultValue = 0;

    private uint lobbyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyType {
      get { if ((_hasBits0 & 128) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        lobbyType_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyType {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "lobby_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyType() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "is_player_draft" field.</summary>
    public const int IsPlayerDraftFieldNumber = 12;
    private readonly static bool IsPlayerDraftDefaultValue = false;

    private bool isPlayerDraft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayerDraft {
      get { if ((_hasBits0 & 256) != 0) { return isPlayerDraft_; } else { return IsPlayerDraftDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isPlayerDraft_ = value;
      }
    }
    /// <summary>Gets whether the "is_player_draft" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPlayerDraft {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_player_draft" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPlayerDraft() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAMatchMinimal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAMatchMinimal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (StartTime != other.StartTime) return false;
      if (Duration != other.Duration) return false;
      if (GameMode != other.GameMode) return false;
      if(!players_.Equals(other.players_)) return false;
      if (!object.Equals(Tourney, other.Tourney)) return false;
      if (MatchOutcome != other.MatchOutcome) return false;
      if (RadiantScore != other.RadiantScore) return false;
      if (DireScore != other.DireScore) return false;
      if (LobbyType != other.LobbyType) return false;
      if (IsPlayerDraft != other.IsPlayerDraft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasStartTime) hash ^= StartTime.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      hash ^= players_.GetHashCode();
      if (tourney_ != null) hash ^= Tourney.GetHashCode();
      if (HasMatchOutcome) hash ^= MatchOutcome.GetHashCode();
      if (HasRadiantScore) hash ^= RadiantScore.GetHashCode();
      if (HasDireScore) hash ^= DireScore.GetHashCode();
      if (HasLobbyType) hash ^= LobbyType.GetHashCode();
      if (HasIsPlayerDraft) hash ^= IsPlayerDraft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasStartTime) {
        output.WriteRawTag(21);
        output.WriteFixed32(StartTime);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasGameMode) {
        output.WriteRawTag(32);
        output.WriteEnum((int) GameMode);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (tourney_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Tourney);
      }
      if (HasMatchOutcome) {
        output.WriteRawTag(64);
        output.WriteEnum((int) MatchOutcome);
      }
      if (HasRadiantScore) {
        output.WriteRawTag(72);
        output.WriteUInt32(RadiantScore);
      }
      if (HasDireScore) {
        output.WriteRawTag(80);
        output.WriteUInt32(DireScore);
      }
      if (HasLobbyType) {
        output.WriteRawTag(88);
        output.WriteUInt32(LobbyType);
      }
      if (HasIsPlayerDraft) {
        output.WriteRawTag(96);
        output.WriteBool(IsPlayerDraft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasStartTime) {
        output.WriteRawTag(21);
        output.WriteFixed32(StartTime);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasGameMode) {
        output.WriteRawTag(32);
        output.WriteEnum((int) GameMode);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      if (tourney_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Tourney);
      }
      if (HasMatchOutcome) {
        output.WriteRawTag(64);
        output.WriteEnum((int) MatchOutcome);
      }
      if (HasRadiantScore) {
        output.WriteRawTag(72);
        output.WriteUInt32(RadiantScore);
      }
      if (HasDireScore) {
        output.WriteRawTag(80);
        output.WriteUInt32(DireScore);
      }
      if (HasLobbyType) {
        output.WriteRawTag(88);
        output.WriteUInt32(LobbyType);
      }
      if (HasIsPlayerDraft) {
        output.WriteRawTag(96);
        output.WriteBool(IsPlayerDraft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasStartTime) {
        size += 1 + 4;
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasGameMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (tourney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tourney);
      }
      if (HasMatchOutcome) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchOutcome);
      }
      if (HasRadiantScore) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RadiantScore);
      }
      if (HasDireScore) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DireScore);
      }
      if (HasLobbyType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LobbyType);
      }
      if (HasIsPlayerDraft) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAMatchMinimal other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      players_.Add(other.players_);
      if (other.tourney_ != null) {
        if (tourney_ == null) {
          Tourney = new global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Tourney();
        }
        Tourney.MergeFrom(other.Tourney);
      }
      if (other.HasMatchOutcome) {
        MatchOutcome = other.MatchOutcome;
      }
      if (other.HasRadiantScore) {
        RadiantScore = other.RadiantScore;
      }
      if (other.HasDireScore) {
        DireScore = other.DireScore;
      }
      if (other.HasLobbyType) {
        LobbyType = other.LobbyType;
      }
      if (other.HasIsPlayerDraft) {
        IsPlayerDraft = other.IsPlayerDraft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 21: {
            StartTime = input.ReadFixed32();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 32: {
            GameMode = (global::Steam.Protos.Dota2.DOTA_GameMode) input.ReadEnum();
            break;
          }
          case 50: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 58: {
            if (tourney_ == null) {
              Tourney = new global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Tourney();
            }
            input.ReadMessage(Tourney);
            break;
          }
          case 64: {
            MatchOutcome = (global::Steam.Protos.Dota2.EMatchOutcome) input.ReadEnum();
            break;
          }
          case 72: {
            RadiantScore = input.ReadUInt32();
            break;
          }
          case 80: {
            DireScore = input.ReadUInt32();
            break;
          }
          case 88: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 96: {
            IsPlayerDraft = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 21: {
            StartTime = input.ReadFixed32();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 32: {
            GameMode = (global::Steam.Protos.Dota2.DOTA_GameMode) input.ReadEnum();
            break;
          }
          case 50: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 58: {
            if (tourney_ == null) {
              Tourney = new global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Types.Tourney();
            }
            input.ReadMessage(Tourney);
            break;
          }
          case 64: {
            MatchOutcome = (global::Steam.Protos.Dota2.EMatchOutcome) input.ReadEnum();
            break;
          }
          case 72: {
            RadiantScore = input.ReadUInt32();
            break;
          }
          case 80: {
            DireScore = input.ReadUInt32();
            break;
          }
          case 88: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 96: {
            IsPlayerDraft = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTAMatchMinimal message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          heroId_ = other.heroId_;
          kills_ = other.kills_;
          deaths_ = other.deaths_;
          assists_ = other.assists_;
          items_ = other.items_.Clone();
          playerSlot_ = other.playerSlot_;
          proName_ = other.proName_;
          level_ = other.level_;
          teamNumber_ = other.teamNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 2;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 3;
        private readonly static uint KillsDefaultValue = 0;

        private uint kills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Kills {
          get { if ((_hasBits0 & 4) != 0) { return kills_; } else { return KillsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            kills_ = value;
          }
        }
        /// <summary>Gets whether the "kills" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKills {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "kills" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKills() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "deaths" field.</summary>
        public const int DeathsFieldNumber = 4;
        private readonly static uint DeathsDefaultValue = 0;

        private uint deaths_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Deaths {
          get { if ((_hasBits0 & 8) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
          set {
            _hasBits0 |= 8;
            deaths_ = value;
          }
        }
        /// <summary>Gets whether the "deaths" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeaths {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "deaths" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeaths() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "assists" field.</summary>
        public const int AssistsFieldNumber = 5;
        private readonly static uint AssistsDefaultValue = 0;

        private uint assists_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Assists {
          get { if ((_hasBits0 & 16) != 0) { return assists_; } else { return AssistsDefaultValue; } }
          set {
            _hasBits0 |= 16;
            assists_ = value;
          }
        }
        /// <summary>Gets whether the "assists" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAssists {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "assists" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAssists() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 6;
        private static readonly pb::FieldCodec<int> _repeated_items_codec
            = pb::FieldCodec.ForInt32(48);
        private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Items {
          get { return items_; }
        }

        /// <summary>Field number for the "player_slot" field.</summary>
        public const int PlayerSlotFieldNumber = 7;
        private readonly static uint PlayerSlotDefaultValue = 0;

        private uint playerSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerSlot {
          get { if ((_hasBits0 & 32) != 0) { return playerSlot_; } else { return PlayerSlotDefaultValue; } }
          set {
            _hasBits0 |= 32;
            playerSlot_ = value;
          }
        }
        /// <summary>Gets whether the "player_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerSlot {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "player_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerSlot() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "pro_name" field.</summary>
        public const int ProNameFieldNumber = 8;
        private readonly static string ProNameDefaultValue = "";

        private string proName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProName {
          get { return proName_ ?? ProNameDefaultValue; }
          set {
            proName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "pro_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProName {
          get { return proName_ != null; }
        }
        /// <summary>Clears the value of the "pro_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProName() {
          proName_ = null;
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 9;
        private readonly static uint LevelDefaultValue = 0;

        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { if ((_hasBits0 & 64) != 0) { return level_; } else { return LevelDefaultValue; } }
          set {
            _hasBits0 |= 64;
            level_ = value;
          }
        }
        /// <summary>Gets whether the "level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLevel {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLevel() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "team_number" field.</summary>
        public const int TeamNumberFieldNumber = 10;
        private readonly static global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamNumberDefaultValue = global::Steam.Protos.Dota2.DOTA_GC_TEAM.GoodGuys;

        private global::Steam.Protos.Dota2.DOTA_GC_TEAM teamNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamNumber {
          get { if ((_hasBits0 & 128) != 0) { return teamNumber_; } else { return TeamNumberDefaultValue; } }
          set {
            _hasBits0 |= 128;
            teamNumber_ = value;
          }
        }
        /// <summary>Gets whether the "team_number" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeamNumber {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "team_number" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeamNumber() {
          _hasBits0 &= ~128;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (HeroId != other.HeroId) return false;
          if (Kills != other.Kills) return false;
          if (Deaths != other.Deaths) return false;
          if (Assists != other.Assists) return false;
          if(!items_.Equals(other.items_)) return false;
          if (PlayerSlot != other.PlayerSlot) return false;
          if (ProName != other.ProName) return false;
          if (Level != other.Level) return false;
          if (TeamNumber != other.TeamNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasKills) hash ^= Kills.GetHashCode();
          if (HasDeaths) hash ^= Deaths.GetHashCode();
          if (HasAssists) hash ^= Assists.GetHashCode();
          hash ^= items_.GetHashCode();
          if (HasPlayerSlot) hash ^= PlayerSlot.GetHashCode();
          if (HasProName) hash ^= ProName.GetHashCode();
          if (HasLevel) hash ^= Level.GetHashCode();
          if (HasTeamNumber) hash ^= TeamNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasHeroId) {
            output.WriteRawTag(16);
            output.WriteInt32(HeroId);
          }
          if (HasKills) {
            output.WriteRawTag(24);
            output.WriteUInt32(Kills);
          }
          if (HasDeaths) {
            output.WriteRawTag(32);
            output.WriteUInt32(Deaths);
          }
          if (HasAssists) {
            output.WriteRawTag(40);
            output.WriteUInt32(Assists);
          }
          items_.WriteTo(output, _repeated_items_codec);
          if (HasPlayerSlot) {
            output.WriteRawTag(56);
            output.WriteUInt32(PlayerSlot);
          }
          if (HasProName) {
            output.WriteRawTag(66);
            output.WriteString(ProName);
          }
          if (HasLevel) {
            output.WriteRawTag(72);
            output.WriteUInt32(Level);
          }
          if (HasTeamNumber) {
            output.WriteRawTag(80);
            output.WriteEnum((int) TeamNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasHeroId) {
            output.WriteRawTag(16);
            output.WriteInt32(HeroId);
          }
          if (HasKills) {
            output.WriteRawTag(24);
            output.WriteUInt32(Kills);
          }
          if (HasDeaths) {
            output.WriteRawTag(32);
            output.WriteUInt32(Deaths);
          }
          if (HasAssists) {
            output.WriteRawTag(40);
            output.WriteUInt32(Assists);
          }
          items_.WriteTo(ref output, _repeated_items_codec);
          if (HasPlayerSlot) {
            output.WriteRawTag(56);
            output.WriteUInt32(PlayerSlot);
          }
          if (HasProName) {
            output.WriteRawTag(66);
            output.WriteString(ProName);
          }
          if (HasLevel) {
            output.WriteRawTag(72);
            output.WriteUInt32(Level);
          }
          if (HasTeamNumber) {
            output.WriteRawTag(80);
            output.WriteEnum((int) TeamNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasKills) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
          }
          if (HasDeaths) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
          }
          if (HasAssists) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
          }
          size += items_.CalculateSize(_repeated_items_codec);
          if (HasPlayerSlot) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
          }
          if (HasProName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProName);
          }
          if (HasLevel) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (HasTeamNumber) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TeamNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasKills) {
            Kills = other.Kills;
          }
          if (other.HasDeaths) {
            Deaths = other.Deaths;
          }
          if (other.HasAssists) {
            Assists = other.Assists;
          }
          items_.Add(other.items_);
          if (other.HasPlayerSlot) {
            PlayerSlot = other.PlayerSlot;
          }
          if (other.HasProName) {
            ProName = other.ProName;
          }
          if (other.HasLevel) {
            Level = other.Level;
          }
          if (other.HasTeamNumber) {
            TeamNumber = other.TeamNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                HeroId = input.ReadInt32();
                break;
              }
              case 24: {
                Kills = input.ReadUInt32();
                break;
              }
              case 32: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 40: {
                Assists = input.ReadUInt32();
                break;
              }
              case 50:
              case 48: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 56: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 66: {
                ProName = input.ReadString();
                break;
              }
              case 72: {
                Level = input.ReadUInt32();
                break;
              }
              case 80: {
                TeamNumber = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                HeroId = input.ReadInt32();
                break;
              }
              case 24: {
                Kills = input.ReadUInt32();
                break;
              }
              case 32: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 40: {
                Assists = input.ReadUInt32();
                break;
              }
              case 50:
              case 48: {
                items_.AddEntriesFrom(ref input, _repeated_items_codec);
                break;
              }
              case 56: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 66: {
                ProName = input.ReadString();
                break;
              }
              case 72: {
                Level = input.ReadUInt32();
                break;
              }
              case 80: {
                TeamNumber = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Tourney : pb::IMessage<Tourney>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Tourney> _parser = new pb::MessageParser<Tourney>(() => new Tourney());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tourney> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAMatchMinimal.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tourney() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tourney(Tourney other) : this() {
          _hasBits0 = other._hasBits0;
          leagueId_ = other.leagueId_;
          seriesType_ = other.seriesType_;
          seriesGame_ = other.seriesGame_;
          weekendTourneyTournamentId_ = other.weekendTourneyTournamentId_;
          weekendTourneySeasonTrophyId_ = other.weekendTourneySeasonTrophyId_;
          weekendTourneyDivision_ = other.weekendTourneyDivision_;
          weekendTourneySkillLevel_ = other.weekendTourneySkillLevel_;
          radiantTeamId_ = other.radiantTeamId_;
          radiantTeamName_ = other.radiantTeamName_;
          radiantTeamLogo_ = other.radiantTeamLogo_;
          radiantTeamLogoUrl_ = other.radiantTeamLogoUrl_;
          direTeamId_ = other.direTeamId_;
          direTeamName_ = other.direTeamName_;
          direTeamLogo_ = other.direTeamLogo_;
          direTeamLogoUrl_ = other.direTeamLogoUrl_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tourney Clone() {
          return new Tourney(this);
        }

        /// <summary>Field number for the "league_id" field.</summary>
        public const int LeagueIdFieldNumber = 1;
        private readonly static uint LeagueIdDefaultValue = 0;

        private uint leagueId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeagueId {
          get { if ((_hasBits0 & 1) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            leagueId_ = value;
          }
        }
        /// <summary>Gets whether the "league_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeagueId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "league_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeagueId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "series_type" field.</summary>
        public const int SeriesTypeFieldNumber = 8;
        private readonly static uint SeriesTypeDefaultValue = 0;

        private uint seriesType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SeriesType {
          get { if ((_hasBits0 & 32) != 0) { return seriesType_; } else { return SeriesTypeDefaultValue; } }
          set {
            _hasBits0 |= 32;
            seriesType_ = value;
          }
        }
        /// <summary>Gets whether the "series_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSeriesType {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "series_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSeriesType() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "series_game" field.</summary>
        public const int SeriesGameFieldNumber = 9;
        private readonly static uint SeriesGameDefaultValue = 0;

        private uint seriesGame_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SeriesGame {
          get { if ((_hasBits0 & 64) != 0) { return seriesGame_; } else { return SeriesGameDefaultValue; } }
          set {
            _hasBits0 |= 64;
            seriesGame_ = value;
          }
        }
        /// <summary>Gets whether the "series_game" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSeriesGame {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "series_game" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSeriesGame() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "weekend_tourney_tournament_id" field.</summary>
        public const int WeekendTourneyTournamentIdFieldNumber = 10;
        private readonly static uint WeekendTourneyTournamentIdDefaultValue = 0;

        private uint weekendTourneyTournamentId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WeekendTourneyTournamentId {
          get { if ((_hasBits0 & 128) != 0) { return weekendTourneyTournamentId_; } else { return WeekendTourneyTournamentIdDefaultValue; } }
          set {
            _hasBits0 |= 128;
            weekendTourneyTournamentId_ = value;
          }
        }
        /// <summary>Gets whether the "weekend_tourney_tournament_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWeekendTourneyTournamentId {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "weekend_tourney_tournament_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWeekendTourneyTournamentId() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "weekend_tourney_season_trophy_id" field.</summary>
        public const int WeekendTourneySeasonTrophyIdFieldNumber = 11;
        private readonly static uint WeekendTourneySeasonTrophyIdDefaultValue = 0;

        private uint weekendTourneySeasonTrophyId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WeekendTourneySeasonTrophyId {
          get { if ((_hasBits0 & 256) != 0) { return weekendTourneySeasonTrophyId_; } else { return WeekendTourneySeasonTrophyIdDefaultValue; } }
          set {
            _hasBits0 |= 256;
            weekendTourneySeasonTrophyId_ = value;
          }
        }
        /// <summary>Gets whether the "weekend_tourney_season_trophy_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWeekendTourneySeasonTrophyId {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "weekend_tourney_season_trophy_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWeekendTourneySeasonTrophyId() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "weekend_tourney_division" field.</summary>
        public const int WeekendTourneyDivisionFieldNumber = 12;
        private readonly static uint WeekendTourneyDivisionDefaultValue = 0;

        private uint weekendTourneyDivision_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WeekendTourneyDivision {
          get { if ((_hasBits0 & 512) != 0) { return weekendTourneyDivision_; } else { return WeekendTourneyDivisionDefaultValue; } }
          set {
            _hasBits0 |= 512;
            weekendTourneyDivision_ = value;
          }
        }
        /// <summary>Gets whether the "weekend_tourney_division" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWeekendTourneyDivision {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "weekend_tourney_division" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWeekendTourneyDivision() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "weekend_tourney_skill_level" field.</summary>
        public const int WeekendTourneySkillLevelFieldNumber = 13;
        private readonly static uint WeekendTourneySkillLevelDefaultValue = 0;

        private uint weekendTourneySkillLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WeekendTourneySkillLevel {
          get { if ((_hasBits0 & 1024) != 0) { return weekendTourneySkillLevel_; } else { return WeekendTourneySkillLevelDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            weekendTourneySkillLevel_ = value;
          }
        }
        /// <summary>Gets whether the "weekend_tourney_skill_level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWeekendTourneySkillLevel {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "weekend_tourney_skill_level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWeekendTourneySkillLevel() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "radiant_team_id" field.</summary>
        public const int RadiantTeamIdFieldNumber = 2;
        private readonly static uint RadiantTeamIdDefaultValue = 0;

        private uint radiantTeamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RadiantTeamId {
          get { if ((_hasBits0 & 2) != 0) { return radiantTeamId_; } else { return RadiantTeamIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            radiantTeamId_ = value;
          }
        }
        /// <summary>Gets whether the "radiant_team_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRadiantTeamId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "radiant_team_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRadiantTeamId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "radiant_team_name" field.</summary>
        public const int RadiantTeamNameFieldNumber = 3;
        private readonly static string RadiantTeamNameDefaultValue = "";

        private string radiantTeamName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RadiantTeamName {
          get { return radiantTeamName_ ?? RadiantTeamNameDefaultValue; }
          set {
            radiantTeamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "radiant_team_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRadiantTeamName {
          get { return radiantTeamName_ != null; }
        }
        /// <summary>Clears the value of the "radiant_team_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRadiantTeamName() {
          radiantTeamName_ = null;
        }

        /// <summary>Field number for the "radiant_team_logo" field.</summary>
        public const int RadiantTeamLogoFieldNumber = 4;
        private readonly static ulong RadiantTeamLogoDefaultValue = 0UL;

        private ulong radiantTeamLogo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RadiantTeamLogo {
          get { if ((_hasBits0 & 4) != 0) { return radiantTeamLogo_; } else { return RadiantTeamLogoDefaultValue; } }
          set {
            _hasBits0 |= 4;
            radiantTeamLogo_ = value;
          }
        }
        /// <summary>Gets whether the "radiant_team_logo" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRadiantTeamLogo {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "radiant_team_logo" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRadiantTeamLogo() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "radiant_team_logo_url" field.</summary>
        public const int RadiantTeamLogoUrlFieldNumber = 14;
        private readonly static string RadiantTeamLogoUrlDefaultValue = "";

        private string radiantTeamLogoUrl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RadiantTeamLogoUrl {
          get { return radiantTeamLogoUrl_ ?? RadiantTeamLogoUrlDefaultValue; }
          set {
            radiantTeamLogoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "radiant_team_logo_url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRadiantTeamLogoUrl {
          get { return radiantTeamLogoUrl_ != null; }
        }
        /// <summary>Clears the value of the "radiant_team_logo_url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRadiantTeamLogoUrl() {
          radiantTeamLogoUrl_ = null;
        }

        /// <summary>Field number for the "dire_team_id" field.</summary>
        public const int DireTeamIdFieldNumber = 5;
        private readonly static uint DireTeamIdDefaultValue = 0;

        private uint direTeamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DireTeamId {
          get { if ((_hasBits0 & 8) != 0) { return direTeamId_; } else { return DireTeamIdDefaultValue; } }
          set {
            _hasBits0 |= 8;
            direTeamId_ = value;
          }
        }
        /// <summary>Gets whether the "dire_team_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDireTeamId {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "dire_team_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDireTeamId() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "dire_team_name" field.</summary>
        public const int DireTeamNameFieldNumber = 6;
        private readonly static string DireTeamNameDefaultValue = "";

        private string direTeamName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DireTeamName {
          get { return direTeamName_ ?? DireTeamNameDefaultValue; }
          set {
            direTeamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "dire_team_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDireTeamName {
          get { return direTeamName_ != null; }
        }
        /// <summary>Clears the value of the "dire_team_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDireTeamName() {
          direTeamName_ = null;
        }

        /// <summary>Field number for the "dire_team_logo" field.</summary>
        public const int DireTeamLogoFieldNumber = 7;
        private readonly static ulong DireTeamLogoDefaultValue = 0UL;

        private ulong direTeamLogo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong DireTeamLogo {
          get { if ((_hasBits0 & 16) != 0) { return direTeamLogo_; } else { return DireTeamLogoDefaultValue; } }
          set {
            _hasBits0 |= 16;
            direTeamLogo_ = value;
          }
        }
        /// <summary>Gets whether the "dire_team_logo" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDireTeamLogo {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "dire_team_logo" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDireTeamLogo() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "dire_team_logo_url" field.</summary>
        public const int DireTeamLogoUrlFieldNumber = 15;
        private readonly static string DireTeamLogoUrlDefaultValue = "";

        private string direTeamLogoUrl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DireTeamLogoUrl {
          get { return direTeamLogoUrl_ ?? DireTeamLogoUrlDefaultValue; }
          set {
            direTeamLogoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "dire_team_logo_url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDireTeamLogoUrl {
          get { return direTeamLogoUrl_ != null; }
        }
        /// <summary>Clears the value of the "dire_team_logo_url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDireTeamLogoUrl() {
          direTeamLogoUrl_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tourney);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tourney other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LeagueId != other.LeagueId) return false;
          if (SeriesType != other.SeriesType) return false;
          if (SeriesGame != other.SeriesGame) return false;
          if (WeekendTourneyTournamentId != other.WeekendTourneyTournamentId) return false;
          if (WeekendTourneySeasonTrophyId != other.WeekendTourneySeasonTrophyId) return false;
          if (WeekendTourneyDivision != other.WeekendTourneyDivision) return false;
          if (WeekendTourneySkillLevel != other.WeekendTourneySkillLevel) return false;
          if (RadiantTeamId != other.RadiantTeamId) return false;
          if (RadiantTeamName != other.RadiantTeamName) return false;
          if (RadiantTeamLogo != other.RadiantTeamLogo) return false;
          if (RadiantTeamLogoUrl != other.RadiantTeamLogoUrl) return false;
          if (DireTeamId != other.DireTeamId) return false;
          if (DireTeamName != other.DireTeamName) return false;
          if (DireTeamLogo != other.DireTeamLogo) return false;
          if (DireTeamLogoUrl != other.DireTeamLogoUrl) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasLeagueId) hash ^= LeagueId.GetHashCode();
          if (HasSeriesType) hash ^= SeriesType.GetHashCode();
          if (HasSeriesGame) hash ^= SeriesGame.GetHashCode();
          if (HasWeekendTourneyTournamentId) hash ^= WeekendTourneyTournamentId.GetHashCode();
          if (HasWeekendTourneySeasonTrophyId) hash ^= WeekendTourneySeasonTrophyId.GetHashCode();
          if (HasWeekendTourneyDivision) hash ^= WeekendTourneyDivision.GetHashCode();
          if (HasWeekendTourneySkillLevel) hash ^= WeekendTourneySkillLevel.GetHashCode();
          if (HasRadiantTeamId) hash ^= RadiantTeamId.GetHashCode();
          if (HasRadiantTeamName) hash ^= RadiantTeamName.GetHashCode();
          if (HasRadiantTeamLogo) hash ^= RadiantTeamLogo.GetHashCode();
          if (HasRadiantTeamLogoUrl) hash ^= RadiantTeamLogoUrl.GetHashCode();
          if (HasDireTeamId) hash ^= DireTeamId.GetHashCode();
          if (HasDireTeamName) hash ^= DireTeamName.GetHashCode();
          if (HasDireTeamLogo) hash ^= DireTeamLogo.GetHashCode();
          if (HasDireTeamLogoUrl) hash ^= DireTeamLogoUrl.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasLeagueId) {
            output.WriteRawTag(8);
            output.WriteUInt32(LeagueId);
          }
          if (HasRadiantTeamId) {
            output.WriteRawTag(16);
            output.WriteUInt32(RadiantTeamId);
          }
          if (HasRadiantTeamName) {
            output.WriteRawTag(26);
            output.WriteString(RadiantTeamName);
          }
          if (HasRadiantTeamLogo) {
            output.WriteRawTag(33);
            output.WriteFixed64(RadiantTeamLogo);
          }
          if (HasDireTeamId) {
            output.WriteRawTag(40);
            output.WriteUInt32(DireTeamId);
          }
          if (HasDireTeamName) {
            output.WriteRawTag(50);
            output.WriteString(DireTeamName);
          }
          if (HasDireTeamLogo) {
            output.WriteRawTag(57);
            output.WriteFixed64(DireTeamLogo);
          }
          if (HasSeriesType) {
            output.WriteRawTag(64);
            output.WriteUInt32(SeriesType);
          }
          if (HasSeriesGame) {
            output.WriteRawTag(72);
            output.WriteUInt32(SeriesGame);
          }
          if (HasWeekendTourneyTournamentId) {
            output.WriteRawTag(80);
            output.WriteUInt32(WeekendTourneyTournamentId);
          }
          if (HasWeekendTourneySeasonTrophyId) {
            output.WriteRawTag(88);
            output.WriteUInt32(WeekendTourneySeasonTrophyId);
          }
          if (HasWeekendTourneyDivision) {
            output.WriteRawTag(96);
            output.WriteUInt32(WeekendTourneyDivision);
          }
          if (HasWeekendTourneySkillLevel) {
            output.WriteRawTag(104);
            output.WriteUInt32(WeekendTourneySkillLevel);
          }
          if (HasRadiantTeamLogoUrl) {
            output.WriteRawTag(114);
            output.WriteString(RadiantTeamLogoUrl);
          }
          if (HasDireTeamLogoUrl) {
            output.WriteRawTag(122);
            output.WriteString(DireTeamLogoUrl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasLeagueId) {
            output.WriteRawTag(8);
            output.WriteUInt32(LeagueId);
          }
          if (HasRadiantTeamId) {
            output.WriteRawTag(16);
            output.WriteUInt32(RadiantTeamId);
          }
          if (HasRadiantTeamName) {
            output.WriteRawTag(26);
            output.WriteString(RadiantTeamName);
          }
          if (HasRadiantTeamLogo) {
            output.WriteRawTag(33);
            output.WriteFixed64(RadiantTeamLogo);
          }
          if (HasDireTeamId) {
            output.WriteRawTag(40);
            output.WriteUInt32(DireTeamId);
          }
          if (HasDireTeamName) {
            output.WriteRawTag(50);
            output.WriteString(DireTeamName);
          }
          if (HasDireTeamLogo) {
            output.WriteRawTag(57);
            output.WriteFixed64(DireTeamLogo);
          }
          if (HasSeriesType) {
            output.WriteRawTag(64);
            output.WriteUInt32(SeriesType);
          }
          if (HasSeriesGame) {
            output.WriteRawTag(72);
            output.WriteUInt32(SeriesGame);
          }
          if (HasWeekendTourneyTournamentId) {
            output.WriteRawTag(80);
            output.WriteUInt32(WeekendTourneyTournamentId);
          }
          if (HasWeekendTourneySeasonTrophyId) {
            output.WriteRawTag(88);
            output.WriteUInt32(WeekendTourneySeasonTrophyId);
          }
          if (HasWeekendTourneyDivision) {
            output.WriteRawTag(96);
            output.WriteUInt32(WeekendTourneyDivision);
          }
          if (HasWeekendTourneySkillLevel) {
            output.WriteRawTag(104);
            output.WriteUInt32(WeekendTourneySkillLevel);
          }
          if (HasRadiantTeamLogoUrl) {
            output.WriteRawTag(114);
            output.WriteString(RadiantTeamLogoUrl);
          }
          if (HasDireTeamLogoUrl) {
            output.WriteRawTag(122);
            output.WriteString(DireTeamLogoUrl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasLeagueId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
          }
          if (HasSeriesType) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeriesType);
          }
          if (HasSeriesGame) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeriesGame);
          }
          if (HasWeekendTourneyTournamentId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekendTourneyTournamentId);
          }
          if (HasWeekendTourneySeasonTrophyId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekendTourneySeasonTrophyId);
          }
          if (HasWeekendTourneyDivision) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekendTourneyDivision);
          }
          if (HasWeekendTourneySkillLevel) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekendTourneySkillLevel);
          }
          if (HasRadiantTeamId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RadiantTeamId);
          }
          if (HasRadiantTeamName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RadiantTeamName);
          }
          if (HasRadiantTeamLogo) {
            size += 1 + 8;
          }
          if (HasRadiantTeamLogoUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RadiantTeamLogoUrl);
          }
          if (HasDireTeamId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DireTeamId);
          }
          if (HasDireTeamName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DireTeamName);
          }
          if (HasDireTeamLogo) {
            size += 1 + 8;
          }
          if (HasDireTeamLogoUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DireTeamLogoUrl);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tourney other) {
          if (other == null) {
            return;
          }
          if (other.HasLeagueId) {
            LeagueId = other.LeagueId;
          }
          if (other.HasSeriesType) {
            SeriesType = other.SeriesType;
          }
          if (other.HasSeriesGame) {
            SeriesGame = other.SeriesGame;
          }
          if (other.HasWeekendTourneyTournamentId) {
            WeekendTourneyTournamentId = other.WeekendTourneyTournamentId;
          }
          if (other.HasWeekendTourneySeasonTrophyId) {
            WeekendTourneySeasonTrophyId = other.WeekendTourneySeasonTrophyId;
          }
          if (other.HasWeekendTourneyDivision) {
            WeekendTourneyDivision = other.WeekendTourneyDivision;
          }
          if (other.HasWeekendTourneySkillLevel) {
            WeekendTourneySkillLevel = other.WeekendTourneySkillLevel;
          }
          if (other.HasRadiantTeamId) {
            RadiantTeamId = other.RadiantTeamId;
          }
          if (other.HasRadiantTeamName) {
            RadiantTeamName = other.RadiantTeamName;
          }
          if (other.HasRadiantTeamLogo) {
            RadiantTeamLogo = other.RadiantTeamLogo;
          }
          if (other.HasRadiantTeamLogoUrl) {
            RadiantTeamLogoUrl = other.RadiantTeamLogoUrl;
          }
          if (other.HasDireTeamId) {
            DireTeamId = other.DireTeamId;
          }
          if (other.HasDireTeamName) {
            DireTeamName = other.DireTeamName;
          }
          if (other.HasDireTeamLogo) {
            DireTeamLogo = other.DireTeamLogo;
          }
          if (other.HasDireTeamLogoUrl) {
            DireTeamLogoUrl = other.DireTeamLogoUrl;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                LeagueId = input.ReadUInt32();
                break;
              }
              case 16: {
                RadiantTeamId = input.ReadUInt32();
                break;
              }
              case 26: {
                RadiantTeamName = input.ReadString();
                break;
              }
              case 33: {
                RadiantTeamLogo = input.ReadFixed64();
                break;
              }
              case 40: {
                DireTeamId = input.ReadUInt32();
                break;
              }
              case 50: {
                DireTeamName = input.ReadString();
                break;
              }
              case 57: {
                DireTeamLogo = input.ReadFixed64();
                break;
              }
              case 64: {
                SeriesType = input.ReadUInt32();
                break;
              }
              case 72: {
                SeriesGame = input.ReadUInt32();
                break;
              }
              case 80: {
                WeekendTourneyTournamentId = input.ReadUInt32();
                break;
              }
              case 88: {
                WeekendTourneySeasonTrophyId = input.ReadUInt32();
                break;
              }
              case 96: {
                WeekendTourneyDivision = input.ReadUInt32();
                break;
              }
              case 104: {
                WeekendTourneySkillLevel = input.ReadUInt32();
                break;
              }
              case 114: {
                RadiantTeamLogoUrl = input.ReadString();
                break;
              }
              case 122: {
                DireTeamLogoUrl = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                LeagueId = input.ReadUInt32();
                break;
              }
              case 16: {
                RadiantTeamId = input.ReadUInt32();
                break;
              }
              case 26: {
                RadiantTeamName = input.ReadString();
                break;
              }
              case 33: {
                RadiantTeamLogo = input.ReadFixed64();
                break;
              }
              case 40: {
                DireTeamId = input.ReadUInt32();
                break;
              }
              case 50: {
                DireTeamName = input.ReadString();
                break;
              }
              case 57: {
                DireTeamLogo = input.ReadFixed64();
                break;
              }
              case 64: {
                SeriesType = input.ReadUInt32();
                break;
              }
              case 72: {
                SeriesGame = input.ReadUInt32();
                break;
              }
              case 80: {
                WeekendTourneyTournamentId = input.ReadUInt32();
                break;
              }
              case 88: {
                WeekendTourneySeasonTrophyId = input.ReadUInt32();
                break;
              }
              case 96: {
                WeekendTourneyDivision = input.ReadUInt32();
                break;
              }
              case 104: {
                WeekendTourneySkillLevel = input.ReadUInt32();
                break;
              }
              case 114: {
                RadiantTeamLogoUrl = input.ReadString();
                break;
              }
              case 122: {
                DireTeamLogoUrl = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgConsumableUsage : pb::IMessage<CMsgConsumableUsage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgConsumableUsage> _parser = new pb::MessageParser<CMsgConsumableUsage>(() => new CMsgConsumableUsage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgConsumableUsage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgConsumableUsage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgConsumableUsage(CMsgConsumableUsage other) : this() {
      _hasBits0 = other._hasBits0;
      itemDef_ = other.itemDef_;
      quantityChange_ = other.quantityChange_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgConsumableUsage Clone() {
      return new CMsgConsumableUsage(this);
    }

    /// <summary>Field number for the "item_def" field.</summary>
    public const int ItemDefFieldNumber = 1;
    private readonly static uint ItemDefDefaultValue = 0;

    private uint itemDef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemDef {
      get { if ((_hasBits0 & 1) != 0) { return itemDef_; } else { return ItemDefDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemDef_ = value;
      }
    }
    /// <summary>Gets whether the "item_def" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemDef {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_def" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemDef() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "quantity_change" field.</summary>
    public const int QuantityChangeFieldNumber = 2;
    private readonly static int QuantityChangeDefaultValue = 0;

    private int quantityChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuantityChange {
      get { if ((_hasBits0 & 2) != 0) { return quantityChange_; } else { return QuantityChangeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        quantityChange_ = value;
      }
    }
    /// <summary>Gets whether the "quantity_change" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuantityChange {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "quantity_change" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuantityChange() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgConsumableUsage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgConsumableUsage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemDef != other.ItemDef) return false;
      if (QuantityChange != other.QuantityChange) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemDef) hash ^= ItemDef.GetHashCode();
      if (HasQuantityChange) hash ^= QuantityChange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemDef) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemDef);
      }
      if (HasQuantityChange) {
        output.WriteRawTag(16);
        output.WriteInt32(QuantityChange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemDef) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemDef);
      }
      if (HasQuantityChange) {
        output.WriteRawTag(16);
        output.WriteInt32(QuantityChange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemDef) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDef);
      }
      if (HasQuantityChange) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuantityChange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgConsumableUsage other) {
      if (other == null) {
        return;
      }
      if (other.HasItemDef) {
        ItemDef = other.ItemDef;
      }
      if (other.HasQuantityChange) {
        QuantityChange = other.QuantityChange;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemDef = input.ReadUInt32();
            break;
          }
          case 16: {
            QuantityChange = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemDef = input.ReadUInt32();
            break;
          }
          case 16: {
            QuantityChange = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgMatchConsumableUsage : pb::IMessage<CMsgMatchConsumableUsage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgMatchConsumableUsage> _parser = new pb::MessageParser<CMsgMatchConsumableUsage>(() => new CMsgMatchConsumableUsage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgMatchConsumableUsage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchConsumableUsage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchConsumableUsage(CMsgMatchConsumableUsage other) : this() {
      playerConsumablesUsed_ = other.playerConsumablesUsed_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchConsumableUsage Clone() {
      return new CMsgMatchConsumableUsage(this);
    }

    /// <summary>Field number for the "player_consumables_used" field.</summary>
    public const int PlayerConsumablesUsedFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgMatchConsumableUsage.Types.PlayerUsage> _repeated_playerConsumablesUsed_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgMatchConsumableUsage.Types.PlayerUsage.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchConsumableUsage.Types.PlayerUsage> playerConsumablesUsed_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchConsumableUsage.Types.PlayerUsage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchConsumableUsage.Types.PlayerUsage> PlayerConsumablesUsed {
      get { return playerConsumablesUsed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgMatchConsumableUsage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgMatchConsumableUsage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerConsumablesUsed_.Equals(other.playerConsumablesUsed_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerConsumablesUsed_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      playerConsumablesUsed_.WriteTo(output, _repeated_playerConsumablesUsed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      playerConsumablesUsed_.WriteTo(ref output, _repeated_playerConsumablesUsed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerConsumablesUsed_.CalculateSize(_repeated_playerConsumablesUsed_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgMatchConsumableUsage other) {
      if (other == null) {
        return;
      }
      playerConsumablesUsed_.Add(other.playerConsumablesUsed_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerConsumablesUsed_.AddEntriesFrom(input, _repeated_playerConsumablesUsed_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            playerConsumablesUsed_.AddEntriesFrom(ref input, _repeated_playerConsumablesUsed_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgMatchConsumableUsage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerUsage : pb::IMessage<PlayerUsage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerUsage> _parser = new pb::MessageParser<PlayerUsage>(() => new PlayerUsage());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerUsage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgMatchConsumableUsage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerUsage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerUsage(PlayerUsage other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          consumablesUsed_ = other.consumablesUsed_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerUsage Clone() {
          return new PlayerUsage(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "consumables_used" field.</summary>
        public const int ConsumablesUsedFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgConsumableUsage> _repeated_consumablesUsed_codec
            = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgConsumableUsage.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConsumableUsage> consumablesUsed_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConsumableUsage>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgConsumableUsage> ConsumablesUsed {
          get { return consumablesUsed_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerUsage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerUsage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if(!consumablesUsed_.Equals(other.consumablesUsed_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          hash ^= consumablesUsed_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          consumablesUsed_.WriteTo(output, _repeated_consumablesUsed_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          consumablesUsed_.WriteTo(ref output, _repeated_consumablesUsed_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          size += consumablesUsed_.CalculateSize(_repeated_consumablesUsed_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerUsage other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          consumablesUsed_.Add(other.consumablesUsed_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                consumablesUsed_.AddEntriesFrom(input, _repeated_consumablesUsed_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                consumablesUsed_.AddEntriesFrom(ref input, _repeated_consumablesUsed_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgMatchEventActionGrants : pb::IMessage<CMsgMatchEventActionGrants>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgMatchEventActionGrants> _parser = new pb::MessageParser<CMsgMatchEventActionGrants>(() => new CMsgMatchEventActionGrants());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgMatchEventActionGrants> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchEventActionGrants() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchEventActionGrants(CMsgMatchEventActionGrants other) : this() {
      playerGrants_ = other.playerGrants_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchEventActionGrants Clone() {
      return new CMsgMatchEventActionGrants(this);
    }

    /// <summary>Field number for the "player_grants" field.</summary>
    public const int PlayerGrantsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgMatchEventActionGrants.Types.PlayerGrants> _repeated_playerGrants_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgMatchEventActionGrants.Types.PlayerGrants.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchEventActionGrants.Types.PlayerGrants> playerGrants_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchEventActionGrants.Types.PlayerGrants>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgMatchEventActionGrants.Types.PlayerGrants> PlayerGrants {
      get { return playerGrants_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgMatchEventActionGrants);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgMatchEventActionGrants other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerGrants_.Equals(other.playerGrants_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerGrants_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      playerGrants_.WriteTo(output, _repeated_playerGrants_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      playerGrants_.WriteTo(ref output, _repeated_playerGrants_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerGrants_.CalculateSize(_repeated_playerGrants_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgMatchEventActionGrants other) {
      if (other == null) {
        return;
      }
      playerGrants_.Add(other.playerGrants_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerGrants_.AddEntriesFrom(input, _repeated_playerGrants_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            playerGrants_.AddEntriesFrom(ref input, _repeated_playerGrants_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgMatchEventActionGrants message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerGrants : pb::IMessage<PlayerGrants>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerGrants> _parser = new pb::MessageParser<PlayerGrants>(() => new PlayerGrants());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerGrants> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgMatchEventActionGrants.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerGrants() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerGrants(PlayerGrants other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          actionsGranted_ = other.actionsGranted_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerGrants Clone() {
          return new PlayerGrants(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "actions_granted" field.</summary>
        public const int ActionsGrantedFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgPendingEventAward> _repeated_actionsGranted_codec
            = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgPendingEventAward.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPendingEventAward> actionsGranted_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPendingEventAward>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPendingEventAward> ActionsGranted {
          get { return actionsGranted_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerGrants);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerGrants other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if(!actionsGranted_.Equals(other.actionsGranted_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          hash ^= actionsGranted_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          actionsGranted_.WriteTo(output, _repeated_actionsGranted_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          actionsGranted_.WriteTo(ref output, _repeated_actionsGranted_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          size += actionsGranted_.CalculateSize(_repeated_actionsGranted_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerGrants other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          actionsGranted_.Add(other.actionsGranted_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 26: {
                actionsGranted_.AddEntriesFrom(input, _repeated_actionsGranted_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 26: {
                actionsGranted_.AddEntriesFrom(ref input, _repeated_actionsGranted_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgCustomGameWhitelist : pb::IMessage<CMsgCustomGameWhitelist>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgCustomGameWhitelist> _parser = new pb::MessageParser<CMsgCustomGameWhitelist>(() => new CMsgCustomGameWhitelist());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgCustomGameWhitelist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCustomGameWhitelist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCustomGameWhitelist(CMsgCustomGameWhitelist other) : this() {
      _hasBits0 = other._hasBits0;
      version_ = other.version_;
      customGamesWhitelist_ = other.customGamesWhitelist_.Clone();
      disableWhitelist_ = other.disableWhitelist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCustomGameWhitelist Clone() {
      return new CMsgCustomGameWhitelist(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private readonly static uint VersionDefaultValue = 0;

    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { if ((_hasBits0 & 1) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersion() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "custom_games_whitelist" field.</summary>
    public const int CustomGamesWhitelistFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_customGamesWhitelist_codec
        = pb::FieldCodec.ForUInt64(16);
    private readonly pbc::RepeatedField<ulong> customGamesWhitelist_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> CustomGamesWhitelist {
      get { return customGamesWhitelist_; }
    }

    /// <summary>Field number for the "disable_whitelist" field.</summary>
    public const int DisableWhitelistFieldNumber = 3;
    private readonly static bool DisableWhitelistDefaultValue = false;

    private bool disableWhitelist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableWhitelist {
      get { if ((_hasBits0 & 2) != 0) { return disableWhitelist_; } else { return DisableWhitelistDefaultValue; } }
      set {
        _hasBits0 |= 2;
        disableWhitelist_ = value;
      }
    }
    /// <summary>Gets whether the "disable_whitelist" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDisableWhitelist {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "disable_whitelist" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisableWhitelist() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgCustomGameWhitelist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgCustomGameWhitelist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!customGamesWhitelist_.Equals(other.customGamesWhitelist_)) return false;
      if (DisableWhitelist != other.DisableWhitelist) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVersion) hash ^= Version.GetHashCode();
      hash ^= customGamesWhitelist_.GetHashCode();
      if (HasDisableWhitelist) hash ^= DisableWhitelist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      customGamesWhitelist_.WriteTo(output, _repeated_customGamesWhitelist_codec);
      if (HasDisableWhitelist) {
        output.WriteRawTag(24);
        output.WriteBool(DisableWhitelist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      customGamesWhitelist_.WriteTo(ref output, _repeated_customGamesWhitelist_codec);
      if (HasDisableWhitelist) {
        output.WriteRawTag(24);
        output.WriteBool(DisableWhitelist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      size += customGamesWhitelist_.CalculateSize(_repeated_customGamesWhitelist_codec);
      if (HasDisableWhitelist) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgCustomGameWhitelist other) {
      if (other == null) {
        return;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      customGamesWhitelist_.Add(other.customGamesWhitelist_);
      if (other.HasDisableWhitelist) {
        DisableWhitelist = other.DisableWhitelist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            customGamesWhitelist_.AddEntriesFrom(input, _repeated_customGamesWhitelist_codec);
            break;
          }
          case 24: {
            DisableWhitelist = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            customGamesWhitelist_.AddEntriesFrom(ref input, _repeated_customGamesWhitelist_codec);
            break;
          }
          case 24: {
            DisableWhitelist = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgCustomGameWhitelistForEdit : pb::IMessage<CMsgCustomGameWhitelistForEdit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgCustomGameWhitelistForEdit> _parser = new pb::MessageParser<CMsgCustomGameWhitelistForEdit>(() => new CMsgCustomGameWhitelistForEdit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgCustomGameWhitelistForEdit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCustomGameWhitelistForEdit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCustomGameWhitelistForEdit(CMsgCustomGameWhitelistForEdit other) : this() {
      whitelistEntries_ = other.whitelistEntries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCustomGameWhitelistForEdit Clone() {
      return new CMsgCustomGameWhitelistForEdit(this);
    }

    /// <summary>Field number for the "whitelist_entries" field.</summary>
    public const int WhitelistEntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgCustomGameWhitelistForEdit.Types.WhitelistEntry> _repeated_whitelistEntries_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgCustomGameWhitelistForEdit.Types.WhitelistEntry.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgCustomGameWhitelistForEdit.Types.WhitelistEntry> whitelistEntries_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgCustomGameWhitelistForEdit.Types.WhitelistEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgCustomGameWhitelistForEdit.Types.WhitelistEntry> WhitelistEntries {
      get { return whitelistEntries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgCustomGameWhitelistForEdit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgCustomGameWhitelistForEdit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!whitelistEntries_.Equals(other.whitelistEntries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= whitelistEntries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      whitelistEntries_.WriteTo(output, _repeated_whitelistEntries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      whitelistEntries_.WriteTo(ref output, _repeated_whitelistEntries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += whitelistEntries_.CalculateSize(_repeated_whitelistEntries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgCustomGameWhitelistForEdit other) {
      if (other == null) {
        return;
      }
      whitelistEntries_.Add(other.whitelistEntries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            whitelistEntries_.AddEntriesFrom(input, _repeated_whitelistEntries_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            whitelistEntries_.AddEntriesFrom(ref input, _repeated_whitelistEntries_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgCustomGameWhitelistForEdit message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class WhitelistEntry : pb::IMessage<WhitelistEntry>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<WhitelistEntry> _parser = new pb::MessageParser<WhitelistEntry>(() => new WhitelistEntry());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WhitelistEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgCustomGameWhitelistForEdit.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WhitelistEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WhitelistEntry(WhitelistEntry other) : this() {
          _hasBits0 = other._hasBits0;
          customGameId_ = other.customGameId_;
          whitelistState_ = other.whitelistState_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WhitelistEntry Clone() {
          return new WhitelistEntry(this);
        }

        /// <summary>Field number for the "custom_game_id" field.</summary>
        public const int CustomGameIdFieldNumber = 1;
        private readonly static ulong CustomGameIdDefaultValue = 0UL;

        private ulong customGameId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CustomGameId {
          get { if ((_hasBits0 & 1) != 0) { return customGameId_; } else { return CustomGameIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            customGameId_ = value;
          }
        }
        /// <summary>Gets whether the "custom_game_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCustomGameId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "custom_game_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCustomGameId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "whitelist_state" field.</summary>
        public const int WhitelistStateFieldNumber = 2;
        private readonly static global::Steam.Protos.Dota2.ECustomGameWhitelistState WhitelistStateDefaultValue = global::Steam.Protos.Dota2.ECustomGameWhitelistState.CustomGameWhitelistStateUnknown;

        private global::Steam.Protos.Dota2.ECustomGameWhitelistState whitelistState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.ECustomGameWhitelistState WhitelistState {
          get { if ((_hasBits0 & 2) != 0) { return whitelistState_; } else { return WhitelistStateDefaultValue; } }
          set {
            _hasBits0 |= 2;
            whitelistState_ = value;
          }
        }
        /// <summary>Gets whether the "whitelist_state" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWhitelistState {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "whitelist_state" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWhitelistState() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WhitelistEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WhitelistEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CustomGameId != other.CustomGameId) return false;
          if (WhitelistState != other.WhitelistState) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCustomGameId) hash ^= CustomGameId.GetHashCode();
          if (HasWhitelistState) hash ^= WhitelistState.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasCustomGameId) {
            output.WriteRawTag(8);
            output.WriteUInt64(CustomGameId);
          }
          if (HasWhitelistState) {
            output.WriteRawTag(16);
            output.WriteEnum((int) WhitelistState);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasCustomGameId) {
            output.WriteRawTag(8);
            output.WriteUInt64(CustomGameId);
          }
          if (HasWhitelistState) {
            output.WriteRawTag(16);
            output.WriteEnum((int) WhitelistState);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCustomGameId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomGameId);
          }
          if (HasWhitelistState) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WhitelistState);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WhitelistEntry other) {
          if (other == null) {
            return;
          }
          if (other.HasCustomGameId) {
            CustomGameId = other.CustomGameId;
          }
          if (other.HasWhitelistState) {
            WhitelistState = other.WhitelistState;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CustomGameId = input.ReadUInt64();
                break;
              }
              case 16: {
                WhitelistState = (global::Steam.Protos.Dota2.ECustomGameWhitelistState) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                CustomGameId = input.ReadUInt64();
                break;
              }
              case 16: {
                WhitelistState = (global::Steam.Protos.Dota2.ECustomGameWhitelistState) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgPlayerRecentMatchInfo : pb::IMessage<CMsgPlayerRecentMatchInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPlayerRecentMatchInfo> _parser = new pb::MessageParser<CMsgPlayerRecentMatchInfo>(() => new CMsgPlayerRecentMatchInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPlayerRecentMatchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentMatchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentMatchInfo(CMsgPlayerRecentMatchInfo other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      timestamp_ = other.timestamp_;
      duration_ = other.duration_;
      win_ = other.win_;
      heroId_ = other.heroId_;
      kills_ = other.kills_;
      deaths_ = other.deaths_;
      assists_ = other.assists_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentMatchInfo Clone() {
      return new CMsgPlayerRecentMatchInfo(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private readonly static uint TimestampDefaultValue = 0;

    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { if ((_hasBits0 & 2) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private readonly static uint DurationDefaultValue = 0;

    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { if ((_hasBits0 & 4) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 4;
    private readonly static bool WinDefaultValue = false;

    private bool win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Win {
      get { if ((_hasBits0 & 8) != 0) { return win_; } else { return WinDefaultValue; } }
      set {
        _hasBits0 |= 8;
        win_ = value;
      }
    }
    /// <summary>Gets whether the "win" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWin {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "win" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWin() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 5;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 16) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "kills" field.</summary>
    public const int KillsFieldNumber = 6;
    private readonly static uint KillsDefaultValue = 0;

    private uint kills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kills {
      get { if ((_hasBits0 & 32) != 0) { return kills_; } else { return KillsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        kills_ = value;
      }
    }
    /// <summary>Gets whether the "kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKills {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKills() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "deaths" field.</summary>
    public const int DeathsFieldNumber = 7;
    private readonly static uint DeathsDefaultValue = 0;

    private uint deaths_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deaths {
      get { if ((_hasBits0 & 64) != 0) { return deaths_; } else { return DeathsDefaultValue; } }
      set {
        _hasBits0 |= 64;
        deaths_ = value;
      }
    }
    /// <summary>Gets whether the "deaths" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeaths {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "deaths" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeaths() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "assists" field.</summary>
    public const int AssistsFieldNumber = 8;
    private readonly static uint AssistsDefaultValue = 0;

    private uint assists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Assists {
      get { if ((_hasBits0 & 128) != 0) { return assists_; } else { return AssistsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        assists_ = value;
      }
    }
    /// <summary>Gets whether the "assists" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssists {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "assists" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssists() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPlayerRecentMatchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPlayerRecentMatchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Duration != other.Duration) return false;
      if (Win != other.Win) return false;
      if (HeroId != other.HeroId) return false;
      if (Kills != other.Kills) return false;
      if (Deaths != other.Deaths) return false;
      if (Assists != other.Assists) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasWin) hash ^= Win.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasKills) hash ^= Kills.GetHashCode();
      if (HasDeaths) hash ^= Deaths.GetHashCode();
      if (HasAssists) hash ^= Assists.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(16);
        output.WriteUInt32(Timestamp);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasWin) {
        output.WriteRawTag(32);
        output.WriteBool(Win);
      }
      if (HasHeroId) {
        output.WriteRawTag(40);
        output.WriteInt32(HeroId);
      }
      if (HasKills) {
        output.WriteRawTag(48);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(56);
        output.WriteUInt32(Deaths);
      }
      if (HasAssists) {
        output.WriteRawTag(64);
        output.WriteUInt32(Assists);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(16);
        output.WriteUInt32(Timestamp);
      }
      if (HasDuration) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (HasWin) {
        output.WriteRawTag(32);
        output.WriteBool(Win);
      }
      if (HasHeroId) {
        output.WriteRawTag(40);
        output.WriteInt32(HeroId);
      }
      if (HasKills) {
        output.WriteRawTag(48);
        output.WriteUInt32(Kills);
      }
      if (HasDeaths) {
        output.WriteRawTag(56);
        output.WriteUInt32(Deaths);
      }
      if (HasAssists) {
        output.WriteRawTag(64);
        output.WriteUInt32(Assists);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (HasWin) {
        size += 1 + 1;
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
      }
      if (HasDeaths) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
      }
      if (HasAssists) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPlayerRecentMatchInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasWin) {
        Win = other.Win;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasKills) {
        Kills = other.Kills;
      }
      if (other.HasDeaths) {
        Deaths = other.Deaths;
      }
      if (other.HasAssists) {
        Assists = other.Assists;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 32: {
            Win = input.ReadBool();
            break;
          }
          case 40: {
            HeroId = input.ReadInt32();
            break;
          }
          case 48: {
            Kills = input.ReadUInt32();
            break;
          }
          case 56: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 64: {
            Assists = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 32: {
            Win = input.ReadBool();
            break;
          }
          case 40: {
            HeroId = input.ReadInt32();
            break;
          }
          case 48: {
            Kills = input.ReadUInt32();
            break;
          }
          case 56: {
            Deaths = input.ReadUInt32();
            break;
          }
          case 64: {
            Assists = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPlayerMatchRecord : pb::IMessage<CMsgPlayerMatchRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPlayerMatchRecord> _parser = new pb::MessageParser<CMsgPlayerMatchRecord>(() => new CMsgPlayerMatchRecord());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPlayerMatchRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerMatchRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerMatchRecord(CMsgPlayerMatchRecord other) : this() {
      _hasBits0 = other._hasBits0;
      wins_ = other.wins_;
      losses_ = other.losses_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerMatchRecord Clone() {
      return new CMsgPlayerMatchRecord(this);
    }

    /// <summary>Field number for the "wins" field.</summary>
    public const int WinsFieldNumber = 1;
    private readonly static uint WinsDefaultValue = 0;

    private uint wins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Wins {
      get { if ((_hasBits0 & 1) != 0) { return wins_; } else { return WinsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        wins_ = value;
      }
    }
    /// <summary>Gets whether the "wins" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWins {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "wins" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWins() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "losses" field.</summary>
    public const int LossesFieldNumber = 2;
    private readonly static uint LossesDefaultValue = 0;

    private uint losses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Losses {
      get { if ((_hasBits0 & 2) != 0) { return losses_; } else { return LossesDefaultValue; } }
      set {
        _hasBits0 |= 2;
        losses_ = value;
      }
    }
    /// <summary>Gets whether the "losses" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLosses {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "losses" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLosses() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPlayerMatchRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPlayerMatchRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Wins != other.Wins) return false;
      if (Losses != other.Losses) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWins) hash ^= Wins.GetHashCode();
      if (HasLosses) hash ^= Losses.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWins) {
        output.WriteRawTag(8);
        output.WriteUInt32(Wins);
      }
      if (HasLosses) {
        output.WriteRawTag(16);
        output.WriteUInt32(Losses);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWins) {
        output.WriteRawTag(8);
        output.WriteUInt32(Wins);
      }
      if (HasLosses) {
        output.WriteRawTag(16);
        output.WriteUInt32(Losses);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWins) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Wins);
      }
      if (HasLosses) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Losses);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPlayerMatchRecord other) {
      if (other == null) {
        return;
      }
      if (other.HasWins) {
        Wins = other.Wins;
      }
      if (other.HasLosses) {
        Losses = other.Losses;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Wins = input.ReadUInt32();
            break;
          }
          case 16: {
            Losses = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Wins = input.ReadUInt32();
            break;
          }
          case 16: {
            Losses = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPlayerRecentMatchOutcomes : pb::IMessage<CMsgPlayerRecentMatchOutcomes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPlayerRecentMatchOutcomes> _parser = new pb::MessageParser<CMsgPlayerRecentMatchOutcomes>(() => new CMsgPlayerRecentMatchOutcomes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPlayerRecentMatchOutcomes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentMatchOutcomes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentMatchOutcomes(CMsgPlayerRecentMatchOutcomes other) : this() {
      _hasBits0 = other._hasBits0;
      outcomes_ = other.outcomes_;
      matchCount_ = other.matchCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentMatchOutcomes Clone() {
      return new CMsgPlayerRecentMatchOutcomes(this);
    }

    /// <summary>Field number for the "outcomes" field.</summary>
    public const int OutcomesFieldNumber = 1;
    private readonly static uint OutcomesDefaultValue = 0;

    private uint outcomes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Outcomes {
      get { if ((_hasBits0 & 1) != 0) { return outcomes_; } else { return OutcomesDefaultValue; } }
      set {
        _hasBits0 |= 1;
        outcomes_ = value;
      }
    }
    /// <summary>Gets whether the "outcomes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOutcomes {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "outcomes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOutcomes() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "match_count" field.</summary>
    public const int MatchCountFieldNumber = 2;
    private readonly static uint MatchCountDefaultValue = 0;

    private uint matchCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchCount {
      get { if ((_hasBits0 & 2) != 0) { return matchCount_; } else { return MatchCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchCount_ = value;
      }
    }
    /// <summary>Gets whether the "match_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchCount() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPlayerRecentMatchOutcomes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPlayerRecentMatchOutcomes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Outcomes != other.Outcomes) return false;
      if (MatchCount != other.MatchCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOutcomes) hash ^= Outcomes.GetHashCode();
      if (HasMatchCount) hash ^= MatchCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOutcomes) {
        output.WriteRawTag(8);
        output.WriteUInt32(Outcomes);
      }
      if (HasMatchCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(MatchCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOutcomes) {
        output.WriteRawTag(8);
        output.WriteUInt32(Outcomes);
      }
      if (HasMatchCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(MatchCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOutcomes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Outcomes);
      }
      if (HasMatchCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPlayerRecentMatchOutcomes other) {
      if (other == null) {
        return;
      }
      if (other.HasOutcomes) {
        Outcomes = other.Outcomes;
      }
      if (other.HasMatchCount) {
        MatchCount = other.MatchCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Outcomes = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Outcomes = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPlayerRecentCommends : pb::IMessage<CMsgPlayerRecentCommends>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPlayerRecentCommends> _parser = new pb::MessageParser<CMsgPlayerRecentCommends>(() => new CMsgPlayerRecentCommends());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPlayerRecentCommends> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentCommends() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentCommends(CMsgPlayerRecentCommends other) : this() {
      _hasBits0 = other._hasBits0;
      commends_ = other.commends_;
      matchCount_ = other.matchCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentCommends Clone() {
      return new CMsgPlayerRecentCommends(this);
    }

    /// <summary>Field number for the "commends" field.</summary>
    public const int CommendsFieldNumber = 1;
    private readonly static uint CommendsDefaultValue = 0;

    private uint commends_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Commends {
      get { if ((_hasBits0 & 1) != 0) { return commends_; } else { return CommendsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        commends_ = value;
      }
    }
    /// <summary>Gets whether the "commends" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCommends {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "commends" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommends() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "match_count" field.</summary>
    public const int MatchCountFieldNumber = 2;
    private readonly static uint MatchCountDefaultValue = 0;

    private uint matchCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchCount {
      get { if ((_hasBits0 & 2) != 0) { return matchCount_; } else { return MatchCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchCount_ = value;
      }
    }
    /// <summary>Gets whether the "match_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchCount() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPlayerRecentCommends);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPlayerRecentCommends other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Commends != other.Commends) return false;
      if (MatchCount != other.MatchCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCommends) hash ^= Commends.GetHashCode();
      if (HasMatchCount) hash ^= MatchCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCommends) {
        output.WriteRawTag(8);
        output.WriteUInt32(Commends);
      }
      if (HasMatchCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(MatchCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCommends) {
        output.WriteRawTag(8);
        output.WriteUInt32(Commends);
      }
      if (HasMatchCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(MatchCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCommends) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Commends);
      }
      if (HasMatchCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPlayerRecentCommends other) {
      if (other == null) {
        return;
      }
      if (other.HasCommends) {
        Commends = other.Commends;
      }
      if (other.HasMatchCount) {
        MatchCount = other.MatchCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Commends = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Commends = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPlayerRecentAccomplishments : pb::IMessage<CMsgPlayerRecentAccomplishments>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPlayerRecentAccomplishments> _parser = new pb::MessageParser<CMsgPlayerRecentAccomplishments>(() => new CMsgPlayerRecentAccomplishments());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPlayerRecentAccomplishments> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentAccomplishments() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentAccomplishments(CMsgPlayerRecentAccomplishments other) : this() {
      _hasBits0 = other._hasBits0;
      recentOutcomes_ = other.recentOutcomes_ != null ? other.recentOutcomes_.Clone() : null;
      totalRecord_ = other.totalRecord_ != null ? other.totalRecord_.Clone() : null;
      predictionStreak_ = other.predictionStreak_;
      plusPredictionStreak_ = other.plusPredictionStreak_;
      recentCommends_ = other.recentCommends_ != null ? other.recentCommends_.Clone() : null;
      firstMatchTimestamp_ = other.firstMatchTimestamp_;
      lastMatch_ = other.lastMatch_ != null ? other.lastMatch_.Clone() : null;
      recentMvps_ = other.recentMvps_ != null ? other.recentMvps_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerRecentAccomplishments Clone() {
      return new CMsgPlayerRecentAccomplishments(this);
    }

    /// <summary>Field number for the "recent_outcomes" field.</summary>
    public const int RecentOutcomesFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes recentOutcomes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes RecentOutcomes {
      get { return recentOutcomes_; }
      set {
        recentOutcomes_ = value;
      }
    }

    /// <summary>Field number for the "total_record" field.</summary>
    public const int TotalRecordFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgPlayerMatchRecord totalRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPlayerMatchRecord TotalRecord {
      get { return totalRecord_; }
      set {
        totalRecord_ = value;
      }
    }

    /// <summary>Field number for the "prediction_streak" field.</summary>
    public const int PredictionStreakFieldNumber = 3;
    private readonly static uint PredictionStreakDefaultValue = 0;

    private uint predictionStreak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PredictionStreak {
      get { if ((_hasBits0 & 1) != 0) { return predictionStreak_; } else { return PredictionStreakDefaultValue; } }
      set {
        _hasBits0 |= 1;
        predictionStreak_ = value;
      }
    }
    /// <summary>Gets whether the "prediction_streak" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPredictionStreak {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "prediction_streak" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPredictionStreak() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "plus_prediction_streak" field.</summary>
    public const int PlusPredictionStreakFieldNumber = 4;
    private readonly static uint PlusPredictionStreakDefaultValue = 0;

    private uint plusPredictionStreak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlusPredictionStreak {
      get { if ((_hasBits0 & 2) != 0) { return plusPredictionStreak_; } else { return PlusPredictionStreakDefaultValue; } }
      set {
        _hasBits0 |= 2;
        plusPredictionStreak_ = value;
      }
    }
    /// <summary>Gets whether the "plus_prediction_streak" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlusPredictionStreak {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "plus_prediction_streak" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlusPredictionStreak() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "recent_commends" field.</summary>
    public const int RecentCommendsFieldNumber = 5;
    private global::Steam.Protos.Dota2.CMsgPlayerRecentCommends recentCommends_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPlayerRecentCommends RecentCommends {
      get { return recentCommends_; }
      set {
        recentCommends_ = value;
      }
    }

    /// <summary>Field number for the "first_match_timestamp" field.</summary>
    public const int FirstMatchTimestampFieldNumber = 6;
    private readonly static uint FirstMatchTimestampDefaultValue = 0;

    private uint firstMatchTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstMatchTimestamp {
      get { if ((_hasBits0 & 4) != 0) { return firstMatchTimestamp_; } else { return FirstMatchTimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        firstMatchTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "first_match_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstMatchTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "first_match_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstMatchTimestamp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "last_match" field.</summary>
    public const int LastMatchFieldNumber = 7;
    private global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo lastMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo LastMatch {
      get { return lastMatch_; }
      set {
        lastMatch_ = value;
      }
    }

    /// <summary>Field number for the "recent_mvps" field.</summary>
    public const int RecentMvpsFieldNumber = 8;
    private global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes recentMvps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes RecentMvps {
      get { return recentMvps_; }
      set {
        recentMvps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPlayerRecentAccomplishments);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPlayerRecentAccomplishments other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RecentOutcomes, other.RecentOutcomes)) return false;
      if (!object.Equals(TotalRecord, other.TotalRecord)) return false;
      if (PredictionStreak != other.PredictionStreak) return false;
      if (PlusPredictionStreak != other.PlusPredictionStreak) return false;
      if (!object.Equals(RecentCommends, other.RecentCommends)) return false;
      if (FirstMatchTimestamp != other.FirstMatchTimestamp) return false;
      if (!object.Equals(LastMatch, other.LastMatch)) return false;
      if (!object.Equals(RecentMvps, other.RecentMvps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (recentOutcomes_ != null) hash ^= RecentOutcomes.GetHashCode();
      if (totalRecord_ != null) hash ^= TotalRecord.GetHashCode();
      if (HasPredictionStreak) hash ^= PredictionStreak.GetHashCode();
      if (HasPlusPredictionStreak) hash ^= PlusPredictionStreak.GetHashCode();
      if (recentCommends_ != null) hash ^= RecentCommends.GetHashCode();
      if (HasFirstMatchTimestamp) hash ^= FirstMatchTimestamp.GetHashCode();
      if (lastMatch_ != null) hash ^= LastMatch.GetHashCode();
      if (recentMvps_ != null) hash ^= RecentMvps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (recentOutcomes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RecentOutcomes);
      }
      if (totalRecord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TotalRecord);
      }
      if (HasPredictionStreak) {
        output.WriteRawTag(24);
        output.WriteUInt32(PredictionStreak);
      }
      if (HasPlusPredictionStreak) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlusPredictionStreak);
      }
      if (recentCommends_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RecentCommends);
      }
      if (HasFirstMatchTimestamp) {
        output.WriteRawTag(48);
        output.WriteUInt32(FirstMatchTimestamp);
      }
      if (lastMatch_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LastMatch);
      }
      if (recentMvps_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RecentMvps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (recentOutcomes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RecentOutcomes);
      }
      if (totalRecord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TotalRecord);
      }
      if (HasPredictionStreak) {
        output.WriteRawTag(24);
        output.WriteUInt32(PredictionStreak);
      }
      if (HasPlusPredictionStreak) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlusPredictionStreak);
      }
      if (recentCommends_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RecentCommends);
      }
      if (HasFirstMatchTimestamp) {
        output.WriteRawTag(48);
        output.WriteUInt32(FirstMatchTimestamp);
      }
      if (lastMatch_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LastMatch);
      }
      if (recentMvps_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RecentMvps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (recentOutcomes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecentOutcomes);
      }
      if (totalRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalRecord);
      }
      if (HasPredictionStreak) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PredictionStreak);
      }
      if (HasPlusPredictionStreak) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlusPredictionStreak);
      }
      if (recentCommends_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecentCommends);
      }
      if (HasFirstMatchTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirstMatchTimestamp);
      }
      if (lastMatch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMatch);
      }
      if (recentMvps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecentMvps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPlayerRecentAccomplishments other) {
      if (other == null) {
        return;
      }
      if (other.recentOutcomes_ != null) {
        if (recentOutcomes_ == null) {
          RecentOutcomes = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes();
        }
        RecentOutcomes.MergeFrom(other.RecentOutcomes);
      }
      if (other.totalRecord_ != null) {
        if (totalRecord_ == null) {
          TotalRecord = new global::Steam.Protos.Dota2.CMsgPlayerMatchRecord();
        }
        TotalRecord.MergeFrom(other.TotalRecord);
      }
      if (other.HasPredictionStreak) {
        PredictionStreak = other.PredictionStreak;
      }
      if (other.HasPlusPredictionStreak) {
        PlusPredictionStreak = other.PlusPredictionStreak;
      }
      if (other.recentCommends_ != null) {
        if (recentCommends_ == null) {
          RecentCommends = new global::Steam.Protos.Dota2.CMsgPlayerRecentCommends();
        }
        RecentCommends.MergeFrom(other.RecentCommends);
      }
      if (other.HasFirstMatchTimestamp) {
        FirstMatchTimestamp = other.FirstMatchTimestamp;
      }
      if (other.lastMatch_ != null) {
        if (lastMatch_ == null) {
          LastMatch = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo();
        }
        LastMatch.MergeFrom(other.LastMatch);
      }
      if (other.recentMvps_ != null) {
        if (recentMvps_ == null) {
          RecentMvps = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes();
        }
        RecentMvps.MergeFrom(other.RecentMvps);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (recentOutcomes_ == null) {
              RecentOutcomes = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes();
            }
            input.ReadMessage(RecentOutcomes);
            break;
          }
          case 18: {
            if (totalRecord_ == null) {
              TotalRecord = new global::Steam.Protos.Dota2.CMsgPlayerMatchRecord();
            }
            input.ReadMessage(TotalRecord);
            break;
          }
          case 24: {
            PredictionStreak = input.ReadUInt32();
            break;
          }
          case 32: {
            PlusPredictionStreak = input.ReadUInt32();
            break;
          }
          case 42: {
            if (recentCommends_ == null) {
              RecentCommends = new global::Steam.Protos.Dota2.CMsgPlayerRecentCommends();
            }
            input.ReadMessage(RecentCommends);
            break;
          }
          case 48: {
            FirstMatchTimestamp = input.ReadUInt32();
            break;
          }
          case 58: {
            if (lastMatch_ == null) {
              LastMatch = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo();
            }
            input.ReadMessage(LastMatch);
            break;
          }
          case 66: {
            if (recentMvps_ == null) {
              RecentMvps = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes();
            }
            input.ReadMessage(RecentMvps);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (recentOutcomes_ == null) {
              RecentOutcomes = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes();
            }
            input.ReadMessage(RecentOutcomes);
            break;
          }
          case 18: {
            if (totalRecord_ == null) {
              TotalRecord = new global::Steam.Protos.Dota2.CMsgPlayerMatchRecord();
            }
            input.ReadMessage(TotalRecord);
            break;
          }
          case 24: {
            PredictionStreak = input.ReadUInt32();
            break;
          }
          case 32: {
            PlusPredictionStreak = input.ReadUInt32();
            break;
          }
          case 42: {
            if (recentCommends_ == null) {
              RecentCommends = new global::Steam.Protos.Dota2.CMsgPlayerRecentCommends();
            }
            input.ReadMessage(RecentCommends);
            break;
          }
          case 48: {
            FirstMatchTimestamp = input.ReadUInt32();
            break;
          }
          case 58: {
            if (lastMatch_ == null) {
              LastMatch = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo();
            }
            input.ReadMessage(LastMatch);
            break;
          }
          case 66: {
            if (recentMvps_ == null) {
              RecentMvps = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes();
            }
            input.ReadMessage(RecentMvps);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPlayerHeroRecentAccomplishments : pb::IMessage<CMsgPlayerHeroRecentAccomplishments>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPlayerHeroRecentAccomplishments> _parser = new pb::MessageParser<CMsgPlayerHeroRecentAccomplishments>(() => new CMsgPlayerHeroRecentAccomplishments());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPlayerHeroRecentAccomplishments> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerHeroRecentAccomplishments() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerHeroRecentAccomplishments(CMsgPlayerHeroRecentAccomplishments other) : this() {
      recentOutcomes_ = other.recentOutcomes_ != null ? other.recentOutcomes_.Clone() : null;
      totalRecord_ = other.totalRecord_ != null ? other.totalRecord_.Clone() : null;
      lastMatch_ = other.lastMatch_ != null ? other.lastMatch_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerHeroRecentAccomplishments Clone() {
      return new CMsgPlayerHeroRecentAccomplishments(this);
    }

    /// <summary>Field number for the "recent_outcomes" field.</summary>
    public const int RecentOutcomesFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes recentOutcomes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes RecentOutcomes {
      get { return recentOutcomes_; }
      set {
        recentOutcomes_ = value;
      }
    }

    /// <summary>Field number for the "total_record" field.</summary>
    public const int TotalRecordFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgPlayerMatchRecord totalRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPlayerMatchRecord TotalRecord {
      get { return totalRecord_; }
      set {
        totalRecord_ = value;
      }
    }

    /// <summary>Field number for the "last_match" field.</summary>
    public const int LastMatchFieldNumber = 3;
    private global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo lastMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo LastMatch {
      get { return lastMatch_; }
      set {
        lastMatch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPlayerHeroRecentAccomplishments);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPlayerHeroRecentAccomplishments other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RecentOutcomes, other.RecentOutcomes)) return false;
      if (!object.Equals(TotalRecord, other.TotalRecord)) return false;
      if (!object.Equals(LastMatch, other.LastMatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (recentOutcomes_ != null) hash ^= RecentOutcomes.GetHashCode();
      if (totalRecord_ != null) hash ^= TotalRecord.GetHashCode();
      if (lastMatch_ != null) hash ^= LastMatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (recentOutcomes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RecentOutcomes);
      }
      if (totalRecord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TotalRecord);
      }
      if (lastMatch_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LastMatch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (recentOutcomes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RecentOutcomes);
      }
      if (totalRecord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TotalRecord);
      }
      if (lastMatch_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LastMatch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (recentOutcomes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecentOutcomes);
      }
      if (totalRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalRecord);
      }
      if (lastMatch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMatch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPlayerHeroRecentAccomplishments other) {
      if (other == null) {
        return;
      }
      if (other.recentOutcomes_ != null) {
        if (recentOutcomes_ == null) {
          RecentOutcomes = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes();
        }
        RecentOutcomes.MergeFrom(other.RecentOutcomes);
      }
      if (other.totalRecord_ != null) {
        if (totalRecord_ == null) {
          TotalRecord = new global::Steam.Protos.Dota2.CMsgPlayerMatchRecord();
        }
        TotalRecord.MergeFrom(other.TotalRecord);
      }
      if (other.lastMatch_ != null) {
        if (lastMatch_ == null) {
          LastMatch = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo();
        }
        LastMatch.MergeFrom(other.LastMatch);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (recentOutcomes_ == null) {
              RecentOutcomes = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes();
            }
            input.ReadMessage(RecentOutcomes);
            break;
          }
          case 18: {
            if (totalRecord_ == null) {
              TotalRecord = new global::Steam.Protos.Dota2.CMsgPlayerMatchRecord();
            }
            input.ReadMessage(TotalRecord);
            break;
          }
          case 26: {
            if (lastMatch_ == null) {
              LastMatch = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo();
            }
            input.ReadMessage(LastMatch);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (recentOutcomes_ == null) {
              RecentOutcomes = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchOutcomes();
            }
            input.ReadMessage(RecentOutcomes);
            break;
          }
          case 18: {
            if (totalRecord_ == null) {
              TotalRecord = new global::Steam.Protos.Dota2.CMsgPlayerMatchRecord();
            }
            input.ReadMessage(TotalRecord);
            break;
          }
          case 26: {
            if (lastMatch_ == null) {
              LastMatch = new global::Steam.Protos.Dota2.CMsgPlayerRecentMatchInfo();
            }
            input.ReadMessage(LastMatch);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgRecentAccomplishments : pb::IMessage<CMsgRecentAccomplishments>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgRecentAccomplishments> _parser = new pb::MessageParser<CMsgRecentAccomplishments>(() => new CMsgRecentAccomplishments());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgRecentAccomplishments> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgRecentAccomplishments() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgRecentAccomplishments(CMsgRecentAccomplishments other) : this() {
      playerAccomplishments_ = other.playerAccomplishments_ != null ? other.playerAccomplishments_.Clone() : null;
      heroAccomplishments_ = other.heroAccomplishments_ != null ? other.heroAccomplishments_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgRecentAccomplishments Clone() {
      return new CMsgRecentAccomplishments(this);
    }

    /// <summary>Field number for the "player_accomplishments" field.</summary>
    public const int PlayerAccomplishmentsFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgPlayerRecentAccomplishments playerAccomplishments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPlayerRecentAccomplishments PlayerAccomplishments {
      get { return playerAccomplishments_; }
      set {
        playerAccomplishments_ = value;
      }
    }

    /// <summary>Field number for the "hero_accomplishments" field.</summary>
    public const int HeroAccomplishmentsFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgPlayerHeroRecentAccomplishments heroAccomplishments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgPlayerHeroRecentAccomplishments HeroAccomplishments {
      get { return heroAccomplishments_; }
      set {
        heroAccomplishments_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgRecentAccomplishments);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgRecentAccomplishments other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerAccomplishments, other.PlayerAccomplishments)) return false;
      if (!object.Equals(HeroAccomplishments, other.HeroAccomplishments)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerAccomplishments_ != null) hash ^= PlayerAccomplishments.GetHashCode();
      if (heroAccomplishments_ != null) hash ^= HeroAccomplishments.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (playerAccomplishments_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerAccomplishments);
      }
      if (heroAccomplishments_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HeroAccomplishments);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (playerAccomplishments_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerAccomplishments);
      }
      if (heroAccomplishments_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HeroAccomplishments);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerAccomplishments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAccomplishments);
      }
      if (heroAccomplishments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroAccomplishments);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgRecentAccomplishments other) {
      if (other == null) {
        return;
      }
      if (other.playerAccomplishments_ != null) {
        if (playerAccomplishments_ == null) {
          PlayerAccomplishments = new global::Steam.Protos.Dota2.CMsgPlayerRecentAccomplishments();
        }
        PlayerAccomplishments.MergeFrom(other.PlayerAccomplishments);
      }
      if (other.heroAccomplishments_ != null) {
        if (heroAccomplishments_ == null) {
          HeroAccomplishments = new global::Steam.Protos.Dota2.CMsgPlayerHeroRecentAccomplishments();
        }
        HeroAccomplishments.MergeFrom(other.HeroAccomplishments);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerAccomplishments_ == null) {
              PlayerAccomplishments = new global::Steam.Protos.Dota2.CMsgPlayerRecentAccomplishments();
            }
            input.ReadMessage(PlayerAccomplishments);
            break;
          }
          case 18: {
            if (heroAccomplishments_ == null) {
              HeroAccomplishments = new global::Steam.Protos.Dota2.CMsgPlayerHeroRecentAccomplishments();
            }
            input.ReadMessage(HeroAccomplishments);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (playerAccomplishments_ == null) {
              PlayerAccomplishments = new global::Steam.Protos.Dota2.CMsgPlayerRecentAccomplishments();
            }
            input.ReadMessage(PlayerAccomplishments);
            break;
          }
          case 18: {
            if (heroAccomplishments_ == null) {
              HeroAccomplishments = new global::Steam.Protos.Dota2.CMsgPlayerHeroRecentAccomplishments();
            }
            input.ReadMessage(HeroAccomplishments);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCRequestPlayerRecentAccomplishments : pb::IMessage<CMsgServerToGCRequestPlayerRecentAccomplishments>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCRequestPlayerRecentAccomplishments> _parser = new pb::MessageParser<CMsgServerToGCRequestPlayerRecentAccomplishments>(() => new CMsgServerToGCRequestPlayerRecentAccomplishments());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCRequestPlayerRecentAccomplishments> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestPlayerRecentAccomplishments() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestPlayerRecentAccomplishments(CMsgServerToGCRequestPlayerRecentAccomplishments other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestPlayerRecentAccomplishments Clone() {
      return new CMsgServerToGCRequestPlayerRecentAccomplishments(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCRequestPlayerRecentAccomplishments);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCRequestPlayerRecentAccomplishments other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCRequestPlayerRecentAccomplishments other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse : pb::IMessage<CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse> _parser = new pb::MessageParser<CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse>(() => new CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      playerAccomplishments_ = other.playerAccomplishments_ != null ? other.playerAccomplishments_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse Clone() {
      return new CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.Types.EResponse ResultDefaultValue = global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.Types.EResponse result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.Types.EResponse Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_accomplishments" field.</summary>
    public const int PlayerAccomplishmentsFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgRecentAccomplishments playerAccomplishments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgRecentAccomplishments PlayerAccomplishments {
      get { return playerAccomplishments_; }
      set {
        playerAccomplishments_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!object.Equals(PlayerAccomplishments, other.PlayerAccomplishments)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (playerAccomplishments_ != null) hash ^= PlayerAccomplishments.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (playerAccomplishments_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerAccomplishments);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (playerAccomplishments_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerAccomplishments);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (playerAccomplishments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAccomplishments);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.playerAccomplishments_ != null) {
        if (playerAccomplishments_ == null) {
          PlayerAccomplishments = new global::Steam.Protos.Dota2.CMsgRecentAccomplishments();
        }
        PlayerAccomplishments.MergeFrom(other.PlayerAccomplishments);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (playerAccomplishments_ == null) {
              PlayerAccomplishments = new global::Steam.Protos.Dota2.CMsgRecentAccomplishments();
            }
            input.ReadMessage(PlayerAccomplishments);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = (global::Steam.Protos.Dota2.CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (playerAccomplishments_ == null) {
              PlayerAccomplishments = new global::Steam.Protos.Dota2.CMsgRecentAccomplishments();
            }
            input.ReadMessage(PlayerAccomplishments);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
      }

    }
    #endregion

  }

  public sealed partial class CMsgArcanaVoteMatchVotes : pb::IMessage<CMsgArcanaVoteMatchVotes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgArcanaVoteMatchVotes> _parser = new pb::MessageParser<CMsgArcanaVoteMatchVotes>(() => new CMsgArcanaVoteMatchVotes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgArcanaVoteMatchVotes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgArcanaVoteMatchVotes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgArcanaVoteMatchVotes(CMsgArcanaVoteMatchVotes other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      heroId_ = other.heroId_;
      voteCount_ = other.voteCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgArcanaVoteMatchVotes Clone() {
      return new CMsgArcanaVoteMatchVotes(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static uint MatchIdDefaultValue = 0;

    private uint matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vote_count" field.</summary>
    public const int VoteCountFieldNumber = 3;
    private readonly static uint VoteCountDefaultValue = 0;

    private uint voteCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VoteCount {
      get { if ((_hasBits0 & 4) != 0) { return voteCount_; } else { return VoteCountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        voteCount_ = value;
      }
    }
    /// <summary>Gets whether the "vote_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVoteCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "vote_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVoteCount() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgArcanaVoteMatchVotes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgArcanaVoteMatchVotes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (HeroId != other.HeroId) return false;
      if (VoteCount != other.VoteCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasVoteCount) hash ^= VoteCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt32(MatchId);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (HasVoteCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(VoteCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt32(MatchId);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (HasVoteCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(VoteCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchId);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasVoteCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VoteCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgArcanaVoteMatchVotes other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasVoteCount) {
        VoteCount = other.VoteCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 24: {
            VoteCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 24: {
            VoteCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCtoGCAssociatedExploiterAccountInfo : pb::IMessage<CMsgGCtoGCAssociatedExploiterAccountInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCtoGCAssociatedExploiterAccountInfo> _parser = new pb::MessageParser<CMsgGCtoGCAssociatedExploiterAccountInfo>(() => new CMsgGCtoGCAssociatedExploiterAccountInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCtoGCAssociatedExploiterAccountInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCtoGCAssociatedExploiterAccountInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCtoGCAssociatedExploiterAccountInfo(CMsgGCtoGCAssociatedExploiterAccountInfo other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      numMatchesToSearch_ = other.numMatchesToSearch_;
      minSharedMatchCount_ = other.minSharedMatchCount_;
      numAdditionalPlayers_ = other.numAdditionalPlayers_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCtoGCAssociatedExploiterAccountInfo Clone() {
      return new CMsgGCtoGCAssociatedExploiterAccountInfo(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "num_matches_to_search" field.</summary>
    public const int NumMatchesToSearchFieldNumber = 2;
    private readonly static uint NumMatchesToSearchDefaultValue = 0;

    private uint numMatchesToSearch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumMatchesToSearch {
      get { if ((_hasBits0 & 2) != 0) { return numMatchesToSearch_; } else { return NumMatchesToSearchDefaultValue; } }
      set {
        _hasBits0 |= 2;
        numMatchesToSearch_ = value;
      }
    }
    /// <summary>Gets whether the "num_matches_to_search" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumMatchesToSearch {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "num_matches_to_search" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumMatchesToSearch() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "min_shared_match_count" field.</summary>
    public const int MinSharedMatchCountFieldNumber = 3;
    private readonly static uint MinSharedMatchCountDefaultValue = 0;

    private uint minSharedMatchCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinSharedMatchCount {
      get { if ((_hasBits0 & 4) != 0) { return minSharedMatchCount_; } else { return MinSharedMatchCountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        minSharedMatchCount_ = value;
      }
    }
    /// <summary>Gets whether the "min_shared_match_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinSharedMatchCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_shared_match_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinSharedMatchCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "num_additional_players" field.</summary>
    public const int NumAdditionalPlayersFieldNumber = 4;
    private readonly static uint NumAdditionalPlayersDefaultValue = 0;

    private uint numAdditionalPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumAdditionalPlayers {
      get { if ((_hasBits0 & 8) != 0) { return numAdditionalPlayers_; } else { return NumAdditionalPlayersDefaultValue; } }
      set {
        _hasBits0 |= 8;
        numAdditionalPlayers_ = value;
      }
    }
    /// <summary>Gets whether the "num_additional_players" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumAdditionalPlayers {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "num_additional_players" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumAdditionalPlayers() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCtoGCAssociatedExploiterAccountInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCtoGCAssociatedExploiterAccountInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (NumMatchesToSearch != other.NumMatchesToSearch) return false;
      if (MinSharedMatchCount != other.MinSharedMatchCount) return false;
      if (NumAdditionalPlayers != other.NumAdditionalPlayers) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasNumMatchesToSearch) hash ^= NumMatchesToSearch.GetHashCode();
      if (HasMinSharedMatchCount) hash ^= MinSharedMatchCount.GetHashCode();
      if (HasNumAdditionalPlayers) hash ^= NumAdditionalPlayers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasNumMatchesToSearch) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumMatchesToSearch);
      }
      if (HasMinSharedMatchCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(MinSharedMatchCount);
      }
      if (HasNumAdditionalPlayers) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumAdditionalPlayers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasNumMatchesToSearch) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumMatchesToSearch);
      }
      if (HasMinSharedMatchCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(MinSharedMatchCount);
      }
      if (HasNumAdditionalPlayers) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumAdditionalPlayers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasNumMatchesToSearch) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumMatchesToSearch);
      }
      if (HasMinSharedMatchCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinSharedMatchCount);
      }
      if (HasNumAdditionalPlayers) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumAdditionalPlayers);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCtoGCAssociatedExploiterAccountInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasNumMatchesToSearch) {
        NumMatchesToSearch = other.NumMatchesToSearch;
      }
      if (other.HasMinSharedMatchCount) {
        MinSharedMatchCount = other.MinSharedMatchCount;
      }
      if (other.HasNumAdditionalPlayers) {
        NumAdditionalPlayers = other.NumAdditionalPlayers;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            NumMatchesToSearch = input.ReadUInt32();
            break;
          }
          case 24: {
            MinSharedMatchCount = input.ReadUInt32();
            break;
          }
          case 32: {
            NumAdditionalPlayers = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            NumMatchesToSearch = input.ReadUInt32();
            break;
          }
          case 24: {
            MinSharedMatchCount = input.ReadUInt32();
            break;
          }
          case 32: {
            NumAdditionalPlayers = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGCtoGCAssociatedExploiterAccountInfoResponse : pb::IMessage<CMsgGCtoGCAssociatedExploiterAccountInfoResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCtoGCAssociatedExploiterAccountInfoResponse> _parser = new pb::MessageParser<CMsgGCtoGCAssociatedExploiterAccountInfoResponse>(() => new CMsgGCtoGCAssociatedExploiterAccountInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCtoGCAssociatedExploiterAccountInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCtoGCAssociatedExploiterAccountInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCtoGCAssociatedExploiterAccountInfoResponse(CMsgGCtoGCAssociatedExploiterAccountInfoResponse other) : this() {
      accounts_ = other.accounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCtoGCAssociatedExploiterAccountInfoResponse Clone() {
      return new CMsgGCtoGCAssociatedExploiterAccountInfoResponse(this);
    }

    /// <summary>Field number for the "accounts" field.</summary>
    public const int AccountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Types.Account> _repeated_accounts_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Types.Account.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Types.Account> accounts_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Types.Account>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Types.Account> Accounts {
      get { return accounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCtoGCAssociatedExploiterAccountInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCtoGCAssociatedExploiterAccountInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accounts_.Equals(other.accounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accounts_.WriteTo(output, _repeated_accounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accounts_.WriteTo(ref output, _repeated_accounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accounts_.CalculateSize(_repeated_accounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCtoGCAssociatedExploiterAccountInfoResponse other) {
      if (other == null) {
        return;
      }
      accounts_.Add(other.accounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            accounts_.AddEntriesFrom(ref input, _repeated_accounts_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGCtoGCAssociatedExploiterAccountInfoResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Account : pb::IMessage<Account>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Account> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account(Account other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          numCommonMatches_ = other.numCommonMatches_;
          earliestCommonMatch_ = other.earliestCommonMatch_;
          latestCommonMatch_ = other.latestCommonMatch_;
          generation_ = other.generation_;
          persona_ = other.persona_;
          alreadyBanned_ = other.alreadyBanned_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account Clone() {
          return new Account(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "num_common_matches" field.</summary>
        public const int NumCommonMatchesFieldNumber = 2;
        private readonly static uint NumCommonMatchesDefaultValue = 0;

        private uint numCommonMatches_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumCommonMatches {
          get { if ((_hasBits0 & 2) != 0) { return numCommonMatches_; } else { return NumCommonMatchesDefaultValue; } }
          set {
            _hasBits0 |= 2;
            numCommonMatches_ = value;
          }
        }
        /// <summary>Gets whether the "num_common_matches" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNumCommonMatches {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "num_common_matches" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNumCommonMatches() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "earliest_common_match" field.</summary>
        public const int EarliestCommonMatchFieldNumber = 3;
        private readonly static uint EarliestCommonMatchDefaultValue = 0;

        private uint earliestCommonMatch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EarliestCommonMatch {
          get { if ((_hasBits0 & 4) != 0) { return earliestCommonMatch_; } else { return EarliestCommonMatchDefaultValue; } }
          set {
            _hasBits0 |= 4;
            earliestCommonMatch_ = value;
          }
        }
        /// <summary>Gets whether the "earliest_common_match" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEarliestCommonMatch {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "earliest_common_match" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEarliestCommonMatch() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "latest_common_match" field.</summary>
        public const int LatestCommonMatchFieldNumber = 4;
        private readonly static uint LatestCommonMatchDefaultValue = 0;

        private uint latestCommonMatch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LatestCommonMatch {
          get { if ((_hasBits0 & 8) != 0) { return latestCommonMatch_; } else { return LatestCommonMatchDefaultValue; } }
          set {
            _hasBits0 |= 8;
            latestCommonMatch_ = value;
          }
        }
        /// <summary>Gets whether the "latest_common_match" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLatestCommonMatch {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "latest_common_match" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLatestCommonMatch() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "generation" field.</summary>
        public const int GenerationFieldNumber = 5;
        private readonly static uint GenerationDefaultValue = 0;

        private uint generation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Generation {
          get { if ((_hasBits0 & 16) != 0) { return generation_; } else { return GenerationDefaultValue; } }
          set {
            _hasBits0 |= 16;
            generation_ = value;
          }
        }
        /// <summary>Gets whether the "generation" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGeneration {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "generation" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGeneration() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "persona" field.</summary>
        public const int PersonaFieldNumber = 6;
        private readonly static string PersonaDefaultValue = "";

        private string persona_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Persona {
          get { return persona_ ?? PersonaDefaultValue; }
          set {
            persona_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "persona" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPersona {
          get { return persona_ != null; }
        }
        /// <summary>Clears the value of the "persona" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPersona() {
          persona_ = null;
        }

        /// <summary>Field number for the "already_banned" field.</summary>
        public const int AlreadyBannedFieldNumber = 7;
        private readonly static bool AlreadyBannedDefaultValue = false;

        private bool alreadyBanned_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AlreadyBanned {
          get { if ((_hasBits0 & 32) != 0) { return alreadyBanned_; } else { return AlreadyBannedDefaultValue; } }
          set {
            _hasBits0 |= 32;
            alreadyBanned_ = value;
          }
        }
        /// <summary>Gets whether the "already_banned" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAlreadyBanned {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "already_banned" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAlreadyBanned() {
          _hasBits0 &= ~32;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Account);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Account other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (NumCommonMatches != other.NumCommonMatches) return false;
          if (EarliestCommonMatch != other.EarliestCommonMatch) return false;
          if (LatestCommonMatch != other.LatestCommonMatch) return false;
          if (Generation != other.Generation) return false;
          if (Persona != other.Persona) return false;
          if (AlreadyBanned != other.AlreadyBanned) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasNumCommonMatches) hash ^= NumCommonMatches.GetHashCode();
          if (HasEarliestCommonMatch) hash ^= EarliestCommonMatch.GetHashCode();
          if (HasLatestCommonMatch) hash ^= LatestCommonMatch.GetHashCode();
          if (HasGeneration) hash ^= Generation.GetHashCode();
          if (HasPersona) hash ^= Persona.GetHashCode();
          if (HasAlreadyBanned) hash ^= AlreadyBanned.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasNumCommonMatches) {
            output.WriteRawTag(16);
            output.WriteUInt32(NumCommonMatches);
          }
          if (HasEarliestCommonMatch) {
            output.WriteRawTag(24);
            output.WriteUInt32(EarliestCommonMatch);
          }
          if (HasLatestCommonMatch) {
            output.WriteRawTag(32);
            output.WriteUInt32(LatestCommonMatch);
          }
          if (HasGeneration) {
            output.WriteRawTag(40);
            output.WriteUInt32(Generation);
          }
          if (HasPersona) {
            output.WriteRawTag(50);
            output.WriteString(Persona);
          }
          if (HasAlreadyBanned) {
            output.WriteRawTag(56);
            output.WriteBool(AlreadyBanned);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasNumCommonMatches) {
            output.WriteRawTag(16);
            output.WriteUInt32(NumCommonMatches);
          }
          if (HasEarliestCommonMatch) {
            output.WriteRawTag(24);
            output.WriteUInt32(EarliestCommonMatch);
          }
          if (HasLatestCommonMatch) {
            output.WriteRawTag(32);
            output.WriteUInt32(LatestCommonMatch);
          }
          if (HasGeneration) {
            output.WriteRawTag(40);
            output.WriteUInt32(Generation);
          }
          if (HasPersona) {
            output.WriteRawTag(50);
            output.WriteString(Persona);
          }
          if (HasAlreadyBanned) {
            output.WriteRawTag(56);
            output.WriteBool(AlreadyBanned);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasNumCommonMatches) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumCommonMatches);
          }
          if (HasEarliestCommonMatch) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EarliestCommonMatch);
          }
          if (HasLatestCommonMatch) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatestCommonMatch);
          }
          if (HasGeneration) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Generation);
          }
          if (HasPersona) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Persona);
          }
          if (HasAlreadyBanned) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Account other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasNumCommonMatches) {
            NumCommonMatches = other.NumCommonMatches;
          }
          if (other.HasEarliestCommonMatch) {
            EarliestCommonMatch = other.EarliestCommonMatch;
          }
          if (other.HasLatestCommonMatch) {
            LatestCommonMatch = other.LatestCommonMatch;
          }
          if (other.HasGeneration) {
            Generation = other.Generation;
          }
          if (other.HasPersona) {
            Persona = other.Persona;
          }
          if (other.HasAlreadyBanned) {
            AlreadyBanned = other.AlreadyBanned;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                NumCommonMatches = input.ReadUInt32();
                break;
              }
              case 24: {
                EarliestCommonMatch = input.ReadUInt32();
                break;
              }
              case 32: {
                LatestCommonMatch = input.ReadUInt32();
                break;
              }
              case 40: {
                Generation = input.ReadUInt32();
                break;
              }
              case 50: {
                Persona = input.ReadString();
                break;
              }
              case 56: {
                AlreadyBanned = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                NumCommonMatches = input.ReadUInt32();
                break;
              }
              case 24: {
                EarliestCommonMatch = input.ReadUInt32();
                break;
              }
              case 32: {
                LatestCommonMatch = input.ReadUInt32();
                break;
              }
              case 40: {
                Generation = input.ReadUInt32();
                break;
              }
              case 50: {
                Persona = input.ReadString();
                break;
              }
              case 56: {
                AlreadyBanned = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgPullTabsData : pb::IMessage<CMsgPullTabsData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPullTabsData> _parser = new pb::MessageParser<CMsgPullTabsData>(() => new CMsgPullTabsData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPullTabsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPullTabsData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPullTabsData(CMsgPullTabsData other) : this() {
      _hasBits0 = other._hasBits0;
      slots_ = other.slots_.Clone();
      jackpots_ = other.jackpots_.Clone();
      lastBoard_ = other.lastBoard_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPullTabsData Clone() {
      return new CMsgPullTabsData(this);
    }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Slot> _repeated_slots_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Slot.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Slot> slots_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Slot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Slot> Slots {
      get { return slots_; }
    }

    /// <summary>Field number for the "jackpots" field.</summary>
    public const int JackpotsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Jackpot> _repeated_jackpots_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Jackpot.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Jackpot> jackpots_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Jackpot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPullTabsData.Types.Jackpot> Jackpots {
      get { return jackpots_; }
    }

    /// <summary>Field number for the "last_board" field.</summary>
    public const int LastBoardFieldNumber = 3;
    private readonly static uint LastBoardDefaultValue = 0;

    private uint lastBoard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastBoard {
      get { if ((_hasBits0 & 1) != 0) { return lastBoard_; } else { return LastBoardDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lastBoard_ = value;
      }
    }
    /// <summary>Gets whether the "last_board" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastBoard {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "last_board" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastBoard() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPullTabsData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPullTabsData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!slots_.Equals(other.slots_)) return false;
      if(!jackpots_.Equals(other.jackpots_)) return false;
      if (LastBoard != other.LastBoard) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= slots_.GetHashCode();
      hash ^= jackpots_.GetHashCode();
      if (HasLastBoard) hash ^= LastBoard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      slots_.WriteTo(output, _repeated_slots_codec);
      jackpots_.WriteTo(output, _repeated_jackpots_codec);
      if (HasLastBoard) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastBoard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      slots_.WriteTo(ref output, _repeated_slots_codec);
      jackpots_.WriteTo(ref output, _repeated_jackpots_codec);
      if (HasLastBoard) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastBoard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += slots_.CalculateSize(_repeated_slots_codec);
      size += jackpots_.CalculateSize(_repeated_jackpots_codec);
      if (HasLastBoard) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastBoard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPullTabsData other) {
      if (other == null) {
        return;
      }
      slots_.Add(other.slots_);
      jackpots_.Add(other.jackpots_);
      if (other.HasLastBoard) {
        LastBoard = other.LastBoard;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            slots_.AddEntriesFrom(input, _repeated_slots_codec);
            break;
          }
          case 18: {
            jackpots_.AddEntriesFrom(input, _repeated_jackpots_codec);
            break;
          }
          case 24: {
            LastBoard = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            slots_.AddEntriesFrom(ref input, _repeated_slots_codec);
            break;
          }
          case 18: {
            jackpots_.AddEntriesFrom(ref input, _repeated_jackpots_codec);
            break;
          }
          case 24: {
            LastBoard = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgPullTabsData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Slot : pb::IMessage<Slot>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Slot> _parser = new pb::MessageParser<Slot>(() => new Slot());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Slot> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgPullTabsData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Slot() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Slot(Slot other) : this() {
          _hasBits0 = other._hasBits0;
          eventId_ = other.eventId_;
          boardId_ = other.boardId_;
          heroId_ = other.heroId_;
          actionId_ = other.actionId_;
          redeemed_ = other.redeemed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Slot Clone() {
          return new Slot(this);
        }

        /// <summary>Field number for the "event_id" field.</summary>
        public const int EventIdFieldNumber = 1;
        private readonly static uint EventIdDefaultValue = 0;

        private uint eventId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EventId {
          get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            eventId_ = value;
          }
        }
        /// <summary>Gets whether the "event_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEventId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "event_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEventId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "board_id" field.</summary>
        public const int BoardIdFieldNumber = 2;
        private readonly static uint BoardIdDefaultValue = 0;

        private uint boardId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BoardId {
          get { if ((_hasBits0 & 2) != 0) { return boardId_; } else { return BoardIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            boardId_ = value;
          }
        }
        /// <summary>Gets whether the "board_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBoardId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "board_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBoardId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 3;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "action_id" field.</summary>
        public const int ActionIdFieldNumber = 4;
        private readonly static uint ActionIdDefaultValue = 0;

        private uint actionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActionId {
          get { if ((_hasBits0 & 8) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
          set {
            _hasBits0 |= 8;
            actionId_ = value;
          }
        }
        /// <summary>Gets whether the "action_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActionId {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "action_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActionId() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "redeemed" field.</summary>
        public const int RedeemedFieldNumber = 5;
        private readonly static bool RedeemedDefaultValue = false;

        private bool redeemed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Redeemed {
          get { if ((_hasBits0 & 16) != 0) { return redeemed_; } else { return RedeemedDefaultValue; } }
          set {
            _hasBits0 |= 16;
            redeemed_ = value;
          }
        }
        /// <summary>Gets whether the "redeemed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRedeemed {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "redeemed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRedeemed() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Slot);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Slot other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EventId != other.EventId) return false;
          if (BoardId != other.BoardId) return false;
          if (HeroId != other.HeroId) return false;
          if (ActionId != other.ActionId) return false;
          if (Redeemed != other.Redeemed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasEventId) hash ^= EventId.GetHashCode();
          if (HasBoardId) hash ^= BoardId.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasActionId) hash ^= ActionId.GetHashCode();
          if (HasRedeemed) hash ^= Redeemed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasEventId) {
            output.WriteRawTag(8);
            output.WriteUInt32(EventId);
          }
          if (HasBoardId) {
            output.WriteRawTag(16);
            output.WriteUInt32(BoardId);
          }
          if (HasHeroId) {
            output.WriteRawTag(24);
            output.WriteInt32(HeroId);
          }
          if (HasActionId) {
            output.WriteRawTag(32);
            output.WriteUInt32(ActionId);
          }
          if (HasRedeemed) {
            output.WriteRawTag(40);
            output.WriteBool(Redeemed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasEventId) {
            output.WriteRawTag(8);
            output.WriteUInt32(EventId);
          }
          if (HasBoardId) {
            output.WriteRawTag(16);
            output.WriteUInt32(BoardId);
          }
          if (HasHeroId) {
            output.WriteRawTag(24);
            output.WriteInt32(HeroId);
          }
          if (HasActionId) {
            output.WriteRawTag(32);
            output.WriteUInt32(ActionId);
          }
          if (HasRedeemed) {
            output.WriteRawTag(40);
            output.WriteBool(Redeemed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasEventId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
          }
          if (HasBoardId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoardId);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasActionId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionId);
          }
          if (HasRedeemed) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Slot other) {
          if (other == null) {
            return;
          }
          if (other.HasEventId) {
            EventId = other.EventId;
          }
          if (other.HasBoardId) {
            BoardId = other.BoardId;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasActionId) {
            ActionId = other.ActionId;
          }
          if (other.HasRedeemed) {
            Redeemed = other.Redeemed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                EventId = input.ReadUInt32();
                break;
              }
              case 16: {
                BoardId = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadInt32();
                break;
              }
              case 32: {
                ActionId = input.ReadUInt32();
                break;
              }
              case 40: {
                Redeemed = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                EventId = input.ReadUInt32();
                break;
              }
              case 16: {
                BoardId = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadInt32();
                break;
              }
              case 32: {
                ActionId = input.ReadUInt32();
                break;
              }
              case 40: {
                Redeemed = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Jackpot : pb::IMessage<Jackpot>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Jackpot> _parser = new pb::MessageParser<Jackpot>(() => new Jackpot());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Jackpot> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgPullTabsData.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Jackpot() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Jackpot(Jackpot other) : this() {
          _hasBits0 = other._hasBits0;
          boardId_ = other.boardId_;
          actionId_ = other.actionId_;
          heroId_ = other.heroId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Jackpot Clone() {
          return new Jackpot(this);
        }

        /// <summary>Field number for the "board_id" field.</summary>
        public const int BoardIdFieldNumber = 1;
        private readonly static uint BoardIdDefaultValue = 0;

        private uint boardId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BoardId {
          get { if ((_hasBits0 & 1) != 0) { return boardId_; } else { return BoardIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            boardId_ = value;
          }
        }
        /// <summary>Gets whether the "board_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBoardId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "board_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBoardId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "action_id" field.</summary>
        public const int ActionIdFieldNumber = 2;
        private readonly static uint ActionIdDefaultValue = 0;

        private uint actionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActionId {
          get { if ((_hasBits0 & 2) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            actionId_ = value;
          }
        }
        /// <summary>Gets whether the "action_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActionId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "action_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActionId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 3;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Jackpot);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Jackpot other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BoardId != other.BoardId) return false;
          if (ActionId != other.ActionId) return false;
          if (HeroId != other.HeroId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasBoardId) hash ^= BoardId.GetHashCode();
          if (HasActionId) hash ^= ActionId.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasBoardId) {
            output.WriteRawTag(8);
            output.WriteUInt32(BoardId);
          }
          if (HasActionId) {
            output.WriteRawTag(16);
            output.WriteUInt32(ActionId);
          }
          if (HasHeroId) {
            output.WriteRawTag(24);
            output.WriteInt32(HeroId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasBoardId) {
            output.WriteRawTag(8);
            output.WriteUInt32(BoardId);
          }
          if (HasActionId) {
            output.WriteRawTag(16);
            output.WriteUInt32(ActionId);
          }
          if (HasHeroId) {
            output.WriteRawTag(24);
            output.WriteInt32(HeroId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasBoardId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoardId);
          }
          if (HasActionId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionId);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Jackpot other) {
          if (other == null) {
            return;
          }
          if (other.HasBoardId) {
            BoardId = other.BoardId;
          }
          if (other.HasActionId) {
            ActionId = other.ActionId;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                BoardId = input.ReadUInt32();
                break;
              }
              case 16: {
                ActionId = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                BoardId = input.ReadUInt32();
                break;
              }
              case 16: {
                ActionId = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgUnderDraftData : pb::IMessage<CMsgUnderDraftData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgUnderDraftData> _parser = new pb::MessageParser<CMsgUnderDraftData>(() => new CMsgUnderDraftData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgUnderDraftData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgUnderDraftData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgUnderDraftData(CMsgUnderDraftData other) : this() {
      _hasBits0 = other._hasBits0;
      benchSlots_ = other.benchSlots_.Clone();
      shopSlots_ = other.shopSlots_.Clone();
      gold_ = other.gold_;
      totalGold_ = other.totalGold_;
      notRestorable_ = other.notRestorable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgUnderDraftData Clone() {
      return new CMsgUnderDraftData(this);
    }

    /// <summary>Field number for the "bench_slots" field.</summary>
    public const int BenchSlotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.BenchSlot> _repeated_benchSlots_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.BenchSlot.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.BenchSlot> benchSlots_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.BenchSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.BenchSlot> BenchSlots {
      get { return benchSlots_; }
    }

    /// <summary>Field number for the "shop_slots" field.</summary>
    public const int ShopSlotsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.ShopSlot> _repeated_shopSlots_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.ShopSlot.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.ShopSlot> shopSlots_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.ShopSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgUnderDraftData.Types.ShopSlot> ShopSlots {
      get { return shopSlots_; }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private readonly static uint GoldDefaultValue = 0;

    private uint gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gold {
      get { if ((_hasBits0 & 1) != 0) { return gold_; } else { return GoldDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gold_ = value;
      }
    }
    /// <summary>Gets whether the "gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGold {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGold() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "total_gold" field.</summary>
    public const int TotalGoldFieldNumber = 4;
    private readonly static uint TotalGoldDefaultValue = 0;

    private uint totalGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalGold {
      get { if ((_hasBits0 & 2) != 0) { return totalGold_; } else { return TotalGoldDefaultValue; } }
      set {
        _hasBits0 |= 2;
        totalGold_ = value;
      }
    }
    /// <summary>Gets whether the "total_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalGold {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "total_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalGold() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "not_restorable" field.</summary>
    public const int NotRestorableFieldNumber = 5;
    private readonly static bool NotRestorableDefaultValue = false;

    private bool notRestorable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NotRestorable {
      get { if ((_hasBits0 & 4) != 0) { return notRestorable_; } else { return NotRestorableDefaultValue; } }
      set {
        _hasBits0 |= 4;
        notRestorable_ = value;
      }
    }
    /// <summary>Gets whether the "not_restorable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNotRestorable {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "not_restorable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNotRestorable() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgUnderDraftData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgUnderDraftData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!benchSlots_.Equals(other.benchSlots_)) return false;
      if(!shopSlots_.Equals(other.shopSlots_)) return false;
      if (Gold != other.Gold) return false;
      if (TotalGold != other.TotalGold) return false;
      if (NotRestorable != other.NotRestorable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= benchSlots_.GetHashCode();
      hash ^= shopSlots_.GetHashCode();
      if (HasGold) hash ^= Gold.GetHashCode();
      if (HasTotalGold) hash ^= TotalGold.GetHashCode();
      if (HasNotRestorable) hash ^= NotRestorable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      benchSlots_.WriteTo(output, _repeated_benchSlots_codec);
      shopSlots_.WriteTo(output, _repeated_shopSlots_codec);
      if (HasGold) {
        output.WriteRawTag(24);
        output.WriteUInt32(Gold);
      }
      if (HasTotalGold) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalGold);
      }
      if (HasNotRestorable) {
        output.WriteRawTag(40);
        output.WriteBool(NotRestorable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      benchSlots_.WriteTo(ref output, _repeated_benchSlots_codec);
      shopSlots_.WriteTo(ref output, _repeated_shopSlots_codec);
      if (HasGold) {
        output.WriteRawTag(24);
        output.WriteUInt32(Gold);
      }
      if (HasTotalGold) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalGold);
      }
      if (HasNotRestorable) {
        output.WriteRawTag(40);
        output.WriteBool(NotRestorable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += benchSlots_.CalculateSize(_repeated_benchSlots_codec);
      size += shopSlots_.CalculateSize(_repeated_shopSlots_codec);
      if (HasGold) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gold);
      }
      if (HasTotalGold) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalGold);
      }
      if (HasNotRestorable) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgUnderDraftData other) {
      if (other == null) {
        return;
      }
      benchSlots_.Add(other.benchSlots_);
      shopSlots_.Add(other.shopSlots_);
      if (other.HasGold) {
        Gold = other.Gold;
      }
      if (other.HasTotalGold) {
        TotalGold = other.TotalGold;
      }
      if (other.HasNotRestorable) {
        NotRestorable = other.NotRestorable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            benchSlots_.AddEntriesFrom(input, _repeated_benchSlots_codec);
            break;
          }
          case 18: {
            shopSlots_.AddEntriesFrom(input, _repeated_shopSlots_codec);
            break;
          }
          case 24: {
            Gold = input.ReadUInt32();
            break;
          }
          case 32: {
            TotalGold = input.ReadUInt32();
            break;
          }
          case 40: {
            NotRestorable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            benchSlots_.AddEntriesFrom(ref input, _repeated_benchSlots_codec);
            break;
          }
          case 18: {
            shopSlots_.AddEntriesFrom(ref input, _repeated_shopSlots_codec);
            break;
          }
          case 24: {
            Gold = input.ReadUInt32();
            break;
          }
          case 32: {
            TotalGold = input.ReadUInt32();
            break;
          }
          case 40: {
            NotRestorable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgUnderDraftData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class BenchSlot : pb::IMessage<BenchSlot>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BenchSlot> _parser = new pb::MessageParser<BenchSlot>(() => new BenchSlot());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BenchSlot> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgUnderDraftData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BenchSlot() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BenchSlot(BenchSlot other) : this() {
          _hasBits0 = other._hasBits0;
          slotId_ = other.slotId_;
          heroId_ = other.heroId_;
          stars_ = other.stars_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BenchSlot Clone() {
          return new BenchSlot(this);
        }

        /// <summary>Field number for the "slot_id" field.</summary>
        public const int SlotIdFieldNumber = 1;
        private readonly static uint SlotIdDefaultValue = 0;

        private uint slotId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SlotId {
          get { if ((_hasBits0 & 1) != 0) { return slotId_; } else { return SlotIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            slotId_ = value;
          }
        }
        /// <summary>Gets whether the "slot_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSlotId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "slot_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSlotId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 2;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "stars" field.</summary>
        public const int StarsFieldNumber = 3;
        private readonly static uint StarsDefaultValue = 0;

        private uint stars_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Stars {
          get { if ((_hasBits0 & 4) != 0) { return stars_; } else { return StarsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            stars_ = value;
          }
        }
        /// <summary>Gets whether the "stars" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStars {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "stars" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStars() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BenchSlot);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BenchSlot other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SlotId != other.SlotId) return false;
          if (HeroId != other.HeroId) return false;
          if (Stars != other.Stars) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSlotId) hash ^= SlotId.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasStars) hash ^= Stars.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasSlotId) {
            output.WriteRawTag(8);
            output.WriteUInt32(SlotId);
          }
          if (HasHeroId) {
            output.WriteRawTag(16);
            output.WriteInt32(HeroId);
          }
          if (HasStars) {
            output.WriteRawTag(24);
            output.WriteUInt32(Stars);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasSlotId) {
            output.WriteRawTag(8);
            output.WriteUInt32(SlotId);
          }
          if (HasHeroId) {
            output.WriteRawTag(16);
            output.WriteInt32(HeroId);
          }
          if (HasStars) {
            output.WriteRawTag(24);
            output.WriteUInt32(Stars);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSlotId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasStars) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stars);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BenchSlot other) {
          if (other == null) {
            return;
          }
          if (other.HasSlotId) {
            SlotId = other.SlotId;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasStars) {
            Stars = other.Stars;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SlotId = input.ReadUInt32();
                break;
              }
              case 16: {
                HeroId = input.ReadInt32();
                break;
              }
              case 24: {
                Stars = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                SlotId = input.ReadUInt32();
                break;
              }
              case 16: {
                HeroId = input.ReadInt32();
                break;
              }
              case 24: {
                Stars = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class ShopSlot : pb::IMessage<ShopSlot>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ShopSlot> _parser = new pb::MessageParser<ShopSlot>(() => new ShopSlot());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ShopSlot> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgUnderDraftData.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShopSlot() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShopSlot(ShopSlot other) : this() {
          _hasBits0 = other._hasBits0;
          slotId_ = other.slotId_;
          heroId_ = other.heroId_;
          isSpecialReward_ = other.isSpecialReward_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShopSlot Clone() {
          return new ShopSlot(this);
        }

        /// <summary>Field number for the "slot_id" field.</summary>
        public const int SlotIdFieldNumber = 1;
        private readonly static uint SlotIdDefaultValue = 0;

        private uint slotId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SlotId {
          get { if ((_hasBits0 & 1) != 0) { return slotId_; } else { return SlotIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            slotId_ = value;
          }
        }
        /// <summary>Gets whether the "slot_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSlotId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "slot_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSlotId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 2;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "is_special_reward" field.</summary>
        public const int IsSpecialRewardFieldNumber = 3;
        private readonly static bool IsSpecialRewardDefaultValue = false;

        private bool isSpecialReward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsSpecialReward {
          get { if ((_hasBits0 & 4) != 0) { return isSpecialReward_; } else { return IsSpecialRewardDefaultValue; } }
          set {
            _hasBits0 |= 4;
            isSpecialReward_ = value;
          }
        }
        /// <summary>Gets whether the "is_special_reward" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsSpecialReward {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "is_special_reward" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsSpecialReward() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ShopSlot);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ShopSlot other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SlotId != other.SlotId) return false;
          if (HeroId != other.HeroId) return false;
          if (IsSpecialReward != other.IsSpecialReward) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSlotId) hash ^= SlotId.GetHashCode();
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasIsSpecialReward) hash ^= IsSpecialReward.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasSlotId) {
            output.WriteRawTag(8);
            output.WriteUInt32(SlotId);
          }
          if (HasHeroId) {
            output.WriteRawTag(16);
            output.WriteInt32(HeroId);
          }
          if (HasIsSpecialReward) {
            output.WriteRawTag(24);
            output.WriteBool(IsSpecialReward);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasSlotId) {
            output.WriteRawTag(8);
            output.WriteUInt32(SlotId);
          }
          if (HasHeroId) {
            output.WriteRawTag(16);
            output.WriteInt32(HeroId);
          }
          if (HasIsSpecialReward) {
            output.WriteRawTag(24);
            output.WriteBool(IsSpecialReward);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSlotId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
          }
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasIsSpecialReward) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ShopSlot other) {
          if (other == null) {
            return;
          }
          if (other.HasSlotId) {
            SlotId = other.SlotId;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasIsSpecialReward) {
            IsSpecialReward = other.IsSpecialReward;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SlotId = input.ReadUInt32();
                break;
              }
              case 16: {
                HeroId = input.ReadInt32();
                break;
              }
              case 24: {
                IsSpecialReward = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                SlotId = input.ReadUInt32();
                break;
              }
              case 16: {
                HeroId = input.ReadInt32();
                break;
              }
              case 24: {
                IsSpecialReward = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgPlayerTitleData : pb::IMessage<CMsgPlayerTitleData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPlayerTitleData> _parser = new pb::MessageParser<CMsgPlayerTitleData>(() => new CMsgPlayerTitleData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPlayerTitleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerTitleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerTitleData(CMsgPlayerTitleData other) : this() {
      _hasBits0 = other._hasBits0;
      title_ = other.title_.Clone();
      eventId_ = other.eventId_.Clone();
      active_ = other.active_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerTitleData Clone() {
      return new CMsgPlayerTitleData(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_title_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> title_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Title {
      get { return title_; }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_eventId_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> eventId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EventId {
      get { return eventId_; }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 3;
    private readonly static uint ActiveDefaultValue = 0;

    private uint active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Active {
      get { if ((_hasBits0 & 1) != 0) { return active_; } else { return ActiveDefaultValue; } }
      set {
        _hasBits0 |= 1;
        active_ = value;
      }
    }
    /// <summary>Gets whether the "active" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActive {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "active" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActive() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPlayerTitleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPlayerTitleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!title_.Equals(other.title_)) return false;
      if(!eventId_.Equals(other.eventId_)) return false;
      if (Active != other.Active) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= title_.GetHashCode();
      hash ^= eventId_.GetHashCode();
      if (HasActive) hash ^= Active.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      title_.WriteTo(output, _repeated_title_codec);
      eventId_.WriteTo(output, _repeated_eventId_codec);
      if (HasActive) {
        output.WriteRawTag(24);
        output.WriteUInt32(Active);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      title_.WriteTo(ref output, _repeated_title_codec);
      eventId_.WriteTo(ref output, _repeated_eventId_codec);
      if (HasActive) {
        output.WriteRawTag(24);
        output.WriteUInt32(Active);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += title_.CalculateSize(_repeated_title_codec);
      size += eventId_.CalculateSize(_repeated_eventId_codec);
      if (HasActive) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Active);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPlayerTitleData other) {
      if (other == null) {
        return;
      }
      title_.Add(other.title_);
      eventId_.Add(other.eventId_);
      if (other.HasActive) {
        Active = other.Active;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            title_.AddEntriesFrom(input, _repeated_title_codec);
            break;
          }
          case 18:
          case 16: {
            eventId_.AddEntriesFrom(input, _repeated_eventId_codec);
            break;
          }
          case 24: {
            Active = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            title_.AddEntriesFrom(ref input, _repeated_title_codec);
            break;
          }
          case 18:
          case 16: {
            eventId_.AddEntriesFrom(ref input, _repeated_eventId_codec);
            break;
          }
          case 24: {
            Active = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTATriviaQuestion : pb::IMessage<CMsgDOTATriviaQuestion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTATriviaQuestion> _parser = new pb::MessageParser<CMsgDOTATriviaQuestion>(() => new CMsgDOTATriviaQuestion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTATriviaQuestion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTATriviaQuestion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTATriviaQuestion(CMsgDOTATriviaQuestion other) : this() {
      _hasBits0 = other._hasBits0;
      questionId_ = other.questionId_;
      category_ = other.category_;
      timestamp_ = other.timestamp_;
      questionValue_ = other.questionValue_;
      answerValues_ = other.answerValues_.Clone();
      correctAnswerIndex_ = other.correctAnswerIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTATriviaQuestion Clone() {
      return new CMsgDOTATriviaQuestion(this);
    }

    /// <summary>Field number for the "question_id" field.</summary>
    public const int QuestionIdFieldNumber = 1;
    private readonly static uint QuestionIdDefaultValue = 0;

    private uint questionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuestionId {
      get { if ((_hasBits0 & 1) != 0) { return questionId_; } else { return QuestionIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questionId_ = value;
      }
    }
    /// <summary>Gets whether the "question_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestionId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "question_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestionId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EDOTATriviaQuestionCategory CategoryDefaultValue = global::Steam.Protos.Dota2.EDOTATriviaQuestionCategory.KEdotatriviaQuestionCategoryAbilityIcon;

    private global::Steam.Protos.Dota2.EDOTATriviaQuestionCategory category_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EDOTATriviaQuestionCategory Category {
      get { if ((_hasBits0 & 2) != 0) { return category_; } else { return CategoryDefaultValue; } }
      set {
        _hasBits0 |= 2;
        category_ = value;
      }
    }
    /// <summary>Gets whether the "category" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCategory {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "category" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCategory() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private readonly static uint TimestampDefaultValue = 0;

    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { if ((_hasBits0 & 4) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "question_value" field.</summary>
    public const int QuestionValueFieldNumber = 4;
    private readonly static string QuestionValueDefaultValue = "";

    private string questionValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuestionValue {
      get { return questionValue_ ?? QuestionValueDefaultValue; }
      set {
        questionValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "question_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestionValue {
      get { return questionValue_ != null; }
    }
    /// <summary>Clears the value of the "question_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestionValue() {
      questionValue_ = null;
    }

    /// <summary>Field number for the "answer_values" field.</summary>
    public const int AnswerValuesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_answerValues_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> answerValues_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AnswerValues {
      get { return answerValues_; }
    }

    /// <summary>Field number for the "correct_answer_index" field.</summary>
    public const int CorrectAnswerIndexFieldNumber = 6;
    private readonly static uint CorrectAnswerIndexDefaultValue = 0;

    private uint correctAnswerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CorrectAnswerIndex {
      get { if ((_hasBits0 & 8) != 0) { return correctAnswerIndex_; } else { return CorrectAnswerIndexDefaultValue; } }
      set {
        _hasBits0 |= 8;
        correctAnswerIndex_ = value;
      }
    }
    /// <summary>Gets whether the "correct_answer_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCorrectAnswerIndex {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "correct_answer_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCorrectAnswerIndex() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTATriviaQuestion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTATriviaQuestion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestionId != other.QuestionId) return false;
      if (Category != other.Category) return false;
      if (Timestamp != other.Timestamp) return false;
      if (QuestionValue != other.QuestionValue) return false;
      if(!answerValues_.Equals(other.answerValues_)) return false;
      if (CorrectAnswerIndex != other.CorrectAnswerIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestionId) hash ^= QuestionId.GetHashCode();
      if (HasCategory) hash ^= Category.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasQuestionValue) hash ^= QuestionValue.GetHashCode();
      hash ^= answerValues_.GetHashCode();
      if (HasCorrectAnswerIndex) hash ^= CorrectAnswerIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestionId) {
        output.WriteRawTag(8);
        output.WriteUInt32(QuestionId);
      }
      if (HasCategory) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Category);
      }
      if (HasTimestamp) {
        output.WriteRawTag(24);
        output.WriteUInt32(Timestamp);
      }
      if (HasQuestionValue) {
        output.WriteRawTag(34);
        output.WriteString(QuestionValue);
      }
      answerValues_.WriteTo(output, _repeated_answerValues_codec);
      if (HasCorrectAnswerIndex) {
        output.WriteRawTag(48);
        output.WriteUInt32(CorrectAnswerIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestionId) {
        output.WriteRawTag(8);
        output.WriteUInt32(QuestionId);
      }
      if (HasCategory) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Category);
      }
      if (HasTimestamp) {
        output.WriteRawTag(24);
        output.WriteUInt32(Timestamp);
      }
      if (HasQuestionValue) {
        output.WriteRawTag(34);
        output.WriteString(QuestionValue);
      }
      answerValues_.WriteTo(ref output, _repeated_answerValues_codec);
      if (HasCorrectAnswerIndex) {
        output.WriteRawTag(48);
        output.WriteUInt32(CorrectAnswerIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestionId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuestionId);
      }
      if (HasCategory) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (HasQuestionValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuestionValue);
      }
      size += answerValues_.CalculateSize(_repeated_answerValues_codec);
      if (HasCorrectAnswerIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CorrectAnswerIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTATriviaQuestion other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestionId) {
        QuestionId = other.QuestionId;
      }
      if (other.HasCategory) {
        Category = other.Category;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasQuestionValue) {
        QuestionValue = other.QuestionValue;
      }
      answerValues_.Add(other.answerValues_);
      if (other.HasCorrectAnswerIndex) {
        CorrectAnswerIndex = other.CorrectAnswerIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestionId = input.ReadUInt32();
            break;
          }
          case 16: {
            Category = (global::Steam.Protos.Dota2.EDOTATriviaQuestionCategory) input.ReadEnum();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 34: {
            QuestionValue = input.ReadString();
            break;
          }
          case 42: {
            answerValues_.AddEntriesFrom(input, _repeated_answerValues_codec);
            break;
          }
          case 48: {
            CorrectAnswerIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestionId = input.ReadUInt32();
            break;
          }
          case 16: {
            Category = (global::Steam.Protos.Dota2.EDOTATriviaQuestionCategory) input.ReadEnum();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 34: {
            QuestionValue = input.ReadString();
            break;
          }
          case 42: {
            answerValues_.AddEntriesFrom(ref input, _repeated_answerValues_codec);
            break;
          }
          case 48: {
            CorrectAnswerIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTATriviaQuestionAnswersSummary : pb::IMessage<CMsgDOTATriviaQuestionAnswersSummary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTATriviaQuestionAnswersSummary> _parser = new pb::MessageParser<CMsgDOTATriviaQuestionAnswersSummary>(() => new CMsgDOTATriviaQuestionAnswersSummary());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTATriviaQuestionAnswersSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTATriviaQuestionAnswersSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTATriviaQuestionAnswersSummary(CMsgDOTATriviaQuestionAnswersSummary other) : this() {
      _hasBits0 = other._hasBits0;
      summaryAvailable_ = other.summaryAvailable_;
      pickedCount_ = other.pickedCount_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTATriviaQuestionAnswersSummary Clone() {
      return new CMsgDOTATriviaQuestionAnswersSummary(this);
    }

    /// <summary>Field number for the "summary_available" field.</summary>
    public const int SummaryAvailableFieldNumber = 1;
    private readonly static bool SummaryAvailableDefaultValue = false;

    private bool summaryAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SummaryAvailable {
      get { if ((_hasBits0 & 1) != 0) { return summaryAvailable_; } else { return SummaryAvailableDefaultValue; } }
      set {
        _hasBits0 |= 1;
        summaryAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "summary_available" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSummaryAvailable {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "summary_available" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSummaryAvailable() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "picked_count" field.</summary>
    public const int PickedCountFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_pickedCount_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> pickedCount_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PickedCount {
      get { return pickedCount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTATriviaQuestionAnswersSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTATriviaQuestionAnswersSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SummaryAvailable != other.SummaryAvailable) return false;
      if(!pickedCount_.Equals(other.pickedCount_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSummaryAvailable) hash ^= SummaryAvailable.GetHashCode();
      hash ^= pickedCount_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSummaryAvailable) {
        output.WriteRawTag(8);
        output.WriteBool(SummaryAvailable);
      }
      pickedCount_.WriteTo(output, _repeated_pickedCount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSummaryAvailable) {
        output.WriteRawTag(8);
        output.WriteBool(SummaryAvailable);
      }
      pickedCount_.WriteTo(ref output, _repeated_pickedCount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSummaryAvailable) {
        size += 1 + 1;
      }
      size += pickedCount_.CalculateSize(_repeated_pickedCount_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTATriviaQuestionAnswersSummary other) {
      if (other == null) {
        return;
      }
      if (other.HasSummaryAvailable) {
        SummaryAvailable = other.SummaryAvailable;
      }
      pickedCount_.Add(other.pickedCount_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SummaryAvailable = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            pickedCount_.AddEntriesFrom(input, _repeated_pickedCount_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SummaryAvailable = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            pickedCount_.AddEntriesFrom(ref input, _repeated_pickedCount_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameDataSpecialValueBonus : pb::IMessage<CMsgGameDataSpecialValueBonus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataSpecialValueBonus> _parser = new pb::MessageParser<CMsgGameDataSpecialValueBonus>(() => new CMsgGameDataSpecialValueBonus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataSpecialValueBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataSpecialValueBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataSpecialValueBonus(CMsgGameDataSpecialValueBonus other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      value_ = other.value_;
      operation_ = other.operation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataSpecialValueBonus Clone() {
      return new CMsgGameDataSpecialValueBonus(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static float ValueDefaultValue = 0F;

    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 3;
    private readonly static uint OperationDefaultValue = 0;

    private uint operation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Operation {
      get { if ((_hasBits0 & 2) != 0) { return operation_; } else { return OperationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        operation_ = value;
      }
    }
    /// <summary>Gets whether the "operation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOperation {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "operation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOperation() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataSpecialValueBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataSpecialValueBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (Operation != other.Operation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (HasOperation) hash ^= Operation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (HasOperation) {
        output.WriteRawTag(24);
        output.WriteUInt32(Operation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (HasOperation) {
        output.WriteRawTag(24);
        output.WriteUInt32(Operation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasValue) {
        size += 1 + 4;
      }
      if (HasOperation) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Operation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataSpecialValueBonus other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasOperation) {
        Operation = other.Operation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
          case 24: {
            Operation = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
          case 24: {
            Operation = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameDataSpecialValues : pb::IMessage<CMsgGameDataSpecialValues>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataSpecialValues> _parser = new pb::MessageParser<CMsgGameDataSpecialValues>(() => new CMsgGameDataSpecialValues());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataSpecialValues> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataSpecialValues() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataSpecialValues(CMsgGameDataSpecialValues other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      valuesFloat_ = other.valuesFloat_.Clone();
      isPercentage_ = other.isPercentage_;
      headingLoc_ = other.headingLoc_;
      bonuses_ = other.bonuses_.Clone();
      valuesShard_ = other.valuesShard_.Clone();
      valuesScepter_ = other.valuesScepter_.Clone();
      facetBonus_ = other.facetBonus_ != null ? other.facetBonus_.Clone() : null;
      requiredFacet_ = other.requiredFacet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataSpecialValues Clone() {
      return new CMsgGameDataSpecialValues(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "values_float" field.</summary>
    public const int ValuesFloatFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_valuesFloat_codec
        = pb::FieldCodec.ForFloat(21);
    private readonly pbc::RepeatedField<float> valuesFloat_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ValuesFloat {
      get { return valuesFloat_; }
    }

    /// <summary>Field number for the "is_percentage" field.</summary>
    public const int IsPercentageFieldNumber = 4;
    private readonly static bool IsPercentageDefaultValue = false;

    private bool isPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPercentage {
      get { if ((_hasBits0 & 1) != 0) { return isPercentage_; } else { return IsPercentageDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isPercentage_ = value;
      }
    }
    /// <summary>Gets whether the "is_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPercentage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPercentage() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "heading_loc" field.</summary>
    public const int HeadingLocFieldNumber = 5;
    private readonly static string HeadingLocDefaultValue = "";

    private string headingLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadingLoc {
      get { return headingLoc_ ?? HeadingLocDefaultValue; }
      set {
        headingLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "heading_loc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeadingLoc {
      get { return headingLoc_ != null; }
    }
    /// <summary>Clears the value of the "heading_loc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeadingLoc() {
      headingLoc_ = null;
    }

    /// <summary>Field number for the "bonuses" field.</summary>
    public const int BonusesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataSpecialValueBonus> _repeated_bonuses_codec
        = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CMsgGameDataSpecialValueBonus.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataSpecialValueBonus> bonuses_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataSpecialValueBonus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataSpecialValueBonus> Bonuses {
      get { return bonuses_; }
    }

    /// <summary>Field number for the "values_shard" field.</summary>
    public const int ValuesShardFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_valuesShard_codec
        = pb::FieldCodec.ForFloat(61);
    private readonly pbc::RepeatedField<float> valuesShard_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ValuesShard {
      get { return valuesShard_; }
    }

    /// <summary>Field number for the "values_scepter" field.</summary>
    public const int ValuesScepterFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_valuesScepter_codec
        = pb::FieldCodec.ForFloat(69);
    private readonly pbc::RepeatedField<float> valuesScepter_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ValuesScepter {
      get { return valuesScepter_; }
    }

    /// <summary>Field number for the "facet_bonus" field.</summary>
    public const int FacetBonusFieldNumber = 9;
    private global::Steam.Protos.Dota2.CMsgGameDataFacetAbilityBonus facetBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgGameDataFacetAbilityBonus FacetBonus {
      get { return facetBonus_; }
      set {
        facetBonus_ = value;
      }
    }

    /// <summary>Field number for the "required_facet" field.</summary>
    public const int RequiredFacetFieldNumber = 10;
    private readonly static string RequiredFacetDefaultValue = "";

    private string requiredFacet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequiredFacet {
      get { return requiredFacet_ ?? RequiredFacetDefaultValue; }
      set {
        requiredFacet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "required_facet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequiredFacet {
      get { return requiredFacet_ != null; }
    }
    /// <summary>Clears the value of the "required_facet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequiredFacet() {
      requiredFacet_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataSpecialValues);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataSpecialValues other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!valuesFloat_.Equals(other.valuesFloat_)) return false;
      if (IsPercentage != other.IsPercentage) return false;
      if (HeadingLoc != other.HeadingLoc) return false;
      if(!bonuses_.Equals(other.bonuses_)) return false;
      if(!valuesShard_.Equals(other.valuesShard_)) return false;
      if(!valuesScepter_.Equals(other.valuesScepter_)) return false;
      if (!object.Equals(FacetBonus, other.FacetBonus)) return false;
      if (RequiredFacet != other.RequiredFacet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      hash ^= valuesFloat_.GetHashCode();
      if (HasIsPercentage) hash ^= IsPercentage.GetHashCode();
      if (HasHeadingLoc) hash ^= HeadingLoc.GetHashCode();
      hash ^= bonuses_.GetHashCode();
      hash ^= valuesShard_.GetHashCode();
      hash ^= valuesScepter_.GetHashCode();
      if (facetBonus_ != null) hash ^= FacetBonus.GetHashCode();
      if (HasRequiredFacet) hash ^= RequiredFacet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      valuesFloat_.WriteTo(output, _repeated_valuesFloat_codec);
      if (HasIsPercentage) {
        output.WriteRawTag(32);
        output.WriteBool(IsPercentage);
      }
      if (HasHeadingLoc) {
        output.WriteRawTag(42);
        output.WriteString(HeadingLoc);
      }
      bonuses_.WriteTo(output, _repeated_bonuses_codec);
      valuesShard_.WriteTo(output, _repeated_valuesShard_codec);
      valuesScepter_.WriteTo(output, _repeated_valuesScepter_codec);
      if (facetBonus_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FacetBonus);
      }
      if (HasRequiredFacet) {
        output.WriteRawTag(82);
        output.WriteString(RequiredFacet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      valuesFloat_.WriteTo(ref output, _repeated_valuesFloat_codec);
      if (HasIsPercentage) {
        output.WriteRawTag(32);
        output.WriteBool(IsPercentage);
      }
      if (HasHeadingLoc) {
        output.WriteRawTag(42);
        output.WriteString(HeadingLoc);
      }
      bonuses_.WriteTo(ref output, _repeated_bonuses_codec);
      valuesShard_.WriteTo(ref output, _repeated_valuesShard_codec);
      valuesScepter_.WriteTo(ref output, _repeated_valuesScepter_codec);
      if (facetBonus_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FacetBonus);
      }
      if (HasRequiredFacet) {
        output.WriteRawTag(82);
        output.WriteString(RequiredFacet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += valuesFloat_.CalculateSize(_repeated_valuesFloat_codec);
      if (HasIsPercentage) {
        size += 1 + 1;
      }
      if (HasHeadingLoc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadingLoc);
      }
      size += bonuses_.CalculateSize(_repeated_bonuses_codec);
      size += valuesShard_.CalculateSize(_repeated_valuesShard_codec);
      size += valuesScepter_.CalculateSize(_repeated_valuesScepter_codec);
      if (facetBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FacetBonus);
      }
      if (HasRequiredFacet) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequiredFacet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataSpecialValues other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      valuesFloat_.Add(other.valuesFloat_);
      if (other.HasIsPercentage) {
        IsPercentage = other.IsPercentage;
      }
      if (other.HasHeadingLoc) {
        HeadingLoc = other.HeadingLoc;
      }
      bonuses_.Add(other.bonuses_);
      valuesShard_.Add(other.valuesShard_);
      valuesScepter_.Add(other.valuesScepter_);
      if (other.facetBonus_ != null) {
        if (facetBonus_ == null) {
          FacetBonus = new global::Steam.Protos.Dota2.CMsgGameDataFacetAbilityBonus();
        }
        FacetBonus.MergeFrom(other.FacetBonus);
      }
      if (other.HasRequiredFacet) {
        RequiredFacet = other.RequiredFacet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 21: {
            valuesFloat_.AddEntriesFrom(input, _repeated_valuesFloat_codec);
            break;
          }
          case 32: {
            IsPercentage = input.ReadBool();
            break;
          }
          case 42: {
            HeadingLoc = input.ReadString();
            break;
          }
          case 50: {
            bonuses_.AddEntriesFrom(input, _repeated_bonuses_codec);
            break;
          }
          case 58:
          case 61: {
            valuesShard_.AddEntriesFrom(input, _repeated_valuesShard_codec);
            break;
          }
          case 66:
          case 69: {
            valuesScepter_.AddEntriesFrom(input, _repeated_valuesScepter_codec);
            break;
          }
          case 74: {
            if (facetBonus_ == null) {
              FacetBonus = new global::Steam.Protos.Dota2.CMsgGameDataFacetAbilityBonus();
            }
            input.ReadMessage(FacetBonus);
            break;
          }
          case 82: {
            RequiredFacet = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 21: {
            valuesFloat_.AddEntriesFrom(ref input, _repeated_valuesFloat_codec);
            break;
          }
          case 32: {
            IsPercentage = input.ReadBool();
            break;
          }
          case 42: {
            HeadingLoc = input.ReadString();
            break;
          }
          case 50: {
            bonuses_.AddEntriesFrom(ref input, _repeated_bonuses_codec);
            break;
          }
          case 58:
          case 61: {
            valuesShard_.AddEntriesFrom(ref input, _repeated_valuesShard_codec);
            break;
          }
          case 66:
          case 69: {
            valuesScepter_.AddEntriesFrom(ref input, _repeated_valuesScepter_codec);
            break;
          }
          case 74: {
            if (facetBonus_ == null) {
              FacetBonus = new global::Steam.Protos.Dota2.CMsgGameDataFacetAbilityBonus();
            }
            input.ReadMessage(FacetBonus);
            break;
          }
          case 82: {
            RequiredFacet = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameDataFacetAbilityBonus : pb::IMessage<CMsgGameDataFacetAbilityBonus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataFacetAbilityBonus> _parser = new pb::MessageParser<CMsgGameDataFacetAbilityBonus>(() => new CMsgGameDataFacetAbilityBonus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataFacetAbilityBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataFacetAbilityBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataFacetAbilityBonus(CMsgGameDataFacetAbilityBonus other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      values_ = other.values_.Clone();
      operation_ = other.operation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataFacetAbilityBonus Clone() {
      return new CMsgGameDataFacetAbilityBonus(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_values_codec
        = pb::FieldCodec.ForFloat(21);
    private readonly pbc::RepeatedField<float> values_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 3;
    private readonly static uint OperationDefaultValue = 0;

    private uint operation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Operation {
      get { if ((_hasBits0 & 1) != 0) { return operation_; } else { return OperationDefaultValue; } }
      set {
        _hasBits0 |= 1;
        operation_ = value;
      }
    }
    /// <summary>Gets whether the "operation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOperation {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "operation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOperation() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataFacetAbilityBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataFacetAbilityBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!values_.Equals(other.values_)) return false;
      if (Operation != other.Operation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      hash ^= values_.GetHashCode();
      if (HasOperation) hash ^= Operation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (HasOperation) {
        output.WriteRawTag(24);
        output.WriteUInt32(Operation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      values_.WriteTo(ref output, _repeated_values_codec);
      if (HasOperation) {
        output.WriteRawTag(24);
        output.WriteUInt32(Operation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (HasOperation) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Operation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataFacetAbilityBonus other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      values_.Add(other.values_);
      if (other.HasOperation) {
        Operation = other.Operation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 21: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 24: {
            Operation = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 21: {
            values_.AddEntriesFrom(ref input, _repeated_values_codec);
            break;
          }
          case 24: {
            Operation = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameDataAbilityOrItem : pb::IMessage<CMsgGameDataAbilityOrItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataAbilityOrItem> _parser = new pb::MessageParser<CMsgGameDataAbilityOrItem>(() => new CMsgGameDataAbilityOrItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataAbilityOrItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataAbilityOrItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataAbilityOrItem(CMsgGameDataAbilityOrItem other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      nameLoc_ = other.nameLoc_;
      descLoc_ = other.descLoc_;
      loreLoc_ = other.loreLoc_;
      notesLoc_ = other.notesLoc_.Clone();
      shardLoc_ = other.shardLoc_;
      scepterLoc_ = other.scepterLoc_;
      facetsLoc_ = other.facetsLoc_.Clone();
      type_ = other.type_;
      behavior_ = other.behavior_;
      targetTeam_ = other.targetTeam_;
      targetType_ = other.targetType_;
      flags_ = other.flags_;
      damage_ = other.damage_;
      immunity_ = other.immunity_;
      dispellable_ = other.dispellable_;
      maxLevel_ = other.maxLevel_;
      castRanges_ = other.castRanges_.Clone();
      castPoints_ = other.castPoints_.Clone();
      channelTimes_ = other.channelTimes_.Clone();
      cooldowns_ = other.cooldowns_.Clone();
      durations_ = other.durations_.Clone();
      damages_ = other.damages_.Clone();
      manaCosts_ = other.manaCosts_.Clone();
      goldCosts_ = other.goldCosts_.Clone();
      healthCosts_ = other.healthCosts_.Clone();
      specialValues_ = other.specialValues_.Clone();
      isItem_ = other.isItem_;
      abilityHasScepter_ = other.abilityHasScepter_;
      abilityHasShard_ = other.abilityHasShard_;
      abilityIsGrantedByScepter_ = other.abilityIsGrantedByScepter_;
      abilityIsGrantedByShard_ = other.abilityIsGrantedByShard_;
      abilityIsInnate_ = other.abilityIsInnate_;
      itemCost_ = other.itemCost_;
      itemInitialCharges_ = other.itemInitialCharges_;
      itemNeutralTier_ = other.itemNeutralTier_;
      itemStockMax_ = other.itemStockMax_;
      itemStockTime_ = other.itemStockTime_;
      itemQuality_ = other.itemQuality_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataAbilityOrItem Clone() {
      return new CMsgGameDataAbilityOrItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static int IdDefaultValue = -1;

    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "name_loc" field.</summary>
    public const int NameLocFieldNumber = 5;
    private readonly static string NameLocDefaultValue = "";

    private string nameLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameLoc {
      get { return nameLoc_ ?? NameLocDefaultValue; }
      set {
        nameLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name_loc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNameLoc {
      get { return nameLoc_ != null; }
    }
    /// <summary>Clears the value of the "name_loc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNameLoc() {
      nameLoc_ = null;
    }

    /// <summary>Field number for the "desc_loc" field.</summary>
    public const int DescLocFieldNumber = 6;
    private readonly static string DescLocDefaultValue = "";

    private string descLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescLoc {
      get { return descLoc_ ?? DescLocDefaultValue; }
      set {
        descLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "desc_loc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescLoc {
      get { return descLoc_ != null; }
    }
    /// <summary>Clears the value of the "desc_loc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescLoc() {
      descLoc_ = null;
    }

    /// <summary>Field number for the "lore_loc" field.</summary>
    public const int LoreLocFieldNumber = 7;
    private readonly static string LoreLocDefaultValue = "";

    private string loreLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoreLoc {
      get { return loreLoc_ ?? LoreLocDefaultValue; }
      set {
        loreLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "lore_loc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLoreLoc {
      get { return loreLoc_ != null; }
    }
    /// <summary>Clears the value of the "lore_loc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLoreLoc() {
      loreLoc_ = null;
    }

    /// <summary>Field number for the "notes_loc" field.</summary>
    public const int NotesLocFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_notesLoc_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> notesLoc_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NotesLoc {
      get { return notesLoc_; }
    }

    /// <summary>Field number for the "shard_loc" field.</summary>
    public const int ShardLocFieldNumber = 9;
    private readonly static string ShardLocDefaultValue = "";

    private string shardLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardLoc {
      get { return shardLoc_ ?? ShardLocDefaultValue; }
      set {
        shardLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shard_loc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShardLoc {
      get { return shardLoc_ != null; }
    }
    /// <summary>Clears the value of the "shard_loc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShardLoc() {
      shardLoc_ = null;
    }

    /// <summary>Field number for the "scepter_loc" field.</summary>
    public const int ScepterLocFieldNumber = 10;
    private readonly static string ScepterLocDefaultValue = "";

    private string scepterLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScepterLoc {
      get { return scepterLoc_ ?? ScepterLocDefaultValue; }
      set {
        scepterLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "scepter_loc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScepterLoc {
      get { return scepterLoc_ != null; }
    }
    /// <summary>Clears the value of the "scepter_loc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScepterLoc() {
      scepterLoc_ = null;
    }

    /// <summary>Field number for the "facets_loc" field.</summary>
    public const int FacetsLocFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_facetsLoc_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> facetsLoc_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FacetsLoc {
      get { return facetsLoc_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 20;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "behavior" field.</summary>
    public const int BehaviorFieldNumber = 21;
    private readonly static ulong BehaviorDefaultValue = 0UL;

    private ulong behavior_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Behavior {
      get { if ((_hasBits0 & 4) != 0) { return behavior_; } else { return BehaviorDefaultValue; } }
      set {
        _hasBits0 |= 4;
        behavior_ = value;
      }
    }
    /// <summary>Gets whether the "behavior" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBehavior {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "behavior" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBehavior() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "target_team" field.</summary>
    public const int TargetTeamFieldNumber = 22;
    private readonly static uint TargetTeamDefaultValue = 0;

    private uint targetTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetTeam {
      get { if ((_hasBits0 & 8) != 0) { return targetTeam_; } else { return TargetTeamDefaultValue; } }
      set {
        _hasBits0 |= 8;
        targetTeam_ = value;
      }
    }
    /// <summary>Gets whether the "target_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetTeam {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "target_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetTeam() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "target_type" field.</summary>
    public const int TargetTypeFieldNumber = 23;
    private readonly static uint TargetTypeDefaultValue = 0;

    private uint targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetType {
      get { if ((_hasBits0 & 16) != 0) { return targetType_; } else { return TargetTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        targetType_ = value;
      }
    }
    /// <summary>Gets whether the "target_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "target_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 24;
    private readonly static uint FlagsDefaultValue = 0;

    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { if ((_hasBits0 & 32) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 25;
    private readonly static uint DamageDefaultValue = 0;

    private uint damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damage {
      get { if ((_hasBits0 & 64) != 0) { return damage_; } else { return DamageDefaultValue; } }
      set {
        _hasBits0 |= 64;
        damage_ = value;
      }
    }
    /// <summary>Gets whether the "damage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamage {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "damage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamage() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "immunity" field.</summary>
    public const int ImmunityFieldNumber = 26;
    private readonly static uint ImmunityDefaultValue = 0;

    private uint immunity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Immunity {
      get { if ((_hasBits0 & 128) != 0) { return immunity_; } else { return ImmunityDefaultValue; } }
      set {
        _hasBits0 |= 128;
        immunity_ = value;
      }
    }
    /// <summary>Gets whether the "immunity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImmunity {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "immunity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImmunity() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "dispellable" field.</summary>
    public const int DispellableFieldNumber = 27;
    private readonly static uint DispellableDefaultValue = 0;

    private uint dispellable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dispellable {
      get { if ((_hasBits0 & 256) != 0) { return dispellable_; } else { return DispellableDefaultValue; } }
      set {
        _hasBits0 |= 256;
        dispellable_ = value;
      }
    }
    /// <summary>Gets whether the "dispellable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDispellable {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "dispellable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDispellable() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "max_level" field.</summary>
    public const int MaxLevelFieldNumber = 28;
    private readonly static uint MaxLevelDefaultValue = 0;

    private uint maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxLevel {
      get { if ((_hasBits0 & 512) != 0) { return maxLevel_; } else { return MaxLevelDefaultValue; } }
      set {
        _hasBits0 |= 512;
        maxLevel_ = value;
      }
    }
    /// <summary>Gets whether the "max_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxLevel {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "max_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxLevel() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "cast_ranges" field.</summary>
    public const int CastRangesFieldNumber = 30;
    private static readonly pb::FieldCodec<uint> _repeated_castRanges_codec
        = pb::FieldCodec.ForUInt32(240);
    private readonly pbc::RepeatedField<uint> castRanges_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CastRanges {
      get { return castRanges_; }
    }

    /// <summary>Field number for the "cast_points" field.</summary>
    public const int CastPointsFieldNumber = 31;
    private static readonly pb::FieldCodec<float> _repeated_castPoints_codec
        = pb::FieldCodec.ForFloat(253);
    private readonly pbc::RepeatedField<float> castPoints_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> CastPoints {
      get { return castPoints_; }
    }

    /// <summary>Field number for the "channel_times" field.</summary>
    public const int ChannelTimesFieldNumber = 32;
    private static readonly pb::FieldCodec<float> _repeated_channelTimes_codec
        = pb::FieldCodec.ForFloat(261);
    private readonly pbc::RepeatedField<float> channelTimes_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ChannelTimes {
      get { return channelTimes_; }
    }

    /// <summary>Field number for the "cooldowns" field.</summary>
    public const int CooldownsFieldNumber = 33;
    private static readonly pb::FieldCodec<float> _repeated_cooldowns_codec
        = pb::FieldCodec.ForFloat(269);
    private readonly pbc::RepeatedField<float> cooldowns_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Cooldowns {
      get { return cooldowns_; }
    }

    /// <summary>Field number for the "durations" field.</summary>
    public const int DurationsFieldNumber = 34;
    private static readonly pb::FieldCodec<float> _repeated_durations_codec
        = pb::FieldCodec.ForFloat(277);
    private readonly pbc::RepeatedField<float> durations_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Durations {
      get { return durations_; }
    }

    /// <summary>Field number for the "damages" field.</summary>
    public const int DamagesFieldNumber = 35;
    private static readonly pb::FieldCodec<uint> _repeated_damages_codec
        = pb::FieldCodec.ForUInt32(280);
    private readonly pbc::RepeatedField<uint> damages_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Damages {
      get { return damages_; }
    }

    /// <summary>Field number for the "mana_costs" field.</summary>
    public const int ManaCostsFieldNumber = 36;
    private static readonly pb::FieldCodec<uint> _repeated_manaCosts_codec
        = pb::FieldCodec.ForUInt32(288);
    private readonly pbc::RepeatedField<uint> manaCosts_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ManaCosts {
      get { return manaCosts_; }
    }

    /// <summary>Field number for the "gold_costs" field.</summary>
    public const int GoldCostsFieldNumber = 37;
    private static readonly pb::FieldCodec<uint> _repeated_goldCosts_codec
        = pb::FieldCodec.ForUInt32(296);
    private readonly pbc::RepeatedField<uint> goldCosts_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GoldCosts {
      get { return goldCosts_; }
    }

    /// <summary>Field number for the "health_costs" field.</summary>
    public const int HealthCostsFieldNumber = 38;
    private static readonly pb::FieldCodec<uint> _repeated_healthCosts_codec
        = pb::FieldCodec.ForUInt32(304);
    private readonly pbc::RepeatedField<uint> healthCosts_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> HealthCosts {
      get { return healthCosts_; }
    }

    /// <summary>Field number for the "special_values" field.</summary>
    public const int SpecialValuesFieldNumber = 40;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataSpecialValues> _repeated_specialValues_codec
        = pb::FieldCodec.ForMessage(322, global::Steam.Protos.Dota2.CMsgGameDataSpecialValues.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataSpecialValues> specialValues_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataSpecialValues>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataSpecialValues> SpecialValues {
      get { return specialValues_; }
    }

    /// <summary>Field number for the "is_item" field.</summary>
    public const int IsItemFieldNumber = 50;
    private readonly static bool IsItemDefaultValue = false;

    private bool isItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsItem {
      get { if ((_hasBits0 & 1024) != 0) { return isItem_; } else { return IsItemDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        isItem_ = value;
      }
    }
    /// <summary>Gets whether the "is_item" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsItem {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "is_item" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsItem() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "ability_has_scepter" field.</summary>
    public const int AbilityHasScepterFieldNumber = 60;
    private readonly static bool AbilityHasScepterDefaultValue = false;

    private bool abilityHasScepter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AbilityHasScepter {
      get { if ((_hasBits0 & 2048) != 0) { return abilityHasScepter_; } else { return AbilityHasScepterDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        abilityHasScepter_ = value;
      }
    }
    /// <summary>Gets whether the "ability_has_scepter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityHasScepter {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "ability_has_scepter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityHasScepter() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "ability_has_shard" field.</summary>
    public const int AbilityHasShardFieldNumber = 61;
    private readonly static bool AbilityHasShardDefaultValue = false;

    private bool abilityHasShard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AbilityHasShard {
      get { if ((_hasBits0 & 4096) != 0) { return abilityHasShard_; } else { return AbilityHasShardDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        abilityHasShard_ = value;
      }
    }
    /// <summary>Gets whether the "ability_has_shard" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityHasShard {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "ability_has_shard" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityHasShard() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "ability_is_granted_by_scepter" field.</summary>
    public const int AbilityIsGrantedByScepterFieldNumber = 62;
    private readonly static bool AbilityIsGrantedByScepterDefaultValue = false;

    private bool abilityIsGrantedByScepter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AbilityIsGrantedByScepter {
      get { if ((_hasBits0 & 8192) != 0) { return abilityIsGrantedByScepter_; } else { return AbilityIsGrantedByScepterDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        abilityIsGrantedByScepter_ = value;
      }
    }
    /// <summary>Gets whether the "ability_is_granted_by_scepter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityIsGrantedByScepter {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "ability_is_granted_by_scepter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityIsGrantedByScepter() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "ability_is_granted_by_shard" field.</summary>
    public const int AbilityIsGrantedByShardFieldNumber = 63;
    private readonly static bool AbilityIsGrantedByShardDefaultValue = false;

    private bool abilityIsGrantedByShard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AbilityIsGrantedByShard {
      get { if ((_hasBits0 & 16384) != 0) { return abilityIsGrantedByShard_; } else { return AbilityIsGrantedByShardDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        abilityIsGrantedByShard_ = value;
      }
    }
    /// <summary>Gets whether the "ability_is_granted_by_shard" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityIsGrantedByShard {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "ability_is_granted_by_shard" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityIsGrantedByShard() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "ability_is_innate" field.</summary>
    public const int AbilityIsInnateFieldNumber = 64;
    private readonly static bool AbilityIsInnateDefaultValue = false;

    private bool abilityIsInnate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AbilityIsInnate {
      get { if ((_hasBits0 & 32768) != 0) { return abilityIsInnate_; } else { return AbilityIsInnateDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        abilityIsInnate_ = value;
      }
    }
    /// <summary>Gets whether the "ability_is_innate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityIsInnate {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "ability_is_innate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityIsInnate() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "item_cost" field.</summary>
    public const int ItemCostFieldNumber = 70;
    private readonly static uint ItemCostDefaultValue = 0;

    private uint itemCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemCost {
      get { if ((_hasBits0 & 65536) != 0) { return itemCost_; } else { return ItemCostDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        itemCost_ = value;
      }
    }
    /// <summary>Gets whether the "item_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemCost {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "item_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemCost() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "item_initial_charges" field.</summary>
    public const int ItemInitialChargesFieldNumber = 71;
    private readonly static uint ItemInitialChargesDefaultValue = 0;

    private uint itemInitialCharges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemInitialCharges {
      get { if ((_hasBits0 & 131072) != 0) { return itemInitialCharges_; } else { return ItemInitialChargesDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        itemInitialCharges_ = value;
      }
    }
    /// <summary>Gets whether the "item_initial_charges" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemInitialCharges {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "item_initial_charges" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemInitialCharges() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "item_neutral_tier" field.</summary>
    public const int ItemNeutralTierFieldNumber = 72;
    private readonly static uint ItemNeutralTierDefaultValue = 0;

    private uint itemNeutralTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemNeutralTier {
      get { if ((_hasBits0 & 262144) != 0) { return itemNeutralTier_; } else { return ItemNeutralTierDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        itemNeutralTier_ = value;
      }
    }
    /// <summary>Gets whether the "item_neutral_tier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemNeutralTier {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "item_neutral_tier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemNeutralTier() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "item_stock_max" field.</summary>
    public const int ItemStockMaxFieldNumber = 73;
    private readonly static uint ItemStockMaxDefaultValue = 0;

    private uint itemStockMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemStockMax {
      get { if ((_hasBits0 & 524288) != 0) { return itemStockMax_; } else { return ItemStockMaxDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        itemStockMax_ = value;
      }
    }
    /// <summary>Gets whether the "item_stock_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemStockMax {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "item_stock_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemStockMax() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "item_stock_time" field.</summary>
    public const int ItemStockTimeFieldNumber = 74;
    private readonly static float ItemStockTimeDefaultValue = 0F;

    private float itemStockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ItemStockTime {
      get { if ((_hasBits0 & 1048576) != 0) { return itemStockTime_; } else { return ItemStockTimeDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        itemStockTime_ = value;
      }
    }
    /// <summary>Gets whether the "item_stock_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemStockTime {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "item_stock_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemStockTime() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "item_quality" field.</summary>
    public const int ItemQualityFieldNumber = 85;
    private readonly static uint ItemQualityDefaultValue = 0;

    private uint itemQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemQuality {
      get { if ((_hasBits0 & 2097152) != 0) { return itemQuality_; } else { return ItemQualityDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        itemQuality_ = value;
      }
    }
    /// <summary>Gets whether the "item_quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemQuality {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "item_quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemQuality() {
      _hasBits0 &= ~2097152;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataAbilityOrItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataAbilityOrItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (NameLoc != other.NameLoc) return false;
      if (DescLoc != other.DescLoc) return false;
      if (LoreLoc != other.LoreLoc) return false;
      if(!notesLoc_.Equals(other.notesLoc_)) return false;
      if (ShardLoc != other.ShardLoc) return false;
      if (ScepterLoc != other.ScepterLoc) return false;
      if(!facetsLoc_.Equals(other.facetsLoc_)) return false;
      if (Type != other.Type) return false;
      if (Behavior != other.Behavior) return false;
      if (TargetTeam != other.TargetTeam) return false;
      if (TargetType != other.TargetType) return false;
      if (Flags != other.Flags) return false;
      if (Damage != other.Damage) return false;
      if (Immunity != other.Immunity) return false;
      if (Dispellable != other.Dispellable) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if(!castRanges_.Equals(other.castRanges_)) return false;
      if(!castPoints_.Equals(other.castPoints_)) return false;
      if(!channelTimes_.Equals(other.channelTimes_)) return false;
      if(!cooldowns_.Equals(other.cooldowns_)) return false;
      if(!durations_.Equals(other.durations_)) return false;
      if(!damages_.Equals(other.damages_)) return false;
      if(!manaCosts_.Equals(other.manaCosts_)) return false;
      if(!goldCosts_.Equals(other.goldCosts_)) return false;
      if(!healthCosts_.Equals(other.healthCosts_)) return false;
      if(!specialValues_.Equals(other.specialValues_)) return false;
      if (IsItem != other.IsItem) return false;
      if (AbilityHasScepter != other.AbilityHasScepter) return false;
      if (AbilityHasShard != other.AbilityHasShard) return false;
      if (AbilityIsGrantedByScepter != other.AbilityIsGrantedByScepter) return false;
      if (AbilityIsGrantedByShard != other.AbilityIsGrantedByShard) return false;
      if (AbilityIsInnate != other.AbilityIsInnate) return false;
      if (ItemCost != other.ItemCost) return false;
      if (ItemInitialCharges != other.ItemInitialCharges) return false;
      if (ItemNeutralTier != other.ItemNeutralTier) return false;
      if (ItemStockMax != other.ItemStockMax) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ItemStockTime, other.ItemStockTime)) return false;
      if (ItemQuality != other.ItemQuality) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasNameLoc) hash ^= NameLoc.GetHashCode();
      if (HasDescLoc) hash ^= DescLoc.GetHashCode();
      if (HasLoreLoc) hash ^= LoreLoc.GetHashCode();
      hash ^= notesLoc_.GetHashCode();
      if (HasShardLoc) hash ^= ShardLoc.GetHashCode();
      if (HasScepterLoc) hash ^= ScepterLoc.GetHashCode();
      hash ^= facetsLoc_.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasBehavior) hash ^= Behavior.GetHashCode();
      if (HasTargetTeam) hash ^= TargetTeam.GetHashCode();
      if (HasTargetType) hash ^= TargetType.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      if (HasDamage) hash ^= Damage.GetHashCode();
      if (HasImmunity) hash ^= Immunity.GetHashCode();
      if (HasDispellable) hash ^= Dispellable.GetHashCode();
      if (HasMaxLevel) hash ^= MaxLevel.GetHashCode();
      hash ^= castRanges_.GetHashCode();
      hash ^= castPoints_.GetHashCode();
      hash ^= channelTimes_.GetHashCode();
      hash ^= cooldowns_.GetHashCode();
      hash ^= durations_.GetHashCode();
      hash ^= damages_.GetHashCode();
      hash ^= manaCosts_.GetHashCode();
      hash ^= goldCosts_.GetHashCode();
      hash ^= healthCosts_.GetHashCode();
      hash ^= specialValues_.GetHashCode();
      if (HasIsItem) hash ^= IsItem.GetHashCode();
      if (HasAbilityHasScepter) hash ^= AbilityHasScepter.GetHashCode();
      if (HasAbilityHasShard) hash ^= AbilityHasShard.GetHashCode();
      if (HasAbilityIsGrantedByScepter) hash ^= AbilityIsGrantedByScepter.GetHashCode();
      if (HasAbilityIsGrantedByShard) hash ^= AbilityIsGrantedByShard.GetHashCode();
      if (HasAbilityIsInnate) hash ^= AbilityIsInnate.GetHashCode();
      if (HasItemCost) hash ^= ItemCost.GetHashCode();
      if (HasItemInitialCharges) hash ^= ItemInitialCharges.GetHashCode();
      if (HasItemNeutralTier) hash ^= ItemNeutralTier.GetHashCode();
      if (HasItemStockMax) hash ^= ItemStockMax.GetHashCode();
      if (HasItemStockTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ItemStockTime);
      if (HasItemQuality) hash ^= ItemQuality.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasNameLoc) {
        output.WriteRawTag(42);
        output.WriteString(NameLoc);
      }
      if (HasDescLoc) {
        output.WriteRawTag(50);
        output.WriteString(DescLoc);
      }
      if (HasLoreLoc) {
        output.WriteRawTag(58);
        output.WriteString(LoreLoc);
      }
      notesLoc_.WriteTo(output, _repeated_notesLoc_codec);
      if (HasShardLoc) {
        output.WriteRawTag(74);
        output.WriteString(ShardLoc);
      }
      if (HasScepterLoc) {
        output.WriteRawTag(82);
        output.WriteString(ScepterLoc);
      }
      facetsLoc_.WriteTo(output, _repeated_facetsLoc_codec);
      if (HasType) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Type);
      }
      if (HasBehavior) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(Behavior);
      }
      if (HasTargetTeam) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(TargetTeam);
      }
      if (HasTargetType) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(TargetType);
      }
      if (HasFlags) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Flags);
      }
      if (HasDamage) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Damage);
      }
      if (HasImmunity) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Immunity);
      }
      if (HasDispellable) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Dispellable);
      }
      if (HasMaxLevel) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(MaxLevel);
      }
      castRanges_.WriteTo(output, _repeated_castRanges_codec);
      castPoints_.WriteTo(output, _repeated_castPoints_codec);
      channelTimes_.WriteTo(output, _repeated_channelTimes_codec);
      cooldowns_.WriteTo(output, _repeated_cooldowns_codec);
      durations_.WriteTo(output, _repeated_durations_codec);
      damages_.WriteTo(output, _repeated_damages_codec);
      manaCosts_.WriteTo(output, _repeated_manaCosts_codec);
      goldCosts_.WriteTo(output, _repeated_goldCosts_codec);
      healthCosts_.WriteTo(output, _repeated_healthCosts_codec);
      specialValues_.WriteTo(output, _repeated_specialValues_codec);
      if (HasIsItem) {
        output.WriteRawTag(144, 3);
        output.WriteBool(IsItem);
      }
      if (HasAbilityHasScepter) {
        output.WriteRawTag(224, 3);
        output.WriteBool(AbilityHasScepter);
      }
      if (HasAbilityHasShard) {
        output.WriteRawTag(232, 3);
        output.WriteBool(AbilityHasShard);
      }
      if (HasAbilityIsGrantedByScepter) {
        output.WriteRawTag(240, 3);
        output.WriteBool(AbilityIsGrantedByScepter);
      }
      if (HasAbilityIsGrantedByShard) {
        output.WriteRawTag(248, 3);
        output.WriteBool(AbilityIsGrantedByShard);
      }
      if (HasAbilityIsInnate) {
        output.WriteRawTag(128, 4);
        output.WriteBool(AbilityIsInnate);
      }
      if (HasItemCost) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(ItemCost);
      }
      if (HasItemInitialCharges) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(ItemInitialCharges);
      }
      if (HasItemNeutralTier) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(ItemNeutralTier);
      }
      if (HasItemStockMax) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(ItemStockMax);
      }
      if (HasItemStockTime) {
        output.WriteRawTag(213, 4);
        output.WriteFloat(ItemStockTime);
      }
      if (HasItemQuality) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(ItemQuality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasNameLoc) {
        output.WriteRawTag(42);
        output.WriteString(NameLoc);
      }
      if (HasDescLoc) {
        output.WriteRawTag(50);
        output.WriteString(DescLoc);
      }
      if (HasLoreLoc) {
        output.WriteRawTag(58);
        output.WriteString(LoreLoc);
      }
      notesLoc_.WriteTo(ref output, _repeated_notesLoc_codec);
      if (HasShardLoc) {
        output.WriteRawTag(74);
        output.WriteString(ShardLoc);
      }
      if (HasScepterLoc) {
        output.WriteRawTag(82);
        output.WriteString(ScepterLoc);
      }
      facetsLoc_.WriteTo(ref output, _repeated_facetsLoc_codec);
      if (HasType) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Type);
      }
      if (HasBehavior) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(Behavior);
      }
      if (HasTargetTeam) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(TargetTeam);
      }
      if (HasTargetType) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(TargetType);
      }
      if (HasFlags) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Flags);
      }
      if (HasDamage) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Damage);
      }
      if (HasImmunity) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Immunity);
      }
      if (HasDispellable) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Dispellable);
      }
      if (HasMaxLevel) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(MaxLevel);
      }
      castRanges_.WriteTo(ref output, _repeated_castRanges_codec);
      castPoints_.WriteTo(ref output, _repeated_castPoints_codec);
      channelTimes_.WriteTo(ref output, _repeated_channelTimes_codec);
      cooldowns_.WriteTo(ref output, _repeated_cooldowns_codec);
      durations_.WriteTo(ref output, _repeated_durations_codec);
      damages_.WriteTo(ref output, _repeated_damages_codec);
      manaCosts_.WriteTo(ref output, _repeated_manaCosts_codec);
      goldCosts_.WriteTo(ref output, _repeated_goldCosts_codec);
      healthCosts_.WriteTo(ref output, _repeated_healthCosts_codec);
      specialValues_.WriteTo(ref output, _repeated_specialValues_codec);
      if (HasIsItem) {
        output.WriteRawTag(144, 3);
        output.WriteBool(IsItem);
      }
      if (HasAbilityHasScepter) {
        output.WriteRawTag(224, 3);
        output.WriteBool(AbilityHasScepter);
      }
      if (HasAbilityHasShard) {
        output.WriteRawTag(232, 3);
        output.WriteBool(AbilityHasShard);
      }
      if (HasAbilityIsGrantedByScepter) {
        output.WriteRawTag(240, 3);
        output.WriteBool(AbilityIsGrantedByScepter);
      }
      if (HasAbilityIsGrantedByShard) {
        output.WriteRawTag(248, 3);
        output.WriteBool(AbilityIsGrantedByShard);
      }
      if (HasAbilityIsInnate) {
        output.WriteRawTag(128, 4);
        output.WriteBool(AbilityIsInnate);
      }
      if (HasItemCost) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(ItemCost);
      }
      if (HasItemInitialCharges) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(ItemInitialCharges);
      }
      if (HasItemNeutralTier) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(ItemNeutralTier);
      }
      if (HasItemStockMax) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(ItemStockMax);
      }
      if (HasItemStockTime) {
        output.WriteRawTag(213, 4);
        output.WriteFloat(ItemStockTime);
      }
      if (HasItemQuality) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(ItemQuality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasNameLoc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameLoc);
      }
      if (HasDescLoc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescLoc);
      }
      if (HasLoreLoc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoreLoc);
      }
      size += notesLoc_.CalculateSize(_repeated_notesLoc_codec);
      if (HasShardLoc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardLoc);
      }
      if (HasScepterLoc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScepterLoc);
      }
      size += facetsLoc_.CalculateSize(_repeated_facetsLoc_codec);
      if (HasType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (HasBehavior) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Behavior);
      }
      if (HasTargetTeam) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetTeam);
      }
      if (HasTargetType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetType);
      }
      if (HasFlags) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (HasDamage) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Damage);
      }
      if (HasImmunity) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Immunity);
      }
      if (HasDispellable) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Dispellable);
      }
      if (HasMaxLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxLevel);
      }
      size += castRanges_.CalculateSize(_repeated_castRanges_codec);
      size += castPoints_.CalculateSize(_repeated_castPoints_codec);
      size += channelTimes_.CalculateSize(_repeated_channelTimes_codec);
      size += cooldowns_.CalculateSize(_repeated_cooldowns_codec);
      size += durations_.CalculateSize(_repeated_durations_codec);
      size += damages_.CalculateSize(_repeated_damages_codec);
      size += manaCosts_.CalculateSize(_repeated_manaCosts_codec);
      size += goldCosts_.CalculateSize(_repeated_goldCosts_codec);
      size += healthCosts_.CalculateSize(_repeated_healthCosts_codec);
      size += specialValues_.CalculateSize(_repeated_specialValues_codec);
      if (HasIsItem) {
        size += 2 + 1;
      }
      if (HasAbilityHasScepter) {
        size += 2 + 1;
      }
      if (HasAbilityHasShard) {
        size += 2 + 1;
      }
      if (HasAbilityIsGrantedByScepter) {
        size += 2 + 1;
      }
      if (HasAbilityIsGrantedByShard) {
        size += 2 + 1;
      }
      if (HasAbilityIsInnate) {
        size += 2 + 1;
      }
      if (HasItemCost) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ItemCost);
      }
      if (HasItemInitialCharges) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ItemInitialCharges);
      }
      if (HasItemNeutralTier) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ItemNeutralTier);
      }
      if (HasItemStockMax) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ItemStockMax);
      }
      if (HasItemStockTime) {
        size += 2 + 4;
      }
      if (HasItemQuality) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ItemQuality);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataAbilityOrItem other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasNameLoc) {
        NameLoc = other.NameLoc;
      }
      if (other.HasDescLoc) {
        DescLoc = other.DescLoc;
      }
      if (other.HasLoreLoc) {
        LoreLoc = other.LoreLoc;
      }
      notesLoc_.Add(other.notesLoc_);
      if (other.HasShardLoc) {
        ShardLoc = other.ShardLoc;
      }
      if (other.HasScepterLoc) {
        ScepterLoc = other.ScepterLoc;
      }
      facetsLoc_.Add(other.facetsLoc_);
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasBehavior) {
        Behavior = other.Behavior;
      }
      if (other.HasTargetTeam) {
        TargetTeam = other.TargetTeam;
      }
      if (other.HasTargetType) {
        TargetType = other.TargetType;
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      if (other.HasDamage) {
        Damage = other.Damage;
      }
      if (other.HasImmunity) {
        Immunity = other.Immunity;
      }
      if (other.HasDispellable) {
        Dispellable = other.Dispellable;
      }
      if (other.HasMaxLevel) {
        MaxLevel = other.MaxLevel;
      }
      castRanges_.Add(other.castRanges_);
      castPoints_.Add(other.castPoints_);
      channelTimes_.Add(other.channelTimes_);
      cooldowns_.Add(other.cooldowns_);
      durations_.Add(other.durations_);
      damages_.Add(other.damages_);
      manaCosts_.Add(other.manaCosts_);
      goldCosts_.Add(other.goldCosts_);
      healthCosts_.Add(other.healthCosts_);
      specialValues_.Add(other.specialValues_);
      if (other.HasIsItem) {
        IsItem = other.IsItem;
      }
      if (other.HasAbilityHasScepter) {
        AbilityHasScepter = other.AbilityHasScepter;
      }
      if (other.HasAbilityHasShard) {
        AbilityHasShard = other.AbilityHasShard;
      }
      if (other.HasAbilityIsGrantedByScepter) {
        AbilityIsGrantedByScepter = other.AbilityIsGrantedByScepter;
      }
      if (other.HasAbilityIsGrantedByShard) {
        AbilityIsGrantedByShard = other.AbilityIsGrantedByShard;
      }
      if (other.HasAbilityIsInnate) {
        AbilityIsInnate = other.AbilityIsInnate;
      }
      if (other.HasItemCost) {
        ItemCost = other.ItemCost;
      }
      if (other.HasItemInitialCharges) {
        ItemInitialCharges = other.ItemInitialCharges;
      }
      if (other.HasItemNeutralTier) {
        ItemNeutralTier = other.ItemNeutralTier;
      }
      if (other.HasItemStockMax) {
        ItemStockMax = other.ItemStockMax;
      }
      if (other.HasItemStockTime) {
        ItemStockTime = other.ItemStockTime;
      }
      if (other.HasItemQuality) {
        ItemQuality = other.ItemQuality;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            NameLoc = input.ReadString();
            break;
          }
          case 50: {
            DescLoc = input.ReadString();
            break;
          }
          case 58: {
            LoreLoc = input.ReadString();
            break;
          }
          case 66: {
            notesLoc_.AddEntriesFrom(input, _repeated_notesLoc_codec);
            break;
          }
          case 74: {
            ShardLoc = input.ReadString();
            break;
          }
          case 82: {
            ScepterLoc = input.ReadString();
            break;
          }
          case 90: {
            facetsLoc_.AddEntriesFrom(input, _repeated_facetsLoc_codec);
            break;
          }
          case 160: {
            Type = input.ReadUInt32();
            break;
          }
          case 168: {
            Behavior = input.ReadUInt64();
            break;
          }
          case 176: {
            TargetTeam = input.ReadUInt32();
            break;
          }
          case 184: {
            TargetType = input.ReadUInt32();
            break;
          }
          case 192: {
            Flags = input.ReadUInt32();
            break;
          }
          case 200: {
            Damage = input.ReadUInt32();
            break;
          }
          case 208: {
            Immunity = input.ReadUInt32();
            break;
          }
          case 216: {
            Dispellable = input.ReadUInt32();
            break;
          }
          case 224: {
            MaxLevel = input.ReadUInt32();
            break;
          }
          case 242:
          case 240: {
            castRanges_.AddEntriesFrom(input, _repeated_castRanges_codec);
            break;
          }
          case 250:
          case 253: {
            castPoints_.AddEntriesFrom(input, _repeated_castPoints_codec);
            break;
          }
          case 258:
          case 261: {
            channelTimes_.AddEntriesFrom(input, _repeated_channelTimes_codec);
            break;
          }
          case 266:
          case 269: {
            cooldowns_.AddEntriesFrom(input, _repeated_cooldowns_codec);
            break;
          }
          case 274:
          case 277: {
            durations_.AddEntriesFrom(input, _repeated_durations_codec);
            break;
          }
          case 282:
          case 280: {
            damages_.AddEntriesFrom(input, _repeated_damages_codec);
            break;
          }
          case 290:
          case 288: {
            manaCosts_.AddEntriesFrom(input, _repeated_manaCosts_codec);
            break;
          }
          case 298:
          case 296: {
            goldCosts_.AddEntriesFrom(input, _repeated_goldCosts_codec);
            break;
          }
          case 306:
          case 304: {
            healthCosts_.AddEntriesFrom(input, _repeated_healthCosts_codec);
            break;
          }
          case 322: {
            specialValues_.AddEntriesFrom(input, _repeated_specialValues_codec);
            break;
          }
          case 400: {
            IsItem = input.ReadBool();
            break;
          }
          case 480: {
            AbilityHasScepter = input.ReadBool();
            break;
          }
          case 488: {
            AbilityHasShard = input.ReadBool();
            break;
          }
          case 496: {
            AbilityIsGrantedByScepter = input.ReadBool();
            break;
          }
          case 504: {
            AbilityIsGrantedByShard = input.ReadBool();
            break;
          }
          case 512: {
            AbilityIsInnate = input.ReadBool();
            break;
          }
          case 560: {
            ItemCost = input.ReadUInt32();
            break;
          }
          case 568: {
            ItemInitialCharges = input.ReadUInt32();
            break;
          }
          case 576: {
            ItemNeutralTier = input.ReadUInt32();
            break;
          }
          case 584: {
            ItemStockMax = input.ReadUInt32();
            break;
          }
          case 597: {
            ItemStockTime = input.ReadFloat();
            break;
          }
          case 680: {
            ItemQuality = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            NameLoc = input.ReadString();
            break;
          }
          case 50: {
            DescLoc = input.ReadString();
            break;
          }
          case 58: {
            LoreLoc = input.ReadString();
            break;
          }
          case 66: {
            notesLoc_.AddEntriesFrom(ref input, _repeated_notesLoc_codec);
            break;
          }
          case 74: {
            ShardLoc = input.ReadString();
            break;
          }
          case 82: {
            ScepterLoc = input.ReadString();
            break;
          }
          case 90: {
            facetsLoc_.AddEntriesFrom(ref input, _repeated_facetsLoc_codec);
            break;
          }
          case 160: {
            Type = input.ReadUInt32();
            break;
          }
          case 168: {
            Behavior = input.ReadUInt64();
            break;
          }
          case 176: {
            TargetTeam = input.ReadUInt32();
            break;
          }
          case 184: {
            TargetType = input.ReadUInt32();
            break;
          }
          case 192: {
            Flags = input.ReadUInt32();
            break;
          }
          case 200: {
            Damage = input.ReadUInt32();
            break;
          }
          case 208: {
            Immunity = input.ReadUInt32();
            break;
          }
          case 216: {
            Dispellable = input.ReadUInt32();
            break;
          }
          case 224: {
            MaxLevel = input.ReadUInt32();
            break;
          }
          case 242:
          case 240: {
            castRanges_.AddEntriesFrom(ref input, _repeated_castRanges_codec);
            break;
          }
          case 250:
          case 253: {
            castPoints_.AddEntriesFrom(ref input, _repeated_castPoints_codec);
            break;
          }
          case 258:
          case 261: {
            channelTimes_.AddEntriesFrom(ref input, _repeated_channelTimes_codec);
            break;
          }
          case 266:
          case 269: {
            cooldowns_.AddEntriesFrom(ref input, _repeated_cooldowns_codec);
            break;
          }
          case 274:
          case 277: {
            durations_.AddEntriesFrom(ref input, _repeated_durations_codec);
            break;
          }
          case 282:
          case 280: {
            damages_.AddEntriesFrom(ref input, _repeated_damages_codec);
            break;
          }
          case 290:
          case 288: {
            manaCosts_.AddEntriesFrom(ref input, _repeated_manaCosts_codec);
            break;
          }
          case 298:
          case 296: {
            goldCosts_.AddEntriesFrom(ref input, _repeated_goldCosts_codec);
            break;
          }
          case 306:
          case 304: {
            healthCosts_.AddEntriesFrom(ref input, _repeated_healthCosts_codec);
            break;
          }
          case 322: {
            specialValues_.AddEntriesFrom(ref input, _repeated_specialValues_codec);
            break;
          }
          case 400: {
            IsItem = input.ReadBool();
            break;
          }
          case 480: {
            AbilityHasScepter = input.ReadBool();
            break;
          }
          case 488: {
            AbilityHasShard = input.ReadBool();
            break;
          }
          case 496: {
            AbilityIsGrantedByScepter = input.ReadBool();
            break;
          }
          case 504: {
            AbilityIsGrantedByShard = input.ReadBool();
            break;
          }
          case 512: {
            AbilityIsInnate = input.ReadBool();
            break;
          }
          case 560: {
            ItemCost = input.ReadUInt32();
            break;
          }
          case 568: {
            ItemInitialCharges = input.ReadUInt32();
            break;
          }
          case 576: {
            ItemNeutralTier = input.ReadUInt32();
            break;
          }
          case 584: {
            ItemStockMax = input.ReadUInt32();
            break;
          }
          case 597: {
            ItemStockTime = input.ReadFloat();
            break;
          }
          case 680: {
            ItemQuality = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameDataAbilityOrItemList : pb::IMessage<CMsgGameDataAbilityOrItemList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataAbilityOrItemList> _parser = new pb::MessageParser<CMsgGameDataAbilityOrItemList>(() => new CMsgGameDataAbilityOrItemList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataAbilityOrItemList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataAbilityOrItemList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataAbilityOrItemList(CMsgGameDataAbilityOrItemList other) : this() {
      abilities_ = other.abilities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataAbilityOrItemList Clone() {
      return new CMsgGameDataAbilityOrItemList(this);
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> _repeated_abilities_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> abilities_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> Abilities {
      get { return abilities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataAbilityOrItemList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataAbilityOrItemList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!abilities_.Equals(other.abilities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= abilities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      abilities_.WriteTo(output, _repeated_abilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      abilities_.WriteTo(ref output, _repeated_abilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += abilities_.CalculateSize(_repeated_abilities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataAbilityOrItemList other) {
      if (other == null) {
        return;
      }
      abilities_.Add(other.abilities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            abilities_.AddEntriesFrom(ref input, _repeated_abilities_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameDataHero : pb::IMessage<CMsgGameDataHero>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataHero> _parser = new pb::MessageParser<CMsgGameDataHero>(() => new CMsgGameDataHero());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataHero(CMsgGameDataHero other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      orderId_ = other.orderId_;
      nameLoc_ = other.nameLoc_;
      bioLoc_ = other.bioLoc_;
      hypeLoc_ = other.hypeLoc_;
      npeDescLoc_ = other.npeDescLoc_;
      facets_ = other.facets_.Clone();
      strBase_ = other.strBase_;
      strGain_ = other.strGain_;
      agiBase_ = other.agiBase_;
      agiGain_ = other.agiGain_;
      intBase_ = other.intBase_;
      intGain_ = other.intGain_;
      primaryAttr_ = other.primaryAttr_;
      complexity_ = other.complexity_;
      attackCapability_ = other.attackCapability_;
      roleLevels_ = other.roleLevels_.Clone();
      damageMin_ = other.damageMin_;
      damageMax_ = other.damageMax_;
      attackRate_ = other.attackRate_;
      attackRange_ = other.attackRange_;
      projectileSpeed_ = other.projectileSpeed_;
      armor_ = other.armor_;
      magicResistance_ = other.magicResistance_;
      movementSpeed_ = other.movementSpeed_;
      turnRate_ = other.turnRate_;
      sightRangeDay_ = other.sightRangeDay_;
      sightRangeNight_ = other.sightRangeNight_;
      maxHealth_ = other.maxHealth_;
      healthRegen_ = other.healthRegen_;
      maxMana_ = other.maxMana_;
      manaRegen_ = other.manaRegen_;
      abilities_ = other.abilities_.Clone();
      talents_ = other.talents_.Clone();
      facetAbilities_ = other.facetAbilities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataHero Clone() {
      return new CMsgGameDataHero(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static int IdDefaultValue = 0;

    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 3;
    private readonly static uint OrderIdDefaultValue = 0;

    private uint orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OrderId {
      get { if ((_hasBits0 & 2) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        orderId_ = value;
      }
    }
    /// <summary>Gets whether the "order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name_loc" field.</summary>
    public const int NameLocFieldNumber = 5;
    private readonly static string NameLocDefaultValue = "";

    private string nameLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameLoc {
      get { return nameLoc_ ?? NameLocDefaultValue; }
      set {
        nameLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name_loc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNameLoc {
      get { return nameLoc_ != null; }
    }
    /// <summary>Clears the value of the "name_loc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNameLoc() {
      nameLoc_ = null;
    }

    /// <summary>Field number for the "bio_loc" field.</summary>
    public const int BioLocFieldNumber = 6;
    private readonly static string BioLocDefaultValue = "";

    private string bioLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BioLoc {
      get { return bioLoc_ ?? BioLocDefaultValue; }
      set {
        bioLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "bio_loc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBioLoc {
      get { return bioLoc_ != null; }
    }
    /// <summary>Clears the value of the "bio_loc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBioLoc() {
      bioLoc_ = null;
    }

    /// <summary>Field number for the "hype_loc" field.</summary>
    public const int HypeLocFieldNumber = 7;
    private readonly static string HypeLocDefaultValue = "";

    private string hypeLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HypeLoc {
      get { return hypeLoc_ ?? HypeLocDefaultValue; }
      set {
        hypeLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "hype_loc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHypeLoc {
      get { return hypeLoc_ != null; }
    }
    /// <summary>Clears the value of the "hype_loc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHypeLoc() {
      hypeLoc_ = null;
    }

    /// <summary>Field number for the "npe_desc_loc" field.</summary>
    public const int NpeDescLocFieldNumber = 8;
    private readonly static string NpeDescLocDefaultValue = "";

    private string npeDescLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NpeDescLoc {
      get { return npeDescLoc_ ?? NpeDescLocDefaultValue; }
      set {
        npeDescLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "npe_desc_loc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpeDescLoc {
      get { return npeDescLoc_ != null; }
    }
    /// <summary>Clears the value of the "npe_desc_loc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpeDescLoc() {
      npeDescLoc_ = null;
    }

    /// <summary>Field number for the "facets" field.</summary>
    public const int FacetsFieldNumber = 43;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataHero.Types.Facet> _repeated_facets_codec
        = pb::FieldCodec.ForMessage(346, global::Steam.Protos.Dota2.CMsgGameDataHero.Types.Facet.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataHero.Types.Facet> facets_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataHero.Types.Facet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataHero.Types.Facet> Facets {
      get { return facets_; }
    }

    /// <summary>Field number for the "str_base" field.</summary>
    public const int StrBaseFieldNumber = 10;
    private readonly static uint StrBaseDefaultValue = 0;

    private uint strBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StrBase {
      get { if ((_hasBits0 & 4) != 0) { return strBase_; } else { return StrBaseDefaultValue; } }
      set {
        _hasBits0 |= 4;
        strBase_ = value;
      }
    }
    /// <summary>Gets whether the "str_base" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStrBase {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "str_base" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStrBase() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "str_gain" field.</summary>
    public const int StrGainFieldNumber = 11;
    private readonly static float StrGainDefaultValue = 0F;

    private float strGain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StrGain {
      get { if ((_hasBits0 & 8) != 0) { return strGain_; } else { return StrGainDefaultValue; } }
      set {
        _hasBits0 |= 8;
        strGain_ = value;
      }
    }
    /// <summary>Gets whether the "str_gain" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStrGain {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "str_gain" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStrGain() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "agi_base" field.</summary>
    public const int AgiBaseFieldNumber = 12;
    private readonly static uint AgiBaseDefaultValue = 0;

    private uint agiBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AgiBase {
      get { if ((_hasBits0 & 16) != 0) { return agiBase_; } else { return AgiBaseDefaultValue; } }
      set {
        _hasBits0 |= 16;
        agiBase_ = value;
      }
    }
    /// <summary>Gets whether the "agi_base" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAgiBase {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "agi_base" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAgiBase() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "agi_gain" field.</summary>
    public const int AgiGainFieldNumber = 13;
    private readonly static float AgiGainDefaultValue = 0F;

    private float agiGain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AgiGain {
      get { if ((_hasBits0 & 32) != 0) { return agiGain_; } else { return AgiGainDefaultValue; } }
      set {
        _hasBits0 |= 32;
        agiGain_ = value;
      }
    }
    /// <summary>Gets whether the "agi_gain" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAgiGain {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "agi_gain" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAgiGain() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "int_base" field.</summary>
    public const int IntBaseFieldNumber = 14;
    private readonly static uint IntBaseDefaultValue = 0;

    private uint intBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntBase {
      get { if ((_hasBits0 & 64) != 0) { return intBase_; } else { return IntBaseDefaultValue; } }
      set {
        _hasBits0 |= 64;
        intBase_ = value;
      }
    }
    /// <summary>Gets whether the "int_base" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntBase {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "int_base" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntBase() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "int_gain" field.</summary>
    public const int IntGainFieldNumber = 15;
    private readonly static float IntGainDefaultValue = 0F;

    private float intGain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IntGain {
      get { if ((_hasBits0 & 128) != 0) { return intGain_; } else { return IntGainDefaultValue; } }
      set {
        _hasBits0 |= 128;
        intGain_ = value;
      }
    }
    /// <summary>Gets whether the "int_gain" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntGain {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "int_gain" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntGain() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "primary_attr" field.</summary>
    public const int PrimaryAttrFieldNumber = 20;
    private readonly static uint PrimaryAttrDefaultValue = 0;

    private uint primaryAttr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrimaryAttr {
      get { if ((_hasBits0 & 256) != 0) { return primaryAttr_; } else { return PrimaryAttrDefaultValue; } }
      set {
        _hasBits0 |= 256;
        primaryAttr_ = value;
      }
    }
    /// <summary>Gets whether the "primary_attr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrimaryAttr {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "primary_attr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrimaryAttr() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "complexity" field.</summary>
    public const int ComplexityFieldNumber = 21;
    private readonly static uint ComplexityDefaultValue = 0;

    private uint complexity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Complexity {
      get { if ((_hasBits0 & 512) != 0) { return complexity_; } else { return ComplexityDefaultValue; } }
      set {
        _hasBits0 |= 512;
        complexity_ = value;
      }
    }
    /// <summary>Gets whether the "complexity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComplexity {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "complexity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComplexity() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "attack_capability" field.</summary>
    public const int AttackCapabilityFieldNumber = 22;
    private readonly static uint AttackCapabilityDefaultValue = 0;

    private uint attackCapability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackCapability {
      get { if ((_hasBits0 & 1024) != 0) { return attackCapability_; } else { return AttackCapabilityDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        attackCapability_ = value;
      }
    }
    /// <summary>Gets whether the "attack_capability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackCapability {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "attack_capability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackCapability() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "role_levels" field.</summary>
    public const int RoleLevelsFieldNumber = 23;
    private static readonly pb::FieldCodec<uint> _repeated_roleLevels_codec
        = pb::FieldCodec.ForUInt32(184);
    private readonly pbc::RepeatedField<uint> roleLevels_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RoleLevels {
      get { return roleLevels_; }
    }

    /// <summary>Field number for the "damage_min" field.</summary>
    public const int DamageMinFieldNumber = 24;
    private readonly static int DamageMinDefaultValue = 0;

    private int damageMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageMin {
      get { if ((_hasBits0 & 2048) != 0) { return damageMin_; } else { return DamageMinDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        damageMin_ = value;
      }
    }
    /// <summary>Gets whether the "damage_min" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageMin {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "damage_min" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageMin() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "damage_max" field.</summary>
    public const int DamageMaxFieldNumber = 25;
    private readonly static int DamageMaxDefaultValue = 0;

    private int damageMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageMax {
      get { if ((_hasBits0 & 4096) != 0) { return damageMax_; } else { return DamageMaxDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        damageMax_ = value;
      }
    }
    /// <summary>Gets whether the "damage_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageMax {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "damage_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageMax() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "attack_rate" field.</summary>
    public const int AttackRateFieldNumber = 26;
    private readonly static float AttackRateDefaultValue = 0F;

    private float attackRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackRate {
      get { if ((_hasBits0 & 8192) != 0) { return attackRate_; } else { return AttackRateDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        attackRate_ = value;
      }
    }
    /// <summary>Gets whether the "attack_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackRate {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "attack_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackRate() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "attack_range" field.</summary>
    public const int AttackRangeFieldNumber = 27;
    private readonly static uint AttackRangeDefaultValue = 0;

    private uint attackRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackRange {
      get { if ((_hasBits0 & 16384) != 0) { return attackRange_; } else { return AttackRangeDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        attackRange_ = value;
      }
    }
    /// <summary>Gets whether the "attack_range" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackRange {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "attack_range" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackRange() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "projectile_speed" field.</summary>
    public const int ProjectileSpeedFieldNumber = 28;
    private readonly static uint ProjectileSpeedDefaultValue = 0;

    private uint projectileSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProjectileSpeed {
      get { if ((_hasBits0 & 32768) != 0) { return projectileSpeed_; } else { return ProjectileSpeedDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        projectileSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "projectile_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProjectileSpeed {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "projectile_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProjectileSpeed() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "armor" field.</summary>
    public const int ArmorFieldNumber = 29;
    private readonly static float ArmorDefaultValue = 0F;

    private float armor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Armor {
      get { if ((_hasBits0 & 65536) != 0) { return armor_; } else { return ArmorDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        armor_ = value;
      }
    }
    /// <summary>Gets whether the "armor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArmor {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "armor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArmor() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "magic_resistance" field.</summary>
    public const int MagicResistanceFieldNumber = 30;
    private readonly static uint MagicResistanceDefaultValue = 0;

    private uint magicResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicResistance {
      get { if ((_hasBits0 & 131072) != 0) { return magicResistance_; } else { return MagicResistanceDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        magicResistance_ = value;
      }
    }
    /// <summary>Gets whether the "magic_resistance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMagicResistance {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "magic_resistance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMagicResistance() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "movement_speed" field.</summary>
    public const int MovementSpeedFieldNumber = 31;
    private readonly static uint MovementSpeedDefaultValue = 0;

    private uint movementSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MovementSpeed {
      get { if ((_hasBits0 & 262144) != 0) { return movementSpeed_; } else { return MovementSpeedDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        movementSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "movement_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMovementSpeed {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "movement_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMovementSpeed() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "turn_rate" field.</summary>
    public const int TurnRateFieldNumber = 32;
    private readonly static float TurnRateDefaultValue = 0F;

    private float turnRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TurnRate {
      get { if ((_hasBits0 & 524288) != 0) { return turnRate_; } else { return TurnRateDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        turnRate_ = value;
      }
    }
    /// <summary>Gets whether the "turn_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTurnRate {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "turn_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTurnRate() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "sight_range_day" field.</summary>
    public const int SightRangeDayFieldNumber = 33;
    private readonly static uint SightRangeDayDefaultValue = 0;

    private uint sightRangeDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SightRangeDay {
      get { if ((_hasBits0 & 1048576) != 0) { return sightRangeDay_; } else { return SightRangeDayDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        sightRangeDay_ = value;
      }
    }
    /// <summary>Gets whether the "sight_range_day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSightRangeDay {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "sight_range_day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSightRangeDay() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "sight_range_night" field.</summary>
    public const int SightRangeNightFieldNumber = 34;
    private readonly static uint SightRangeNightDefaultValue = 0;

    private uint sightRangeNight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SightRangeNight {
      get { if ((_hasBits0 & 2097152) != 0) { return sightRangeNight_; } else { return SightRangeNightDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        sightRangeNight_ = value;
      }
    }
    /// <summary>Gets whether the "sight_range_night" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSightRangeNight {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "sight_range_night" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSightRangeNight() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "max_health" field.</summary>
    public const int MaxHealthFieldNumber = 35;
    private readonly static uint MaxHealthDefaultValue = 0;

    private uint maxHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxHealth {
      get { if ((_hasBits0 & 4194304) != 0) { return maxHealth_; } else { return MaxHealthDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        maxHealth_ = value;
      }
    }
    /// <summary>Gets whether the "max_health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxHealth {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "max_health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxHealth() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "health_regen" field.</summary>
    public const int HealthRegenFieldNumber = 36;
    private readonly static float HealthRegenDefaultValue = 0F;

    private float healthRegen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HealthRegen {
      get { if ((_hasBits0 & 8388608) != 0) { return healthRegen_; } else { return HealthRegenDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        healthRegen_ = value;
      }
    }
    /// <summary>Gets whether the "health_regen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHealthRegen {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "health_regen" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHealthRegen() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "max_mana" field.</summary>
    public const int MaxManaFieldNumber = 37;
    private readonly static uint MaxManaDefaultValue = 0;

    private uint maxMana_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxMana {
      get { if ((_hasBits0 & 16777216) != 0) { return maxMana_; } else { return MaxManaDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        maxMana_ = value;
      }
    }
    /// <summary>Gets whether the "max_mana" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxMana {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "max_mana" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxMana() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "mana_regen" field.</summary>
    public const int ManaRegenFieldNumber = 38;
    private readonly static float ManaRegenDefaultValue = 0F;

    private float manaRegen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ManaRegen {
      get { if ((_hasBits0 & 33554432) != 0) { return manaRegen_; } else { return ManaRegenDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        manaRegen_ = value;
      }
    }
    /// <summary>Gets whether the "mana_regen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasManaRegen {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "mana_regen" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearManaRegen() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 40;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> _repeated_abilities_codec
        = pb::FieldCodec.ForMessage(322, global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> abilities_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> Abilities {
      get { return abilities_; }
    }

    /// <summary>Field number for the "talents" field.</summary>
    public const int TalentsFieldNumber = 41;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> _repeated_talents_codec
        = pb::FieldCodec.ForMessage(330, global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> talents_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> Talents {
      get { return talents_; }
    }

    /// <summary>Field number for the "facet_abilities" field.</summary>
    public const int FacetAbilitiesFieldNumber = 42;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItemList> _repeated_facetAbilities_codec
        = pb::FieldCodec.ForMessage(338, global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItemList.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItemList> facetAbilities_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItemList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItemList> FacetAbilities {
      get { return facetAbilities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (OrderId != other.OrderId) return false;
      if (NameLoc != other.NameLoc) return false;
      if (BioLoc != other.BioLoc) return false;
      if (HypeLoc != other.HypeLoc) return false;
      if (NpeDescLoc != other.NpeDescLoc) return false;
      if(!facets_.Equals(other.facets_)) return false;
      if (StrBase != other.StrBase) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StrGain, other.StrGain)) return false;
      if (AgiBase != other.AgiBase) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AgiGain, other.AgiGain)) return false;
      if (IntBase != other.IntBase) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntGain, other.IntGain)) return false;
      if (PrimaryAttr != other.PrimaryAttr) return false;
      if (Complexity != other.Complexity) return false;
      if (AttackCapability != other.AttackCapability) return false;
      if(!roleLevels_.Equals(other.roleLevels_)) return false;
      if (DamageMin != other.DamageMin) return false;
      if (DamageMax != other.DamageMax) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackRate, other.AttackRate)) return false;
      if (AttackRange != other.AttackRange) return false;
      if (ProjectileSpeed != other.ProjectileSpeed) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Armor, other.Armor)) return false;
      if (MagicResistance != other.MagicResistance) return false;
      if (MovementSpeed != other.MovementSpeed) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TurnRate, other.TurnRate)) return false;
      if (SightRangeDay != other.SightRangeDay) return false;
      if (SightRangeNight != other.SightRangeNight) return false;
      if (MaxHealth != other.MaxHealth) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HealthRegen, other.HealthRegen)) return false;
      if (MaxMana != other.MaxMana) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ManaRegen, other.ManaRegen)) return false;
      if(!abilities_.Equals(other.abilities_)) return false;
      if(!talents_.Equals(other.talents_)) return false;
      if(!facetAbilities_.Equals(other.facetAbilities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasNameLoc) hash ^= NameLoc.GetHashCode();
      if (HasBioLoc) hash ^= BioLoc.GetHashCode();
      if (HasHypeLoc) hash ^= HypeLoc.GetHashCode();
      if (HasNpeDescLoc) hash ^= NpeDescLoc.GetHashCode();
      hash ^= facets_.GetHashCode();
      if (HasStrBase) hash ^= StrBase.GetHashCode();
      if (HasStrGain) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StrGain);
      if (HasAgiBase) hash ^= AgiBase.GetHashCode();
      if (HasAgiGain) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AgiGain);
      if (HasIntBase) hash ^= IntBase.GetHashCode();
      if (HasIntGain) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntGain);
      if (HasPrimaryAttr) hash ^= PrimaryAttr.GetHashCode();
      if (HasComplexity) hash ^= Complexity.GetHashCode();
      if (HasAttackCapability) hash ^= AttackCapability.GetHashCode();
      hash ^= roleLevels_.GetHashCode();
      if (HasDamageMin) hash ^= DamageMin.GetHashCode();
      if (HasDamageMax) hash ^= DamageMax.GetHashCode();
      if (HasAttackRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackRate);
      if (HasAttackRange) hash ^= AttackRange.GetHashCode();
      if (HasProjectileSpeed) hash ^= ProjectileSpeed.GetHashCode();
      if (HasArmor) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Armor);
      if (HasMagicResistance) hash ^= MagicResistance.GetHashCode();
      if (HasMovementSpeed) hash ^= MovementSpeed.GetHashCode();
      if (HasTurnRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TurnRate);
      if (HasSightRangeDay) hash ^= SightRangeDay.GetHashCode();
      if (HasSightRangeNight) hash ^= SightRangeNight.GetHashCode();
      if (HasMaxHealth) hash ^= MaxHealth.GetHashCode();
      if (HasHealthRegen) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HealthRegen);
      if (HasMaxMana) hash ^= MaxMana.GetHashCode();
      if (HasManaRegen) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ManaRegen);
      hash ^= abilities_.GetHashCode();
      hash ^= talents_.GetHashCode();
      hash ^= facetAbilities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasOrderId) {
        output.WriteRawTag(24);
        output.WriteUInt32(OrderId);
      }
      if (HasNameLoc) {
        output.WriteRawTag(42);
        output.WriteString(NameLoc);
      }
      if (HasBioLoc) {
        output.WriteRawTag(50);
        output.WriteString(BioLoc);
      }
      if (HasHypeLoc) {
        output.WriteRawTag(58);
        output.WriteString(HypeLoc);
      }
      if (HasNpeDescLoc) {
        output.WriteRawTag(66);
        output.WriteString(NpeDescLoc);
      }
      if (HasStrBase) {
        output.WriteRawTag(80);
        output.WriteUInt32(StrBase);
      }
      if (HasStrGain) {
        output.WriteRawTag(93);
        output.WriteFloat(StrGain);
      }
      if (HasAgiBase) {
        output.WriteRawTag(96);
        output.WriteUInt32(AgiBase);
      }
      if (HasAgiGain) {
        output.WriteRawTag(109);
        output.WriteFloat(AgiGain);
      }
      if (HasIntBase) {
        output.WriteRawTag(112);
        output.WriteUInt32(IntBase);
      }
      if (HasIntGain) {
        output.WriteRawTag(125);
        output.WriteFloat(IntGain);
      }
      if (HasPrimaryAttr) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(PrimaryAttr);
      }
      if (HasComplexity) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Complexity);
      }
      if (HasAttackCapability) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(AttackCapability);
      }
      roleLevels_.WriteTo(output, _repeated_roleLevels_codec);
      if (HasDamageMin) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DamageMin);
      }
      if (HasDamageMax) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(DamageMax);
      }
      if (HasAttackRate) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(AttackRate);
      }
      if (HasAttackRange) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(AttackRange);
      }
      if (HasProjectileSpeed) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(ProjectileSpeed);
      }
      if (HasArmor) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(Armor);
      }
      if (HasMagicResistance) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(MagicResistance);
      }
      if (HasMovementSpeed) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(MovementSpeed);
      }
      if (HasTurnRate) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(TurnRate);
      }
      if (HasSightRangeDay) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(SightRangeDay);
      }
      if (HasSightRangeNight) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(SightRangeNight);
      }
      if (HasMaxHealth) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(MaxHealth);
      }
      if (HasHealthRegen) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(HealthRegen);
      }
      if (HasMaxMana) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(MaxMana);
      }
      if (HasManaRegen) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(ManaRegen);
      }
      abilities_.WriteTo(output, _repeated_abilities_codec);
      talents_.WriteTo(output, _repeated_talents_codec);
      facetAbilities_.WriteTo(output, _repeated_facetAbilities_codec);
      facets_.WriteTo(output, _repeated_facets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasOrderId) {
        output.WriteRawTag(24);
        output.WriteUInt32(OrderId);
      }
      if (HasNameLoc) {
        output.WriteRawTag(42);
        output.WriteString(NameLoc);
      }
      if (HasBioLoc) {
        output.WriteRawTag(50);
        output.WriteString(BioLoc);
      }
      if (HasHypeLoc) {
        output.WriteRawTag(58);
        output.WriteString(HypeLoc);
      }
      if (HasNpeDescLoc) {
        output.WriteRawTag(66);
        output.WriteString(NpeDescLoc);
      }
      if (HasStrBase) {
        output.WriteRawTag(80);
        output.WriteUInt32(StrBase);
      }
      if (HasStrGain) {
        output.WriteRawTag(93);
        output.WriteFloat(StrGain);
      }
      if (HasAgiBase) {
        output.WriteRawTag(96);
        output.WriteUInt32(AgiBase);
      }
      if (HasAgiGain) {
        output.WriteRawTag(109);
        output.WriteFloat(AgiGain);
      }
      if (HasIntBase) {
        output.WriteRawTag(112);
        output.WriteUInt32(IntBase);
      }
      if (HasIntGain) {
        output.WriteRawTag(125);
        output.WriteFloat(IntGain);
      }
      if (HasPrimaryAttr) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(PrimaryAttr);
      }
      if (HasComplexity) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Complexity);
      }
      if (HasAttackCapability) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(AttackCapability);
      }
      roleLevels_.WriteTo(ref output, _repeated_roleLevels_codec);
      if (HasDamageMin) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DamageMin);
      }
      if (HasDamageMax) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(DamageMax);
      }
      if (HasAttackRate) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(AttackRate);
      }
      if (HasAttackRange) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(AttackRange);
      }
      if (HasProjectileSpeed) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(ProjectileSpeed);
      }
      if (HasArmor) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(Armor);
      }
      if (HasMagicResistance) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(MagicResistance);
      }
      if (HasMovementSpeed) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(MovementSpeed);
      }
      if (HasTurnRate) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(TurnRate);
      }
      if (HasSightRangeDay) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(SightRangeDay);
      }
      if (HasSightRangeNight) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(SightRangeNight);
      }
      if (HasMaxHealth) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(MaxHealth);
      }
      if (HasHealthRegen) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(HealthRegen);
      }
      if (HasMaxMana) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(MaxMana);
      }
      if (HasManaRegen) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(ManaRegen);
      }
      abilities_.WriteTo(ref output, _repeated_abilities_codec);
      talents_.WriteTo(ref output, _repeated_talents_codec);
      facetAbilities_.WriteTo(ref output, _repeated_facetAbilities_codec);
      facets_.WriteTo(ref output, _repeated_facets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrderId);
      }
      if (HasNameLoc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameLoc);
      }
      if (HasBioLoc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BioLoc);
      }
      if (HasHypeLoc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HypeLoc);
      }
      if (HasNpeDescLoc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NpeDescLoc);
      }
      size += facets_.CalculateSize(_repeated_facets_codec);
      if (HasStrBase) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StrBase);
      }
      if (HasStrGain) {
        size += 1 + 4;
      }
      if (HasAgiBase) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AgiBase);
      }
      if (HasAgiGain) {
        size += 1 + 4;
      }
      if (HasIntBase) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntBase);
      }
      if (HasIntGain) {
        size += 1 + 4;
      }
      if (HasPrimaryAttr) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PrimaryAttr);
      }
      if (HasComplexity) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Complexity);
      }
      if (HasAttackCapability) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackCapability);
      }
      size += roleLevels_.CalculateSize(_repeated_roleLevels_codec);
      if (HasDamageMin) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DamageMin);
      }
      if (HasDamageMax) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DamageMax);
      }
      if (HasAttackRate) {
        size += 2 + 4;
      }
      if (HasAttackRange) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackRange);
      }
      if (HasProjectileSpeed) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProjectileSpeed);
      }
      if (HasArmor) {
        size += 2 + 4;
      }
      if (HasMagicResistance) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MagicResistance);
      }
      if (HasMovementSpeed) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MovementSpeed);
      }
      if (HasTurnRate) {
        size += 2 + 4;
      }
      if (HasSightRangeDay) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SightRangeDay);
      }
      if (HasSightRangeNight) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SightRangeNight);
      }
      if (HasMaxHealth) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxHealth);
      }
      if (HasHealthRegen) {
        size += 2 + 4;
      }
      if (HasMaxMana) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxMana);
      }
      if (HasManaRegen) {
        size += 2 + 4;
      }
      size += abilities_.CalculateSize(_repeated_abilities_codec);
      size += talents_.CalculateSize(_repeated_talents_codec);
      size += facetAbilities_.CalculateSize(_repeated_facetAbilities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataHero other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasNameLoc) {
        NameLoc = other.NameLoc;
      }
      if (other.HasBioLoc) {
        BioLoc = other.BioLoc;
      }
      if (other.HasHypeLoc) {
        HypeLoc = other.HypeLoc;
      }
      if (other.HasNpeDescLoc) {
        NpeDescLoc = other.NpeDescLoc;
      }
      facets_.Add(other.facets_);
      if (other.HasStrBase) {
        StrBase = other.StrBase;
      }
      if (other.HasStrGain) {
        StrGain = other.StrGain;
      }
      if (other.HasAgiBase) {
        AgiBase = other.AgiBase;
      }
      if (other.HasAgiGain) {
        AgiGain = other.AgiGain;
      }
      if (other.HasIntBase) {
        IntBase = other.IntBase;
      }
      if (other.HasIntGain) {
        IntGain = other.IntGain;
      }
      if (other.HasPrimaryAttr) {
        PrimaryAttr = other.PrimaryAttr;
      }
      if (other.HasComplexity) {
        Complexity = other.Complexity;
      }
      if (other.HasAttackCapability) {
        AttackCapability = other.AttackCapability;
      }
      roleLevels_.Add(other.roleLevels_);
      if (other.HasDamageMin) {
        DamageMin = other.DamageMin;
      }
      if (other.HasDamageMax) {
        DamageMax = other.DamageMax;
      }
      if (other.HasAttackRate) {
        AttackRate = other.AttackRate;
      }
      if (other.HasAttackRange) {
        AttackRange = other.AttackRange;
      }
      if (other.HasProjectileSpeed) {
        ProjectileSpeed = other.ProjectileSpeed;
      }
      if (other.HasArmor) {
        Armor = other.Armor;
      }
      if (other.HasMagicResistance) {
        MagicResistance = other.MagicResistance;
      }
      if (other.HasMovementSpeed) {
        MovementSpeed = other.MovementSpeed;
      }
      if (other.HasTurnRate) {
        TurnRate = other.TurnRate;
      }
      if (other.HasSightRangeDay) {
        SightRangeDay = other.SightRangeDay;
      }
      if (other.HasSightRangeNight) {
        SightRangeNight = other.SightRangeNight;
      }
      if (other.HasMaxHealth) {
        MaxHealth = other.MaxHealth;
      }
      if (other.HasHealthRegen) {
        HealthRegen = other.HealthRegen;
      }
      if (other.HasMaxMana) {
        MaxMana = other.MaxMana;
      }
      if (other.HasManaRegen) {
        ManaRegen = other.ManaRegen;
      }
      abilities_.Add(other.abilities_);
      talents_.Add(other.talents_);
      facetAbilities_.Add(other.facetAbilities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            OrderId = input.ReadUInt32();
            break;
          }
          case 42: {
            NameLoc = input.ReadString();
            break;
          }
          case 50: {
            BioLoc = input.ReadString();
            break;
          }
          case 58: {
            HypeLoc = input.ReadString();
            break;
          }
          case 66: {
            NpeDescLoc = input.ReadString();
            break;
          }
          case 80: {
            StrBase = input.ReadUInt32();
            break;
          }
          case 93: {
            StrGain = input.ReadFloat();
            break;
          }
          case 96: {
            AgiBase = input.ReadUInt32();
            break;
          }
          case 109: {
            AgiGain = input.ReadFloat();
            break;
          }
          case 112: {
            IntBase = input.ReadUInt32();
            break;
          }
          case 125: {
            IntGain = input.ReadFloat();
            break;
          }
          case 160: {
            PrimaryAttr = input.ReadUInt32();
            break;
          }
          case 168: {
            Complexity = input.ReadUInt32();
            break;
          }
          case 176: {
            AttackCapability = input.ReadUInt32();
            break;
          }
          case 186:
          case 184: {
            roleLevels_.AddEntriesFrom(input, _repeated_roleLevels_codec);
            break;
          }
          case 192: {
            DamageMin = input.ReadInt32();
            break;
          }
          case 200: {
            DamageMax = input.ReadInt32();
            break;
          }
          case 213: {
            AttackRate = input.ReadFloat();
            break;
          }
          case 216: {
            AttackRange = input.ReadUInt32();
            break;
          }
          case 224: {
            ProjectileSpeed = input.ReadUInt32();
            break;
          }
          case 237: {
            Armor = input.ReadFloat();
            break;
          }
          case 240: {
            MagicResistance = input.ReadUInt32();
            break;
          }
          case 248: {
            MovementSpeed = input.ReadUInt32();
            break;
          }
          case 261: {
            TurnRate = input.ReadFloat();
            break;
          }
          case 264: {
            SightRangeDay = input.ReadUInt32();
            break;
          }
          case 272: {
            SightRangeNight = input.ReadUInt32();
            break;
          }
          case 280: {
            MaxHealth = input.ReadUInt32();
            break;
          }
          case 293: {
            HealthRegen = input.ReadFloat();
            break;
          }
          case 296: {
            MaxMana = input.ReadUInt32();
            break;
          }
          case 309: {
            ManaRegen = input.ReadFloat();
            break;
          }
          case 322: {
            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
            break;
          }
          case 330: {
            talents_.AddEntriesFrom(input, _repeated_talents_codec);
            break;
          }
          case 338: {
            facetAbilities_.AddEntriesFrom(input, _repeated_facetAbilities_codec);
            break;
          }
          case 346: {
            facets_.AddEntriesFrom(input, _repeated_facets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            OrderId = input.ReadUInt32();
            break;
          }
          case 42: {
            NameLoc = input.ReadString();
            break;
          }
          case 50: {
            BioLoc = input.ReadString();
            break;
          }
          case 58: {
            HypeLoc = input.ReadString();
            break;
          }
          case 66: {
            NpeDescLoc = input.ReadString();
            break;
          }
          case 80: {
            StrBase = input.ReadUInt32();
            break;
          }
          case 93: {
            StrGain = input.ReadFloat();
            break;
          }
          case 96: {
            AgiBase = input.ReadUInt32();
            break;
          }
          case 109: {
            AgiGain = input.ReadFloat();
            break;
          }
          case 112: {
            IntBase = input.ReadUInt32();
            break;
          }
          case 125: {
            IntGain = input.ReadFloat();
            break;
          }
          case 160: {
            PrimaryAttr = input.ReadUInt32();
            break;
          }
          case 168: {
            Complexity = input.ReadUInt32();
            break;
          }
          case 176: {
            AttackCapability = input.ReadUInt32();
            break;
          }
          case 186:
          case 184: {
            roleLevels_.AddEntriesFrom(ref input, _repeated_roleLevels_codec);
            break;
          }
          case 192: {
            DamageMin = input.ReadInt32();
            break;
          }
          case 200: {
            DamageMax = input.ReadInt32();
            break;
          }
          case 213: {
            AttackRate = input.ReadFloat();
            break;
          }
          case 216: {
            AttackRange = input.ReadUInt32();
            break;
          }
          case 224: {
            ProjectileSpeed = input.ReadUInt32();
            break;
          }
          case 237: {
            Armor = input.ReadFloat();
            break;
          }
          case 240: {
            MagicResistance = input.ReadUInt32();
            break;
          }
          case 248: {
            MovementSpeed = input.ReadUInt32();
            break;
          }
          case 261: {
            TurnRate = input.ReadFloat();
            break;
          }
          case 264: {
            SightRangeDay = input.ReadUInt32();
            break;
          }
          case 272: {
            SightRangeNight = input.ReadUInt32();
            break;
          }
          case 280: {
            MaxHealth = input.ReadUInt32();
            break;
          }
          case 293: {
            HealthRegen = input.ReadFloat();
            break;
          }
          case 296: {
            MaxMana = input.ReadUInt32();
            break;
          }
          case 309: {
            ManaRegen = input.ReadFloat();
            break;
          }
          case 322: {
            abilities_.AddEntriesFrom(ref input, _repeated_abilities_codec);
            break;
          }
          case 330: {
            talents_.AddEntriesFrom(ref input, _repeated_talents_codec);
            break;
          }
          case 338: {
            facetAbilities_.AddEntriesFrom(ref input, _repeated_facetAbilities_codec);
            break;
          }
          case 346: {
            facets_.AddEntriesFrom(ref input, _repeated_facets_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGameDataHero message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Facet : pb::IMessage<Facet>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Facet> _parser = new pb::MessageParser<Facet>(() => new Facet());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Facet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGameDataHero.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Facet() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Facet(Facet other) : this() {
          _hasBits0 = other._hasBits0;
          color_ = other.color_;
          titleLoc_ = other.titleLoc_;
          descriptionLoc_ = other.descriptionLoc_;
          name_ = other.name_;
          icon_ = other.icon_;
          gradientId_ = other.gradientId_;
          index_ = other.index_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Facet Clone() {
          return new Facet(this);
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 1;
        private readonly static uint ColorDefaultValue = 0;

        private uint color_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Color {
          get { if ((_hasBits0 & 1) != 0) { return color_; } else { return ColorDefaultValue; } }
          set {
            _hasBits0 |= 1;
            color_ = value;
          }
        }
        /// <summary>Gets whether the "color" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasColor {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "color" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearColor() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "title_loc" field.</summary>
        public const int TitleLocFieldNumber = 2;
        private readonly static string TitleLocDefaultValue = "";

        private string titleLoc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TitleLoc {
          get { return titleLoc_ ?? TitleLocDefaultValue; }
          set {
            titleLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "title_loc" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTitleLoc {
          get { return titleLoc_ != null; }
        }
        /// <summary>Clears the value of the "title_loc" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTitleLoc() {
          titleLoc_ = null;
        }

        /// <summary>Field number for the "description_loc" field.</summary>
        public const int DescriptionLocFieldNumber = 3;
        private readonly static string DescriptionLocDefaultValue = "";

        private string descriptionLoc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DescriptionLoc {
          get { return descriptionLoc_ ?? DescriptionLocDefaultValue; }
          set {
            descriptionLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "description_loc" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDescriptionLoc {
          get { return descriptionLoc_ != null; }
        }
        /// <summary>Clears the value of the "description_loc" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDescriptionLoc() {
          descriptionLoc_ = null;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 4;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "icon" field.</summary>
        public const int IconFieldNumber = 5;
        private readonly static string IconDefaultValue = "";

        private string icon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Icon {
          get { return icon_ ?? IconDefaultValue; }
          set {
            icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "icon" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIcon {
          get { return icon_ != null; }
        }
        /// <summary>Clears the value of the "icon" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIcon() {
          icon_ = null;
        }

        /// <summary>Field number for the "gradient_id" field.</summary>
        public const int GradientIdFieldNumber = 6;
        private readonly static int GradientIdDefaultValue = 0;

        private int gradientId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GradientId {
          get { if ((_hasBits0 & 2) != 0) { return gradientId_; } else { return GradientIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            gradientId_ = value;
          }
        }
        /// <summary>Gets whether the "gradient_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGradientId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "gradient_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGradientId() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 7;
        private readonly static uint IndexDefaultValue = 0;

        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { if ((_hasBits0 & 4) != 0) { return index_; } else { return IndexDefaultValue; } }
          set {
            _hasBits0 |= 4;
            index_ = value;
          }
        }
        /// <summary>Gets whether the "index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIndex {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIndex() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Facet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Facet other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Color != other.Color) return false;
          if (TitleLoc != other.TitleLoc) return false;
          if (DescriptionLoc != other.DescriptionLoc) return false;
          if (Name != other.Name) return false;
          if (Icon != other.Icon) return false;
          if (GradientId != other.GradientId) return false;
          if (Index != other.Index) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasColor) hash ^= Color.GetHashCode();
          if (HasTitleLoc) hash ^= TitleLoc.GetHashCode();
          if (HasDescriptionLoc) hash ^= DescriptionLoc.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (HasIcon) hash ^= Icon.GetHashCode();
          if (HasGradientId) hash ^= GradientId.GetHashCode();
          if (HasIndex) hash ^= Index.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasColor) {
            output.WriteRawTag(8);
            output.WriteUInt32(Color);
          }
          if (HasTitleLoc) {
            output.WriteRawTag(18);
            output.WriteString(TitleLoc);
          }
          if (HasDescriptionLoc) {
            output.WriteRawTag(26);
            output.WriteString(DescriptionLoc);
          }
          if (HasName) {
            output.WriteRawTag(34);
            output.WriteString(Name);
          }
          if (HasIcon) {
            output.WriteRawTag(42);
            output.WriteString(Icon);
          }
          if (HasGradientId) {
            output.WriteRawTag(48);
            output.WriteInt32(GradientId);
          }
          if (HasIndex) {
            output.WriteRawTag(56);
            output.WriteUInt32(Index);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasColor) {
            output.WriteRawTag(8);
            output.WriteUInt32(Color);
          }
          if (HasTitleLoc) {
            output.WriteRawTag(18);
            output.WriteString(TitleLoc);
          }
          if (HasDescriptionLoc) {
            output.WriteRawTag(26);
            output.WriteString(DescriptionLoc);
          }
          if (HasName) {
            output.WriteRawTag(34);
            output.WriteString(Name);
          }
          if (HasIcon) {
            output.WriteRawTag(42);
            output.WriteString(Icon);
          }
          if (HasGradientId) {
            output.WriteRawTag(48);
            output.WriteInt32(GradientId);
          }
          if (HasIndex) {
            output.WriteRawTag(56);
            output.WriteUInt32(Index);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasColor) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
          }
          if (HasTitleLoc) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleLoc);
          }
          if (HasDescriptionLoc) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DescriptionLoc);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasIcon) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
          }
          if (HasGradientId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradientId);
          }
          if (HasIndex) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Facet other) {
          if (other == null) {
            return;
          }
          if (other.HasColor) {
            Color = other.Color;
          }
          if (other.HasTitleLoc) {
            TitleLoc = other.TitleLoc;
          }
          if (other.HasDescriptionLoc) {
            DescriptionLoc = other.DescriptionLoc;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasIcon) {
            Icon = other.Icon;
          }
          if (other.HasGradientId) {
            GradientId = other.GradientId;
          }
          if (other.HasIndex) {
            Index = other.Index;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Color = input.ReadUInt32();
                break;
              }
              case 18: {
                TitleLoc = input.ReadString();
                break;
              }
              case 26: {
                DescriptionLoc = input.ReadString();
                break;
              }
              case 34: {
                Name = input.ReadString();
                break;
              }
              case 42: {
                Icon = input.ReadString();
                break;
              }
              case 48: {
                GradientId = input.ReadInt32();
                break;
              }
              case 56: {
                Index = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Color = input.ReadUInt32();
                break;
              }
              case 18: {
                TitleLoc = input.ReadString();
                break;
              }
              case 26: {
                DescriptionLoc = input.ReadString();
                break;
              }
              case 34: {
                Name = input.ReadString();
                break;
              }
              case 42: {
                Icon = input.ReadString();
                break;
              }
              case 48: {
                GradientId = input.ReadInt32();
                break;
              }
              case 56: {
                Index = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGameDataAbilities : pb::IMessage<CMsgGameDataAbilities>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataAbilities> _parser = new pb::MessageParser<CMsgGameDataAbilities>(() => new CMsgGameDataAbilities());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataAbilities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataAbilities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataAbilities(CMsgGameDataAbilities other) : this() {
      abilities_ = other.abilities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataAbilities Clone() {
      return new CMsgGameDataAbilities(this);
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> _repeated_abilities_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> abilities_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> Abilities {
      get { return abilities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataAbilities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataAbilities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!abilities_.Equals(other.abilities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= abilities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      abilities_.WriteTo(output, _repeated_abilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      abilities_.WriteTo(ref output, _repeated_abilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += abilities_.CalculateSize(_repeated_abilities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataAbilities other) {
      if (other == null) {
        return;
      }
      abilities_.Add(other.abilities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            abilities_.AddEntriesFrom(ref input, _repeated_abilities_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameDataItems : pb::IMessage<CMsgGameDataItems>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataItems> _parser = new pb::MessageParser<CMsgGameDataItems>(() => new CMsgGameDataItems());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataItems(CMsgGameDataItems other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataItems Clone() {
      return new CMsgGameDataItems(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> items_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataAbilityOrItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataItems other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameDataHeroes : pb::IMessage<CMsgGameDataHeroes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataHeroes> _parser = new pb::MessageParser<CMsgGameDataHeroes>(() => new CMsgGameDataHeroes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataHeroes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataHeroes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataHeroes(CMsgGameDataHeroes other) : this() {
      heroes_ = other.heroes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataHeroes Clone() {
      return new CMsgGameDataHeroes(this);
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataHero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGameDataHero.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataHero> heroes_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataHero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataHero> Heroes {
      get { return heroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataHeroes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataHeroes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroes_.Equals(other.heroes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      heroes_.WriteTo(output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      heroes_.WriteTo(ref output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataHeroes other) {
      if (other == null) {
        return;
      }
      heroes_.Add(other.heroes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            heroes_.AddEntriesFrom(ref input, _repeated_heroes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGameDataHeroList : pb::IMessage<CMsgGameDataHeroList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataHeroList> _parser = new pb::MessageParser<CMsgGameDataHeroList>(() => new CMsgGameDataHeroList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataHeroList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataHeroList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataHeroList(CMsgGameDataHeroList other) : this() {
      heroes_ = other.heroes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataHeroList Clone() {
      return new CMsgGameDataHeroList(this);
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataHeroList.Types.HeroInfo> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGameDataHeroList.Types.HeroInfo.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataHeroList.Types.HeroInfo> heroes_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataHeroList.Types.HeroInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataHeroList.Types.HeroInfo> Heroes {
      get { return heroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataHeroList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataHeroList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroes_.Equals(other.heroes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      heroes_.WriteTo(output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      heroes_.WriteTo(ref output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataHeroList other) {
      if (other == null) {
        return;
      }
      heroes_.Add(other.heroes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            heroes_.AddEntriesFrom(ref input, _repeated_heroes_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGameDataHeroList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class HeroInfo : pb::IMessage<HeroInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<HeroInfo> _parser = new pb::MessageParser<HeroInfo>(() => new HeroInfo());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HeroInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGameDataHeroList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroInfo(HeroInfo other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          name_ = other.name_;
          nameLoc_ = other.nameLoc_;
          nameEnglishLoc_ = other.nameEnglishLoc_;
          primaryAttr_ = other.primaryAttr_;
          complexity_ = other.complexity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroInfo Clone() {
          return new HeroInfo(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static int IdDefaultValue = 0;

        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "name_loc" field.</summary>
        public const int NameLocFieldNumber = 3;
        private readonly static string NameLocDefaultValue = "";

        private string nameLoc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NameLoc {
          get { return nameLoc_ ?? NameLocDefaultValue; }
          set {
            nameLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name_loc" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNameLoc {
          get { return nameLoc_ != null; }
        }
        /// <summary>Clears the value of the "name_loc" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNameLoc() {
          nameLoc_ = null;
        }

        /// <summary>Field number for the "name_english_loc" field.</summary>
        public const int NameEnglishLocFieldNumber = 4;
        private readonly static string NameEnglishLocDefaultValue = "";

        private string nameEnglishLoc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NameEnglishLoc {
          get { return nameEnglishLoc_ ?? NameEnglishLocDefaultValue; }
          set {
            nameEnglishLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name_english_loc" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNameEnglishLoc {
          get { return nameEnglishLoc_ != null; }
        }
        /// <summary>Clears the value of the "name_english_loc" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNameEnglishLoc() {
          nameEnglishLoc_ = null;
        }

        /// <summary>Field number for the "primary_attr" field.</summary>
        public const int PrimaryAttrFieldNumber = 5;
        private readonly static uint PrimaryAttrDefaultValue = 0;

        private uint primaryAttr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PrimaryAttr {
          get { if ((_hasBits0 & 2) != 0) { return primaryAttr_; } else { return PrimaryAttrDefaultValue; } }
          set {
            _hasBits0 |= 2;
            primaryAttr_ = value;
          }
        }
        /// <summary>Gets whether the "primary_attr" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPrimaryAttr {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "primary_attr" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPrimaryAttr() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "complexity" field.</summary>
        public const int ComplexityFieldNumber = 6;
        private readonly static uint ComplexityDefaultValue = 0;

        private uint complexity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Complexity {
          get { if ((_hasBits0 & 4) != 0) { return complexity_; } else { return ComplexityDefaultValue; } }
          set {
            _hasBits0 |= 4;
            complexity_ = value;
          }
        }
        /// <summary>Gets whether the "complexity" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasComplexity {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "complexity" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearComplexity() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HeroInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HeroInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (NameLoc != other.NameLoc) return false;
          if (NameEnglishLoc != other.NameEnglishLoc) return false;
          if (PrimaryAttr != other.PrimaryAttr) return false;
          if (Complexity != other.Complexity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (HasNameLoc) hash ^= NameLoc.GetHashCode();
          if (HasNameEnglishLoc) hash ^= NameEnglishLoc.GetHashCode();
          if (HasPrimaryAttr) hash ^= PrimaryAttr.GetHashCode();
          if (HasComplexity) hash ^= Complexity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasNameLoc) {
            output.WriteRawTag(26);
            output.WriteString(NameLoc);
          }
          if (HasNameEnglishLoc) {
            output.WriteRawTag(34);
            output.WriteString(NameEnglishLoc);
          }
          if (HasPrimaryAttr) {
            output.WriteRawTag(40);
            output.WriteUInt32(PrimaryAttr);
          }
          if (HasComplexity) {
            output.WriteRawTag(48);
            output.WriteUInt32(Complexity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasNameLoc) {
            output.WriteRawTag(26);
            output.WriteString(NameLoc);
          }
          if (HasNameEnglishLoc) {
            output.WriteRawTag(34);
            output.WriteString(NameEnglishLoc);
          }
          if (HasPrimaryAttr) {
            output.WriteRawTag(40);
            output.WriteUInt32(PrimaryAttr);
          }
          if (HasComplexity) {
            output.WriteRawTag(48);
            output.WriteUInt32(Complexity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasNameLoc) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NameLoc);
          }
          if (HasNameEnglishLoc) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEnglishLoc);
          }
          if (HasPrimaryAttr) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrimaryAttr);
          }
          if (HasComplexity) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Complexity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HeroInfo other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasNameLoc) {
            NameLoc = other.NameLoc;
          }
          if (other.HasNameEnglishLoc) {
            NameEnglishLoc = other.NameEnglishLoc;
          }
          if (other.HasPrimaryAttr) {
            PrimaryAttr = other.PrimaryAttr;
          }
          if (other.HasComplexity) {
            Complexity = other.Complexity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                NameLoc = input.ReadString();
                break;
              }
              case 34: {
                NameEnglishLoc = input.ReadString();
                break;
              }
              case 40: {
                PrimaryAttr = input.ReadUInt32();
                break;
              }
              case 48: {
                Complexity = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                NameLoc = input.ReadString();
                break;
              }
              case 34: {
                NameEnglishLoc = input.ReadString();
                break;
              }
              case 40: {
                PrimaryAttr = input.ReadUInt32();
                break;
              }
              case 48: {
                Complexity = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgGameDataItemAbilityList : pb::IMessage<CMsgGameDataItemAbilityList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGameDataItemAbilityList> _parser = new pb::MessageParser<CMsgGameDataItemAbilityList>(() => new CMsgGameDataItemAbilityList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGameDataItemAbilityList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataItemAbilityList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataItemAbilityList(CMsgGameDataItemAbilityList other) : this() {
      itemabilities_ = other.itemabilities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGameDataItemAbilityList Clone() {
      return new CMsgGameDataItemAbilityList(this);
    }

    /// <summary>Field number for the "itemabilities" field.</summary>
    public const int ItemabilitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo> _repeated_itemabilities_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo> itemabilities_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo> Itemabilities {
      get { return itemabilities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGameDataItemAbilityList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGameDataItemAbilityList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemabilities_.Equals(other.itemabilities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemabilities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      itemabilities_.WriteTo(output, _repeated_itemabilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      itemabilities_.WriteTo(ref output, _repeated_itemabilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemabilities_.CalculateSize(_repeated_itemabilities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGameDataItemAbilityList other) {
      if (other == null) {
        return;
      }
      itemabilities_.Add(other.itemabilities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            itemabilities_.AddEntriesFrom(input, _repeated_itemabilities_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            itemabilities_.AddEntriesFrom(ref input, _repeated_itemabilities_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgGameDataItemAbilityList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ItemAbilityInfo : pb::IMessage<ItemAbilityInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ItemAbilityInfo> _parser = new pb::MessageParser<ItemAbilityInfo>(() => new ItemAbilityInfo());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemAbilityInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemAbilityInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemAbilityInfo(ItemAbilityInfo other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          name_ = other.name_;
          nameLoc_ = other.nameLoc_;
          nameEnglishLoc_ = other.nameEnglishLoc_;
          neutralItemTier_ = other.neutralItemTier_;
          isPregameSuggested_ = other.isPregameSuggested_;
          isEarlygameSuggested_ = other.isEarlygameSuggested_;
          isLategameSuggested_ = other.isLategameSuggested_;
          recipes_ = other.recipes_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemAbilityInfo Clone() {
          return new ItemAbilityInfo(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static int IdDefaultValue = -1;

        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "name_loc" field.</summary>
        public const int NameLocFieldNumber = 3;
        private readonly static string NameLocDefaultValue = "";

        private string nameLoc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NameLoc {
          get { return nameLoc_ ?? NameLocDefaultValue; }
          set {
            nameLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name_loc" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNameLoc {
          get { return nameLoc_ != null; }
        }
        /// <summary>Clears the value of the "name_loc" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNameLoc() {
          nameLoc_ = null;
        }

        /// <summary>Field number for the "name_english_loc" field.</summary>
        public const int NameEnglishLocFieldNumber = 4;
        private readonly static string NameEnglishLocDefaultValue = "";

        private string nameEnglishLoc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NameEnglishLoc {
          get { return nameEnglishLoc_ ?? NameEnglishLocDefaultValue; }
          set {
            nameEnglishLoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name_english_loc" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNameEnglishLoc {
          get { return nameEnglishLoc_ != null; }
        }
        /// <summary>Clears the value of the "name_english_loc" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNameEnglishLoc() {
          nameEnglishLoc_ = null;
        }

        /// <summary>Field number for the "neutral_item_tier" field.</summary>
        public const int NeutralItemTierFieldNumber = 5;
        private readonly static int NeutralItemTierDefaultValue = 0;

        private int neutralItemTier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NeutralItemTier {
          get { if ((_hasBits0 & 2) != 0) { return neutralItemTier_; } else { return NeutralItemTierDefaultValue; } }
          set {
            _hasBits0 |= 2;
            neutralItemTier_ = value;
          }
        }
        /// <summary>Gets whether the "neutral_item_tier" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNeutralItemTier {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "neutral_item_tier" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNeutralItemTier() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "is_pregame_suggested" field.</summary>
        public const int IsPregameSuggestedFieldNumber = 6;
        private readonly static bool IsPregameSuggestedDefaultValue = false;

        private bool isPregameSuggested_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsPregameSuggested {
          get { if ((_hasBits0 & 4) != 0) { return isPregameSuggested_; } else { return IsPregameSuggestedDefaultValue; } }
          set {
            _hasBits0 |= 4;
            isPregameSuggested_ = value;
          }
        }
        /// <summary>Gets whether the "is_pregame_suggested" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsPregameSuggested {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "is_pregame_suggested" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsPregameSuggested() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "is_earlygame_suggested" field.</summary>
        public const int IsEarlygameSuggestedFieldNumber = 7;
        private readonly static bool IsEarlygameSuggestedDefaultValue = false;

        private bool isEarlygameSuggested_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsEarlygameSuggested {
          get { if ((_hasBits0 & 8) != 0) { return isEarlygameSuggested_; } else { return IsEarlygameSuggestedDefaultValue; } }
          set {
            _hasBits0 |= 8;
            isEarlygameSuggested_ = value;
          }
        }
        /// <summary>Gets whether the "is_earlygame_suggested" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsEarlygameSuggested {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "is_earlygame_suggested" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsEarlygameSuggested() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "is_lategame_suggested" field.</summary>
        public const int IsLategameSuggestedFieldNumber = 8;
        private readonly static bool IsLategameSuggestedDefaultValue = false;

        private bool isLategameSuggested_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsLategameSuggested {
          get { if ((_hasBits0 & 16) != 0) { return isLategameSuggested_; } else { return IsLategameSuggestedDefaultValue; } }
          set {
            _hasBits0 |= 16;
            isLategameSuggested_ = value;
          }
        }
        /// <summary>Gets whether the "is_lategame_suggested" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsLategameSuggested {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "is_lategame_suggested" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsLategameSuggested() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "recipes" field.</summary>
        public const int RecipesFieldNumber = 9;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo.Types.Recipe> _repeated_recipes_codec
            = pb::FieldCodec.ForMessage(74, global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo.Types.Recipe.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo.Types.Recipe> recipes_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo.Types.Recipe>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo.Types.Recipe> Recipes {
          get { return recipes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ItemAbilityInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ItemAbilityInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (NameLoc != other.NameLoc) return false;
          if (NameEnglishLoc != other.NameEnglishLoc) return false;
          if (NeutralItemTier != other.NeutralItemTier) return false;
          if (IsPregameSuggested != other.IsPregameSuggested) return false;
          if (IsEarlygameSuggested != other.IsEarlygameSuggested) return false;
          if (IsLategameSuggested != other.IsLategameSuggested) return false;
          if(!recipes_.Equals(other.recipes_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (HasNameLoc) hash ^= NameLoc.GetHashCode();
          if (HasNameEnglishLoc) hash ^= NameEnglishLoc.GetHashCode();
          if (HasNeutralItemTier) hash ^= NeutralItemTier.GetHashCode();
          if (HasIsPregameSuggested) hash ^= IsPregameSuggested.GetHashCode();
          if (HasIsEarlygameSuggested) hash ^= IsEarlygameSuggested.GetHashCode();
          if (HasIsLategameSuggested) hash ^= IsLategameSuggested.GetHashCode();
          hash ^= recipes_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasNameLoc) {
            output.WriteRawTag(26);
            output.WriteString(NameLoc);
          }
          if (HasNameEnglishLoc) {
            output.WriteRawTag(34);
            output.WriteString(NameEnglishLoc);
          }
          if (HasNeutralItemTier) {
            output.WriteRawTag(40);
            output.WriteInt32(NeutralItemTier);
          }
          if (HasIsPregameSuggested) {
            output.WriteRawTag(48);
            output.WriteBool(IsPregameSuggested);
          }
          if (HasIsEarlygameSuggested) {
            output.WriteRawTag(56);
            output.WriteBool(IsEarlygameSuggested);
          }
          if (HasIsLategameSuggested) {
            output.WriteRawTag(64);
            output.WriteBool(IsLategameSuggested);
          }
          recipes_.WriteTo(output, _repeated_recipes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasNameLoc) {
            output.WriteRawTag(26);
            output.WriteString(NameLoc);
          }
          if (HasNameEnglishLoc) {
            output.WriteRawTag(34);
            output.WriteString(NameEnglishLoc);
          }
          if (HasNeutralItemTier) {
            output.WriteRawTag(40);
            output.WriteInt32(NeutralItemTier);
          }
          if (HasIsPregameSuggested) {
            output.WriteRawTag(48);
            output.WriteBool(IsPregameSuggested);
          }
          if (HasIsEarlygameSuggested) {
            output.WriteRawTag(56);
            output.WriteBool(IsEarlygameSuggested);
          }
          if (HasIsLategameSuggested) {
            output.WriteRawTag(64);
            output.WriteBool(IsLategameSuggested);
          }
          recipes_.WriteTo(ref output, _repeated_recipes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasNameLoc) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NameLoc);
          }
          if (HasNameEnglishLoc) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEnglishLoc);
          }
          if (HasNeutralItemTier) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeutralItemTier);
          }
          if (HasIsPregameSuggested) {
            size += 1 + 1;
          }
          if (HasIsEarlygameSuggested) {
            size += 1 + 1;
          }
          if (HasIsLategameSuggested) {
            size += 1 + 1;
          }
          size += recipes_.CalculateSize(_repeated_recipes_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ItemAbilityInfo other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasNameLoc) {
            NameLoc = other.NameLoc;
          }
          if (other.HasNameEnglishLoc) {
            NameEnglishLoc = other.NameEnglishLoc;
          }
          if (other.HasNeutralItemTier) {
            NeutralItemTier = other.NeutralItemTier;
          }
          if (other.HasIsPregameSuggested) {
            IsPregameSuggested = other.IsPregameSuggested;
          }
          if (other.HasIsEarlygameSuggested) {
            IsEarlygameSuggested = other.IsEarlygameSuggested;
          }
          if (other.HasIsLategameSuggested) {
            IsLategameSuggested = other.IsLategameSuggested;
          }
          recipes_.Add(other.recipes_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                NameLoc = input.ReadString();
                break;
              }
              case 34: {
                NameEnglishLoc = input.ReadString();
                break;
              }
              case 40: {
                NeutralItemTier = input.ReadInt32();
                break;
              }
              case 48: {
                IsPregameSuggested = input.ReadBool();
                break;
              }
              case 56: {
                IsEarlygameSuggested = input.ReadBool();
                break;
              }
              case 64: {
                IsLategameSuggested = input.ReadBool();
                break;
              }
              case 74: {
                recipes_.AddEntriesFrom(input, _repeated_recipes_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                NameLoc = input.ReadString();
                break;
              }
              case 34: {
                NameEnglishLoc = input.ReadString();
                break;
              }
              case 40: {
                NeutralItemTier = input.ReadInt32();
                break;
              }
              case 48: {
                IsPregameSuggested = input.ReadBool();
                break;
              }
              case 56: {
                IsEarlygameSuggested = input.ReadBool();
                break;
              }
              case 64: {
                IsLategameSuggested = input.ReadBool();
                break;
              }
              case 74: {
                recipes_.AddEntriesFrom(ref input, _repeated_recipes_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the ItemAbilityInfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Recipe : pb::IMessage<Recipe>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Recipe> _parser = new pb::MessageParser<Recipe>(() => new Recipe());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Recipe> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgGameDataItemAbilityList.Types.ItemAbilityInfo.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Recipe() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Recipe(Recipe other) : this() {
              items_ = other.items_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Recipe Clone() {
              return new Recipe(this);
            }

            /// <summary>Field number for the "items" field.</summary>
            public const int ItemsFieldNumber = 1;
            private static readonly pb::FieldCodec<int> _repeated_items_codec
                = pb::FieldCodec.ForInt32(8);
            private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<int> Items {
              get { return items_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Recipe);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Recipe other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!items_.Equals(other.items_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= items_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              items_.WriteTo(output, _repeated_items_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              items_.WriteTo(ref output, _repeated_items_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += items_.CalculateSize(_repeated_items_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Recipe other) {
              if (other == null) {
                return;
              }
              items_.Add(other.items_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    items_.AddEntriesFrom(input, _repeated_items_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10:
                  case 8: {
                    items_.AddEntriesFrom(ref input, _repeated_items_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CMsgLobbyAbilityDraftData : pb::IMessage<CMsgLobbyAbilityDraftData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyAbilityDraftData> _parser = new pb::MessageParser<CMsgLobbyAbilityDraftData>(() => new CMsgLobbyAbilityDraftData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyAbilityDraftData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyAbilityDraftData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyAbilityDraftData(CMsgLobbyAbilityDraftData other) : this() {
      _hasBits0 = other._hasBits0;
      shuffleDraftOrder_ = other.shuffleDraftOrder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyAbilityDraftData Clone() {
      return new CMsgLobbyAbilityDraftData(this);
    }

    /// <summary>Field number for the "shuffle_draft_order" field.</summary>
    public const int ShuffleDraftOrderFieldNumber = 1;
    private readonly static bool ShuffleDraftOrderDefaultValue = false;

    private bool shuffleDraftOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShuffleDraftOrder {
      get { if ((_hasBits0 & 1) != 0) { return shuffleDraftOrder_; } else { return ShuffleDraftOrderDefaultValue; } }
      set {
        _hasBits0 |= 1;
        shuffleDraftOrder_ = value;
      }
    }
    /// <summary>Gets whether the "shuffle_draft_order" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShuffleDraftOrder {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "shuffle_draft_order" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShuffleDraftOrder() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyAbilityDraftData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyAbilityDraftData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShuffleDraftOrder != other.ShuffleDraftOrder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasShuffleDraftOrder) hash ^= ShuffleDraftOrder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasShuffleDraftOrder) {
        output.WriteRawTag(8);
        output.WriteBool(ShuffleDraftOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasShuffleDraftOrder) {
        output.WriteRawTag(8);
        output.WriteBool(ShuffleDraftOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasShuffleDraftOrder) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyAbilityDraftData other) {
      if (other == null) {
        return;
      }
      if (other.HasShuffleDraftOrder) {
        ShuffleDraftOrder = other.ShuffleDraftOrder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShuffleDraftOrder = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ShuffleDraftOrder = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOEconItemDropRateBonus : pb::IMessage<CSOEconItemDropRateBonus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOEconItemDropRateBonus> _parser = new pb::MessageParser<CSOEconItemDropRateBonus>(() => new CSOEconItemDropRateBonus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOEconItemDropRateBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemDropRateBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemDropRateBonus(CSOEconItemDropRateBonus other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      expirationDate_ = other.expirationDate_;
      bonus_ = other.bonus_;
      bonusCount_ = other.bonusCount_;
      itemId_ = other.itemId_;
      defIndex_ = other.defIndex_;
      secondsLeft_ = other.secondsLeft_;
      boosterType_ = other.boosterType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemDropRateBonus Clone() {
      return new CSOEconItemDropRateBonus(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expiration_date" field.</summary>
    public const int ExpirationDateFieldNumber = 2;
    private readonly static uint ExpirationDateDefaultValue = 0;

    private uint expirationDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpirationDate {
      get { if ((_hasBits0 & 2) != 0) { return expirationDate_; } else { return ExpirationDateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expirationDate_ = value;
      }
    }
    /// <summary>Gets whether the "expiration_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpirationDate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expiration_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpirationDate() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 3;
    private readonly static float BonusDefaultValue = 0F;

    private float bonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bonus {
      get { if ((_hasBits0 & 4) != 0) { return bonus_; } else { return BonusDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bonus_ = value;
      }
    }
    /// <summary>Gets whether the "bonus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBonus {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bonus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBonus() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "bonus_count" field.</summary>
    public const int BonusCountFieldNumber = 4;
    private readonly static uint BonusCountDefaultValue = 0;

    private uint bonusCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BonusCount {
      get { if ((_hasBits0 & 8) != 0) { return bonusCount_; } else { return BonusCountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        bonusCount_ = value;
      }
    }
    /// <summary>Gets whether the "bonus_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBonusCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "bonus_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBonusCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 5;
    private readonly static ulong ItemIdDefaultValue = 0UL;

    private ulong itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemId {
      get { if ((_hasBits0 & 16) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        itemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "def_index" field.</summary>
    public const int DefIndexFieldNumber = 6;
    private readonly static uint DefIndexDefaultValue = 0;

    private uint defIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefIndex {
      get { if ((_hasBits0 & 32) != 0) { return defIndex_; } else { return DefIndexDefaultValue; } }
      set {
        _hasBits0 |= 32;
        defIndex_ = value;
      }
    }
    /// <summary>Gets whether the "def_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefIndex {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "def_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefIndex() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "seconds_left" field.</summary>
    public const int SecondsLeftFieldNumber = 7;
    private readonly static uint SecondsLeftDefaultValue = 0;

    private uint secondsLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecondsLeft {
      get { if ((_hasBits0 & 64) != 0) { return secondsLeft_; } else { return SecondsLeftDefaultValue; } }
      set {
        _hasBits0 |= 64;
        secondsLeft_ = value;
      }
    }
    /// <summary>Gets whether the "seconds_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecondsLeft {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "seconds_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecondsLeft() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "booster_type" field.</summary>
    public const int BoosterTypeFieldNumber = 8;
    private readonly static uint BoosterTypeDefaultValue = 0;

    private uint boosterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoosterType {
      get { if ((_hasBits0 & 128) != 0) { return boosterType_; } else { return BoosterTypeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        boosterType_ = value;
      }
    }
    /// <summary>Gets whether the "booster_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBoosterType {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "booster_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBoosterType() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOEconItemDropRateBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOEconItemDropRateBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (ExpirationDate != other.ExpirationDate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bonus, other.Bonus)) return false;
      if (BonusCount != other.BonusCount) return false;
      if (ItemId != other.ItemId) return false;
      if (DefIndex != other.DefIndex) return false;
      if (SecondsLeft != other.SecondsLeft) return false;
      if (BoosterType != other.BoosterType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasExpirationDate) hash ^= ExpirationDate.GetHashCode();
      if (HasBonus) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bonus);
      if (HasBonusCount) hash ^= BonusCount.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (HasDefIndex) hash ^= DefIndex.GetHashCode();
      if (HasSecondsLeft) hash ^= SecondsLeft.GetHashCode();
      if (HasBoosterType) hash ^= BoosterType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasExpirationDate) {
        output.WriteRawTag(21);
        output.WriteFixed32(ExpirationDate);
      }
      if (HasBonus) {
        output.WriteRawTag(29);
        output.WriteFloat(Bonus);
      }
      if (HasBonusCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(BonusCount);
      }
      if (HasItemId) {
        output.WriteRawTag(40);
        output.WriteUInt64(ItemId);
      }
      if (HasDefIndex) {
        output.WriteRawTag(48);
        output.WriteUInt32(DefIndex);
      }
      if (HasSecondsLeft) {
        output.WriteRawTag(56);
        output.WriteUInt32(SecondsLeft);
      }
      if (HasBoosterType) {
        output.WriteRawTag(64);
        output.WriteUInt32(BoosterType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasExpirationDate) {
        output.WriteRawTag(21);
        output.WriteFixed32(ExpirationDate);
      }
      if (HasBonus) {
        output.WriteRawTag(29);
        output.WriteFloat(Bonus);
      }
      if (HasBonusCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(BonusCount);
      }
      if (HasItemId) {
        output.WriteRawTag(40);
        output.WriteUInt64(ItemId);
      }
      if (HasDefIndex) {
        output.WriteRawTag(48);
        output.WriteUInt32(DefIndex);
      }
      if (HasSecondsLeft) {
        output.WriteRawTag(56);
        output.WriteUInt32(SecondsLeft);
      }
      if (HasBoosterType) {
        output.WriteRawTag(64);
        output.WriteUInt32(BoosterType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasExpirationDate) {
        size += 1 + 4;
      }
      if (HasBonus) {
        size += 1 + 4;
      }
      if (HasBonusCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BonusCount);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
      }
      if (HasDefIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefIndex);
      }
      if (HasSecondsLeft) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsLeft);
      }
      if (HasBoosterType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoosterType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOEconItemDropRateBonus other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasExpirationDate) {
        ExpirationDate = other.ExpirationDate;
      }
      if (other.HasBonus) {
        Bonus = other.Bonus;
      }
      if (other.HasBonusCount) {
        BonusCount = other.BonusCount;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      if (other.HasDefIndex) {
        DefIndex = other.DefIndex;
      }
      if (other.HasSecondsLeft) {
        SecondsLeft = other.SecondsLeft;
      }
      if (other.HasBoosterType) {
        BoosterType = other.BoosterType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 21: {
            ExpirationDate = input.ReadFixed32();
            break;
          }
          case 29: {
            Bonus = input.ReadFloat();
            break;
          }
          case 32: {
            BonusCount = input.ReadUInt32();
            break;
          }
          case 40: {
            ItemId = input.ReadUInt64();
            break;
          }
          case 48: {
            DefIndex = input.ReadUInt32();
            break;
          }
          case 56: {
            SecondsLeft = input.ReadUInt32();
            break;
          }
          case 64: {
            BoosterType = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 21: {
            ExpirationDate = input.ReadFixed32();
            break;
          }
          case 29: {
            Bonus = input.ReadFloat();
            break;
          }
          case 32: {
            BonusCount = input.ReadUInt32();
            break;
          }
          case 40: {
            ItemId = input.ReadUInt64();
            break;
          }
          case 48: {
            DefIndex = input.ReadUInt32();
            break;
          }
          case 56: {
            SecondsLeft = input.ReadUInt32();
            break;
          }
          case 64: {
            BoosterType = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOEconItemTournamentPassport : pb::IMessage<CSOEconItemTournamentPassport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOEconItemTournamentPassport> _parser = new pb::MessageParser<CSOEconItemTournamentPassport>(() => new CSOEconItemTournamentPassport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOEconItemTournamentPassport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemTournamentPassport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemTournamentPassport(CSOEconItemTournamentPassport other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      leagueId_ = other.leagueId_;
      itemId_ = other.itemId_;
      originalPurchaserId_ = other.originalPurchaserId_;
      passportsBought_ = other.passportsBought_;
      version_ = other.version_;
      defIndex_ = other.defIndex_;
      rewardFlags_ = other.rewardFlags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOEconItemTournamentPassport Clone() {
      return new CSOEconItemTournamentPassport(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "league_id" field.</summary>
    public const int LeagueIdFieldNumber = 2;
    private readonly static uint LeagueIdDefaultValue = 0;

    private uint leagueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeagueId {
      get { if ((_hasBits0 & 2) != 0) { return leagueId_; } else { return LeagueIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leagueId_ = value;
      }
    }
    /// <summary>Gets whether the "league_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "league_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 3;
    private readonly static ulong ItemIdDefaultValue = 0UL;

    private ulong itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemId {
      get { if ((_hasBits0 & 4) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        itemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "original_purchaser_id" field.</summary>
    public const int OriginalPurchaserIdFieldNumber = 4;
    private readonly static uint OriginalPurchaserIdDefaultValue = 0;

    private uint originalPurchaserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginalPurchaserId {
      get { if ((_hasBits0 & 8) != 0) { return originalPurchaserId_; } else { return OriginalPurchaserIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        originalPurchaserId_ = value;
      }
    }
    /// <summary>Gets whether the "original_purchaser_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalPurchaserId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "original_purchaser_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalPurchaserId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "passports_bought" field.</summary>
    public const int PassportsBoughtFieldNumber = 5;
    private readonly static uint PassportsBoughtDefaultValue = 0;

    private uint passportsBought_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassportsBought {
      get { if ((_hasBits0 & 16) != 0) { return passportsBought_; } else { return PassportsBoughtDefaultValue; } }
      set {
        _hasBits0 |= 16;
        passportsBought_ = value;
      }
    }
    /// <summary>Gets whether the "passports_bought" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassportsBought {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "passports_bought" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPassportsBought() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 6;
    private readonly static uint VersionDefaultValue = 0;

    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { if ((_hasBits0 & 32) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 32;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersion {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersion() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "def_index" field.</summary>
    public const int DefIndexFieldNumber = 7;
    private readonly static uint DefIndexDefaultValue = 0;

    private uint defIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefIndex {
      get { if ((_hasBits0 & 64) != 0) { return defIndex_; } else { return DefIndexDefaultValue; } }
      set {
        _hasBits0 |= 64;
        defIndex_ = value;
      }
    }
    /// <summary>Gets whether the "def_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefIndex {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "def_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefIndex() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "reward_flags" field.</summary>
    public const int RewardFlagsFieldNumber = 8;
    private readonly static uint RewardFlagsDefaultValue = 0;

    private uint rewardFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardFlags {
      get { if ((_hasBits0 & 128) != 0) { return rewardFlags_; } else { return RewardFlagsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        rewardFlags_ = value;
      }
    }
    /// <summary>Gets whether the "reward_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRewardFlags {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "reward_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRewardFlags() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOEconItemTournamentPassport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOEconItemTournamentPassport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (LeagueId != other.LeagueId) return false;
      if (ItemId != other.ItemId) return false;
      if (OriginalPurchaserId != other.OriginalPurchaserId) return false;
      if (PassportsBought != other.PassportsBought) return false;
      if (Version != other.Version) return false;
      if (DefIndex != other.DefIndex) return false;
      if (RewardFlags != other.RewardFlags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasLeagueId) hash ^= LeagueId.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (HasOriginalPurchaserId) hash ^= OriginalPurchaserId.GetHashCode();
      if (HasPassportsBought) hash ^= PassportsBought.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      if (HasDefIndex) hash ^= DefIndex.GetHashCode();
      if (HasRewardFlags) hash ^= RewardFlags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasLeagueId) {
        output.WriteRawTag(16);
        output.WriteUInt32(LeagueId);
      }
      if (HasItemId) {
        output.WriteRawTag(24);
        output.WriteUInt64(ItemId);
      }
      if (HasOriginalPurchaserId) {
        output.WriteRawTag(32);
        output.WriteUInt32(OriginalPurchaserId);
      }
      if (HasPassportsBought) {
        output.WriteRawTag(40);
        output.WriteUInt32(PassportsBought);
      }
      if (HasVersion) {
        output.WriteRawTag(48);
        output.WriteUInt32(Version);
      }
      if (HasDefIndex) {
        output.WriteRawTag(56);
        output.WriteUInt32(DefIndex);
      }
      if (HasRewardFlags) {
        output.WriteRawTag(64);
        output.WriteUInt32(RewardFlags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasLeagueId) {
        output.WriteRawTag(16);
        output.WriteUInt32(LeagueId);
      }
      if (HasItemId) {
        output.WriteRawTag(24);
        output.WriteUInt64(ItemId);
      }
      if (HasOriginalPurchaserId) {
        output.WriteRawTag(32);
        output.WriteUInt32(OriginalPurchaserId);
      }
      if (HasPassportsBought) {
        output.WriteRawTag(40);
        output.WriteUInt32(PassportsBought);
      }
      if (HasVersion) {
        output.WriteRawTag(48);
        output.WriteUInt32(Version);
      }
      if (HasDefIndex) {
        output.WriteRawTag(56);
        output.WriteUInt32(DefIndex);
      }
      if (HasRewardFlags) {
        output.WriteRawTag(64);
        output.WriteUInt32(RewardFlags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasLeagueId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeagueId);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
      }
      if (HasOriginalPurchaserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginalPurchaserId);
      }
      if (HasPassportsBought) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassportsBought);
      }
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (HasDefIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefIndex);
      }
      if (HasRewardFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardFlags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOEconItemTournamentPassport other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasLeagueId) {
        LeagueId = other.LeagueId;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      if (other.HasOriginalPurchaserId) {
        OriginalPurchaserId = other.OriginalPurchaserId;
      }
      if (other.HasPassportsBought) {
        PassportsBought = other.PassportsBought;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.HasDefIndex) {
        DefIndex = other.DefIndex;
      }
      if (other.HasRewardFlags) {
        RewardFlags = other.RewardFlags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            LeagueId = input.ReadUInt32();
            break;
          }
          case 24: {
            ItemId = input.ReadUInt64();
            break;
          }
          case 32: {
            OriginalPurchaserId = input.ReadUInt32();
            break;
          }
          case 40: {
            PassportsBought = input.ReadUInt32();
            break;
          }
          case 48: {
            Version = input.ReadUInt32();
            break;
          }
          case 56: {
            DefIndex = input.ReadUInt32();
            break;
          }
          case 64: {
            RewardFlags = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            LeagueId = input.ReadUInt32();
            break;
          }
          case 24: {
            ItemId = input.ReadUInt64();
            break;
          }
          case 32: {
            OriginalPurchaserId = input.ReadUInt32();
            break;
          }
          case 40: {
            PassportsBought = input.ReadUInt32();
            break;
          }
          case 48: {
            Version = input.ReadUInt32();
            break;
          }
          case 56: {
            DefIndex = input.ReadUInt32();
            break;
          }
          case 64: {
            RewardFlags = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgStickerbookSticker : pb::IMessage<CMsgStickerbookSticker>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgStickerbookSticker> _parser = new pb::MessageParser<CMsgStickerbookSticker>(() => new CMsgStickerbookSticker());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgStickerbookSticker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbookSticker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbookSticker(CMsgStickerbookSticker other) : this() {
      _hasBits0 = other._hasBits0;
      itemDefId_ = other.itemDefId_;
      stickerNum_ = other.stickerNum_;
      quality_ = other.quality_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      positionZ_ = other.positionZ_;
      rotation_ = other.rotation_;
      scale_ = other.scale_;
      sourceItemId_ = other.sourceItemId_;
      depthBias_ = other.depthBias_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbookSticker Clone() {
      return new CMsgStickerbookSticker(this);
    }

    /// <summary>Field number for the "item_def_id" field.</summary>
    public const int ItemDefIdFieldNumber = 1;
    private readonly static uint ItemDefIdDefaultValue = 0;

    private uint itemDefId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemDefId {
      get { if ((_hasBits0 & 1) != 0) { return itemDefId_; } else { return ItemDefIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemDefId_ = value;
      }
    }
    /// <summary>Gets whether the "item_def_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemDefId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_def_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemDefId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sticker_num" field.</summary>
    public const int StickerNumFieldNumber = 2;
    private readonly static uint StickerNumDefaultValue = 0;

    private uint stickerNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StickerNum {
      get { if ((_hasBits0 & 2) != 0) { return stickerNum_; } else { return StickerNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        stickerNum_ = value;
      }
    }
    /// <summary>Gets whether the "sticker_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStickerNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sticker_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStickerNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 3;
    private readonly static uint QualityDefaultValue = 0;

    private uint quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { if ((_hasBits0 & 4) != 0) { return quality_; } else { return QualityDefaultValue; } }
      set {
        _hasBits0 |= 4;
        quality_ = value;
      }
    }
    /// <summary>Gets whether the "quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuality {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuality() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "position_x" field.</summary>
    public const int PositionXFieldNumber = 4;
    private readonly static float PositionXDefaultValue = 0F;

    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { if ((_hasBits0 & 8) != 0) { return positionX_; } else { return PositionXDefaultValue; } }
      set {
        _hasBits0 |= 8;
        positionX_ = value;
      }
    }
    /// <summary>Gets whether the "position_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPositionX {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "position_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPositionX() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "position_y" field.</summary>
    public const int PositionYFieldNumber = 5;
    private readonly static float PositionYDefaultValue = 0F;

    private float positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionY {
      get { if ((_hasBits0 & 16) != 0) { return positionY_; } else { return PositionYDefaultValue; } }
      set {
        _hasBits0 |= 16;
        positionY_ = value;
      }
    }
    /// <summary>Gets whether the "position_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPositionY {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "position_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPositionY() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "position_z" field.</summary>
    public const int PositionZFieldNumber = 8;
    private readonly static float PositionZDefaultValue = 0F;

    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { if ((_hasBits0 & 128) != 0) { return positionZ_; } else { return PositionZDefaultValue; } }
      set {
        _hasBits0 |= 128;
        positionZ_ = value;
      }
    }
    /// <summary>Gets whether the "position_z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPositionZ {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "position_z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPositionZ() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 6;
    private readonly static float RotationDefaultValue = 0F;

    private float rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rotation {
      get { if ((_hasBits0 & 32) != 0) { return rotation_; } else { return RotationDefaultValue; } }
      set {
        _hasBits0 |= 32;
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the "rotation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRotation {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "rotation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRotation() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 7;
    private readonly static float ScaleDefaultValue = 0F;

    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { if ((_hasBits0 & 64) != 0) { return scale_; } else { return ScaleDefaultValue; } }
      set {
        _hasBits0 |= 64;
        scale_ = value;
      }
    }
    /// <summary>Gets whether the "scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScale {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScale() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "source_item_id" field.</summary>
    public const int SourceItemIdFieldNumber = 9;
    private readonly static ulong SourceItemIdDefaultValue = 0UL;

    private ulong sourceItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SourceItemId {
      get { if ((_hasBits0 & 256) != 0) { return sourceItemId_; } else { return SourceItemIdDefaultValue; } }
      set {
        _hasBits0 |= 256;
        sourceItemId_ = value;
      }
    }
    /// <summary>Gets whether the "source_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceItemId {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "source_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceItemId() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "depth_bias" field.</summary>
    public const int DepthBiasFieldNumber = 10;
    private readonly static uint DepthBiasDefaultValue = 0;

    private uint depthBias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DepthBias {
      get { if ((_hasBits0 & 512) != 0) { return depthBias_; } else { return DepthBiasDefaultValue; } }
      set {
        _hasBits0 |= 512;
        depthBias_ = value;
      }
    }
    /// <summary>Gets whether the "depth_bias" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDepthBias {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "depth_bias" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDepthBias() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgStickerbookSticker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgStickerbookSticker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemDefId != other.ItemDefId) return false;
      if (StickerNum != other.StickerNum) return false;
      if (Quality != other.Quality) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (SourceItemId != other.SourceItemId) return false;
      if (DepthBias != other.DepthBias) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemDefId) hash ^= ItemDefId.GetHashCode();
      if (HasStickerNum) hash ^= StickerNum.GetHashCode();
      if (HasQuality) hash ^= Quality.GetHashCode();
      if (HasPositionX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (HasPositionY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
      if (HasPositionZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (HasRotation) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
      if (HasScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (HasSourceItemId) hash ^= SourceItemId.GetHashCode();
      if (HasDepthBias) hash ^= DepthBias.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemDefId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemDefId);
      }
      if (HasStickerNum) {
        output.WriteRawTag(16);
        output.WriteUInt32(StickerNum);
      }
      if (HasQuality) {
        output.WriteRawTag(24);
        output.WriteUInt32(Quality);
      }
      if (HasPositionX) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionX);
      }
      if (HasPositionY) {
        output.WriteRawTag(45);
        output.WriteFloat(PositionY);
      }
      if (HasRotation) {
        output.WriteRawTag(53);
        output.WriteFloat(Rotation);
      }
      if (HasScale) {
        output.WriteRawTag(61);
        output.WriteFloat(Scale);
      }
      if (HasPositionZ) {
        output.WriteRawTag(69);
        output.WriteFloat(PositionZ);
      }
      if (HasSourceItemId) {
        output.WriteRawTag(72);
        output.WriteUInt64(SourceItemId);
      }
      if (HasDepthBias) {
        output.WriteRawTag(80);
        output.WriteUInt32(DepthBias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemDefId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemDefId);
      }
      if (HasStickerNum) {
        output.WriteRawTag(16);
        output.WriteUInt32(StickerNum);
      }
      if (HasQuality) {
        output.WriteRawTag(24);
        output.WriteUInt32(Quality);
      }
      if (HasPositionX) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionX);
      }
      if (HasPositionY) {
        output.WriteRawTag(45);
        output.WriteFloat(PositionY);
      }
      if (HasRotation) {
        output.WriteRawTag(53);
        output.WriteFloat(Rotation);
      }
      if (HasScale) {
        output.WriteRawTag(61);
        output.WriteFloat(Scale);
      }
      if (HasPositionZ) {
        output.WriteRawTag(69);
        output.WriteFloat(PositionZ);
      }
      if (HasSourceItemId) {
        output.WriteRawTag(72);
        output.WriteUInt64(SourceItemId);
      }
      if (HasDepthBias) {
        output.WriteRawTag(80);
        output.WriteUInt32(DepthBias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemDefId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDefId);
      }
      if (HasStickerNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StickerNum);
      }
      if (HasQuality) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (HasPositionX) {
        size += 1 + 4;
      }
      if (HasPositionY) {
        size += 1 + 4;
      }
      if (HasPositionZ) {
        size += 1 + 4;
      }
      if (HasRotation) {
        size += 1 + 4;
      }
      if (HasScale) {
        size += 1 + 4;
      }
      if (HasSourceItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SourceItemId);
      }
      if (HasDepthBias) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DepthBias);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgStickerbookSticker other) {
      if (other == null) {
        return;
      }
      if (other.HasItemDefId) {
        ItemDefId = other.ItemDefId;
      }
      if (other.HasStickerNum) {
        StickerNum = other.StickerNum;
      }
      if (other.HasQuality) {
        Quality = other.Quality;
      }
      if (other.HasPositionX) {
        PositionX = other.PositionX;
      }
      if (other.HasPositionY) {
        PositionY = other.PositionY;
      }
      if (other.HasPositionZ) {
        PositionZ = other.PositionZ;
      }
      if (other.HasRotation) {
        Rotation = other.Rotation;
      }
      if (other.HasScale) {
        Scale = other.Scale;
      }
      if (other.HasSourceItemId) {
        SourceItemId = other.SourceItemId;
      }
      if (other.HasDepthBias) {
        DepthBias = other.DepthBias;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemDefId = input.ReadUInt32();
            break;
          }
          case 16: {
            StickerNum = input.ReadUInt32();
            break;
          }
          case 24: {
            Quality = input.ReadUInt32();
            break;
          }
          case 37: {
            PositionX = input.ReadFloat();
            break;
          }
          case 45: {
            PositionY = input.ReadFloat();
            break;
          }
          case 53: {
            Rotation = input.ReadFloat();
            break;
          }
          case 61: {
            Scale = input.ReadFloat();
            break;
          }
          case 69: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 72: {
            SourceItemId = input.ReadUInt64();
            break;
          }
          case 80: {
            DepthBias = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemDefId = input.ReadUInt32();
            break;
          }
          case 16: {
            StickerNum = input.ReadUInt32();
            break;
          }
          case 24: {
            Quality = input.ReadUInt32();
            break;
          }
          case 37: {
            PositionX = input.ReadFloat();
            break;
          }
          case 45: {
            PositionY = input.ReadFloat();
            break;
          }
          case 53: {
            Rotation = input.ReadFloat();
            break;
          }
          case 61: {
            Scale = input.ReadFloat();
            break;
          }
          case 69: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 72: {
            SourceItemId = input.ReadUInt64();
            break;
          }
          case 80: {
            DepthBias = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgStickerbookPage : pb::IMessage<CMsgStickerbookPage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgStickerbookPage> _parser = new pb::MessageParser<CMsgStickerbookPage>(() => new CMsgStickerbookPage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgStickerbookPage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbookPage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbookPage(CMsgStickerbookPage other) : this() {
      _hasBits0 = other._hasBits0;
      pageNum_ = other.pageNum_;
      eventId_ = other.eventId_;
      teamId_ = other.teamId_;
      stickers_ = other.stickers_.Clone();
      pageType_ = other.pageType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbookPage Clone() {
      return new CMsgStickerbookPage(this);
    }

    /// <summary>Field number for the "page_num" field.</summary>
    public const int PageNumFieldNumber = 1;
    private readonly static uint PageNumDefaultValue = 0;

    private uint pageNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageNum {
      get { if ((_hasBits0 & 1) != 0) { return pageNum_; } else { return PageNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pageNum_ = value;
      }
    }
    /// <summary>Gets whether the "page_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPageNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "page_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPageNum() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 2) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 3;
    private readonly static uint TeamIdDefaultValue = 0;

    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { if ((_hasBits0 & 4) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "stickers" field.</summary>
    public const int StickersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgStickerbookSticker> _repeated_stickers_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CMsgStickerbookSticker.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgStickerbookSticker> stickers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgStickerbookSticker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgStickerbookSticker> Stickers {
      get { return stickers_; }
    }

    /// <summary>Field number for the "page_type" field.</summary>
    public const int PageTypeFieldNumber = 5;
    private readonly static global::Steam.Protos.Dota2.EStickerbookPageType PageTypeDefaultValue = global::Steam.Protos.Dota2.EStickerbookPageType.StickerPageGeneric;

    private global::Steam.Protos.Dota2.EStickerbookPageType pageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EStickerbookPageType PageType {
      get { if ((_hasBits0 & 8) != 0) { return pageType_; } else { return PageTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        pageType_ = value;
      }
    }
    /// <summary>Gets whether the "page_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPageType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "page_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPageType() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgStickerbookPage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgStickerbookPage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageNum != other.PageNum) return false;
      if (EventId != other.EventId) return false;
      if (TeamId != other.TeamId) return false;
      if(!stickers_.Equals(other.stickers_)) return false;
      if (PageType != other.PageType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPageNum) hash ^= PageNum.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasTeamId) hash ^= TeamId.GetHashCode();
      hash ^= stickers_.GetHashCode();
      if (HasPageType) hash ^= PageType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPageNum) {
        output.WriteRawTag(8);
        output.WriteUInt32(PageNum);
      }
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasTeamId) {
        output.WriteRawTag(24);
        output.WriteUInt32(TeamId);
      }
      stickers_.WriteTo(output, _repeated_stickers_codec);
      if (HasPageType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPageNum) {
        output.WriteRawTag(8);
        output.WriteUInt32(PageNum);
      }
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasTeamId) {
        output.WriteRawTag(24);
        output.WriteUInt32(TeamId);
      }
      stickers_.WriteTo(ref output, _repeated_stickers_codec);
      if (HasPageType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPageNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageNum);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasTeamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      size += stickers_.CalculateSize(_repeated_stickers_codec);
      if (HasPageType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PageType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgStickerbookPage other) {
      if (other == null) {
        return;
      }
      if (other.HasPageNum) {
        PageNum = other.PageNum;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      stickers_.Add(other.stickers_);
      if (other.HasPageType) {
        PageType = other.PageType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PageNum = input.ReadUInt32();
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 34: {
            stickers_.AddEntriesFrom(input, _repeated_stickers_codec);
            break;
          }
          case 40: {
            PageType = (global::Steam.Protos.Dota2.EStickerbookPageType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PageNum = input.ReadUInt32();
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 34: {
            stickers_.AddEntriesFrom(ref input, _repeated_stickers_codec);
            break;
          }
          case 40: {
            PageType = (global::Steam.Protos.Dota2.EStickerbookPageType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgStickerbookTeamPageOrderSequence : pb::IMessage<CMsgStickerbookTeamPageOrderSequence>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgStickerbookTeamPageOrderSequence> _parser = new pb::MessageParser<CMsgStickerbookTeamPageOrderSequence>(() => new CMsgStickerbookTeamPageOrderSequence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgStickerbookTeamPageOrderSequence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbookTeamPageOrderSequence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbookTeamPageOrderSequence(CMsgStickerbookTeamPageOrderSequence other) : this() {
      pageNumbers_ = other.pageNumbers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbookTeamPageOrderSequence Clone() {
      return new CMsgStickerbookTeamPageOrderSequence(this);
    }

    /// <summary>Field number for the "page_numbers" field.</summary>
    public const int PageNumbersFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_pageNumbers_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> pageNumbers_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PageNumbers {
      get { return pageNumbers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgStickerbookTeamPageOrderSequence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgStickerbookTeamPageOrderSequence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pageNumbers_.Equals(other.pageNumbers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pageNumbers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pageNumbers_.WriteTo(output, _repeated_pageNumbers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pageNumbers_.WriteTo(ref output, _repeated_pageNumbers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pageNumbers_.CalculateSize(_repeated_pageNumbers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgStickerbookTeamPageOrderSequence other) {
      if (other == null) {
        return;
      }
      pageNumbers_.Add(other.pageNumbers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            pageNumbers_.AddEntriesFrom(input, _repeated_pageNumbers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            pageNumbers_.AddEntriesFrom(ref input, _repeated_pageNumbers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgStickerbook : pb::IMessage<CMsgStickerbook>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgStickerbook> _parser = new pb::MessageParser<CMsgStickerbook>(() => new CMsgStickerbook());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgStickerbook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbook(CMsgStickerbook other) : this() {
      _hasBits0 = other._hasBits0;
      pages_ = other.pages_.Clone();
      teamPageOrderSequence_ = other.teamPageOrderSequence_ != null ? other.teamPageOrderSequence_.Clone() : null;
      favoritePageNum_ = other.favoritePageNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerbook Clone() {
      return new CMsgStickerbook(this);
    }

    /// <summary>Field number for the "pages" field.</summary>
    public const int PagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgStickerbookPage> _repeated_pages_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgStickerbookPage.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgStickerbookPage> pages_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgStickerbookPage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgStickerbookPage> Pages {
      get { return pages_; }
    }

    /// <summary>Field number for the "team_page_order_sequence" field.</summary>
    public const int TeamPageOrderSequenceFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgStickerbookTeamPageOrderSequence teamPageOrderSequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgStickerbookTeamPageOrderSequence TeamPageOrderSequence {
      get { return teamPageOrderSequence_; }
      set {
        teamPageOrderSequence_ = value;
      }
    }

    /// <summary>Field number for the "favorite_page_num" field.</summary>
    public const int FavoritePageNumFieldNumber = 3;
    private readonly static uint FavoritePageNumDefaultValue = 0;

    private uint favoritePageNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FavoritePageNum {
      get { if ((_hasBits0 & 1) != 0) { return favoritePageNum_; } else { return FavoritePageNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        favoritePageNum_ = value;
      }
    }
    /// <summary>Gets whether the "favorite_page_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFavoritePageNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "favorite_page_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFavoritePageNum() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgStickerbook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgStickerbook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pages_.Equals(other.pages_)) return false;
      if (!object.Equals(TeamPageOrderSequence, other.TeamPageOrderSequence)) return false;
      if (FavoritePageNum != other.FavoritePageNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pages_.GetHashCode();
      if (teamPageOrderSequence_ != null) hash ^= TeamPageOrderSequence.GetHashCode();
      if (HasFavoritePageNum) hash ^= FavoritePageNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pages_.WriteTo(output, _repeated_pages_codec);
      if (teamPageOrderSequence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamPageOrderSequence);
      }
      if (HasFavoritePageNum) {
        output.WriteRawTag(24);
        output.WriteUInt32(FavoritePageNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pages_.WriteTo(ref output, _repeated_pages_codec);
      if (teamPageOrderSequence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamPageOrderSequence);
      }
      if (HasFavoritePageNum) {
        output.WriteRawTag(24);
        output.WriteUInt32(FavoritePageNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pages_.CalculateSize(_repeated_pages_codec);
      if (teamPageOrderSequence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamPageOrderSequence);
      }
      if (HasFavoritePageNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FavoritePageNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgStickerbook other) {
      if (other == null) {
        return;
      }
      pages_.Add(other.pages_);
      if (other.teamPageOrderSequence_ != null) {
        if (teamPageOrderSequence_ == null) {
          TeamPageOrderSequence = new global::Steam.Protos.Dota2.CMsgStickerbookTeamPageOrderSequence();
        }
        TeamPageOrderSequence.MergeFrom(other.TeamPageOrderSequence);
      }
      if (other.HasFavoritePageNum) {
        FavoritePageNum = other.FavoritePageNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pages_.AddEntriesFrom(input, _repeated_pages_codec);
            break;
          }
          case 18: {
            if (teamPageOrderSequence_ == null) {
              TeamPageOrderSequence = new global::Steam.Protos.Dota2.CMsgStickerbookTeamPageOrderSequence();
            }
            input.ReadMessage(TeamPageOrderSequence);
            break;
          }
          case 24: {
            FavoritePageNum = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pages_.AddEntriesFrom(ref input, _repeated_pages_codec);
            break;
          }
          case 18: {
            if (teamPageOrderSequence_ == null) {
              TeamPageOrderSequence = new global::Steam.Protos.Dota2.CMsgStickerbookTeamPageOrderSequence();
            }
            input.ReadMessage(TeamPageOrderSequence);
            break;
          }
          case 24: {
            FavoritePageNum = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgStickerHero : pb::IMessage<CMsgStickerHero>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgStickerHero> _parser = new pb::MessageParser<CMsgStickerHero>(() => new CMsgStickerHero());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgStickerHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerHero(CMsgStickerHero other) : this() {
      _hasBits0 = other._hasBits0;
      heroId_ = other.heroId_;
      itemDefId_ = other.itemDefId_;
      quality_ = other.quality_;
      sourceItemId_ = other.sourceItemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerHero Clone() {
      return new CMsgStickerHero(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_def_id" field.</summary>
    public const int ItemDefIdFieldNumber = 2;
    private readonly static uint ItemDefIdDefaultValue = 0;

    private uint itemDefId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemDefId {
      get { if ((_hasBits0 & 2) != 0) { return itemDefId_; } else { return ItemDefIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        itemDefId_ = value;
      }
    }
    /// <summary>Gets whether the "item_def_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemDefId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "item_def_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemDefId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 3;
    private readonly static uint QualityDefaultValue = 0;

    private uint quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { if ((_hasBits0 & 4) != 0) { return quality_; } else { return QualityDefaultValue; } }
      set {
        _hasBits0 |= 4;
        quality_ = value;
      }
    }
    /// <summary>Gets whether the "quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuality {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuality() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "source_item_id" field.</summary>
    public const int SourceItemIdFieldNumber = 4;
    private readonly static ulong SourceItemIdDefaultValue = 0UL;

    private ulong sourceItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SourceItemId {
      get { if ((_hasBits0 & 8) != 0) { return sourceItemId_; } else { return SourceItemIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        sourceItemId_ = value;
      }
    }
    /// <summary>Gets whether the "source_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceItemId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "source_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceItemId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgStickerHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgStickerHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (ItemDefId != other.ItemDefId) return false;
      if (Quality != other.Quality) return false;
      if (SourceItemId != other.SourceItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasItemDefId) hash ^= ItemDefId.GetHashCode();
      if (HasQuality) hash ^= Quality.GetHashCode();
      if (HasSourceItemId) hash ^= SourceItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeroId) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (HasItemDefId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemDefId);
      }
      if (HasQuality) {
        output.WriteRawTag(24);
        output.WriteUInt32(Quality);
      }
      if (HasSourceItemId) {
        output.WriteRawTag(32);
        output.WriteUInt64(SourceItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeroId) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (HasItemDefId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemDefId);
      }
      if (HasQuality) {
        output.WriteRawTag(24);
        output.WriteUInt32(Quality);
      }
      if (HasSourceItemId) {
        output.WriteRawTag(32);
        output.WriteUInt64(SourceItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasItemDefId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDefId);
      }
      if (HasQuality) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (HasSourceItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SourceItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgStickerHero other) {
      if (other == null) {
        return;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasItemDefId) {
        ItemDefId = other.ItemDefId;
      }
      if (other.HasQuality) {
        Quality = other.Quality;
      }
      if (other.HasSourceItemId) {
        SourceItemId = other.SourceItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemDefId = input.ReadUInt32();
            break;
          }
          case 24: {
            Quality = input.ReadUInt32();
            break;
          }
          case 32: {
            SourceItemId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemDefId = input.ReadUInt32();
            break;
          }
          case 24: {
            Quality = input.ReadUInt32();
            break;
          }
          case 32: {
            SourceItemId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgStickerHeroes : pb::IMessage<CMsgStickerHeroes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgStickerHeroes> _parser = new pb::MessageParser<CMsgStickerHeroes>(() => new CMsgStickerHeroes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgStickerHeroes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerHeroes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerHeroes(CMsgStickerHeroes other) : this() {
      heroes_ = other.heroes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgStickerHeroes Clone() {
      return new CMsgStickerHeroes(this);
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgStickerHero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgStickerHero.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgStickerHero> heroes_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgStickerHero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgStickerHero> Heroes {
      get { return heroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgStickerHeroes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgStickerHeroes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroes_.Equals(other.heroes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      heroes_.WriteTo(output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      heroes_.WriteTo(ref output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgStickerHeroes other) {
      if (other == null) {
        return;
      }
      heroes_.Add(other.heroes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            heroes_.AddEntriesFrom(ref input, _repeated_heroes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgHeroRoleStats : pb::IMessage<CMsgHeroRoleStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgHeroRoleStats> _parser = new pb::MessageParser<CMsgHeroRoleStats>(() => new CMsgHeroRoleStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgHeroRoleStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleStats(CMsgHeroRoleStats other) : this() {
      _hasBits0 = other._hasBits0;
      laneSelectionFlags_ = other.laneSelectionFlags_;
      matchCount_ = other.matchCount_;
      winCount_ = other.winCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleStats Clone() {
      return new CMsgHeroRoleStats(this);
    }

    /// <summary>Field number for the "lane_selection_flags" field.</summary>
    public const int LaneSelectionFlagsFieldNumber = 1;
    private readonly static uint LaneSelectionFlagsDefaultValue = 0;

    private uint laneSelectionFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LaneSelectionFlags {
      get { if ((_hasBits0 & 1) != 0) { return laneSelectionFlags_; } else { return LaneSelectionFlagsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        laneSelectionFlags_ = value;
      }
    }
    /// <summary>Gets whether the "lane_selection_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneSelectionFlags {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lane_selection_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneSelectionFlags() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "match_count" field.</summary>
    public const int MatchCountFieldNumber = 2;
    private readonly static uint MatchCountDefaultValue = 0;

    private uint matchCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchCount {
      get { if ((_hasBits0 & 2) != 0) { return matchCount_; } else { return MatchCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchCount_ = value;
      }
    }
    /// <summary>Gets whether the "match_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "win_count" field.</summary>
    public const int WinCountFieldNumber = 3;
    private readonly static uint WinCountDefaultValue = 0;

    private uint winCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinCount {
      get { if ((_hasBits0 & 4) != 0) { return winCount_; } else { return WinCountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        winCount_ = value;
      }
    }
    /// <summary>Gets whether the "win_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWinCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "win_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWinCount() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgHeroRoleStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgHeroRoleStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneSelectionFlags != other.LaneSelectionFlags) return false;
      if (MatchCount != other.MatchCount) return false;
      if (WinCount != other.WinCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLaneSelectionFlags) hash ^= LaneSelectionFlags.GetHashCode();
      if (HasMatchCount) hash ^= MatchCount.GetHashCode();
      if (HasWinCount) hash ^= WinCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLaneSelectionFlags) {
        output.WriteRawTag(8);
        output.WriteUInt32(LaneSelectionFlags);
      }
      if (HasMatchCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(MatchCount);
      }
      if (HasWinCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(WinCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLaneSelectionFlags) {
        output.WriteRawTag(8);
        output.WriteUInt32(LaneSelectionFlags);
      }
      if (HasMatchCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(MatchCount);
      }
      if (HasWinCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(WinCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLaneSelectionFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LaneSelectionFlags);
      }
      if (HasMatchCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchCount);
      }
      if (HasWinCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgHeroRoleStats other) {
      if (other == null) {
        return;
      }
      if (other.HasLaneSelectionFlags) {
        LaneSelectionFlags = other.LaneSelectionFlags;
      }
      if (other.HasMatchCount) {
        MatchCount = other.MatchCount;
      }
      if (other.HasWinCount) {
        WinCount = other.WinCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LaneSelectionFlags = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchCount = input.ReadUInt32();
            break;
          }
          case 24: {
            WinCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LaneSelectionFlags = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchCount = input.ReadUInt32();
            break;
          }
          case 24: {
            WinCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgHeroRoleHeroStats : pb::IMessage<CMsgHeroRoleHeroStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgHeroRoleHeroStats> _parser = new pb::MessageParser<CMsgHeroRoleHeroStats>(() => new CMsgHeroRoleHeroStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgHeroRoleHeroStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleHeroStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleHeroStats(CMsgHeroRoleHeroStats other) : this() {
      _hasBits0 = other._hasBits0;
      heroId_ = other.heroId_;
      roleStats_ = other.roleStats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleHeroStats Clone() {
      return new CMsgHeroRoleHeroStats(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "role_stats" field.</summary>
    public const int RoleStatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgHeroRoleStats> _repeated_roleStats_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgHeroRoleStats.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroRoleStats> roleStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroRoleStats>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroRoleStats> RoleStats {
      get { return roleStats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgHeroRoleHeroStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgHeroRoleHeroStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if(!roleStats_.Equals(other.roleStats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      hash ^= roleStats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeroId) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      roleStats_.WriteTo(output, _repeated_roleStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeroId) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      roleStats_.WriteTo(ref output, _repeated_roleStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      size += roleStats_.CalculateSize(_repeated_roleStats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgHeroRoleHeroStats other) {
      if (other == null) {
        return;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      roleStats_.Add(other.roleStats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 18: {
            roleStats_.AddEntriesFrom(input, _repeated_roleStats_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 18: {
            roleStats_.AddEntriesFrom(ref input, _repeated_roleStats_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgHeroRoleRankStats : pb::IMessage<CMsgHeroRoleRankStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgHeroRoleRankStats> _parser = new pb::MessageParser<CMsgHeroRoleRankStats>(() => new CMsgHeroRoleRankStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgHeroRoleRankStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleRankStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleRankStats(CMsgHeroRoleRankStats other) : this() {
      _hasBits0 = other._hasBits0;
      rankTier_ = other.rankTier_;
      heroStats_ = other.heroStats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleRankStats Clone() {
      return new CMsgHeroRoleRankStats(this);
    }

    /// <summary>Field number for the "rank_tier" field.</summary>
    public const int RankTierFieldNumber = 1;
    private readonly static uint RankTierDefaultValue = 0;

    private uint rankTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankTier {
      get { if ((_hasBits0 & 1) != 0) { return rankTier_; } else { return RankTierDefaultValue; } }
      set {
        _hasBits0 |= 1;
        rankTier_ = value;
      }
    }
    /// <summary>Gets whether the "rank_tier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRankTier {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rank_tier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRankTier() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hero_stats" field.</summary>
    public const int HeroStatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgHeroRoleHeroStats> _repeated_heroStats_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgHeroRoleHeroStats.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroRoleHeroStats> heroStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroRoleHeroStats>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroRoleHeroStats> HeroStats {
      get { return heroStats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgHeroRoleRankStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgHeroRoleRankStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RankTier != other.RankTier) return false;
      if(!heroStats_.Equals(other.heroStats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRankTier) hash ^= RankTier.GetHashCode();
      hash ^= heroStats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRankTier) {
        output.WriteRawTag(8);
        output.WriteUInt32(RankTier);
      }
      heroStats_.WriteTo(output, _repeated_heroStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRankTier) {
        output.WriteRawTag(8);
        output.WriteUInt32(RankTier);
      }
      heroStats_.WriteTo(ref output, _repeated_heroStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRankTier) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankTier);
      }
      size += heroStats_.CalculateSize(_repeated_heroStats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgHeroRoleRankStats other) {
      if (other == null) {
        return;
      }
      if (other.HasRankTier) {
        RankTier = other.RankTier;
      }
      heroStats_.Add(other.heroStats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RankTier = input.ReadUInt32();
            break;
          }
          case 18: {
            heroStats_.AddEntriesFrom(input, _repeated_heroStats_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RankTier = input.ReadUInt32();
            break;
          }
          case 18: {
            heroStats_.AddEntriesFrom(ref input, _repeated_heroStats_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgHeroRoleAllRanksStats : pb::IMessage<CMsgHeroRoleAllRanksStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgHeroRoleAllRanksStats> _parser = new pb::MessageParser<CMsgHeroRoleAllRanksStats>(() => new CMsgHeroRoleAllRanksStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgHeroRoleAllRanksStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleAllRanksStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleAllRanksStats(CMsgHeroRoleAllRanksStats other) : this() {
      _hasBits0 = other._hasBits0;
      startTimestamp_ = other.startTimestamp_;
      endTimestamp_ = other.endTimestamp_;
      rankStats_ = other.rankStats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroRoleAllRanksStats Clone() {
      return new CMsgHeroRoleAllRanksStats(this);
    }

    /// <summary>Field number for the "start_timestamp" field.</summary>
    public const int StartTimestampFieldNumber = 1;
    private readonly static uint StartTimestampDefaultValue = 0;

    private uint startTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTimestamp {
      get { if ((_hasBits0 & 1) != 0) { return startTimestamp_; } else { return StartTimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        startTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "start_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "start_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "end_timestamp" field.</summary>
    public const int EndTimestampFieldNumber = 2;
    private readonly static uint EndTimestampDefaultValue = 0;

    private uint endTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTimestamp {
      get { if ((_hasBits0 & 2) != 0) { return endTimestamp_; } else { return EndTimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        endTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "end_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "end_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndTimestamp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "rank_stats" field.</summary>
    public const int RankStatsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgHeroRoleRankStats> _repeated_rankStats_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgHeroRoleRankStats.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroRoleRankStats> rankStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroRoleRankStats>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroRoleRankStats> RankStats {
      get { return rankStats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgHeroRoleAllRanksStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgHeroRoleAllRanksStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTimestamp != other.StartTimestamp) return false;
      if (EndTimestamp != other.EndTimestamp) return false;
      if(!rankStats_.Equals(other.rankStats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStartTimestamp) hash ^= StartTimestamp.GetHashCode();
      if (HasEndTimestamp) hash ^= EndTimestamp.GetHashCode();
      hash ^= rankStats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStartTimestamp) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartTimestamp);
      }
      if (HasEndTimestamp) {
        output.WriteRawTag(16);
        output.WriteUInt32(EndTimestamp);
      }
      rankStats_.WriteTo(output, _repeated_rankStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStartTimestamp) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartTimestamp);
      }
      if (HasEndTimestamp) {
        output.WriteRawTag(16);
        output.WriteUInt32(EndTimestamp);
      }
      rankStats_.WriteTo(ref output, _repeated_rankStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStartTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTimestamp);
      }
      if (HasEndTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTimestamp);
      }
      size += rankStats_.CalculateSize(_repeated_rankStats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgHeroRoleAllRanksStats other) {
      if (other == null) {
        return;
      }
      if (other.HasStartTimestamp) {
        StartTimestamp = other.StartTimestamp;
      }
      if (other.HasEndTimestamp) {
        EndTimestamp = other.EndTimestamp;
      }
      rankStats_.Add(other.rankStats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTimestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            EndTimestamp = input.ReadUInt32();
            break;
          }
          case 26: {
            rankStats_.AddEntriesFrom(input, _repeated_rankStats_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartTimestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            EndTimestamp = input.ReadUInt32();
            break;
          }
          case 26: {
            rankStats_.AddEntriesFrom(ref input, _repeated_rankStats_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgMapStatsSnapshot : pb::IMessage<CMsgMapStatsSnapshot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgMapStatsSnapshot> _parser = new pb::MessageParser<CMsgMapStatsSnapshot>(() => new CMsgMapStatsSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgMapStatsSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMapStatsSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMapStatsSnapshot(CMsgMapStatsSnapshot other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      lotusesGained_ = other.lotusesGained_;
      wisdomRunesGained_ = other.wisdomRunesGained_;
      roshanKillsDay_ = other.roshanKillsDay_;
      roshanKillsNight_ = other.roshanKillsNight_;
      portalsUsed_ = other.portalsUsed_;
      watchersTaken_ = other.watchersTaken_;
      tormentorKills_ = other.tormentorKills_;
      outpostsCaptured_ = other.outpostsCaptured_;
      shieldRunesGained_ = other.shieldRunesGained_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMapStatsSnapshot Clone() {
      return new CMsgMapStatsSnapshot(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static uint TimestampDefaultValue = 0;

    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lotuses_gained" field.</summary>
    public const int LotusesGainedFieldNumber = 2;
    private readonly static ulong LotusesGainedDefaultValue = 0UL;

    private ulong lotusesGained_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LotusesGained {
      get { if ((_hasBits0 & 2) != 0) { return lotusesGained_; } else { return LotusesGainedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lotusesGained_ = value;
      }
    }
    /// <summary>Gets whether the "lotuses_gained" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLotusesGained {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lotuses_gained" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLotusesGained() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "wisdom_runes_gained" field.</summary>
    public const int WisdomRunesGainedFieldNumber = 3;
    private readonly static ulong WisdomRunesGainedDefaultValue = 0UL;

    private ulong wisdomRunesGained_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WisdomRunesGained {
      get { if ((_hasBits0 & 4) != 0) { return wisdomRunesGained_; } else { return WisdomRunesGainedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        wisdomRunesGained_ = value;
      }
    }
    /// <summary>Gets whether the "wisdom_runes_gained" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWisdomRunesGained {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "wisdom_runes_gained" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWisdomRunesGained() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "roshan_kills_day" field.</summary>
    public const int RoshanKillsDayFieldNumber = 4;
    private readonly static ulong RoshanKillsDayDefaultValue = 0UL;

    private ulong roshanKillsDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoshanKillsDay {
      get { if ((_hasBits0 & 8) != 0) { return roshanKillsDay_; } else { return RoshanKillsDayDefaultValue; } }
      set {
        _hasBits0 |= 8;
        roshanKillsDay_ = value;
      }
    }
    /// <summary>Gets whether the "roshan_kills_day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoshanKillsDay {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "roshan_kills_day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoshanKillsDay() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "roshan_kills_night" field.</summary>
    public const int RoshanKillsNightFieldNumber = 5;
    private readonly static ulong RoshanKillsNightDefaultValue = 0UL;

    private ulong roshanKillsNight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoshanKillsNight {
      get { if ((_hasBits0 & 16) != 0) { return roshanKillsNight_; } else { return RoshanKillsNightDefaultValue; } }
      set {
        _hasBits0 |= 16;
        roshanKillsNight_ = value;
      }
    }
    /// <summary>Gets whether the "roshan_kills_night" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoshanKillsNight {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "roshan_kills_night" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoshanKillsNight() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "portals_used" field.</summary>
    public const int PortalsUsedFieldNumber = 6;
    private readonly static ulong PortalsUsedDefaultValue = 0UL;

    private ulong portalsUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PortalsUsed {
      get { if ((_hasBits0 & 32) != 0) { return portalsUsed_; } else { return PortalsUsedDefaultValue; } }
      set {
        _hasBits0 |= 32;
        portalsUsed_ = value;
      }
    }
    /// <summary>Gets whether the "portals_used" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPortalsUsed {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "portals_used" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPortalsUsed() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "watchers_taken" field.</summary>
    public const int WatchersTakenFieldNumber = 7;
    private readonly static ulong WatchersTakenDefaultValue = 0UL;

    private ulong watchersTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WatchersTaken {
      get { if ((_hasBits0 & 64) != 0) { return watchersTaken_; } else { return WatchersTakenDefaultValue; } }
      set {
        _hasBits0 |= 64;
        watchersTaken_ = value;
      }
    }
    /// <summary>Gets whether the "watchers_taken" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWatchersTaken {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "watchers_taken" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWatchersTaken() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "tormentor_kills" field.</summary>
    public const int TormentorKillsFieldNumber = 8;
    private readonly static ulong TormentorKillsDefaultValue = 0UL;

    private ulong tormentorKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TormentorKills {
      get { if ((_hasBits0 & 128) != 0) { return tormentorKills_; } else { return TormentorKillsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        tormentorKills_ = value;
      }
    }
    /// <summary>Gets whether the "tormentor_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTormentorKills {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "tormentor_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTormentorKills() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "outposts_captured" field.</summary>
    public const int OutpostsCapturedFieldNumber = 9;
    private readonly static ulong OutpostsCapturedDefaultValue = 0UL;

    private ulong outpostsCaptured_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutpostsCaptured {
      get { if ((_hasBits0 & 256) != 0) { return outpostsCaptured_; } else { return OutpostsCapturedDefaultValue; } }
      set {
        _hasBits0 |= 256;
        outpostsCaptured_ = value;
      }
    }
    /// <summary>Gets whether the "outposts_captured" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOutpostsCaptured {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "outposts_captured" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOutpostsCaptured() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "shield_runes_gained" field.</summary>
    public const int ShieldRunesGainedFieldNumber = 10;
    private readonly static ulong ShieldRunesGainedDefaultValue = 0UL;

    private ulong shieldRunesGained_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShieldRunesGained {
      get { if ((_hasBits0 & 512) != 0) { return shieldRunesGained_; } else { return ShieldRunesGainedDefaultValue; } }
      set {
        _hasBits0 |= 512;
        shieldRunesGained_ = value;
      }
    }
    /// <summary>Gets whether the "shield_runes_gained" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShieldRunesGained {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "shield_runes_gained" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShieldRunesGained() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgMapStatsSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgMapStatsSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (LotusesGained != other.LotusesGained) return false;
      if (WisdomRunesGained != other.WisdomRunesGained) return false;
      if (RoshanKillsDay != other.RoshanKillsDay) return false;
      if (RoshanKillsNight != other.RoshanKillsNight) return false;
      if (PortalsUsed != other.PortalsUsed) return false;
      if (WatchersTaken != other.WatchersTaken) return false;
      if (TormentorKills != other.TormentorKills) return false;
      if (OutpostsCaptured != other.OutpostsCaptured) return false;
      if (ShieldRunesGained != other.ShieldRunesGained) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasLotusesGained) hash ^= LotusesGained.GetHashCode();
      if (HasWisdomRunesGained) hash ^= WisdomRunesGained.GetHashCode();
      if (HasRoshanKillsDay) hash ^= RoshanKillsDay.GetHashCode();
      if (HasRoshanKillsNight) hash ^= RoshanKillsNight.GetHashCode();
      if (HasPortalsUsed) hash ^= PortalsUsed.GetHashCode();
      if (HasWatchersTaken) hash ^= WatchersTaken.GetHashCode();
      if (HasTormentorKills) hash ^= TormentorKills.GetHashCode();
      if (HasOutpostsCaptured) hash ^= OutpostsCaptured.GetHashCode();
      if (HasShieldRunesGained) hash ^= ShieldRunesGained.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (HasLotusesGained) {
        output.WriteRawTag(16);
        output.WriteUInt64(LotusesGained);
      }
      if (HasWisdomRunesGained) {
        output.WriteRawTag(24);
        output.WriteUInt64(WisdomRunesGained);
      }
      if (HasRoshanKillsDay) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoshanKillsDay);
      }
      if (HasRoshanKillsNight) {
        output.WriteRawTag(40);
        output.WriteUInt64(RoshanKillsNight);
      }
      if (HasPortalsUsed) {
        output.WriteRawTag(48);
        output.WriteUInt64(PortalsUsed);
      }
      if (HasWatchersTaken) {
        output.WriteRawTag(56);
        output.WriteUInt64(WatchersTaken);
      }
      if (HasTormentorKills) {
        output.WriteRawTag(64);
        output.WriteUInt64(TormentorKills);
      }
      if (HasOutpostsCaptured) {
        output.WriteRawTag(72);
        output.WriteUInt64(OutpostsCaptured);
      }
      if (HasShieldRunesGained) {
        output.WriteRawTag(80);
        output.WriteUInt64(ShieldRunesGained);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (HasLotusesGained) {
        output.WriteRawTag(16);
        output.WriteUInt64(LotusesGained);
      }
      if (HasWisdomRunesGained) {
        output.WriteRawTag(24);
        output.WriteUInt64(WisdomRunesGained);
      }
      if (HasRoshanKillsDay) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoshanKillsDay);
      }
      if (HasRoshanKillsNight) {
        output.WriteRawTag(40);
        output.WriteUInt64(RoshanKillsNight);
      }
      if (HasPortalsUsed) {
        output.WriteRawTag(48);
        output.WriteUInt64(PortalsUsed);
      }
      if (HasWatchersTaken) {
        output.WriteRawTag(56);
        output.WriteUInt64(WatchersTaken);
      }
      if (HasTormentorKills) {
        output.WriteRawTag(64);
        output.WriteUInt64(TormentorKills);
      }
      if (HasOutpostsCaptured) {
        output.WriteRawTag(72);
        output.WriteUInt64(OutpostsCaptured);
      }
      if (HasShieldRunesGained) {
        output.WriteRawTag(80);
        output.WriteUInt64(ShieldRunesGained);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (HasLotusesGained) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LotusesGained);
      }
      if (HasWisdomRunesGained) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WisdomRunesGained);
      }
      if (HasRoshanKillsDay) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoshanKillsDay);
      }
      if (HasRoshanKillsNight) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoshanKillsNight);
      }
      if (HasPortalsUsed) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PortalsUsed);
      }
      if (HasWatchersTaken) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WatchersTaken);
      }
      if (HasTormentorKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TormentorKills);
      }
      if (HasOutpostsCaptured) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutpostsCaptured);
      }
      if (HasShieldRunesGained) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShieldRunesGained);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgMapStatsSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasLotusesGained) {
        LotusesGained = other.LotusesGained;
      }
      if (other.HasWisdomRunesGained) {
        WisdomRunesGained = other.WisdomRunesGained;
      }
      if (other.HasRoshanKillsDay) {
        RoshanKillsDay = other.RoshanKillsDay;
      }
      if (other.HasRoshanKillsNight) {
        RoshanKillsNight = other.RoshanKillsNight;
      }
      if (other.HasPortalsUsed) {
        PortalsUsed = other.PortalsUsed;
      }
      if (other.HasWatchersTaken) {
        WatchersTaken = other.WatchersTaken;
      }
      if (other.HasTormentorKills) {
        TormentorKills = other.TormentorKills;
      }
      if (other.HasOutpostsCaptured) {
        OutpostsCaptured = other.OutpostsCaptured;
      }
      if (other.HasShieldRunesGained) {
        ShieldRunesGained = other.ShieldRunesGained;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            LotusesGained = input.ReadUInt64();
            break;
          }
          case 24: {
            WisdomRunesGained = input.ReadUInt64();
            break;
          }
          case 32: {
            RoshanKillsDay = input.ReadUInt64();
            break;
          }
          case 40: {
            RoshanKillsNight = input.ReadUInt64();
            break;
          }
          case 48: {
            PortalsUsed = input.ReadUInt64();
            break;
          }
          case 56: {
            WatchersTaken = input.ReadUInt64();
            break;
          }
          case 64: {
            TormentorKills = input.ReadUInt64();
            break;
          }
          case 72: {
            OutpostsCaptured = input.ReadUInt64();
            break;
          }
          case 80: {
            ShieldRunesGained = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            LotusesGained = input.ReadUInt64();
            break;
          }
          case 24: {
            WisdomRunesGained = input.ReadUInt64();
            break;
          }
          case 32: {
            RoshanKillsDay = input.ReadUInt64();
            break;
          }
          case 40: {
            RoshanKillsNight = input.ReadUInt64();
            break;
          }
          case 48: {
            PortalsUsed = input.ReadUInt64();
            break;
          }
          case 56: {
            WatchersTaken = input.ReadUInt64();
            break;
          }
          case 64: {
            TormentorKills = input.ReadUInt64();
            break;
          }
          case 72: {
            OutpostsCaptured = input.ReadUInt64();
            break;
          }
          case 80: {
            ShieldRunesGained = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgGlobalMapStats : pb::IMessage<CMsgGlobalMapStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGlobalMapStats> _parser = new pb::MessageParser<CMsgGlobalMapStats>(() => new CMsgGlobalMapStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGlobalMapStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGlobalMapStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGlobalMapStats(CMsgGlobalMapStats other) : this() {
      current_ = other.current_ != null ? other.current_.Clone() : null;
      windowStart_ = other.windowStart_ != null ? other.windowStart_.Clone() : null;
      windowEnd_ = other.windowEnd_ != null ? other.windowEnd_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGlobalMapStats Clone() {
      return new CMsgGlobalMapStats(this);
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgMapStatsSnapshot current_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgMapStatsSnapshot Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    /// <summary>Field number for the "window_start" field.</summary>
    public const int WindowStartFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgMapStatsSnapshot windowStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgMapStatsSnapshot WindowStart {
      get { return windowStart_; }
      set {
        windowStart_ = value;
      }
    }

    /// <summary>Field number for the "window_end" field.</summary>
    public const int WindowEndFieldNumber = 3;
    private global::Steam.Protos.Dota2.CMsgMapStatsSnapshot windowEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgMapStatsSnapshot WindowEnd {
      get { return windowEnd_; }
      set {
        windowEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGlobalMapStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGlobalMapStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Current, other.Current)) return false;
      if (!object.Equals(WindowStart, other.WindowStart)) return false;
      if (!object.Equals(WindowEnd, other.WindowEnd)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (current_ != null) hash ^= Current.GetHashCode();
      if (windowStart_ != null) hash ^= WindowStart.GetHashCode();
      if (windowEnd_ != null) hash ^= WindowEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (current_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Current);
      }
      if (windowStart_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WindowStart);
      }
      if (windowEnd_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WindowEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (current_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Current);
      }
      if (windowStart_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WindowStart);
      }
      if (windowEnd_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WindowEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (current_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Current);
      }
      if (windowStart_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindowStart);
      }
      if (windowEnd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindowEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGlobalMapStats other) {
      if (other == null) {
        return;
      }
      if (other.current_ != null) {
        if (current_ == null) {
          Current = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
        }
        Current.MergeFrom(other.Current);
      }
      if (other.windowStart_ != null) {
        if (windowStart_ == null) {
          WindowStart = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
        }
        WindowStart.MergeFrom(other.WindowStart);
      }
      if (other.windowEnd_ != null) {
        if (windowEnd_ == null) {
          WindowEnd = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
        }
        WindowEnd.MergeFrom(other.WindowEnd);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (current_ == null) {
              Current = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
            }
            input.ReadMessage(Current);
            break;
          }
          case 18: {
            if (windowStart_ == null) {
              WindowStart = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
            }
            input.ReadMessage(WindowStart);
            break;
          }
          case 26: {
            if (windowEnd_ == null) {
              WindowEnd = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
            }
            input.ReadMessage(WindowEnd);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (current_ == null) {
              Current = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
            }
            input.ReadMessage(Current);
            break;
          }
          case 18: {
            if (windowStart_ == null) {
              WindowStart = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
            }
            input.ReadMessage(WindowStart);
            break;
          }
          case 26: {
            if (windowEnd_ == null) {
              WindowEnd = new global::Steam.Protos.Dota2.CMsgMapStatsSnapshot();
            }
            input.ReadMessage(WindowEnd);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgTrackedStat : pb::IMessage<CMsgTrackedStat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgTrackedStat> _parser = new pb::MessageParser<CMsgTrackedStat>(() => new CMsgTrackedStat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTrackedStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTrackedStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTrackedStat(CMsgTrackedStat other) : this() {
      _hasBits0 = other._hasBits0;
      trackedStatId_ = other.trackedStatId_;
      trackedStatValue_ = other.trackedStatValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTrackedStat Clone() {
      return new CMsgTrackedStat(this);
    }

    /// <summary>Field number for the "tracked_stat_id" field.</summary>
    public const int TrackedStatIdFieldNumber = 1;
    private readonly static uint TrackedStatIdDefaultValue = 0;

    private uint trackedStatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrackedStatId {
      get { if ((_hasBits0 & 1) != 0) { return trackedStatId_; } else { return TrackedStatIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        trackedStatId_ = value;
      }
    }
    /// <summary>Gets whether the "tracked_stat_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrackedStatId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tracked_stat_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrackedStatId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tracked_stat_value" field.</summary>
    public const int TrackedStatValueFieldNumber = 2;
    private readonly static int TrackedStatValueDefaultValue = 0;

    private int trackedStatValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrackedStatValue {
      get { if ((_hasBits0 & 2) != 0) { return trackedStatValue_; } else { return TrackedStatValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        trackedStatValue_ = value;
      }
    }
    /// <summary>Gets whether the "tracked_stat_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrackedStatValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tracked_stat_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrackedStatValue() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTrackedStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTrackedStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrackedStatId != other.TrackedStatId) return false;
      if (TrackedStatValue != other.TrackedStatValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTrackedStatId) hash ^= TrackedStatId.GetHashCode();
      if (HasTrackedStatValue) hash ^= TrackedStatValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTrackedStatId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TrackedStatId);
      }
      if (HasTrackedStatValue) {
        output.WriteRawTag(16);
        output.WriteInt32(TrackedStatValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTrackedStatId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TrackedStatId);
      }
      if (HasTrackedStatValue) {
        output.WriteRawTag(16);
        output.WriteInt32(TrackedStatValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTrackedStatId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrackedStatId);
      }
      if (HasTrackedStatValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrackedStatValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTrackedStat other) {
      if (other == null) {
        return;
      }
      if (other.HasTrackedStatId) {
        TrackedStatId = other.TrackedStatId;
      }
      if (other.HasTrackedStatValue) {
        TrackedStatValue = other.TrackedStatValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrackedStatId = input.ReadUInt32();
            break;
          }
          case 16: {
            TrackedStatValue = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TrackedStatId = input.ReadUInt32();
            break;
          }
          case 16: {
            TrackedStatValue = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgDOTAClaimEventActionResponse : pb::IMessage<CMsgDOTAClaimEventActionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTAClaimEventActionResponse> _parser = new pb::MessageParser<CMsgDOTAClaimEventActionResponse>(() => new CMsgDOTAClaimEventActionResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAClaimEventActionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAClaimEventActionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAClaimEventActionResponse(CMsgDOTAClaimEventActionResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      rewardResults_ = other.rewardResults_.Clone();
      actionId_ = other.actionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAClaimEventActionResponse Clone() {
      return new CMsgDOTAClaimEventActionResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.ResultCode ResultDefaultValue = global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.ResultCode.Success;

    private global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.ResultCode result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.ResultCode Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reward_results" field.</summary>
    public const int RewardResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.GrantedRewardData> _repeated_rewardResults_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.GrantedRewardData.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.GrantedRewardData> rewardResults_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.GrantedRewardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.GrantedRewardData> RewardResults {
      get { return rewardResults_; }
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 3;
    private readonly static uint ActionIdDefaultValue = 0;

    private uint actionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActionId {
      get { if ((_hasBits0 & 2) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionId_ = value;
      }
    }
    /// <summary>Gets whether the "action_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActionId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAClaimEventActionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAClaimEventActionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!rewardResults_.Equals(other.rewardResults_)) return false;
      if (ActionId != other.ActionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      hash ^= rewardResults_.GetHashCode();
      if (HasActionId) hash ^= ActionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      rewardResults_.WriteTo(output, _repeated_rewardResults_codec);
      if (HasActionId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ActionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      rewardResults_.WriteTo(ref output, _repeated_rewardResults_codec);
      if (HasActionId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ActionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      size += rewardResults_.CalculateSize(_repeated_rewardResults_codec);
      if (HasActionId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAClaimEventActionResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      rewardResults_.Add(other.rewardResults_);
      if (other.HasActionId) {
        ActionId = other.ActionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.ResultCode) input.ReadEnum();
            break;
          }
          case 18: {
            rewardResults_.AddEntriesFrom(input, _repeated_rewardResults_codec);
            break;
          }
          case 24: {
            ActionId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = (global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.ResultCode) input.ReadEnum();
            break;
          }
          case 18: {
            rewardResults_.AddEntriesFrom(ref input, _repeated_rewardResults_codec);
            break;
          }
          case 24: {
            ActionId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTAClaimEventActionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ResultCode {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("InvalidEvent")] InvalidEvent = 1,
        [pbr::OriginalName("EventNotActive")] EventNotActive = 2,
        [pbr::OriginalName("InvalidAction")] InvalidAction = 3,
        [pbr::OriginalName("ServerError")] ServerError = 4,
        [pbr::OriginalName("InsufficientPoints")] InsufficientPoints = 5,
        [pbr::OriginalName("InsufficentLevel")] InsufficentLevel = 6,
        [pbr::OriginalName("AlreadyClaimed")] AlreadyClaimed = 7,
        [pbr::OriginalName("SDOLockFailure")] SdolockFailure = 8,
        [pbr::OriginalName("SDOLoadFailure")] SdoloadFailure = 9,
        [pbr::OriginalName("EventNotOwned")] EventNotOwned = 10,
        [pbr::OriginalName("Timeout")] Timeout = 11,
        [pbr::OriginalName("RequiresPlusSubscription")] RequiresPlusSubscription = 12,
        [pbr::OriginalName("InvalidItem")] InvalidItem = 13,
        [pbr::OriginalName("AsyncRewards")] AsyncRewards = 14,
      }

      public sealed partial class MysteryItemRewardData : pb::IMessage<MysteryItemRewardData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MysteryItemRewardData> _parser = new pb::MessageParser<MysteryItemRewardData>(() => new MysteryItemRewardData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MysteryItemRewardData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MysteryItemRewardData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MysteryItemRewardData(MysteryItemRewardData other) : this() {
          _hasBits0 = other._hasBits0;
          itemDef_ = other.itemDef_;
          itemCategory_ = other.itemCategory_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MysteryItemRewardData Clone() {
          return new MysteryItemRewardData(this);
        }

        /// <summary>Field number for the "item_def" field.</summary>
        public const int ItemDefFieldNumber = 1;
        private readonly static uint ItemDefDefaultValue = 0;

        private uint itemDef_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemDef {
          get { if ((_hasBits0 & 1) != 0) { return itemDef_; } else { return ItemDefDefaultValue; } }
          set {
            _hasBits0 |= 1;
            itemDef_ = value;
          }
        }
        /// <summary>Gets whether the "item_def" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItemDef {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "item_def" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItemDef() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "item_category" field.</summary>
        public const int ItemCategoryFieldNumber = 2;
        private readonly static uint ItemCategoryDefaultValue = 0;

        private uint itemCategory_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemCategory {
          get { if ((_hasBits0 & 2) != 0) { return itemCategory_; } else { return ItemCategoryDefaultValue; } }
          set {
            _hasBits0 |= 2;
            itemCategory_ = value;
          }
        }
        /// <summary>Gets whether the "item_category" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItemCategory {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "item_category" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItemCategory() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MysteryItemRewardData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MysteryItemRewardData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemDef != other.ItemDef) return false;
          if (ItemCategory != other.ItemCategory) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasItemDef) hash ^= ItemDef.GetHashCode();
          if (HasItemCategory) hash ^= ItemCategory.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasItemDef) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemDef);
          }
          if (HasItemCategory) {
            output.WriteRawTag(16);
            output.WriteUInt32(ItemCategory);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasItemDef) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemDef);
          }
          if (HasItemCategory) {
            output.WriteRawTag(16);
            output.WriteUInt32(ItemCategory);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasItemDef) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDef);
          }
          if (HasItemCategory) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemCategory);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MysteryItemRewardData other) {
          if (other == null) {
            return;
          }
          if (other.HasItemDef) {
            ItemDef = other.ItemDef;
          }
          if (other.HasItemCategory) {
            ItemCategory = other.ItemCategory;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemDef = input.ReadUInt32();
                break;
              }
              case 16: {
                ItemCategory = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ItemDef = input.ReadUInt32();
                break;
              }
              case 16: {
                ItemCategory = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class LootListRewardData : pb::IMessage<LootListRewardData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LootListRewardData> _parser = new pb::MessageParser<LootListRewardData>(() => new LootListRewardData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LootListRewardData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootListRewardData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootListRewardData(LootListRewardData other) : this() {
          itemDef_ = other.itemDef_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootListRewardData Clone() {
          return new LootListRewardData(this);
        }

        /// <summary>Field number for the "item_def" field.</summary>
        public const int ItemDefFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_itemDef_codec
            = pb::FieldCodec.ForUInt32(8);
        private readonly pbc::RepeatedField<uint> itemDef_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ItemDef {
          get { return itemDef_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LootListRewardData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LootListRewardData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!itemDef_.Equals(other.itemDef_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= itemDef_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          itemDef_.WriteTo(output, _repeated_itemDef_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          itemDef_.WriteTo(ref output, _repeated_itemDef_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += itemDef_.CalculateSize(_repeated_itemDef_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LootListRewardData other) {
          if (other == null) {
            return;
          }
          itemDef_.Add(other.itemDef_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                itemDef_.AddEntriesFrom(input, _repeated_itemDef_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 8: {
                itemDef_.AddEntriesFrom(ref input, _repeated_itemDef_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class ActionListRewardData : pb::IMessage<ActionListRewardData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ActionListRewardData> _parser = new pb::MessageParser<ActionListRewardData>(() => new ActionListRewardData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionListRewardData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionListRewardData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionListRewardData(ActionListRewardData other) : this() {
          _hasBits0 = other._hasBits0;
          actionId_ = other.actionId_;
          resultRewardData_ = other.resultRewardData_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionListRewardData Clone() {
          return new ActionListRewardData(this);
        }

        /// <summary>Field number for the "action_id" field.</summary>
        public const int ActionIdFieldNumber = 1;
        private readonly static uint ActionIdDefaultValue = 0;

        private uint actionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActionId {
          get { if ((_hasBits0 & 1) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            actionId_ = value;
          }
        }
        /// <summary>Gets whether the "action_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActionId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "action_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActionId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "result_reward_data" field.</summary>
        public const int ResultRewardDataFieldNumber = 2;
        private readonly static pb::ByteString ResultRewardDataDefaultValue = pb::ByteString.Empty;

        private pb::ByteString resultRewardData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ResultRewardData {
          get { return resultRewardData_ ?? ResultRewardDataDefaultValue; }
          set {
            resultRewardData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "result_reward_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasResultRewardData {
          get { return resultRewardData_ != null; }
        }
        /// <summary>Clears the value of the "result_reward_data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResultRewardData() {
          resultRewardData_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ActionListRewardData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionListRewardData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ActionId != other.ActionId) return false;
          if (ResultRewardData != other.ResultRewardData) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasActionId) hash ^= ActionId.GetHashCode();
          if (HasResultRewardData) hash ^= ResultRewardData.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasActionId) {
            output.WriteRawTag(8);
            output.WriteUInt32(ActionId);
          }
          if (HasResultRewardData) {
            output.WriteRawTag(18);
            output.WriteBytes(ResultRewardData);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasActionId) {
            output.WriteRawTag(8);
            output.WriteUInt32(ActionId);
          }
          if (HasResultRewardData) {
            output.WriteRawTag(18);
            output.WriteBytes(ResultRewardData);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasActionId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionId);
          }
          if (HasResultRewardData) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResultRewardData);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionListRewardData other) {
          if (other == null) {
            return;
          }
          if (other.HasActionId) {
            ActionId = other.ActionId;
          }
          if (other.HasResultRewardData) {
            ResultRewardData = other.ResultRewardData;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ActionId = input.ReadUInt32();
                break;
              }
              case 18: {
                ResultRewardData = input.ReadBytes();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ActionId = input.ReadUInt32();
                break;
              }
              case 18: {
                ResultRewardData = input.ReadBytes();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class OverworldTokenRewardData : pb::IMessage<OverworldTokenRewardData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<OverworldTokenRewardData> _parser = new pb::MessageParser<OverworldTokenRewardData>(() => new OverworldTokenRewardData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OverworldTokenRewardData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverworldTokenRewardData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverworldTokenRewardData(OverworldTokenRewardData other) : this() {
          tokens_ = other.tokens_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverworldTokenRewardData Clone() {
          return new OverworldTokenRewardData(this);
        }

        /// <summary>Field number for the "tokens" field.</summary>
        public const int TokensFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.OverworldTokenRewardData.Types.TokenQuantity> _repeated_tokens_codec
            = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.OverworldTokenRewardData.Types.TokenQuantity.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.OverworldTokenRewardData.Types.TokenQuantity> tokens_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.OverworldTokenRewardData.Types.TokenQuantity>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.OverworldTokenRewardData.Types.TokenQuantity> Tokens {
          get { return tokens_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OverworldTokenRewardData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OverworldTokenRewardData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!tokens_.Equals(other.tokens_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= tokens_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          tokens_.WriteTo(output, _repeated_tokens_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          tokens_.WriteTo(ref output, _repeated_tokens_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += tokens_.CalculateSize(_repeated_tokens_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OverworldTokenRewardData other) {
          if (other == null) {
            return;
          }
          tokens_.Add(other.tokens_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                tokens_.AddEntriesFrom(input, _repeated_tokens_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                tokens_.AddEntriesFrom(ref input, _repeated_tokens_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the OverworldTokenRewardData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class TokenQuantity : pb::IMessage<TokenQuantity>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<TokenQuantity> _parser = new pb::MessageParser<TokenQuantity>(() => new TokenQuantity());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TokenQuantity> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Types.OverworldTokenRewardData.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TokenQuantity() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TokenQuantity(TokenQuantity other) : this() {
              _hasBits0 = other._hasBits0;
              tokenId_ = other.tokenId_;
              tokenCount_ = other.tokenCount_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TokenQuantity Clone() {
              return new TokenQuantity(this);
            }

            /// <summary>Field number for the "token_id" field.</summary>
            public const int TokenIdFieldNumber = 1;
            private readonly static uint TokenIdDefaultValue = 0;

            private uint tokenId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TokenId {
              get { if ((_hasBits0 & 1) != 0) { return tokenId_; } else { return TokenIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                tokenId_ = value;
              }
            }
            /// <summary>Gets whether the "token_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTokenId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "token_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTokenId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "token_count" field.</summary>
            public const int TokenCountFieldNumber = 2;
            private readonly static uint TokenCountDefaultValue = 0;

            private uint tokenCount_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TokenCount {
              get { if ((_hasBits0 & 2) != 0) { return tokenCount_; } else { return TokenCountDefaultValue; } }
              set {
                _hasBits0 |= 2;
                tokenCount_ = value;
              }
            }
            /// <summary>Gets whether the "token_count" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasTokenCount {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "token_count" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTokenCount() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TokenQuantity);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TokenQuantity other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (TokenId != other.TokenId) return false;
              if (TokenCount != other.TokenCount) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasTokenId) hash ^= TokenId.GetHashCode();
              if (HasTokenCount) hash ^= TokenCount.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasTokenId) {
                output.WriteRawTag(8);
                output.WriteUInt32(TokenId);
              }
              if (HasTokenCount) {
                output.WriteRawTag(16);
                output.WriteUInt32(TokenCount);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasTokenId) {
                output.WriteRawTag(8);
                output.WriteUInt32(TokenId);
              }
              if (HasTokenCount) {
                output.WriteRawTag(16);
                output.WriteUInt32(TokenCount);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasTokenId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenId);
              }
              if (HasTokenCount) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenCount);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TokenQuantity other) {
              if (other == null) {
                return;
              }
              if (other.HasTokenId) {
                TokenId = other.TokenId;
              }
              if (other.HasTokenCount) {
                TokenCount = other.TokenCount;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    TokenId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    TokenCount = input.ReadUInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    TokenId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    TokenCount = input.ReadUInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      public sealed partial class GrantedRewardData : pb::IMessage<GrantedRewardData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GrantedRewardData> _parser = new pb::MessageParser<GrantedRewardData>(() => new GrantedRewardData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GrantedRewardData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GrantedRewardData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GrantedRewardData(GrantedRewardData other) : this() {
          _hasBits0 = other._hasBits0;
          grantIndex_ = other.grantIndex_;
          scoreIndex_ = other.scoreIndex_;
          rewardIndex_ = other.rewardIndex_;
          rewardData_ = other.rewardData_;
          actionId_ = other.actionId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GrantedRewardData Clone() {
          return new GrantedRewardData(this);
        }

        /// <summary>Field number for the "grant_index" field.</summary>
        public const int GrantIndexFieldNumber = 1;
        private readonly static uint GrantIndexDefaultValue = 0;

        private uint grantIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GrantIndex {
          get { if ((_hasBits0 & 1) != 0) { return grantIndex_; } else { return GrantIndexDefaultValue; } }
          set {
            _hasBits0 |= 1;
            grantIndex_ = value;
          }
        }
        /// <summary>Gets whether the "grant_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGrantIndex {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "grant_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGrantIndex() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "score_index" field.</summary>
        public const int ScoreIndexFieldNumber = 2;
        private readonly static uint ScoreIndexDefaultValue = 0;

        private uint scoreIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScoreIndex {
          get { if ((_hasBits0 & 2) != 0) { return scoreIndex_; } else { return ScoreIndexDefaultValue; } }
          set {
            _hasBits0 |= 2;
            scoreIndex_ = value;
          }
        }
        /// <summary>Gets whether the "score_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScoreIndex {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "score_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScoreIndex() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "reward_index" field.</summary>
        public const int RewardIndexFieldNumber = 3;
        private readonly static uint RewardIndexDefaultValue = 0;

        private uint rewardIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RewardIndex {
          get { if ((_hasBits0 & 4) != 0) { return rewardIndex_; } else { return RewardIndexDefaultValue; } }
          set {
            _hasBits0 |= 4;
            rewardIndex_ = value;
          }
        }
        /// <summary>Gets whether the "reward_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRewardIndex {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "reward_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRewardIndex() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "reward_data" field.</summary>
        public const int RewardDataFieldNumber = 4;
        private readonly static pb::ByteString RewardDataDefaultValue = pb::ByteString.Empty;

        private pb::ByteString rewardData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString RewardData {
          get { return rewardData_ ?? RewardDataDefaultValue; }
          set {
            rewardData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "reward_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRewardData {
          get { return rewardData_ != null; }
        }
        /// <summary>Clears the value of the "reward_data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRewardData() {
          rewardData_ = null;
        }

        /// <summary>Field number for the "action_id" field.</summary>
        public const int ActionIdFieldNumber = 5;
        private readonly static uint ActionIdDefaultValue = 0;

        private uint actionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActionId {
          get { if ((_hasBits0 & 8) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
          set {
            _hasBits0 |= 8;
            actionId_ = value;
          }
        }
        /// <summary>Gets whether the "action_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActionId {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "action_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActionId() {
          _hasBits0 &= ~8;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GrantedRewardData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GrantedRewardData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GrantIndex != other.GrantIndex) return false;
          if (ScoreIndex != other.ScoreIndex) return false;
          if (RewardIndex != other.RewardIndex) return false;
          if (RewardData != other.RewardData) return false;
          if (ActionId != other.ActionId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasGrantIndex) hash ^= GrantIndex.GetHashCode();
          if (HasScoreIndex) hash ^= ScoreIndex.GetHashCode();
          if (HasRewardIndex) hash ^= RewardIndex.GetHashCode();
          if (HasRewardData) hash ^= RewardData.GetHashCode();
          if (HasActionId) hash ^= ActionId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasGrantIndex) {
            output.WriteRawTag(8);
            output.WriteUInt32(GrantIndex);
          }
          if (HasScoreIndex) {
            output.WriteRawTag(16);
            output.WriteUInt32(ScoreIndex);
          }
          if (HasRewardIndex) {
            output.WriteRawTag(24);
            output.WriteUInt32(RewardIndex);
          }
          if (HasRewardData) {
            output.WriteRawTag(34);
            output.WriteBytes(RewardData);
          }
          if (HasActionId) {
            output.WriteRawTag(40);
            output.WriteUInt32(ActionId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasGrantIndex) {
            output.WriteRawTag(8);
            output.WriteUInt32(GrantIndex);
          }
          if (HasScoreIndex) {
            output.WriteRawTag(16);
            output.WriteUInt32(ScoreIndex);
          }
          if (HasRewardIndex) {
            output.WriteRawTag(24);
            output.WriteUInt32(RewardIndex);
          }
          if (HasRewardData) {
            output.WriteRawTag(34);
            output.WriteBytes(RewardData);
          }
          if (HasActionId) {
            output.WriteRawTag(40);
            output.WriteUInt32(ActionId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasGrantIndex) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GrantIndex);
          }
          if (HasScoreIndex) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScoreIndex);
          }
          if (HasRewardIndex) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardIndex);
          }
          if (HasRewardData) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(RewardData);
          }
          if (HasActionId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GrantedRewardData other) {
          if (other == null) {
            return;
          }
          if (other.HasGrantIndex) {
            GrantIndex = other.GrantIndex;
          }
          if (other.HasScoreIndex) {
            ScoreIndex = other.ScoreIndex;
          }
          if (other.HasRewardIndex) {
            RewardIndex = other.RewardIndex;
          }
          if (other.HasRewardData) {
            RewardData = other.RewardData;
          }
          if (other.HasActionId) {
            ActionId = other.ActionId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                GrantIndex = input.ReadUInt32();
                break;
              }
              case 16: {
                ScoreIndex = input.ReadUInt32();
                break;
              }
              case 24: {
                RewardIndex = input.ReadUInt32();
                break;
              }
              case 34: {
                RewardData = input.ReadBytes();
                break;
              }
              case 40: {
                ActionId = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                GrantIndex = input.ReadUInt32();
                break;
              }
              case 16: {
                ScoreIndex = input.ReadUInt32();
                break;
              }
              case 24: {
                RewardIndex = input.ReadUInt32();
                break;
              }
              case 34: {
                RewardData = input.ReadBytes();
                break;
              }
              case 40: {
                ActionId = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCDotaLabsFeedback : pb::IMessage<CMsgClientToGCDotaLabsFeedback>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCDotaLabsFeedback> _parser = new pb::MessageParser<CMsgClientToGCDotaLabsFeedback>(() => new CMsgClientToGCDotaLabsFeedback());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCDotaLabsFeedback> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCDotaLabsFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCDotaLabsFeedback(CMsgClientToGCDotaLabsFeedback other) : this() {
      _hasBits0 = other._hasBits0;
      language_ = other.language_;
      feedbackItem_ = other.feedbackItem_;
      feedback_ = other.feedback_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCDotaLabsFeedback Clone() {
      return new CMsgClientToGCDotaLabsFeedback(this);
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 1;
    private readonly static uint LanguageDefaultValue = 0;

    private uint language_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { if ((_hasBits0 & 1) != 0) { return language_; } else { return LanguageDefaultValue; } }
      set {
        _hasBits0 |= 1;
        language_ = value;
      }
    }
    /// <summary>Gets whether the "language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanguage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanguage() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "feedback_item" field.</summary>
    public const int FeedbackItemFieldNumber = 2;
    private readonly static uint FeedbackItemDefaultValue = 0;

    private uint feedbackItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeedbackItem {
      get { if ((_hasBits0 & 2) != 0) { return feedbackItem_; } else { return FeedbackItemDefaultValue; } }
      set {
        _hasBits0 |= 2;
        feedbackItem_ = value;
      }
    }
    /// <summary>Gets whether the "feedback_item" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFeedbackItem {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "feedback_item" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFeedbackItem() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "feedback" field.</summary>
    public const int FeedbackFieldNumber = 3;
    private readonly static string FeedbackDefaultValue = "";

    private string feedback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Feedback {
      get { return feedback_ ?? FeedbackDefaultValue; }
      set {
        feedback_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "feedback" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFeedback {
      get { return feedback_ != null; }
    }
    /// <summary>Clears the value of the "feedback" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFeedback() {
      feedback_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCDotaLabsFeedback);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCDotaLabsFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Language != other.Language) return false;
      if (FeedbackItem != other.FeedbackItem) return false;
      if (Feedback != other.Feedback) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLanguage) hash ^= Language.GetHashCode();
      if (HasFeedbackItem) hash ^= FeedbackItem.GetHashCode();
      if (HasFeedback) hash ^= Feedback.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLanguage) {
        output.WriteRawTag(8);
        output.WriteUInt32(Language);
      }
      if (HasFeedbackItem) {
        output.WriteRawTag(16);
        output.WriteUInt32(FeedbackItem);
      }
      if (HasFeedback) {
        output.WriteRawTag(26);
        output.WriteString(Feedback);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLanguage) {
        output.WriteRawTag(8);
        output.WriteUInt32(Language);
      }
      if (HasFeedbackItem) {
        output.WriteRawTag(16);
        output.WriteUInt32(FeedbackItem);
      }
      if (HasFeedback) {
        output.WriteRawTag(26);
        output.WriteString(Feedback);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (HasFeedbackItem) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeedbackItem);
      }
      if (HasFeedback) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Feedback);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCDotaLabsFeedback other) {
      if (other == null) {
        return;
      }
      if (other.HasLanguage) {
        Language = other.Language;
      }
      if (other.HasFeedbackItem) {
        FeedbackItem = other.FeedbackItem;
      }
      if (other.HasFeedback) {
        Feedback = other.Feedback;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Language = input.ReadUInt32();
            break;
          }
          case 16: {
            FeedbackItem = input.ReadUInt32();
            break;
          }
          case 26: {
            Feedback = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Language = input.ReadUInt32();
            break;
          }
          case 16: {
            FeedbackItem = input.ReadUInt32();
            break;
          }
          case 26: {
            Feedback = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCDotaLabsFeedbackResponse : pb::IMessage<CMsgClientToGCDotaLabsFeedbackResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCDotaLabsFeedbackResponse> _parser = new pb::MessageParser<CMsgClientToGCDotaLabsFeedbackResponse>(() => new CMsgClientToGCDotaLabsFeedbackResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCDotaLabsFeedbackResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCDotaLabsFeedbackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCDotaLabsFeedbackResponse(CMsgClientToGCDotaLabsFeedbackResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCDotaLabsFeedbackResponse Clone() {
      return new CMsgClientToGCDotaLabsFeedbackResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedbackResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedbackResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedbackResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedbackResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCDotaLabsFeedbackResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCDotaLabsFeedbackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCDotaLabsFeedbackResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedbackResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCDotaLabsFeedbackResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCDotaLabsFeedbackResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 5,
        [pbr::OriginalName("k_eInvalidItem")] KEInvalidItem = 6,
      }

    }
    #endregion

  }

  public sealed partial class CDotaMsg_PredictionResult : pb::IMessage<CDotaMsg_PredictionResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDotaMsg_PredictionResult> _parser = new pb::MessageParser<CDotaMsg_PredictionResult>(() => new CDotaMsg_PredictionResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDotaMsg_PredictionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDotaMsg_PredictionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDotaMsg_PredictionResult(CDotaMsg_PredictionResult other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      matchId_ = other.matchId_;
      correct_ = other.correct_;
      predictions_ = other.predictions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDotaMsg_PredictionResult Clone() {
      return new CDotaMsg_PredictionResult(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 2) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "correct" field.</summary>
    public const int CorrectFieldNumber = 3;
    private readonly static bool CorrectDefaultValue = false;

    private bool correct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Correct {
      get { if ((_hasBits0 & 4) != 0) { return correct_; } else { return CorrectDefaultValue; } }
      set {
        _hasBits0 |= 4;
        correct_ = value;
      }
    }
    /// <summary>Gets whether the "correct" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCorrect {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "correct" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCorrect() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "predictions" field.</summary>
    public const int PredictionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction> _repeated_predictions_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction> predictions_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction> Predictions {
      get { return predictions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDotaMsg_PredictionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDotaMsg_PredictionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (MatchId != other.MatchId) return false;
      if (Correct != other.Correct) return false;
      if(!predictions_.Equals(other.predictions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasCorrect) hash ^= Correct.GetHashCode();
      hash ^= predictions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasMatchId) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (HasCorrect) {
        output.WriteRawTag(24);
        output.WriteBool(Correct);
      }
      predictions_.WriteTo(output, _repeated_predictions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (HasMatchId) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (HasCorrect) {
        output.WriteRawTag(24);
        output.WriteBool(Correct);
      }
      predictions_.WriteTo(ref output, _repeated_predictions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasCorrect) {
        size += 1 + 1;
      }
      size += predictions_.CalculateSize(_repeated_predictions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDotaMsg_PredictionResult other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasCorrect) {
        Correct = other.Correct;
      }
      predictions_.Add(other.predictions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 24: {
            Correct = input.ReadBool();
            break;
          }
          case 34: {
            predictions_.AddEntriesFrom(input, _repeated_predictions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 24: {
            Correct = input.ReadBool();
            break;
          }
          case 34: {
            predictions_.AddEntriesFrom(ref input, _repeated_predictions_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDotaMsg_PredictionResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Prediction : pb::IMessage<Prediction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Prediction> _parser = new pb::MessageParser<Prediction>(() => new Prediction());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Prediction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction(Prediction other) : this() {
          _hasBits0 = other._hasBits0;
          itemDef_ = other.itemDef_;
          numCorrect_ = other.numCorrect_;
          numFails_ = other.numFails_;
          result_ = other.result_;
          grantedItemDefs_ = other.grantedItemDefs_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction Clone() {
          return new Prediction(this);
        }

        /// <summary>Field number for the "item_def" field.</summary>
        public const int ItemDefFieldNumber = 1;
        private readonly static uint ItemDefDefaultValue = 0;

        private uint itemDef_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemDef {
          get { if ((_hasBits0 & 1) != 0) { return itemDef_; } else { return ItemDefDefaultValue; } }
          set {
            _hasBits0 |= 1;
            itemDef_ = value;
          }
        }
        /// <summary>Gets whether the "item_def" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItemDef {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "item_def" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItemDef() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "num_correct" field.</summary>
        public const int NumCorrectFieldNumber = 2;
        private readonly static uint NumCorrectDefaultValue = 0;

        private uint numCorrect_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumCorrect {
          get { if ((_hasBits0 & 2) != 0) { return numCorrect_; } else { return NumCorrectDefaultValue; } }
          set {
            _hasBits0 |= 2;
            numCorrect_ = value;
          }
        }
        /// <summary>Gets whether the "num_correct" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNumCorrect {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "num_correct" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNumCorrect() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "num_fails" field.</summary>
        public const int NumFailsFieldNumber = 3;
        private readonly static uint NumFailsDefaultValue = 0;

        private uint numFails_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumFails {
          get { if ((_hasBits0 & 4) != 0) { return numFails_; } else { return NumFailsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            numFails_ = value;
          }
        }
        /// <summary>Gets whether the "num_fails" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNumFails {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "num_fails" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNumFails() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 4;
        private readonly static global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction.Types.EResult ResultDefaultValue = global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction.Types.EResult.KEResultItemGranted;

        private global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction.Types.EResult result_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction.Types.EResult Result {
          get { if ((_hasBits0 & 8) != 0) { return result_; } else { return ResultDefaultValue; } }
          set {
            _hasBits0 |= 8;
            result_ = value;
          }
        }
        /// <summary>Gets whether the "result" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasResult {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "result" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResult() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "granted_item_defs" field.</summary>
        public const int GrantedItemDefsFieldNumber = 6;
        private static readonly pb::FieldCodec<uint> _repeated_grantedItemDefs_codec
            = pb::FieldCodec.ForUInt32(48);
        private readonly pbc::RepeatedField<uint> grantedItemDefs_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> GrantedItemDefs {
          get { return grantedItemDefs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Prediction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Prediction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemDef != other.ItemDef) return false;
          if (NumCorrect != other.NumCorrect) return false;
          if (NumFails != other.NumFails) return false;
          if (Result != other.Result) return false;
          if(!grantedItemDefs_.Equals(other.grantedItemDefs_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasItemDef) hash ^= ItemDef.GetHashCode();
          if (HasNumCorrect) hash ^= NumCorrect.GetHashCode();
          if (HasNumFails) hash ^= NumFails.GetHashCode();
          if (HasResult) hash ^= Result.GetHashCode();
          hash ^= grantedItemDefs_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasItemDef) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemDef);
          }
          if (HasNumCorrect) {
            output.WriteRawTag(16);
            output.WriteUInt32(NumCorrect);
          }
          if (HasNumFails) {
            output.WriteRawTag(24);
            output.WriteUInt32(NumFails);
          }
          if (HasResult) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Result);
          }
          grantedItemDefs_.WriteTo(output, _repeated_grantedItemDefs_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasItemDef) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemDef);
          }
          if (HasNumCorrect) {
            output.WriteRawTag(16);
            output.WriteUInt32(NumCorrect);
          }
          if (HasNumFails) {
            output.WriteRawTag(24);
            output.WriteUInt32(NumFails);
          }
          if (HasResult) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Result);
          }
          grantedItemDefs_.WriteTo(ref output, _repeated_grantedItemDefs_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasItemDef) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDef);
          }
          if (HasNumCorrect) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumCorrect);
          }
          if (HasNumFails) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumFails);
          }
          if (HasResult) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
          }
          size += grantedItemDefs_.CalculateSize(_repeated_grantedItemDefs_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Prediction other) {
          if (other == null) {
            return;
          }
          if (other.HasItemDef) {
            ItemDef = other.ItemDef;
          }
          if (other.HasNumCorrect) {
            NumCorrect = other.NumCorrect;
          }
          if (other.HasNumFails) {
            NumFails = other.NumFails;
          }
          if (other.HasResult) {
            Result = other.Result;
          }
          grantedItemDefs_.Add(other.grantedItemDefs_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemDef = input.ReadUInt32();
                break;
              }
              case 16: {
                NumCorrect = input.ReadUInt32();
                break;
              }
              case 24: {
                NumFails = input.ReadUInt32();
                break;
              }
              case 32: {
                Result = (global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction.Types.EResult) input.ReadEnum();
                break;
              }
              case 50:
              case 48: {
                grantedItemDefs_.AddEntriesFrom(input, _repeated_grantedItemDefs_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ItemDef = input.ReadUInt32();
                break;
              }
              case 16: {
                NumCorrect = input.ReadUInt32();
                break;
              }
              case 24: {
                NumFails = input.ReadUInt32();
                break;
              }
              case 32: {
                Result = (global::Steam.Protos.Dota2.CDotaMsg_PredictionResult.Types.Prediction.Types.EResult) input.ReadEnum();
                break;
              }
              case 50:
              case 48: {
                grantedItemDefs_.AddEntriesFrom(ref input, _repeated_grantedItemDefs_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Prediction message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum EResult {
            [pbr::OriginalName("k_eResult_ItemGranted")] KEResultItemGranted = 1,
            [pbr::OriginalName("k_eResult_Destroyed")] KEResultDestroyed = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CDotaMsgStructuredTooltipProperties : pb::IMessage<CDotaMsgStructuredTooltipProperties>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDotaMsgStructuredTooltipProperties> _parser = new pb::MessageParser<CDotaMsgStructuredTooltipProperties>(() => new CDotaMsgStructuredTooltipProperties());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDotaMsgStructuredTooltipProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDotaMsgStructuredTooltipProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDotaMsgStructuredTooltipProperties(CDotaMsgStructuredTooltipProperties other) : this() {
      _hasBits0 = other._hasBits0;
      abilityNameLocToken_ = other.abilityNameLocToken_;
      abilityCategoryLocToken_ = other.abilityCategoryLocToken_;
      abilityLevel_ = other.abilityLevel_;
      currentManaCost_ = other.currentManaCost_;
      currentHealthCost_ = other.currentHealthCost_;
      currentCooldown_ = other.currentCooldown_;
      summaryDescriptionLocToken_ = other.summaryDescriptionLocToken_;
      summaryDescriptionLevelUpLocToken_ = other.summaryDescriptionLevelUpLocToken_;
      summaryDescriptionEmbedValues_ = other.summaryDescriptionEmbedValues_.Clone();
      summaryDescriptionFacet_ = other.summaryDescriptionFacet_ != null ? other.summaryDescriptionFacet_.Clone() : null;
      chunks_ = other.chunks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDotaMsgStructuredTooltipProperties Clone() {
      return new CDotaMsgStructuredTooltipProperties(this);
    }

    /// <summary>Field number for the "ability_name_loc_token" field.</summary>
    public const int AbilityNameLocTokenFieldNumber = 1;
    private readonly static string AbilityNameLocTokenDefaultValue = "";

    private string abilityNameLocToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AbilityNameLocToken {
      get { return abilityNameLocToken_ ?? AbilityNameLocTokenDefaultValue; }
      set {
        abilityNameLocToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ability_name_loc_token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityNameLocToken {
      get { return abilityNameLocToken_ != null; }
    }
    /// <summary>Clears the value of the "ability_name_loc_token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityNameLocToken() {
      abilityNameLocToken_ = null;
    }

    /// <summary>Field number for the "ability_category_loc_token" field.</summary>
    public const int AbilityCategoryLocTokenFieldNumber = 2;
    private readonly static string AbilityCategoryLocTokenDefaultValue = "";

    private string abilityCategoryLocToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AbilityCategoryLocToken {
      get { return abilityCategoryLocToken_ ?? AbilityCategoryLocTokenDefaultValue; }
      set {
        abilityCategoryLocToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ability_category_loc_token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityCategoryLocToken {
      get { return abilityCategoryLocToken_ != null; }
    }
    /// <summary>Clears the value of the "ability_category_loc_token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityCategoryLocToken() {
      abilityCategoryLocToken_ = null;
    }

    /// <summary>Field number for the "ability_level" field.</summary>
    public const int AbilityLevelFieldNumber = 3;
    private readonly static int AbilityLevelDefaultValue = 0;

    private int abilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityLevel {
      get { if ((_hasBits0 & 1) != 0) { return abilityLevel_; } else { return AbilityLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        abilityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "ability_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ability_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "current_mana_cost" field.</summary>
    public const int CurrentManaCostFieldNumber = 4;
    private readonly static int CurrentManaCostDefaultValue = 0;

    private int currentManaCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentManaCost {
      get { if ((_hasBits0 & 2) != 0) { return currentManaCost_; } else { return CurrentManaCostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        currentManaCost_ = value;
      }
    }
    /// <summary>Gets whether the "current_mana_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentManaCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "current_mana_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentManaCost() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "current_health_cost" field.</summary>
    public const int CurrentHealthCostFieldNumber = 5;
    private readonly static int CurrentHealthCostDefaultValue = 0;

    private int currentHealthCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentHealthCost {
      get { if ((_hasBits0 & 4) != 0) { return currentHealthCost_; } else { return CurrentHealthCostDefaultValue; } }
      set {
        _hasBits0 |= 4;
        currentHealthCost_ = value;
      }
    }
    /// <summary>Gets whether the "current_health_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentHealthCost {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "current_health_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentHealthCost() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "current_cooldown" field.</summary>
    public const int CurrentCooldownFieldNumber = 6;
    private readonly static float CurrentCooldownDefaultValue = 0F;

    private float currentCooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentCooldown {
      get { if ((_hasBits0 & 8) != 0) { return currentCooldown_; } else { return CurrentCooldownDefaultValue; } }
      set {
        _hasBits0 |= 8;
        currentCooldown_ = value;
      }
    }
    /// <summary>Gets whether the "current_cooldown" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentCooldown {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "current_cooldown" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentCooldown() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "summary_description_loc_token" field.</summary>
    public const int SummaryDescriptionLocTokenFieldNumber = 7;
    private readonly static string SummaryDescriptionLocTokenDefaultValue = "";

    private string summaryDescriptionLocToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SummaryDescriptionLocToken {
      get { return summaryDescriptionLocToken_ ?? SummaryDescriptionLocTokenDefaultValue; }
      set {
        summaryDescriptionLocToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "summary_description_loc_token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSummaryDescriptionLocToken {
      get { return summaryDescriptionLocToken_ != null; }
    }
    /// <summary>Clears the value of the "summary_description_loc_token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSummaryDescriptionLocToken() {
      summaryDescriptionLocToken_ = null;
    }

    /// <summary>Field number for the "summary_description_level_up_loc_token" field.</summary>
    public const int SummaryDescriptionLevelUpLocTokenFieldNumber = 8;
    private readonly static string SummaryDescriptionLevelUpLocTokenDefaultValue = "";

    private string summaryDescriptionLevelUpLocToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SummaryDescriptionLevelUpLocToken {
      get { return summaryDescriptionLevelUpLocToken_ ?? SummaryDescriptionLevelUpLocTokenDefaultValue; }
      set {
        summaryDescriptionLevelUpLocToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "summary_description_level_up_loc_token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSummaryDescriptionLevelUpLocToken {
      get { return summaryDescriptionLevelUpLocToken_ != null; }
    }
    /// <summary>Clears the value of the "summary_description_level_up_loc_token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSummaryDescriptionLevelUpLocToken() {
      summaryDescriptionLevelUpLocToken_ = null;
    }

    /// <summary>Field number for the "summary_description_embed_values" field.</summary>
    public const int SummaryDescriptionEmbedValuesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.SummaryDescriptionEmbedValue> _repeated_summaryDescriptionEmbedValues_codec
        = pb::FieldCodec.ForMessage(74, global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.SummaryDescriptionEmbedValue.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.SummaryDescriptionEmbedValue> summaryDescriptionEmbedValues_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.SummaryDescriptionEmbedValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.SummaryDescriptionEmbedValue> SummaryDescriptionEmbedValues {
      get { return summaryDescriptionEmbedValues_; }
    }

    /// <summary>Field number for the "summary_description_facet" field.</summary>
    public const int SummaryDescriptionFacetFieldNumber = 10;
    private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties summaryDescriptionFacet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties SummaryDescriptionFacet {
      get { return summaryDescriptionFacet_; }
      set {
        summaryDescriptionFacet_ = value;
      }
    }

    /// <summary>Field number for the "chunks" field.</summary>
    public const int ChunksFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.TooltipContentChunk> _repeated_chunks_codec
        = pb::FieldCodec.ForMessage(162, global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.TooltipContentChunk.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.TooltipContentChunk> chunks_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.TooltipContentChunk>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.TooltipContentChunk> Chunks {
      get { return chunks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDotaMsgStructuredTooltipProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDotaMsgStructuredTooltipProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityNameLocToken != other.AbilityNameLocToken) return false;
      if (AbilityCategoryLocToken != other.AbilityCategoryLocToken) return false;
      if (AbilityLevel != other.AbilityLevel) return false;
      if (CurrentManaCost != other.CurrentManaCost) return false;
      if (CurrentHealthCost != other.CurrentHealthCost) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentCooldown, other.CurrentCooldown)) return false;
      if (SummaryDescriptionLocToken != other.SummaryDescriptionLocToken) return false;
      if (SummaryDescriptionLevelUpLocToken != other.SummaryDescriptionLevelUpLocToken) return false;
      if(!summaryDescriptionEmbedValues_.Equals(other.summaryDescriptionEmbedValues_)) return false;
      if (!object.Equals(SummaryDescriptionFacet, other.SummaryDescriptionFacet)) return false;
      if(!chunks_.Equals(other.chunks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAbilityNameLocToken) hash ^= AbilityNameLocToken.GetHashCode();
      if (HasAbilityCategoryLocToken) hash ^= AbilityCategoryLocToken.GetHashCode();
      if (HasAbilityLevel) hash ^= AbilityLevel.GetHashCode();
      if (HasCurrentManaCost) hash ^= CurrentManaCost.GetHashCode();
      if (HasCurrentHealthCost) hash ^= CurrentHealthCost.GetHashCode();
      if (HasCurrentCooldown) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentCooldown);
      if (HasSummaryDescriptionLocToken) hash ^= SummaryDescriptionLocToken.GetHashCode();
      if (HasSummaryDescriptionLevelUpLocToken) hash ^= SummaryDescriptionLevelUpLocToken.GetHashCode();
      hash ^= summaryDescriptionEmbedValues_.GetHashCode();
      if (summaryDescriptionFacet_ != null) hash ^= SummaryDescriptionFacet.GetHashCode();
      hash ^= chunks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAbilityNameLocToken) {
        output.WriteRawTag(10);
        output.WriteString(AbilityNameLocToken);
      }
      if (HasAbilityCategoryLocToken) {
        output.WriteRawTag(18);
        output.WriteString(AbilityCategoryLocToken);
      }
      if (HasAbilityLevel) {
        output.WriteRawTag(24);
        output.WriteInt32(AbilityLevel);
      }
      if (HasCurrentManaCost) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentManaCost);
      }
      if (HasCurrentHealthCost) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentHealthCost);
      }
      if (HasCurrentCooldown) {
        output.WriteRawTag(53);
        output.WriteFloat(CurrentCooldown);
      }
      if (HasSummaryDescriptionLocToken) {
        output.WriteRawTag(58);
        output.WriteString(SummaryDescriptionLocToken);
      }
      if (HasSummaryDescriptionLevelUpLocToken) {
        output.WriteRawTag(66);
        output.WriteString(SummaryDescriptionLevelUpLocToken);
      }
      summaryDescriptionEmbedValues_.WriteTo(output, _repeated_summaryDescriptionEmbedValues_codec);
      if (summaryDescriptionFacet_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SummaryDescriptionFacet);
      }
      chunks_.WriteTo(output, _repeated_chunks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAbilityNameLocToken) {
        output.WriteRawTag(10);
        output.WriteString(AbilityNameLocToken);
      }
      if (HasAbilityCategoryLocToken) {
        output.WriteRawTag(18);
        output.WriteString(AbilityCategoryLocToken);
      }
      if (HasAbilityLevel) {
        output.WriteRawTag(24);
        output.WriteInt32(AbilityLevel);
      }
      if (HasCurrentManaCost) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentManaCost);
      }
      if (HasCurrentHealthCost) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentHealthCost);
      }
      if (HasCurrentCooldown) {
        output.WriteRawTag(53);
        output.WriteFloat(CurrentCooldown);
      }
      if (HasSummaryDescriptionLocToken) {
        output.WriteRawTag(58);
        output.WriteString(SummaryDescriptionLocToken);
      }
      if (HasSummaryDescriptionLevelUpLocToken) {
        output.WriteRawTag(66);
        output.WriteString(SummaryDescriptionLevelUpLocToken);
      }
      summaryDescriptionEmbedValues_.WriteTo(ref output, _repeated_summaryDescriptionEmbedValues_codec);
      if (summaryDescriptionFacet_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SummaryDescriptionFacet);
      }
      chunks_.WriteTo(ref output, _repeated_chunks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAbilityNameLocToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AbilityNameLocToken);
      }
      if (HasAbilityCategoryLocToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AbilityCategoryLocToken);
      }
      if (HasAbilityLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityLevel);
      }
      if (HasCurrentManaCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentManaCost);
      }
      if (HasCurrentHealthCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHealthCost);
      }
      if (HasCurrentCooldown) {
        size += 1 + 4;
      }
      if (HasSummaryDescriptionLocToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SummaryDescriptionLocToken);
      }
      if (HasSummaryDescriptionLevelUpLocToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SummaryDescriptionLevelUpLocToken);
      }
      size += summaryDescriptionEmbedValues_.CalculateSize(_repeated_summaryDescriptionEmbedValues_codec);
      if (summaryDescriptionFacet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SummaryDescriptionFacet);
      }
      size += chunks_.CalculateSize(_repeated_chunks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDotaMsgStructuredTooltipProperties other) {
      if (other == null) {
        return;
      }
      if (other.HasAbilityNameLocToken) {
        AbilityNameLocToken = other.AbilityNameLocToken;
      }
      if (other.HasAbilityCategoryLocToken) {
        AbilityCategoryLocToken = other.AbilityCategoryLocToken;
      }
      if (other.HasAbilityLevel) {
        AbilityLevel = other.AbilityLevel;
      }
      if (other.HasCurrentManaCost) {
        CurrentManaCost = other.CurrentManaCost;
      }
      if (other.HasCurrentHealthCost) {
        CurrentHealthCost = other.CurrentHealthCost;
      }
      if (other.HasCurrentCooldown) {
        CurrentCooldown = other.CurrentCooldown;
      }
      if (other.HasSummaryDescriptionLocToken) {
        SummaryDescriptionLocToken = other.SummaryDescriptionLocToken;
      }
      if (other.HasSummaryDescriptionLevelUpLocToken) {
        SummaryDescriptionLevelUpLocToken = other.SummaryDescriptionLevelUpLocToken;
      }
      summaryDescriptionEmbedValues_.Add(other.summaryDescriptionEmbedValues_);
      if (other.summaryDescriptionFacet_ != null) {
        if (summaryDescriptionFacet_ == null) {
          SummaryDescriptionFacet = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties();
        }
        SummaryDescriptionFacet.MergeFrom(other.SummaryDescriptionFacet);
      }
      chunks_.Add(other.chunks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AbilityNameLocToken = input.ReadString();
            break;
          }
          case 18: {
            AbilityCategoryLocToken = input.ReadString();
            break;
          }
          case 24: {
            AbilityLevel = input.ReadInt32();
            break;
          }
          case 32: {
            CurrentManaCost = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentHealthCost = input.ReadInt32();
            break;
          }
          case 53: {
            CurrentCooldown = input.ReadFloat();
            break;
          }
          case 58: {
            SummaryDescriptionLocToken = input.ReadString();
            break;
          }
          case 66: {
            SummaryDescriptionLevelUpLocToken = input.ReadString();
            break;
          }
          case 74: {
            summaryDescriptionEmbedValues_.AddEntriesFrom(input, _repeated_summaryDescriptionEmbedValues_codec);
            break;
          }
          case 82: {
            if (summaryDescriptionFacet_ == null) {
              SummaryDescriptionFacet = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties();
            }
            input.ReadMessage(SummaryDescriptionFacet);
            break;
          }
          case 162: {
            chunks_.AddEntriesFrom(input, _repeated_chunks_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AbilityNameLocToken = input.ReadString();
            break;
          }
          case 18: {
            AbilityCategoryLocToken = input.ReadString();
            break;
          }
          case 24: {
            AbilityLevel = input.ReadInt32();
            break;
          }
          case 32: {
            CurrentManaCost = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentHealthCost = input.ReadInt32();
            break;
          }
          case 53: {
            CurrentCooldown = input.ReadFloat();
            break;
          }
          case 58: {
            SummaryDescriptionLocToken = input.ReadString();
            break;
          }
          case 66: {
            SummaryDescriptionLevelUpLocToken = input.ReadString();
            break;
          }
          case 74: {
            summaryDescriptionEmbedValues_.AddEntriesFrom(ref input, _repeated_summaryDescriptionEmbedValues_codec);
            break;
          }
          case 82: {
            if (summaryDescriptionFacet_ == null) {
              SummaryDescriptionFacet = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties();
            }
            input.ReadMessage(SummaryDescriptionFacet);
            break;
          }
          case 162: {
            chunks_.AddEntriesFrom(ref input, _repeated_chunks_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDotaMsgStructuredTooltipProperties message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EAttributeType {
        [pbr::OriginalName("kUnknown")] KUnknown = 0,
        [pbr::OriginalName("kDuration")] KDuration = 1,
        [pbr::OriginalName("kManaCost")] KManaCost = 2,
        [pbr::OriginalName("kHealthCost")] KHealthCost = 3,
        [pbr::OriginalName("kCastRange")] KCastRange = 4,
        [pbr::OriginalName("kAreaOfEffectRadius")] KAreaOfEffectRadius = 5,
        [pbr::OriginalName("kPhysicalDamage")] KPhysicalDamage = 6,
        [pbr::OriginalName("kMagicalDamage")] KMagicalDamage = 7,
        [pbr::OriginalName("kPureDamage")] KPureDamage = 8,
        [pbr::OriginalName("kCooldown")] KCooldown = 9,
        [pbr::OriginalName("kDebuffPercentage")] KDebuffPercentage = 10,
      }

      public sealed partial class AttributeValueValue : pb::IMessage<AttributeValueValue>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeValueValue> _parser = new pb::MessageParser<AttributeValueValue>(() => new AttributeValueValue());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeValueValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValueValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValueValue(AttributeValueValue other) : this() {
          _hasBits0 = other._hasBits0;
          value_ = other.value_;
          isActiveValue_ = other.isActiveValue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValueValue Clone() {
          return new AttributeValueValue(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private readonly static float ValueDefaultValue = 0F;

        private float value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Value {
          get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
          set {
            _hasBits0 |= 1;
            value_ = value;
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValue {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "is_active_value" field.</summary>
        public const int IsActiveValueFieldNumber = 2;
        private readonly static bool IsActiveValueDefaultValue = false;

        private bool isActiveValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsActiveValue {
          get { if ((_hasBits0 & 2) != 0) { return isActiveValue_; } else { return IsActiveValueDefaultValue; } }
          set {
            _hasBits0 |= 2;
            isActiveValue_ = value;
          }
        }
        /// <summary>Gets whether the "is_active_value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsActiveValue {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "is_active_value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsActiveValue() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeValueValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeValueValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
          if (IsActiveValue != other.IsActiveValue) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
          if (HasIsActiveValue) hash ^= IsActiveValue.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasValue) {
            output.WriteRawTag(13);
            output.WriteFloat(Value);
          }
          if (HasIsActiveValue) {
            output.WriteRawTag(16);
            output.WriteBool(IsActiveValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasValue) {
            output.WriteRawTag(13);
            output.WriteFloat(Value);
          }
          if (HasIsActiveValue) {
            output.WriteRawTag(16);
            output.WriteBool(IsActiveValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasValue) {
            size += 1 + 4;
          }
          if (HasIsActiveValue) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeValueValue other) {
          if (other == null) {
            return;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          if (other.HasIsActiveValue) {
            IsActiveValue = other.IsActiveValue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Value = input.ReadFloat();
                break;
              }
              case 16: {
                IsActiveValue = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                Value = input.ReadFloat();
                break;
              }
              case 16: {
                IsActiveValue = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AttributeValue_Single : pb::IMessage<AttributeValue_Single>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeValue_Single> _parser = new pb::MessageParser<AttributeValue_Single>(() => new AttributeValue_Single());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeValue_Single> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue_Single() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue_Single(AttributeValue_Single other) : this() {
          singleValue_ = other.singleValue_ != null ? other.singleValue_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue_Single Clone() {
          return new AttributeValue_Single(this);
        }

        /// <summary>Field number for the "single_value" field.</summary>
        public const int SingleValueFieldNumber = 1;
        private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue singleValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue SingleValue {
          get { return singleValue_; }
          set {
            singleValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeValue_Single);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeValue_Single other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SingleValue, other.SingleValue)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (singleValue_ != null) hash ^= SingleValue.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (singleValue_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(SingleValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (singleValue_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(SingleValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (singleValue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleValue);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeValue_Single other) {
          if (other == null) {
            return;
          }
          if (other.singleValue_ != null) {
            if (singleValue_ == null) {
              SingleValue = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue();
            }
            SingleValue.MergeFrom(other.SingleValue);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (singleValue_ == null) {
                  SingleValue = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue();
                }
                input.ReadMessage(SingleValue);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (singleValue_ == null) {
                  SingleValue = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue();
                }
                input.ReadMessage(SingleValue);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AttributeValue_Variable : pb::IMessage<AttributeValue_Variable>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeValue_Variable> _parser = new pb::MessageParser<AttributeValue_Variable>(() => new AttributeValue_Variable());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeValue_Variable> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue_Variable() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue_Variable(AttributeValue_Variable other) : this() {
          values_ = other.values_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue_Variable Clone() {
          return new AttributeValue_Variable(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue> _repeated_values_codec
            = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue> values_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeValue_Variable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeValue_Variable other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          values_.WriteTo(output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          values_.WriteTo(ref output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeValue_Variable other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                values_.AddEntriesFrom(ref input, _repeated_values_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AttributeValue_Delta : pb::IMessage<AttributeValue_Delta>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeValue_Delta> _parser = new pb::MessageParser<AttributeValue_Delta>(() => new AttributeValue_Delta());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeValue_Delta> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue_Delta() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue_Delta(AttributeValue_Delta other) : this() {
          prev_ = other.prev_ != null ? other.prev_.Clone() : null;
          next_ = other.next_ != null ? other.next_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue_Delta Clone() {
          return new AttributeValue_Delta(this);
        }

        /// <summary>Field number for the "prev" field.</summary>
        public const int PrevFieldNumber = 1;
        private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue prev_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue Prev {
          get { return prev_; }
          set {
            prev_ = value;
          }
        }

        /// <summary>Field number for the "next" field.</summary>
        public const int NextFieldNumber = 2;
        private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue next_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue Next {
          get { return next_; }
          set {
            next_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeValue_Delta);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeValue_Delta other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Prev, other.Prev)) return false;
          if (!object.Equals(Next, other.Next)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (prev_ != null) hash ^= Prev.GetHashCode();
          if (next_ != null) hash ^= Next.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (prev_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Prev);
          }
          if (next_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Next);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (prev_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Prev);
          }
          if (next_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Next);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (prev_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prev);
          }
          if (next_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Next);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeValue_Delta other) {
          if (other == null) {
            return;
          }
          if (other.prev_ != null) {
            if (prev_ == null) {
              Prev = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue();
            }
            Prev.MergeFrom(other.Prev);
          }
          if (other.next_ != null) {
            if (next_ == null) {
              Next = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue();
            }
            Next.MergeFrom(other.Next);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (prev_ == null) {
                  Prev = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue();
                }
                input.ReadMessage(Prev);
                break;
              }
              case 18: {
                if (next_ == null) {
                  Next = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue();
                }
                input.ReadMessage(Next);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (prev_ == null) {
                  Prev = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue();
                }
                input.ReadMessage(Prev);
                break;
              }
              case 18: {
                if (next_ == null) {
                  Next = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValueValue();
                }
                input.ReadMessage(Next);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AttributeValue : pb::IMessage<AttributeValue>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeValue> _parser = new pb::MessageParser<AttributeValue>(() => new AttributeValue());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue(AttributeValue other) : this() {
          switch (other.AttrValueCase) {
            case AttrValueOneofCase.Single:
              Single = other.Single.Clone();
              break;
            case AttrValueOneofCase.Variable:
              Variable = other.Variable.Clone();
              break;
            case AttrValueOneofCase.Delta:
              Delta = other.Delta.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeValue Clone() {
          return new AttributeValue(this);
        }

        /// <summary>Field number for the "single" field.</summary>
        public const int SingleFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Single Single {
          get { return attrValueCase_ == AttrValueOneofCase.Single ? (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Single) attrValue_ : null; }
          set {
            attrValue_ = value;
            attrValueCase_ = value == null ? AttrValueOneofCase.None : AttrValueOneofCase.Single;
          }
        }

        /// <summary>Field number for the "variable" field.</summary>
        public const int VariableFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Variable Variable {
          get { return attrValueCase_ == AttrValueOneofCase.Variable ? (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Variable) attrValue_ : null; }
          set {
            attrValue_ = value;
            attrValueCase_ = value == null ? AttrValueOneofCase.None : AttrValueOneofCase.Variable;
          }
        }

        /// <summary>Field number for the "delta" field.</summary>
        public const int DeltaFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Delta Delta {
          get { return attrValueCase_ == AttrValueOneofCase.Delta ? (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Delta) attrValue_ : null; }
          set {
            attrValue_ = value;
            attrValueCase_ = value == null ? AttrValueOneofCase.None : AttrValueOneofCase.Delta;
          }
        }

        private object attrValue_;
        /// <summary>Enum of possible cases for the "attr_value" oneof.</summary>
        public enum AttrValueOneofCase {
          None = 0,
          Single = 1,
          Variable = 2,
          Delta = 3,
        }
        private AttrValueOneofCase attrValueCase_ = AttrValueOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttrValueOneofCase AttrValueCase {
          get { return attrValueCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAttrValue() {
          attrValueCase_ = AttrValueOneofCase.None;
          attrValue_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Single, other.Single)) return false;
          if (!object.Equals(Variable, other.Variable)) return false;
          if (!object.Equals(Delta, other.Delta)) return false;
          if (AttrValueCase != other.AttrValueCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (attrValueCase_ == AttrValueOneofCase.Single) hash ^= Single.GetHashCode();
          if (attrValueCase_ == AttrValueOneofCase.Variable) hash ^= Variable.GetHashCode();
          if (attrValueCase_ == AttrValueOneofCase.Delta) hash ^= Delta.GetHashCode();
          hash ^= (int) attrValueCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (attrValueCase_ == AttrValueOneofCase.Single) {
            output.WriteRawTag(10);
            output.WriteMessage(Single);
          }
          if (attrValueCase_ == AttrValueOneofCase.Variable) {
            output.WriteRawTag(18);
            output.WriteMessage(Variable);
          }
          if (attrValueCase_ == AttrValueOneofCase.Delta) {
            output.WriteRawTag(26);
            output.WriteMessage(Delta);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (attrValueCase_ == AttrValueOneofCase.Single) {
            output.WriteRawTag(10);
            output.WriteMessage(Single);
          }
          if (attrValueCase_ == AttrValueOneofCase.Variable) {
            output.WriteRawTag(18);
            output.WriteMessage(Variable);
          }
          if (attrValueCase_ == AttrValueOneofCase.Delta) {
            output.WriteRawTag(26);
            output.WriteMessage(Delta);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (attrValueCase_ == AttrValueOneofCase.Single) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Single);
          }
          if (attrValueCase_ == AttrValueOneofCase.Variable) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variable);
          }
          if (attrValueCase_ == AttrValueOneofCase.Delta) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delta);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeValue other) {
          if (other == null) {
            return;
          }
          switch (other.AttrValueCase) {
            case AttrValueOneofCase.Single:
              if (Single == null) {
                Single = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Single();
              }
              Single.MergeFrom(other.Single);
              break;
            case AttrValueOneofCase.Variable:
              if (Variable == null) {
                Variable = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Variable();
              }
              Variable.MergeFrom(other.Variable);
              break;
            case AttrValueOneofCase.Delta:
              if (Delta == null) {
                Delta = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Delta();
              }
              Delta.MergeFrom(other.Delta);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Single subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Single();
                if (attrValueCase_ == AttrValueOneofCase.Single) {
                  subBuilder.MergeFrom(Single);
                }
                input.ReadMessage(subBuilder);
                Single = subBuilder;
                break;
              }
              case 18: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Variable subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Variable();
                if (attrValueCase_ == AttrValueOneofCase.Variable) {
                  subBuilder.MergeFrom(Variable);
                }
                input.ReadMessage(subBuilder);
                Variable = subBuilder;
                break;
              }
              case 26: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Delta subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Delta();
                if (attrValueCase_ == AttrValueOneofCase.Delta) {
                  subBuilder.MergeFrom(Delta);
                }
                input.ReadMessage(subBuilder);
                Delta = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Single subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Single();
                if (attrValueCase_ == AttrValueOneofCase.Single) {
                  subBuilder.MergeFrom(Single);
                }
                input.ReadMessage(subBuilder);
                Single = subBuilder;
                break;
              }
              case 18: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Variable subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Variable();
                if (attrValueCase_ == AttrValueOneofCase.Variable) {
                  subBuilder.MergeFrom(Variable);
                }
                input.ReadMessage(subBuilder);
                Variable = subBuilder;
                break;
              }
              case 26: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Delta subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue_Delta();
                if (attrValueCase_ == AttrValueOneofCase.Delta) {
                  subBuilder.MergeFrom(Delta);
                }
                input.ReadMessage(subBuilder);
                Delta = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class FacetDisplayProperties : pb::IMessage<FacetDisplayProperties>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<FacetDisplayProperties> _parser = new pb::MessageParser<FacetDisplayProperties>(() => new FacetDisplayProperties());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FacetDisplayProperties> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FacetDisplayProperties() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FacetDisplayProperties(FacetDisplayProperties other) : this() {
          facetNameLocToken_ = other.facetNameLocToken_;
          facetDescLocToken_ = other.facetDescLocToken_;
          facetIconStyleName_ = other.facetIconStyleName_;
          facetColorStyleName_ = other.facetColorStyleName_;
          facetGradientStyleName_ = other.facetGradientStyleName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FacetDisplayProperties Clone() {
          return new FacetDisplayProperties(this);
        }

        /// <summary>Field number for the "facet_name_loc_token" field.</summary>
        public const int FacetNameLocTokenFieldNumber = 1;
        private readonly static string FacetNameLocTokenDefaultValue = "";

        private string facetNameLocToken_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FacetNameLocToken {
          get { return facetNameLocToken_ ?? FacetNameLocTokenDefaultValue; }
          set {
            facetNameLocToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "facet_name_loc_token" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFacetNameLocToken {
          get { return facetNameLocToken_ != null; }
        }
        /// <summary>Clears the value of the "facet_name_loc_token" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFacetNameLocToken() {
          facetNameLocToken_ = null;
        }

        /// <summary>Field number for the "facet_desc_loc_token" field.</summary>
        public const int FacetDescLocTokenFieldNumber = 2;
        private readonly static string FacetDescLocTokenDefaultValue = "";

        private string facetDescLocToken_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FacetDescLocToken {
          get { return facetDescLocToken_ ?? FacetDescLocTokenDefaultValue; }
          set {
            facetDescLocToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "facet_desc_loc_token" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFacetDescLocToken {
          get { return facetDescLocToken_ != null; }
        }
        /// <summary>Clears the value of the "facet_desc_loc_token" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFacetDescLocToken() {
          facetDescLocToken_ = null;
        }

        /// <summary>Field number for the "facet_icon_style_name" field.</summary>
        public const int FacetIconStyleNameFieldNumber = 3;
        private readonly static string FacetIconStyleNameDefaultValue = "";

        private string facetIconStyleName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FacetIconStyleName {
          get { return facetIconStyleName_ ?? FacetIconStyleNameDefaultValue; }
          set {
            facetIconStyleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "facet_icon_style_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFacetIconStyleName {
          get { return facetIconStyleName_ != null; }
        }
        /// <summary>Clears the value of the "facet_icon_style_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFacetIconStyleName() {
          facetIconStyleName_ = null;
        }

        /// <summary>Field number for the "facet_color_style_name" field.</summary>
        public const int FacetColorStyleNameFieldNumber = 4;
        private readonly static string FacetColorStyleNameDefaultValue = "";

        private string facetColorStyleName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FacetColorStyleName {
          get { return facetColorStyleName_ ?? FacetColorStyleNameDefaultValue; }
          set {
            facetColorStyleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "facet_color_style_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFacetColorStyleName {
          get { return facetColorStyleName_ != null; }
        }
        /// <summary>Clears the value of the "facet_color_style_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFacetColorStyleName() {
          facetColorStyleName_ = null;
        }

        /// <summary>Field number for the "facet_gradient_style_name" field.</summary>
        public const int FacetGradientStyleNameFieldNumber = 5;
        private readonly static string FacetGradientStyleNameDefaultValue = "";

        private string facetGradientStyleName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FacetGradientStyleName {
          get { return facetGradientStyleName_ ?? FacetGradientStyleNameDefaultValue; }
          set {
            facetGradientStyleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "facet_gradient_style_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFacetGradientStyleName {
          get { return facetGradientStyleName_ != null; }
        }
        /// <summary>Clears the value of the "facet_gradient_style_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFacetGradientStyleName() {
          facetGradientStyleName_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FacetDisplayProperties);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FacetDisplayProperties other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FacetNameLocToken != other.FacetNameLocToken) return false;
          if (FacetDescLocToken != other.FacetDescLocToken) return false;
          if (FacetIconStyleName != other.FacetIconStyleName) return false;
          if (FacetColorStyleName != other.FacetColorStyleName) return false;
          if (FacetGradientStyleName != other.FacetGradientStyleName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasFacetNameLocToken) hash ^= FacetNameLocToken.GetHashCode();
          if (HasFacetDescLocToken) hash ^= FacetDescLocToken.GetHashCode();
          if (HasFacetIconStyleName) hash ^= FacetIconStyleName.GetHashCode();
          if (HasFacetColorStyleName) hash ^= FacetColorStyleName.GetHashCode();
          if (HasFacetGradientStyleName) hash ^= FacetGradientStyleName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasFacetNameLocToken) {
            output.WriteRawTag(10);
            output.WriteString(FacetNameLocToken);
          }
          if (HasFacetDescLocToken) {
            output.WriteRawTag(18);
            output.WriteString(FacetDescLocToken);
          }
          if (HasFacetIconStyleName) {
            output.WriteRawTag(26);
            output.WriteString(FacetIconStyleName);
          }
          if (HasFacetColorStyleName) {
            output.WriteRawTag(34);
            output.WriteString(FacetColorStyleName);
          }
          if (HasFacetGradientStyleName) {
            output.WriteRawTag(42);
            output.WriteString(FacetGradientStyleName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasFacetNameLocToken) {
            output.WriteRawTag(10);
            output.WriteString(FacetNameLocToken);
          }
          if (HasFacetDescLocToken) {
            output.WriteRawTag(18);
            output.WriteString(FacetDescLocToken);
          }
          if (HasFacetIconStyleName) {
            output.WriteRawTag(26);
            output.WriteString(FacetIconStyleName);
          }
          if (HasFacetColorStyleName) {
            output.WriteRawTag(34);
            output.WriteString(FacetColorStyleName);
          }
          if (HasFacetGradientStyleName) {
            output.WriteRawTag(42);
            output.WriteString(FacetGradientStyleName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasFacetNameLocToken) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FacetNameLocToken);
          }
          if (HasFacetDescLocToken) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FacetDescLocToken);
          }
          if (HasFacetIconStyleName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FacetIconStyleName);
          }
          if (HasFacetColorStyleName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FacetColorStyleName);
          }
          if (HasFacetGradientStyleName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FacetGradientStyleName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FacetDisplayProperties other) {
          if (other == null) {
            return;
          }
          if (other.HasFacetNameLocToken) {
            FacetNameLocToken = other.FacetNameLocToken;
          }
          if (other.HasFacetDescLocToken) {
            FacetDescLocToken = other.FacetDescLocToken;
          }
          if (other.HasFacetIconStyleName) {
            FacetIconStyleName = other.FacetIconStyleName;
          }
          if (other.HasFacetColorStyleName) {
            FacetColorStyleName = other.FacetColorStyleName;
          }
          if (other.HasFacetGradientStyleName) {
            FacetGradientStyleName = other.FacetGradientStyleName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FacetNameLocToken = input.ReadString();
                break;
              }
              case 18: {
                FacetDescLocToken = input.ReadString();
                break;
              }
              case 26: {
                FacetIconStyleName = input.ReadString();
                break;
              }
              case 34: {
                FacetColorStyleName = input.ReadString();
                break;
              }
              case 42: {
                FacetGradientStyleName = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                FacetNameLocToken = input.ReadString();
                break;
              }
              case 18: {
                FacetDescLocToken = input.ReadString();
                break;
              }
              case 26: {
                FacetIconStyleName = input.ReadString();
                break;
              }
              case 34: {
                FacetColorStyleName = input.ReadString();
                break;
              }
              case 42: {
                FacetGradientStyleName = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Attribute : pb::IMessage<Attribute>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Attribute> _parser = new pb::MessageParser<Attribute>(() => new Attribute());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Attribute> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attribute() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attribute(Attribute other) : this() {
          _hasBits0 = other._hasBits0;
          nameLocToken_ = other.nameLocToken_;
          type_ = other.type_;
          value_ = other.value_ != null ? other.value_.Clone() : null;
          facet_ = other.facet_ != null ? other.facet_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attribute Clone() {
          return new Attribute(this);
        }

        /// <summary>Field number for the "name_loc_token" field.</summary>
        public const int NameLocTokenFieldNumber = 1;
        private readonly static string NameLocTokenDefaultValue = "";

        private string nameLocToken_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NameLocToken {
          get { return nameLocToken_ ?? NameLocTokenDefaultValue; }
          set {
            nameLocToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name_loc_token" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNameLocToken {
          get { return nameLocToken_ != null; }
        }
        /// <summary>Clears the value of the "name_loc_token" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNameLocToken() {
          nameLocToken_ = null;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private readonly static global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType TypeDefaultValue = global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType.KUnknown;

        private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        /// <summary>Field number for the "facet" field.</summary>
        public const int FacetFieldNumber = 4;
        private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties facet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties Facet {
          get { return facet_; }
          set {
            facet_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Attribute);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Attribute other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NameLocToken != other.NameLocToken) return false;
          if (Type != other.Type) return false;
          if (!object.Equals(Value, other.Value)) return false;
          if (!object.Equals(Facet, other.Facet)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasNameLocToken) hash ^= NameLocToken.GetHashCode();
          if (HasType) hash ^= Type.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (facet_ != null) hash ^= Facet.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasNameLocToken) {
            output.WriteRawTag(10);
            output.WriteString(NameLocToken);
          }
          if (HasType) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (value_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Value);
          }
          if (facet_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Facet);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasNameLocToken) {
            output.WriteRawTag(10);
            output.WriteString(NameLocToken);
          }
          if (HasType) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (value_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Value);
          }
          if (facet_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Facet);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasNameLocToken) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NameLocToken);
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (facet_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Facet);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Attribute other) {
          if (other == null) {
            return;
          }
          if (other.HasNameLocToken) {
            NameLocToken = other.NameLocToken;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              Value = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue();
            }
            Value.MergeFrom(other.Value);
          }
          if (other.facet_ != null) {
            if (facet_ == null) {
              Facet = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties();
            }
            Facet.MergeFrom(other.Facet);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                NameLocToken = input.ReadString();
                break;
              }
              case 16: {
                Type = (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType) input.ReadEnum();
                break;
              }
              case 26: {
                if (value_ == null) {
                  Value = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue();
                }
                input.ReadMessage(Value);
                break;
              }
              case 34: {
                if (facet_ == null) {
                  Facet = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties();
                }
                input.ReadMessage(Facet);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                NameLocToken = input.ReadString();
                break;
              }
              case 16: {
                Type = (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType) input.ReadEnum();
                break;
              }
              case 26: {
                if (value_ == null) {
                  Value = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue();
                }
                input.ReadMessage(Value);
                break;
              }
              case 34: {
                if (facet_ == null) {
                  Facet = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties();
                }
                input.ReadMessage(Facet);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AttributeGroupDesc_Basic : pb::IMessage<AttributeGroupDesc_Basic>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeGroupDesc_Basic> _parser = new pb::MessageParser<AttributeGroupDesc_Basic>(() => new AttributeGroupDesc_Basic());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeGroupDesc_Basic> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDesc_Basic() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDesc_Basic(AttributeGroupDesc_Basic other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDesc_Basic Clone() {
          return new AttributeGroupDesc_Basic(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeGroupDesc_Basic);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeGroupDesc_Basic other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeGroupDesc_Basic other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class AttributeGroupDesc_Specific : pb::IMessage<AttributeGroupDesc_Specific>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeGroupDesc_Specific> _parser = new pb::MessageParser<AttributeGroupDesc_Specific>(() => new AttributeGroupDesc_Specific());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeGroupDesc_Specific> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDesc_Specific() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDesc_Specific(AttributeGroupDesc_Specific other) : this() {
          titleLocToken_ = other.titleLocToken_;
          descLocToken_ = other.descLocToken_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDesc_Specific Clone() {
          return new AttributeGroupDesc_Specific(this);
        }

        /// <summary>Field number for the "title_loc_token" field.</summary>
        public const int TitleLocTokenFieldNumber = 1;
        private readonly static string TitleLocTokenDefaultValue = "";

        private string titleLocToken_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TitleLocToken {
          get { return titleLocToken_ ?? TitleLocTokenDefaultValue; }
          set {
            titleLocToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "title_loc_token" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTitleLocToken {
          get { return titleLocToken_ != null; }
        }
        /// <summary>Clears the value of the "title_loc_token" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTitleLocToken() {
          titleLocToken_ = null;
        }

        /// <summary>Field number for the "desc_loc_token" field.</summary>
        public const int DescLocTokenFieldNumber = 2;
        private readonly static string DescLocTokenDefaultValue = "";

        private string descLocToken_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DescLocToken {
          get { return descLocToken_ ?? DescLocTokenDefaultValue; }
          set {
            descLocToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "desc_loc_token" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDescLocToken {
          get { return descLocToken_ != null; }
        }
        /// <summary>Clears the value of the "desc_loc_token" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDescLocToken() {
          descLocToken_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeGroupDesc_Specific);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeGroupDesc_Specific other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TitleLocToken != other.TitleLocToken) return false;
          if (DescLocToken != other.DescLocToken) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTitleLocToken) hash ^= TitleLocToken.GetHashCode();
          if (HasDescLocToken) hash ^= DescLocToken.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasTitleLocToken) {
            output.WriteRawTag(10);
            output.WriteString(TitleLocToken);
          }
          if (HasDescLocToken) {
            output.WriteRawTag(18);
            output.WriteString(DescLocToken);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasTitleLocToken) {
            output.WriteRawTag(10);
            output.WriteString(TitleLocToken);
          }
          if (HasDescLocToken) {
            output.WriteRawTag(18);
            output.WriteString(DescLocToken);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTitleLocToken) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleLocToken);
          }
          if (HasDescLocToken) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DescLocToken);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeGroupDesc_Specific other) {
          if (other == null) {
            return;
          }
          if (other.HasTitleLocToken) {
            TitleLocToken = other.TitleLocToken;
          }
          if (other.HasDescLocToken) {
            DescLocToken = other.DescLocToken;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                TitleLocToken = input.ReadString();
                break;
              }
              case 18: {
                DescLocToken = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                TitleLocToken = input.ReadString();
                break;
              }
              case 18: {
                DescLocToken = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AttributeGroupDesc_Facet : pb::IMessage<AttributeGroupDesc_Facet>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeGroupDesc_Facet> _parser = new pb::MessageParser<AttributeGroupDesc_Facet>(() => new AttributeGroupDesc_Facet());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeGroupDesc_Facet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDesc_Facet() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDesc_Facet(AttributeGroupDesc_Facet other) : this() {
          facet_ = other.facet_ != null ? other.facet_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDesc_Facet Clone() {
          return new AttributeGroupDesc_Facet(this);
        }

        /// <summary>Field number for the "facet" field.</summary>
        public const int FacetFieldNumber = 1;
        private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties facet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties Facet {
          get { return facet_; }
          set {
            facet_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeGroupDesc_Facet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeGroupDesc_Facet other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Facet, other.Facet)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (facet_ != null) hash ^= Facet.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (facet_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Facet);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (facet_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Facet);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (facet_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Facet);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeGroupDesc_Facet other) {
          if (other == null) {
            return;
          }
          if (other.facet_ != null) {
            if (facet_ == null) {
              Facet = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties();
            }
            Facet.MergeFrom(other.Facet);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (facet_ == null) {
                  Facet = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties();
                }
                input.ReadMessage(Facet);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (facet_ == null) {
                  Facet = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.FacetDisplayProperties();
                }
                input.ReadMessage(Facet);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AttributeGroupDescription : pb::IMessage<AttributeGroupDescription>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeGroupDescription> _parser = new pb::MessageParser<AttributeGroupDescription>(() => new AttributeGroupDescription());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeGroupDescription> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDescription() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDescription(AttributeGroupDescription other) : this() {
          switch (other.AttrGroupDescCase) {
            case AttrGroupDescOneofCase.Basic:
              Basic = other.Basic.Clone();
              break;
            case AttrGroupDescOneofCase.Specific:
              Specific = other.Specific.Clone();
              break;
            case AttrGroupDescOneofCase.Facet:
              Facet = other.Facet.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroupDescription Clone() {
          return new AttributeGroupDescription(this);
        }

        /// <summary>Field number for the "basic" field.</summary>
        public const int BasicFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Basic Basic {
          get { return attrGroupDescCase_ == AttrGroupDescOneofCase.Basic ? (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Basic) attrGroupDesc_ : null; }
          set {
            attrGroupDesc_ = value;
            attrGroupDescCase_ = value == null ? AttrGroupDescOneofCase.None : AttrGroupDescOneofCase.Basic;
          }
        }

        /// <summary>Field number for the "specific" field.</summary>
        public const int SpecificFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Specific Specific {
          get { return attrGroupDescCase_ == AttrGroupDescOneofCase.Specific ? (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Specific) attrGroupDesc_ : null; }
          set {
            attrGroupDesc_ = value;
            attrGroupDescCase_ = value == null ? AttrGroupDescOneofCase.None : AttrGroupDescOneofCase.Specific;
          }
        }

        /// <summary>Field number for the "facet" field.</summary>
        public const int FacetFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Facet Facet {
          get { return attrGroupDescCase_ == AttrGroupDescOneofCase.Facet ? (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Facet) attrGroupDesc_ : null; }
          set {
            attrGroupDesc_ = value;
            attrGroupDescCase_ = value == null ? AttrGroupDescOneofCase.None : AttrGroupDescOneofCase.Facet;
          }
        }

        private object attrGroupDesc_;
        /// <summary>Enum of possible cases for the "attr_group_desc" oneof.</summary>
        public enum AttrGroupDescOneofCase {
          None = 0,
          Basic = 1,
          Specific = 2,
          Facet = 3,
        }
        private AttrGroupDescOneofCase attrGroupDescCase_ = AttrGroupDescOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttrGroupDescOneofCase AttrGroupDescCase {
          get { return attrGroupDescCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAttrGroupDesc() {
          attrGroupDescCase_ = AttrGroupDescOneofCase.None;
          attrGroupDesc_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeGroupDescription);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeGroupDescription other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Basic, other.Basic)) return false;
          if (!object.Equals(Specific, other.Specific)) return false;
          if (!object.Equals(Facet, other.Facet)) return false;
          if (AttrGroupDescCase != other.AttrGroupDescCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Basic) hash ^= Basic.GetHashCode();
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Specific) hash ^= Specific.GetHashCode();
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Facet) hash ^= Facet.GetHashCode();
          hash ^= (int) attrGroupDescCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Basic) {
            output.WriteRawTag(10);
            output.WriteMessage(Basic);
          }
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Specific) {
            output.WriteRawTag(18);
            output.WriteMessage(Specific);
          }
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Facet) {
            output.WriteRawTag(26);
            output.WriteMessage(Facet);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Basic) {
            output.WriteRawTag(10);
            output.WriteMessage(Basic);
          }
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Specific) {
            output.WriteRawTag(18);
            output.WriteMessage(Specific);
          }
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Facet) {
            output.WriteRawTag(26);
            output.WriteMessage(Facet);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Basic) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Basic);
          }
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Specific) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Specific);
          }
          if (attrGroupDescCase_ == AttrGroupDescOneofCase.Facet) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Facet);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeGroupDescription other) {
          if (other == null) {
            return;
          }
          switch (other.AttrGroupDescCase) {
            case AttrGroupDescOneofCase.Basic:
              if (Basic == null) {
                Basic = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Basic();
              }
              Basic.MergeFrom(other.Basic);
              break;
            case AttrGroupDescOneofCase.Specific:
              if (Specific == null) {
                Specific = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Specific();
              }
              Specific.MergeFrom(other.Specific);
              break;
            case AttrGroupDescOneofCase.Facet:
              if (Facet == null) {
                Facet = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Facet();
              }
              Facet.MergeFrom(other.Facet);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Basic subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Basic();
                if (attrGroupDescCase_ == AttrGroupDescOneofCase.Basic) {
                  subBuilder.MergeFrom(Basic);
                }
                input.ReadMessage(subBuilder);
                Basic = subBuilder;
                break;
              }
              case 18: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Specific subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Specific();
                if (attrGroupDescCase_ == AttrGroupDescOneofCase.Specific) {
                  subBuilder.MergeFrom(Specific);
                }
                input.ReadMessage(subBuilder);
                Specific = subBuilder;
                break;
              }
              case 26: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Facet subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Facet();
                if (attrGroupDescCase_ == AttrGroupDescOneofCase.Facet) {
                  subBuilder.MergeFrom(Facet);
                }
                input.ReadMessage(subBuilder);
                Facet = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Basic subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Basic();
                if (attrGroupDescCase_ == AttrGroupDescOneofCase.Basic) {
                  subBuilder.MergeFrom(Basic);
                }
                input.ReadMessage(subBuilder);
                Basic = subBuilder;
                break;
              }
              case 18: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Specific subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Specific();
                if (attrGroupDescCase_ == AttrGroupDescOneofCase.Specific) {
                  subBuilder.MergeFrom(Specific);
                }
                input.ReadMessage(subBuilder);
                Specific = subBuilder;
                break;
              }
              case 26: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Facet subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDesc_Facet();
                if (attrGroupDescCase_ == AttrGroupDescOneofCase.Facet) {
                  subBuilder.MergeFrom(Facet);
                }
                input.ReadMessage(subBuilder);
                Facet = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AttributeGroup : pb::IMessage<AttributeGroup>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeGroup> _parser = new pb::MessageParser<AttributeGroup>(() => new AttributeGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroup(AttributeGroup other) : this() {
          desc_ = other.desc_ != null ? other.desc_.Clone() : null;
          attributes_ = other.attributes_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeGroup Clone() {
          return new AttributeGroup(this);
        }

        /// <summary>Field number for the "desc" field.</summary>
        public const int DescFieldNumber = 1;
        private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDescription desc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDescription Desc {
          get { return desc_; }
          set {
            desc_ = value;
          }
        }

        /// <summary>Field number for the "attributes" field.</summary>
        public const int AttributesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.Attribute> _repeated_attributes_codec
            = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.Attribute.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.Attribute> attributes_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.Attribute>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.Attribute> Attributes {
          get { return attributes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeGroup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Desc, other.Desc)) return false;
          if(!attributes_.Equals(other.attributes_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (desc_ != null) hash ^= Desc.GetHashCode();
          hash ^= attributes_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (desc_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Desc);
          }
          attributes_.WriteTo(output, _repeated_attributes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (desc_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Desc);
          }
          attributes_.WriteTo(ref output, _repeated_attributes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (desc_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Desc);
          }
          size += attributes_.CalculateSize(_repeated_attributes_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeGroup other) {
          if (other == null) {
            return;
          }
          if (other.desc_ != null) {
            if (desc_ == null) {
              Desc = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDescription();
            }
            Desc.MergeFrom(other.Desc);
          }
          attributes_.Add(other.attributes_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (desc_ == null) {
                  Desc = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDescription();
                }
                input.ReadMessage(Desc);
                break;
              }
              case 18: {
                attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (desc_ == null) {
                  Desc = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroupDescription();
                }
                input.ReadMessage(Desc);
                break;
              }
              case 18: {
                attributes_.AddEntriesFrom(ref input, _repeated_attributes_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class ContentChunk_AttributeGroup : pb::IMessage<ContentChunk_AttributeGroup>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ContentChunk_AttributeGroup> _parser = new pb::MessageParser<ContentChunk_AttributeGroup>(() => new ContentChunk_AttributeGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ContentChunk_AttributeGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContentChunk_AttributeGroup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContentChunk_AttributeGroup(ContentChunk_AttributeGroup other) : this() {
          groups_ = other.groups_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContentChunk_AttributeGroup Clone() {
          return new ContentChunk_AttributeGroup(this);
        }

        /// <summary>Field number for the "groups" field.</summary>
        public const int GroupsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroup> _repeated_groups_codec
            = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroup.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroup> groups_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroup>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeGroup> Groups {
          get { return groups_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ContentChunk_AttributeGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ContentChunk_AttributeGroup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!groups_.Equals(other.groups_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= groups_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          groups_.WriteTo(output, _repeated_groups_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          groups_.WriteTo(ref output, _repeated_groups_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += groups_.CalculateSize(_repeated_groups_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ContentChunk_AttributeGroup other) {
          if (other == null) {
            return;
          }
          groups_.Add(other.groups_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                groups_.AddEntriesFrom(input, _repeated_groups_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                groups_.AddEntriesFrom(ref input, _repeated_groups_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class TooltipContentChunk : pb::IMessage<TooltipContentChunk>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TooltipContentChunk> _parser = new pb::MessageParser<TooltipContentChunk>(() => new TooltipContentChunk());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TooltipContentChunk> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TooltipContentChunk() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TooltipContentChunk(TooltipContentChunk other) : this() {
          switch (other.ContentChunkCase) {
            case ContentChunkOneofCase.AttributeGroup:
              AttributeGroup = other.AttributeGroup.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TooltipContentChunk Clone() {
          return new TooltipContentChunk(this);
        }

        /// <summary>Field number for the "attribute_group" field.</summary>
        public const int AttributeGroupFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.ContentChunk_AttributeGroup AttributeGroup {
          get { return contentChunkCase_ == ContentChunkOneofCase.AttributeGroup ? (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.ContentChunk_AttributeGroup) contentChunk_ : null; }
          set {
            contentChunk_ = value;
            contentChunkCase_ = value == null ? ContentChunkOneofCase.None : ContentChunkOneofCase.AttributeGroup;
          }
        }

        private object contentChunk_;
        /// <summary>Enum of possible cases for the "content_chunk" oneof.</summary>
        public enum ContentChunkOneofCase {
          None = 0,
          AttributeGroup = 1,
        }
        private ContentChunkOneofCase contentChunkCase_ = ContentChunkOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContentChunkOneofCase ContentChunkCase {
          get { return contentChunkCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContentChunk() {
          contentChunkCase_ = ContentChunkOneofCase.None;
          contentChunk_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TooltipContentChunk);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TooltipContentChunk other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(AttributeGroup, other.AttributeGroup)) return false;
          if (ContentChunkCase != other.ContentChunkCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (contentChunkCase_ == ContentChunkOneofCase.AttributeGroup) hash ^= AttributeGroup.GetHashCode();
          hash ^= (int) contentChunkCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (contentChunkCase_ == ContentChunkOneofCase.AttributeGroup) {
            output.WriteRawTag(10);
            output.WriteMessage(AttributeGroup);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (contentChunkCase_ == ContentChunkOneofCase.AttributeGroup) {
            output.WriteRawTag(10);
            output.WriteMessage(AttributeGroup);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (contentChunkCase_ == ContentChunkOneofCase.AttributeGroup) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttributeGroup);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TooltipContentChunk other) {
          if (other == null) {
            return;
          }
          switch (other.ContentChunkCase) {
            case ContentChunkOneofCase.AttributeGroup:
              if (AttributeGroup == null) {
                AttributeGroup = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.ContentChunk_AttributeGroup();
              }
              AttributeGroup.MergeFrom(other.AttributeGroup);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.ContentChunk_AttributeGroup subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.ContentChunk_AttributeGroup();
                if (contentChunkCase_ == ContentChunkOneofCase.AttributeGroup) {
                  subBuilder.MergeFrom(AttributeGroup);
                }
                input.ReadMessage(subBuilder);
                AttributeGroup = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.ContentChunk_AttributeGroup subBuilder = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.ContentChunk_AttributeGroup();
                if (contentChunkCase_ == ContentChunkOneofCase.AttributeGroup) {
                  subBuilder.MergeFrom(AttributeGroup);
                }
                input.ReadMessage(subBuilder);
                AttributeGroup = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class SummaryDescriptionEmbedValue : pb::IMessage<SummaryDescriptionEmbedValue>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SummaryDescriptionEmbedValue> _parser = new pb::MessageParser<SummaryDescriptionEmbedValue>(() => new SummaryDescriptionEmbedValue());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SummaryDescriptionEmbedValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SummaryDescriptionEmbedValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SummaryDescriptionEmbedValue(SummaryDescriptionEmbedValue other) : this() {
          _hasBits0 = other._hasBits0;
          name_ = other.name_;
          type_ = other.type_;
          value_ = other.value_ != null ? other.value_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SummaryDescriptionEmbedValue Clone() {
          return new SummaryDescriptionEmbedValue(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private readonly static global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType TypeDefaultValue = global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType.KUnknown;

        private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SummaryDescriptionEmbedValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SummaryDescriptionEmbedValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Type != other.Type) return false;
          if (!object.Equals(Value, other.Value)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasName) hash ^= Name.GetHashCode();
          if (HasType) hash ^= Type.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasType) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (value_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasType) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (value_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SummaryDescriptionEmbedValue other) {
          if (other == null) {
            return;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              Value = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue();
            }
            Value.MergeFrom(other.Value);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                Type = (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType) input.ReadEnum();
                break;
              }
              case 26: {
                if (value_ == null) {
                  Value = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue();
                }
                input.ReadMessage(Value);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                Type = (global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.EAttributeType) input.ReadEnum();
                break;
              }
              case 26: {
                if (value_ == null) {
                  Value = new global::Steam.Protos.Dota2.CDotaMsgStructuredTooltipProperties.Types.AttributeValue();
                }
                input.ReadMessage(Value);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
