// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_gcmessages_common_lobby.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Steam.Protos.Dota2 {

  /// <summary>Holder for reflection information generated from dota_gcmessages_common_lobby.proto</summary>
  public static partial class DotaGcmessagesCommonLobbyReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_gcmessages_common_lobby.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaGcmessagesCommonLobbyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJkb3RhX2djbWVzc2FnZXNfY29tbW9uX2xvYmJ5LnByb3RvGhNzdGVhbW1l",
            "c3NhZ2VzLnByb3RvGhdkb3RhX3NoYXJlZF9lbnVtcy5wcm90bxoWZ2NzZGtf",
            "Z2NtZXNzYWdlcy5wcm90byKvAQobQ01zZ0xvYmJ5Q29hY2hGcmllbmRSZXF1",
            "ZXN0EhgKEGNvYWNoX2FjY291bnRfaWQYASABKA0SGQoRcGxheWVyX2FjY291",
            "bnRfaWQYAiABKA0SWwoNcmVxdWVzdF9zdGF0ZRgDIAEoDjIeLkVMb2JieU1l",
            "bWJlckNvYWNoUmVxdWVzdFN0YXRlOiRrX2VMb2JieU1lbWJlckNvYWNoUmVx",
            "dWVzdFN0YXRlX05vbmUinwEKI0NNc2dMb2JieVBsYXllclBsdXNTdWJzY3Jp",
            "cHRpb25EYXRhEkMKC2hlcm9fYmFkZ2VzGAEgAygLMi4uQ01zZ0xvYmJ5UGxh",
            "eWVyUGx1c1N1YnNjcmlwdGlvbkRhdGEuSGVyb0JhZGdlGjMKCUhlcm9CYWRn",
            "ZRIPCgdoZXJvX2lkGAEgASgFEhUKDWhlcm9fYmFkZ2VfeHAYAiABKA0iPgoT",
            "Q01zZ0V2ZW50QWN0aW9uRGF0YRIRCglhY3Rpb25faWQYASABKA0SFAoMYWN0",
            "aW9uX3Njb3JlGAIgASgNIlgKGENNc2dQZXJpb2RpY1Jlc291cmNlRGF0YRIc",
            "ChRwZXJpb2RpY19yZXNvdXJjZV9pZBgBIAEoDRIRCglyZW1haW5pbmcYAiAB",
            "KA0SCwoDbWF4GAMgASgNIrwEChRDTXNnTG9iYnlFdmVudFBvaW50cxIQCghl",
            "dmVudF9pZBgBIAEoDRI7Cg5hY2NvdW50X3BvaW50cxgCIAMoCzIjLkNNc2dM",
            "b2JieUV2ZW50UG9pbnRzLkFjY291bnRQb2ludHMa1AMKDUFjY291bnRQb2lu",
            "dHMSEgoKYWNjb3VudF9pZBgBIAEoDRIVCg1ub3JtYWxfcG9pbnRzGAIgASgN",
            "EhYKDnByZW1pdW1fcG9pbnRzGAMgASgNEg0KBW93bmVkGAQgASgIEhMKC2V2",
            "ZW50X2xldmVsGAcgASgNEhsKE2FjdGl2ZV9lZmZlY3RzX21hc2sYDCABKAQS",
            "FAoMd2FnZXJfc3RyZWFrGBcgASgNEjcKGWV2ZW50X2dhbWVfY3VzdG9tX2Fj",
            "dGlvbnMYGSADKAsyFC5DTXNnRXZlbnRBY3Rpb25EYXRhEhgKEHRpcF9hbW91",
            "bnRfaW5kZXgYGiABKA0SHgoWYWN0aXZlX2V2ZW50X3NlYXNvbl9pZBgbIAEo",
            "DRIZChF0ZWxlcG9ydF9meF9sZXZlbBgcIAEoDRI1ChduZXR3b3JrZWRfZXZl",
            "bnRfYWN0aW9ucxgeIAMoCzIULkNNc2dFdmVudEFjdGlvbkRhdGESNQoScGVy",
            "aW9kaWNfcmVzb3VyY2VzGB8gAygLMhkuQ01zZ1BlcmlvZGljUmVzb3VyY2VE",
            "YXRhEi0KFGV4dHJhX2V2ZW50X21lc3NhZ2VzGCAgAygLMg8uQ0V4dHJhTXNn",
            "QmxvY2siTAoWQ01zZ0xvYmJ5RXZlbnRHYW1lRGF0YRIRCglnYW1lX3NlZWQY",
            "ASABKA0SHwoXZXZlbnRfd2luZG93X3N0YXJ0X3RpbWUYAiABKA0imQIKEkNT",
            "T0RPVEFMb2JieUludml0ZRIWCghncm91cF9pZBgBIAEoBEIEgKYdARIRCglz",
            "ZW5kZXJfaWQYAiABKAYSEwoLc2VuZGVyX25hbWUYAyABKAkSMAoHbWVtYmVy",
            "cxgEIAMoCzIfLkNTT0RPVEFMb2JieUludml0ZS5Mb2JieU1lbWJlchIWCg5j",
            "dXN0b21fZ2FtZV9pZBgFIAEoBBISCgppbnZpdGVfZ2lkGAYgASgGEhcKD2N1",
            "c3RvbV9nYW1lX2NyYxgHIAEoBhIdChVjdXN0b21fZ2FtZV90aW1lc3RhbXAY",
            "CCABKAcaLQoLTG9iYnlNZW1iZXISDAoEbmFtZRgBIAEoCRIQCghzdGVhbV9p",
            "ZBgCIAEoBiK0BAoSQ1NPRE9UQUxvYmJ5TWVtYmVyEhAKAmlkGAEgASgGQgSA",
            "ph0BEg8KB2hlcm9faWQYAiABKAUSMwoEdGVhbRgDIAEoDjINLkRPVEFfR0Nf",
            "VEVBTToWRE9UQV9HQ19URUFNX0dPT0RfR1VZUxIMCgRzbG90GAcgASgNEjwK",
            "DWxlYXZlcl9zdGF0dXMYECABKA4yEy5ET1RBTGVhdmVyU3RhdHVzX3Q6EERP",
            "VEFfTEVBVkVSX05PTkUSFgoObGVhdmVyX2FjdGlvbnMYHCABKA0SNgoKY29h",
            "Y2hfdGVhbRgXIAEoDjINLkRPVEFfR0NfVEVBTToTRE9UQV9HQ19URUFNX05P",
            "VEVBTRIfChdjdXN0b21fZ2FtZV9wcm9kdWN0X2lkcxgfIAMoDRI/ChNsaXZl",
            "X3NwZWN0YXRvcl90ZWFtGCggASgOMg0uRE9UQV9HQ19URUFNOhNET1RBX0dD",
            "X1RFQU1fTk9URUFNEi4KDnBlbmRpbmdfYXdhcmRzGCwgAygLMhYuQ01zZ1Bl",
            "bmRpbmdFdmVudEF3YXJkEjkKGXBlbmRpbmdfYXdhcmRzX29uX3ZpY3RvcnkY",
            "LSADKAsyFi5DTXNnUGVuZGluZ0V2ZW50QXdhcmQSGQoRcmVwb3J0c19hdmFp",
            "bGFibGUYNCABKA0SIQoZbGl2ZV9zcGVjdGF0b3JfYWNjb3VudF9pZBg3IAEo",
            "DRIfChdjb21tc19yZXBvcnRzX2F2YWlsYWJsZRg4IAEoDSIaChhDU09ET1RB",
            "U2VydmVyTG9iYnlNZW1iZXIiYQoYQ1NPRE9UQVN0YXRpY0xvYmJ5TWVtYmVy",
            "EgwKBG5hbWUYASABKAkSEAoIcGFydHlfaWQYAiABKAQSEgoHY2hhbm5lbBgD",
            "IAEoDToBNhIRCgljYW1lcmFtYW4YBCABKAgilgQKHkNTT0RPVEFTZXJ2ZXJT",
            "dGF0aWNMb2JieU1lbWJlchIQCghzdGVhbV9pZBgBIAEoBhIRCglyYW5rX3Rp",
            "ZXIYAyABKAUSHAoQbGVhZGVyYm9hcmRfcmFuaxgEIAEoBToCLTESHAoUbGFu",
            "ZV9zZWxlY3Rpb25fZmxhZ3MYBSABKAUSSQoTcmFua19tbXJfYm9vc3RfdHlw",
            "ZRgGIAEoDjISLkVET1RBTU1SQm9vc3RUeXBlOhhrX0VET1RBTU1SQm9vc3RU",
            "eXBlX05vbmUSFAoMY29hY2hfcmF0aW5nGAcgASgFEhsKE2NvYWNoZWRfYWNj",
            "b3VudF9pZHMYCCADKA0SGQoRd2FzX212cF9sYXN0X2dhbWUYCSABKAgSGAoQ",
            "Y2FuX2Vhcm5fcmV3YXJkcxgKIAEoCBIaChJpc19wbHVzX3N1YnNjcmliZXIY",
            "CyABKAgSHAoUZmF2b3JpdGVfdGVhbV9wYWNrZWQYDCABKAQSFgoOaXNfc3Rl",
            "YW1fY2hpbmEYDSABKAgSDQoFdGl0bGUYDiABKA0SEAoIZ3VpbGRfaWQYDyAB",
            "KA0SIQoZZGlzYWJsZWRfcmFuZG9tX2hlcm9fYml0cxgQIAMoBxIYChBkaXNh",
            "YmxlZF9oZXJvX2lkGBEgAygFEhcKD2VuYWJsZWRfaGVyb19pZBgSIAMoBRIX",
            "Cg9iYW5uZWRfaGVyb19pZHMYEyADKAUi0wIKEUNMb2JieVRlYW1EZXRhaWxz",
            "EhEKCXRlYW1fbmFtZRgBIAEoCRIQCgh0ZWFtX3RhZxgDIAEoCRIPCgd0ZWFt",
            "X2lkGAQgASgNEhEKCXRlYW1fbG9nbxgFIAEoBBIWCg50ZWFtX2Jhc2VfbG9n",
            "bxgGIAEoBBIYChB0ZWFtX2Jhbm5lcl9sb2dvGAcgASgEEhUKDXRlYW1fY29t",
            "cGxldGUYCCABKAgSDAoEcmFuaxgPIAEoDRITCgtyYW5rX2NoYW5nZRgQIAEo",
            "ERIUCgxpc19ob21lX3RlYW0YESABKAgSGgoSaXNfY2hhbGxlbmdlX21hdGNo",
            "GBIgASgIEiUKHWNoYWxsZW5nZV9tYXRjaF90b2tlbl9hY2NvdW50GBMgASgE",
            "EhUKDXRlYW1fbG9nb191cmwYFCABKAkSGQoRdGVhbV9hYmJyZXZpYXRpb24Y",
            "FSABKAkiwAIKEkNMb2JieUd1aWxkRGV0YWlscxIQCghndWlsZF9pZBgBIAEo",
            "DRIbChNndWlsZF9wcmltYXJ5X2NvbG9yGAIgASgNEh0KFWd1aWxkX3NlY29u",
            "ZGFyeV9jb2xvchgDIAEoDRIVCg1ndWlsZF9wYXR0ZXJuGAQgASgNEhIKCmd1",
            "aWxkX2xvZ28YBSABKAQSFAoMZ3VpbGRfcG9pbnRzGAYgASgNEhMKC2d1aWxk",
            "X2V2ZW50GAcgASgNEhMKC2d1aWxkX2ZsYWdzGAggASgNEj0KDnRlYW1fZm9y",
            "X2d1aWxkGAkgASgOMg0uRE9UQV9HQ19URUFNOhZET1RBX0dDX1RFQU1fR09P",
            "RF9HVVlTEhEKCWd1aWxkX3RhZxgKIAEoCRIfChdndWlsZF93ZWVrbHlfcGVy",
            "Y2VudGlsZRgLIAEoDSKGAQoYQ0xvYmJ5VGltZWRSZXdhcmREZXRhaWxzEhYK",
            "Dml0ZW1fZGVmX2luZGV4GAIgASgNEhcKD2lzX3N1cHBseV9jcmF0ZRgDIAEo",
            "CBIVCg1pc190aW1lZF9kcm9wGAQgASgIEhIKCmFjY291bnRfaWQYBSABKA0S",
            "DgoGb3JpZ2luGAYgASgNInIKGkNMb2JieUJyb2FkY2FzdENoYW5uZWxJbmZv",
            "EhIKCmNoYW5uZWxfaWQYASABKA0SFAoMY291bnRyeV9jb2RlGAIgASgJEhMK",
            "C2Rlc2NyaXB0aW9uGAMgASgJEhUKDWxhbmd1YWdlX2NvZGUYBCABKAkijwIK",
            "FENMb2JieUd1aWxkQ2hhbGxlbmdlEhAKCGd1aWxkX2lkGAEgASgNEigKCGV2",
            "ZW50X2lkGAIgASgOMgcuRUV2ZW50Og1FVkVOVF9JRF9OT05FEh0KFWNoYWxs",
            "ZW5nZV9pbnN0YW5jZV9pZBgDIAEoDRIbChNjaGFsbGVuZ2VfcGFyYW1ldGVy",
            "GAQgASgNEhsKE2NoYWxsZW5nZV90aW1lc3RhbXAYBSABKA0SHwoXY2hhbGxl",
            "bmdlX3BlcmlvZF9zZXJpYWwYBiABKA0SIwobY2hhbGxlbmdlX3Byb2dyZXNz",
            "X2F0X3N0YXJ0GAcgASgNEhwKFGVsaWdpYmxlX2FjY291bnRfaWRzGAggAygN",
            "In4KGkNET1RBTG9iYnlNYXRjaFF1YWxpdHlEYXRhEhcKD292ZXJhbGxfcXVh",
            "bGl0eRgBIAEoDRIUCgx0ZWFtX2JhbGFuY2UYAiABKA0SGQoRbWF0Y2hfc2tp",
            "bGxfcmFuZ2UYAyABKA0SFgoObWF0Y2hfYmVoYXZpb3IYBCABKA0i/BwKDENT",
            "T0RPVEFMb2JieRIWCghsb2JieV9pZBgBIAEoBEIEgKYdARIoCgthbGxfbWVt",
            "YmVycxh4IAMoCzITLkNTT0RPVEFMb2JieU1lbWJlchIWCg5tZW1iZXJfaW5k",
            "aWNlcxh5IAMoDRIbChNsZWZ0X21lbWJlcl9pbmRpY2VzGHogAygNEhsKE2Zy",
            "ZWVfbWVtYmVyX2luZGljZXMYeyADKA0SEQoJbGVhZGVyX2lkGAsgASgGEhQK",
            "CXNlcnZlcl9pZBgGIAEoBjoBMBIRCglnYW1lX21vZGUYAyABKA0SFwoPcGVu",
            "ZGluZ19pbnZpdGVzGAogAygGEiYKBXN0YXRlGAQgASgOMhMuQ1NPRE9UQUxv",
            "YmJ5LlN0YXRlOgJVSRIPCgdjb25uZWN0GAUgASgJEjQKCmxvYmJ5X3R5cGUY",
            "DCABKA4yFy5DU09ET1RBTG9iYnkuTG9iYnlUeXBlOgdJTlZBTElEEhQKDGFs",
            "bG93X2NoZWF0cxgNIAEoCBIWCg5maWxsX3dpdGhfYm90cxgOIAEoCBIRCgln",
            "YW1lX25hbWUYECABKAkSKAoMdGVhbV9kZXRhaWxzGBEgAygLMhIuQ0xvYmJ5",
            "VGVhbURldGFpbHMSFQoNdG91cm5hbWVudF9pZBgTIAEoDRIaChJ0b3VybmFt",
            "ZW50X2dhbWVfaWQYFCABKA0SGAoNc2VydmVyX3JlZ2lvbhgVIAEoDToBMBI+",
            "CgpnYW1lX3N0YXRlGBYgASgOMg8uRE9UQV9HYW1lU3RhdGU6GURPVEFfR0FN",
            "RVJVTEVTX1NUQVRFX0lOSVQSFgoObnVtX3NwZWN0YXRvcnMYFyABKA0SEgoK",
            "bWF0Y2hncm91cBgZIAEoDRIuCgdjbV9waWNrGBwgASgOMg0uRE9UQV9DTV9Q",
            "SUNLOg5ET1RBX0NNX1JBTkRPTRIQCghtYXRjaF9pZBgeIAEoBBIeChBhbGxv",
            "d19zcGVjdGF0aW5nGB8gASgIOgR0cnVlEkcKFmJvdF9kaWZmaWN1bHR5X3Jh",
            "ZGlhbnQYJCABKA4yEi5ET1RBQm90RGlmZmljdWx0eToTQk9UX0RJRkZJQ1VM",
            "VFlfSEFSRBIQCghwYXNzX2tleRgnIAEoCRIQCghsZWFndWVpZBgqIAEoDRIg",
            "ChVwZW5hbHR5X2xldmVsX3JhZGlhbnQYKyABKA06ATASHQoScGVuYWx0eV9s",
            "ZXZlbF9kaXJlGCwgASgNOgEwEhMKC3Nlcmllc190eXBlGC4gASgNEhsKE3Jh",
            "ZGlhbnRfc2VyaWVzX3dpbnMYLyABKA0SGAoQZGlyZV9zZXJpZXNfd2lucxgw",
            "IAEoDRIWCgdhbGxjaGF0GDMgASgIOgVmYWxzZRI4Cg1kb3RhX3R2X2RlbGF5",
            "GDUgASgOMhEuTG9iYnlEb3RhVFZEZWxheToOTG9iYnlEb3RhVFZfMTASGAoQ",
            "Y3VzdG9tX2dhbWVfbW9kZRg2IAEoCRIXCg9jdXN0b21fbWFwX25hbWUYNyAB",
            "KAkSGQoRY3VzdG9tX2RpZmZpY3VsdHkYOCABKA0SCwoDbGFuGDkgASgIEjsK",
            "FmJyb2FkY2FzdF9jaGFubmVsX2luZm8YOiADKAsyGy5DTG9iYnlCcm9hZGNh",
            "c3RDaGFubmVsSW5mbxIeChZmaXJzdF9sZWF2ZXJfYWNjb3VudGlkGDsgASgN",
            "EhEKCXNlcmllc19pZBg8IAEoDRIUCgxsb3dfcHJpb3JpdHkYPSABKAgSLwoO",
            "ZXh0cmFfbWVzc2FnZXMYPiADKAsyFy5DU09ET1RBTG9iYnkuQ0V4dHJhTXNn",
            "EhwKFGZpcnN0X2Jsb29kX2hhcHBlbmVkGEEgASgIEj4KDW1hdGNoX291dGNv",
            "bWUYRiABKA4yDi5FTWF0Y2hPdXRjb21lOhdrX0VNYXRjaE91dGNvbWVfVW5r",
            "bm93bhIXCg9tYXNzX2Rpc2Nvbm5lY3QYQyABKAgSFgoOY3VzdG9tX2dhbWVf",
            "aWQYRCABKAQSGgoSY3VzdG9tX21pbl9wbGF5ZXJzGEcgASgNEhoKEmN1c3Rv",
            "bV9tYXhfcGxheWVycxhIIAEoDRJECgp2aXNpYmlsaXR5GEsgASgOMhQuRE9U",
            "QUxvYmJ5VmlzaWJpbGl0eToaRE9UQUxvYmJ5VmlzaWJpbGl0eV9QdWJsaWMS",
            "FwoPY3VzdG9tX2dhbWVfY3JjGEwgASgGEiYKHmN1c3RvbV9nYW1lX2F1dG9f",
            "Y3JlYXRlZF9sb2JieRhNIAEoCBIdChVjdXN0b21fZ2FtZV90aW1lc3RhbXAY",
            "UCABKAcSHwoXcHJldmlvdXNfc2VyaWVzX21hdGNoZXMYUSADKAQSHwoXcHJl",
            "dmlvdXNfbWF0Y2hfb3ZlcnJpZGUYUiABKAQSFwoPZ2FtZV9zdGFydF90aW1l",
            "GFcgASgNEk4KDXBhdXNlX3NldHRpbmcYWCABKA4yFi5Mb2JieURvdGFQYXVz",
            "ZVNldHRpbmc6H0xvYmJ5RG90YVBhdXNlU2V0dGluZ19VbmxpbWl0ZWQSIwob",
            "d2Vla2VuZF90b3VybmV5X2RpdmlzaW9uX2lkGFogASgNEiMKG3dlZWtlbmRf",
            "dG91cm5leV9za2lsbF9sZXZlbBhbIAEoDRIlCh13ZWVrZW5kX3RvdXJuZXlf",
            "YnJhY2tldF9yb3VuZBhcIAEoDRJEChNib3RfZGlmZmljdWx0eV9kaXJlGF0g",
            "ASgOMhIuRE9UQUJvdERpZmZpY3VsdHk6E0JPVF9ESUZGSUNVTFRZX0hBUkQS",
            "EwoLYm90X3JhZGlhbnQYXiABKAQSEAoIYm90X2RpcmUYXyABKAQSKgoZZXZl",
            "bnRfcHJvZ3Jlc3Npb25fZW5hYmxlZBhgIAMoDjIHLkVFdmVudBJiChhzZWxl",
            "Y3Rpb25fcHJpb3JpdHlfcnVsZXMYYSABKA4yGy5ET1RBU2VsZWN0aW9uUHJp",
            "b3JpdHlSdWxlczoja19ET1RBU2VsZWN0aW9uUHJpb3JpdHlSdWxlc19NYW51",
            "YWwSMgoqc2VyaWVzX3ByZXZpb3VzX3NlbGVjdGlvbl9wcmlvcml0eV90ZWFt",
            "X2lkGGIgASgNEjEKKXNlcmllc19jdXJyZW50X3NlbGVjdGlvbl9wcmlvcml0",
            "eV90ZWFtX2lkGGMgASgNEnAKI3Nlcmllc19jdXJyZW50X3ByaW9yaXR5X3Rl",
            "YW1fY2hvaWNlGGQgASgOMhwuRE9UQVNlbGVjdGlvblByaW9yaXR5Q2hvaWNl",
            "OiVrX0RPVEFTZWxlY3Rpb25Qcmlvcml0eUNob2ljZV9JbnZhbGlkEnQKJ3Nl",
            "cmllc19jdXJyZW50X25vbl9wcmlvcml0eV90ZWFtX2Nob2ljZRhlIAEoDjIc",
            "LkRPVEFTZWxlY3Rpb25Qcmlvcml0eUNob2ljZTola19ET1RBU2VsZWN0aW9u",
            "UHJpb3JpdHlDaG9pY2VfSW52YWxpZBI4CjBzZXJpZXNfY3VycmVudF9zZWxl",
            "Y3Rpb25fcHJpb3JpdHlfdXNlZF9jb2luX3Rvc3MYZiABKAgSNQoVY3VycmVu",
            "dF9wcmltYXJ5X2V2ZW50GGcgASgOMgcuRUV2ZW50Og1FVkVOVF9JRF9OT05F",
            "EiMKG2VtZXJnZW5jeV9kaXNhYmxlZF9oZXJvX2lkcxhpIAMoBRIfChdjdXN0",
            "b21fZ2FtZV9wcml2YXRlX2tleRhqIAEoBhIdChVjdXN0b21fZ2FtZV9wZW5h",
            "bHRpZXMYayABKAgSHgoWbGFuX2hvc3RfcGluZ19sb2NhdGlvbhhtIAEoCRIW",
            "Cg5sZWFndWVfbm9kZV9pZBhuIAEoDRIWCg5tYXRjaF9kdXJhdGlvbhhvIAEo",
            "DRIUCgxsZWFndWVfcGhhc2UYcSABKA0SJQodZXhwZXJpbWVudGFsX2dhbWVw",
            "bGF5X2VuYWJsZWQYdCABKAgSLwoQZ3VpbGRfY2hhbGxlbmdlcxh1IAMoCzIV",
            "LkNMb2JieUd1aWxkQ2hhbGxlbmdlEioKDWd1aWxkX2RldGFpbHMYdiADKAsy",
            "Ey5DTG9iYnlHdWlsZERldGFpbHMSGgoScmVxdWVzdGVkX2hlcm9faWRzGHwg",
            "AygFEjsKFWNvYWNoX2ZyaWVuZF9yZXF1ZXN0cxh9IAMoCzIcLkNNc2dMb2Ji",
            "eUNvYWNoRnJpZW5kUmVxdWVzdBIZChFpc19pbl9zdGVhbV9jaGluYRh+IAEo",
            "CBIaChJ3aXRoX3NjZW5hcmlvX3NhdmUYfyABKAgSHAoTbG9iYnlfY3JlYXRp",
            "b25fdGltZRiAASABKA0SHgoVZXZlbnRfZ2FtZV9kZWZpbml0aW9uGIEBIAEo",
            "CRI4ChJtYXRjaF9xdWFsaXR5X2RhdGEYgwEgASgLMhsuQ0RPVEFMb2JieU1h",
            "dGNoUXVhbGl0eURhdGESHQoUcmVxdWVzdGVkX2hlcm9fdGVhbXMYhAEgAygF",
            "GikKCUNFeHRyYU1zZxIKCgJpZBgBIAEoDRIQCghjb250ZW50cxgCIAEoDCJk",
            "CgVTdGF0ZRIGCgJVSRAAEgsKB1JFQURZVVAQBBIPCgtTRVJWRVJTRVRVUBAB",
            "EgcKA1JVThACEgwKCFBPU1RHQU1FEAMSDAoITk9UUkVBRFkQBRIQCgxTRVJW",
            "RVJBU1NJR04QBiLiAQoJTG9iYnlUeXBlEhQKB0lOVkFMSUQQ////////////",
            "ARIQCgxDQVNVQUxfTUFUQ0gQABIMCghQUkFDVElDRRABEhIKDkNPT1BfQk9U",
            "X01BVENIEAQSFQoRQ09NUEVUSVRJVkVfTUFUQ0gQBxITCg9XRUVLRU5EX1RP",
            "VVJORVkQCRITCg9MT0NBTF9CT1RfTUFUQ0gQChINCglTUEVDVEFUT1IQCxIP",
            "CgtFVkVOVF9NQVRDSBAMEhMKD05FV19QTEFZRVJfUE9PTBAOEhUKEUZFQVRV",
            "UkVEX0dBTUVNT0RFEA8ilwEKEkNTT0RPVEFTZXJ2ZXJMb2JieRIuCgthbGxf",
            "bWVtYmVycxgBIAMoCzIZLkNTT0RPVEFTZXJ2ZXJMb2JieU1lbWJlchI3ChZl",
            "eHRyYV9zdGFydHVwX21lc3NhZ2VzGAIgAygLMhcuQ1NPRE9UQUxvYmJ5LkNF",
            "eHRyYU1zZxIYChBicm9hZGNhc3RfYWN0aXZlGAMgASgIIn4KEkNTT0RPVEFT",
            "dGF0aWNMb2JieRIuCgthbGxfbWVtYmVycxgBIAMoCzIZLkNTT0RPVEFTdGF0",
            "aWNMb2JieU1lbWJlchIXCg9pc19wbGF5ZXJfZHJhZnQYAiABKAgSHwoXaXNf",
            "bGFzdF9tYXRjaF9pbl9zZXJpZXMYAyABKAgiwwEKGENTT0RPVEFTZXJ2ZXJT",
            "dGF0aWNMb2JieRI0CgthbGxfbWVtYmVycxgBIAMoCzIfLkNTT0RPVEFTZXJ2",
            "ZXJTdGF0aWNMb2JieU1lbWJlchInCh9wb3N0X3BhdGNoX3N0cmF0ZWd5X3Rp",
            "bWVfYnVmZmVyGAIgASgCEjEKEmxvYmJ5X2V2ZW50X3BvaW50cxgDIAMoCzIV",
            "LkNNc2dMb2JieUV2ZW50UG9pbnRzEhUKDWJyb2FkY2FzdF91cmwYBCABKAki",
            "jgQKJUNNc2dBZGRpdGlvbmFsTG9iYnlTdGFydHVwQWNjb3VudERhdGESEgoK",
            "YWNjb3VudF9pZBgBIAEoDRI3CglwbHVzX2RhdGEYAiABKAsyJC5DTXNnTG9i",
            "YnlQbGF5ZXJQbHVzU3Vic2NyaXB0aW9uRGF0YRJoCiJ1bmxvY2tlZF9jaGF0",
            "X3doZWVsX21lc3NhZ2VfcmFuZ2VzGAMgAygLMjwuQ01zZ0FkZGl0aW9uYWxM",
            "b2JieVN0YXJ0dXBBY2NvdW50RGF0YS5DaGF0V2hlZWxNZXNzYWdlUmFuZ2US",
            "aAoidW5sb2NrZWRfcGluZ193aGVlbF9tZXNzYWdlX3JhbmdlcxgEIAMoCzI8",
            "LkNNc2dBZGRpdGlvbmFsTG9iYnlTdGFydHVwQWNjb3VudERhdGEuUGluZ1do",
            "ZWVsTWVzc2FnZVJhbmdlGmEKFUNoYXRXaGVlbE1lc3NhZ2VSYW5nZRIkChBt",
            "ZXNzYWdlX2lkX3N0YXJ0GAEgASgNOgo0Mjk0OTY3Mjk1EiIKDm1lc3NhZ2Vf",
            "aWRfZW5kGAIgASgNOgo0Mjk0OTY3Mjk1GmEKFVBpbmdXaGVlbE1lc3NhZ2VS",
            "YW5nZRIkChBtZXNzYWdlX2lkX3N0YXJ0GAEgASgNOgo0Mjk0OTY3Mjk1EiIK",
            "Dm1lc3NhZ2VfaWRfZW5kGAIgASgNOgo0Mjk0OTY3Mjk1IiEKH0NNc2dMb2Ji",
            "eUluaXRpYWxpemF0aW9uQ29tcGxldGUiKAoYQ01zZ0xvYmJ5UGxheXRlc3RE",
            "ZXRhaWxzEgwKBGpzb24YASABKAkiiQIKGENNc2dMb2NhbFNlcnZlckd1aWxk",
            "RGF0YRIQCghndWlsZF9pZBgBIAEoDRIoCghldmVudF9pZBgCIAEoDjIHLkVF",
            "dmVudDoNRVZFTlRfSURfTk9ORRIUCgxndWlsZF9wb2ludHMYAyABKA0SEgoK",
            "Z3VpbGRfbG9nbxgEIAEoBBIbChNndWlsZF9wcmltYXJ5X2NvbG9yGAUgASgN",
            "Eh0KFWd1aWxkX3NlY29uZGFyeV9jb2xvchgGIAEoDRIVCg1ndWlsZF9wYXR0",
            "ZXJuGAcgASgNEhMKC2d1aWxkX2ZsYWdzGAggASgNEh8KF2d1aWxkX3dlZWts",
            "eV9wZXJjZW50aWxlGAkgASgNItYCChxDTXNnTG9jYWxTZXJ2ZXJGYWtlTG9i",
            "YnlEYXRhEhIKCmFjY291bnRfaWQYASABKA0SKwoMZXZlbnRfcG9pbnRzGAIg",
            "AygLMhUuQ01zZ0xvYmJ5RXZlbnRQb2ludHMSGgoSaXNfcGx1c19zdWJzY3Jp",
            "YmVyGAMgASgIEhgKEHByaW1hcnlfZXZlbnRfaWQYBCABKA0SFQoNZmF2b3Jp",
            "dGVfdGVhbRgFIAEoDRIdChVmYXZvcml0ZV90ZWFtX3F1YWxpdHkYBiABKA0S",
            "LQoKZ3VpbGRfaW5mbxgHIAEoCzIZLkNNc2dMb2NhbFNlcnZlckd1aWxkRGF0",
            "YRIZChF0ZWxlcG9ydF9meF9sZXZlbBgIIAEoDRI/Cg9hZGRpdGlvbmFsX2Rh",
            "dGEYCSABKAsyJi5DTXNnQWRkaXRpb25hbExvYmJ5U3RhcnR1cEFjY291bnRE",
            "YXRhKqUBCh1FTG9iYnlNZW1iZXJDb2FjaFJlcXVlc3RTdGF0ZRIoCiRrX2VM",
            "b2JieU1lbWJlckNvYWNoUmVxdWVzdFN0YXRlX05vbmUQABIsCihrX2VMb2Ji",
            "eU1lbWJlckNvYWNoUmVxdWVzdFN0YXRlX0FjY2VwdGVkEAESLAooa19lTG9i",
            "YnlNZW1iZXJDb2FjaFJlcXVlc3RTdGF0ZV9SZWplY3RlZBACKmUKEExvYmJ5",
            "RG90YVRWRGVsYXkSEgoOTG9iYnlEb3RhVFZfMTAQABITCg9Mb2JieURvdGFU",
            "Vl8xMjAQARITCg9Mb2JieURvdGFUVl8zMDAQAhITCg9Mb2JieURvdGFUVl85",
            "MDAQAyqDAQoVTG9iYnlEb3RhUGF1c2VTZXR0aW5nEiMKH0xvYmJ5RG90YVBh",
            "dXNlU2V0dGluZ19VbmxpbWl0ZWQQABIhCh1Mb2JieURvdGFQYXVzZVNldHRp",
            "bmdfTGltaXRlZBABEiIKHkxvYmJ5RG90YVBhdXNlU2V0dGluZ19EaXNhYmxl",
            "ZBACQhWqAhJTdGVhbS5Qcm90b3MuRG90YTI="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Steam.Protos.Dota2.SteammessagesReflection.Descriptor, global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor, global::Steam.Protos.Dota2.GcsdkGcmessagesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Steam.Protos.Dota2.ELobbyMemberCoachRequestState), typeof(global::Steam.Protos.Dota2.LobbyDotaTVDelay), typeof(global::Steam.Protos.Dota2.LobbyDotaPauseSetting), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyCoachFriendRequest), global::Steam.Protos.Dota2.CMsgLobbyCoachFriendRequest.Parser, new[]{ "CoachAccountId", "PlayerAccountId", "RequestState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData), global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData.Parser, new[]{ "HeroBadges" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData.Types.HeroBadge), global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData.Types.HeroBadge.Parser, new[]{ "HeroId", "HeroBadgeXp" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgEventActionData), global::Steam.Protos.Dota2.CMsgEventActionData.Parser, new[]{ "ActionId", "ActionScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPeriodicResourceData), global::Steam.Protos.Dota2.CMsgPeriodicResourceData.Parser, new[]{ "PeriodicResourceId", "Remaining", "Max" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyEventPoints), global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Parser, new[]{ "EventId", "AccountPoints" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Types.AccountPoints), global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Types.AccountPoints.Parser, new[]{ "AccountId", "NormalPoints", "PremiumPoints", "Owned", "EventLevel", "ActiveEffectsMask", "WagerStreak", "EventGameCustomActions", "TipAmountIndex", "ActiveEventSeasonId", "TeleportFxLevel", "NetworkedEventActions", "PeriodicResources", "ExtraEventMessages" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyEventGameData), global::Steam.Protos.Dota2.CMsgLobbyEventGameData.Parser, new[]{ "GameSeed", "EventWindowStartTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTALobbyInvite), global::Steam.Protos.Dota2.CSODOTALobbyInvite.Parser, new[]{ "GroupId", "SenderId", "SenderName", "Members", "CustomGameId", "InviteGid", "CustomGameCrc", "CustomGameTimestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTALobbyInvite.Types.LobbyMember), global::Steam.Protos.Dota2.CSODOTALobbyInvite.Types.LobbyMember.Parser, new[]{ "Name", "SteamId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTALobbyMember), global::Steam.Protos.Dota2.CSODOTALobbyMember.Parser, new[]{ "Id", "HeroId", "Team", "Slot", "LeaverStatus", "LeaverActions", "CoachTeam", "CustomGameProductIds", "LiveSpectatorTeam", "PendingAwards", "PendingAwardsOnVictory", "ReportsAvailable", "LiveSpectatorAccountId", "CommsReportsAvailable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAServerLobbyMember), global::Steam.Protos.Dota2.CSODOTAServerLobbyMember.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAStaticLobbyMember), global::Steam.Protos.Dota2.CSODOTAStaticLobbyMember.Parser, new[]{ "Name", "PartyId", "Channel", "Cameraman" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAServerStaticLobbyMember), global::Steam.Protos.Dota2.CSODOTAServerStaticLobbyMember.Parser, new[]{ "SteamId", "RankTier", "LeaderboardRank", "LaneSelectionFlags", "RankMmrBoostType", "CoachRating", "CoachedAccountIds", "WasMvpLastGame", "CanEarnRewards", "IsPlusSubscriber", "FavoriteTeamPacked", "IsSteamChina", "Title", "GuildId", "DisabledRandomHeroBits", "DisabledHeroId", "EnabledHeroId", "BannedHeroIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CLobbyTeamDetails), global::Steam.Protos.Dota2.CLobbyTeamDetails.Parser, new[]{ "TeamName", "TeamTag", "TeamId", "TeamLogo", "TeamBaseLogo", "TeamBannerLogo", "TeamComplete", "Rank", "RankChange", "IsHomeTeam", "IsChallengeMatch", "ChallengeMatchTokenAccount", "TeamLogoUrl", "TeamAbbreviation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CLobbyGuildDetails), global::Steam.Protos.Dota2.CLobbyGuildDetails.Parser, new[]{ "GuildId", "GuildPrimaryColor", "GuildSecondaryColor", "GuildPattern", "GuildLogo", "GuildPoints", "GuildEvent", "GuildFlags", "TeamForGuild", "GuildTag", "GuildWeeklyPercentile" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CLobbyTimedRewardDetails), global::Steam.Protos.Dota2.CLobbyTimedRewardDetails.Parser, new[]{ "ItemDefIndex", "IsSupplyCrate", "IsTimedDrop", "AccountId", "Origin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CLobbyBroadcastChannelInfo), global::Steam.Protos.Dota2.CLobbyBroadcastChannelInfo.Parser, new[]{ "ChannelId", "CountryCode", "Description", "LanguageCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CLobbyGuildChallenge), global::Steam.Protos.Dota2.CLobbyGuildChallenge.Parser, new[]{ "GuildId", "EventId", "ChallengeInstanceId", "ChallengeParameter", "ChallengeTimestamp", "ChallengePeriodSerial", "ChallengeProgressAtStart", "EligibleAccountIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTALobbyMatchQualityData), global::Steam.Protos.Dota2.CDOTALobbyMatchQualityData.Parser, new[]{ "OverallQuality", "TeamBalance", "MatchSkillRange", "MatchBehavior" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTALobby), global::Steam.Protos.Dota2.CSODOTALobby.Parser, new[]{ "LobbyId", "AllMembers", "MemberIndices", "LeftMemberIndices", "FreeMemberIndices", "LeaderId", "ServerId", "GameMode", "PendingInvites", "State", "Connect", "LobbyType", "AllowCheats", "FillWithBots", "GameName", "TeamDetails", "TournamentId", "TournamentGameId", "ServerRegion", "GameState", "NumSpectators", "Matchgroup", "CmPick", "MatchId", "AllowSpectating", "BotDifficultyRadiant", "PassKey", "Leagueid", "PenaltyLevelRadiant", "PenaltyLevelDire", "SeriesType", "RadiantSeriesWins", "DireSeriesWins", "Allchat", "DotaTvDelay", "CustomGameMode", "CustomMapName", "CustomDifficulty", "Lan", "BroadcastChannelInfo", "FirstLeaverAccountid", "SeriesId", "LowPriority", "ExtraMessages", "FirstBloodHappened", "MatchOutcome", "MassDisconnect", "CustomGameId", "CustomMinPlayers", "CustomMaxPlayers", "Visibility", "CustomGameCrc", "CustomGameAutoCreatedLobby", "CustomGameTimestamp", "PreviousSeriesMatches", "PreviousMatchOverride", "GameStartTime", "PauseSetting", "WeekendTourneyDivisionId", "WeekendTourneySkillLevel", "WeekendTourneyBracketRound", "BotDifficultyDire", "BotRadiant", "BotDire", "EventProgressionEnabled", "SelectionPriorityRules", "SeriesPreviousSelectionPriorityTeamId", "SeriesCurrentSelectionPriorityTeamId", "SeriesCurrentPriorityTeamChoice", "SeriesCurrentNonPriorityTeamChoice", "SeriesCurrentSelectionPriorityUsedCoinToss", "CurrentPrimaryEvent", "EmergencyDisabledHeroIds", "CustomGamePrivateKey", "CustomGamePenalties", "LanHostPingLocation", "LeagueNodeId", "MatchDuration", "LeaguePhase", "ExperimentalGameplayEnabled", "GuildChallenges", "GuildDetails", "RequestedHeroIds", "CoachFriendRequests", "IsInSteamChina", "WithScenarioSave", "LobbyCreationTime", "EventGameDefinition", "MatchQualityData", "RequestedHeroTeams" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CSODOTALobby.Types.State), typeof(global::Steam.Protos.Dota2.CSODOTALobby.Types.LobbyType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg), global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg.Parser, new[]{ "Id", "Contents" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAServerLobby), global::Steam.Protos.Dota2.CSODOTAServerLobby.Parser, new[]{ "AllMembers", "ExtraStartupMessages", "BroadcastActive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAStaticLobby), global::Steam.Protos.Dota2.CSODOTAStaticLobby.Parser, new[]{ "AllMembers", "IsPlayerDraft", "IsLastMatchInSeries" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAServerStaticLobby), global::Steam.Protos.Dota2.CSODOTAServerStaticLobby.Parser, new[]{ "AllMembers", "PostPatchStrategyTimeBuffer", "LobbyEventPoints", "BroadcastUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData), global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Parser, new[]{ "AccountId", "PlusData", "UnlockedChatWheelMessageRanges", "UnlockedPingWheelMessageRanges" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.ChatWheelMessageRange), global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.ChatWheelMessageRange.Parser, new[]{ "MessageIdStart", "MessageIdEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.PingWheelMessageRange), global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.PingWheelMessageRange.Parser, new[]{ "MessageIdStart", "MessageIdEnd" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyInitializationComplete), global::Steam.Protos.Dota2.CMsgLobbyInitializationComplete.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyPlaytestDetails), global::Steam.Protos.Dota2.CMsgLobbyPlaytestDetails.Parser, new[]{ "Json" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLocalServerGuildData), global::Steam.Protos.Dota2.CMsgLocalServerGuildData.Parser, new[]{ "GuildId", "EventId", "GuildPoints", "GuildLogo", "GuildPrimaryColor", "GuildSecondaryColor", "GuildPattern", "GuildFlags", "GuildWeeklyPercentile" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLocalServerFakeLobbyData), global::Steam.Protos.Dota2.CMsgLocalServerFakeLobbyData.Parser, new[]{ "AccountId", "EventPoints", "IsPlusSubscriber", "PrimaryEventId", "FavoriteTeam", "FavoriteTeamQuality", "GuildInfo", "TeleportFxLevel", "AdditionalData" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ELobbyMemberCoachRequestState {
    [pbr::OriginalName("k_eLobbyMemberCoachRequestState_None")] KELobbyMemberCoachRequestStateNone = 0,
    [pbr::OriginalName("k_eLobbyMemberCoachRequestState_Accepted")] KELobbyMemberCoachRequestStateAccepted = 1,
    [pbr::OriginalName("k_eLobbyMemberCoachRequestState_Rejected")] KELobbyMemberCoachRequestStateRejected = 2,
  }

  public enum LobbyDotaTVDelay {
    [pbr::OriginalName("LobbyDotaTV_10")] LobbyDotaTv10 = 0,
    [pbr::OriginalName("LobbyDotaTV_120")] LobbyDotaTv120 = 1,
    [pbr::OriginalName("LobbyDotaTV_300")] LobbyDotaTv300 = 2,
    [pbr::OriginalName("LobbyDotaTV_900")] LobbyDotaTv900 = 3,
  }

  public enum LobbyDotaPauseSetting {
    [pbr::OriginalName("LobbyDotaPauseSetting_Unlimited")] Unlimited = 0,
    [pbr::OriginalName("LobbyDotaPauseSetting_Limited")] Limited = 1,
    [pbr::OriginalName("LobbyDotaPauseSetting_Disabled")] Disabled = 2,
  }

  #endregion

  #region Messages
  public sealed partial class CMsgLobbyCoachFriendRequest : pb::IMessage<CMsgLobbyCoachFriendRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyCoachFriendRequest> _parser = new pb::MessageParser<CMsgLobbyCoachFriendRequest>(() => new CMsgLobbyCoachFriendRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyCoachFriendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyCoachFriendRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyCoachFriendRequest(CMsgLobbyCoachFriendRequest other) : this() {
      _hasBits0 = other._hasBits0;
      coachAccountId_ = other.coachAccountId_;
      playerAccountId_ = other.playerAccountId_;
      requestState_ = other.requestState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyCoachFriendRequest Clone() {
      return new CMsgLobbyCoachFriendRequest(this);
    }

    /// <summary>Field number for the "coach_account_id" field.</summary>
    public const int CoachAccountIdFieldNumber = 1;
    private readonly static uint CoachAccountIdDefaultValue = 0;

    private uint coachAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CoachAccountId {
      get { if ((_hasBits0 & 1) != 0) { return coachAccountId_; } else { return CoachAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        coachAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "coach_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCoachAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "coach_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCoachAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_account_id" field.</summary>
    public const int PlayerAccountIdFieldNumber = 2;
    private readonly static uint PlayerAccountIdDefaultValue = 0;

    private uint playerAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerAccountId {
      get { if ((_hasBits0 & 2) != 0) { return playerAccountId_; } else { return PlayerAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "player_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "request_state" field.</summary>
    public const int RequestStateFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.ELobbyMemberCoachRequestState RequestStateDefaultValue = global::Steam.Protos.Dota2.ELobbyMemberCoachRequestState.KELobbyMemberCoachRequestStateNone;

    private global::Steam.Protos.Dota2.ELobbyMemberCoachRequestState requestState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.ELobbyMemberCoachRequestState RequestState {
      get { if ((_hasBits0 & 4) != 0) { return requestState_; } else { return RequestStateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        requestState_ = value;
      }
    }
    /// <summary>Gets whether the "request_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "request_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestState() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyCoachFriendRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyCoachFriendRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CoachAccountId != other.CoachAccountId) return false;
      if (PlayerAccountId != other.PlayerAccountId) return false;
      if (RequestState != other.RequestState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCoachAccountId) hash ^= CoachAccountId.GetHashCode();
      if (HasPlayerAccountId) hash ^= PlayerAccountId.GetHashCode();
      if (HasRequestState) hash ^= RequestState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCoachAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(CoachAccountId);
      }
      if (HasPlayerAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerAccountId);
      }
      if (HasRequestState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RequestState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCoachAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(CoachAccountId);
      }
      if (HasPlayerAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerAccountId);
      }
      if (HasRequestState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RequestState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCoachAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoachAccountId);
      }
      if (HasPlayerAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerAccountId);
      }
      if (HasRequestState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyCoachFriendRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasCoachAccountId) {
        CoachAccountId = other.CoachAccountId;
      }
      if (other.HasPlayerAccountId) {
        PlayerAccountId = other.PlayerAccountId;
      }
      if (other.HasRequestState) {
        RequestState = other.RequestState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CoachAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerAccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            RequestState = (global::Steam.Protos.Dota2.ELobbyMemberCoachRequestState) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CoachAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerAccountId = input.ReadUInt32();
            break;
          }
          case 24: {
            RequestState = (global::Steam.Protos.Dota2.ELobbyMemberCoachRequestState) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLobbyPlayerPlusSubscriptionData : pb::IMessage<CMsgLobbyPlayerPlusSubscriptionData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyPlayerPlusSubscriptionData> _parser = new pb::MessageParser<CMsgLobbyPlayerPlusSubscriptionData>(() => new CMsgLobbyPlayerPlusSubscriptionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyPlayerPlusSubscriptionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyPlayerPlusSubscriptionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyPlayerPlusSubscriptionData(CMsgLobbyPlayerPlusSubscriptionData other) : this() {
      heroBadges_ = other.heroBadges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyPlayerPlusSubscriptionData Clone() {
      return new CMsgLobbyPlayerPlusSubscriptionData(this);
    }

    /// <summary>Field number for the "hero_badges" field.</summary>
    public const int HeroBadgesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData.Types.HeroBadge> _repeated_heroBadges_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData.Types.HeroBadge.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData.Types.HeroBadge> heroBadges_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData.Types.HeroBadge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData.Types.HeroBadge> HeroBadges {
      get { return heroBadges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyPlayerPlusSubscriptionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyPlayerPlusSubscriptionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroBadges_.Equals(other.heroBadges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroBadges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      heroBadges_.WriteTo(output, _repeated_heroBadges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      heroBadges_.WriteTo(ref output, _repeated_heroBadges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroBadges_.CalculateSize(_repeated_heroBadges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyPlayerPlusSubscriptionData other) {
      if (other == null) {
        return;
      }
      heroBadges_.Add(other.heroBadges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heroBadges_.AddEntriesFrom(input, _repeated_heroBadges_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            heroBadges_.AddEntriesFrom(ref input, _repeated_heroBadges_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgLobbyPlayerPlusSubscriptionData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class HeroBadge : pb::IMessage<HeroBadge>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<HeroBadge> _parser = new pb::MessageParser<HeroBadge>(() => new HeroBadge());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HeroBadge> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroBadge() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroBadge(HeroBadge other) : this() {
          _hasBits0 = other._hasBits0;
          heroId_ = other.heroId_;
          heroBadgeXp_ = other.heroBadgeXp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroBadge Clone() {
          return new HeroBadge(this);
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 1;
        private readonly static int HeroIdDefaultValue = 0;

        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId {
          get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            heroId_ = value;
          }
        }
        /// <summary>Gets whether the "hero_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "hero_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "hero_badge_xp" field.</summary>
        public const int HeroBadgeXpFieldNumber = 2;
        private readonly static uint HeroBadgeXpDefaultValue = 0;

        private uint heroBadgeXp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroBadgeXp {
          get { if ((_hasBits0 & 2) != 0) { return heroBadgeXp_; } else { return HeroBadgeXpDefaultValue; } }
          set {
            _hasBits0 |= 2;
            heroBadgeXp_ = value;
          }
        }
        /// <summary>Gets whether the "hero_badge_xp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeroBadgeXp {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "hero_badge_xp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeroBadgeXp() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HeroBadge);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HeroBadge other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HeroId != other.HeroId) return false;
          if (HeroBadgeXp != other.HeroBadgeXp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasHeroId) hash ^= HeroId.GetHashCode();
          if (HasHeroBadgeXp) hash ^= HeroBadgeXp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasHeroId) {
            output.WriteRawTag(8);
            output.WriteInt32(HeroId);
          }
          if (HasHeroBadgeXp) {
            output.WriteRawTag(16);
            output.WriteUInt32(HeroBadgeXp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasHeroId) {
            output.WriteRawTag(8);
            output.WriteInt32(HeroId);
          }
          if (HasHeroBadgeXp) {
            output.WriteRawTag(16);
            output.WriteUInt32(HeroBadgeXp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasHeroId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
          }
          if (HasHeroBadgeXp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroBadgeXp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HeroBadge other) {
          if (other == null) {
            return;
          }
          if (other.HasHeroId) {
            HeroId = other.HeroId;
          }
          if (other.HasHeroBadgeXp) {
            HeroBadgeXp = other.HeroBadgeXp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                HeroId = input.ReadInt32();
                break;
              }
              case 16: {
                HeroBadgeXp = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                HeroId = input.ReadInt32();
                break;
              }
              case 16: {
                HeroBadgeXp = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgEventActionData : pb::IMessage<CMsgEventActionData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgEventActionData> _parser = new pb::MessageParser<CMsgEventActionData>(() => new CMsgEventActionData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgEventActionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgEventActionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgEventActionData(CMsgEventActionData other) : this() {
      _hasBits0 = other._hasBits0;
      actionId_ = other.actionId_;
      actionScore_ = other.actionScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgEventActionData Clone() {
      return new CMsgEventActionData(this);
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 1;
    private readonly static uint ActionIdDefaultValue = 0;

    private uint actionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActionId {
      get { if ((_hasBits0 & 1) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        actionId_ = value;
      }
    }
    /// <summary>Gets whether the "action_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActionId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "action_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action_score" field.</summary>
    public const int ActionScoreFieldNumber = 2;
    private readonly static uint ActionScoreDefaultValue = 0;

    private uint actionScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActionScore {
      get { if ((_hasBits0 & 2) != 0) { return actionScore_; } else { return ActionScoreDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionScore_ = value;
      }
    }
    /// <summary>Gets whether the "action_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActionScore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionScore() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgEventActionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgEventActionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionId != other.ActionId) return false;
      if (ActionScore != other.ActionScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasActionId) hash ^= ActionId.GetHashCode();
      if (HasActionScore) hash ^= ActionScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasActionId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActionId);
      }
      if (HasActionScore) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActionScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasActionId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActionId);
      }
      if (HasActionScore) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActionScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasActionId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionId);
      }
      if (HasActionScore) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionScore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgEventActionData other) {
      if (other == null) {
        return;
      }
      if (other.HasActionId) {
        ActionId = other.ActionId;
      }
      if (other.HasActionScore) {
        ActionScore = other.ActionScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActionId = input.ReadUInt32();
            break;
          }
          case 16: {
            ActionScore = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ActionId = input.ReadUInt32();
            break;
          }
          case 16: {
            ActionScore = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPeriodicResourceData : pb::IMessage<CMsgPeriodicResourceData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPeriodicResourceData> _parser = new pb::MessageParser<CMsgPeriodicResourceData>(() => new CMsgPeriodicResourceData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPeriodicResourceData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPeriodicResourceData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPeriodicResourceData(CMsgPeriodicResourceData other) : this() {
      _hasBits0 = other._hasBits0;
      periodicResourceId_ = other.periodicResourceId_;
      remaining_ = other.remaining_;
      max_ = other.max_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPeriodicResourceData Clone() {
      return new CMsgPeriodicResourceData(this);
    }

    /// <summary>Field number for the "periodic_resource_id" field.</summary>
    public const int PeriodicResourceIdFieldNumber = 1;
    private readonly static uint PeriodicResourceIdDefaultValue = 0;

    private uint periodicResourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PeriodicResourceId {
      get { if ((_hasBits0 & 1) != 0) { return periodicResourceId_; } else { return PeriodicResourceIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        periodicResourceId_ = value;
      }
    }
    /// <summary>Gets whether the "periodic_resource_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPeriodicResourceId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "periodic_resource_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPeriodicResourceId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "remaining" field.</summary>
    public const int RemainingFieldNumber = 2;
    private readonly static uint RemainingDefaultValue = 0;

    private uint remaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Remaining {
      get { if ((_hasBits0 & 2) != 0) { return remaining_; } else { return RemainingDefaultValue; } }
      set {
        _hasBits0 |= 2;
        remaining_ = value;
      }
    }
    /// <summary>Gets whether the "remaining" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRemaining {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "remaining" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRemaining() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 3;
    private readonly static uint MaxDefaultValue = 0;

    private uint max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Max {
      get { if ((_hasBits0 & 4) != 0) { return max_; } else { return MaxDefaultValue; } }
      set {
        _hasBits0 |= 4;
        max_ = value;
      }
    }
    /// <summary>Gets whether the "max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMax {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMax() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPeriodicResourceData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPeriodicResourceData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PeriodicResourceId != other.PeriodicResourceId) return false;
      if (Remaining != other.Remaining) return false;
      if (Max != other.Max) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPeriodicResourceId) hash ^= PeriodicResourceId.GetHashCode();
      if (HasRemaining) hash ^= Remaining.GetHashCode();
      if (HasMax) hash ^= Max.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPeriodicResourceId) {
        output.WriteRawTag(8);
        output.WriteUInt32(PeriodicResourceId);
      }
      if (HasRemaining) {
        output.WriteRawTag(16);
        output.WriteUInt32(Remaining);
      }
      if (HasMax) {
        output.WriteRawTag(24);
        output.WriteUInt32(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPeriodicResourceId) {
        output.WriteRawTag(8);
        output.WriteUInt32(PeriodicResourceId);
      }
      if (HasRemaining) {
        output.WriteRawTag(16);
        output.WriteUInt32(Remaining);
      }
      if (HasMax) {
        output.WriteRawTag(24);
        output.WriteUInt32(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPeriodicResourceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeriodicResourceId);
      }
      if (HasRemaining) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Remaining);
      }
      if (HasMax) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Max);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPeriodicResourceData other) {
      if (other == null) {
        return;
      }
      if (other.HasPeriodicResourceId) {
        PeriodicResourceId = other.PeriodicResourceId;
      }
      if (other.HasRemaining) {
        Remaining = other.Remaining;
      }
      if (other.HasMax) {
        Max = other.Max;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PeriodicResourceId = input.ReadUInt32();
            break;
          }
          case 16: {
            Remaining = input.ReadUInt32();
            break;
          }
          case 24: {
            Max = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PeriodicResourceId = input.ReadUInt32();
            break;
          }
          case 16: {
            Remaining = input.ReadUInt32();
            break;
          }
          case 24: {
            Max = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLobbyEventPoints : pb::IMessage<CMsgLobbyEventPoints>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyEventPoints> _parser = new pb::MessageParser<CMsgLobbyEventPoints>(() => new CMsgLobbyEventPoints());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyEventPoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyEventPoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyEventPoints(CMsgLobbyEventPoints other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      accountPoints_ = other.accountPoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyEventPoints Clone() {
      return new CMsgLobbyEventPoints(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static uint EventIdDefaultValue = 0;

    private uint eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "account_points" field.</summary>
    public const int AccountPointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Types.AccountPoints> _repeated_accountPoints_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Types.AccountPoints.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Types.AccountPoints> accountPoints_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Types.AccountPoints>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Types.AccountPoints> AccountPoints {
      get { return accountPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyEventPoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyEventPoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if(!accountPoints_.Equals(other.accountPoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      hash ^= accountPoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteUInt32(EventId);
      }
      accountPoints_.WriteTo(output, _repeated_accountPoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteUInt32(EventId);
      }
      accountPoints_.WriteTo(ref output, _repeated_accountPoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      size += accountPoints_.CalculateSize(_repeated_accountPoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyEventPoints other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      accountPoints_.Add(other.accountPoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventId = input.ReadUInt32();
            break;
          }
          case 18: {
            accountPoints_.AddEntriesFrom(input, _repeated_accountPoints_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EventId = input.ReadUInt32();
            break;
          }
          case 18: {
            accountPoints_.AddEntriesFrom(ref input, _repeated_accountPoints_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgLobbyEventPoints message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AccountPoints : pb::IMessage<AccountPoints>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AccountPoints> _parser = new pb::MessageParser<AccountPoints>(() => new AccountPoints());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AccountPoints> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountPoints() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountPoints(AccountPoints other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          normalPoints_ = other.normalPoints_;
          premiumPoints_ = other.premiumPoints_;
          owned_ = other.owned_;
          eventLevel_ = other.eventLevel_;
          activeEffectsMask_ = other.activeEffectsMask_;
          wagerStreak_ = other.wagerStreak_;
          eventGameCustomActions_ = other.eventGameCustomActions_.Clone();
          tipAmountIndex_ = other.tipAmountIndex_;
          activeEventSeasonId_ = other.activeEventSeasonId_;
          teleportFxLevel_ = other.teleportFxLevel_;
          networkedEventActions_ = other.networkedEventActions_.Clone();
          periodicResources_ = other.periodicResources_.Clone();
          extraEventMessages_ = other.extraEventMessages_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountPoints Clone() {
          return new AccountPoints(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "normal_points" field.</summary>
        public const int NormalPointsFieldNumber = 2;
        private readonly static uint NormalPointsDefaultValue = 0;

        private uint normalPoints_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NormalPoints {
          get { if ((_hasBits0 & 2) != 0) { return normalPoints_; } else { return NormalPointsDefaultValue; } }
          set {
            _hasBits0 |= 2;
            normalPoints_ = value;
          }
        }
        /// <summary>Gets whether the "normal_points" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNormalPoints {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "normal_points" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNormalPoints() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "premium_points" field.</summary>
        public const int PremiumPointsFieldNumber = 3;
        private readonly static uint PremiumPointsDefaultValue = 0;

        private uint premiumPoints_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PremiumPoints {
          get { if ((_hasBits0 & 4) != 0) { return premiumPoints_; } else { return PremiumPointsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            premiumPoints_ = value;
          }
        }
        /// <summary>Gets whether the "premium_points" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPremiumPoints {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "premium_points" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPremiumPoints() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "owned" field.</summary>
        public const int OwnedFieldNumber = 4;
        private readonly static bool OwnedDefaultValue = false;

        private bool owned_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Owned {
          get { if ((_hasBits0 & 8) != 0) { return owned_; } else { return OwnedDefaultValue; } }
          set {
            _hasBits0 |= 8;
            owned_ = value;
          }
        }
        /// <summary>Gets whether the "owned" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOwned {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "owned" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOwned() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "event_level" field.</summary>
        public const int EventLevelFieldNumber = 7;
        private readonly static uint EventLevelDefaultValue = 0;

        private uint eventLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EventLevel {
          get { if ((_hasBits0 & 16) != 0) { return eventLevel_; } else { return EventLevelDefaultValue; } }
          set {
            _hasBits0 |= 16;
            eventLevel_ = value;
          }
        }
        /// <summary>Gets whether the "event_level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEventLevel {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "event_level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEventLevel() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "active_effects_mask" field.</summary>
        public const int ActiveEffectsMaskFieldNumber = 12;
        private readonly static ulong ActiveEffectsMaskDefaultValue = 0UL;

        private ulong activeEffectsMask_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ActiveEffectsMask {
          get { if ((_hasBits0 & 32) != 0) { return activeEffectsMask_; } else { return ActiveEffectsMaskDefaultValue; } }
          set {
            _hasBits0 |= 32;
            activeEffectsMask_ = value;
          }
        }
        /// <summary>Gets whether the "active_effects_mask" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActiveEffectsMask {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "active_effects_mask" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActiveEffectsMask() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "wager_streak" field.</summary>
        public const int WagerStreakFieldNumber = 23;
        private readonly static uint WagerStreakDefaultValue = 0;

        private uint wagerStreak_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WagerStreak {
          get { if ((_hasBits0 & 64) != 0) { return wagerStreak_; } else { return WagerStreakDefaultValue; } }
          set {
            _hasBits0 |= 64;
            wagerStreak_ = value;
          }
        }
        /// <summary>Gets whether the "wager_streak" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWagerStreak {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "wager_streak" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWagerStreak() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "event_game_custom_actions" field.</summary>
        public const int EventGameCustomActionsFieldNumber = 25;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgEventActionData> _repeated_eventGameCustomActions_codec
            = pb::FieldCodec.ForMessage(202, global::Steam.Protos.Dota2.CMsgEventActionData.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgEventActionData> eventGameCustomActions_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgEventActionData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgEventActionData> EventGameCustomActions {
          get { return eventGameCustomActions_; }
        }

        /// <summary>Field number for the "tip_amount_index" field.</summary>
        public const int TipAmountIndexFieldNumber = 26;
        private readonly static uint TipAmountIndexDefaultValue = 0;

        private uint tipAmountIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TipAmountIndex {
          get { if ((_hasBits0 & 128) != 0) { return tipAmountIndex_; } else { return TipAmountIndexDefaultValue; } }
          set {
            _hasBits0 |= 128;
            tipAmountIndex_ = value;
          }
        }
        /// <summary>Gets whether the "tip_amount_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTipAmountIndex {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "tip_amount_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTipAmountIndex() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "active_event_season_id" field.</summary>
        public const int ActiveEventSeasonIdFieldNumber = 27;
        private readonly static uint ActiveEventSeasonIdDefaultValue = 0;

        private uint activeEventSeasonId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActiveEventSeasonId {
          get { if ((_hasBits0 & 256) != 0) { return activeEventSeasonId_; } else { return ActiveEventSeasonIdDefaultValue; } }
          set {
            _hasBits0 |= 256;
            activeEventSeasonId_ = value;
          }
        }
        /// <summary>Gets whether the "active_event_season_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActiveEventSeasonId {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "active_event_season_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActiveEventSeasonId() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "teleport_fx_level" field.</summary>
        public const int TeleportFxLevelFieldNumber = 28;
        private readonly static uint TeleportFxLevelDefaultValue = 0;

        private uint teleportFxLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeleportFxLevel {
          get { if ((_hasBits0 & 512) != 0) { return teleportFxLevel_; } else { return TeleportFxLevelDefaultValue; } }
          set {
            _hasBits0 |= 512;
            teleportFxLevel_ = value;
          }
        }
        /// <summary>Gets whether the "teleport_fx_level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeleportFxLevel {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "teleport_fx_level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeleportFxLevel() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "networked_event_actions" field.</summary>
        public const int NetworkedEventActionsFieldNumber = 30;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgEventActionData> _repeated_networkedEventActions_codec
            = pb::FieldCodec.ForMessage(242, global::Steam.Protos.Dota2.CMsgEventActionData.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgEventActionData> networkedEventActions_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgEventActionData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgEventActionData> NetworkedEventActions {
          get { return networkedEventActions_; }
        }

        /// <summary>Field number for the "periodic_resources" field.</summary>
        public const int PeriodicResourcesFieldNumber = 31;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgPeriodicResourceData> _repeated_periodicResources_codec
            = pb::FieldCodec.ForMessage(250, global::Steam.Protos.Dota2.CMsgPeriodicResourceData.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPeriodicResourceData> periodicResources_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPeriodicResourceData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPeriodicResourceData> PeriodicResources {
          get { return periodicResources_; }
        }

        /// <summary>Field number for the "extra_event_messages" field.</summary>
        public const int ExtraEventMessagesFieldNumber = 32;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CExtraMsgBlock> _repeated_extraEventMessages_codec
            = pb::FieldCodec.ForMessage(258, global::Steam.Protos.Dota2.CExtraMsgBlock.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock> extraEventMessages_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock> ExtraEventMessages {
          get { return extraEventMessages_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AccountPoints);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AccountPoints other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (NormalPoints != other.NormalPoints) return false;
          if (PremiumPoints != other.PremiumPoints) return false;
          if (Owned != other.Owned) return false;
          if (EventLevel != other.EventLevel) return false;
          if (ActiveEffectsMask != other.ActiveEffectsMask) return false;
          if (WagerStreak != other.WagerStreak) return false;
          if(!eventGameCustomActions_.Equals(other.eventGameCustomActions_)) return false;
          if (TipAmountIndex != other.TipAmountIndex) return false;
          if (ActiveEventSeasonId != other.ActiveEventSeasonId) return false;
          if (TeleportFxLevel != other.TeleportFxLevel) return false;
          if(!networkedEventActions_.Equals(other.networkedEventActions_)) return false;
          if(!periodicResources_.Equals(other.periodicResources_)) return false;
          if(!extraEventMessages_.Equals(other.extraEventMessages_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasNormalPoints) hash ^= NormalPoints.GetHashCode();
          if (HasPremiumPoints) hash ^= PremiumPoints.GetHashCode();
          if (HasOwned) hash ^= Owned.GetHashCode();
          if (HasEventLevel) hash ^= EventLevel.GetHashCode();
          if (HasActiveEffectsMask) hash ^= ActiveEffectsMask.GetHashCode();
          if (HasWagerStreak) hash ^= WagerStreak.GetHashCode();
          hash ^= eventGameCustomActions_.GetHashCode();
          if (HasTipAmountIndex) hash ^= TipAmountIndex.GetHashCode();
          if (HasActiveEventSeasonId) hash ^= ActiveEventSeasonId.GetHashCode();
          if (HasTeleportFxLevel) hash ^= TeleportFxLevel.GetHashCode();
          hash ^= networkedEventActions_.GetHashCode();
          hash ^= periodicResources_.GetHashCode();
          hash ^= extraEventMessages_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasNormalPoints) {
            output.WriteRawTag(16);
            output.WriteUInt32(NormalPoints);
          }
          if (HasPremiumPoints) {
            output.WriteRawTag(24);
            output.WriteUInt32(PremiumPoints);
          }
          if (HasOwned) {
            output.WriteRawTag(32);
            output.WriteBool(Owned);
          }
          if (HasEventLevel) {
            output.WriteRawTag(56);
            output.WriteUInt32(EventLevel);
          }
          if (HasActiveEffectsMask) {
            output.WriteRawTag(96);
            output.WriteUInt64(ActiveEffectsMask);
          }
          if (HasWagerStreak) {
            output.WriteRawTag(184, 1);
            output.WriteUInt32(WagerStreak);
          }
          eventGameCustomActions_.WriteTo(output, _repeated_eventGameCustomActions_codec);
          if (HasTipAmountIndex) {
            output.WriteRawTag(208, 1);
            output.WriteUInt32(TipAmountIndex);
          }
          if (HasActiveEventSeasonId) {
            output.WriteRawTag(216, 1);
            output.WriteUInt32(ActiveEventSeasonId);
          }
          if (HasTeleportFxLevel) {
            output.WriteRawTag(224, 1);
            output.WriteUInt32(TeleportFxLevel);
          }
          networkedEventActions_.WriteTo(output, _repeated_networkedEventActions_codec);
          periodicResources_.WriteTo(output, _repeated_periodicResources_codec);
          extraEventMessages_.WriteTo(output, _repeated_extraEventMessages_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasNormalPoints) {
            output.WriteRawTag(16);
            output.WriteUInt32(NormalPoints);
          }
          if (HasPremiumPoints) {
            output.WriteRawTag(24);
            output.WriteUInt32(PremiumPoints);
          }
          if (HasOwned) {
            output.WriteRawTag(32);
            output.WriteBool(Owned);
          }
          if (HasEventLevel) {
            output.WriteRawTag(56);
            output.WriteUInt32(EventLevel);
          }
          if (HasActiveEffectsMask) {
            output.WriteRawTag(96);
            output.WriteUInt64(ActiveEffectsMask);
          }
          if (HasWagerStreak) {
            output.WriteRawTag(184, 1);
            output.WriteUInt32(WagerStreak);
          }
          eventGameCustomActions_.WriteTo(ref output, _repeated_eventGameCustomActions_codec);
          if (HasTipAmountIndex) {
            output.WriteRawTag(208, 1);
            output.WriteUInt32(TipAmountIndex);
          }
          if (HasActiveEventSeasonId) {
            output.WriteRawTag(216, 1);
            output.WriteUInt32(ActiveEventSeasonId);
          }
          if (HasTeleportFxLevel) {
            output.WriteRawTag(224, 1);
            output.WriteUInt32(TeleportFxLevel);
          }
          networkedEventActions_.WriteTo(ref output, _repeated_networkedEventActions_codec);
          periodicResources_.WriteTo(ref output, _repeated_periodicResources_codec);
          extraEventMessages_.WriteTo(ref output, _repeated_extraEventMessages_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasNormalPoints) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NormalPoints);
          }
          if (HasPremiumPoints) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PremiumPoints);
          }
          if (HasOwned) {
            size += 1 + 1;
          }
          if (HasEventLevel) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventLevel);
          }
          if (HasActiveEffectsMask) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ActiveEffectsMask);
          }
          if (HasWagerStreak) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WagerStreak);
          }
          size += eventGameCustomActions_.CalculateSize(_repeated_eventGameCustomActions_codec);
          if (HasTipAmountIndex) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TipAmountIndex);
          }
          if (HasActiveEventSeasonId) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ActiveEventSeasonId);
          }
          if (HasTeleportFxLevel) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeleportFxLevel);
          }
          size += networkedEventActions_.CalculateSize(_repeated_networkedEventActions_codec);
          size += periodicResources_.CalculateSize(_repeated_periodicResources_codec);
          size += extraEventMessages_.CalculateSize(_repeated_extraEventMessages_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AccountPoints other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasNormalPoints) {
            NormalPoints = other.NormalPoints;
          }
          if (other.HasPremiumPoints) {
            PremiumPoints = other.PremiumPoints;
          }
          if (other.HasOwned) {
            Owned = other.Owned;
          }
          if (other.HasEventLevel) {
            EventLevel = other.EventLevel;
          }
          if (other.HasActiveEffectsMask) {
            ActiveEffectsMask = other.ActiveEffectsMask;
          }
          if (other.HasWagerStreak) {
            WagerStreak = other.WagerStreak;
          }
          eventGameCustomActions_.Add(other.eventGameCustomActions_);
          if (other.HasTipAmountIndex) {
            TipAmountIndex = other.TipAmountIndex;
          }
          if (other.HasActiveEventSeasonId) {
            ActiveEventSeasonId = other.ActiveEventSeasonId;
          }
          if (other.HasTeleportFxLevel) {
            TeleportFxLevel = other.TeleportFxLevel;
          }
          networkedEventActions_.Add(other.networkedEventActions_);
          periodicResources_.Add(other.periodicResources_);
          extraEventMessages_.Add(other.extraEventMessages_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                NormalPoints = input.ReadUInt32();
                break;
              }
              case 24: {
                PremiumPoints = input.ReadUInt32();
                break;
              }
              case 32: {
                Owned = input.ReadBool();
                break;
              }
              case 56: {
                EventLevel = input.ReadUInt32();
                break;
              }
              case 96: {
                ActiveEffectsMask = input.ReadUInt64();
                break;
              }
              case 184: {
                WagerStreak = input.ReadUInt32();
                break;
              }
              case 202: {
                eventGameCustomActions_.AddEntriesFrom(input, _repeated_eventGameCustomActions_codec);
                break;
              }
              case 208: {
                TipAmountIndex = input.ReadUInt32();
                break;
              }
              case 216: {
                ActiveEventSeasonId = input.ReadUInt32();
                break;
              }
              case 224: {
                TeleportFxLevel = input.ReadUInt32();
                break;
              }
              case 242: {
                networkedEventActions_.AddEntriesFrom(input, _repeated_networkedEventActions_codec);
                break;
              }
              case 250: {
                periodicResources_.AddEntriesFrom(input, _repeated_periodicResources_codec);
                break;
              }
              case 258: {
                extraEventMessages_.AddEntriesFrom(input, _repeated_extraEventMessages_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                NormalPoints = input.ReadUInt32();
                break;
              }
              case 24: {
                PremiumPoints = input.ReadUInt32();
                break;
              }
              case 32: {
                Owned = input.ReadBool();
                break;
              }
              case 56: {
                EventLevel = input.ReadUInt32();
                break;
              }
              case 96: {
                ActiveEffectsMask = input.ReadUInt64();
                break;
              }
              case 184: {
                WagerStreak = input.ReadUInt32();
                break;
              }
              case 202: {
                eventGameCustomActions_.AddEntriesFrom(ref input, _repeated_eventGameCustomActions_codec);
                break;
              }
              case 208: {
                TipAmountIndex = input.ReadUInt32();
                break;
              }
              case 216: {
                ActiveEventSeasonId = input.ReadUInt32();
                break;
              }
              case 224: {
                TeleportFxLevel = input.ReadUInt32();
                break;
              }
              case 242: {
                networkedEventActions_.AddEntriesFrom(ref input, _repeated_networkedEventActions_codec);
                break;
              }
              case 250: {
                periodicResources_.AddEntriesFrom(ref input, _repeated_periodicResources_codec);
                break;
              }
              case 258: {
                extraEventMessages_.AddEntriesFrom(ref input, _repeated_extraEventMessages_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgLobbyEventGameData : pb::IMessage<CMsgLobbyEventGameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyEventGameData> _parser = new pb::MessageParser<CMsgLobbyEventGameData>(() => new CMsgLobbyEventGameData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyEventGameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyEventGameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyEventGameData(CMsgLobbyEventGameData other) : this() {
      _hasBits0 = other._hasBits0;
      gameSeed_ = other.gameSeed_;
      eventWindowStartTime_ = other.eventWindowStartTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyEventGameData Clone() {
      return new CMsgLobbyEventGameData(this);
    }

    /// <summary>Field number for the "game_seed" field.</summary>
    public const int GameSeedFieldNumber = 1;
    private readonly static uint GameSeedDefaultValue = 0;

    private uint gameSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameSeed {
      get { if ((_hasBits0 & 1) != 0) { return gameSeed_; } else { return GameSeedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gameSeed_ = value;
      }
    }
    /// <summary>Gets whether the "game_seed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameSeed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "game_seed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameSeed() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "event_window_start_time" field.</summary>
    public const int EventWindowStartTimeFieldNumber = 2;
    private readonly static uint EventWindowStartTimeDefaultValue = 0;

    private uint eventWindowStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventWindowStartTime {
      get { if ((_hasBits0 & 2) != 0) { return eventWindowStartTime_; } else { return EventWindowStartTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        eventWindowStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "event_window_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventWindowStartTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "event_window_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventWindowStartTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyEventGameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyEventGameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameSeed != other.GameSeed) return false;
      if (EventWindowStartTime != other.EventWindowStartTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGameSeed) hash ^= GameSeed.GetHashCode();
      if (HasEventWindowStartTime) hash ^= EventWindowStartTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGameSeed) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameSeed);
      }
      if (HasEventWindowStartTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(EventWindowStartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGameSeed) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameSeed);
      }
      if (HasEventWindowStartTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(EventWindowStartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGameSeed) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameSeed);
      }
      if (HasEventWindowStartTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventWindowStartTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyEventGameData other) {
      if (other == null) {
        return;
      }
      if (other.HasGameSeed) {
        GameSeed = other.GameSeed;
      }
      if (other.HasEventWindowStartTime) {
        EventWindowStartTime = other.EventWindowStartTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameSeed = input.ReadUInt32();
            break;
          }
          case 16: {
            EventWindowStartTime = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameSeed = input.ReadUInt32();
            break;
          }
          case 16: {
            EventWindowStartTime = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSODOTALobbyInvite : pb::IMessage<CSODOTALobbyInvite>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTALobbyInvite> _parser = new pb::MessageParser<CSODOTALobbyInvite>(() => new CSODOTALobbyInvite());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTALobbyInvite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTALobbyInvite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTALobbyInvite(CSODOTALobbyInvite other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      senderId_ = other.senderId_;
      senderName_ = other.senderName_;
      members_ = other.members_.Clone();
      customGameId_ = other.customGameId_;
      inviteGid_ = other.inviteGid_;
      customGameCrc_ = other.customGameCrc_;
      customGameTimestamp_ = other.customGameTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTALobbyInvite Clone() {
      return new CSODOTALobbyInvite(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static ulong GroupIdDefaultValue = 0UL;

    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sender_id" field.</summary>
    public const int SenderIdFieldNumber = 2;
    private readonly static ulong SenderIdDefaultValue = 0UL;

    private ulong senderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SenderId {
      get { if ((_hasBits0 & 2) != 0) { return senderId_; } else { return SenderIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        senderId_ = value;
      }
    }
    /// <summary>Gets whether the "sender_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSenderId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sender_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSenderId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "sender_name" field.</summary>
    public const int SenderNameFieldNumber = 3;
    private readonly static string SenderNameDefaultValue = "";

    private string senderName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderName {
      get { return senderName_ ?? SenderNameDefaultValue; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sender_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSenderName {
      get { return senderName_ != null; }
    }
    /// <summary>Clears the value of the "sender_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSenderName() {
      senderName_ = null;
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTALobbyInvite.Types.LobbyMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CSODOTALobbyInvite.Types.LobbyMember.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobbyInvite.Types.LobbyMember> members_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobbyInvite.Types.LobbyMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobbyInvite.Types.LobbyMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "custom_game_id" field.</summary>
    public const int CustomGameIdFieldNumber = 5;
    private readonly static ulong CustomGameIdDefaultValue = 0UL;

    private ulong customGameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomGameId {
      get { if ((_hasBits0 & 4) != 0) { return customGameId_; } else { return CustomGameIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        customGameId_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "invite_gid" field.</summary>
    public const int InviteGidFieldNumber = 6;
    private readonly static ulong InviteGidDefaultValue = 0UL;

    private ulong inviteGid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InviteGid {
      get { if ((_hasBits0 & 8) != 0) { return inviteGid_; } else { return InviteGidDefaultValue; } }
      set {
        _hasBits0 |= 8;
        inviteGid_ = value;
      }
    }
    /// <summary>Gets whether the "invite_gid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInviteGid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "invite_gid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInviteGid() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "custom_game_crc" field.</summary>
    public const int CustomGameCrcFieldNumber = 7;
    private readonly static ulong CustomGameCrcDefaultValue = 0UL;

    private ulong customGameCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomGameCrc {
      get { if ((_hasBits0 & 16) != 0) { return customGameCrc_; } else { return CustomGameCrcDefaultValue; } }
      set {
        _hasBits0 |= 16;
        customGameCrc_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_crc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameCrc {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_crc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameCrc() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "custom_game_timestamp" field.</summary>
    public const int CustomGameTimestampFieldNumber = 8;
    private readonly static uint CustomGameTimestampDefaultValue = 0;

    private uint customGameTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CustomGameTimestamp {
      get { if ((_hasBits0 & 32) != 0) { return customGameTimestamp_; } else { return CustomGameTimestampDefaultValue; } }
      set {
        _hasBits0 |= 32;
        customGameTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameTimestamp {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameTimestamp() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTALobbyInvite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTALobbyInvite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (SenderId != other.SenderId) return false;
      if (SenderName != other.SenderName) return false;
      if(!members_.Equals(other.members_)) return false;
      if (CustomGameId != other.CustomGameId) return false;
      if (InviteGid != other.InviteGid) return false;
      if (CustomGameCrc != other.CustomGameCrc) return false;
      if (CustomGameTimestamp != other.CustomGameTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasSenderId) hash ^= SenderId.GetHashCode();
      if (HasSenderName) hash ^= SenderName.GetHashCode();
      hash ^= members_.GetHashCode();
      if (HasCustomGameId) hash ^= CustomGameId.GetHashCode();
      if (HasInviteGid) hash ^= InviteGid.GetHashCode();
      if (HasCustomGameCrc) hash ^= CustomGameCrc.GetHashCode();
      if (HasCustomGameTimestamp) hash ^= CustomGameTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GroupId);
      }
      if (HasSenderId) {
        output.WriteRawTag(17);
        output.WriteFixed64(SenderId);
      }
      if (HasSenderName) {
        output.WriteRawTag(26);
        output.WriteString(SenderName);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (HasCustomGameId) {
        output.WriteRawTag(40);
        output.WriteUInt64(CustomGameId);
      }
      if (HasInviteGid) {
        output.WriteRawTag(49);
        output.WriteFixed64(InviteGid);
      }
      if (HasCustomGameCrc) {
        output.WriteRawTag(57);
        output.WriteFixed64(CustomGameCrc);
      }
      if (HasCustomGameTimestamp) {
        output.WriteRawTag(69);
        output.WriteFixed32(CustomGameTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GroupId);
      }
      if (HasSenderId) {
        output.WriteRawTag(17);
        output.WriteFixed64(SenderId);
      }
      if (HasSenderName) {
        output.WriteRawTag(26);
        output.WriteString(SenderName);
      }
      members_.WriteTo(ref output, _repeated_members_codec);
      if (HasCustomGameId) {
        output.WriteRawTag(40);
        output.WriteUInt64(CustomGameId);
      }
      if (HasInviteGid) {
        output.WriteRawTag(49);
        output.WriteFixed64(InviteGid);
      }
      if (HasCustomGameCrc) {
        output.WriteRawTag(57);
        output.WriteFixed64(CustomGameCrc);
      }
      if (HasCustomGameTimestamp) {
        output.WriteRawTag(69);
        output.WriteFixed32(CustomGameTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      if (HasSenderId) {
        size += 1 + 8;
      }
      if (HasSenderName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (HasCustomGameId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomGameId);
      }
      if (HasInviteGid) {
        size += 1 + 8;
      }
      if (HasCustomGameCrc) {
        size += 1 + 8;
      }
      if (HasCustomGameTimestamp) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTALobbyInvite other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasSenderId) {
        SenderId = other.SenderId;
      }
      if (other.HasSenderName) {
        SenderName = other.SenderName;
      }
      members_.Add(other.members_);
      if (other.HasCustomGameId) {
        CustomGameId = other.CustomGameId;
      }
      if (other.HasInviteGid) {
        InviteGid = other.InviteGid;
      }
      if (other.HasCustomGameCrc) {
        CustomGameCrc = other.CustomGameCrc;
      }
      if (other.HasCustomGameTimestamp) {
        CustomGameTimestamp = other.CustomGameTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 17: {
            SenderId = input.ReadFixed64();
            break;
          }
          case 26: {
            SenderName = input.ReadString();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 40: {
            CustomGameId = input.ReadUInt64();
            break;
          }
          case 49: {
            InviteGid = input.ReadFixed64();
            break;
          }
          case 57: {
            CustomGameCrc = input.ReadFixed64();
            break;
          }
          case 69: {
            CustomGameTimestamp = input.ReadFixed32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 17: {
            SenderId = input.ReadFixed64();
            break;
          }
          case 26: {
            SenderName = input.ReadString();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(ref input, _repeated_members_codec);
            break;
          }
          case 40: {
            CustomGameId = input.ReadUInt64();
            break;
          }
          case 49: {
            InviteGid = input.ReadFixed64();
            break;
          }
          case 57: {
            CustomGameCrc = input.ReadFixed64();
            break;
          }
          case 69: {
            CustomGameTimestamp = input.ReadFixed32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CSODOTALobbyInvite message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class LobbyMember : pb::IMessage<LobbyMember>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LobbyMember> _parser = new pb::MessageParser<LobbyMember>(() => new LobbyMember());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LobbyMember> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CSODOTALobbyInvite.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMember() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMember(LobbyMember other) : this() {
          _hasBits0 = other._hasBits0;
          name_ = other.name_;
          steamId_ = other.steamId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LobbyMember Clone() {
          return new LobbyMember(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "steam_id" field.</summary>
        public const int SteamIdFieldNumber = 2;
        private readonly static ulong SteamIdDefaultValue = 0UL;

        private ulong steamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong SteamId {
          get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            steamId_ = value;
          }
        }
        /// <summary>Gets whether the "steam_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSteamId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "steam_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSteamId() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LobbyMember);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LobbyMember other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (SteamId != other.SteamId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasName) hash ^= Name.GetHashCode();
          if (HasSteamId) hash ^= SteamId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasSteamId) {
            output.WriteRawTag(17);
            output.WriteFixed64(SteamId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasSteamId) {
            output.WriteRawTag(17);
            output.WriteFixed64(SteamId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasSteamId) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LobbyMember other) {
          if (other == null) {
            return;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasSteamId) {
            SteamId = other.SteamId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 17: {
                SteamId = input.ReadFixed64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 17: {
                SteamId = input.ReadFixed64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CSODOTALobbyMember : pb::IMessage<CSODOTALobbyMember>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTALobbyMember> _parser = new pb::MessageParser<CSODOTALobbyMember>(() => new CSODOTALobbyMember());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTALobbyMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTALobbyMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTALobbyMember(CSODOTALobbyMember other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      heroId_ = other.heroId_;
      team_ = other.team_;
      slot_ = other.slot_;
      leaverStatus_ = other.leaverStatus_;
      leaverActions_ = other.leaverActions_;
      coachTeam_ = other.coachTeam_;
      customGameProductIds_ = other.customGameProductIds_.Clone();
      liveSpectatorTeam_ = other.liveSpectatorTeam_;
      pendingAwards_ = other.pendingAwards_.Clone();
      pendingAwardsOnVictory_ = other.pendingAwardsOnVictory_.Clone();
      reportsAvailable_ = other.reportsAvailable_;
      liveSpectatorAccountId_ = other.liveSpectatorAccountId_;
      commsReportsAvailable_ = other.commsReportsAvailable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTALobbyMember Clone() {
      return new CSODOTALobbyMember(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamDefaultValue = global::Steam.Protos.Dota2.DOTA_GC_TEAM.GoodGuys;

    private global::Steam.Protos.Dota2.DOTA_GC_TEAM team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GC_TEAM Team {
      get { if ((_hasBits0 & 4) != 0) { return team_; } else { return TeamDefaultValue; } }
      set {
        _hasBits0 |= 4;
        team_ = value;
      }
    }
    /// <summary>Gets whether the "team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeam {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeam() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 7;
    private readonly static uint SlotDefaultValue = 0;

    private uint slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Slot {
      get { if ((_hasBits0 & 8) != 0) { return slot_; } else { return SlotDefaultValue; } }
      set {
        _hasBits0 |= 8;
        slot_ = value;
      }
    }
    /// <summary>Gets whether the "slot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlot {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "slot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlot() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "leaver_status" field.</summary>
    public const int LeaverStatusFieldNumber = 16;
    private readonly static global::Steam.Protos.Dota2.DOTALeaverStatus_t LeaverStatusDefaultValue = global::Steam.Protos.Dota2.DOTALeaverStatus_t.DotaLeaverNone;

    private global::Steam.Protos.Dota2.DOTALeaverStatus_t leaverStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTALeaverStatus_t LeaverStatus {
      get { if ((_hasBits0 & 16) != 0) { return leaverStatus_; } else { return LeaverStatusDefaultValue; } }
      set {
        _hasBits0 |= 16;
        leaverStatus_ = value;
      }
    }
    /// <summary>Gets whether the "leaver_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaverStatus {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "leaver_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaverStatus() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "leaver_actions" field.</summary>
    public const int LeaverActionsFieldNumber = 28;
    private readonly static uint LeaverActionsDefaultValue = 0;

    private uint leaverActions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaverActions {
      get { if ((_hasBits0 & 64) != 0) { return leaverActions_; } else { return LeaverActionsDefaultValue; } }
      set {
        _hasBits0 |= 64;
        leaverActions_ = value;
      }
    }
    /// <summary>Gets whether the "leaver_actions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaverActions {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "leaver_actions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaverActions() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "coach_team" field.</summary>
    public const int CoachTeamFieldNumber = 23;
    private readonly static global::Steam.Protos.Dota2.DOTA_GC_TEAM CoachTeamDefaultValue = global::Steam.Protos.Dota2.DOTA_GC_TEAM.Noteam;

    private global::Steam.Protos.Dota2.DOTA_GC_TEAM coachTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GC_TEAM CoachTeam {
      get { if ((_hasBits0 & 32) != 0) { return coachTeam_; } else { return CoachTeamDefaultValue; } }
      set {
        _hasBits0 |= 32;
        coachTeam_ = value;
      }
    }
    /// <summary>Gets whether the "coach_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCoachTeam {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "coach_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCoachTeam() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "custom_game_product_ids" field.</summary>
    public const int CustomGameProductIdsFieldNumber = 31;
    private static readonly pb::FieldCodec<uint> _repeated_customGameProductIds_codec
        = pb::FieldCodec.ForUInt32(248);
    private readonly pbc::RepeatedField<uint> customGameProductIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CustomGameProductIds {
      get { return customGameProductIds_; }
    }

    /// <summary>Field number for the "live_spectator_team" field.</summary>
    public const int LiveSpectatorTeamFieldNumber = 40;
    private readonly static global::Steam.Protos.Dota2.DOTA_GC_TEAM LiveSpectatorTeamDefaultValue = global::Steam.Protos.Dota2.DOTA_GC_TEAM.Noteam;

    private global::Steam.Protos.Dota2.DOTA_GC_TEAM liveSpectatorTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GC_TEAM LiveSpectatorTeam {
      get { if ((_hasBits0 & 128) != 0) { return liveSpectatorTeam_; } else { return LiveSpectatorTeamDefaultValue; } }
      set {
        _hasBits0 |= 128;
        liveSpectatorTeam_ = value;
      }
    }
    /// <summary>Gets whether the "live_spectator_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLiveSpectatorTeam {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "live_spectator_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLiveSpectatorTeam() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "pending_awards" field.</summary>
    public const int PendingAwardsFieldNumber = 44;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgPendingEventAward> _repeated_pendingAwards_codec
        = pb::FieldCodec.ForMessage(354, global::Steam.Protos.Dota2.CMsgPendingEventAward.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPendingEventAward> pendingAwards_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPendingEventAward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPendingEventAward> PendingAwards {
      get { return pendingAwards_; }
    }

    /// <summary>Field number for the "pending_awards_on_victory" field.</summary>
    public const int PendingAwardsOnVictoryFieldNumber = 45;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgPendingEventAward> _repeated_pendingAwardsOnVictory_codec
        = pb::FieldCodec.ForMessage(362, global::Steam.Protos.Dota2.CMsgPendingEventAward.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPendingEventAward> pendingAwardsOnVictory_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPendingEventAward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgPendingEventAward> PendingAwardsOnVictory {
      get { return pendingAwardsOnVictory_; }
    }

    /// <summary>Field number for the "reports_available" field.</summary>
    public const int ReportsAvailableFieldNumber = 52;
    private readonly static uint ReportsAvailableDefaultValue = 0;

    private uint reportsAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReportsAvailable {
      get { if ((_hasBits0 & 256) != 0) { return reportsAvailable_; } else { return ReportsAvailableDefaultValue; } }
      set {
        _hasBits0 |= 256;
        reportsAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "reports_available" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportsAvailable {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "reports_available" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportsAvailable() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "live_spectator_account_id" field.</summary>
    public const int LiveSpectatorAccountIdFieldNumber = 55;
    private readonly static uint LiveSpectatorAccountIdDefaultValue = 0;

    private uint liveSpectatorAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LiveSpectatorAccountId {
      get { if ((_hasBits0 & 512) != 0) { return liveSpectatorAccountId_; } else { return LiveSpectatorAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 512;
        liveSpectatorAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "live_spectator_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLiveSpectatorAccountId {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "live_spectator_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLiveSpectatorAccountId() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "comms_reports_available" field.</summary>
    public const int CommsReportsAvailableFieldNumber = 56;
    private readonly static uint CommsReportsAvailableDefaultValue = 0;

    private uint commsReportsAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CommsReportsAvailable {
      get { if ((_hasBits0 & 1024) != 0) { return commsReportsAvailable_; } else { return CommsReportsAvailableDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        commsReportsAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "comms_reports_available" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCommsReportsAvailable {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "comms_reports_available" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommsReportsAvailable() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTALobbyMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTALobbyMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (HeroId != other.HeroId) return false;
      if (Team != other.Team) return false;
      if (Slot != other.Slot) return false;
      if (LeaverStatus != other.LeaverStatus) return false;
      if (LeaverActions != other.LeaverActions) return false;
      if (CoachTeam != other.CoachTeam) return false;
      if(!customGameProductIds_.Equals(other.customGameProductIds_)) return false;
      if (LiveSpectatorTeam != other.LiveSpectatorTeam) return false;
      if(!pendingAwards_.Equals(other.pendingAwards_)) return false;
      if(!pendingAwardsOnVictory_.Equals(other.pendingAwardsOnVictory_)) return false;
      if (ReportsAvailable != other.ReportsAvailable) return false;
      if (LiveSpectatorAccountId != other.LiveSpectatorAccountId) return false;
      if (CommsReportsAvailable != other.CommsReportsAvailable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasTeam) hash ^= Team.GetHashCode();
      if (HasSlot) hash ^= Slot.GetHashCode();
      if (HasLeaverStatus) hash ^= LeaverStatus.GetHashCode();
      if (HasLeaverActions) hash ^= LeaverActions.GetHashCode();
      if (HasCoachTeam) hash ^= CoachTeam.GetHashCode();
      hash ^= customGameProductIds_.GetHashCode();
      if (HasLiveSpectatorTeam) hash ^= LiveSpectatorTeam.GetHashCode();
      hash ^= pendingAwards_.GetHashCode();
      hash ^= pendingAwardsOnVictory_.GetHashCode();
      if (HasReportsAvailable) hash ^= ReportsAvailable.GetHashCode();
      if (HasLiveSpectatorAccountId) hash ^= LiveSpectatorAccountId.GetHashCode();
      if (HasCommsReportsAvailable) hash ^= CommsReportsAvailable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(9);
        output.WriteFixed64(Id);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (HasTeam) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Team);
      }
      if (HasSlot) {
        output.WriteRawTag(56);
        output.WriteUInt32(Slot);
      }
      if (HasLeaverStatus) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) LeaverStatus);
      }
      if (HasCoachTeam) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) CoachTeam);
      }
      if (HasLeaverActions) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(LeaverActions);
      }
      customGameProductIds_.WriteTo(output, _repeated_customGameProductIds_codec);
      if (HasLiveSpectatorTeam) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) LiveSpectatorTeam);
      }
      pendingAwards_.WriteTo(output, _repeated_pendingAwards_codec);
      pendingAwardsOnVictory_.WriteTo(output, _repeated_pendingAwardsOnVictory_codec);
      if (HasReportsAvailable) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(ReportsAvailable);
      }
      if (HasLiveSpectatorAccountId) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(LiveSpectatorAccountId);
      }
      if (HasCommsReportsAvailable) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(CommsReportsAvailable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(9);
        output.WriteFixed64(Id);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (HasTeam) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Team);
      }
      if (HasSlot) {
        output.WriteRawTag(56);
        output.WriteUInt32(Slot);
      }
      if (HasLeaverStatus) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) LeaverStatus);
      }
      if (HasCoachTeam) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) CoachTeam);
      }
      if (HasLeaverActions) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(LeaverActions);
      }
      customGameProductIds_.WriteTo(ref output, _repeated_customGameProductIds_codec);
      if (HasLiveSpectatorTeam) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) LiveSpectatorTeam);
      }
      pendingAwards_.WriteTo(ref output, _repeated_pendingAwards_codec);
      pendingAwardsOnVictory_.WriteTo(ref output, _repeated_pendingAwardsOnVictory_codec);
      if (HasReportsAvailable) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(ReportsAvailable);
      }
      if (HasLiveSpectatorAccountId) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(LiveSpectatorAccountId);
      }
      if (HasCommsReportsAvailable) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(CommsReportsAvailable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + 8;
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasTeam) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Team);
      }
      if (HasSlot) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Slot);
      }
      if (HasLeaverStatus) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LeaverStatus);
      }
      if (HasLeaverActions) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeaverActions);
      }
      if (HasCoachTeam) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CoachTeam);
      }
      size += customGameProductIds_.CalculateSize(_repeated_customGameProductIds_codec);
      if (HasLiveSpectatorTeam) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LiveSpectatorTeam);
      }
      size += pendingAwards_.CalculateSize(_repeated_pendingAwards_codec);
      size += pendingAwardsOnVictory_.CalculateSize(_repeated_pendingAwardsOnVictory_codec);
      if (HasReportsAvailable) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReportsAvailable);
      }
      if (HasLiveSpectatorAccountId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LiveSpectatorAccountId);
      }
      if (HasCommsReportsAvailable) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CommsReportsAvailable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTALobbyMember other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasTeam) {
        Team = other.Team;
      }
      if (other.HasSlot) {
        Slot = other.Slot;
      }
      if (other.HasLeaverStatus) {
        LeaverStatus = other.LeaverStatus;
      }
      if (other.HasLeaverActions) {
        LeaverActions = other.LeaverActions;
      }
      if (other.HasCoachTeam) {
        CoachTeam = other.CoachTeam;
      }
      customGameProductIds_.Add(other.customGameProductIds_);
      if (other.HasLiveSpectatorTeam) {
        LiveSpectatorTeam = other.LiveSpectatorTeam;
      }
      pendingAwards_.Add(other.pendingAwards_);
      pendingAwardsOnVictory_.Add(other.pendingAwardsOnVictory_);
      if (other.HasReportsAvailable) {
        ReportsAvailable = other.ReportsAvailable;
      }
      if (other.HasLiveSpectatorAccountId) {
        LiveSpectatorAccountId = other.LiveSpectatorAccountId;
      }
      if (other.HasCommsReportsAvailable) {
        CommsReportsAvailable = other.CommsReportsAvailable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Id = input.ReadFixed64();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 24: {
            Team = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
            break;
          }
          case 56: {
            Slot = input.ReadUInt32();
            break;
          }
          case 128: {
            LeaverStatus = (global::Steam.Protos.Dota2.DOTALeaverStatus_t) input.ReadEnum();
            break;
          }
          case 184: {
            CoachTeam = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
            break;
          }
          case 224: {
            LeaverActions = input.ReadUInt32();
            break;
          }
          case 250:
          case 248: {
            customGameProductIds_.AddEntriesFrom(input, _repeated_customGameProductIds_codec);
            break;
          }
          case 320: {
            LiveSpectatorTeam = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
            break;
          }
          case 354: {
            pendingAwards_.AddEntriesFrom(input, _repeated_pendingAwards_codec);
            break;
          }
          case 362: {
            pendingAwardsOnVictory_.AddEntriesFrom(input, _repeated_pendingAwardsOnVictory_codec);
            break;
          }
          case 416: {
            ReportsAvailable = input.ReadUInt32();
            break;
          }
          case 440: {
            LiveSpectatorAccountId = input.ReadUInt32();
            break;
          }
          case 448: {
            CommsReportsAvailable = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Id = input.ReadFixed64();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 24: {
            Team = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
            break;
          }
          case 56: {
            Slot = input.ReadUInt32();
            break;
          }
          case 128: {
            LeaverStatus = (global::Steam.Protos.Dota2.DOTALeaverStatus_t) input.ReadEnum();
            break;
          }
          case 184: {
            CoachTeam = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
            break;
          }
          case 224: {
            LeaverActions = input.ReadUInt32();
            break;
          }
          case 250:
          case 248: {
            customGameProductIds_.AddEntriesFrom(ref input, _repeated_customGameProductIds_codec);
            break;
          }
          case 320: {
            LiveSpectatorTeam = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
            break;
          }
          case 354: {
            pendingAwards_.AddEntriesFrom(ref input, _repeated_pendingAwards_codec);
            break;
          }
          case 362: {
            pendingAwardsOnVictory_.AddEntriesFrom(ref input, _repeated_pendingAwardsOnVictory_codec);
            break;
          }
          case 416: {
            ReportsAvailable = input.ReadUInt32();
            break;
          }
          case 440: {
            LiveSpectatorAccountId = input.ReadUInt32();
            break;
          }
          case 448: {
            CommsReportsAvailable = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSODOTAServerLobbyMember : pb::IMessage<CSODOTAServerLobbyMember>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAServerLobbyMember> _parser = new pb::MessageParser<CSODOTAServerLobbyMember>(() => new CSODOTAServerLobbyMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAServerLobbyMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerLobbyMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerLobbyMember(CSODOTAServerLobbyMember other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerLobbyMember Clone() {
      return new CSODOTAServerLobbyMember(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAServerLobbyMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAServerLobbyMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAServerLobbyMember other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CSODOTAStaticLobbyMember : pb::IMessage<CSODOTAStaticLobbyMember>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAStaticLobbyMember> _parser = new pb::MessageParser<CSODOTAStaticLobbyMember>(() => new CSODOTAStaticLobbyMember());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAStaticLobbyMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAStaticLobbyMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAStaticLobbyMember(CSODOTAStaticLobbyMember other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      partyId_ = other.partyId_;
      channel_ = other.channel_;
      cameraman_ = other.cameraman_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAStaticLobbyMember Clone() {
      return new CSODOTAStaticLobbyMember(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "party_id" field.</summary>
    public const int PartyIdFieldNumber = 2;
    private readonly static ulong PartyIdDefaultValue = 0UL;

    private ulong partyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PartyId {
      get { if ((_hasBits0 & 1) != 0) { return partyId_; } else { return PartyIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        partyId_ = value;
      }
    }
    /// <summary>Gets whether the "party_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartyId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "party_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartyId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private readonly static uint ChannelDefaultValue = 6;

    private uint channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Channel {
      get { if ((_hasBits0 & 2) != 0) { return channel_; } else { return ChannelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        channel_ = value;
      }
    }
    /// <summary>Gets whether the "channel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "channel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cameraman" field.</summary>
    public const int CameramanFieldNumber = 4;
    private readonly static bool CameramanDefaultValue = false;

    private bool cameraman_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cameraman {
      get { if ((_hasBits0 & 4) != 0) { return cameraman_; } else { return CameramanDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cameraman_ = value;
      }
    }
    /// <summary>Gets whether the "cameraman" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCameraman {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cameraman" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCameraman() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAStaticLobbyMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAStaticLobbyMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PartyId != other.PartyId) return false;
      if (Channel != other.Channel) return false;
      if (Cameraman != other.Cameraman) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasPartyId) hash ^= PartyId.GetHashCode();
      if (HasChannel) hash ^= Channel.GetHashCode();
      if (HasCameraman) hash ^= Cameraman.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasPartyId) {
        output.WriteRawTag(16);
        output.WriteUInt64(PartyId);
      }
      if (HasChannel) {
        output.WriteRawTag(24);
        output.WriteUInt32(Channel);
      }
      if (HasCameraman) {
        output.WriteRawTag(32);
        output.WriteBool(Cameraman);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasPartyId) {
        output.WriteRawTag(16);
        output.WriteUInt64(PartyId);
      }
      if (HasChannel) {
        output.WriteRawTag(24);
        output.WriteUInt32(Channel);
      }
      if (HasCameraman) {
        output.WriteRawTag(32);
        output.WriteBool(Cameraman);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasPartyId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PartyId);
      }
      if (HasChannel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
      }
      if (HasCameraman) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAStaticLobbyMember other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasPartyId) {
        PartyId = other.PartyId;
      }
      if (other.HasChannel) {
        Channel = other.Channel;
      }
      if (other.HasCameraman) {
        Cameraman = other.Cameraman;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            PartyId = input.ReadUInt64();
            break;
          }
          case 24: {
            Channel = input.ReadUInt32();
            break;
          }
          case 32: {
            Cameraman = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            PartyId = input.ReadUInt64();
            break;
          }
          case 24: {
            Channel = input.ReadUInt32();
            break;
          }
          case 32: {
            Cameraman = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSODOTAServerStaticLobbyMember : pb::IMessage<CSODOTAServerStaticLobbyMember>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAServerStaticLobbyMember> _parser = new pb::MessageParser<CSODOTAServerStaticLobbyMember>(() => new CSODOTAServerStaticLobbyMember());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAServerStaticLobbyMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerStaticLobbyMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerStaticLobbyMember(CSODOTAServerStaticLobbyMember other) : this() {
      _hasBits0 = other._hasBits0;
      steamId_ = other.steamId_;
      rankTier_ = other.rankTier_;
      leaderboardRank_ = other.leaderboardRank_;
      laneSelectionFlags_ = other.laneSelectionFlags_;
      rankMmrBoostType_ = other.rankMmrBoostType_;
      coachRating_ = other.coachRating_;
      coachedAccountIds_ = other.coachedAccountIds_.Clone();
      wasMvpLastGame_ = other.wasMvpLastGame_;
      canEarnRewards_ = other.canEarnRewards_;
      isPlusSubscriber_ = other.isPlusSubscriber_;
      favoriteTeamPacked_ = other.favoriteTeamPacked_;
      isSteamChina_ = other.isSteamChina_;
      title_ = other.title_;
      guildId_ = other.guildId_;
      disabledRandomHeroBits_ = other.disabledRandomHeroBits_.Clone();
      disabledHeroId_ = other.disabledHeroId_.Clone();
      enabledHeroId_ = other.enabledHeroId_.Clone();
      bannedHeroIds_ = other.bannedHeroIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerStaticLobbyMember Clone() {
      return new CSODOTAServerStaticLobbyMember(this);
    }

    /// <summary>Field number for the "steam_id" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private readonly static ulong SteamIdDefaultValue = 0UL;

    private ulong steamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamId {
      get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        steamId_ = value;
      }
    }
    /// <summary>Gets whether the "steam_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSteamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "steam_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSteamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rank_tier" field.</summary>
    public const int RankTierFieldNumber = 3;
    private readonly static int RankTierDefaultValue = 0;

    private int rankTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankTier {
      get { if ((_hasBits0 & 2) != 0) { return rankTier_; } else { return RankTierDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rankTier_ = value;
      }
    }
    /// <summary>Gets whether the "rank_tier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRankTier {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "rank_tier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRankTier() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "leaderboard_rank" field.</summary>
    public const int LeaderboardRankFieldNumber = 4;
    private readonly static int LeaderboardRankDefaultValue = -1;

    private int leaderboardRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeaderboardRank {
      get { if ((_hasBits0 & 4) != 0) { return leaderboardRank_; } else { return LeaderboardRankDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leaderboardRank_ = value;
      }
    }
    /// <summary>Gets whether the "leaderboard_rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaderboardRank {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "leaderboard_rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaderboardRank() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "lane_selection_flags" field.</summary>
    public const int LaneSelectionFlagsFieldNumber = 5;
    private readonly static int LaneSelectionFlagsDefaultValue = 0;

    private int laneSelectionFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneSelectionFlags {
      get { if ((_hasBits0 & 8) != 0) { return laneSelectionFlags_; } else { return LaneSelectionFlagsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        laneSelectionFlags_ = value;
      }
    }
    /// <summary>Gets whether the "lane_selection_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneSelectionFlags {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "lane_selection_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneSelectionFlags() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "rank_mmr_boost_type" field.</summary>
    public const int RankMmrBoostTypeFieldNumber = 6;
    private readonly static global::Steam.Protos.Dota2.EDOTAMMRBoostType RankMmrBoostTypeDefaultValue = global::Steam.Protos.Dota2.EDOTAMMRBoostType.KEdotammrboostTypeNone;

    private global::Steam.Protos.Dota2.EDOTAMMRBoostType rankMmrBoostType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EDOTAMMRBoostType RankMmrBoostType {
      get { if ((_hasBits0 & 16) != 0) { return rankMmrBoostType_; } else { return RankMmrBoostTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        rankMmrBoostType_ = value;
      }
    }
    /// <summary>Gets whether the "rank_mmr_boost_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRankMmrBoostType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "rank_mmr_boost_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRankMmrBoostType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "coach_rating" field.</summary>
    public const int CoachRatingFieldNumber = 7;
    private readonly static int CoachRatingDefaultValue = 0;

    private int coachRating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoachRating {
      get { if ((_hasBits0 & 32) != 0) { return coachRating_; } else { return CoachRatingDefaultValue; } }
      set {
        _hasBits0 |= 32;
        coachRating_ = value;
      }
    }
    /// <summary>Gets whether the "coach_rating" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCoachRating {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "coach_rating" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCoachRating() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "coached_account_ids" field.</summary>
    public const int CoachedAccountIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_coachedAccountIds_codec
        = pb::FieldCodec.ForUInt32(64);
    private readonly pbc::RepeatedField<uint> coachedAccountIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CoachedAccountIds {
      get { return coachedAccountIds_; }
    }

    /// <summary>Field number for the "was_mvp_last_game" field.</summary>
    public const int WasMvpLastGameFieldNumber = 9;
    private readonly static bool WasMvpLastGameDefaultValue = false;

    private bool wasMvpLastGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WasMvpLastGame {
      get { if ((_hasBits0 & 64) != 0) { return wasMvpLastGame_; } else { return WasMvpLastGameDefaultValue; } }
      set {
        _hasBits0 |= 64;
        wasMvpLastGame_ = value;
      }
    }
    /// <summary>Gets whether the "was_mvp_last_game" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWasMvpLastGame {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "was_mvp_last_game" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWasMvpLastGame() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "can_earn_rewards" field.</summary>
    public const int CanEarnRewardsFieldNumber = 10;
    private readonly static bool CanEarnRewardsDefaultValue = false;

    private bool canEarnRewards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanEarnRewards {
      get { if ((_hasBits0 & 128) != 0) { return canEarnRewards_; } else { return CanEarnRewardsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        canEarnRewards_ = value;
      }
    }
    /// <summary>Gets whether the "can_earn_rewards" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCanEarnRewards {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "can_earn_rewards" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCanEarnRewards() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "is_plus_subscriber" field.</summary>
    public const int IsPlusSubscriberFieldNumber = 11;
    private readonly static bool IsPlusSubscriberDefaultValue = false;

    private bool isPlusSubscriber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlusSubscriber {
      get { if ((_hasBits0 & 256) != 0) { return isPlusSubscriber_; } else { return IsPlusSubscriberDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isPlusSubscriber_ = value;
      }
    }
    /// <summary>Gets whether the "is_plus_subscriber" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPlusSubscriber {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_plus_subscriber" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPlusSubscriber() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "favorite_team_packed" field.</summary>
    public const int FavoriteTeamPackedFieldNumber = 12;
    private readonly static ulong FavoriteTeamPackedDefaultValue = 0UL;

    private ulong favoriteTeamPacked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FavoriteTeamPacked {
      get { if ((_hasBits0 & 512) != 0) { return favoriteTeamPacked_; } else { return FavoriteTeamPackedDefaultValue; } }
      set {
        _hasBits0 |= 512;
        favoriteTeamPacked_ = value;
      }
    }
    /// <summary>Gets whether the "favorite_team_packed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFavoriteTeamPacked {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "favorite_team_packed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFavoriteTeamPacked() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "is_steam_china" field.</summary>
    public const int IsSteamChinaFieldNumber = 13;
    private readonly static bool IsSteamChinaDefaultValue = false;

    private bool isSteamChina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSteamChina {
      get { if ((_hasBits0 & 1024) != 0) { return isSteamChina_; } else { return IsSteamChinaDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        isSteamChina_ = value;
      }
    }
    /// <summary>Gets whether the "is_steam_china" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsSteamChina {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "is_steam_china" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsSteamChina() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 14;
    private readonly static uint TitleDefaultValue = 0;

    private uint title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Title {
      get { if ((_hasBits0 & 2048) != 0) { return title_; } else { return TitleDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        title_ = value;
      }
    }
    /// <summary>Gets whether the "title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 15;
    private readonly static uint GuildIdDefaultValue = 0;

    private uint guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildId {
      get { if ((_hasBits0 & 4096) != 0) { return guildId_; } else { return GuildIdDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        guildId_ = value;
      }
    }
    /// <summary>Gets whether the "guild_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildId {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "guild_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildId() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "disabled_random_hero_bits" field.</summary>
    public const int DisabledRandomHeroBitsFieldNumber = 16;
    private static readonly pb::FieldCodec<uint> _repeated_disabledRandomHeroBits_codec
        = pb::FieldCodec.ForFixed32(133);
    private readonly pbc::RepeatedField<uint> disabledRandomHeroBits_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DisabledRandomHeroBits {
      get { return disabledRandomHeroBits_; }
    }

    /// <summary>Field number for the "disabled_hero_id" field.</summary>
    public const int DisabledHeroIdFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_disabledHeroId_codec
        = pb::FieldCodec.ForInt32(136);
    private readonly pbc::RepeatedField<int> disabledHeroId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DisabledHeroId {
      get { return disabledHeroId_; }
    }

    /// <summary>Field number for the "enabled_hero_id" field.</summary>
    public const int EnabledHeroIdFieldNumber = 18;
    private static readonly pb::FieldCodec<int> _repeated_enabledHeroId_codec
        = pb::FieldCodec.ForInt32(144);
    private readonly pbc::RepeatedField<int> enabledHeroId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EnabledHeroId {
      get { return enabledHeroId_; }
    }

    /// <summary>Field number for the "banned_hero_ids" field.</summary>
    public const int BannedHeroIdsFieldNumber = 19;
    private static readonly pb::FieldCodec<int> _repeated_bannedHeroIds_codec
        = pb::FieldCodec.ForInt32(152);
    private readonly pbc::RepeatedField<int> bannedHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BannedHeroIds {
      get { return bannedHeroIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAServerStaticLobbyMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAServerStaticLobbyMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (RankTier != other.RankTier) return false;
      if (LeaderboardRank != other.LeaderboardRank) return false;
      if (LaneSelectionFlags != other.LaneSelectionFlags) return false;
      if (RankMmrBoostType != other.RankMmrBoostType) return false;
      if (CoachRating != other.CoachRating) return false;
      if(!coachedAccountIds_.Equals(other.coachedAccountIds_)) return false;
      if (WasMvpLastGame != other.WasMvpLastGame) return false;
      if (CanEarnRewards != other.CanEarnRewards) return false;
      if (IsPlusSubscriber != other.IsPlusSubscriber) return false;
      if (FavoriteTeamPacked != other.FavoriteTeamPacked) return false;
      if (IsSteamChina != other.IsSteamChina) return false;
      if (Title != other.Title) return false;
      if (GuildId != other.GuildId) return false;
      if(!disabledRandomHeroBits_.Equals(other.disabledRandomHeroBits_)) return false;
      if(!disabledHeroId_.Equals(other.disabledHeroId_)) return false;
      if(!enabledHeroId_.Equals(other.enabledHeroId_)) return false;
      if(!bannedHeroIds_.Equals(other.bannedHeroIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSteamId) hash ^= SteamId.GetHashCode();
      if (HasRankTier) hash ^= RankTier.GetHashCode();
      if (HasLeaderboardRank) hash ^= LeaderboardRank.GetHashCode();
      if (HasLaneSelectionFlags) hash ^= LaneSelectionFlags.GetHashCode();
      if (HasRankMmrBoostType) hash ^= RankMmrBoostType.GetHashCode();
      if (HasCoachRating) hash ^= CoachRating.GetHashCode();
      hash ^= coachedAccountIds_.GetHashCode();
      if (HasWasMvpLastGame) hash ^= WasMvpLastGame.GetHashCode();
      if (HasCanEarnRewards) hash ^= CanEarnRewards.GetHashCode();
      if (HasIsPlusSubscriber) hash ^= IsPlusSubscriber.GetHashCode();
      if (HasFavoriteTeamPacked) hash ^= FavoriteTeamPacked.GetHashCode();
      if (HasIsSteamChina) hash ^= IsSteamChina.GetHashCode();
      if (HasTitle) hash ^= Title.GetHashCode();
      if (HasGuildId) hash ^= GuildId.GetHashCode();
      hash ^= disabledRandomHeroBits_.GetHashCode();
      hash ^= disabledHeroId_.GetHashCode();
      hash ^= enabledHeroId_.GetHashCode();
      hash ^= bannedHeroIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSteamId) {
        output.WriteRawTag(9);
        output.WriteFixed64(SteamId);
      }
      if (HasRankTier) {
        output.WriteRawTag(24);
        output.WriteInt32(RankTier);
      }
      if (HasLeaderboardRank) {
        output.WriteRawTag(32);
        output.WriteInt32(LeaderboardRank);
      }
      if (HasLaneSelectionFlags) {
        output.WriteRawTag(40);
        output.WriteInt32(LaneSelectionFlags);
      }
      if (HasRankMmrBoostType) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RankMmrBoostType);
      }
      if (HasCoachRating) {
        output.WriteRawTag(56);
        output.WriteInt32(CoachRating);
      }
      coachedAccountIds_.WriteTo(output, _repeated_coachedAccountIds_codec);
      if (HasWasMvpLastGame) {
        output.WriteRawTag(72);
        output.WriteBool(WasMvpLastGame);
      }
      if (HasCanEarnRewards) {
        output.WriteRawTag(80);
        output.WriteBool(CanEarnRewards);
      }
      if (HasIsPlusSubscriber) {
        output.WriteRawTag(88);
        output.WriteBool(IsPlusSubscriber);
      }
      if (HasFavoriteTeamPacked) {
        output.WriteRawTag(96);
        output.WriteUInt64(FavoriteTeamPacked);
      }
      if (HasIsSteamChina) {
        output.WriteRawTag(104);
        output.WriteBool(IsSteamChina);
      }
      if (HasTitle) {
        output.WriteRawTag(112);
        output.WriteUInt32(Title);
      }
      if (HasGuildId) {
        output.WriteRawTag(120);
        output.WriteUInt32(GuildId);
      }
      disabledRandomHeroBits_.WriteTo(output, _repeated_disabledRandomHeroBits_codec);
      disabledHeroId_.WriteTo(output, _repeated_disabledHeroId_codec);
      enabledHeroId_.WriteTo(output, _repeated_enabledHeroId_codec);
      bannedHeroIds_.WriteTo(output, _repeated_bannedHeroIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSteamId) {
        output.WriteRawTag(9);
        output.WriteFixed64(SteamId);
      }
      if (HasRankTier) {
        output.WriteRawTag(24);
        output.WriteInt32(RankTier);
      }
      if (HasLeaderboardRank) {
        output.WriteRawTag(32);
        output.WriteInt32(LeaderboardRank);
      }
      if (HasLaneSelectionFlags) {
        output.WriteRawTag(40);
        output.WriteInt32(LaneSelectionFlags);
      }
      if (HasRankMmrBoostType) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RankMmrBoostType);
      }
      if (HasCoachRating) {
        output.WriteRawTag(56);
        output.WriteInt32(CoachRating);
      }
      coachedAccountIds_.WriteTo(ref output, _repeated_coachedAccountIds_codec);
      if (HasWasMvpLastGame) {
        output.WriteRawTag(72);
        output.WriteBool(WasMvpLastGame);
      }
      if (HasCanEarnRewards) {
        output.WriteRawTag(80);
        output.WriteBool(CanEarnRewards);
      }
      if (HasIsPlusSubscriber) {
        output.WriteRawTag(88);
        output.WriteBool(IsPlusSubscriber);
      }
      if (HasFavoriteTeamPacked) {
        output.WriteRawTag(96);
        output.WriteUInt64(FavoriteTeamPacked);
      }
      if (HasIsSteamChina) {
        output.WriteRawTag(104);
        output.WriteBool(IsSteamChina);
      }
      if (HasTitle) {
        output.WriteRawTag(112);
        output.WriteUInt32(Title);
      }
      if (HasGuildId) {
        output.WriteRawTag(120);
        output.WriteUInt32(GuildId);
      }
      disabledRandomHeroBits_.WriteTo(ref output, _repeated_disabledRandomHeroBits_codec);
      disabledHeroId_.WriteTo(ref output, _repeated_disabledHeroId_codec);
      enabledHeroId_.WriteTo(ref output, _repeated_enabledHeroId_codec);
      bannedHeroIds_.WriteTo(ref output, _repeated_bannedHeroIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSteamId) {
        size += 1 + 8;
      }
      if (HasRankTier) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankTier);
      }
      if (HasLeaderboardRank) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaderboardRank);
      }
      if (HasLaneSelectionFlags) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneSelectionFlags);
      }
      if (HasRankMmrBoostType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RankMmrBoostType);
      }
      if (HasCoachRating) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoachRating);
      }
      size += coachedAccountIds_.CalculateSize(_repeated_coachedAccountIds_codec);
      if (HasWasMvpLastGame) {
        size += 1 + 1;
      }
      if (HasCanEarnRewards) {
        size += 1 + 1;
      }
      if (HasIsPlusSubscriber) {
        size += 1 + 1;
      }
      if (HasFavoriteTeamPacked) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FavoriteTeamPacked);
      }
      if (HasIsSteamChina) {
        size += 1 + 1;
      }
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Title);
      }
      if (HasGuildId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildId);
      }
      size += disabledRandomHeroBits_.CalculateSize(_repeated_disabledRandomHeroBits_codec);
      size += disabledHeroId_.CalculateSize(_repeated_disabledHeroId_codec);
      size += enabledHeroId_.CalculateSize(_repeated_enabledHeroId_codec);
      size += bannedHeroIds_.CalculateSize(_repeated_bannedHeroIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAServerStaticLobbyMember other) {
      if (other == null) {
        return;
      }
      if (other.HasSteamId) {
        SteamId = other.SteamId;
      }
      if (other.HasRankTier) {
        RankTier = other.RankTier;
      }
      if (other.HasLeaderboardRank) {
        LeaderboardRank = other.LeaderboardRank;
      }
      if (other.HasLaneSelectionFlags) {
        LaneSelectionFlags = other.LaneSelectionFlags;
      }
      if (other.HasRankMmrBoostType) {
        RankMmrBoostType = other.RankMmrBoostType;
      }
      if (other.HasCoachRating) {
        CoachRating = other.CoachRating;
      }
      coachedAccountIds_.Add(other.coachedAccountIds_);
      if (other.HasWasMvpLastGame) {
        WasMvpLastGame = other.WasMvpLastGame;
      }
      if (other.HasCanEarnRewards) {
        CanEarnRewards = other.CanEarnRewards;
      }
      if (other.HasIsPlusSubscriber) {
        IsPlusSubscriber = other.IsPlusSubscriber;
      }
      if (other.HasFavoriteTeamPacked) {
        FavoriteTeamPacked = other.FavoriteTeamPacked;
      }
      if (other.HasIsSteamChina) {
        IsSteamChina = other.IsSteamChina;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasGuildId) {
        GuildId = other.GuildId;
      }
      disabledRandomHeroBits_.Add(other.disabledRandomHeroBits_);
      disabledHeroId_.Add(other.disabledHeroId_);
      enabledHeroId_.Add(other.enabledHeroId_);
      bannedHeroIds_.Add(other.bannedHeroIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            SteamId = input.ReadFixed64();
            break;
          }
          case 24: {
            RankTier = input.ReadInt32();
            break;
          }
          case 32: {
            LeaderboardRank = input.ReadInt32();
            break;
          }
          case 40: {
            LaneSelectionFlags = input.ReadInt32();
            break;
          }
          case 48: {
            RankMmrBoostType = (global::Steam.Protos.Dota2.EDOTAMMRBoostType) input.ReadEnum();
            break;
          }
          case 56: {
            CoachRating = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            coachedAccountIds_.AddEntriesFrom(input, _repeated_coachedAccountIds_codec);
            break;
          }
          case 72: {
            WasMvpLastGame = input.ReadBool();
            break;
          }
          case 80: {
            CanEarnRewards = input.ReadBool();
            break;
          }
          case 88: {
            IsPlusSubscriber = input.ReadBool();
            break;
          }
          case 96: {
            FavoriteTeamPacked = input.ReadUInt64();
            break;
          }
          case 104: {
            IsSteamChina = input.ReadBool();
            break;
          }
          case 112: {
            Title = input.ReadUInt32();
            break;
          }
          case 120: {
            GuildId = input.ReadUInt32();
            break;
          }
          case 130:
          case 133: {
            disabledRandomHeroBits_.AddEntriesFrom(input, _repeated_disabledRandomHeroBits_codec);
            break;
          }
          case 138:
          case 136: {
            disabledHeroId_.AddEntriesFrom(input, _repeated_disabledHeroId_codec);
            break;
          }
          case 146:
          case 144: {
            enabledHeroId_.AddEntriesFrom(input, _repeated_enabledHeroId_codec);
            break;
          }
          case 154:
          case 152: {
            bannedHeroIds_.AddEntriesFrom(input, _repeated_bannedHeroIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            SteamId = input.ReadFixed64();
            break;
          }
          case 24: {
            RankTier = input.ReadInt32();
            break;
          }
          case 32: {
            LeaderboardRank = input.ReadInt32();
            break;
          }
          case 40: {
            LaneSelectionFlags = input.ReadInt32();
            break;
          }
          case 48: {
            RankMmrBoostType = (global::Steam.Protos.Dota2.EDOTAMMRBoostType) input.ReadEnum();
            break;
          }
          case 56: {
            CoachRating = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            coachedAccountIds_.AddEntriesFrom(ref input, _repeated_coachedAccountIds_codec);
            break;
          }
          case 72: {
            WasMvpLastGame = input.ReadBool();
            break;
          }
          case 80: {
            CanEarnRewards = input.ReadBool();
            break;
          }
          case 88: {
            IsPlusSubscriber = input.ReadBool();
            break;
          }
          case 96: {
            FavoriteTeamPacked = input.ReadUInt64();
            break;
          }
          case 104: {
            IsSteamChina = input.ReadBool();
            break;
          }
          case 112: {
            Title = input.ReadUInt32();
            break;
          }
          case 120: {
            GuildId = input.ReadUInt32();
            break;
          }
          case 130:
          case 133: {
            disabledRandomHeroBits_.AddEntriesFrom(ref input, _repeated_disabledRandomHeroBits_codec);
            break;
          }
          case 138:
          case 136: {
            disabledHeroId_.AddEntriesFrom(ref input, _repeated_disabledHeroId_codec);
            break;
          }
          case 146:
          case 144: {
            enabledHeroId_.AddEntriesFrom(ref input, _repeated_enabledHeroId_codec);
            break;
          }
          case 154:
          case 152: {
            bannedHeroIds_.AddEntriesFrom(ref input, _repeated_bannedHeroIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CLobbyTeamDetails : pb::IMessage<CLobbyTeamDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLobbyTeamDetails> _parser = new pb::MessageParser<CLobbyTeamDetails>(() => new CLobbyTeamDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLobbyTeamDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyTeamDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyTeamDetails(CLobbyTeamDetails other) : this() {
      _hasBits0 = other._hasBits0;
      teamName_ = other.teamName_;
      teamTag_ = other.teamTag_;
      teamId_ = other.teamId_;
      teamLogo_ = other.teamLogo_;
      teamBaseLogo_ = other.teamBaseLogo_;
      teamBannerLogo_ = other.teamBannerLogo_;
      teamComplete_ = other.teamComplete_;
      rank_ = other.rank_;
      rankChange_ = other.rankChange_;
      isHomeTeam_ = other.isHomeTeam_;
      isChallengeMatch_ = other.isChallengeMatch_;
      challengeMatchTokenAccount_ = other.challengeMatchTokenAccount_;
      teamLogoUrl_ = other.teamLogoUrl_;
      teamAbbreviation_ = other.teamAbbreviation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyTeamDetails Clone() {
      return new CLobbyTeamDetails(this);
    }

    /// <summary>Field number for the "team_name" field.</summary>
    public const int TeamNameFieldNumber = 1;
    private readonly static string TeamNameDefaultValue = "";

    private string teamName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamName {
      get { return teamName_ ?? TeamNameDefaultValue; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "team_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamName {
      get { return teamName_ != null; }
    }
    /// <summary>Clears the value of the "team_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamName() {
      teamName_ = null;
    }

    /// <summary>Field number for the "team_tag" field.</summary>
    public const int TeamTagFieldNumber = 3;
    private readonly static string TeamTagDefaultValue = "";

    private string teamTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamTag {
      get { return teamTag_ ?? TeamTagDefaultValue; }
      set {
        teamTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "team_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamTag {
      get { return teamTag_ != null; }
    }
    /// <summary>Clears the value of the "team_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamTag() {
      teamTag_ = null;
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 4;
    private readonly static uint TeamIdDefaultValue = 0;

    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { if ((_hasBits0 & 1) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "team_logo" field.</summary>
    public const int TeamLogoFieldNumber = 5;
    private readonly static ulong TeamLogoDefaultValue = 0UL;

    private ulong teamLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamLogo {
      get { if ((_hasBits0 & 2) != 0) { return teamLogo_; } else { return TeamLogoDefaultValue; } }
      set {
        _hasBits0 |= 2;
        teamLogo_ = value;
      }
    }
    /// <summary>Gets whether the "team_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamLogo {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "team_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamLogo() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "team_base_logo" field.</summary>
    public const int TeamBaseLogoFieldNumber = 6;
    private readonly static ulong TeamBaseLogoDefaultValue = 0UL;

    private ulong teamBaseLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamBaseLogo {
      get { if ((_hasBits0 & 4) != 0) { return teamBaseLogo_; } else { return TeamBaseLogoDefaultValue; } }
      set {
        _hasBits0 |= 4;
        teamBaseLogo_ = value;
      }
    }
    /// <summary>Gets whether the "team_base_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamBaseLogo {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "team_base_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamBaseLogo() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "team_banner_logo" field.</summary>
    public const int TeamBannerLogoFieldNumber = 7;
    private readonly static ulong TeamBannerLogoDefaultValue = 0UL;

    private ulong teamBannerLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamBannerLogo {
      get { if ((_hasBits0 & 8) != 0) { return teamBannerLogo_; } else { return TeamBannerLogoDefaultValue; } }
      set {
        _hasBits0 |= 8;
        teamBannerLogo_ = value;
      }
    }
    /// <summary>Gets whether the "team_banner_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamBannerLogo {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "team_banner_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamBannerLogo() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "team_complete" field.</summary>
    public const int TeamCompleteFieldNumber = 8;
    private readonly static bool TeamCompleteDefaultValue = false;

    private bool teamComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TeamComplete {
      get { if ((_hasBits0 & 16) != 0) { return teamComplete_; } else { return TeamCompleteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        teamComplete_ = value;
      }
    }
    /// <summary>Gets whether the "team_complete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamComplete {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "team_complete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamComplete() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 15;
    private readonly static uint RankDefaultValue = 0;

    private uint rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { if ((_hasBits0 & 32) != 0) { return rank_; } else { return RankDefaultValue; } }
      set {
        _hasBits0 |= 32;
        rank_ = value;
      }
    }
    /// <summary>Gets whether the "rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRank {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRank() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "rank_change" field.</summary>
    public const int RankChangeFieldNumber = 16;
    private readonly static int RankChangeDefaultValue = 0;

    private int rankChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankChange {
      get { if ((_hasBits0 & 64) != 0) { return rankChange_; } else { return RankChangeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        rankChange_ = value;
      }
    }
    /// <summary>Gets whether the "rank_change" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRankChange {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "rank_change" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRankChange() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_home_team" field.</summary>
    public const int IsHomeTeamFieldNumber = 17;
    private readonly static bool IsHomeTeamDefaultValue = false;

    private bool isHomeTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHomeTeam {
      get { if ((_hasBits0 & 128) != 0) { return isHomeTeam_; } else { return IsHomeTeamDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isHomeTeam_ = value;
      }
    }
    /// <summary>Gets whether the "is_home_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsHomeTeam {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_home_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsHomeTeam() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "is_challenge_match" field.</summary>
    public const int IsChallengeMatchFieldNumber = 18;
    private readonly static bool IsChallengeMatchDefaultValue = false;

    private bool isChallengeMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsChallengeMatch {
      get { if ((_hasBits0 & 256) != 0) { return isChallengeMatch_; } else { return IsChallengeMatchDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isChallengeMatch_ = value;
      }
    }
    /// <summary>Gets whether the "is_challenge_match" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsChallengeMatch {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_challenge_match" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsChallengeMatch() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "challenge_match_token_account" field.</summary>
    public const int ChallengeMatchTokenAccountFieldNumber = 19;
    private readonly static ulong ChallengeMatchTokenAccountDefaultValue = 0UL;

    private ulong challengeMatchTokenAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChallengeMatchTokenAccount {
      get { if ((_hasBits0 & 512) != 0) { return challengeMatchTokenAccount_; } else { return ChallengeMatchTokenAccountDefaultValue; } }
      set {
        _hasBits0 |= 512;
        challengeMatchTokenAccount_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_match_token_account" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeMatchTokenAccount {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "challenge_match_token_account" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeMatchTokenAccount() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "team_logo_url" field.</summary>
    public const int TeamLogoUrlFieldNumber = 20;
    private readonly static string TeamLogoUrlDefaultValue = "";

    private string teamLogoUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamLogoUrl {
      get { return teamLogoUrl_ ?? TeamLogoUrlDefaultValue; }
      set {
        teamLogoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "team_logo_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamLogoUrl {
      get { return teamLogoUrl_ != null; }
    }
    /// <summary>Clears the value of the "team_logo_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamLogoUrl() {
      teamLogoUrl_ = null;
    }

    /// <summary>Field number for the "team_abbreviation" field.</summary>
    public const int TeamAbbreviationFieldNumber = 21;
    private readonly static string TeamAbbreviationDefaultValue = "";

    private string teamAbbreviation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamAbbreviation {
      get { return teamAbbreviation_ ?? TeamAbbreviationDefaultValue; }
      set {
        teamAbbreviation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "team_abbreviation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamAbbreviation {
      get { return teamAbbreviation_ != null; }
    }
    /// <summary>Clears the value of the "team_abbreviation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamAbbreviation() {
      teamAbbreviation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLobbyTeamDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLobbyTeamDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamName != other.TeamName) return false;
      if (TeamTag != other.TeamTag) return false;
      if (TeamId != other.TeamId) return false;
      if (TeamLogo != other.TeamLogo) return false;
      if (TeamBaseLogo != other.TeamBaseLogo) return false;
      if (TeamBannerLogo != other.TeamBannerLogo) return false;
      if (TeamComplete != other.TeamComplete) return false;
      if (Rank != other.Rank) return false;
      if (RankChange != other.RankChange) return false;
      if (IsHomeTeam != other.IsHomeTeam) return false;
      if (IsChallengeMatch != other.IsChallengeMatch) return false;
      if (ChallengeMatchTokenAccount != other.ChallengeMatchTokenAccount) return false;
      if (TeamLogoUrl != other.TeamLogoUrl) return false;
      if (TeamAbbreviation != other.TeamAbbreviation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTeamName) hash ^= TeamName.GetHashCode();
      if (HasTeamTag) hash ^= TeamTag.GetHashCode();
      if (HasTeamId) hash ^= TeamId.GetHashCode();
      if (HasTeamLogo) hash ^= TeamLogo.GetHashCode();
      if (HasTeamBaseLogo) hash ^= TeamBaseLogo.GetHashCode();
      if (HasTeamBannerLogo) hash ^= TeamBannerLogo.GetHashCode();
      if (HasTeamComplete) hash ^= TeamComplete.GetHashCode();
      if (HasRank) hash ^= Rank.GetHashCode();
      if (HasRankChange) hash ^= RankChange.GetHashCode();
      if (HasIsHomeTeam) hash ^= IsHomeTeam.GetHashCode();
      if (HasIsChallengeMatch) hash ^= IsChallengeMatch.GetHashCode();
      if (HasChallengeMatchTokenAccount) hash ^= ChallengeMatchTokenAccount.GetHashCode();
      if (HasTeamLogoUrl) hash ^= TeamLogoUrl.GetHashCode();
      if (HasTeamAbbreviation) hash ^= TeamAbbreviation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTeamName) {
        output.WriteRawTag(10);
        output.WriteString(TeamName);
      }
      if (HasTeamTag) {
        output.WriteRawTag(26);
        output.WriteString(TeamTag);
      }
      if (HasTeamId) {
        output.WriteRawTag(32);
        output.WriteUInt32(TeamId);
      }
      if (HasTeamLogo) {
        output.WriteRawTag(40);
        output.WriteUInt64(TeamLogo);
      }
      if (HasTeamBaseLogo) {
        output.WriteRawTag(48);
        output.WriteUInt64(TeamBaseLogo);
      }
      if (HasTeamBannerLogo) {
        output.WriteRawTag(56);
        output.WriteUInt64(TeamBannerLogo);
      }
      if (HasTeamComplete) {
        output.WriteRawTag(64);
        output.WriteBool(TeamComplete);
      }
      if (HasRank) {
        output.WriteRawTag(120);
        output.WriteUInt32(Rank);
      }
      if (HasRankChange) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(RankChange);
      }
      if (HasIsHomeTeam) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsHomeTeam);
      }
      if (HasIsChallengeMatch) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsChallengeMatch);
      }
      if (HasChallengeMatchTokenAccount) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(ChallengeMatchTokenAccount);
      }
      if (HasTeamLogoUrl) {
        output.WriteRawTag(162, 1);
        output.WriteString(TeamLogoUrl);
      }
      if (HasTeamAbbreviation) {
        output.WriteRawTag(170, 1);
        output.WriteString(TeamAbbreviation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTeamName) {
        output.WriteRawTag(10);
        output.WriteString(TeamName);
      }
      if (HasTeamTag) {
        output.WriteRawTag(26);
        output.WriteString(TeamTag);
      }
      if (HasTeamId) {
        output.WriteRawTag(32);
        output.WriteUInt32(TeamId);
      }
      if (HasTeamLogo) {
        output.WriteRawTag(40);
        output.WriteUInt64(TeamLogo);
      }
      if (HasTeamBaseLogo) {
        output.WriteRawTag(48);
        output.WriteUInt64(TeamBaseLogo);
      }
      if (HasTeamBannerLogo) {
        output.WriteRawTag(56);
        output.WriteUInt64(TeamBannerLogo);
      }
      if (HasTeamComplete) {
        output.WriteRawTag(64);
        output.WriteBool(TeamComplete);
      }
      if (HasRank) {
        output.WriteRawTag(120);
        output.WriteUInt32(Rank);
      }
      if (HasRankChange) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(RankChange);
      }
      if (HasIsHomeTeam) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsHomeTeam);
      }
      if (HasIsChallengeMatch) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsChallengeMatch);
      }
      if (HasChallengeMatchTokenAccount) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(ChallengeMatchTokenAccount);
      }
      if (HasTeamLogoUrl) {
        output.WriteRawTag(162, 1);
        output.WriteString(TeamLogoUrl);
      }
      if (HasTeamAbbreviation) {
        output.WriteRawTag(170, 1);
        output.WriteString(TeamAbbreviation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTeamName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (HasTeamTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamTag);
      }
      if (HasTeamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (HasTeamLogo) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamLogo);
      }
      if (HasTeamBaseLogo) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamBaseLogo);
      }
      if (HasTeamBannerLogo) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamBannerLogo);
      }
      if (HasTeamComplete) {
        size += 1 + 1;
      }
      if (HasRank) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (HasRankChange) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RankChange);
      }
      if (HasIsHomeTeam) {
        size += 2 + 1;
      }
      if (HasIsChallengeMatch) {
        size += 2 + 1;
      }
      if (HasChallengeMatchTokenAccount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ChallengeMatchTokenAccount);
      }
      if (HasTeamLogoUrl) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TeamLogoUrl);
      }
      if (HasTeamAbbreviation) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TeamAbbreviation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLobbyTeamDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasTeamName) {
        TeamName = other.TeamName;
      }
      if (other.HasTeamTag) {
        TeamTag = other.TeamTag;
      }
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      if (other.HasTeamLogo) {
        TeamLogo = other.TeamLogo;
      }
      if (other.HasTeamBaseLogo) {
        TeamBaseLogo = other.TeamBaseLogo;
      }
      if (other.HasTeamBannerLogo) {
        TeamBannerLogo = other.TeamBannerLogo;
      }
      if (other.HasTeamComplete) {
        TeamComplete = other.TeamComplete;
      }
      if (other.HasRank) {
        Rank = other.Rank;
      }
      if (other.HasRankChange) {
        RankChange = other.RankChange;
      }
      if (other.HasIsHomeTeam) {
        IsHomeTeam = other.IsHomeTeam;
      }
      if (other.HasIsChallengeMatch) {
        IsChallengeMatch = other.IsChallengeMatch;
      }
      if (other.HasChallengeMatchTokenAccount) {
        ChallengeMatchTokenAccount = other.ChallengeMatchTokenAccount;
      }
      if (other.HasTeamLogoUrl) {
        TeamLogoUrl = other.TeamLogoUrl;
      }
      if (other.HasTeamAbbreviation) {
        TeamAbbreviation = other.TeamAbbreviation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamName = input.ReadString();
            break;
          }
          case 26: {
            TeamTag = input.ReadString();
            break;
          }
          case 32: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 40: {
            TeamLogo = input.ReadUInt64();
            break;
          }
          case 48: {
            TeamBaseLogo = input.ReadUInt64();
            break;
          }
          case 56: {
            TeamBannerLogo = input.ReadUInt64();
            break;
          }
          case 64: {
            TeamComplete = input.ReadBool();
            break;
          }
          case 120: {
            Rank = input.ReadUInt32();
            break;
          }
          case 128: {
            RankChange = input.ReadSInt32();
            break;
          }
          case 136: {
            IsHomeTeam = input.ReadBool();
            break;
          }
          case 144: {
            IsChallengeMatch = input.ReadBool();
            break;
          }
          case 152: {
            ChallengeMatchTokenAccount = input.ReadUInt64();
            break;
          }
          case 162: {
            TeamLogoUrl = input.ReadString();
            break;
          }
          case 170: {
            TeamAbbreviation = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TeamName = input.ReadString();
            break;
          }
          case 26: {
            TeamTag = input.ReadString();
            break;
          }
          case 32: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 40: {
            TeamLogo = input.ReadUInt64();
            break;
          }
          case 48: {
            TeamBaseLogo = input.ReadUInt64();
            break;
          }
          case 56: {
            TeamBannerLogo = input.ReadUInt64();
            break;
          }
          case 64: {
            TeamComplete = input.ReadBool();
            break;
          }
          case 120: {
            Rank = input.ReadUInt32();
            break;
          }
          case 128: {
            RankChange = input.ReadSInt32();
            break;
          }
          case 136: {
            IsHomeTeam = input.ReadBool();
            break;
          }
          case 144: {
            IsChallengeMatch = input.ReadBool();
            break;
          }
          case 152: {
            ChallengeMatchTokenAccount = input.ReadUInt64();
            break;
          }
          case 162: {
            TeamLogoUrl = input.ReadString();
            break;
          }
          case 170: {
            TeamAbbreviation = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CLobbyGuildDetails : pb::IMessage<CLobbyGuildDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLobbyGuildDetails> _parser = new pb::MessageParser<CLobbyGuildDetails>(() => new CLobbyGuildDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLobbyGuildDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyGuildDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyGuildDetails(CLobbyGuildDetails other) : this() {
      _hasBits0 = other._hasBits0;
      guildId_ = other.guildId_;
      guildPrimaryColor_ = other.guildPrimaryColor_;
      guildSecondaryColor_ = other.guildSecondaryColor_;
      guildPattern_ = other.guildPattern_;
      guildLogo_ = other.guildLogo_;
      guildPoints_ = other.guildPoints_;
      guildEvent_ = other.guildEvent_;
      guildFlags_ = other.guildFlags_;
      teamForGuild_ = other.teamForGuild_;
      guildTag_ = other.guildTag_;
      guildWeeklyPercentile_ = other.guildWeeklyPercentile_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyGuildDetails Clone() {
      return new CLobbyGuildDetails(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private readonly static uint GuildIdDefaultValue = 0;

    private uint guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildId {
      get { if ((_hasBits0 & 1) != 0) { return guildId_; } else { return GuildIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        guildId_ = value;
      }
    }
    /// <summary>Gets whether the "guild_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "guild_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "guild_primary_color" field.</summary>
    public const int GuildPrimaryColorFieldNumber = 2;
    private readonly static uint GuildPrimaryColorDefaultValue = 0;

    private uint guildPrimaryColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildPrimaryColor {
      get { if ((_hasBits0 & 2) != 0) { return guildPrimaryColor_; } else { return GuildPrimaryColorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        guildPrimaryColor_ = value;
      }
    }
    /// <summary>Gets whether the "guild_primary_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildPrimaryColor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "guild_primary_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildPrimaryColor() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "guild_secondary_color" field.</summary>
    public const int GuildSecondaryColorFieldNumber = 3;
    private readonly static uint GuildSecondaryColorDefaultValue = 0;

    private uint guildSecondaryColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildSecondaryColor {
      get { if ((_hasBits0 & 4) != 0) { return guildSecondaryColor_; } else { return GuildSecondaryColorDefaultValue; } }
      set {
        _hasBits0 |= 4;
        guildSecondaryColor_ = value;
      }
    }
    /// <summary>Gets whether the "guild_secondary_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildSecondaryColor {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "guild_secondary_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildSecondaryColor() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "guild_pattern" field.</summary>
    public const int GuildPatternFieldNumber = 4;
    private readonly static uint GuildPatternDefaultValue = 0;

    private uint guildPattern_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildPattern {
      get { if ((_hasBits0 & 8) != 0) { return guildPattern_; } else { return GuildPatternDefaultValue; } }
      set {
        _hasBits0 |= 8;
        guildPattern_ = value;
      }
    }
    /// <summary>Gets whether the "guild_pattern" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildPattern {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "guild_pattern" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildPattern() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "guild_logo" field.</summary>
    public const int GuildLogoFieldNumber = 5;
    private readonly static ulong GuildLogoDefaultValue = 0UL;

    private ulong guildLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildLogo {
      get { if ((_hasBits0 & 16) != 0) { return guildLogo_; } else { return GuildLogoDefaultValue; } }
      set {
        _hasBits0 |= 16;
        guildLogo_ = value;
      }
    }
    /// <summary>Gets whether the "guild_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildLogo {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "guild_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildLogo() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "guild_points" field.</summary>
    public const int GuildPointsFieldNumber = 6;
    private readonly static uint GuildPointsDefaultValue = 0;

    private uint guildPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildPoints {
      get { if ((_hasBits0 & 32) != 0) { return guildPoints_; } else { return GuildPointsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        guildPoints_ = value;
      }
    }
    /// <summary>Gets whether the "guild_points" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildPoints {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "guild_points" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildPoints() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "guild_event" field.</summary>
    public const int GuildEventFieldNumber = 7;
    private readonly static uint GuildEventDefaultValue = 0;

    private uint guildEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildEvent {
      get { if ((_hasBits0 & 64) != 0) { return guildEvent_; } else { return GuildEventDefaultValue; } }
      set {
        _hasBits0 |= 64;
        guildEvent_ = value;
      }
    }
    /// <summary>Gets whether the "guild_event" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildEvent {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "guild_event" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildEvent() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "guild_flags" field.</summary>
    public const int GuildFlagsFieldNumber = 8;
    private readonly static uint GuildFlagsDefaultValue = 0;

    private uint guildFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildFlags {
      get { if ((_hasBits0 & 128) != 0) { return guildFlags_; } else { return GuildFlagsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        guildFlags_ = value;
      }
    }
    /// <summary>Gets whether the "guild_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildFlags {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "guild_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildFlags() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "team_for_guild" field.</summary>
    public const int TeamForGuildFieldNumber = 9;
    private readonly static global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamForGuildDefaultValue = global::Steam.Protos.Dota2.DOTA_GC_TEAM.GoodGuys;

    private global::Steam.Protos.Dota2.DOTA_GC_TEAM teamForGuild_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamForGuild {
      get { if ((_hasBits0 & 256) != 0) { return teamForGuild_; } else { return TeamForGuildDefaultValue; } }
      set {
        _hasBits0 |= 256;
        teamForGuild_ = value;
      }
    }
    /// <summary>Gets whether the "team_for_guild" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamForGuild {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "team_for_guild" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamForGuild() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "guild_tag" field.</summary>
    public const int GuildTagFieldNumber = 10;
    private readonly static string GuildTagDefaultValue = "";

    private string guildTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildTag {
      get { return guildTag_ ?? GuildTagDefaultValue; }
      set {
        guildTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "guild_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildTag {
      get { return guildTag_ != null; }
    }
    /// <summary>Clears the value of the "guild_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildTag() {
      guildTag_ = null;
    }

    /// <summary>Field number for the "guild_weekly_percentile" field.</summary>
    public const int GuildWeeklyPercentileFieldNumber = 11;
    private readonly static uint GuildWeeklyPercentileDefaultValue = 0;

    private uint guildWeeklyPercentile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildWeeklyPercentile {
      get { if ((_hasBits0 & 512) != 0) { return guildWeeklyPercentile_; } else { return GuildWeeklyPercentileDefaultValue; } }
      set {
        _hasBits0 |= 512;
        guildWeeklyPercentile_ = value;
      }
    }
    /// <summary>Gets whether the "guild_weekly_percentile" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildWeeklyPercentile {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "guild_weekly_percentile" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildWeeklyPercentile() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLobbyGuildDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLobbyGuildDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (GuildPrimaryColor != other.GuildPrimaryColor) return false;
      if (GuildSecondaryColor != other.GuildSecondaryColor) return false;
      if (GuildPattern != other.GuildPattern) return false;
      if (GuildLogo != other.GuildLogo) return false;
      if (GuildPoints != other.GuildPoints) return false;
      if (GuildEvent != other.GuildEvent) return false;
      if (GuildFlags != other.GuildFlags) return false;
      if (TeamForGuild != other.TeamForGuild) return false;
      if (GuildTag != other.GuildTag) return false;
      if (GuildWeeklyPercentile != other.GuildWeeklyPercentile) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGuildId) hash ^= GuildId.GetHashCode();
      if (HasGuildPrimaryColor) hash ^= GuildPrimaryColor.GetHashCode();
      if (HasGuildSecondaryColor) hash ^= GuildSecondaryColor.GetHashCode();
      if (HasGuildPattern) hash ^= GuildPattern.GetHashCode();
      if (HasGuildLogo) hash ^= GuildLogo.GetHashCode();
      if (HasGuildPoints) hash ^= GuildPoints.GetHashCode();
      if (HasGuildEvent) hash ^= GuildEvent.GetHashCode();
      if (HasGuildFlags) hash ^= GuildFlags.GetHashCode();
      if (HasTeamForGuild) hash ^= TeamForGuild.GetHashCode();
      if (HasGuildTag) hash ^= GuildTag.GetHashCode();
      if (HasGuildWeeklyPercentile) hash ^= GuildWeeklyPercentile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGuildId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GuildId);
      }
      if (HasGuildPrimaryColor) {
        output.WriteRawTag(16);
        output.WriteUInt32(GuildPrimaryColor);
      }
      if (HasGuildSecondaryColor) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildSecondaryColor);
      }
      if (HasGuildPattern) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuildPattern);
      }
      if (HasGuildLogo) {
        output.WriteRawTag(40);
        output.WriteUInt64(GuildLogo);
      }
      if (HasGuildPoints) {
        output.WriteRawTag(48);
        output.WriteUInt32(GuildPoints);
      }
      if (HasGuildEvent) {
        output.WriteRawTag(56);
        output.WriteUInt32(GuildEvent);
      }
      if (HasGuildFlags) {
        output.WriteRawTag(64);
        output.WriteUInt32(GuildFlags);
      }
      if (HasTeamForGuild) {
        output.WriteRawTag(72);
        output.WriteEnum((int) TeamForGuild);
      }
      if (HasGuildTag) {
        output.WriteRawTag(82);
        output.WriteString(GuildTag);
      }
      if (HasGuildWeeklyPercentile) {
        output.WriteRawTag(88);
        output.WriteUInt32(GuildWeeklyPercentile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGuildId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GuildId);
      }
      if (HasGuildPrimaryColor) {
        output.WriteRawTag(16);
        output.WriteUInt32(GuildPrimaryColor);
      }
      if (HasGuildSecondaryColor) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildSecondaryColor);
      }
      if (HasGuildPattern) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuildPattern);
      }
      if (HasGuildLogo) {
        output.WriteRawTag(40);
        output.WriteUInt64(GuildLogo);
      }
      if (HasGuildPoints) {
        output.WriteRawTag(48);
        output.WriteUInt32(GuildPoints);
      }
      if (HasGuildEvent) {
        output.WriteRawTag(56);
        output.WriteUInt32(GuildEvent);
      }
      if (HasGuildFlags) {
        output.WriteRawTag(64);
        output.WriteUInt32(GuildFlags);
      }
      if (HasTeamForGuild) {
        output.WriteRawTag(72);
        output.WriteEnum((int) TeamForGuild);
      }
      if (HasGuildTag) {
        output.WriteRawTag(82);
        output.WriteString(GuildTag);
      }
      if (HasGuildWeeklyPercentile) {
        output.WriteRawTag(88);
        output.WriteUInt32(GuildWeeklyPercentile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGuildId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildId);
      }
      if (HasGuildPrimaryColor) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildPrimaryColor);
      }
      if (HasGuildSecondaryColor) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildSecondaryColor);
      }
      if (HasGuildPattern) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildPattern);
      }
      if (HasGuildLogo) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildLogo);
      }
      if (HasGuildPoints) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildPoints);
      }
      if (HasGuildEvent) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildEvent);
      }
      if (HasGuildFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildFlags);
      }
      if (HasTeamForGuild) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TeamForGuild);
      }
      if (HasGuildTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildTag);
      }
      if (HasGuildWeeklyPercentile) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildWeeklyPercentile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLobbyGuildDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasGuildId) {
        GuildId = other.GuildId;
      }
      if (other.HasGuildPrimaryColor) {
        GuildPrimaryColor = other.GuildPrimaryColor;
      }
      if (other.HasGuildSecondaryColor) {
        GuildSecondaryColor = other.GuildSecondaryColor;
      }
      if (other.HasGuildPattern) {
        GuildPattern = other.GuildPattern;
      }
      if (other.HasGuildLogo) {
        GuildLogo = other.GuildLogo;
      }
      if (other.HasGuildPoints) {
        GuildPoints = other.GuildPoints;
      }
      if (other.HasGuildEvent) {
        GuildEvent = other.GuildEvent;
      }
      if (other.HasGuildFlags) {
        GuildFlags = other.GuildFlags;
      }
      if (other.HasTeamForGuild) {
        TeamForGuild = other.TeamForGuild;
      }
      if (other.HasGuildTag) {
        GuildTag = other.GuildTag;
      }
      if (other.HasGuildWeeklyPercentile) {
        GuildWeeklyPercentile = other.GuildWeeklyPercentile;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuildId = input.ReadUInt32();
            break;
          }
          case 16: {
            GuildPrimaryColor = input.ReadUInt32();
            break;
          }
          case 24: {
            GuildSecondaryColor = input.ReadUInt32();
            break;
          }
          case 32: {
            GuildPattern = input.ReadUInt32();
            break;
          }
          case 40: {
            GuildLogo = input.ReadUInt64();
            break;
          }
          case 48: {
            GuildPoints = input.ReadUInt32();
            break;
          }
          case 56: {
            GuildEvent = input.ReadUInt32();
            break;
          }
          case 64: {
            GuildFlags = input.ReadUInt32();
            break;
          }
          case 72: {
            TeamForGuild = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
            break;
          }
          case 82: {
            GuildTag = input.ReadString();
            break;
          }
          case 88: {
            GuildWeeklyPercentile = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GuildId = input.ReadUInt32();
            break;
          }
          case 16: {
            GuildPrimaryColor = input.ReadUInt32();
            break;
          }
          case 24: {
            GuildSecondaryColor = input.ReadUInt32();
            break;
          }
          case 32: {
            GuildPattern = input.ReadUInt32();
            break;
          }
          case 40: {
            GuildLogo = input.ReadUInt64();
            break;
          }
          case 48: {
            GuildPoints = input.ReadUInt32();
            break;
          }
          case 56: {
            GuildEvent = input.ReadUInt32();
            break;
          }
          case 64: {
            GuildFlags = input.ReadUInt32();
            break;
          }
          case 72: {
            TeamForGuild = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
            break;
          }
          case 82: {
            GuildTag = input.ReadString();
            break;
          }
          case 88: {
            GuildWeeklyPercentile = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CLobbyTimedRewardDetails : pb::IMessage<CLobbyTimedRewardDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLobbyTimedRewardDetails> _parser = new pb::MessageParser<CLobbyTimedRewardDetails>(() => new CLobbyTimedRewardDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLobbyTimedRewardDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyTimedRewardDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyTimedRewardDetails(CLobbyTimedRewardDetails other) : this() {
      _hasBits0 = other._hasBits0;
      itemDefIndex_ = other.itemDefIndex_;
      isSupplyCrate_ = other.isSupplyCrate_;
      isTimedDrop_ = other.isTimedDrop_;
      accountId_ = other.accountId_;
      origin_ = other.origin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyTimedRewardDetails Clone() {
      return new CLobbyTimedRewardDetails(this);
    }

    /// <summary>Field number for the "item_def_index" field.</summary>
    public const int ItemDefIndexFieldNumber = 2;
    private readonly static uint ItemDefIndexDefaultValue = 0;

    private uint itemDefIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemDefIndex {
      get { if ((_hasBits0 & 1) != 0) { return itemDefIndex_; } else { return ItemDefIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemDefIndex_ = value;
      }
    }
    /// <summary>Gets whether the "item_def_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemDefIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_def_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemDefIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_supply_crate" field.</summary>
    public const int IsSupplyCrateFieldNumber = 3;
    private readonly static bool IsSupplyCrateDefaultValue = false;

    private bool isSupplyCrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSupplyCrate {
      get { if ((_hasBits0 & 2) != 0) { return isSupplyCrate_; } else { return IsSupplyCrateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isSupplyCrate_ = value;
      }
    }
    /// <summary>Gets whether the "is_supply_crate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsSupplyCrate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_supply_crate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsSupplyCrate() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_timed_drop" field.</summary>
    public const int IsTimedDropFieldNumber = 4;
    private readonly static bool IsTimedDropDefaultValue = false;

    private bool isTimedDrop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimedDrop {
      get { if ((_hasBits0 & 4) != 0) { return isTimedDrop_; } else { return IsTimedDropDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isTimedDrop_ = value;
      }
    }
    /// <summary>Gets whether the "is_timed_drop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTimedDrop {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_timed_drop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTimedDrop() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 5;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 8) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 6;
    private readonly static uint OriginDefaultValue = 0;

    private uint origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Origin {
      get { if ((_hasBits0 & 16) != 0) { return origin_; } else { return OriginDefaultValue; } }
      set {
        _hasBits0 |= 16;
        origin_ = value;
      }
    }
    /// <summary>Gets whether the "origin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrigin {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "origin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrigin() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLobbyTimedRewardDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLobbyTimedRewardDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemDefIndex != other.ItemDefIndex) return false;
      if (IsSupplyCrate != other.IsSupplyCrate) return false;
      if (IsTimedDrop != other.IsTimedDrop) return false;
      if (AccountId != other.AccountId) return false;
      if (Origin != other.Origin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemDefIndex) hash ^= ItemDefIndex.GetHashCode();
      if (HasIsSupplyCrate) hash ^= IsSupplyCrate.GetHashCode();
      if (HasIsTimedDrop) hash ^= IsTimedDrop.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasOrigin) hash ^= Origin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemDefIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemDefIndex);
      }
      if (HasIsSupplyCrate) {
        output.WriteRawTag(24);
        output.WriteBool(IsSupplyCrate);
      }
      if (HasIsTimedDrop) {
        output.WriteRawTag(32);
        output.WriteBool(IsTimedDrop);
      }
      if (HasAccountId) {
        output.WriteRawTag(40);
        output.WriteUInt32(AccountId);
      }
      if (HasOrigin) {
        output.WriteRawTag(48);
        output.WriteUInt32(Origin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemDefIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemDefIndex);
      }
      if (HasIsSupplyCrate) {
        output.WriteRawTag(24);
        output.WriteBool(IsSupplyCrate);
      }
      if (HasIsTimedDrop) {
        output.WriteRawTag(32);
        output.WriteBool(IsTimedDrop);
      }
      if (HasAccountId) {
        output.WriteRawTag(40);
        output.WriteUInt32(AccountId);
      }
      if (HasOrigin) {
        output.WriteRawTag(48);
        output.WriteUInt32(Origin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemDefIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDefIndex);
      }
      if (HasIsSupplyCrate) {
        size += 1 + 1;
      }
      if (HasIsTimedDrop) {
        size += 1 + 1;
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasOrigin) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Origin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLobbyTimedRewardDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasItemDefIndex) {
        ItemDefIndex = other.ItemDefIndex;
      }
      if (other.HasIsSupplyCrate) {
        IsSupplyCrate = other.IsSupplyCrate;
      }
      if (other.HasIsTimedDrop) {
        IsTimedDrop = other.IsTimedDrop;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasOrigin) {
        Origin = other.Origin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            ItemDefIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            IsSupplyCrate = input.ReadBool();
            break;
          }
          case 32: {
            IsTimedDrop = input.ReadBool();
            break;
          }
          case 40: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 48: {
            Origin = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            ItemDefIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            IsSupplyCrate = input.ReadBool();
            break;
          }
          case 32: {
            IsTimedDrop = input.ReadBool();
            break;
          }
          case 40: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 48: {
            Origin = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CLobbyBroadcastChannelInfo : pb::IMessage<CLobbyBroadcastChannelInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLobbyBroadcastChannelInfo> _parser = new pb::MessageParser<CLobbyBroadcastChannelInfo>(() => new CLobbyBroadcastChannelInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLobbyBroadcastChannelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyBroadcastChannelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyBroadcastChannelInfo(CLobbyBroadcastChannelInfo other) : this() {
      _hasBits0 = other._hasBits0;
      channelId_ = other.channelId_;
      countryCode_ = other.countryCode_;
      description_ = other.description_;
      languageCode_ = other.languageCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyBroadcastChannelInfo Clone() {
      return new CLobbyBroadcastChannelInfo(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private readonly static uint ChannelIdDefaultValue = 0;

    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { if ((_hasBits0 & 1) != 0) { return channelId_; } else { return ChannelIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        channelId_ = value;
      }
    }
    /// <summary>Gets whether the "channel_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "channel_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 2;
    private readonly static string CountryCodeDefaultValue = "";

    private string countryCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_ ?? CountryCodeDefaultValue; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "country_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCountryCode {
      get { return countryCode_ != null; }
    }
    /// <summary>Clears the value of the "country_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCountryCode() {
      countryCode_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 4;
    private readonly static string LanguageCodeDefaultValue = "";

    private string languageCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_ ?? LanguageCodeDefaultValue; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "language_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanguageCode {
      get { return languageCode_ != null; }
    }
    /// <summary>Clears the value of the "language_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanguageCode() {
      languageCode_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLobbyBroadcastChannelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLobbyBroadcastChannelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (CountryCode != other.CountryCode) return false;
      if (Description != other.Description) return false;
      if (LanguageCode != other.LanguageCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChannelId) hash ^= ChannelId.GetHashCode();
      if (HasCountryCode) hash ^= CountryCode.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasLanguageCode) hash ^= LanguageCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChannelId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChannelId);
      }
      if (HasCountryCode) {
        output.WriteRawTag(18);
        output.WriteString(CountryCode);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(34);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChannelId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChannelId);
      }
      if (HasCountryCode) {
        output.WriteRawTag(18);
        output.WriteString(CountryCode);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(34);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChannelId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      if (HasCountryCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasLanguageCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLobbyBroadcastChannelInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasChannelId) {
        ChannelId = other.ChannelId;
      }
      if (other.HasCountryCode) {
        CountryCode = other.CountryCode;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasLanguageCode) {
        LanguageCode = other.LanguageCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 18: {
            CountryCode = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 18: {
            CountryCode = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CLobbyGuildChallenge : pb::IMessage<CLobbyGuildChallenge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLobbyGuildChallenge> _parser = new pb::MessageParser<CLobbyGuildChallenge>(() => new CLobbyGuildChallenge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLobbyGuildChallenge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyGuildChallenge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyGuildChallenge(CLobbyGuildChallenge other) : this() {
      _hasBits0 = other._hasBits0;
      guildId_ = other.guildId_;
      eventId_ = other.eventId_;
      challengeInstanceId_ = other.challengeInstanceId_;
      challengeParameter_ = other.challengeParameter_;
      challengeTimestamp_ = other.challengeTimestamp_;
      challengePeriodSerial_ = other.challengePeriodSerial_;
      challengeProgressAtStart_ = other.challengeProgressAtStart_;
      eligibleAccountIds_ = other.eligibleAccountIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyGuildChallenge Clone() {
      return new CLobbyGuildChallenge(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private readonly static uint GuildIdDefaultValue = 0;

    private uint guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildId {
      get { if ((_hasBits0 & 1) != 0) { return guildId_; } else { return GuildIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        guildId_ = value;
      }
    }
    /// <summary>Gets whether the "guild_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "guild_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 2) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "challenge_instance_id" field.</summary>
    public const int ChallengeInstanceIdFieldNumber = 3;
    private readonly static uint ChallengeInstanceIdDefaultValue = 0;

    private uint challengeInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeInstanceId {
      get { if ((_hasBits0 & 4) != 0) { return challengeInstanceId_; } else { return ChallengeInstanceIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        challengeInstanceId_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_instance_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeInstanceId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "challenge_instance_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeInstanceId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "challenge_parameter" field.</summary>
    public const int ChallengeParameterFieldNumber = 4;
    private readonly static uint ChallengeParameterDefaultValue = 0;

    private uint challengeParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeParameter {
      get { if ((_hasBits0 & 8) != 0) { return challengeParameter_; } else { return ChallengeParameterDefaultValue; } }
      set {
        _hasBits0 |= 8;
        challengeParameter_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_parameter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeParameter {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "challenge_parameter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeParameter() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "challenge_timestamp" field.</summary>
    public const int ChallengeTimestampFieldNumber = 5;
    private readonly static uint ChallengeTimestampDefaultValue = 0;

    private uint challengeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeTimestamp {
      get { if ((_hasBits0 & 16) != 0) { return challengeTimestamp_; } else { return ChallengeTimestampDefaultValue; } }
      set {
        _hasBits0 |= 16;
        challengeTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeTimestamp {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "challenge_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeTimestamp() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "challenge_period_serial" field.</summary>
    public const int ChallengePeriodSerialFieldNumber = 6;
    private readonly static uint ChallengePeriodSerialDefaultValue = 0;

    private uint challengePeriodSerial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengePeriodSerial {
      get { if ((_hasBits0 & 32) != 0) { return challengePeriodSerial_; } else { return ChallengePeriodSerialDefaultValue; } }
      set {
        _hasBits0 |= 32;
        challengePeriodSerial_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_period_serial" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengePeriodSerial {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "challenge_period_serial" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengePeriodSerial() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "challenge_progress_at_start" field.</summary>
    public const int ChallengeProgressAtStartFieldNumber = 7;
    private readonly static uint ChallengeProgressAtStartDefaultValue = 0;

    private uint challengeProgressAtStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeProgressAtStart {
      get { if ((_hasBits0 & 64) != 0) { return challengeProgressAtStart_; } else { return ChallengeProgressAtStartDefaultValue; } }
      set {
        _hasBits0 |= 64;
        challengeProgressAtStart_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_progress_at_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeProgressAtStart {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "challenge_progress_at_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeProgressAtStart() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "eligible_account_ids" field.</summary>
    public const int EligibleAccountIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_eligibleAccountIds_codec
        = pb::FieldCodec.ForUInt32(64);
    private readonly pbc::RepeatedField<uint> eligibleAccountIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EligibleAccountIds {
      get { return eligibleAccountIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLobbyGuildChallenge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLobbyGuildChallenge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (EventId != other.EventId) return false;
      if (ChallengeInstanceId != other.ChallengeInstanceId) return false;
      if (ChallengeParameter != other.ChallengeParameter) return false;
      if (ChallengeTimestamp != other.ChallengeTimestamp) return false;
      if (ChallengePeriodSerial != other.ChallengePeriodSerial) return false;
      if (ChallengeProgressAtStart != other.ChallengeProgressAtStart) return false;
      if(!eligibleAccountIds_.Equals(other.eligibleAccountIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGuildId) hash ^= GuildId.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasChallengeInstanceId) hash ^= ChallengeInstanceId.GetHashCode();
      if (HasChallengeParameter) hash ^= ChallengeParameter.GetHashCode();
      if (HasChallengeTimestamp) hash ^= ChallengeTimestamp.GetHashCode();
      if (HasChallengePeriodSerial) hash ^= ChallengePeriodSerial.GetHashCode();
      if (HasChallengeProgressAtStart) hash ^= ChallengeProgressAtStart.GetHashCode();
      hash ^= eligibleAccountIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGuildId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GuildId);
      }
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasChallengeInstanceId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChallengeInstanceId);
      }
      if (HasChallengeParameter) {
        output.WriteRawTag(32);
        output.WriteUInt32(ChallengeParameter);
      }
      if (HasChallengeTimestamp) {
        output.WriteRawTag(40);
        output.WriteUInt32(ChallengeTimestamp);
      }
      if (HasChallengePeriodSerial) {
        output.WriteRawTag(48);
        output.WriteUInt32(ChallengePeriodSerial);
      }
      if (HasChallengeProgressAtStart) {
        output.WriteRawTag(56);
        output.WriteUInt32(ChallengeProgressAtStart);
      }
      eligibleAccountIds_.WriteTo(output, _repeated_eligibleAccountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGuildId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GuildId);
      }
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasChallengeInstanceId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChallengeInstanceId);
      }
      if (HasChallengeParameter) {
        output.WriteRawTag(32);
        output.WriteUInt32(ChallengeParameter);
      }
      if (HasChallengeTimestamp) {
        output.WriteRawTag(40);
        output.WriteUInt32(ChallengeTimestamp);
      }
      if (HasChallengePeriodSerial) {
        output.WriteRawTag(48);
        output.WriteUInt32(ChallengePeriodSerial);
      }
      if (HasChallengeProgressAtStart) {
        output.WriteRawTag(56);
        output.WriteUInt32(ChallengeProgressAtStart);
      }
      eligibleAccountIds_.WriteTo(ref output, _repeated_eligibleAccountIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGuildId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildId);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasChallengeInstanceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeInstanceId);
      }
      if (HasChallengeParameter) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeParameter);
      }
      if (HasChallengeTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeTimestamp);
      }
      if (HasChallengePeriodSerial) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengePeriodSerial);
      }
      if (HasChallengeProgressAtStart) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeProgressAtStart);
      }
      size += eligibleAccountIds_.CalculateSize(_repeated_eligibleAccountIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLobbyGuildChallenge other) {
      if (other == null) {
        return;
      }
      if (other.HasGuildId) {
        GuildId = other.GuildId;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasChallengeInstanceId) {
        ChallengeInstanceId = other.ChallengeInstanceId;
      }
      if (other.HasChallengeParameter) {
        ChallengeParameter = other.ChallengeParameter;
      }
      if (other.HasChallengeTimestamp) {
        ChallengeTimestamp = other.ChallengeTimestamp;
      }
      if (other.HasChallengePeriodSerial) {
        ChallengePeriodSerial = other.ChallengePeriodSerial;
      }
      if (other.HasChallengeProgressAtStart) {
        ChallengeProgressAtStart = other.ChallengeProgressAtStart;
      }
      eligibleAccountIds_.Add(other.eligibleAccountIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuildId = input.ReadUInt32();
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            ChallengeInstanceId = input.ReadUInt32();
            break;
          }
          case 32: {
            ChallengeParameter = input.ReadUInt32();
            break;
          }
          case 40: {
            ChallengeTimestamp = input.ReadUInt32();
            break;
          }
          case 48: {
            ChallengePeriodSerial = input.ReadUInt32();
            break;
          }
          case 56: {
            ChallengeProgressAtStart = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            eligibleAccountIds_.AddEntriesFrom(input, _repeated_eligibleAccountIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GuildId = input.ReadUInt32();
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            ChallengeInstanceId = input.ReadUInt32();
            break;
          }
          case 32: {
            ChallengeParameter = input.ReadUInt32();
            break;
          }
          case 40: {
            ChallengeTimestamp = input.ReadUInt32();
            break;
          }
          case 48: {
            ChallengePeriodSerial = input.ReadUInt32();
            break;
          }
          case 56: {
            ChallengeProgressAtStart = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            eligibleAccountIds_.AddEntriesFrom(ref input, _repeated_eligibleAccountIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTALobbyMatchQualityData : pb::IMessage<CDOTALobbyMatchQualityData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTALobbyMatchQualityData> _parser = new pb::MessageParser<CDOTALobbyMatchQualityData>(() => new CDOTALobbyMatchQualityData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTALobbyMatchQualityData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTALobbyMatchQualityData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTALobbyMatchQualityData(CDOTALobbyMatchQualityData other) : this() {
      _hasBits0 = other._hasBits0;
      overallQuality_ = other.overallQuality_;
      teamBalance_ = other.teamBalance_;
      matchSkillRange_ = other.matchSkillRange_;
      matchBehavior_ = other.matchBehavior_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTALobbyMatchQualityData Clone() {
      return new CDOTALobbyMatchQualityData(this);
    }

    /// <summary>Field number for the "overall_quality" field.</summary>
    public const int OverallQualityFieldNumber = 1;
    private readonly static uint OverallQualityDefaultValue = 0;

    private uint overallQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverallQuality {
      get { if ((_hasBits0 & 1) != 0) { return overallQuality_; } else { return OverallQualityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overallQuality_ = value;
      }
    }
    /// <summary>Gets whether the "overall_quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverallQuality {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overall_quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverallQuality() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "team_balance" field.</summary>
    public const int TeamBalanceFieldNumber = 2;
    private readonly static uint TeamBalanceDefaultValue = 0;

    private uint teamBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamBalance {
      get { if ((_hasBits0 & 2) != 0) { return teamBalance_; } else { return TeamBalanceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        teamBalance_ = value;
      }
    }
    /// <summary>Gets whether the "team_balance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamBalance {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "team_balance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamBalance() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "match_skill_range" field.</summary>
    public const int MatchSkillRangeFieldNumber = 3;
    private readonly static uint MatchSkillRangeDefaultValue = 0;

    private uint matchSkillRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchSkillRange {
      get { if ((_hasBits0 & 4) != 0) { return matchSkillRange_; } else { return MatchSkillRangeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        matchSkillRange_ = value;
      }
    }
    /// <summary>Gets whether the "match_skill_range" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchSkillRange {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "match_skill_range" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchSkillRange() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "match_behavior" field.</summary>
    public const int MatchBehaviorFieldNumber = 4;
    private readonly static uint MatchBehaviorDefaultValue = 0;

    private uint matchBehavior_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchBehavior {
      get { if ((_hasBits0 & 8) != 0) { return matchBehavior_; } else { return MatchBehaviorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        matchBehavior_ = value;
      }
    }
    /// <summary>Gets whether the "match_behavior" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchBehavior {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "match_behavior" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchBehavior() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTALobbyMatchQualityData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTALobbyMatchQualityData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverallQuality != other.OverallQuality) return false;
      if (TeamBalance != other.TeamBalance) return false;
      if (MatchSkillRange != other.MatchSkillRange) return false;
      if (MatchBehavior != other.MatchBehavior) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverallQuality) hash ^= OverallQuality.GetHashCode();
      if (HasTeamBalance) hash ^= TeamBalance.GetHashCode();
      if (HasMatchSkillRange) hash ^= MatchSkillRange.GetHashCode();
      if (HasMatchBehavior) hash ^= MatchBehavior.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverallQuality) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverallQuality);
      }
      if (HasTeamBalance) {
        output.WriteRawTag(16);
        output.WriteUInt32(TeamBalance);
      }
      if (HasMatchSkillRange) {
        output.WriteRawTag(24);
        output.WriteUInt32(MatchSkillRange);
      }
      if (HasMatchBehavior) {
        output.WriteRawTag(32);
        output.WriteUInt32(MatchBehavior);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverallQuality) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverallQuality);
      }
      if (HasTeamBalance) {
        output.WriteRawTag(16);
        output.WriteUInt32(TeamBalance);
      }
      if (HasMatchSkillRange) {
        output.WriteRawTag(24);
        output.WriteUInt32(MatchSkillRange);
      }
      if (HasMatchBehavior) {
        output.WriteRawTag(32);
        output.WriteUInt32(MatchBehavior);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverallQuality) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverallQuality);
      }
      if (HasTeamBalance) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamBalance);
      }
      if (HasMatchSkillRange) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchSkillRange);
      }
      if (HasMatchBehavior) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchBehavior);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTALobbyMatchQualityData other) {
      if (other == null) {
        return;
      }
      if (other.HasOverallQuality) {
        OverallQuality = other.OverallQuality;
      }
      if (other.HasTeamBalance) {
        TeamBalance = other.TeamBalance;
      }
      if (other.HasMatchSkillRange) {
        MatchSkillRange = other.MatchSkillRange;
      }
      if (other.HasMatchBehavior) {
        MatchBehavior = other.MatchBehavior;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverallQuality = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamBalance = input.ReadUInt32();
            break;
          }
          case 24: {
            MatchSkillRange = input.ReadUInt32();
            break;
          }
          case 32: {
            MatchBehavior = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverallQuality = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamBalance = input.ReadUInt32();
            break;
          }
          case 24: {
            MatchSkillRange = input.ReadUInt32();
            break;
          }
          case 32: {
            MatchBehavior = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSODOTALobby : pb::IMessage<CSODOTALobby>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTALobby> _parser = new pb::MessageParser<CSODOTALobby>(() => new CSODOTALobby());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    private int _hasBits2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTALobby> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTALobby() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTALobby(CSODOTALobby other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      _hasBits2 = other._hasBits2;
      lobbyId_ = other.lobbyId_;
      allMembers_ = other.allMembers_.Clone();
      memberIndices_ = other.memberIndices_.Clone();
      leftMemberIndices_ = other.leftMemberIndices_.Clone();
      freeMemberIndices_ = other.freeMemberIndices_.Clone();
      leaderId_ = other.leaderId_;
      serverId_ = other.serverId_;
      gameMode_ = other.gameMode_;
      pendingInvites_ = other.pendingInvites_.Clone();
      state_ = other.state_;
      connect_ = other.connect_;
      lobbyType_ = other.lobbyType_;
      allowCheats_ = other.allowCheats_;
      fillWithBots_ = other.fillWithBots_;
      gameName_ = other.gameName_;
      teamDetails_ = other.teamDetails_.Clone();
      tournamentId_ = other.tournamentId_;
      tournamentGameId_ = other.tournamentGameId_;
      serverRegion_ = other.serverRegion_;
      gameState_ = other.gameState_;
      numSpectators_ = other.numSpectators_;
      matchgroup_ = other.matchgroup_;
      cmPick_ = other.cmPick_;
      matchId_ = other.matchId_;
      allowSpectating_ = other.allowSpectating_;
      botDifficultyRadiant_ = other.botDifficultyRadiant_;
      passKey_ = other.passKey_;
      leagueid_ = other.leagueid_;
      penaltyLevelRadiant_ = other.penaltyLevelRadiant_;
      penaltyLevelDire_ = other.penaltyLevelDire_;
      seriesType_ = other.seriesType_;
      radiantSeriesWins_ = other.radiantSeriesWins_;
      direSeriesWins_ = other.direSeriesWins_;
      allchat_ = other.allchat_;
      dotaTvDelay_ = other.dotaTvDelay_;
      customGameMode_ = other.customGameMode_;
      customMapName_ = other.customMapName_;
      customDifficulty_ = other.customDifficulty_;
      lan_ = other.lan_;
      broadcastChannelInfo_ = other.broadcastChannelInfo_.Clone();
      firstLeaverAccountid_ = other.firstLeaverAccountid_;
      seriesId_ = other.seriesId_;
      lowPriority_ = other.lowPriority_;
      extraMessages_ = other.extraMessages_.Clone();
      firstBloodHappened_ = other.firstBloodHappened_;
      matchOutcome_ = other.matchOutcome_;
      massDisconnect_ = other.massDisconnect_;
      customGameId_ = other.customGameId_;
      customMinPlayers_ = other.customMinPlayers_;
      customMaxPlayers_ = other.customMaxPlayers_;
      visibility_ = other.visibility_;
      customGameCrc_ = other.customGameCrc_;
      customGameAutoCreatedLobby_ = other.customGameAutoCreatedLobby_;
      customGameTimestamp_ = other.customGameTimestamp_;
      previousSeriesMatches_ = other.previousSeriesMatches_.Clone();
      previousMatchOverride_ = other.previousMatchOverride_;
      gameStartTime_ = other.gameStartTime_;
      pauseSetting_ = other.pauseSetting_;
      weekendTourneyDivisionId_ = other.weekendTourneyDivisionId_;
      weekendTourneySkillLevel_ = other.weekendTourneySkillLevel_;
      weekendTourneyBracketRound_ = other.weekendTourneyBracketRound_;
      botDifficultyDire_ = other.botDifficultyDire_;
      botRadiant_ = other.botRadiant_;
      botDire_ = other.botDire_;
      eventProgressionEnabled_ = other.eventProgressionEnabled_.Clone();
      selectionPriorityRules_ = other.selectionPriorityRules_;
      seriesPreviousSelectionPriorityTeamId_ = other.seriesPreviousSelectionPriorityTeamId_;
      seriesCurrentSelectionPriorityTeamId_ = other.seriesCurrentSelectionPriorityTeamId_;
      seriesCurrentPriorityTeamChoice_ = other.seriesCurrentPriorityTeamChoice_;
      seriesCurrentNonPriorityTeamChoice_ = other.seriesCurrentNonPriorityTeamChoice_;
      seriesCurrentSelectionPriorityUsedCoinToss_ = other.seriesCurrentSelectionPriorityUsedCoinToss_;
      currentPrimaryEvent_ = other.currentPrimaryEvent_;
      emergencyDisabledHeroIds_ = other.emergencyDisabledHeroIds_.Clone();
      customGamePrivateKey_ = other.customGamePrivateKey_;
      customGamePenalties_ = other.customGamePenalties_;
      lanHostPingLocation_ = other.lanHostPingLocation_;
      leagueNodeId_ = other.leagueNodeId_;
      matchDuration_ = other.matchDuration_;
      leaguePhase_ = other.leaguePhase_;
      experimentalGameplayEnabled_ = other.experimentalGameplayEnabled_;
      guildChallenges_ = other.guildChallenges_.Clone();
      guildDetails_ = other.guildDetails_.Clone();
      requestedHeroIds_ = other.requestedHeroIds_.Clone();
      coachFriendRequests_ = other.coachFriendRequests_.Clone();
      isInSteamChina_ = other.isInSteamChina_;
      withScenarioSave_ = other.withScenarioSave_;
      lobbyCreationTime_ = other.lobbyCreationTime_;
      eventGameDefinition_ = other.eventGameDefinition_;
      matchQualityData_ = other.matchQualityData_ != null ? other.matchQualityData_.Clone() : null;
      requestedHeroTeams_ = other.requestedHeroTeams_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTALobby Clone() {
      return new CSODOTALobby(this);
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 1;
    private readonly static ulong LobbyIdDefaultValue = 0UL;

    private ulong lobbyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LobbyId {
      get { if ((_hasBits0 & 1) != 0) { return lobbyId_; } else { return LobbyIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lobbyId_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lobby_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "all_members" field.</summary>
    public const int AllMembersFieldNumber = 120;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTALobbyMember> _repeated_allMembers_codec
        = pb::FieldCodec.ForMessage(962, global::Steam.Protos.Dota2.CSODOTALobbyMember.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobbyMember> allMembers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobbyMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobbyMember> AllMembers {
      get { return allMembers_; }
    }

    /// <summary>Field number for the "member_indices" field.</summary>
    public const int MemberIndicesFieldNumber = 121;
    private static readonly pb::FieldCodec<uint> _repeated_memberIndices_codec
        = pb::FieldCodec.ForUInt32(968);
    private readonly pbc::RepeatedField<uint> memberIndices_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> MemberIndices {
      get { return memberIndices_; }
    }

    /// <summary>Field number for the "left_member_indices" field.</summary>
    public const int LeftMemberIndicesFieldNumber = 122;
    private static readonly pb::FieldCodec<uint> _repeated_leftMemberIndices_codec
        = pb::FieldCodec.ForUInt32(976);
    private readonly pbc::RepeatedField<uint> leftMemberIndices_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LeftMemberIndices {
      get { return leftMemberIndices_; }
    }

    /// <summary>Field number for the "free_member_indices" field.</summary>
    public const int FreeMemberIndicesFieldNumber = 123;
    private static readonly pb::FieldCodec<uint> _repeated_freeMemberIndices_codec
        = pb::FieldCodec.ForUInt32(984);
    private readonly pbc::RepeatedField<uint> freeMemberIndices_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> FreeMemberIndices {
      get { return freeMemberIndices_; }
    }

    /// <summary>Field number for the "leader_id" field.</summary>
    public const int LeaderIdFieldNumber = 11;
    private readonly static ulong LeaderIdDefaultValue = 0UL;

    private ulong leaderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderId {
      get { if ((_hasBits0 & 16) != 0) { return leaderId_; } else { return LeaderIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        leaderId_ = value;
      }
    }
    /// <summary>Gets whether the "leader_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaderId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "leader_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaderId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 6;
    private readonly static ulong ServerIdDefaultValue = 0UL;

    private ulong serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerId {
      get { if ((_hasBits0 & 8) != 0) { return serverId_; } else { return ServerIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        serverId_ = value;
      }
    }
    /// <summary>Gets whether the "server_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "server_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 3;
    private readonly static uint GameModeDefaultValue = 0;

    private uint gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameMode {
      get { if ((_hasBits0 & 2) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameMode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameMode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "pending_invites" field.</summary>
    public const int PendingInvitesFieldNumber = 10;
    private static readonly pb::FieldCodec<ulong> _repeated_pendingInvites_codec
        = pb::FieldCodec.ForFixed64(81);
    private readonly pbc::RepeatedField<ulong> pendingInvites_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PendingInvites {
      get { return pendingInvites_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private readonly static global::Steam.Protos.Dota2.CSODOTALobby.Types.State StateDefaultValue = global::Steam.Protos.Dota2.CSODOTALobby.Types.State.Ui;

    private global::Steam.Protos.Dota2.CSODOTALobby.Types.State state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CSODOTALobby.Types.State State {
      get { if ((_hasBits0 & 4) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "connect" field.</summary>
    public const int ConnectFieldNumber = 5;
    private readonly static string ConnectDefaultValue = "";

    private string connect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Connect {
      get { return connect_ ?? ConnectDefaultValue; }
      set {
        connect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "connect" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConnect {
      get { return connect_ != null; }
    }
    /// <summary>Clears the value of the "connect" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConnect() {
      connect_ = null;
    }

    /// <summary>Field number for the "lobby_type" field.</summary>
    public const int LobbyTypeFieldNumber = 12;
    private readonly static global::Steam.Protos.Dota2.CSODOTALobby.Types.LobbyType LobbyTypeDefaultValue = global::Steam.Protos.Dota2.CSODOTALobby.Types.LobbyType.Invalid;

    private global::Steam.Protos.Dota2.CSODOTALobby.Types.LobbyType lobbyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CSODOTALobby.Types.LobbyType LobbyType {
      get { if ((_hasBits0 & 32) != 0) { return lobbyType_; } else { return LobbyTypeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        lobbyType_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyType {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "lobby_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyType() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "allow_cheats" field.</summary>
    public const int AllowCheatsFieldNumber = 13;
    private readonly static bool AllowCheatsDefaultValue = false;

    private bool allowCheats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowCheats {
      get { if ((_hasBits0 & 64) != 0) { return allowCheats_; } else { return AllowCheatsDefaultValue; } }
      set {
        _hasBits0 |= 64;
        allowCheats_ = value;
      }
    }
    /// <summary>Gets whether the "allow_cheats" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllowCheats {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "allow_cheats" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllowCheats() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "fill_with_bots" field.</summary>
    public const int FillWithBotsFieldNumber = 14;
    private readonly static bool FillWithBotsDefaultValue = false;

    private bool fillWithBots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FillWithBots {
      get { if ((_hasBits0 & 128) != 0) { return fillWithBots_; } else { return FillWithBotsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        fillWithBots_ = value;
      }
    }
    /// <summary>Gets whether the "fill_with_bots" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFillWithBots {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "fill_with_bots" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFillWithBots() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "game_name" field.</summary>
    public const int GameNameFieldNumber = 16;
    private readonly static string GameNameDefaultValue = "";

    private string gameName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_ ?? GameNameDefaultValue; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "game_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameName {
      get { return gameName_ != null; }
    }
    /// <summary>Clears the value of the "game_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameName() {
      gameName_ = null;
    }

    /// <summary>Field number for the "team_details" field.</summary>
    public const int TeamDetailsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CLobbyTeamDetails> _repeated_teamDetails_codec
        = pb::FieldCodec.ForMessage(138, global::Steam.Protos.Dota2.CLobbyTeamDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyTeamDetails> teamDetails_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyTeamDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyTeamDetails> TeamDetails {
      get { return teamDetails_; }
    }

    /// <summary>Field number for the "tournament_id" field.</summary>
    public const int TournamentIdFieldNumber = 19;
    private readonly static uint TournamentIdDefaultValue = 0;

    private uint tournamentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TournamentId {
      get { if ((_hasBits0 & 256) != 0) { return tournamentId_; } else { return TournamentIdDefaultValue; } }
      set {
        _hasBits0 |= 256;
        tournamentId_ = value;
      }
    }
    /// <summary>Gets whether the "tournament_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTournamentId {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "tournament_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTournamentId() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "tournament_game_id" field.</summary>
    public const int TournamentGameIdFieldNumber = 20;
    private readonly static uint TournamentGameIdDefaultValue = 0;

    private uint tournamentGameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TournamentGameId {
      get { if ((_hasBits0 & 512) != 0) { return tournamentGameId_; } else { return TournamentGameIdDefaultValue; } }
      set {
        _hasBits0 |= 512;
        tournamentGameId_ = value;
      }
    }
    /// <summary>Gets whether the "tournament_game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTournamentGameId {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "tournament_game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTournamentGameId() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "server_region" field.</summary>
    public const int ServerRegionFieldNumber = 21;
    private readonly static uint ServerRegionDefaultValue = 0;

    private uint serverRegion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerRegion {
      get { if ((_hasBits0 & 1024) != 0) { return serverRegion_; } else { return ServerRegionDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        serverRegion_ = value;
      }
    }
    /// <summary>Gets whether the "server_region" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerRegion {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "server_region" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerRegion() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 22;
    private readonly static global::Steam.Protos.Dota2.DOTA_GameState GameStateDefaultValue = global::Steam.Protos.Dota2.DOTA_GameState.DotaGamerulesStateInit;

    private global::Steam.Protos.Dota2.DOTA_GameState gameState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GameState GameState {
      get { if ((_hasBits0 & 2048) != 0) { return gameState_; } else { return GameStateDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        gameState_ = value;
      }
    }
    /// <summary>Gets whether the "game_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameState {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "game_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameState() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "num_spectators" field.</summary>
    public const int NumSpectatorsFieldNumber = 23;
    private readonly static uint NumSpectatorsDefaultValue = 0;

    private uint numSpectators_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumSpectators {
      get { if ((_hasBits0 & 4096) != 0) { return numSpectators_; } else { return NumSpectatorsDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        numSpectators_ = value;
      }
    }
    /// <summary>Gets whether the "num_spectators" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumSpectators {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "num_spectators" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumSpectators() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "matchgroup" field.</summary>
    public const int MatchgroupFieldNumber = 25;
    private readonly static uint MatchgroupDefaultValue = 0;

    private uint matchgroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Matchgroup {
      get { if ((_hasBits0 & 8192) != 0) { return matchgroup_; } else { return MatchgroupDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        matchgroup_ = value;
      }
    }
    /// <summary>Gets whether the "matchgroup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchgroup {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "matchgroup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchgroup() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "cm_pick" field.</summary>
    public const int CmPickFieldNumber = 28;
    private readonly static global::Steam.Protos.Dota2.DOTA_CM_PICK CmPickDefaultValue = global::Steam.Protos.Dota2.DOTA_CM_PICK.DotaCmRandom;

    private global::Steam.Protos.Dota2.DOTA_CM_PICK cmPick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_CM_PICK CmPick {
      get { if ((_hasBits0 & 16384) != 0) { return cmPick_; } else { return CmPickDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        cmPick_ = value;
      }
    }
    /// <summary>Gets whether the "cm_pick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCmPick {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "cm_pick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCmPick() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 30;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 32768) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "allow_spectating" field.</summary>
    public const int AllowSpectatingFieldNumber = 31;
    private readonly static bool AllowSpectatingDefaultValue = true;

    private bool allowSpectating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowSpectating {
      get { if ((_hasBits0 & 65536) != 0) { return allowSpectating_; } else { return AllowSpectatingDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        allowSpectating_ = value;
      }
    }
    /// <summary>Gets whether the "allow_spectating" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllowSpectating {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "allow_spectating" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllowSpectating() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "bot_difficulty_radiant" field.</summary>
    public const int BotDifficultyRadiantFieldNumber = 36;
    private readonly static global::Steam.Protos.Dota2.DOTABotDifficulty BotDifficultyRadiantDefaultValue = global::Steam.Protos.Dota2.DOTABotDifficulty.BotDifficultyHard;

    private global::Steam.Protos.Dota2.DOTABotDifficulty botDifficultyRadiant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTABotDifficulty BotDifficultyRadiant {
      get { if ((_hasBits0 & 131072) != 0) { return botDifficultyRadiant_; } else { return BotDifficultyRadiantDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        botDifficultyRadiant_ = value;
      }
    }
    /// <summary>Gets whether the "bot_difficulty_radiant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBotDifficultyRadiant {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "bot_difficulty_radiant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBotDifficultyRadiant() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "pass_key" field.</summary>
    public const int PassKeyFieldNumber = 39;
    private readonly static string PassKeyDefaultValue = "";

    private string passKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassKey {
      get { return passKey_ ?? PassKeyDefaultValue; }
      set {
        passKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pass_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassKey {
      get { return passKey_ != null; }
    }
    /// <summary>Clears the value of the "pass_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPassKey() {
      passKey_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 42;
    private readonly static uint LeagueidDefaultValue = 0;

    private uint leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leagueid {
      get { if ((_hasBits0 & 262144) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueid {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueid() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "penalty_level_radiant" field.</summary>
    public const int PenaltyLevelRadiantFieldNumber = 43;
    private readonly static uint PenaltyLevelRadiantDefaultValue = 0;

    private uint penaltyLevelRadiant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PenaltyLevelRadiant {
      get { if ((_hasBits0 & 524288) != 0) { return penaltyLevelRadiant_; } else { return PenaltyLevelRadiantDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        penaltyLevelRadiant_ = value;
      }
    }
    /// <summary>Gets whether the "penalty_level_radiant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPenaltyLevelRadiant {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "penalty_level_radiant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPenaltyLevelRadiant() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "penalty_level_dire" field.</summary>
    public const int PenaltyLevelDireFieldNumber = 44;
    private readonly static uint PenaltyLevelDireDefaultValue = 0;

    private uint penaltyLevelDire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PenaltyLevelDire {
      get { if ((_hasBits0 & 1048576) != 0) { return penaltyLevelDire_; } else { return PenaltyLevelDireDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        penaltyLevelDire_ = value;
      }
    }
    /// <summary>Gets whether the "penalty_level_dire" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPenaltyLevelDire {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "penalty_level_dire" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPenaltyLevelDire() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "series_type" field.</summary>
    public const int SeriesTypeFieldNumber = 46;
    private readonly static uint SeriesTypeDefaultValue = 0;

    private uint seriesType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeriesType {
      get { if ((_hasBits0 & 2097152) != 0) { return seriesType_; } else { return SeriesTypeDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        seriesType_ = value;
      }
    }
    /// <summary>Gets whether the "series_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesType {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "series_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesType() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "radiant_series_wins" field.</summary>
    public const int RadiantSeriesWinsFieldNumber = 47;
    private readonly static uint RadiantSeriesWinsDefaultValue = 0;

    private uint radiantSeriesWins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantSeriesWins {
      get { if ((_hasBits0 & 4194304) != 0) { return radiantSeriesWins_; } else { return RadiantSeriesWinsDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        radiantSeriesWins_ = value;
      }
    }
    /// <summary>Gets whether the "radiant_series_wins" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadiantSeriesWins {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "radiant_series_wins" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadiantSeriesWins() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "dire_series_wins" field.</summary>
    public const int DireSeriesWinsFieldNumber = 48;
    private readonly static uint DireSeriesWinsDefaultValue = 0;

    private uint direSeriesWins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireSeriesWins {
      get { if ((_hasBits0 & 8388608) != 0) { return direSeriesWins_; } else { return DireSeriesWinsDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        direSeriesWins_ = value;
      }
    }
    /// <summary>Gets whether the "dire_series_wins" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDireSeriesWins {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "dire_series_wins" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDireSeriesWins() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "allchat" field.</summary>
    public const int AllchatFieldNumber = 51;
    private readonly static bool AllchatDefaultValue = false;

    private bool allchat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Allchat {
      get { if ((_hasBits0 & 16777216) != 0) { return allchat_; } else { return AllchatDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        allchat_ = value;
      }
    }
    /// <summary>Gets whether the "allchat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllchat {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "allchat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllchat() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "dota_tv_delay" field.</summary>
    public const int DotaTvDelayFieldNumber = 53;
    private readonly static global::Steam.Protos.Dota2.LobbyDotaTVDelay DotaTvDelayDefaultValue = global::Steam.Protos.Dota2.LobbyDotaTVDelay.LobbyDotaTv10;

    private global::Steam.Protos.Dota2.LobbyDotaTVDelay dotaTvDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.LobbyDotaTVDelay DotaTvDelay {
      get { if ((_hasBits0 & 33554432) != 0) { return dotaTvDelay_; } else { return DotaTvDelayDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        dotaTvDelay_ = value;
      }
    }
    /// <summary>Gets whether the "dota_tv_delay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDotaTvDelay {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "dota_tv_delay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDotaTvDelay() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "custom_game_mode" field.</summary>
    public const int CustomGameModeFieldNumber = 54;
    private readonly static string CustomGameModeDefaultValue = "";

    private string customGameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomGameMode {
      get { return customGameMode_ ?? CustomGameModeDefaultValue; }
      set {
        customGameMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "custom_game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameMode {
      get { return customGameMode_ != null; }
    }
    /// <summary>Clears the value of the "custom_game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameMode() {
      customGameMode_ = null;
    }

    /// <summary>Field number for the "custom_map_name" field.</summary>
    public const int CustomMapNameFieldNumber = 55;
    private readonly static string CustomMapNameDefaultValue = "";

    private string customMapName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomMapName {
      get { return customMapName_ ?? CustomMapNameDefaultValue; }
      set {
        customMapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "custom_map_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomMapName {
      get { return customMapName_ != null; }
    }
    /// <summary>Clears the value of the "custom_map_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomMapName() {
      customMapName_ = null;
    }

    /// <summary>Field number for the "custom_difficulty" field.</summary>
    public const int CustomDifficultyFieldNumber = 56;
    private readonly static uint CustomDifficultyDefaultValue = 0;

    private uint customDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CustomDifficulty {
      get { if ((_hasBits0 & 67108864) != 0) { return customDifficulty_; } else { return CustomDifficultyDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        customDifficulty_ = value;
      }
    }
    /// <summary>Gets whether the "custom_difficulty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomDifficulty {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "custom_difficulty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomDifficulty() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "lan" field.</summary>
    public const int LanFieldNumber = 57;
    private readonly static bool LanDefaultValue = false;

    private bool lan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Lan {
      get { if ((_hasBits0 & 134217728) != 0) { return lan_; } else { return LanDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        lan_ = value;
      }
    }
    /// <summary>Gets whether the "lan" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLan {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "lan" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLan() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "broadcast_channel_info" field.</summary>
    public const int BroadcastChannelInfoFieldNumber = 58;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CLobbyBroadcastChannelInfo> _repeated_broadcastChannelInfo_codec
        = pb::FieldCodec.ForMessage(466, global::Steam.Protos.Dota2.CLobbyBroadcastChannelInfo.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyBroadcastChannelInfo> broadcastChannelInfo_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyBroadcastChannelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyBroadcastChannelInfo> BroadcastChannelInfo {
      get { return broadcastChannelInfo_; }
    }

    /// <summary>Field number for the "first_leaver_accountid" field.</summary>
    public const int FirstLeaverAccountidFieldNumber = 59;
    private readonly static uint FirstLeaverAccountidDefaultValue = 0;

    private uint firstLeaverAccountid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstLeaverAccountid {
      get { if ((_hasBits0 & 268435456) != 0) { return firstLeaverAccountid_; } else { return FirstLeaverAccountidDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        firstLeaverAccountid_ = value;
      }
    }
    /// <summary>Gets whether the "first_leaver_accountid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstLeaverAccountid {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "first_leaver_accountid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstLeaverAccountid() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "series_id" field.</summary>
    public const int SeriesIdFieldNumber = 60;
    private readonly static uint SeriesIdDefaultValue = 0;

    private uint seriesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeriesId {
      get { if ((_hasBits0 & 536870912) != 0) { return seriesId_; } else { return SeriesIdDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        seriesId_ = value;
      }
    }
    /// <summary>Gets whether the "series_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesId {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "series_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesId() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "low_priority" field.</summary>
    public const int LowPriorityFieldNumber = 61;
    private readonly static bool LowPriorityDefaultValue = false;

    private bool lowPriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LowPriority {
      get { if ((_hasBits0 & 1073741824) != 0) { return lowPriority_; } else { return LowPriorityDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        lowPriority_ = value;
      }
    }
    /// <summary>Gets whether the "low_priority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLowPriority {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "low_priority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowPriority() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "extra_messages" field.</summary>
    public const int ExtraMessagesFieldNumber = 62;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg> _repeated_extraMessages_codec
        = pb::FieldCodec.ForMessage(498, global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg> extraMessages_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg> ExtraMessages {
      get { return extraMessages_; }
    }

    /// <summary>Field number for the "first_blood_happened" field.</summary>
    public const int FirstBloodHappenedFieldNumber = 65;
    private readonly static bool FirstBloodHappenedDefaultValue = false;

    private bool firstBloodHappened_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FirstBloodHappened {
      get { if ((_hasBits0 & -2147483648) != 0) { return firstBloodHappened_; } else { return FirstBloodHappenedDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        firstBloodHappened_ = value;
      }
    }
    /// <summary>Gets whether the "first_blood_happened" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstBloodHappened {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "first_blood_happened" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstBloodHappened() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "match_outcome" field.</summary>
    public const int MatchOutcomeFieldNumber = 70;
    private readonly static global::Steam.Protos.Dota2.EMatchOutcome MatchOutcomeDefaultValue = global::Steam.Protos.Dota2.EMatchOutcome.KEmatchOutcomeUnknown;

    private global::Steam.Protos.Dota2.EMatchOutcome matchOutcome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EMatchOutcome MatchOutcome {
      get { if ((_hasBits1 & 4) != 0) { return matchOutcome_; } else { return MatchOutcomeDefaultValue; } }
      set {
        _hasBits1 |= 4;
        matchOutcome_ = value;
      }
    }
    /// <summary>Gets whether the "match_outcome" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchOutcome {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "match_outcome" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchOutcome() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "mass_disconnect" field.</summary>
    public const int MassDisconnectFieldNumber = 67;
    private readonly static bool MassDisconnectDefaultValue = false;

    private bool massDisconnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MassDisconnect {
      get { if ((_hasBits1 & 1) != 0) { return massDisconnect_; } else { return MassDisconnectDefaultValue; } }
      set {
        _hasBits1 |= 1;
        massDisconnect_ = value;
      }
    }
    /// <summary>Gets whether the "mass_disconnect" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMassDisconnect {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mass_disconnect" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMassDisconnect() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "custom_game_id" field.</summary>
    public const int CustomGameIdFieldNumber = 68;
    private readonly static ulong CustomGameIdDefaultValue = 0UL;

    private ulong customGameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomGameId {
      get { if ((_hasBits1 & 2) != 0) { return customGameId_; } else { return CustomGameIdDefaultValue; } }
      set {
        _hasBits1 |= 2;
        customGameId_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameId {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameId() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "custom_min_players" field.</summary>
    public const int CustomMinPlayersFieldNumber = 71;
    private readonly static uint CustomMinPlayersDefaultValue = 0;

    private uint customMinPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CustomMinPlayers {
      get { if ((_hasBits1 & 8) != 0) { return customMinPlayers_; } else { return CustomMinPlayersDefaultValue; } }
      set {
        _hasBits1 |= 8;
        customMinPlayers_ = value;
      }
    }
    /// <summary>Gets whether the "custom_min_players" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomMinPlayers {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "custom_min_players" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomMinPlayers() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "custom_max_players" field.</summary>
    public const int CustomMaxPlayersFieldNumber = 72;
    private readonly static uint CustomMaxPlayersDefaultValue = 0;

    private uint customMaxPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CustomMaxPlayers {
      get { if ((_hasBits1 & 16) != 0) { return customMaxPlayers_; } else { return CustomMaxPlayersDefaultValue; } }
      set {
        _hasBits1 |= 16;
        customMaxPlayers_ = value;
      }
    }
    /// <summary>Gets whether the "custom_max_players" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomMaxPlayers {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "custom_max_players" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomMaxPlayers() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 75;
    private readonly static global::Steam.Protos.Dota2.DOTALobbyVisibility VisibilityDefaultValue = global::Steam.Protos.Dota2.DOTALobbyVisibility.Public;

    private global::Steam.Protos.Dota2.DOTALobbyVisibility visibility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTALobbyVisibility Visibility {
      get { if ((_hasBits1 & 32) != 0) { return visibility_; } else { return VisibilityDefaultValue; } }
      set {
        _hasBits1 |= 32;
        visibility_ = value;
      }
    }
    /// <summary>Gets whether the "visibility" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisibility {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "visibility" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisibility() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "custom_game_crc" field.</summary>
    public const int CustomGameCrcFieldNumber = 76;
    private readonly static ulong CustomGameCrcDefaultValue = 0UL;

    private ulong customGameCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomGameCrc {
      get { if ((_hasBits1 & 64) != 0) { return customGameCrc_; } else { return CustomGameCrcDefaultValue; } }
      set {
        _hasBits1 |= 64;
        customGameCrc_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_crc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameCrc {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_crc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameCrc() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "custom_game_auto_created_lobby" field.</summary>
    public const int CustomGameAutoCreatedLobbyFieldNumber = 77;
    private readonly static bool CustomGameAutoCreatedLobbyDefaultValue = false;

    private bool customGameAutoCreatedLobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CustomGameAutoCreatedLobby {
      get { if ((_hasBits1 & 128) != 0) { return customGameAutoCreatedLobby_; } else { return CustomGameAutoCreatedLobbyDefaultValue; } }
      set {
        _hasBits1 |= 128;
        customGameAutoCreatedLobby_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_auto_created_lobby" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameAutoCreatedLobby {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_auto_created_lobby" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameAutoCreatedLobby() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "custom_game_timestamp" field.</summary>
    public const int CustomGameTimestampFieldNumber = 80;
    private readonly static uint CustomGameTimestampDefaultValue = 0;

    private uint customGameTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CustomGameTimestamp {
      get { if ((_hasBits1 & 256) != 0) { return customGameTimestamp_; } else { return CustomGameTimestampDefaultValue; } }
      set {
        _hasBits1 |= 256;
        customGameTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameTimestamp {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameTimestamp() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "previous_series_matches" field.</summary>
    public const int PreviousSeriesMatchesFieldNumber = 81;
    private static readonly pb::FieldCodec<ulong> _repeated_previousSeriesMatches_codec
        = pb::FieldCodec.ForUInt64(648);
    private readonly pbc::RepeatedField<ulong> previousSeriesMatches_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PreviousSeriesMatches {
      get { return previousSeriesMatches_; }
    }

    /// <summary>Field number for the "previous_match_override" field.</summary>
    public const int PreviousMatchOverrideFieldNumber = 82;
    private readonly static ulong PreviousMatchOverrideDefaultValue = 0UL;

    private ulong previousMatchOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PreviousMatchOverride {
      get { if ((_hasBits1 & 512) != 0) { return previousMatchOverride_; } else { return PreviousMatchOverrideDefaultValue; } }
      set {
        _hasBits1 |= 512;
        previousMatchOverride_ = value;
      }
    }
    /// <summary>Gets whether the "previous_match_override" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreviousMatchOverride {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "previous_match_override" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreviousMatchOverride() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "game_start_time" field.</summary>
    public const int GameStartTimeFieldNumber = 87;
    private readonly static uint GameStartTimeDefaultValue = 0;

    private uint gameStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameStartTime {
      get { if ((_hasBits1 & 1024) != 0) { return gameStartTime_; } else { return GameStartTimeDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        gameStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "game_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameStartTime {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "game_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameStartTime() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "pause_setting" field.</summary>
    public const int PauseSettingFieldNumber = 88;
    private readonly static global::Steam.Protos.Dota2.LobbyDotaPauseSetting PauseSettingDefaultValue = global::Steam.Protos.Dota2.LobbyDotaPauseSetting.Unlimited;

    private global::Steam.Protos.Dota2.LobbyDotaPauseSetting pauseSetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.LobbyDotaPauseSetting PauseSetting {
      get { if ((_hasBits1 & 2048) != 0) { return pauseSetting_; } else { return PauseSettingDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        pauseSetting_ = value;
      }
    }
    /// <summary>Gets whether the "pause_setting" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPauseSetting {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "pause_setting" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPauseSetting() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "weekend_tourney_division_id" field.</summary>
    public const int WeekendTourneyDivisionIdFieldNumber = 90;
    private readonly static uint WeekendTourneyDivisionIdDefaultValue = 0;

    private uint weekendTourneyDivisionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeekendTourneyDivisionId {
      get { if ((_hasBits1 & 4096) != 0) { return weekendTourneyDivisionId_; } else { return WeekendTourneyDivisionIdDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        weekendTourneyDivisionId_ = value;
      }
    }
    /// <summary>Gets whether the "weekend_tourney_division_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWeekendTourneyDivisionId {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "weekend_tourney_division_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWeekendTourneyDivisionId() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "weekend_tourney_skill_level" field.</summary>
    public const int WeekendTourneySkillLevelFieldNumber = 91;
    private readonly static uint WeekendTourneySkillLevelDefaultValue = 0;

    private uint weekendTourneySkillLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeekendTourneySkillLevel {
      get { if ((_hasBits1 & 8192) != 0) { return weekendTourneySkillLevel_; } else { return WeekendTourneySkillLevelDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        weekendTourneySkillLevel_ = value;
      }
    }
    /// <summary>Gets whether the "weekend_tourney_skill_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWeekendTourneySkillLevel {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "weekend_tourney_skill_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWeekendTourneySkillLevel() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "weekend_tourney_bracket_round" field.</summary>
    public const int WeekendTourneyBracketRoundFieldNumber = 92;
    private readonly static uint WeekendTourneyBracketRoundDefaultValue = 0;

    private uint weekendTourneyBracketRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeekendTourneyBracketRound {
      get { if ((_hasBits1 & 16384) != 0) { return weekendTourneyBracketRound_; } else { return WeekendTourneyBracketRoundDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        weekendTourneyBracketRound_ = value;
      }
    }
    /// <summary>Gets whether the "weekend_tourney_bracket_round" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWeekendTourneyBracketRound {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "weekend_tourney_bracket_round" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWeekendTourneyBracketRound() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "bot_difficulty_dire" field.</summary>
    public const int BotDifficultyDireFieldNumber = 93;
    private readonly static global::Steam.Protos.Dota2.DOTABotDifficulty BotDifficultyDireDefaultValue = global::Steam.Protos.Dota2.DOTABotDifficulty.BotDifficultyHard;

    private global::Steam.Protos.Dota2.DOTABotDifficulty botDifficultyDire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTABotDifficulty BotDifficultyDire {
      get { if ((_hasBits1 & 32768) != 0) { return botDifficultyDire_; } else { return BotDifficultyDireDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        botDifficultyDire_ = value;
      }
    }
    /// <summary>Gets whether the "bot_difficulty_dire" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBotDifficultyDire {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "bot_difficulty_dire" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBotDifficultyDire() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "bot_radiant" field.</summary>
    public const int BotRadiantFieldNumber = 94;
    private readonly static ulong BotRadiantDefaultValue = 0UL;

    private ulong botRadiant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BotRadiant {
      get { if ((_hasBits1 & 65536) != 0) { return botRadiant_; } else { return BotRadiantDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        botRadiant_ = value;
      }
    }
    /// <summary>Gets whether the "bot_radiant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBotRadiant {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "bot_radiant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBotRadiant() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "bot_dire" field.</summary>
    public const int BotDireFieldNumber = 95;
    private readonly static ulong BotDireDefaultValue = 0UL;

    private ulong botDire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BotDire {
      get { if ((_hasBits1 & 131072) != 0) { return botDire_; } else { return BotDireDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        botDire_ = value;
      }
    }
    /// <summary>Gets whether the "bot_dire" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBotDire {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "bot_dire" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBotDire() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "event_progression_enabled" field.</summary>
    public const int EventProgressionEnabledFieldNumber = 96;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.EEvent> _repeated_eventProgressionEnabled_codec
        = pb::FieldCodec.ForEnum(768, x => (int) x, x => (global::Steam.Protos.Dota2.EEvent) x);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.EEvent> eventProgressionEnabled_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.EEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.EEvent> EventProgressionEnabled {
      get { return eventProgressionEnabled_; }
    }

    /// <summary>Field number for the "selection_priority_rules" field.</summary>
    public const int SelectionPriorityRulesFieldNumber = 97;
    private readonly static global::Steam.Protos.Dota2.DOTASelectionPriorityRules SelectionPriorityRulesDefaultValue = global::Steam.Protos.Dota2.DOTASelectionPriorityRules.KDotaselectionPriorityRulesManual;

    private global::Steam.Protos.Dota2.DOTASelectionPriorityRules selectionPriorityRules_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTASelectionPriorityRules SelectionPriorityRules {
      get { if ((_hasBits1 & 262144) != 0) { return selectionPriorityRules_; } else { return SelectionPriorityRulesDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        selectionPriorityRules_ = value;
      }
    }
    /// <summary>Gets whether the "selection_priority_rules" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSelectionPriorityRules {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "selection_priority_rules" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSelectionPriorityRules() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "series_previous_selection_priority_team_id" field.</summary>
    public const int SeriesPreviousSelectionPriorityTeamIdFieldNumber = 98;
    private readonly static uint SeriesPreviousSelectionPriorityTeamIdDefaultValue = 0;

    private uint seriesPreviousSelectionPriorityTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeriesPreviousSelectionPriorityTeamId {
      get { if ((_hasBits1 & 524288) != 0) { return seriesPreviousSelectionPriorityTeamId_; } else { return SeriesPreviousSelectionPriorityTeamIdDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        seriesPreviousSelectionPriorityTeamId_ = value;
      }
    }
    /// <summary>Gets whether the "series_previous_selection_priority_team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesPreviousSelectionPriorityTeamId {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "series_previous_selection_priority_team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesPreviousSelectionPriorityTeamId() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "series_current_selection_priority_team_id" field.</summary>
    public const int SeriesCurrentSelectionPriorityTeamIdFieldNumber = 99;
    private readonly static uint SeriesCurrentSelectionPriorityTeamIdDefaultValue = 0;

    private uint seriesCurrentSelectionPriorityTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeriesCurrentSelectionPriorityTeamId {
      get { if ((_hasBits1 & 1048576) != 0) { return seriesCurrentSelectionPriorityTeamId_; } else { return SeriesCurrentSelectionPriorityTeamIdDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        seriesCurrentSelectionPriorityTeamId_ = value;
      }
    }
    /// <summary>Gets whether the "series_current_selection_priority_team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesCurrentSelectionPriorityTeamId {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "series_current_selection_priority_team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesCurrentSelectionPriorityTeamId() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "series_current_priority_team_choice" field.</summary>
    public const int SeriesCurrentPriorityTeamChoiceFieldNumber = 100;
    private readonly static global::Steam.Protos.Dota2.DOTASelectionPriorityChoice SeriesCurrentPriorityTeamChoiceDefaultValue = global::Steam.Protos.Dota2.DOTASelectionPriorityChoice.KDotaselectionPriorityChoiceInvalid;

    private global::Steam.Protos.Dota2.DOTASelectionPriorityChoice seriesCurrentPriorityTeamChoice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTASelectionPriorityChoice SeriesCurrentPriorityTeamChoice {
      get { if ((_hasBits1 & 2097152) != 0) { return seriesCurrentPriorityTeamChoice_; } else { return SeriesCurrentPriorityTeamChoiceDefaultValue; } }
      set {
        _hasBits1 |= 2097152;
        seriesCurrentPriorityTeamChoice_ = value;
      }
    }
    /// <summary>Gets whether the "series_current_priority_team_choice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesCurrentPriorityTeamChoice {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "series_current_priority_team_choice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesCurrentPriorityTeamChoice() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "series_current_non_priority_team_choice" field.</summary>
    public const int SeriesCurrentNonPriorityTeamChoiceFieldNumber = 101;
    private readonly static global::Steam.Protos.Dota2.DOTASelectionPriorityChoice SeriesCurrentNonPriorityTeamChoiceDefaultValue = global::Steam.Protos.Dota2.DOTASelectionPriorityChoice.KDotaselectionPriorityChoiceInvalid;

    private global::Steam.Protos.Dota2.DOTASelectionPriorityChoice seriesCurrentNonPriorityTeamChoice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTASelectionPriorityChoice SeriesCurrentNonPriorityTeamChoice {
      get { if ((_hasBits1 & 4194304) != 0) { return seriesCurrentNonPriorityTeamChoice_; } else { return SeriesCurrentNonPriorityTeamChoiceDefaultValue; } }
      set {
        _hasBits1 |= 4194304;
        seriesCurrentNonPriorityTeamChoice_ = value;
      }
    }
    /// <summary>Gets whether the "series_current_non_priority_team_choice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesCurrentNonPriorityTeamChoice {
      get { return (_hasBits1 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "series_current_non_priority_team_choice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesCurrentNonPriorityTeamChoice() {
      _hasBits1 &= ~4194304;
    }

    /// <summary>Field number for the "series_current_selection_priority_used_coin_toss" field.</summary>
    public const int SeriesCurrentSelectionPriorityUsedCoinTossFieldNumber = 102;
    private readonly static bool SeriesCurrentSelectionPriorityUsedCoinTossDefaultValue = false;

    private bool seriesCurrentSelectionPriorityUsedCoinToss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SeriesCurrentSelectionPriorityUsedCoinToss {
      get { if ((_hasBits1 & 8388608) != 0) { return seriesCurrentSelectionPriorityUsedCoinToss_; } else { return SeriesCurrentSelectionPriorityUsedCoinTossDefaultValue; } }
      set {
        _hasBits1 |= 8388608;
        seriesCurrentSelectionPriorityUsedCoinToss_ = value;
      }
    }
    /// <summary>Gets whether the "series_current_selection_priority_used_coin_toss" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeriesCurrentSelectionPriorityUsedCoinToss {
      get { return (_hasBits1 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "series_current_selection_priority_used_coin_toss" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeriesCurrentSelectionPriorityUsedCoinToss() {
      _hasBits1 &= ~8388608;
    }

    /// <summary>Field number for the "current_primary_event" field.</summary>
    public const int CurrentPrimaryEventFieldNumber = 103;
    private readonly static global::Steam.Protos.Dota2.EEvent CurrentPrimaryEventDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent currentPrimaryEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent CurrentPrimaryEvent {
      get { if ((_hasBits1 & 16777216) != 0) { return currentPrimaryEvent_; } else { return CurrentPrimaryEventDefaultValue; } }
      set {
        _hasBits1 |= 16777216;
        currentPrimaryEvent_ = value;
      }
    }
    /// <summary>Gets whether the "current_primary_event" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentPrimaryEvent {
      get { return (_hasBits1 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "current_primary_event" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentPrimaryEvent() {
      _hasBits1 &= ~16777216;
    }

    /// <summary>Field number for the "emergency_disabled_hero_ids" field.</summary>
    public const int EmergencyDisabledHeroIdsFieldNumber = 105;
    private static readonly pb::FieldCodec<int> _repeated_emergencyDisabledHeroIds_codec
        = pb::FieldCodec.ForInt32(840);
    private readonly pbc::RepeatedField<int> emergencyDisabledHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EmergencyDisabledHeroIds {
      get { return emergencyDisabledHeroIds_; }
    }

    /// <summary>Field number for the "custom_game_private_key" field.</summary>
    public const int CustomGamePrivateKeyFieldNumber = 106;
    private readonly static ulong CustomGamePrivateKeyDefaultValue = 0UL;

    private ulong customGamePrivateKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomGamePrivateKey {
      get { if ((_hasBits1 & 33554432) != 0) { return customGamePrivateKey_; } else { return CustomGamePrivateKeyDefaultValue; } }
      set {
        _hasBits1 |= 33554432;
        customGamePrivateKey_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_private_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGamePrivateKey {
      get { return (_hasBits1 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_private_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGamePrivateKey() {
      _hasBits1 &= ~33554432;
    }

    /// <summary>Field number for the "custom_game_penalties" field.</summary>
    public const int CustomGamePenaltiesFieldNumber = 107;
    private readonly static bool CustomGamePenaltiesDefaultValue = false;

    private bool customGamePenalties_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CustomGamePenalties {
      get { if ((_hasBits1 & 67108864) != 0) { return customGamePenalties_; } else { return CustomGamePenaltiesDefaultValue; } }
      set {
        _hasBits1 |= 67108864;
        customGamePenalties_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_penalties" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGamePenalties {
      get { return (_hasBits1 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_penalties" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGamePenalties() {
      _hasBits1 &= ~67108864;
    }

    /// <summary>Field number for the "lan_host_ping_location" field.</summary>
    public const int LanHostPingLocationFieldNumber = 109;
    private readonly static string LanHostPingLocationDefaultValue = "";

    private string lanHostPingLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanHostPingLocation {
      get { return lanHostPingLocation_ ?? LanHostPingLocationDefaultValue; }
      set {
        lanHostPingLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "lan_host_ping_location" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanHostPingLocation {
      get { return lanHostPingLocation_ != null; }
    }
    /// <summary>Clears the value of the "lan_host_ping_location" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanHostPingLocation() {
      lanHostPingLocation_ = null;
    }

    /// <summary>Field number for the "league_node_id" field.</summary>
    public const int LeagueNodeIdFieldNumber = 110;
    private readonly static uint LeagueNodeIdDefaultValue = 0;

    private uint leagueNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeagueNodeId {
      get { if ((_hasBits1 & 134217728) != 0) { return leagueNodeId_; } else { return LeagueNodeIdDefaultValue; } }
      set {
        _hasBits1 |= 134217728;
        leagueNodeId_ = value;
      }
    }
    /// <summary>Gets whether the "league_node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeagueNodeId {
      get { return (_hasBits1 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "league_node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeagueNodeId() {
      _hasBits1 &= ~134217728;
    }

    /// <summary>Field number for the "match_duration" field.</summary>
    public const int MatchDurationFieldNumber = 111;
    private readonly static uint MatchDurationDefaultValue = 0;

    private uint matchDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchDuration {
      get { if ((_hasBits1 & 268435456) != 0) { return matchDuration_; } else { return MatchDurationDefaultValue; } }
      set {
        _hasBits1 |= 268435456;
        matchDuration_ = value;
      }
    }
    /// <summary>Gets whether the "match_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchDuration {
      get { return (_hasBits1 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "match_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchDuration() {
      _hasBits1 &= ~268435456;
    }

    /// <summary>Field number for the "league_phase" field.</summary>
    public const int LeaguePhaseFieldNumber = 113;
    private readonly static uint LeaguePhaseDefaultValue = 0;

    private uint leaguePhase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaguePhase {
      get { if ((_hasBits1 & 536870912) != 0) { return leaguePhase_; } else { return LeaguePhaseDefaultValue; } }
      set {
        _hasBits1 |= 536870912;
        leaguePhase_ = value;
      }
    }
    /// <summary>Gets whether the "league_phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaguePhase {
      get { return (_hasBits1 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "league_phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaguePhase() {
      _hasBits1 &= ~536870912;
    }

    /// <summary>Field number for the "experimental_gameplay_enabled" field.</summary>
    public const int ExperimentalGameplayEnabledFieldNumber = 116;
    private readonly static bool ExperimentalGameplayEnabledDefaultValue = false;

    private bool experimentalGameplayEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExperimentalGameplayEnabled {
      get { if ((_hasBits1 & 1073741824) != 0) { return experimentalGameplayEnabled_; } else { return ExperimentalGameplayEnabledDefaultValue; } }
      set {
        _hasBits1 |= 1073741824;
        experimentalGameplayEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "experimental_gameplay_enabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExperimentalGameplayEnabled {
      get { return (_hasBits1 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "experimental_gameplay_enabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExperimentalGameplayEnabled() {
      _hasBits1 &= ~1073741824;
    }

    /// <summary>Field number for the "guild_challenges" field.</summary>
    public const int GuildChallengesFieldNumber = 117;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CLobbyGuildChallenge> _repeated_guildChallenges_codec
        = pb::FieldCodec.ForMessage(938, global::Steam.Protos.Dota2.CLobbyGuildChallenge.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyGuildChallenge> guildChallenges_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyGuildChallenge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyGuildChallenge> GuildChallenges {
      get { return guildChallenges_; }
    }

    /// <summary>Field number for the "guild_details" field.</summary>
    public const int GuildDetailsFieldNumber = 118;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CLobbyGuildDetails> _repeated_guildDetails_codec
        = pb::FieldCodec.ForMessage(946, global::Steam.Protos.Dota2.CLobbyGuildDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyGuildDetails> guildDetails_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyGuildDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CLobbyGuildDetails> GuildDetails {
      get { return guildDetails_; }
    }

    /// <summary>Field number for the "requested_hero_ids" field.</summary>
    public const int RequestedHeroIdsFieldNumber = 124;
    private static readonly pb::FieldCodec<int> _repeated_requestedHeroIds_codec
        = pb::FieldCodec.ForInt32(992);
    private readonly pbc::RepeatedField<int> requestedHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RequestedHeroIds {
      get { return requestedHeroIds_; }
    }

    /// <summary>Field number for the "coach_friend_requests" field.</summary>
    public const int CoachFriendRequestsFieldNumber = 125;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgLobbyCoachFriendRequest> _repeated_coachFriendRequests_codec
        = pb::FieldCodec.ForMessage(1002, global::Steam.Protos.Dota2.CMsgLobbyCoachFriendRequest.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyCoachFriendRequest> coachFriendRequests_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyCoachFriendRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyCoachFriendRequest> CoachFriendRequests {
      get { return coachFriendRequests_; }
    }

    /// <summary>Field number for the "is_in_steam_china" field.</summary>
    public const int IsInSteamChinaFieldNumber = 126;
    private readonly static bool IsInSteamChinaDefaultValue = false;

    private bool isInSteamChina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInSteamChina {
      get { if ((_hasBits1 & -2147483648) != 0) { return isInSteamChina_; } else { return IsInSteamChinaDefaultValue; } }
      set {
        _hasBits1 |= -2147483648;
        isInSteamChina_ = value;
      }
    }
    /// <summary>Gets whether the "is_in_steam_china" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsInSteamChina {
      get { return (_hasBits1 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "is_in_steam_china" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsInSteamChina() {
      _hasBits1 &= ~-2147483648;
    }

    /// <summary>Field number for the "with_scenario_save" field.</summary>
    public const int WithScenarioSaveFieldNumber = 127;
    private readonly static bool WithScenarioSaveDefaultValue = false;

    private bool withScenarioSave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithScenarioSave {
      get { if ((_hasBits2 & 1) != 0) { return withScenarioSave_; } else { return WithScenarioSaveDefaultValue; } }
      set {
        _hasBits2 |= 1;
        withScenarioSave_ = value;
      }
    }
    /// <summary>Gets whether the "with_scenario_save" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWithScenarioSave {
      get { return (_hasBits2 & 1) != 0; }
    }
    /// <summary>Clears the value of the "with_scenario_save" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWithScenarioSave() {
      _hasBits2 &= ~1;
    }

    /// <summary>Field number for the "lobby_creation_time" field.</summary>
    public const int LobbyCreationTimeFieldNumber = 128;
    private readonly static uint LobbyCreationTimeDefaultValue = 0;

    private uint lobbyCreationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyCreationTime {
      get { if ((_hasBits2 & 2) != 0) { return lobbyCreationTime_; } else { return LobbyCreationTimeDefaultValue; } }
      set {
        _hasBits2 |= 2;
        lobbyCreationTime_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyCreationTime {
      get { return (_hasBits2 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lobby_creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyCreationTime() {
      _hasBits2 &= ~2;
    }

    /// <summary>Field number for the "event_game_definition" field.</summary>
    public const int EventGameDefinitionFieldNumber = 129;
    private readonly static string EventGameDefinitionDefaultValue = "";

    private string eventGameDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventGameDefinition {
      get { return eventGameDefinition_ ?? EventGameDefinitionDefaultValue; }
      set {
        eventGameDefinition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "event_game_definition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventGameDefinition {
      get { return eventGameDefinition_ != null; }
    }
    /// <summary>Clears the value of the "event_game_definition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventGameDefinition() {
      eventGameDefinition_ = null;
    }

    /// <summary>Field number for the "match_quality_data" field.</summary>
    public const int MatchQualityDataFieldNumber = 131;
    private global::Steam.Protos.Dota2.CDOTALobbyMatchQualityData matchQualityData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTALobbyMatchQualityData MatchQualityData {
      get { return matchQualityData_; }
      set {
        matchQualityData_ = value;
      }
    }

    /// <summary>Field number for the "requested_hero_teams" field.</summary>
    public const int RequestedHeroTeamsFieldNumber = 132;
    private static readonly pb::FieldCodec<int> _repeated_requestedHeroTeams_codec
        = pb::FieldCodec.ForInt32(1056);
    private readonly pbc::RepeatedField<int> requestedHeroTeams_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RequestedHeroTeams {
      get { return requestedHeroTeams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTALobby);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTALobby other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LobbyId != other.LobbyId) return false;
      if(!allMembers_.Equals(other.allMembers_)) return false;
      if(!memberIndices_.Equals(other.memberIndices_)) return false;
      if(!leftMemberIndices_.Equals(other.leftMemberIndices_)) return false;
      if(!freeMemberIndices_.Equals(other.freeMemberIndices_)) return false;
      if (LeaderId != other.LeaderId) return false;
      if (ServerId != other.ServerId) return false;
      if (GameMode != other.GameMode) return false;
      if(!pendingInvites_.Equals(other.pendingInvites_)) return false;
      if (State != other.State) return false;
      if (Connect != other.Connect) return false;
      if (LobbyType != other.LobbyType) return false;
      if (AllowCheats != other.AllowCheats) return false;
      if (FillWithBots != other.FillWithBots) return false;
      if (GameName != other.GameName) return false;
      if(!teamDetails_.Equals(other.teamDetails_)) return false;
      if (TournamentId != other.TournamentId) return false;
      if (TournamentGameId != other.TournamentGameId) return false;
      if (ServerRegion != other.ServerRegion) return false;
      if (GameState != other.GameState) return false;
      if (NumSpectators != other.NumSpectators) return false;
      if (Matchgroup != other.Matchgroup) return false;
      if (CmPick != other.CmPick) return false;
      if (MatchId != other.MatchId) return false;
      if (AllowSpectating != other.AllowSpectating) return false;
      if (BotDifficultyRadiant != other.BotDifficultyRadiant) return false;
      if (PassKey != other.PassKey) return false;
      if (Leagueid != other.Leagueid) return false;
      if (PenaltyLevelRadiant != other.PenaltyLevelRadiant) return false;
      if (PenaltyLevelDire != other.PenaltyLevelDire) return false;
      if (SeriesType != other.SeriesType) return false;
      if (RadiantSeriesWins != other.RadiantSeriesWins) return false;
      if (DireSeriesWins != other.DireSeriesWins) return false;
      if (Allchat != other.Allchat) return false;
      if (DotaTvDelay != other.DotaTvDelay) return false;
      if (CustomGameMode != other.CustomGameMode) return false;
      if (CustomMapName != other.CustomMapName) return false;
      if (CustomDifficulty != other.CustomDifficulty) return false;
      if (Lan != other.Lan) return false;
      if(!broadcastChannelInfo_.Equals(other.broadcastChannelInfo_)) return false;
      if (FirstLeaverAccountid != other.FirstLeaverAccountid) return false;
      if (SeriesId != other.SeriesId) return false;
      if (LowPriority != other.LowPriority) return false;
      if(!extraMessages_.Equals(other.extraMessages_)) return false;
      if (FirstBloodHappened != other.FirstBloodHappened) return false;
      if (MatchOutcome != other.MatchOutcome) return false;
      if (MassDisconnect != other.MassDisconnect) return false;
      if (CustomGameId != other.CustomGameId) return false;
      if (CustomMinPlayers != other.CustomMinPlayers) return false;
      if (CustomMaxPlayers != other.CustomMaxPlayers) return false;
      if (Visibility != other.Visibility) return false;
      if (CustomGameCrc != other.CustomGameCrc) return false;
      if (CustomGameAutoCreatedLobby != other.CustomGameAutoCreatedLobby) return false;
      if (CustomGameTimestamp != other.CustomGameTimestamp) return false;
      if(!previousSeriesMatches_.Equals(other.previousSeriesMatches_)) return false;
      if (PreviousMatchOverride != other.PreviousMatchOverride) return false;
      if (GameStartTime != other.GameStartTime) return false;
      if (PauseSetting != other.PauseSetting) return false;
      if (WeekendTourneyDivisionId != other.WeekendTourneyDivisionId) return false;
      if (WeekendTourneySkillLevel != other.WeekendTourneySkillLevel) return false;
      if (WeekendTourneyBracketRound != other.WeekendTourneyBracketRound) return false;
      if (BotDifficultyDire != other.BotDifficultyDire) return false;
      if (BotRadiant != other.BotRadiant) return false;
      if (BotDire != other.BotDire) return false;
      if(!eventProgressionEnabled_.Equals(other.eventProgressionEnabled_)) return false;
      if (SelectionPriorityRules != other.SelectionPriorityRules) return false;
      if (SeriesPreviousSelectionPriorityTeamId != other.SeriesPreviousSelectionPriorityTeamId) return false;
      if (SeriesCurrentSelectionPriorityTeamId != other.SeriesCurrentSelectionPriorityTeamId) return false;
      if (SeriesCurrentPriorityTeamChoice != other.SeriesCurrentPriorityTeamChoice) return false;
      if (SeriesCurrentNonPriorityTeamChoice != other.SeriesCurrentNonPriorityTeamChoice) return false;
      if (SeriesCurrentSelectionPriorityUsedCoinToss != other.SeriesCurrentSelectionPriorityUsedCoinToss) return false;
      if (CurrentPrimaryEvent != other.CurrentPrimaryEvent) return false;
      if(!emergencyDisabledHeroIds_.Equals(other.emergencyDisabledHeroIds_)) return false;
      if (CustomGamePrivateKey != other.CustomGamePrivateKey) return false;
      if (CustomGamePenalties != other.CustomGamePenalties) return false;
      if (LanHostPingLocation != other.LanHostPingLocation) return false;
      if (LeagueNodeId != other.LeagueNodeId) return false;
      if (MatchDuration != other.MatchDuration) return false;
      if (LeaguePhase != other.LeaguePhase) return false;
      if (ExperimentalGameplayEnabled != other.ExperimentalGameplayEnabled) return false;
      if(!guildChallenges_.Equals(other.guildChallenges_)) return false;
      if(!guildDetails_.Equals(other.guildDetails_)) return false;
      if(!requestedHeroIds_.Equals(other.requestedHeroIds_)) return false;
      if(!coachFriendRequests_.Equals(other.coachFriendRequests_)) return false;
      if (IsInSteamChina != other.IsInSteamChina) return false;
      if (WithScenarioSave != other.WithScenarioSave) return false;
      if (LobbyCreationTime != other.LobbyCreationTime) return false;
      if (EventGameDefinition != other.EventGameDefinition) return false;
      if (!object.Equals(MatchQualityData, other.MatchQualityData)) return false;
      if(!requestedHeroTeams_.Equals(other.requestedHeroTeams_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLobbyId) hash ^= LobbyId.GetHashCode();
      hash ^= allMembers_.GetHashCode();
      hash ^= memberIndices_.GetHashCode();
      hash ^= leftMemberIndices_.GetHashCode();
      hash ^= freeMemberIndices_.GetHashCode();
      if (HasLeaderId) hash ^= LeaderId.GetHashCode();
      if (HasServerId) hash ^= ServerId.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      hash ^= pendingInvites_.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasConnect) hash ^= Connect.GetHashCode();
      if (HasLobbyType) hash ^= LobbyType.GetHashCode();
      if (HasAllowCheats) hash ^= AllowCheats.GetHashCode();
      if (HasFillWithBots) hash ^= FillWithBots.GetHashCode();
      if (HasGameName) hash ^= GameName.GetHashCode();
      hash ^= teamDetails_.GetHashCode();
      if (HasTournamentId) hash ^= TournamentId.GetHashCode();
      if (HasTournamentGameId) hash ^= TournamentGameId.GetHashCode();
      if (HasServerRegion) hash ^= ServerRegion.GetHashCode();
      if (HasGameState) hash ^= GameState.GetHashCode();
      if (HasNumSpectators) hash ^= NumSpectators.GetHashCode();
      if (HasMatchgroup) hash ^= Matchgroup.GetHashCode();
      if (HasCmPick) hash ^= CmPick.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasAllowSpectating) hash ^= AllowSpectating.GetHashCode();
      if (HasBotDifficultyRadiant) hash ^= BotDifficultyRadiant.GetHashCode();
      if (HasPassKey) hash ^= PassKey.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasPenaltyLevelRadiant) hash ^= PenaltyLevelRadiant.GetHashCode();
      if (HasPenaltyLevelDire) hash ^= PenaltyLevelDire.GetHashCode();
      if (HasSeriesType) hash ^= SeriesType.GetHashCode();
      if (HasRadiantSeriesWins) hash ^= RadiantSeriesWins.GetHashCode();
      if (HasDireSeriesWins) hash ^= DireSeriesWins.GetHashCode();
      if (HasAllchat) hash ^= Allchat.GetHashCode();
      if (HasDotaTvDelay) hash ^= DotaTvDelay.GetHashCode();
      if (HasCustomGameMode) hash ^= CustomGameMode.GetHashCode();
      if (HasCustomMapName) hash ^= CustomMapName.GetHashCode();
      if (HasCustomDifficulty) hash ^= CustomDifficulty.GetHashCode();
      if (HasLan) hash ^= Lan.GetHashCode();
      hash ^= broadcastChannelInfo_.GetHashCode();
      if (HasFirstLeaverAccountid) hash ^= FirstLeaverAccountid.GetHashCode();
      if (HasSeriesId) hash ^= SeriesId.GetHashCode();
      if (HasLowPriority) hash ^= LowPriority.GetHashCode();
      hash ^= extraMessages_.GetHashCode();
      if (HasFirstBloodHappened) hash ^= FirstBloodHappened.GetHashCode();
      if (HasMatchOutcome) hash ^= MatchOutcome.GetHashCode();
      if (HasMassDisconnect) hash ^= MassDisconnect.GetHashCode();
      if (HasCustomGameId) hash ^= CustomGameId.GetHashCode();
      if (HasCustomMinPlayers) hash ^= CustomMinPlayers.GetHashCode();
      if (HasCustomMaxPlayers) hash ^= CustomMaxPlayers.GetHashCode();
      if (HasVisibility) hash ^= Visibility.GetHashCode();
      if (HasCustomGameCrc) hash ^= CustomGameCrc.GetHashCode();
      if (HasCustomGameAutoCreatedLobby) hash ^= CustomGameAutoCreatedLobby.GetHashCode();
      if (HasCustomGameTimestamp) hash ^= CustomGameTimestamp.GetHashCode();
      hash ^= previousSeriesMatches_.GetHashCode();
      if (HasPreviousMatchOverride) hash ^= PreviousMatchOverride.GetHashCode();
      if (HasGameStartTime) hash ^= GameStartTime.GetHashCode();
      if (HasPauseSetting) hash ^= PauseSetting.GetHashCode();
      if (HasWeekendTourneyDivisionId) hash ^= WeekendTourneyDivisionId.GetHashCode();
      if (HasWeekendTourneySkillLevel) hash ^= WeekendTourneySkillLevel.GetHashCode();
      if (HasWeekendTourneyBracketRound) hash ^= WeekendTourneyBracketRound.GetHashCode();
      if (HasBotDifficultyDire) hash ^= BotDifficultyDire.GetHashCode();
      if (HasBotRadiant) hash ^= BotRadiant.GetHashCode();
      if (HasBotDire) hash ^= BotDire.GetHashCode();
      hash ^= eventProgressionEnabled_.GetHashCode();
      if (HasSelectionPriorityRules) hash ^= SelectionPriorityRules.GetHashCode();
      if (HasSeriesPreviousSelectionPriorityTeamId) hash ^= SeriesPreviousSelectionPriorityTeamId.GetHashCode();
      if (HasSeriesCurrentSelectionPriorityTeamId) hash ^= SeriesCurrentSelectionPriorityTeamId.GetHashCode();
      if (HasSeriesCurrentPriorityTeamChoice) hash ^= SeriesCurrentPriorityTeamChoice.GetHashCode();
      if (HasSeriesCurrentNonPriorityTeamChoice) hash ^= SeriesCurrentNonPriorityTeamChoice.GetHashCode();
      if (HasSeriesCurrentSelectionPriorityUsedCoinToss) hash ^= SeriesCurrentSelectionPriorityUsedCoinToss.GetHashCode();
      if (HasCurrentPrimaryEvent) hash ^= CurrentPrimaryEvent.GetHashCode();
      hash ^= emergencyDisabledHeroIds_.GetHashCode();
      if (HasCustomGamePrivateKey) hash ^= CustomGamePrivateKey.GetHashCode();
      if (HasCustomGamePenalties) hash ^= CustomGamePenalties.GetHashCode();
      if (HasLanHostPingLocation) hash ^= LanHostPingLocation.GetHashCode();
      if (HasLeagueNodeId) hash ^= LeagueNodeId.GetHashCode();
      if (HasMatchDuration) hash ^= MatchDuration.GetHashCode();
      if (HasLeaguePhase) hash ^= LeaguePhase.GetHashCode();
      if (HasExperimentalGameplayEnabled) hash ^= ExperimentalGameplayEnabled.GetHashCode();
      hash ^= guildChallenges_.GetHashCode();
      hash ^= guildDetails_.GetHashCode();
      hash ^= requestedHeroIds_.GetHashCode();
      hash ^= coachFriendRequests_.GetHashCode();
      if (HasIsInSteamChina) hash ^= IsInSteamChina.GetHashCode();
      if (HasWithScenarioSave) hash ^= WithScenarioSave.GetHashCode();
      if (HasLobbyCreationTime) hash ^= LobbyCreationTime.GetHashCode();
      if (HasEventGameDefinition) hash ^= EventGameDefinition.GetHashCode();
      if (matchQualityData_ != null) hash ^= MatchQualityData.GetHashCode();
      hash ^= requestedHeroTeams_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLobbyId) {
        output.WriteRawTag(8);
        output.WriteUInt64(LobbyId);
      }
      if (HasGameMode) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameMode);
      }
      if (HasState) {
        output.WriteRawTag(32);
        output.WriteEnum((int) State);
      }
      if (HasConnect) {
        output.WriteRawTag(42);
        output.WriteString(Connect);
      }
      if (HasServerId) {
        output.WriteRawTag(49);
        output.WriteFixed64(ServerId);
      }
      pendingInvites_.WriteTo(output, _repeated_pendingInvites_codec);
      if (HasLeaderId) {
        output.WriteRawTag(89);
        output.WriteFixed64(LeaderId);
      }
      if (HasLobbyType) {
        output.WriteRawTag(96);
        output.WriteEnum((int) LobbyType);
      }
      if (HasAllowCheats) {
        output.WriteRawTag(104);
        output.WriteBool(AllowCheats);
      }
      if (HasFillWithBots) {
        output.WriteRawTag(112);
        output.WriteBool(FillWithBots);
      }
      if (HasGameName) {
        output.WriteRawTag(130, 1);
        output.WriteString(GameName);
      }
      teamDetails_.WriteTo(output, _repeated_teamDetails_codec);
      if (HasTournamentId) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(TournamentId);
      }
      if (HasTournamentGameId) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(TournamentGameId);
      }
      if (HasServerRegion) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(ServerRegion);
      }
      if (HasGameState) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) GameState);
      }
      if (HasNumSpectators) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(NumSpectators);
      }
      if (HasMatchgroup) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Matchgroup);
      }
      if (HasCmPick) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) CmPick);
      }
      if (HasMatchId) {
        output.WriteRawTag(240, 1);
        output.WriteUInt64(MatchId);
      }
      if (HasAllowSpectating) {
        output.WriteRawTag(248, 1);
        output.WriteBool(AllowSpectating);
      }
      if (HasBotDifficultyRadiant) {
        output.WriteRawTag(160, 2);
        output.WriteEnum((int) BotDifficultyRadiant);
      }
      if (HasPassKey) {
        output.WriteRawTag(186, 2);
        output.WriteString(PassKey);
      }
      if (HasLeagueid) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(Leagueid);
      }
      if (HasPenaltyLevelRadiant) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(PenaltyLevelRadiant);
      }
      if (HasPenaltyLevelDire) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(PenaltyLevelDire);
      }
      if (HasSeriesType) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(SeriesType);
      }
      if (HasRadiantSeriesWins) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(RadiantSeriesWins);
      }
      if (HasDireSeriesWins) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(DireSeriesWins);
      }
      if (HasAllchat) {
        output.WriteRawTag(152, 3);
        output.WriteBool(Allchat);
      }
      if (HasDotaTvDelay) {
        output.WriteRawTag(168, 3);
        output.WriteEnum((int) DotaTvDelay);
      }
      if (HasCustomGameMode) {
        output.WriteRawTag(178, 3);
        output.WriteString(CustomGameMode);
      }
      if (HasCustomMapName) {
        output.WriteRawTag(186, 3);
        output.WriteString(CustomMapName);
      }
      if (HasCustomDifficulty) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(CustomDifficulty);
      }
      if (HasLan) {
        output.WriteRawTag(200, 3);
        output.WriteBool(Lan);
      }
      broadcastChannelInfo_.WriteTo(output, _repeated_broadcastChannelInfo_codec);
      if (HasFirstLeaverAccountid) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(FirstLeaverAccountid);
      }
      if (HasSeriesId) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(SeriesId);
      }
      if (HasLowPriority) {
        output.WriteRawTag(232, 3);
        output.WriteBool(LowPriority);
      }
      extraMessages_.WriteTo(output, _repeated_extraMessages_codec);
      if (HasFirstBloodHappened) {
        output.WriteRawTag(136, 4);
        output.WriteBool(FirstBloodHappened);
      }
      if (HasMassDisconnect) {
        output.WriteRawTag(152, 4);
        output.WriteBool(MassDisconnect);
      }
      if (HasCustomGameId) {
        output.WriteRawTag(160, 4);
        output.WriteUInt64(CustomGameId);
      }
      if (HasMatchOutcome) {
        output.WriteRawTag(176, 4);
        output.WriteEnum((int) MatchOutcome);
      }
      if (HasCustomMinPlayers) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(CustomMinPlayers);
      }
      if (HasCustomMaxPlayers) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(CustomMaxPlayers);
      }
      if (HasVisibility) {
        output.WriteRawTag(216, 4);
        output.WriteEnum((int) Visibility);
      }
      if (HasCustomGameCrc) {
        output.WriteRawTag(225, 4);
        output.WriteFixed64(CustomGameCrc);
      }
      if (HasCustomGameAutoCreatedLobby) {
        output.WriteRawTag(232, 4);
        output.WriteBool(CustomGameAutoCreatedLobby);
      }
      if (HasCustomGameTimestamp) {
        output.WriteRawTag(133, 5);
        output.WriteFixed32(CustomGameTimestamp);
      }
      previousSeriesMatches_.WriteTo(output, _repeated_previousSeriesMatches_codec);
      if (HasPreviousMatchOverride) {
        output.WriteRawTag(144, 5);
        output.WriteUInt64(PreviousMatchOverride);
      }
      if (HasGameStartTime) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(GameStartTime);
      }
      if (HasPauseSetting) {
        output.WriteRawTag(192, 5);
        output.WriteEnum((int) PauseSetting);
      }
      if (HasWeekendTourneyDivisionId) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(WeekendTourneyDivisionId);
      }
      if (HasWeekendTourneySkillLevel) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(WeekendTourneySkillLevel);
      }
      if (HasWeekendTourneyBracketRound) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(WeekendTourneyBracketRound);
      }
      if (HasBotDifficultyDire) {
        output.WriteRawTag(232, 5);
        output.WriteEnum((int) BotDifficultyDire);
      }
      if (HasBotRadiant) {
        output.WriteRawTag(240, 5);
        output.WriteUInt64(BotRadiant);
      }
      if (HasBotDire) {
        output.WriteRawTag(248, 5);
        output.WriteUInt64(BotDire);
      }
      eventProgressionEnabled_.WriteTo(output, _repeated_eventProgressionEnabled_codec);
      if (HasSelectionPriorityRules) {
        output.WriteRawTag(136, 6);
        output.WriteEnum((int) SelectionPriorityRules);
      }
      if (HasSeriesPreviousSelectionPriorityTeamId) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(SeriesPreviousSelectionPriorityTeamId);
      }
      if (HasSeriesCurrentSelectionPriorityTeamId) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(SeriesCurrentSelectionPriorityTeamId);
      }
      if (HasSeriesCurrentPriorityTeamChoice) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SeriesCurrentPriorityTeamChoice);
      }
      if (HasSeriesCurrentNonPriorityTeamChoice) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) SeriesCurrentNonPriorityTeamChoice);
      }
      if (HasSeriesCurrentSelectionPriorityUsedCoinToss) {
        output.WriteRawTag(176, 6);
        output.WriteBool(SeriesCurrentSelectionPriorityUsedCoinToss);
      }
      if (HasCurrentPrimaryEvent) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) CurrentPrimaryEvent);
      }
      emergencyDisabledHeroIds_.WriteTo(output, _repeated_emergencyDisabledHeroIds_codec);
      if (HasCustomGamePrivateKey) {
        output.WriteRawTag(209, 6);
        output.WriteFixed64(CustomGamePrivateKey);
      }
      if (HasCustomGamePenalties) {
        output.WriteRawTag(216, 6);
        output.WriteBool(CustomGamePenalties);
      }
      if (HasLanHostPingLocation) {
        output.WriteRawTag(234, 6);
        output.WriteString(LanHostPingLocation);
      }
      if (HasLeagueNodeId) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(LeagueNodeId);
      }
      if (HasMatchDuration) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(MatchDuration);
      }
      if (HasLeaguePhase) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(LeaguePhase);
      }
      if (HasExperimentalGameplayEnabled) {
        output.WriteRawTag(160, 7);
        output.WriteBool(ExperimentalGameplayEnabled);
      }
      guildChallenges_.WriteTo(output, _repeated_guildChallenges_codec);
      guildDetails_.WriteTo(output, _repeated_guildDetails_codec);
      allMembers_.WriteTo(output, _repeated_allMembers_codec);
      memberIndices_.WriteTo(output, _repeated_memberIndices_codec);
      leftMemberIndices_.WriteTo(output, _repeated_leftMemberIndices_codec);
      freeMemberIndices_.WriteTo(output, _repeated_freeMemberIndices_codec);
      requestedHeroIds_.WriteTo(output, _repeated_requestedHeroIds_codec);
      coachFriendRequests_.WriteTo(output, _repeated_coachFriendRequests_codec);
      if (HasIsInSteamChina) {
        output.WriteRawTag(240, 7);
        output.WriteBool(IsInSteamChina);
      }
      if (HasWithScenarioSave) {
        output.WriteRawTag(248, 7);
        output.WriteBool(WithScenarioSave);
      }
      if (HasLobbyCreationTime) {
        output.WriteRawTag(128, 8);
        output.WriteUInt32(LobbyCreationTime);
      }
      if (HasEventGameDefinition) {
        output.WriteRawTag(138, 8);
        output.WriteString(EventGameDefinition);
      }
      if (matchQualityData_ != null) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(MatchQualityData);
      }
      requestedHeroTeams_.WriteTo(output, _repeated_requestedHeroTeams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLobbyId) {
        output.WriteRawTag(8);
        output.WriteUInt64(LobbyId);
      }
      if (HasGameMode) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameMode);
      }
      if (HasState) {
        output.WriteRawTag(32);
        output.WriteEnum((int) State);
      }
      if (HasConnect) {
        output.WriteRawTag(42);
        output.WriteString(Connect);
      }
      if (HasServerId) {
        output.WriteRawTag(49);
        output.WriteFixed64(ServerId);
      }
      pendingInvites_.WriteTo(ref output, _repeated_pendingInvites_codec);
      if (HasLeaderId) {
        output.WriteRawTag(89);
        output.WriteFixed64(LeaderId);
      }
      if (HasLobbyType) {
        output.WriteRawTag(96);
        output.WriteEnum((int) LobbyType);
      }
      if (HasAllowCheats) {
        output.WriteRawTag(104);
        output.WriteBool(AllowCheats);
      }
      if (HasFillWithBots) {
        output.WriteRawTag(112);
        output.WriteBool(FillWithBots);
      }
      if (HasGameName) {
        output.WriteRawTag(130, 1);
        output.WriteString(GameName);
      }
      teamDetails_.WriteTo(ref output, _repeated_teamDetails_codec);
      if (HasTournamentId) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(TournamentId);
      }
      if (HasTournamentGameId) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(TournamentGameId);
      }
      if (HasServerRegion) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(ServerRegion);
      }
      if (HasGameState) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) GameState);
      }
      if (HasNumSpectators) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(NumSpectators);
      }
      if (HasMatchgroup) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Matchgroup);
      }
      if (HasCmPick) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) CmPick);
      }
      if (HasMatchId) {
        output.WriteRawTag(240, 1);
        output.WriteUInt64(MatchId);
      }
      if (HasAllowSpectating) {
        output.WriteRawTag(248, 1);
        output.WriteBool(AllowSpectating);
      }
      if (HasBotDifficultyRadiant) {
        output.WriteRawTag(160, 2);
        output.WriteEnum((int) BotDifficultyRadiant);
      }
      if (HasPassKey) {
        output.WriteRawTag(186, 2);
        output.WriteString(PassKey);
      }
      if (HasLeagueid) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(Leagueid);
      }
      if (HasPenaltyLevelRadiant) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(PenaltyLevelRadiant);
      }
      if (HasPenaltyLevelDire) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(PenaltyLevelDire);
      }
      if (HasSeriesType) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(SeriesType);
      }
      if (HasRadiantSeriesWins) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(RadiantSeriesWins);
      }
      if (HasDireSeriesWins) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(DireSeriesWins);
      }
      if (HasAllchat) {
        output.WriteRawTag(152, 3);
        output.WriteBool(Allchat);
      }
      if (HasDotaTvDelay) {
        output.WriteRawTag(168, 3);
        output.WriteEnum((int) DotaTvDelay);
      }
      if (HasCustomGameMode) {
        output.WriteRawTag(178, 3);
        output.WriteString(CustomGameMode);
      }
      if (HasCustomMapName) {
        output.WriteRawTag(186, 3);
        output.WriteString(CustomMapName);
      }
      if (HasCustomDifficulty) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(CustomDifficulty);
      }
      if (HasLan) {
        output.WriteRawTag(200, 3);
        output.WriteBool(Lan);
      }
      broadcastChannelInfo_.WriteTo(ref output, _repeated_broadcastChannelInfo_codec);
      if (HasFirstLeaverAccountid) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(FirstLeaverAccountid);
      }
      if (HasSeriesId) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(SeriesId);
      }
      if (HasLowPriority) {
        output.WriteRawTag(232, 3);
        output.WriteBool(LowPriority);
      }
      extraMessages_.WriteTo(ref output, _repeated_extraMessages_codec);
      if (HasFirstBloodHappened) {
        output.WriteRawTag(136, 4);
        output.WriteBool(FirstBloodHappened);
      }
      if (HasMassDisconnect) {
        output.WriteRawTag(152, 4);
        output.WriteBool(MassDisconnect);
      }
      if (HasCustomGameId) {
        output.WriteRawTag(160, 4);
        output.WriteUInt64(CustomGameId);
      }
      if (HasMatchOutcome) {
        output.WriteRawTag(176, 4);
        output.WriteEnum((int) MatchOutcome);
      }
      if (HasCustomMinPlayers) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(CustomMinPlayers);
      }
      if (HasCustomMaxPlayers) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(CustomMaxPlayers);
      }
      if (HasVisibility) {
        output.WriteRawTag(216, 4);
        output.WriteEnum((int) Visibility);
      }
      if (HasCustomGameCrc) {
        output.WriteRawTag(225, 4);
        output.WriteFixed64(CustomGameCrc);
      }
      if (HasCustomGameAutoCreatedLobby) {
        output.WriteRawTag(232, 4);
        output.WriteBool(CustomGameAutoCreatedLobby);
      }
      if (HasCustomGameTimestamp) {
        output.WriteRawTag(133, 5);
        output.WriteFixed32(CustomGameTimestamp);
      }
      previousSeriesMatches_.WriteTo(ref output, _repeated_previousSeriesMatches_codec);
      if (HasPreviousMatchOverride) {
        output.WriteRawTag(144, 5);
        output.WriteUInt64(PreviousMatchOverride);
      }
      if (HasGameStartTime) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(GameStartTime);
      }
      if (HasPauseSetting) {
        output.WriteRawTag(192, 5);
        output.WriteEnum((int) PauseSetting);
      }
      if (HasWeekendTourneyDivisionId) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(WeekendTourneyDivisionId);
      }
      if (HasWeekendTourneySkillLevel) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(WeekendTourneySkillLevel);
      }
      if (HasWeekendTourneyBracketRound) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(WeekendTourneyBracketRound);
      }
      if (HasBotDifficultyDire) {
        output.WriteRawTag(232, 5);
        output.WriteEnum((int) BotDifficultyDire);
      }
      if (HasBotRadiant) {
        output.WriteRawTag(240, 5);
        output.WriteUInt64(BotRadiant);
      }
      if (HasBotDire) {
        output.WriteRawTag(248, 5);
        output.WriteUInt64(BotDire);
      }
      eventProgressionEnabled_.WriteTo(ref output, _repeated_eventProgressionEnabled_codec);
      if (HasSelectionPriorityRules) {
        output.WriteRawTag(136, 6);
        output.WriteEnum((int) SelectionPriorityRules);
      }
      if (HasSeriesPreviousSelectionPriorityTeamId) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(SeriesPreviousSelectionPriorityTeamId);
      }
      if (HasSeriesCurrentSelectionPriorityTeamId) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(SeriesCurrentSelectionPriorityTeamId);
      }
      if (HasSeriesCurrentPriorityTeamChoice) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) SeriesCurrentPriorityTeamChoice);
      }
      if (HasSeriesCurrentNonPriorityTeamChoice) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) SeriesCurrentNonPriorityTeamChoice);
      }
      if (HasSeriesCurrentSelectionPriorityUsedCoinToss) {
        output.WriteRawTag(176, 6);
        output.WriteBool(SeriesCurrentSelectionPriorityUsedCoinToss);
      }
      if (HasCurrentPrimaryEvent) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) CurrentPrimaryEvent);
      }
      emergencyDisabledHeroIds_.WriteTo(ref output, _repeated_emergencyDisabledHeroIds_codec);
      if (HasCustomGamePrivateKey) {
        output.WriteRawTag(209, 6);
        output.WriteFixed64(CustomGamePrivateKey);
      }
      if (HasCustomGamePenalties) {
        output.WriteRawTag(216, 6);
        output.WriteBool(CustomGamePenalties);
      }
      if (HasLanHostPingLocation) {
        output.WriteRawTag(234, 6);
        output.WriteString(LanHostPingLocation);
      }
      if (HasLeagueNodeId) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(LeagueNodeId);
      }
      if (HasMatchDuration) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(MatchDuration);
      }
      if (HasLeaguePhase) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(LeaguePhase);
      }
      if (HasExperimentalGameplayEnabled) {
        output.WriteRawTag(160, 7);
        output.WriteBool(ExperimentalGameplayEnabled);
      }
      guildChallenges_.WriteTo(ref output, _repeated_guildChallenges_codec);
      guildDetails_.WriteTo(ref output, _repeated_guildDetails_codec);
      allMembers_.WriteTo(ref output, _repeated_allMembers_codec);
      memberIndices_.WriteTo(ref output, _repeated_memberIndices_codec);
      leftMemberIndices_.WriteTo(ref output, _repeated_leftMemberIndices_codec);
      freeMemberIndices_.WriteTo(ref output, _repeated_freeMemberIndices_codec);
      requestedHeroIds_.WriteTo(ref output, _repeated_requestedHeroIds_codec);
      coachFriendRequests_.WriteTo(ref output, _repeated_coachFriendRequests_codec);
      if (HasIsInSteamChina) {
        output.WriteRawTag(240, 7);
        output.WriteBool(IsInSteamChina);
      }
      if (HasWithScenarioSave) {
        output.WriteRawTag(248, 7);
        output.WriteBool(WithScenarioSave);
      }
      if (HasLobbyCreationTime) {
        output.WriteRawTag(128, 8);
        output.WriteUInt32(LobbyCreationTime);
      }
      if (HasEventGameDefinition) {
        output.WriteRawTag(138, 8);
        output.WriteString(EventGameDefinition);
      }
      if (matchQualityData_ != null) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(MatchQualityData);
      }
      requestedHeroTeams_.WriteTo(ref output, _repeated_requestedHeroTeams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLobbyId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LobbyId);
      }
      size += allMembers_.CalculateSize(_repeated_allMembers_codec);
      size += memberIndices_.CalculateSize(_repeated_memberIndices_codec);
      size += leftMemberIndices_.CalculateSize(_repeated_leftMemberIndices_codec);
      size += freeMemberIndices_.CalculateSize(_repeated_freeMemberIndices_codec);
      if (HasLeaderId) {
        size += 1 + 8;
      }
      if (HasServerId) {
        size += 1 + 8;
      }
      if (HasGameMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameMode);
      }
      size += pendingInvites_.CalculateSize(_repeated_pendingInvites_codec);
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (HasConnect) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Connect);
      }
      if (HasLobbyType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LobbyType);
      }
      if (HasAllowCheats) {
        size += 1 + 1;
      }
      if (HasFillWithBots) {
        size += 1 + 1;
      }
      if (HasGameName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      size += teamDetails_.CalculateSize(_repeated_teamDetails_codec);
      if (HasTournamentId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TournamentId);
      }
      if (HasTournamentGameId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TournamentGameId);
      }
      if (HasServerRegion) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ServerRegion);
      }
      if (HasGameState) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameState);
      }
      if (HasNumSpectators) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumSpectators);
      }
      if (HasMatchgroup) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Matchgroup);
      }
      if (HasCmPick) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmPick);
      }
      if (HasMatchId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasAllowSpectating) {
        size += 2 + 1;
      }
      if (HasBotDifficultyRadiant) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BotDifficultyRadiant);
      }
      if (HasPassKey) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PassKey);
      }
      if (HasLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leagueid);
      }
      if (HasPenaltyLevelRadiant) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PenaltyLevelRadiant);
      }
      if (HasPenaltyLevelDire) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PenaltyLevelDire);
      }
      if (HasSeriesType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeriesType);
      }
      if (HasRadiantSeriesWins) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RadiantSeriesWins);
      }
      if (HasDireSeriesWins) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DireSeriesWins);
      }
      if (HasAllchat) {
        size += 2 + 1;
      }
      if (HasDotaTvDelay) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DotaTvDelay);
      }
      if (HasCustomGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustomGameMode);
      }
      if (HasCustomMapName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustomMapName);
      }
      if (HasCustomDifficulty) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CustomDifficulty);
      }
      if (HasLan) {
        size += 2 + 1;
      }
      size += broadcastChannelInfo_.CalculateSize(_repeated_broadcastChannelInfo_codec);
      if (HasFirstLeaverAccountid) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FirstLeaverAccountid);
      }
      if (HasSeriesId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeriesId);
      }
      if (HasLowPriority) {
        size += 2 + 1;
      }
      size += extraMessages_.CalculateSize(_repeated_extraMessages_codec);
      if (HasFirstBloodHappened) {
        size += 2 + 1;
      }
      if (HasMatchOutcome) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MatchOutcome);
      }
      if (HasMassDisconnect) {
        size += 2 + 1;
      }
      if (HasCustomGameId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CustomGameId);
      }
      if (HasCustomMinPlayers) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CustomMinPlayers);
      }
      if (HasCustomMaxPlayers) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CustomMaxPlayers);
      }
      if (HasVisibility) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Visibility);
      }
      if (HasCustomGameCrc) {
        size += 2 + 8;
      }
      if (HasCustomGameAutoCreatedLobby) {
        size += 2 + 1;
      }
      if (HasCustomGameTimestamp) {
        size += 2 + 4;
      }
      size += previousSeriesMatches_.CalculateSize(_repeated_previousSeriesMatches_codec);
      if (HasPreviousMatchOverride) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(PreviousMatchOverride);
      }
      if (HasGameStartTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GameStartTime);
      }
      if (HasPauseSetting) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PauseSetting);
      }
      if (HasWeekendTourneyDivisionId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WeekendTourneyDivisionId);
      }
      if (HasWeekendTourneySkillLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WeekendTourneySkillLevel);
      }
      if (HasWeekendTourneyBracketRound) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WeekendTourneyBracketRound);
      }
      if (HasBotDifficultyDire) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BotDifficultyDire);
      }
      if (HasBotRadiant) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BotRadiant);
      }
      if (HasBotDire) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BotDire);
      }
      size += eventProgressionEnabled_.CalculateSize(_repeated_eventProgressionEnabled_codec);
      if (HasSelectionPriorityRules) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SelectionPriorityRules);
      }
      if (HasSeriesPreviousSelectionPriorityTeamId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeriesPreviousSelectionPriorityTeamId);
      }
      if (HasSeriesCurrentSelectionPriorityTeamId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeriesCurrentSelectionPriorityTeamId);
      }
      if (HasSeriesCurrentPriorityTeamChoice) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SeriesCurrentPriorityTeamChoice);
      }
      if (HasSeriesCurrentNonPriorityTeamChoice) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SeriesCurrentNonPriorityTeamChoice);
      }
      if (HasSeriesCurrentSelectionPriorityUsedCoinToss) {
        size += 2 + 1;
      }
      if (HasCurrentPrimaryEvent) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentPrimaryEvent);
      }
      size += emergencyDisabledHeroIds_.CalculateSize(_repeated_emergencyDisabledHeroIds_codec);
      if (HasCustomGamePrivateKey) {
        size += 2 + 8;
      }
      if (HasCustomGamePenalties) {
        size += 2 + 1;
      }
      if (HasLanHostPingLocation) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LanHostPingLocation);
      }
      if (HasLeagueNodeId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeagueNodeId);
      }
      if (HasMatchDuration) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchDuration);
      }
      if (HasLeaguePhase) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeaguePhase);
      }
      if (HasExperimentalGameplayEnabled) {
        size += 2 + 1;
      }
      size += guildChallenges_.CalculateSize(_repeated_guildChallenges_codec);
      size += guildDetails_.CalculateSize(_repeated_guildDetails_codec);
      size += requestedHeroIds_.CalculateSize(_repeated_requestedHeroIds_codec);
      size += coachFriendRequests_.CalculateSize(_repeated_coachFriendRequests_codec);
      if (HasIsInSteamChina) {
        size += 2 + 1;
      }
      if (HasWithScenarioSave) {
        size += 2 + 1;
      }
      if (HasLobbyCreationTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LobbyCreationTime);
      }
      if (HasEventGameDefinition) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EventGameDefinition);
      }
      if (matchQualityData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchQualityData);
      }
      size += requestedHeroTeams_.CalculateSize(_repeated_requestedHeroTeams_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTALobby other) {
      if (other == null) {
        return;
      }
      if (other.HasLobbyId) {
        LobbyId = other.LobbyId;
      }
      allMembers_.Add(other.allMembers_);
      memberIndices_.Add(other.memberIndices_);
      leftMemberIndices_.Add(other.leftMemberIndices_);
      freeMemberIndices_.Add(other.freeMemberIndices_);
      if (other.HasLeaderId) {
        LeaderId = other.LeaderId;
      }
      if (other.HasServerId) {
        ServerId = other.ServerId;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      pendingInvites_.Add(other.pendingInvites_);
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasConnect) {
        Connect = other.Connect;
      }
      if (other.HasLobbyType) {
        LobbyType = other.LobbyType;
      }
      if (other.HasAllowCheats) {
        AllowCheats = other.AllowCheats;
      }
      if (other.HasFillWithBots) {
        FillWithBots = other.FillWithBots;
      }
      if (other.HasGameName) {
        GameName = other.GameName;
      }
      teamDetails_.Add(other.teamDetails_);
      if (other.HasTournamentId) {
        TournamentId = other.TournamentId;
      }
      if (other.HasTournamentGameId) {
        TournamentGameId = other.TournamentGameId;
      }
      if (other.HasServerRegion) {
        ServerRegion = other.ServerRegion;
      }
      if (other.HasGameState) {
        GameState = other.GameState;
      }
      if (other.HasNumSpectators) {
        NumSpectators = other.NumSpectators;
      }
      if (other.HasMatchgroup) {
        Matchgroup = other.Matchgroup;
      }
      if (other.HasCmPick) {
        CmPick = other.CmPick;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasAllowSpectating) {
        AllowSpectating = other.AllowSpectating;
      }
      if (other.HasBotDifficultyRadiant) {
        BotDifficultyRadiant = other.BotDifficultyRadiant;
      }
      if (other.HasPassKey) {
        PassKey = other.PassKey;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasPenaltyLevelRadiant) {
        PenaltyLevelRadiant = other.PenaltyLevelRadiant;
      }
      if (other.HasPenaltyLevelDire) {
        PenaltyLevelDire = other.PenaltyLevelDire;
      }
      if (other.HasSeriesType) {
        SeriesType = other.SeriesType;
      }
      if (other.HasRadiantSeriesWins) {
        RadiantSeriesWins = other.RadiantSeriesWins;
      }
      if (other.HasDireSeriesWins) {
        DireSeriesWins = other.DireSeriesWins;
      }
      if (other.HasAllchat) {
        Allchat = other.Allchat;
      }
      if (other.HasDotaTvDelay) {
        DotaTvDelay = other.DotaTvDelay;
      }
      if (other.HasCustomGameMode) {
        CustomGameMode = other.CustomGameMode;
      }
      if (other.HasCustomMapName) {
        CustomMapName = other.CustomMapName;
      }
      if (other.HasCustomDifficulty) {
        CustomDifficulty = other.CustomDifficulty;
      }
      if (other.HasLan) {
        Lan = other.Lan;
      }
      broadcastChannelInfo_.Add(other.broadcastChannelInfo_);
      if (other.HasFirstLeaverAccountid) {
        FirstLeaverAccountid = other.FirstLeaverAccountid;
      }
      if (other.HasSeriesId) {
        SeriesId = other.SeriesId;
      }
      if (other.HasLowPriority) {
        LowPriority = other.LowPriority;
      }
      extraMessages_.Add(other.extraMessages_);
      if (other.HasFirstBloodHappened) {
        FirstBloodHappened = other.FirstBloodHappened;
      }
      if (other.HasMatchOutcome) {
        MatchOutcome = other.MatchOutcome;
      }
      if (other.HasMassDisconnect) {
        MassDisconnect = other.MassDisconnect;
      }
      if (other.HasCustomGameId) {
        CustomGameId = other.CustomGameId;
      }
      if (other.HasCustomMinPlayers) {
        CustomMinPlayers = other.CustomMinPlayers;
      }
      if (other.HasCustomMaxPlayers) {
        CustomMaxPlayers = other.CustomMaxPlayers;
      }
      if (other.HasVisibility) {
        Visibility = other.Visibility;
      }
      if (other.HasCustomGameCrc) {
        CustomGameCrc = other.CustomGameCrc;
      }
      if (other.HasCustomGameAutoCreatedLobby) {
        CustomGameAutoCreatedLobby = other.CustomGameAutoCreatedLobby;
      }
      if (other.HasCustomGameTimestamp) {
        CustomGameTimestamp = other.CustomGameTimestamp;
      }
      previousSeriesMatches_.Add(other.previousSeriesMatches_);
      if (other.HasPreviousMatchOverride) {
        PreviousMatchOverride = other.PreviousMatchOverride;
      }
      if (other.HasGameStartTime) {
        GameStartTime = other.GameStartTime;
      }
      if (other.HasPauseSetting) {
        PauseSetting = other.PauseSetting;
      }
      if (other.HasWeekendTourneyDivisionId) {
        WeekendTourneyDivisionId = other.WeekendTourneyDivisionId;
      }
      if (other.HasWeekendTourneySkillLevel) {
        WeekendTourneySkillLevel = other.WeekendTourneySkillLevel;
      }
      if (other.HasWeekendTourneyBracketRound) {
        WeekendTourneyBracketRound = other.WeekendTourneyBracketRound;
      }
      if (other.HasBotDifficultyDire) {
        BotDifficultyDire = other.BotDifficultyDire;
      }
      if (other.HasBotRadiant) {
        BotRadiant = other.BotRadiant;
      }
      if (other.HasBotDire) {
        BotDire = other.BotDire;
      }
      eventProgressionEnabled_.Add(other.eventProgressionEnabled_);
      if (other.HasSelectionPriorityRules) {
        SelectionPriorityRules = other.SelectionPriorityRules;
      }
      if (other.HasSeriesPreviousSelectionPriorityTeamId) {
        SeriesPreviousSelectionPriorityTeamId = other.SeriesPreviousSelectionPriorityTeamId;
      }
      if (other.HasSeriesCurrentSelectionPriorityTeamId) {
        SeriesCurrentSelectionPriorityTeamId = other.SeriesCurrentSelectionPriorityTeamId;
      }
      if (other.HasSeriesCurrentPriorityTeamChoice) {
        SeriesCurrentPriorityTeamChoice = other.SeriesCurrentPriorityTeamChoice;
      }
      if (other.HasSeriesCurrentNonPriorityTeamChoice) {
        SeriesCurrentNonPriorityTeamChoice = other.SeriesCurrentNonPriorityTeamChoice;
      }
      if (other.HasSeriesCurrentSelectionPriorityUsedCoinToss) {
        SeriesCurrentSelectionPriorityUsedCoinToss = other.SeriesCurrentSelectionPriorityUsedCoinToss;
      }
      if (other.HasCurrentPrimaryEvent) {
        CurrentPrimaryEvent = other.CurrentPrimaryEvent;
      }
      emergencyDisabledHeroIds_.Add(other.emergencyDisabledHeroIds_);
      if (other.HasCustomGamePrivateKey) {
        CustomGamePrivateKey = other.CustomGamePrivateKey;
      }
      if (other.HasCustomGamePenalties) {
        CustomGamePenalties = other.CustomGamePenalties;
      }
      if (other.HasLanHostPingLocation) {
        LanHostPingLocation = other.LanHostPingLocation;
      }
      if (other.HasLeagueNodeId) {
        LeagueNodeId = other.LeagueNodeId;
      }
      if (other.HasMatchDuration) {
        MatchDuration = other.MatchDuration;
      }
      if (other.HasLeaguePhase) {
        LeaguePhase = other.LeaguePhase;
      }
      if (other.HasExperimentalGameplayEnabled) {
        ExperimentalGameplayEnabled = other.ExperimentalGameplayEnabled;
      }
      guildChallenges_.Add(other.guildChallenges_);
      guildDetails_.Add(other.guildDetails_);
      requestedHeroIds_.Add(other.requestedHeroIds_);
      coachFriendRequests_.Add(other.coachFriendRequests_);
      if (other.HasIsInSteamChina) {
        IsInSteamChina = other.IsInSteamChina;
      }
      if (other.HasWithScenarioSave) {
        WithScenarioSave = other.WithScenarioSave;
      }
      if (other.HasLobbyCreationTime) {
        LobbyCreationTime = other.LobbyCreationTime;
      }
      if (other.HasEventGameDefinition) {
        EventGameDefinition = other.EventGameDefinition;
      }
      if (other.matchQualityData_ != null) {
        if (matchQualityData_ == null) {
          MatchQualityData = new global::Steam.Protos.Dota2.CDOTALobbyMatchQualityData();
        }
        MatchQualityData.MergeFrom(other.MatchQualityData);
      }
      requestedHeroTeams_.Add(other.requestedHeroTeams_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LobbyId = input.ReadUInt64();
            break;
          }
          case 24: {
            GameMode = input.ReadUInt32();
            break;
          }
          case 32: {
            State = (global::Steam.Protos.Dota2.CSODOTALobby.Types.State) input.ReadEnum();
            break;
          }
          case 42: {
            Connect = input.ReadString();
            break;
          }
          case 49: {
            ServerId = input.ReadFixed64();
            break;
          }
          case 82:
          case 81: {
            pendingInvites_.AddEntriesFrom(input, _repeated_pendingInvites_codec);
            break;
          }
          case 89: {
            LeaderId = input.ReadFixed64();
            break;
          }
          case 96: {
            LobbyType = (global::Steam.Protos.Dota2.CSODOTALobby.Types.LobbyType) input.ReadEnum();
            break;
          }
          case 104: {
            AllowCheats = input.ReadBool();
            break;
          }
          case 112: {
            FillWithBots = input.ReadBool();
            break;
          }
          case 130: {
            GameName = input.ReadString();
            break;
          }
          case 138: {
            teamDetails_.AddEntriesFrom(input, _repeated_teamDetails_codec);
            break;
          }
          case 152: {
            TournamentId = input.ReadUInt32();
            break;
          }
          case 160: {
            TournamentGameId = input.ReadUInt32();
            break;
          }
          case 168: {
            ServerRegion = input.ReadUInt32();
            break;
          }
          case 176: {
            GameState = (global::Steam.Protos.Dota2.DOTA_GameState) input.ReadEnum();
            break;
          }
          case 184: {
            NumSpectators = input.ReadUInt32();
            break;
          }
          case 200: {
            Matchgroup = input.ReadUInt32();
            break;
          }
          case 224: {
            CmPick = (global::Steam.Protos.Dota2.DOTA_CM_PICK) input.ReadEnum();
            break;
          }
          case 240: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 248: {
            AllowSpectating = input.ReadBool();
            break;
          }
          case 288: {
            BotDifficultyRadiant = (global::Steam.Protos.Dota2.DOTABotDifficulty) input.ReadEnum();
            break;
          }
          case 314: {
            PassKey = input.ReadString();
            break;
          }
          case 336: {
            Leagueid = input.ReadUInt32();
            break;
          }
          case 344: {
            PenaltyLevelRadiant = input.ReadUInt32();
            break;
          }
          case 352: {
            PenaltyLevelDire = input.ReadUInt32();
            break;
          }
          case 368: {
            SeriesType = input.ReadUInt32();
            break;
          }
          case 376: {
            RadiantSeriesWins = input.ReadUInt32();
            break;
          }
          case 384: {
            DireSeriesWins = input.ReadUInt32();
            break;
          }
          case 408: {
            Allchat = input.ReadBool();
            break;
          }
          case 424: {
            DotaTvDelay = (global::Steam.Protos.Dota2.LobbyDotaTVDelay) input.ReadEnum();
            break;
          }
          case 434: {
            CustomGameMode = input.ReadString();
            break;
          }
          case 442: {
            CustomMapName = input.ReadString();
            break;
          }
          case 448: {
            CustomDifficulty = input.ReadUInt32();
            break;
          }
          case 456: {
            Lan = input.ReadBool();
            break;
          }
          case 466: {
            broadcastChannelInfo_.AddEntriesFrom(input, _repeated_broadcastChannelInfo_codec);
            break;
          }
          case 472: {
            FirstLeaverAccountid = input.ReadUInt32();
            break;
          }
          case 480: {
            SeriesId = input.ReadUInt32();
            break;
          }
          case 488: {
            LowPriority = input.ReadBool();
            break;
          }
          case 498: {
            extraMessages_.AddEntriesFrom(input, _repeated_extraMessages_codec);
            break;
          }
          case 520: {
            FirstBloodHappened = input.ReadBool();
            break;
          }
          case 536: {
            MassDisconnect = input.ReadBool();
            break;
          }
          case 544: {
            CustomGameId = input.ReadUInt64();
            break;
          }
          case 560: {
            MatchOutcome = (global::Steam.Protos.Dota2.EMatchOutcome) input.ReadEnum();
            break;
          }
          case 568: {
            CustomMinPlayers = input.ReadUInt32();
            break;
          }
          case 576: {
            CustomMaxPlayers = input.ReadUInt32();
            break;
          }
          case 600: {
            Visibility = (global::Steam.Protos.Dota2.DOTALobbyVisibility) input.ReadEnum();
            break;
          }
          case 609: {
            CustomGameCrc = input.ReadFixed64();
            break;
          }
          case 616: {
            CustomGameAutoCreatedLobby = input.ReadBool();
            break;
          }
          case 645: {
            CustomGameTimestamp = input.ReadFixed32();
            break;
          }
          case 650:
          case 648: {
            previousSeriesMatches_.AddEntriesFrom(input, _repeated_previousSeriesMatches_codec);
            break;
          }
          case 656: {
            PreviousMatchOverride = input.ReadUInt64();
            break;
          }
          case 696: {
            GameStartTime = input.ReadUInt32();
            break;
          }
          case 704: {
            PauseSetting = (global::Steam.Protos.Dota2.LobbyDotaPauseSetting) input.ReadEnum();
            break;
          }
          case 720: {
            WeekendTourneyDivisionId = input.ReadUInt32();
            break;
          }
          case 728: {
            WeekendTourneySkillLevel = input.ReadUInt32();
            break;
          }
          case 736: {
            WeekendTourneyBracketRound = input.ReadUInt32();
            break;
          }
          case 744: {
            BotDifficultyDire = (global::Steam.Protos.Dota2.DOTABotDifficulty) input.ReadEnum();
            break;
          }
          case 752: {
            BotRadiant = input.ReadUInt64();
            break;
          }
          case 760: {
            BotDire = input.ReadUInt64();
            break;
          }
          case 770:
          case 768: {
            eventProgressionEnabled_.AddEntriesFrom(input, _repeated_eventProgressionEnabled_codec);
            break;
          }
          case 776: {
            SelectionPriorityRules = (global::Steam.Protos.Dota2.DOTASelectionPriorityRules) input.ReadEnum();
            break;
          }
          case 784: {
            SeriesPreviousSelectionPriorityTeamId = input.ReadUInt32();
            break;
          }
          case 792: {
            SeriesCurrentSelectionPriorityTeamId = input.ReadUInt32();
            break;
          }
          case 800: {
            SeriesCurrentPriorityTeamChoice = (global::Steam.Protos.Dota2.DOTASelectionPriorityChoice) input.ReadEnum();
            break;
          }
          case 808: {
            SeriesCurrentNonPriorityTeamChoice = (global::Steam.Protos.Dota2.DOTASelectionPriorityChoice) input.ReadEnum();
            break;
          }
          case 816: {
            SeriesCurrentSelectionPriorityUsedCoinToss = input.ReadBool();
            break;
          }
          case 824: {
            CurrentPrimaryEvent = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 842:
          case 840: {
            emergencyDisabledHeroIds_.AddEntriesFrom(input, _repeated_emergencyDisabledHeroIds_codec);
            break;
          }
          case 849: {
            CustomGamePrivateKey = input.ReadFixed64();
            break;
          }
          case 856: {
            CustomGamePenalties = input.ReadBool();
            break;
          }
          case 874: {
            LanHostPingLocation = input.ReadString();
            break;
          }
          case 880: {
            LeagueNodeId = input.ReadUInt32();
            break;
          }
          case 888: {
            MatchDuration = input.ReadUInt32();
            break;
          }
          case 904: {
            LeaguePhase = input.ReadUInt32();
            break;
          }
          case 928: {
            ExperimentalGameplayEnabled = input.ReadBool();
            break;
          }
          case 938: {
            guildChallenges_.AddEntriesFrom(input, _repeated_guildChallenges_codec);
            break;
          }
          case 946: {
            guildDetails_.AddEntriesFrom(input, _repeated_guildDetails_codec);
            break;
          }
          case 962: {
            allMembers_.AddEntriesFrom(input, _repeated_allMembers_codec);
            break;
          }
          case 970:
          case 968: {
            memberIndices_.AddEntriesFrom(input, _repeated_memberIndices_codec);
            break;
          }
          case 978:
          case 976: {
            leftMemberIndices_.AddEntriesFrom(input, _repeated_leftMemberIndices_codec);
            break;
          }
          case 986:
          case 984: {
            freeMemberIndices_.AddEntriesFrom(input, _repeated_freeMemberIndices_codec);
            break;
          }
          case 994:
          case 992: {
            requestedHeroIds_.AddEntriesFrom(input, _repeated_requestedHeroIds_codec);
            break;
          }
          case 1002: {
            coachFriendRequests_.AddEntriesFrom(input, _repeated_coachFriendRequests_codec);
            break;
          }
          case 1008: {
            IsInSteamChina = input.ReadBool();
            break;
          }
          case 1016: {
            WithScenarioSave = input.ReadBool();
            break;
          }
          case 1024: {
            LobbyCreationTime = input.ReadUInt32();
            break;
          }
          case 1034: {
            EventGameDefinition = input.ReadString();
            break;
          }
          case 1050: {
            if (matchQualityData_ == null) {
              MatchQualityData = new global::Steam.Protos.Dota2.CDOTALobbyMatchQualityData();
            }
            input.ReadMessage(MatchQualityData);
            break;
          }
          case 1058:
          case 1056: {
            requestedHeroTeams_.AddEntriesFrom(input, _repeated_requestedHeroTeams_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LobbyId = input.ReadUInt64();
            break;
          }
          case 24: {
            GameMode = input.ReadUInt32();
            break;
          }
          case 32: {
            State = (global::Steam.Protos.Dota2.CSODOTALobby.Types.State) input.ReadEnum();
            break;
          }
          case 42: {
            Connect = input.ReadString();
            break;
          }
          case 49: {
            ServerId = input.ReadFixed64();
            break;
          }
          case 82:
          case 81: {
            pendingInvites_.AddEntriesFrom(ref input, _repeated_pendingInvites_codec);
            break;
          }
          case 89: {
            LeaderId = input.ReadFixed64();
            break;
          }
          case 96: {
            LobbyType = (global::Steam.Protos.Dota2.CSODOTALobby.Types.LobbyType) input.ReadEnum();
            break;
          }
          case 104: {
            AllowCheats = input.ReadBool();
            break;
          }
          case 112: {
            FillWithBots = input.ReadBool();
            break;
          }
          case 130: {
            GameName = input.ReadString();
            break;
          }
          case 138: {
            teamDetails_.AddEntriesFrom(ref input, _repeated_teamDetails_codec);
            break;
          }
          case 152: {
            TournamentId = input.ReadUInt32();
            break;
          }
          case 160: {
            TournamentGameId = input.ReadUInt32();
            break;
          }
          case 168: {
            ServerRegion = input.ReadUInt32();
            break;
          }
          case 176: {
            GameState = (global::Steam.Protos.Dota2.DOTA_GameState) input.ReadEnum();
            break;
          }
          case 184: {
            NumSpectators = input.ReadUInt32();
            break;
          }
          case 200: {
            Matchgroup = input.ReadUInt32();
            break;
          }
          case 224: {
            CmPick = (global::Steam.Protos.Dota2.DOTA_CM_PICK) input.ReadEnum();
            break;
          }
          case 240: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 248: {
            AllowSpectating = input.ReadBool();
            break;
          }
          case 288: {
            BotDifficultyRadiant = (global::Steam.Protos.Dota2.DOTABotDifficulty) input.ReadEnum();
            break;
          }
          case 314: {
            PassKey = input.ReadString();
            break;
          }
          case 336: {
            Leagueid = input.ReadUInt32();
            break;
          }
          case 344: {
            PenaltyLevelRadiant = input.ReadUInt32();
            break;
          }
          case 352: {
            PenaltyLevelDire = input.ReadUInt32();
            break;
          }
          case 368: {
            SeriesType = input.ReadUInt32();
            break;
          }
          case 376: {
            RadiantSeriesWins = input.ReadUInt32();
            break;
          }
          case 384: {
            DireSeriesWins = input.ReadUInt32();
            break;
          }
          case 408: {
            Allchat = input.ReadBool();
            break;
          }
          case 424: {
            DotaTvDelay = (global::Steam.Protos.Dota2.LobbyDotaTVDelay) input.ReadEnum();
            break;
          }
          case 434: {
            CustomGameMode = input.ReadString();
            break;
          }
          case 442: {
            CustomMapName = input.ReadString();
            break;
          }
          case 448: {
            CustomDifficulty = input.ReadUInt32();
            break;
          }
          case 456: {
            Lan = input.ReadBool();
            break;
          }
          case 466: {
            broadcastChannelInfo_.AddEntriesFrom(ref input, _repeated_broadcastChannelInfo_codec);
            break;
          }
          case 472: {
            FirstLeaverAccountid = input.ReadUInt32();
            break;
          }
          case 480: {
            SeriesId = input.ReadUInt32();
            break;
          }
          case 488: {
            LowPriority = input.ReadBool();
            break;
          }
          case 498: {
            extraMessages_.AddEntriesFrom(ref input, _repeated_extraMessages_codec);
            break;
          }
          case 520: {
            FirstBloodHappened = input.ReadBool();
            break;
          }
          case 536: {
            MassDisconnect = input.ReadBool();
            break;
          }
          case 544: {
            CustomGameId = input.ReadUInt64();
            break;
          }
          case 560: {
            MatchOutcome = (global::Steam.Protos.Dota2.EMatchOutcome) input.ReadEnum();
            break;
          }
          case 568: {
            CustomMinPlayers = input.ReadUInt32();
            break;
          }
          case 576: {
            CustomMaxPlayers = input.ReadUInt32();
            break;
          }
          case 600: {
            Visibility = (global::Steam.Protos.Dota2.DOTALobbyVisibility) input.ReadEnum();
            break;
          }
          case 609: {
            CustomGameCrc = input.ReadFixed64();
            break;
          }
          case 616: {
            CustomGameAutoCreatedLobby = input.ReadBool();
            break;
          }
          case 645: {
            CustomGameTimestamp = input.ReadFixed32();
            break;
          }
          case 650:
          case 648: {
            previousSeriesMatches_.AddEntriesFrom(ref input, _repeated_previousSeriesMatches_codec);
            break;
          }
          case 656: {
            PreviousMatchOverride = input.ReadUInt64();
            break;
          }
          case 696: {
            GameStartTime = input.ReadUInt32();
            break;
          }
          case 704: {
            PauseSetting = (global::Steam.Protos.Dota2.LobbyDotaPauseSetting) input.ReadEnum();
            break;
          }
          case 720: {
            WeekendTourneyDivisionId = input.ReadUInt32();
            break;
          }
          case 728: {
            WeekendTourneySkillLevel = input.ReadUInt32();
            break;
          }
          case 736: {
            WeekendTourneyBracketRound = input.ReadUInt32();
            break;
          }
          case 744: {
            BotDifficultyDire = (global::Steam.Protos.Dota2.DOTABotDifficulty) input.ReadEnum();
            break;
          }
          case 752: {
            BotRadiant = input.ReadUInt64();
            break;
          }
          case 760: {
            BotDire = input.ReadUInt64();
            break;
          }
          case 770:
          case 768: {
            eventProgressionEnabled_.AddEntriesFrom(ref input, _repeated_eventProgressionEnabled_codec);
            break;
          }
          case 776: {
            SelectionPriorityRules = (global::Steam.Protos.Dota2.DOTASelectionPriorityRules) input.ReadEnum();
            break;
          }
          case 784: {
            SeriesPreviousSelectionPriorityTeamId = input.ReadUInt32();
            break;
          }
          case 792: {
            SeriesCurrentSelectionPriorityTeamId = input.ReadUInt32();
            break;
          }
          case 800: {
            SeriesCurrentPriorityTeamChoice = (global::Steam.Protos.Dota2.DOTASelectionPriorityChoice) input.ReadEnum();
            break;
          }
          case 808: {
            SeriesCurrentNonPriorityTeamChoice = (global::Steam.Protos.Dota2.DOTASelectionPriorityChoice) input.ReadEnum();
            break;
          }
          case 816: {
            SeriesCurrentSelectionPriorityUsedCoinToss = input.ReadBool();
            break;
          }
          case 824: {
            CurrentPrimaryEvent = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 842:
          case 840: {
            emergencyDisabledHeroIds_.AddEntriesFrom(ref input, _repeated_emergencyDisabledHeroIds_codec);
            break;
          }
          case 849: {
            CustomGamePrivateKey = input.ReadFixed64();
            break;
          }
          case 856: {
            CustomGamePenalties = input.ReadBool();
            break;
          }
          case 874: {
            LanHostPingLocation = input.ReadString();
            break;
          }
          case 880: {
            LeagueNodeId = input.ReadUInt32();
            break;
          }
          case 888: {
            MatchDuration = input.ReadUInt32();
            break;
          }
          case 904: {
            LeaguePhase = input.ReadUInt32();
            break;
          }
          case 928: {
            ExperimentalGameplayEnabled = input.ReadBool();
            break;
          }
          case 938: {
            guildChallenges_.AddEntriesFrom(ref input, _repeated_guildChallenges_codec);
            break;
          }
          case 946: {
            guildDetails_.AddEntriesFrom(ref input, _repeated_guildDetails_codec);
            break;
          }
          case 962: {
            allMembers_.AddEntriesFrom(ref input, _repeated_allMembers_codec);
            break;
          }
          case 970:
          case 968: {
            memberIndices_.AddEntriesFrom(ref input, _repeated_memberIndices_codec);
            break;
          }
          case 978:
          case 976: {
            leftMemberIndices_.AddEntriesFrom(ref input, _repeated_leftMemberIndices_codec);
            break;
          }
          case 986:
          case 984: {
            freeMemberIndices_.AddEntriesFrom(ref input, _repeated_freeMemberIndices_codec);
            break;
          }
          case 994:
          case 992: {
            requestedHeroIds_.AddEntriesFrom(ref input, _repeated_requestedHeroIds_codec);
            break;
          }
          case 1002: {
            coachFriendRequests_.AddEntriesFrom(ref input, _repeated_coachFriendRequests_codec);
            break;
          }
          case 1008: {
            IsInSteamChina = input.ReadBool();
            break;
          }
          case 1016: {
            WithScenarioSave = input.ReadBool();
            break;
          }
          case 1024: {
            LobbyCreationTime = input.ReadUInt32();
            break;
          }
          case 1034: {
            EventGameDefinition = input.ReadString();
            break;
          }
          case 1050: {
            if (matchQualityData_ == null) {
              MatchQualityData = new global::Steam.Protos.Dota2.CDOTALobbyMatchQualityData();
            }
            input.ReadMessage(MatchQualityData);
            break;
          }
          case 1058:
          case 1056: {
            requestedHeroTeams_.AddEntriesFrom(ref input, _repeated_requestedHeroTeams_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CSODOTALobby message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("UI")] Ui = 0,
        [pbr::OriginalName("READYUP")] Readyup = 4,
        [pbr::OriginalName("SERVERSETUP")] Serversetup = 1,
        [pbr::OriginalName("RUN")] Run = 2,
        [pbr::OriginalName("POSTGAME")] Postgame = 3,
        [pbr::OriginalName("NOTREADY")] Notready = 5,
        [pbr::OriginalName("SERVERASSIGN")] Serverassign = 6,
      }

      public enum LobbyType {
        [pbr::OriginalName("INVALID")] Invalid = -1,
        [pbr::OriginalName("CASUAL_MATCH")] CasualMatch = 0,
        [pbr::OriginalName("PRACTICE")] Practice = 1,
        [pbr::OriginalName("COOP_BOT_MATCH")] CoopBotMatch = 4,
        [pbr::OriginalName("COMPETITIVE_MATCH")] CompetitiveMatch = 7,
        [pbr::OriginalName("WEEKEND_TOURNEY")] WeekendTourney = 9,
        [pbr::OriginalName("LOCAL_BOT_MATCH")] LocalBotMatch = 10,
        [pbr::OriginalName("SPECTATOR")] Spectator = 11,
        [pbr::OriginalName("EVENT_MATCH")] EventMatch = 12,
        [pbr::OriginalName("NEW_PLAYER_POOL")] NewPlayerPool = 14,
        [pbr::OriginalName("FEATURED_GAMEMODE")] FeaturedGamemode = 15,
      }

      public sealed partial class CExtraMsg : pb::IMessage<CExtraMsg>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CExtraMsg> _parser = new pb::MessageParser<CExtraMsg>(() => new CExtraMsg());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CExtraMsg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CSODOTALobby.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CExtraMsg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CExtraMsg(CExtraMsg other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          contents_ = other.contents_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CExtraMsg Clone() {
          return new CExtraMsg(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static uint IdDefaultValue = 0;

        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "contents" field.</summary>
        public const int ContentsFieldNumber = 2;
        private readonly static pb::ByteString ContentsDefaultValue = pb::ByteString.Empty;

        private pb::ByteString contents_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Contents {
          get { return contents_ ?? ContentsDefaultValue; }
          set {
            contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "contents" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContents {
          get { return contents_ != null; }
        }
        /// <summary>Clears the value of the "contents" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContents() {
          contents_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CExtraMsg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CExtraMsg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Contents != other.Contents) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasContents) hash ^= Contents.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (HasContents) {
            output.WriteRawTag(18);
            output.WriteBytes(Contents);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (HasContents) {
            output.WriteRawTag(18);
            output.WriteBytes(Contents);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (HasContents) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Contents);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CExtraMsg other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasContents) {
            Contents = other.Contents;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Contents = input.ReadBytes();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Contents = input.ReadBytes();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CSODOTAServerLobby : pb::IMessage<CSODOTAServerLobby>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAServerLobby> _parser = new pb::MessageParser<CSODOTAServerLobby>(() => new CSODOTAServerLobby());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAServerLobby> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerLobby() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerLobby(CSODOTAServerLobby other) : this() {
      _hasBits0 = other._hasBits0;
      allMembers_ = other.allMembers_.Clone();
      extraStartupMessages_ = other.extraStartupMessages_.Clone();
      broadcastActive_ = other.broadcastActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerLobby Clone() {
      return new CSODOTAServerLobby(this);
    }

    /// <summary>Field number for the "all_members" field.</summary>
    public const int AllMembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTAServerLobbyMember> _repeated_allMembers_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CSODOTAServerLobbyMember.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAServerLobbyMember> allMembers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAServerLobbyMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAServerLobbyMember> AllMembers {
      get { return allMembers_; }
    }

    /// <summary>Field number for the "extra_startup_messages" field.</summary>
    public const int ExtraStartupMessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg> _repeated_extraStartupMessages_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg> extraStartupMessages_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTALobby.Types.CExtraMsg> ExtraStartupMessages {
      get { return extraStartupMessages_; }
    }

    /// <summary>Field number for the "broadcast_active" field.</summary>
    public const int BroadcastActiveFieldNumber = 3;
    private readonly static bool BroadcastActiveDefaultValue = false;

    private bool broadcastActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BroadcastActive {
      get { if ((_hasBits0 & 1) != 0) { return broadcastActive_; } else { return BroadcastActiveDefaultValue; } }
      set {
        _hasBits0 |= 1;
        broadcastActive_ = value;
      }
    }
    /// <summary>Gets whether the "broadcast_active" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBroadcastActive {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "broadcast_active" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBroadcastActive() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAServerLobby);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAServerLobby other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!allMembers_.Equals(other.allMembers_)) return false;
      if(!extraStartupMessages_.Equals(other.extraStartupMessages_)) return false;
      if (BroadcastActive != other.BroadcastActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= allMembers_.GetHashCode();
      hash ^= extraStartupMessages_.GetHashCode();
      if (HasBroadcastActive) hash ^= BroadcastActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      allMembers_.WriteTo(output, _repeated_allMembers_codec);
      extraStartupMessages_.WriteTo(output, _repeated_extraStartupMessages_codec);
      if (HasBroadcastActive) {
        output.WriteRawTag(24);
        output.WriteBool(BroadcastActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      allMembers_.WriteTo(ref output, _repeated_allMembers_codec);
      extraStartupMessages_.WriteTo(ref output, _repeated_extraStartupMessages_codec);
      if (HasBroadcastActive) {
        output.WriteRawTag(24);
        output.WriteBool(BroadcastActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allMembers_.CalculateSize(_repeated_allMembers_codec);
      size += extraStartupMessages_.CalculateSize(_repeated_extraStartupMessages_codec);
      if (HasBroadcastActive) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAServerLobby other) {
      if (other == null) {
        return;
      }
      allMembers_.Add(other.allMembers_);
      extraStartupMessages_.Add(other.extraStartupMessages_);
      if (other.HasBroadcastActive) {
        BroadcastActive = other.BroadcastActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            allMembers_.AddEntriesFrom(input, _repeated_allMembers_codec);
            break;
          }
          case 18: {
            extraStartupMessages_.AddEntriesFrom(input, _repeated_extraStartupMessages_codec);
            break;
          }
          case 24: {
            BroadcastActive = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            allMembers_.AddEntriesFrom(ref input, _repeated_allMembers_codec);
            break;
          }
          case 18: {
            extraStartupMessages_.AddEntriesFrom(ref input, _repeated_extraStartupMessages_codec);
            break;
          }
          case 24: {
            BroadcastActive = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSODOTAStaticLobby : pb::IMessage<CSODOTAStaticLobby>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAStaticLobby> _parser = new pb::MessageParser<CSODOTAStaticLobby>(() => new CSODOTAStaticLobby());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAStaticLobby> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAStaticLobby() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAStaticLobby(CSODOTAStaticLobby other) : this() {
      _hasBits0 = other._hasBits0;
      allMembers_ = other.allMembers_.Clone();
      isPlayerDraft_ = other.isPlayerDraft_;
      isLastMatchInSeries_ = other.isLastMatchInSeries_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAStaticLobby Clone() {
      return new CSODOTAStaticLobby(this);
    }

    /// <summary>Field number for the "all_members" field.</summary>
    public const int AllMembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTAStaticLobbyMember> _repeated_allMembers_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CSODOTAStaticLobbyMember.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAStaticLobbyMember> allMembers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAStaticLobbyMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAStaticLobbyMember> AllMembers {
      get { return allMembers_; }
    }

    /// <summary>Field number for the "is_player_draft" field.</summary>
    public const int IsPlayerDraftFieldNumber = 2;
    private readonly static bool IsPlayerDraftDefaultValue = false;

    private bool isPlayerDraft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayerDraft {
      get { if ((_hasBits0 & 1) != 0) { return isPlayerDraft_; } else { return IsPlayerDraftDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isPlayerDraft_ = value;
      }
    }
    /// <summary>Gets whether the "is_player_draft" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPlayerDraft {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_player_draft" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPlayerDraft() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_last_match_in_series" field.</summary>
    public const int IsLastMatchInSeriesFieldNumber = 3;
    private readonly static bool IsLastMatchInSeriesDefaultValue = false;

    private bool isLastMatchInSeries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLastMatchInSeries {
      get { if ((_hasBits0 & 2) != 0) { return isLastMatchInSeries_; } else { return IsLastMatchInSeriesDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isLastMatchInSeries_ = value;
      }
    }
    /// <summary>Gets whether the "is_last_match_in_series" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsLastMatchInSeries {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_last_match_in_series" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsLastMatchInSeries() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAStaticLobby);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAStaticLobby other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!allMembers_.Equals(other.allMembers_)) return false;
      if (IsPlayerDraft != other.IsPlayerDraft) return false;
      if (IsLastMatchInSeries != other.IsLastMatchInSeries) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= allMembers_.GetHashCode();
      if (HasIsPlayerDraft) hash ^= IsPlayerDraft.GetHashCode();
      if (HasIsLastMatchInSeries) hash ^= IsLastMatchInSeries.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      allMembers_.WriteTo(output, _repeated_allMembers_codec);
      if (HasIsPlayerDraft) {
        output.WriteRawTag(16);
        output.WriteBool(IsPlayerDraft);
      }
      if (HasIsLastMatchInSeries) {
        output.WriteRawTag(24);
        output.WriteBool(IsLastMatchInSeries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      allMembers_.WriteTo(ref output, _repeated_allMembers_codec);
      if (HasIsPlayerDraft) {
        output.WriteRawTag(16);
        output.WriteBool(IsPlayerDraft);
      }
      if (HasIsLastMatchInSeries) {
        output.WriteRawTag(24);
        output.WriteBool(IsLastMatchInSeries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allMembers_.CalculateSize(_repeated_allMembers_codec);
      if (HasIsPlayerDraft) {
        size += 1 + 1;
      }
      if (HasIsLastMatchInSeries) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAStaticLobby other) {
      if (other == null) {
        return;
      }
      allMembers_.Add(other.allMembers_);
      if (other.HasIsPlayerDraft) {
        IsPlayerDraft = other.IsPlayerDraft;
      }
      if (other.HasIsLastMatchInSeries) {
        IsLastMatchInSeries = other.IsLastMatchInSeries;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            allMembers_.AddEntriesFrom(input, _repeated_allMembers_codec);
            break;
          }
          case 16: {
            IsPlayerDraft = input.ReadBool();
            break;
          }
          case 24: {
            IsLastMatchInSeries = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            allMembers_.AddEntriesFrom(ref input, _repeated_allMembers_codec);
            break;
          }
          case 16: {
            IsPlayerDraft = input.ReadBool();
            break;
          }
          case 24: {
            IsLastMatchInSeries = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSODOTAServerStaticLobby : pb::IMessage<CSODOTAServerStaticLobby>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAServerStaticLobby> _parser = new pb::MessageParser<CSODOTAServerStaticLobby>(() => new CSODOTAServerStaticLobby());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAServerStaticLobby> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerStaticLobby() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerStaticLobby(CSODOTAServerStaticLobby other) : this() {
      _hasBits0 = other._hasBits0;
      allMembers_ = other.allMembers_.Clone();
      postPatchStrategyTimeBuffer_ = other.postPatchStrategyTimeBuffer_;
      lobbyEventPoints_ = other.lobbyEventPoints_.Clone();
      broadcastUrl_ = other.broadcastUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAServerStaticLobby Clone() {
      return new CSODOTAServerStaticLobby(this);
    }

    /// <summary>Field number for the "all_members" field.</summary>
    public const int AllMembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTAServerStaticLobbyMember> _repeated_allMembers_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CSODOTAServerStaticLobbyMember.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAServerStaticLobbyMember> allMembers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAServerStaticLobbyMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAServerStaticLobbyMember> AllMembers {
      get { return allMembers_; }
    }

    /// <summary>Field number for the "post_patch_strategy_time_buffer" field.</summary>
    public const int PostPatchStrategyTimeBufferFieldNumber = 2;
    private readonly static float PostPatchStrategyTimeBufferDefaultValue = 0F;

    private float postPatchStrategyTimeBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PostPatchStrategyTimeBuffer {
      get { if ((_hasBits0 & 1) != 0) { return postPatchStrategyTimeBuffer_; } else { return PostPatchStrategyTimeBufferDefaultValue; } }
      set {
        _hasBits0 |= 1;
        postPatchStrategyTimeBuffer_ = value;
      }
    }
    /// <summary>Gets whether the "post_patch_strategy_time_buffer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPostPatchStrategyTimeBuffer {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "post_patch_strategy_time_buffer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPostPatchStrategyTimeBuffer() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lobby_event_points" field.</summary>
    public const int LobbyEventPointsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgLobbyEventPoints> _repeated_lobbyEventPoints_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyEventPoints> lobbyEventPoints_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyEventPoints>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyEventPoints> LobbyEventPoints {
      get { return lobbyEventPoints_; }
    }

    /// <summary>Field number for the "broadcast_url" field.</summary>
    public const int BroadcastUrlFieldNumber = 4;
    private readonly static string BroadcastUrlDefaultValue = "";

    private string broadcastUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BroadcastUrl {
      get { return broadcastUrl_ ?? BroadcastUrlDefaultValue; }
      set {
        broadcastUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "broadcast_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBroadcastUrl {
      get { return broadcastUrl_ != null; }
    }
    /// <summary>Clears the value of the "broadcast_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBroadcastUrl() {
      broadcastUrl_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAServerStaticLobby);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAServerStaticLobby other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!allMembers_.Equals(other.allMembers_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PostPatchStrategyTimeBuffer, other.PostPatchStrategyTimeBuffer)) return false;
      if(!lobbyEventPoints_.Equals(other.lobbyEventPoints_)) return false;
      if (BroadcastUrl != other.BroadcastUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= allMembers_.GetHashCode();
      if (HasPostPatchStrategyTimeBuffer) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PostPatchStrategyTimeBuffer);
      hash ^= lobbyEventPoints_.GetHashCode();
      if (HasBroadcastUrl) hash ^= BroadcastUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      allMembers_.WriteTo(output, _repeated_allMembers_codec);
      if (HasPostPatchStrategyTimeBuffer) {
        output.WriteRawTag(21);
        output.WriteFloat(PostPatchStrategyTimeBuffer);
      }
      lobbyEventPoints_.WriteTo(output, _repeated_lobbyEventPoints_codec);
      if (HasBroadcastUrl) {
        output.WriteRawTag(34);
        output.WriteString(BroadcastUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      allMembers_.WriteTo(ref output, _repeated_allMembers_codec);
      if (HasPostPatchStrategyTimeBuffer) {
        output.WriteRawTag(21);
        output.WriteFloat(PostPatchStrategyTimeBuffer);
      }
      lobbyEventPoints_.WriteTo(ref output, _repeated_lobbyEventPoints_codec);
      if (HasBroadcastUrl) {
        output.WriteRawTag(34);
        output.WriteString(BroadcastUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allMembers_.CalculateSize(_repeated_allMembers_codec);
      if (HasPostPatchStrategyTimeBuffer) {
        size += 1 + 4;
      }
      size += lobbyEventPoints_.CalculateSize(_repeated_lobbyEventPoints_codec);
      if (HasBroadcastUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BroadcastUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAServerStaticLobby other) {
      if (other == null) {
        return;
      }
      allMembers_.Add(other.allMembers_);
      if (other.HasPostPatchStrategyTimeBuffer) {
        PostPatchStrategyTimeBuffer = other.PostPatchStrategyTimeBuffer;
      }
      lobbyEventPoints_.Add(other.lobbyEventPoints_);
      if (other.HasBroadcastUrl) {
        BroadcastUrl = other.BroadcastUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            allMembers_.AddEntriesFrom(input, _repeated_allMembers_codec);
            break;
          }
          case 21: {
            PostPatchStrategyTimeBuffer = input.ReadFloat();
            break;
          }
          case 26: {
            lobbyEventPoints_.AddEntriesFrom(input, _repeated_lobbyEventPoints_codec);
            break;
          }
          case 34: {
            BroadcastUrl = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            allMembers_.AddEntriesFrom(ref input, _repeated_allMembers_codec);
            break;
          }
          case 21: {
            PostPatchStrategyTimeBuffer = input.ReadFloat();
            break;
          }
          case 26: {
            lobbyEventPoints_.AddEntriesFrom(ref input, _repeated_lobbyEventPoints_codec);
            break;
          }
          case 34: {
            BroadcastUrl = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgAdditionalLobbyStartupAccountData : pb::IMessage<CMsgAdditionalLobbyStartupAccountData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgAdditionalLobbyStartupAccountData> _parser = new pb::MessageParser<CMsgAdditionalLobbyStartupAccountData>(() => new CMsgAdditionalLobbyStartupAccountData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgAdditionalLobbyStartupAccountData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAdditionalLobbyStartupAccountData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAdditionalLobbyStartupAccountData(CMsgAdditionalLobbyStartupAccountData other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      plusData_ = other.plusData_ != null ? other.plusData_.Clone() : null;
      unlockedChatWheelMessageRanges_ = other.unlockedChatWheelMessageRanges_.Clone();
      unlockedPingWheelMessageRanges_ = other.unlockedPingWheelMessageRanges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgAdditionalLobbyStartupAccountData Clone() {
      return new CMsgAdditionalLobbyStartupAccountData(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "plus_data" field.</summary>
    public const int PlusDataFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData plusData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData PlusData {
      get { return plusData_; }
      set {
        plusData_ = value;
      }
    }

    /// <summary>Field number for the "unlocked_chat_wheel_message_ranges" field.</summary>
    public const int UnlockedChatWheelMessageRangesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.ChatWheelMessageRange> _repeated_unlockedChatWheelMessageRanges_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.ChatWheelMessageRange.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.ChatWheelMessageRange> unlockedChatWheelMessageRanges_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.ChatWheelMessageRange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.ChatWheelMessageRange> UnlockedChatWheelMessageRanges {
      get { return unlockedChatWheelMessageRanges_; }
    }

    /// <summary>Field number for the "unlocked_ping_wheel_message_ranges" field.</summary>
    public const int UnlockedPingWheelMessageRangesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.PingWheelMessageRange> _repeated_unlockedPingWheelMessageRanges_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.PingWheelMessageRange.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.PingWheelMessageRange> unlockedPingWheelMessageRanges_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.PingWheelMessageRange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Types.PingWheelMessageRange> UnlockedPingWheelMessageRanges {
      get { return unlockedPingWheelMessageRanges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgAdditionalLobbyStartupAccountData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgAdditionalLobbyStartupAccountData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (!object.Equals(PlusData, other.PlusData)) return false;
      if(!unlockedChatWheelMessageRanges_.Equals(other.unlockedChatWheelMessageRanges_)) return false;
      if(!unlockedPingWheelMessageRanges_.Equals(other.unlockedPingWheelMessageRanges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (plusData_ != null) hash ^= PlusData.GetHashCode();
      hash ^= unlockedChatWheelMessageRanges_.GetHashCode();
      hash ^= unlockedPingWheelMessageRanges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (plusData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlusData);
      }
      unlockedChatWheelMessageRanges_.WriteTo(output, _repeated_unlockedChatWheelMessageRanges_codec);
      unlockedPingWheelMessageRanges_.WriteTo(output, _repeated_unlockedPingWheelMessageRanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (plusData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlusData);
      }
      unlockedChatWheelMessageRanges_.WriteTo(ref output, _repeated_unlockedChatWheelMessageRanges_codec);
      unlockedPingWheelMessageRanges_.WriteTo(ref output, _repeated_unlockedPingWheelMessageRanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (plusData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlusData);
      }
      size += unlockedChatWheelMessageRanges_.CalculateSize(_repeated_unlockedChatWheelMessageRanges_codec);
      size += unlockedPingWheelMessageRanges_.CalculateSize(_repeated_unlockedPingWheelMessageRanges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgAdditionalLobbyStartupAccountData other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.plusData_ != null) {
        if (plusData_ == null) {
          PlusData = new global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData();
        }
        PlusData.MergeFrom(other.PlusData);
      }
      unlockedChatWheelMessageRanges_.Add(other.unlockedChatWheelMessageRanges_);
      unlockedPingWheelMessageRanges_.Add(other.unlockedPingWheelMessageRanges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (plusData_ == null) {
              PlusData = new global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData();
            }
            input.ReadMessage(PlusData);
            break;
          }
          case 26: {
            unlockedChatWheelMessageRanges_.AddEntriesFrom(input, _repeated_unlockedChatWheelMessageRanges_codec);
            break;
          }
          case 34: {
            unlockedPingWheelMessageRanges_.AddEntriesFrom(input, _repeated_unlockedPingWheelMessageRanges_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (plusData_ == null) {
              PlusData = new global::Steam.Protos.Dota2.CMsgLobbyPlayerPlusSubscriptionData();
            }
            input.ReadMessage(PlusData);
            break;
          }
          case 26: {
            unlockedChatWheelMessageRanges_.AddEntriesFrom(ref input, _repeated_unlockedChatWheelMessageRanges_codec);
            break;
          }
          case 34: {
            unlockedPingWheelMessageRanges_.AddEntriesFrom(ref input, _repeated_unlockedPingWheelMessageRanges_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgAdditionalLobbyStartupAccountData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ChatWheelMessageRange : pb::IMessage<ChatWheelMessageRange>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ChatWheelMessageRange> _parser = new pb::MessageParser<ChatWheelMessageRange>(() => new ChatWheelMessageRange());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChatWheelMessageRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatWheelMessageRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatWheelMessageRange(ChatWheelMessageRange other) : this() {
          _hasBits0 = other._hasBits0;
          messageIdStart_ = other.messageIdStart_;
          messageIdEnd_ = other.messageIdEnd_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatWheelMessageRange Clone() {
          return new ChatWheelMessageRange(this);
        }

        /// <summary>Field number for the "message_id_start" field.</summary>
        public const int MessageIdStartFieldNumber = 1;
        private readonly static uint MessageIdStartDefaultValue = 4294967295;

        private uint messageIdStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MessageIdStart {
          get { if ((_hasBits0 & 1) != 0) { return messageIdStart_; } else { return MessageIdStartDefaultValue; } }
          set {
            _hasBits0 |= 1;
            messageIdStart_ = value;
          }
        }
        /// <summary>Gets whether the "message_id_start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMessageIdStart {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "message_id_start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessageIdStart() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "message_id_end" field.</summary>
        public const int MessageIdEndFieldNumber = 2;
        private readonly static uint MessageIdEndDefaultValue = 4294967295;

        private uint messageIdEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MessageIdEnd {
          get { if ((_hasBits0 & 2) != 0) { return messageIdEnd_; } else { return MessageIdEndDefaultValue; } }
          set {
            _hasBits0 |= 2;
            messageIdEnd_ = value;
          }
        }
        /// <summary>Gets whether the "message_id_end" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMessageIdEnd {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "message_id_end" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessageIdEnd() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChatWheelMessageRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChatWheelMessageRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MessageIdStart != other.MessageIdStart) return false;
          if (MessageIdEnd != other.MessageIdEnd) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMessageIdStart) hash ^= MessageIdStart.GetHashCode();
          if (HasMessageIdEnd) hash ^= MessageIdEnd.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMessageIdStart) {
            output.WriteRawTag(8);
            output.WriteUInt32(MessageIdStart);
          }
          if (HasMessageIdEnd) {
            output.WriteRawTag(16);
            output.WriteUInt32(MessageIdEnd);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMessageIdStart) {
            output.WriteRawTag(8);
            output.WriteUInt32(MessageIdStart);
          }
          if (HasMessageIdEnd) {
            output.WriteRawTag(16);
            output.WriteUInt32(MessageIdEnd);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasMessageIdStart) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageIdStart);
          }
          if (HasMessageIdEnd) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageIdEnd);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChatWheelMessageRange other) {
          if (other == null) {
            return;
          }
          if (other.HasMessageIdStart) {
            MessageIdStart = other.MessageIdStart;
          }
          if (other.HasMessageIdEnd) {
            MessageIdEnd = other.MessageIdEnd;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MessageIdStart = input.ReadUInt32();
                break;
              }
              case 16: {
                MessageIdEnd = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                MessageIdStart = input.ReadUInt32();
                break;
              }
              case 16: {
                MessageIdEnd = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PingWheelMessageRange : pb::IMessage<PingWheelMessageRange>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PingWheelMessageRange> _parser = new pb::MessageParser<PingWheelMessageRange>(() => new PingWheelMessageRange());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PingWheelMessageRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PingWheelMessageRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PingWheelMessageRange(PingWheelMessageRange other) : this() {
          _hasBits0 = other._hasBits0;
          messageIdStart_ = other.messageIdStart_;
          messageIdEnd_ = other.messageIdEnd_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PingWheelMessageRange Clone() {
          return new PingWheelMessageRange(this);
        }

        /// <summary>Field number for the "message_id_start" field.</summary>
        public const int MessageIdStartFieldNumber = 1;
        private readonly static uint MessageIdStartDefaultValue = 4294967295;

        private uint messageIdStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MessageIdStart {
          get { if ((_hasBits0 & 1) != 0) { return messageIdStart_; } else { return MessageIdStartDefaultValue; } }
          set {
            _hasBits0 |= 1;
            messageIdStart_ = value;
          }
        }
        /// <summary>Gets whether the "message_id_start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMessageIdStart {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "message_id_start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessageIdStart() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "message_id_end" field.</summary>
        public const int MessageIdEndFieldNumber = 2;
        private readonly static uint MessageIdEndDefaultValue = 4294967295;

        private uint messageIdEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MessageIdEnd {
          get { if ((_hasBits0 & 2) != 0) { return messageIdEnd_; } else { return MessageIdEndDefaultValue; } }
          set {
            _hasBits0 |= 2;
            messageIdEnd_ = value;
          }
        }
        /// <summary>Gets whether the "message_id_end" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMessageIdEnd {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "message_id_end" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessageIdEnd() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PingWheelMessageRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PingWheelMessageRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MessageIdStart != other.MessageIdStart) return false;
          if (MessageIdEnd != other.MessageIdEnd) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMessageIdStart) hash ^= MessageIdStart.GetHashCode();
          if (HasMessageIdEnd) hash ^= MessageIdEnd.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMessageIdStart) {
            output.WriteRawTag(8);
            output.WriteUInt32(MessageIdStart);
          }
          if (HasMessageIdEnd) {
            output.WriteRawTag(16);
            output.WriteUInt32(MessageIdEnd);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMessageIdStart) {
            output.WriteRawTag(8);
            output.WriteUInt32(MessageIdStart);
          }
          if (HasMessageIdEnd) {
            output.WriteRawTag(16);
            output.WriteUInt32(MessageIdEnd);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasMessageIdStart) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageIdStart);
          }
          if (HasMessageIdEnd) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageIdEnd);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PingWheelMessageRange other) {
          if (other == null) {
            return;
          }
          if (other.HasMessageIdStart) {
            MessageIdStart = other.MessageIdStart;
          }
          if (other.HasMessageIdEnd) {
            MessageIdEnd = other.MessageIdEnd;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MessageIdStart = input.ReadUInt32();
                break;
              }
              case 16: {
                MessageIdEnd = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                MessageIdStart = input.ReadUInt32();
                break;
              }
              case 16: {
                MessageIdEnd = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgLobbyInitializationComplete : pb::IMessage<CMsgLobbyInitializationComplete>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyInitializationComplete> _parser = new pb::MessageParser<CMsgLobbyInitializationComplete>(() => new CMsgLobbyInitializationComplete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyInitializationComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyInitializationComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyInitializationComplete(CMsgLobbyInitializationComplete other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyInitializationComplete Clone() {
      return new CMsgLobbyInitializationComplete(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyInitializationComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyInitializationComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyInitializationComplete other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLobbyPlaytestDetails : pb::IMessage<CMsgLobbyPlaytestDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyPlaytestDetails> _parser = new pb::MessageParser<CMsgLobbyPlaytestDetails>(() => new CMsgLobbyPlaytestDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyPlaytestDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyPlaytestDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyPlaytestDetails(CMsgLobbyPlaytestDetails other) : this() {
      json_ = other.json_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyPlaytestDetails Clone() {
      return new CMsgLobbyPlaytestDetails(this);
    }

    /// <summary>Field number for the "json" field.</summary>
    public const int JsonFieldNumber = 1;
    private readonly static string JsonDefaultValue = "";

    private string json_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Json {
      get { return json_ ?? JsonDefaultValue; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "json" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJson {
      get { return json_ != null; }
    }
    /// <summary>Clears the value of the "json" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJson() {
      json_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyPlaytestDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyPlaytestDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Json != other.Json) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasJson) hash ^= Json.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasJson) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasJson) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasJson) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyPlaytestDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasJson) {
        Json = other.Json;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLocalServerGuildData : pb::IMessage<CMsgLocalServerGuildData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLocalServerGuildData> _parser = new pb::MessageParser<CMsgLocalServerGuildData>(() => new CMsgLocalServerGuildData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLocalServerGuildData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLocalServerGuildData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLocalServerGuildData(CMsgLocalServerGuildData other) : this() {
      _hasBits0 = other._hasBits0;
      guildId_ = other.guildId_;
      eventId_ = other.eventId_;
      guildPoints_ = other.guildPoints_;
      guildLogo_ = other.guildLogo_;
      guildPrimaryColor_ = other.guildPrimaryColor_;
      guildSecondaryColor_ = other.guildSecondaryColor_;
      guildPattern_ = other.guildPattern_;
      guildFlags_ = other.guildFlags_;
      guildWeeklyPercentile_ = other.guildWeeklyPercentile_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLocalServerGuildData Clone() {
      return new CMsgLocalServerGuildData(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private readonly static uint GuildIdDefaultValue = 0;

    private uint guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildId {
      get { if ((_hasBits0 & 1) != 0) { return guildId_; } else { return GuildIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        guildId_ = value;
      }
    }
    /// <summary>Gets whether the "guild_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "guild_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 2) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "guild_points" field.</summary>
    public const int GuildPointsFieldNumber = 3;
    private readonly static uint GuildPointsDefaultValue = 0;

    private uint guildPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildPoints {
      get { if ((_hasBits0 & 4) != 0) { return guildPoints_; } else { return GuildPointsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        guildPoints_ = value;
      }
    }
    /// <summary>Gets whether the "guild_points" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildPoints {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "guild_points" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildPoints() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "guild_logo" field.</summary>
    public const int GuildLogoFieldNumber = 4;
    private readonly static ulong GuildLogoDefaultValue = 0UL;

    private ulong guildLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildLogo {
      get { if ((_hasBits0 & 8) != 0) { return guildLogo_; } else { return GuildLogoDefaultValue; } }
      set {
        _hasBits0 |= 8;
        guildLogo_ = value;
      }
    }
    /// <summary>Gets whether the "guild_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildLogo {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "guild_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildLogo() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "guild_primary_color" field.</summary>
    public const int GuildPrimaryColorFieldNumber = 5;
    private readonly static uint GuildPrimaryColorDefaultValue = 0;

    private uint guildPrimaryColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildPrimaryColor {
      get { if ((_hasBits0 & 16) != 0) { return guildPrimaryColor_; } else { return GuildPrimaryColorDefaultValue; } }
      set {
        _hasBits0 |= 16;
        guildPrimaryColor_ = value;
      }
    }
    /// <summary>Gets whether the "guild_primary_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildPrimaryColor {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "guild_primary_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildPrimaryColor() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "guild_secondary_color" field.</summary>
    public const int GuildSecondaryColorFieldNumber = 6;
    private readonly static uint GuildSecondaryColorDefaultValue = 0;

    private uint guildSecondaryColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildSecondaryColor {
      get { if ((_hasBits0 & 32) != 0) { return guildSecondaryColor_; } else { return GuildSecondaryColorDefaultValue; } }
      set {
        _hasBits0 |= 32;
        guildSecondaryColor_ = value;
      }
    }
    /// <summary>Gets whether the "guild_secondary_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildSecondaryColor {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "guild_secondary_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildSecondaryColor() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "guild_pattern" field.</summary>
    public const int GuildPatternFieldNumber = 7;
    private readonly static uint GuildPatternDefaultValue = 0;

    private uint guildPattern_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildPattern {
      get { if ((_hasBits0 & 64) != 0) { return guildPattern_; } else { return GuildPatternDefaultValue; } }
      set {
        _hasBits0 |= 64;
        guildPattern_ = value;
      }
    }
    /// <summary>Gets whether the "guild_pattern" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildPattern {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "guild_pattern" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildPattern() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "guild_flags" field.</summary>
    public const int GuildFlagsFieldNumber = 8;
    private readonly static uint GuildFlagsDefaultValue = 0;

    private uint guildFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildFlags {
      get { if ((_hasBits0 & 128) != 0) { return guildFlags_; } else { return GuildFlagsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        guildFlags_ = value;
      }
    }
    /// <summary>Gets whether the "guild_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildFlags {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "guild_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildFlags() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "guild_weekly_percentile" field.</summary>
    public const int GuildWeeklyPercentileFieldNumber = 9;
    private readonly static uint GuildWeeklyPercentileDefaultValue = 0;

    private uint guildWeeklyPercentile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildWeeklyPercentile {
      get { if ((_hasBits0 & 256) != 0) { return guildWeeklyPercentile_; } else { return GuildWeeklyPercentileDefaultValue; } }
      set {
        _hasBits0 |= 256;
        guildWeeklyPercentile_ = value;
      }
    }
    /// <summary>Gets whether the "guild_weekly_percentile" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildWeeklyPercentile {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "guild_weekly_percentile" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildWeeklyPercentile() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLocalServerGuildData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLocalServerGuildData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (EventId != other.EventId) return false;
      if (GuildPoints != other.GuildPoints) return false;
      if (GuildLogo != other.GuildLogo) return false;
      if (GuildPrimaryColor != other.GuildPrimaryColor) return false;
      if (GuildSecondaryColor != other.GuildSecondaryColor) return false;
      if (GuildPattern != other.GuildPattern) return false;
      if (GuildFlags != other.GuildFlags) return false;
      if (GuildWeeklyPercentile != other.GuildWeeklyPercentile) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGuildId) hash ^= GuildId.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasGuildPoints) hash ^= GuildPoints.GetHashCode();
      if (HasGuildLogo) hash ^= GuildLogo.GetHashCode();
      if (HasGuildPrimaryColor) hash ^= GuildPrimaryColor.GetHashCode();
      if (HasGuildSecondaryColor) hash ^= GuildSecondaryColor.GetHashCode();
      if (HasGuildPattern) hash ^= GuildPattern.GetHashCode();
      if (HasGuildFlags) hash ^= GuildFlags.GetHashCode();
      if (HasGuildWeeklyPercentile) hash ^= GuildWeeklyPercentile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGuildId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GuildId);
      }
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasGuildPoints) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildPoints);
      }
      if (HasGuildLogo) {
        output.WriteRawTag(32);
        output.WriteUInt64(GuildLogo);
      }
      if (HasGuildPrimaryColor) {
        output.WriteRawTag(40);
        output.WriteUInt32(GuildPrimaryColor);
      }
      if (HasGuildSecondaryColor) {
        output.WriteRawTag(48);
        output.WriteUInt32(GuildSecondaryColor);
      }
      if (HasGuildPattern) {
        output.WriteRawTag(56);
        output.WriteUInt32(GuildPattern);
      }
      if (HasGuildFlags) {
        output.WriteRawTag(64);
        output.WriteUInt32(GuildFlags);
      }
      if (HasGuildWeeklyPercentile) {
        output.WriteRawTag(72);
        output.WriteUInt32(GuildWeeklyPercentile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGuildId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GuildId);
      }
      if (HasEventId) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventId);
      }
      if (HasGuildPoints) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildPoints);
      }
      if (HasGuildLogo) {
        output.WriteRawTag(32);
        output.WriteUInt64(GuildLogo);
      }
      if (HasGuildPrimaryColor) {
        output.WriteRawTag(40);
        output.WriteUInt32(GuildPrimaryColor);
      }
      if (HasGuildSecondaryColor) {
        output.WriteRawTag(48);
        output.WriteUInt32(GuildSecondaryColor);
      }
      if (HasGuildPattern) {
        output.WriteRawTag(56);
        output.WriteUInt32(GuildPattern);
      }
      if (HasGuildFlags) {
        output.WriteRawTag(64);
        output.WriteUInt32(GuildFlags);
      }
      if (HasGuildWeeklyPercentile) {
        output.WriteRawTag(72);
        output.WriteUInt32(GuildWeeklyPercentile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGuildId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildId);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasGuildPoints) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildPoints);
      }
      if (HasGuildLogo) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildLogo);
      }
      if (HasGuildPrimaryColor) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildPrimaryColor);
      }
      if (HasGuildSecondaryColor) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildSecondaryColor);
      }
      if (HasGuildPattern) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildPattern);
      }
      if (HasGuildFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildFlags);
      }
      if (HasGuildWeeklyPercentile) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildWeeklyPercentile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLocalServerGuildData other) {
      if (other == null) {
        return;
      }
      if (other.HasGuildId) {
        GuildId = other.GuildId;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasGuildPoints) {
        GuildPoints = other.GuildPoints;
      }
      if (other.HasGuildLogo) {
        GuildLogo = other.GuildLogo;
      }
      if (other.HasGuildPrimaryColor) {
        GuildPrimaryColor = other.GuildPrimaryColor;
      }
      if (other.HasGuildSecondaryColor) {
        GuildSecondaryColor = other.GuildSecondaryColor;
      }
      if (other.HasGuildPattern) {
        GuildPattern = other.GuildPattern;
      }
      if (other.HasGuildFlags) {
        GuildFlags = other.GuildFlags;
      }
      if (other.HasGuildWeeklyPercentile) {
        GuildWeeklyPercentile = other.GuildWeeklyPercentile;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuildId = input.ReadUInt32();
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            GuildPoints = input.ReadUInt32();
            break;
          }
          case 32: {
            GuildLogo = input.ReadUInt64();
            break;
          }
          case 40: {
            GuildPrimaryColor = input.ReadUInt32();
            break;
          }
          case 48: {
            GuildSecondaryColor = input.ReadUInt32();
            break;
          }
          case 56: {
            GuildPattern = input.ReadUInt32();
            break;
          }
          case 64: {
            GuildFlags = input.ReadUInt32();
            break;
          }
          case 72: {
            GuildWeeklyPercentile = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GuildId = input.ReadUInt32();
            break;
          }
          case 16: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 24: {
            GuildPoints = input.ReadUInt32();
            break;
          }
          case 32: {
            GuildLogo = input.ReadUInt64();
            break;
          }
          case 40: {
            GuildPrimaryColor = input.ReadUInt32();
            break;
          }
          case 48: {
            GuildSecondaryColor = input.ReadUInt32();
            break;
          }
          case 56: {
            GuildPattern = input.ReadUInt32();
            break;
          }
          case 64: {
            GuildFlags = input.ReadUInt32();
            break;
          }
          case 72: {
            GuildWeeklyPercentile = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLocalServerFakeLobbyData : pb::IMessage<CMsgLocalServerFakeLobbyData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLocalServerFakeLobbyData> _parser = new pb::MessageParser<CMsgLocalServerFakeLobbyData>(() => new CMsgLocalServerFakeLobbyData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLocalServerFakeLobbyData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonLobbyReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLocalServerFakeLobbyData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLocalServerFakeLobbyData(CMsgLocalServerFakeLobbyData other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      eventPoints_ = other.eventPoints_.Clone();
      isPlusSubscriber_ = other.isPlusSubscriber_;
      primaryEventId_ = other.primaryEventId_;
      favoriteTeam_ = other.favoriteTeam_;
      favoriteTeamQuality_ = other.favoriteTeamQuality_;
      guildInfo_ = other.guildInfo_ != null ? other.guildInfo_.Clone() : null;
      teleportFxLevel_ = other.teleportFxLevel_;
      additionalData_ = other.additionalData_ != null ? other.additionalData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLocalServerFakeLobbyData Clone() {
      return new CMsgLocalServerFakeLobbyData(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "event_points" field.</summary>
    public const int EventPointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgLobbyEventPoints> _repeated_eventPoints_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgLobbyEventPoints.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyEventPoints> eventPoints_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyEventPoints>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgLobbyEventPoints> EventPoints {
      get { return eventPoints_; }
    }

    /// <summary>Field number for the "is_plus_subscriber" field.</summary>
    public const int IsPlusSubscriberFieldNumber = 3;
    private readonly static bool IsPlusSubscriberDefaultValue = false;

    private bool isPlusSubscriber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlusSubscriber {
      get { if ((_hasBits0 & 2) != 0) { return isPlusSubscriber_; } else { return IsPlusSubscriberDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isPlusSubscriber_ = value;
      }
    }
    /// <summary>Gets whether the "is_plus_subscriber" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPlusSubscriber {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_plus_subscriber" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPlusSubscriber() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "primary_event_id" field.</summary>
    public const int PrimaryEventIdFieldNumber = 4;
    private readonly static uint PrimaryEventIdDefaultValue = 0;

    private uint primaryEventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrimaryEventId {
      get { if ((_hasBits0 & 4) != 0) { return primaryEventId_; } else { return PrimaryEventIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        primaryEventId_ = value;
      }
    }
    /// <summary>Gets whether the "primary_event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrimaryEventId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "primary_event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrimaryEventId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "favorite_team" field.</summary>
    public const int FavoriteTeamFieldNumber = 5;
    private readonly static uint FavoriteTeamDefaultValue = 0;

    private uint favoriteTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FavoriteTeam {
      get { if ((_hasBits0 & 8) != 0) { return favoriteTeam_; } else { return FavoriteTeamDefaultValue; } }
      set {
        _hasBits0 |= 8;
        favoriteTeam_ = value;
      }
    }
    /// <summary>Gets whether the "favorite_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFavoriteTeam {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "favorite_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFavoriteTeam() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "favorite_team_quality" field.</summary>
    public const int FavoriteTeamQualityFieldNumber = 6;
    private readonly static uint FavoriteTeamQualityDefaultValue = 0;

    private uint favoriteTeamQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FavoriteTeamQuality {
      get { if ((_hasBits0 & 16) != 0) { return favoriteTeamQuality_; } else { return FavoriteTeamQualityDefaultValue; } }
      set {
        _hasBits0 |= 16;
        favoriteTeamQuality_ = value;
      }
    }
    /// <summary>Gets whether the "favorite_team_quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFavoriteTeamQuality {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "favorite_team_quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFavoriteTeamQuality() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "guild_info" field.</summary>
    public const int GuildInfoFieldNumber = 7;
    private global::Steam.Protos.Dota2.CMsgLocalServerGuildData guildInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgLocalServerGuildData GuildInfo {
      get { return guildInfo_; }
      set {
        guildInfo_ = value;
      }
    }

    /// <summary>Field number for the "teleport_fx_level" field.</summary>
    public const int TeleportFxLevelFieldNumber = 8;
    private readonly static uint TeleportFxLevelDefaultValue = 0;

    private uint teleportFxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeleportFxLevel {
      get { if ((_hasBits0 & 32) != 0) { return teleportFxLevel_; } else { return TeleportFxLevelDefaultValue; } }
      set {
        _hasBits0 |= 32;
        teleportFxLevel_ = value;
      }
    }
    /// <summary>Gets whether the "teleport_fx_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeleportFxLevel {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "teleport_fx_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeleportFxLevel() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "additional_data" field.</summary>
    public const int AdditionalDataFieldNumber = 9;
    private global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData additionalData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData AdditionalData {
      get { return additionalData_; }
      set {
        additionalData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLocalServerFakeLobbyData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLocalServerFakeLobbyData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if(!eventPoints_.Equals(other.eventPoints_)) return false;
      if (IsPlusSubscriber != other.IsPlusSubscriber) return false;
      if (PrimaryEventId != other.PrimaryEventId) return false;
      if (FavoriteTeam != other.FavoriteTeam) return false;
      if (FavoriteTeamQuality != other.FavoriteTeamQuality) return false;
      if (!object.Equals(GuildInfo, other.GuildInfo)) return false;
      if (TeleportFxLevel != other.TeleportFxLevel) return false;
      if (!object.Equals(AdditionalData, other.AdditionalData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      hash ^= eventPoints_.GetHashCode();
      if (HasIsPlusSubscriber) hash ^= IsPlusSubscriber.GetHashCode();
      if (HasPrimaryEventId) hash ^= PrimaryEventId.GetHashCode();
      if (HasFavoriteTeam) hash ^= FavoriteTeam.GetHashCode();
      if (HasFavoriteTeamQuality) hash ^= FavoriteTeamQuality.GetHashCode();
      if (guildInfo_ != null) hash ^= GuildInfo.GetHashCode();
      if (HasTeleportFxLevel) hash ^= TeleportFxLevel.GetHashCode();
      if (additionalData_ != null) hash ^= AdditionalData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      eventPoints_.WriteTo(output, _repeated_eventPoints_codec);
      if (HasIsPlusSubscriber) {
        output.WriteRawTag(24);
        output.WriteBool(IsPlusSubscriber);
      }
      if (HasPrimaryEventId) {
        output.WriteRawTag(32);
        output.WriteUInt32(PrimaryEventId);
      }
      if (HasFavoriteTeam) {
        output.WriteRawTag(40);
        output.WriteUInt32(FavoriteTeam);
      }
      if (HasFavoriteTeamQuality) {
        output.WriteRawTag(48);
        output.WriteUInt32(FavoriteTeamQuality);
      }
      if (guildInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GuildInfo);
      }
      if (HasTeleportFxLevel) {
        output.WriteRawTag(64);
        output.WriteUInt32(TeleportFxLevel);
      }
      if (additionalData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(AdditionalData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      eventPoints_.WriteTo(ref output, _repeated_eventPoints_codec);
      if (HasIsPlusSubscriber) {
        output.WriteRawTag(24);
        output.WriteBool(IsPlusSubscriber);
      }
      if (HasPrimaryEventId) {
        output.WriteRawTag(32);
        output.WriteUInt32(PrimaryEventId);
      }
      if (HasFavoriteTeam) {
        output.WriteRawTag(40);
        output.WriteUInt32(FavoriteTeam);
      }
      if (HasFavoriteTeamQuality) {
        output.WriteRawTag(48);
        output.WriteUInt32(FavoriteTeamQuality);
      }
      if (guildInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GuildInfo);
      }
      if (HasTeleportFxLevel) {
        output.WriteRawTag(64);
        output.WriteUInt32(TeleportFxLevel);
      }
      if (additionalData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(AdditionalData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      size += eventPoints_.CalculateSize(_repeated_eventPoints_codec);
      if (HasIsPlusSubscriber) {
        size += 1 + 1;
      }
      if (HasPrimaryEventId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrimaryEventId);
      }
      if (HasFavoriteTeam) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FavoriteTeam);
      }
      if (HasFavoriteTeamQuality) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FavoriteTeamQuality);
      }
      if (guildInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildInfo);
      }
      if (HasTeleportFxLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeleportFxLevel);
      }
      if (additionalData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdditionalData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLocalServerFakeLobbyData other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      eventPoints_.Add(other.eventPoints_);
      if (other.HasIsPlusSubscriber) {
        IsPlusSubscriber = other.IsPlusSubscriber;
      }
      if (other.HasPrimaryEventId) {
        PrimaryEventId = other.PrimaryEventId;
      }
      if (other.HasFavoriteTeam) {
        FavoriteTeam = other.FavoriteTeam;
      }
      if (other.HasFavoriteTeamQuality) {
        FavoriteTeamQuality = other.FavoriteTeamQuality;
      }
      if (other.guildInfo_ != null) {
        if (guildInfo_ == null) {
          GuildInfo = new global::Steam.Protos.Dota2.CMsgLocalServerGuildData();
        }
        GuildInfo.MergeFrom(other.GuildInfo);
      }
      if (other.HasTeleportFxLevel) {
        TeleportFxLevel = other.TeleportFxLevel;
      }
      if (other.additionalData_ != null) {
        if (additionalData_ == null) {
          AdditionalData = new global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData();
        }
        AdditionalData.MergeFrom(other.AdditionalData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            eventPoints_.AddEntriesFrom(input, _repeated_eventPoints_codec);
            break;
          }
          case 24: {
            IsPlusSubscriber = input.ReadBool();
            break;
          }
          case 32: {
            PrimaryEventId = input.ReadUInt32();
            break;
          }
          case 40: {
            FavoriteTeam = input.ReadUInt32();
            break;
          }
          case 48: {
            FavoriteTeamQuality = input.ReadUInt32();
            break;
          }
          case 58: {
            if (guildInfo_ == null) {
              GuildInfo = new global::Steam.Protos.Dota2.CMsgLocalServerGuildData();
            }
            input.ReadMessage(GuildInfo);
            break;
          }
          case 64: {
            TeleportFxLevel = input.ReadUInt32();
            break;
          }
          case 74: {
            if (additionalData_ == null) {
              AdditionalData = new global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData();
            }
            input.ReadMessage(AdditionalData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            eventPoints_.AddEntriesFrom(ref input, _repeated_eventPoints_codec);
            break;
          }
          case 24: {
            IsPlusSubscriber = input.ReadBool();
            break;
          }
          case 32: {
            PrimaryEventId = input.ReadUInt32();
            break;
          }
          case 40: {
            FavoriteTeam = input.ReadUInt32();
            break;
          }
          case 48: {
            FavoriteTeamQuality = input.ReadUInt32();
            break;
          }
          case 58: {
            if (guildInfo_ == null) {
              GuildInfo = new global::Steam.Protos.Dota2.CMsgLocalServerGuildData();
            }
            input.ReadMessage(GuildInfo);
            break;
          }
          case 64: {
            TeleportFxLevel = input.ReadUInt32();
            break;
          }
          case 74: {
            if (additionalData_ == null) {
              AdditionalData = new global::Steam.Protos.Dota2.CMsgAdditionalLobbyStartupAccountData();
            }
            input.ReadMessage(AdditionalData);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
