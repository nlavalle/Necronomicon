// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_gcmessages_common_survivors.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Steam.Protos.Dota2 {

  /// <summary>Holder for reflection information generated from dota_gcmessages_common_survivors.proto</summary>
  public static partial class DotaGcmessagesCommonSurvivorsReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_gcmessages_common_survivors.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaGcmessagesCommonSurvivorsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZkb3RhX2djbWVzc2FnZXNfY29tbW9uX3N1cnZpdm9ycy5wcm90bxoTc3Rl",
            "YW1tZXNzYWdlcy5wcm90bxoXZG90YV9zaGFyZWRfZW51bXMucHJvdG8aHGRv",
            "dGFfZ2NtZXNzYWdlc19jb21tb24ucHJvdG8aFmdjc2RrX2djbWVzc2FnZXMu",
            "cHJvdG8irwEKFUNNc2dTdXJ2aXZvcnNVc2VyRGF0YRJFChBhdHRyaWJ1dGVf",
            "bGV2ZWxzGAEgAygLMisuQ01zZ1N1cnZpdm9yc1VzZXJEYXRhLkF0dHJpYnV0",
            "ZUxldmVsc0VudHJ5EhsKE3VubG9ja2VkX2RpZmZpY3VsdHkYAiABKA0aMgoU",
            "QXR0cmlidXRlTGV2ZWxzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
            "ASgNIrIBCitDTXNnQ2xpZW50VG9HQ1N1cnZpdm9yc1Bvd2VyVXBUZWxlbWV0",
            "cnlEYXRhEhIKCnBvd2VydXBfaWQYASABKA0SDQoFbGV2ZWwYAiABKA0SFQoN",
            "dGltZV9yZWNlaXZlZBgDIAEoDRIRCgl0aW1lX2hlbGQYBCABKA0SFAoMdG90",
            "YWxfZGFtYWdlGAUgASgEEgsKA2RwcxgGIAEoDRITCgtoYXNfc2NlcHRlchgH",
            "IAEoDSL0AQooQ01zZ0NsaWVudFRvR0NTdXJ2aXZvcnNHYW1lVGVsZW1ldHJ5",
            "RGF0YRIVCg10aW1lX3N1cnZpdmVkGAEgASgNEhQKDHBsYXllcl9sZXZlbBgC",
            "IAEoDRITCgtnYW1lX3Jlc3VsdBgDIAEoDRITCgtnb2xkX2Vhcm5lZBgEIAEo",
            "DRI+Cghwb3dlcnVwcxgFIAMoCzIsLkNNc2dDbGllbnRUb0dDU3Vydml2b3Jz",
            "UG93ZXJVcFRlbGVtZXRyeURhdGESEgoKZGlmZmljdWx0eRgGIAEoDRIdChVt",
            "ZXRhcHJvZ3Jlc3Npb25fbGV2ZWwYByABKA0inwIKMENNc2dDbGllbnRUb0dD",
            "U3Vydml2b3JzR2FtZVRlbGVtZXRyeURhdGFSZXNwb25zZRJfCghyZXNwb25z",
            "ZRgBIAEoDjI7LkNNc2dDbGllbnRUb0dDU3Vydml2b3JzR2FtZVRlbGVtZXRy",
            "eURhdGFSZXNwb25zZS5FUmVzcG9uc2U6EGtfZUludGVybmFsRXJyb3IiiQEK",
            "CUVSZXNwb25zZRIUChBrX2VJbnRlcm5hbEVycm9yEAASDgoKa19lU3VjY2Vz",
            "cxABEg4KCmtfZVRvb0J1c3kQAhIPCgtrX2VEaXNhYmxlZBADEg4KCmtfZVRp",
            "bWVvdXQQBBIRCg1rX2VOb3RBbGxvd2VkEAUSEgoOa19lSW52YWxpZEl0ZW0Q",
            "BkIVqgISU3RlYW0uUHJvdG9zLkRvdGEy"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Steam.Protos.Dota2.SteammessagesReflection.Descriptor, global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor, global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor, global::Steam.Protos.Dota2.GcsdkGcmessagesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSurvivorsUserData), global::Steam.Protos.Dota2.CMsgSurvivorsUserData.Parser, new[]{ "AttributeLevels", "UnlockedDifficulty" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgSurvivorsUserData.Types.AttributeLevelsEntry), global::Steam.Protos.Dota2.CMsgSurvivorsUserData.Types.AttributeLevelsEntry.Parser, new[]{ "Key", "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsPowerUpTelemetryData), global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsPowerUpTelemetryData.Parser, new[]{ "PowerupId", "Level", "TimeReceived", "TimeHeld", "TotalDamage", "Dps", "HasScepter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryData), global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryData.Parser, new[]{ "TimeSurvived", "PlayerLevel", "GameResult", "GoldEarned", "Powerups", "Difficulty", "MetaprogressionLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryDataResponse), global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryDataResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryDataResponse.Types.EResponse) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CMsgSurvivorsUserData : pb::IMessage<CMsgSurvivorsUserData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgSurvivorsUserData> _parser = new pb::MessageParser<CMsgSurvivorsUserData>(() => new CMsgSurvivorsUserData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgSurvivorsUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonSurvivorsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSurvivorsUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSurvivorsUserData(CMsgSurvivorsUserData other) : this() {
      _hasBits0 = other._hasBits0;
      attributeLevels_ = other.attributeLevels_.Clone();
      unlockedDifficulty_ = other.unlockedDifficulty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgSurvivorsUserData Clone() {
      return new CMsgSurvivorsUserData(this);
    }

    /// <summary>Field number for the "attribute_levels" field.</summary>
    public const int AttributeLevelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgSurvivorsUserData.Types.AttributeLevelsEntry> _repeated_attributeLevels_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgSurvivorsUserData.Types.AttributeLevelsEntry.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSurvivorsUserData.Types.AttributeLevelsEntry> attributeLevels_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSurvivorsUserData.Types.AttributeLevelsEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgSurvivorsUserData.Types.AttributeLevelsEntry> AttributeLevels {
      get { return attributeLevels_; }
    }

    /// <summary>Field number for the "unlocked_difficulty" field.</summary>
    public const int UnlockedDifficultyFieldNumber = 2;
    private readonly static uint UnlockedDifficultyDefaultValue = 0;

    private uint unlockedDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnlockedDifficulty {
      get { if ((_hasBits0 & 1) != 0) { return unlockedDifficulty_; } else { return UnlockedDifficultyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        unlockedDifficulty_ = value;
      }
    }
    /// <summary>Gets whether the "unlocked_difficulty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnlockedDifficulty {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "unlocked_difficulty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnlockedDifficulty() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgSurvivorsUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgSurvivorsUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attributeLevels_.Equals(other.attributeLevels_)) return false;
      if (UnlockedDifficulty != other.UnlockedDifficulty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attributeLevels_.GetHashCode();
      if (HasUnlockedDifficulty) hash ^= UnlockedDifficulty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      attributeLevels_.WriteTo(output, _repeated_attributeLevels_codec);
      if (HasUnlockedDifficulty) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnlockedDifficulty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      attributeLevels_.WriteTo(ref output, _repeated_attributeLevels_codec);
      if (HasUnlockedDifficulty) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnlockedDifficulty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attributeLevels_.CalculateSize(_repeated_attributeLevels_codec);
      if (HasUnlockedDifficulty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnlockedDifficulty);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgSurvivorsUserData other) {
      if (other == null) {
        return;
      }
      attributeLevels_.Add(other.attributeLevels_);
      if (other.HasUnlockedDifficulty) {
        UnlockedDifficulty = other.UnlockedDifficulty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attributeLevels_.AddEntriesFrom(input, _repeated_attributeLevels_codec);
            break;
          }
          case 16: {
            UnlockedDifficulty = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            attributeLevels_.AddEntriesFrom(ref input, _repeated_attributeLevels_codec);
            break;
          }
          case 16: {
            UnlockedDifficulty = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgSurvivorsUserData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AttributeLevelsEntry : pb::IMessage<AttributeLevelsEntry>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeLevelsEntry> _parser = new pb::MessageParser<AttributeLevelsEntry>(() => new AttributeLevelsEntry());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeLevelsEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgSurvivorsUserData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeLevelsEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeLevelsEntry(AttributeLevelsEntry other) : this() {
          _hasBits0 = other._hasBits0;
          key_ = other.key_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeLevelsEntry Clone() {
          return new AttributeLevelsEntry(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private readonly static int KeyDefaultValue = 0;

        private int key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Key {
          get { if ((_hasBits0 & 1) != 0) { return key_; } else { return KeyDefaultValue; } }
          set {
            _hasBits0 |= 1;
            key_ = value;
          }
        }
        /// <summary>Gets whether the "key" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKey {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "key" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKey() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private readonly static uint ValueDefaultValue = 0;

        private uint value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Value {
          get { if ((_hasBits0 & 2) != 0) { return value_; } else { return ValueDefaultValue; } }
          set {
            _hasBits0 |= 2;
            value_ = value;
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValue {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeLevelsEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeLevelsEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasKey) hash ^= Key.GetHashCode();
          if (HasValue) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasKey) {
            output.WriteRawTag(8);
            output.WriteInt32(Key);
          }
          if (HasValue) {
            output.WriteRawTag(16);
            output.WriteUInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasKey) {
            output.WriteRawTag(8);
            output.WriteInt32(Key);
          }
          if (HasValue) {
            output.WriteRawTag(16);
            output.WriteUInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasKey) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
          }
          if (HasValue) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeLevelsEntry other) {
          if (other == null) {
            return;
          }
          if (other.HasKey) {
            Key = other.Key;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key = input.ReadInt32();
                break;
              }
              case 16: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Key = input.ReadInt32();
                break;
              }
              case 16: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCSurvivorsPowerUpTelemetryData : pb::IMessage<CMsgClientToGCSurvivorsPowerUpTelemetryData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCSurvivorsPowerUpTelemetryData> _parser = new pb::MessageParser<CMsgClientToGCSurvivorsPowerUpTelemetryData>(() => new CMsgClientToGCSurvivorsPowerUpTelemetryData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCSurvivorsPowerUpTelemetryData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonSurvivorsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCSurvivorsPowerUpTelemetryData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCSurvivorsPowerUpTelemetryData(CMsgClientToGCSurvivorsPowerUpTelemetryData other) : this() {
      _hasBits0 = other._hasBits0;
      powerupId_ = other.powerupId_;
      level_ = other.level_;
      timeReceived_ = other.timeReceived_;
      timeHeld_ = other.timeHeld_;
      totalDamage_ = other.totalDamage_;
      dps_ = other.dps_;
      hasScepter_ = other.hasScepter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCSurvivorsPowerUpTelemetryData Clone() {
      return new CMsgClientToGCSurvivorsPowerUpTelemetryData(this);
    }

    /// <summary>Field number for the "powerup_id" field.</summary>
    public const int PowerupIdFieldNumber = 1;
    private readonly static uint PowerupIdDefaultValue = 0;

    private uint powerupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PowerupId {
      get { if ((_hasBits0 & 1) != 0) { return powerupId_; } else { return PowerupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        powerupId_ = value;
      }
    }
    /// <summary>Gets whether the "powerup_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPowerupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "powerup_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPowerupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private readonly static uint LevelDefaultValue = 0;

    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { if ((_hasBits0 & 2) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "time_received" field.</summary>
    public const int TimeReceivedFieldNumber = 3;
    private readonly static uint TimeReceivedDefaultValue = 0;

    private uint timeReceived_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeReceived {
      get { if ((_hasBits0 & 4) != 0) { return timeReceived_; } else { return TimeReceivedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        timeReceived_ = value;
      }
    }
    /// <summary>Gets whether the "time_received" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeReceived {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "time_received" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeReceived() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "time_held" field.</summary>
    public const int TimeHeldFieldNumber = 4;
    private readonly static uint TimeHeldDefaultValue = 0;

    private uint timeHeld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeHeld {
      get { if ((_hasBits0 & 8) != 0) { return timeHeld_; } else { return TimeHeldDefaultValue; } }
      set {
        _hasBits0 |= 8;
        timeHeld_ = value;
      }
    }
    /// <summary>Gets whether the "time_held" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeHeld {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "time_held" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeHeld() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "total_damage" field.</summary>
    public const int TotalDamageFieldNumber = 5;
    private readonly static ulong TotalDamageDefaultValue = 0UL;

    private ulong totalDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalDamage {
      get { if ((_hasBits0 & 16) != 0) { return totalDamage_; } else { return TotalDamageDefaultValue; } }
      set {
        _hasBits0 |= 16;
        totalDamage_ = value;
      }
    }
    /// <summary>Gets whether the "total_damage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalDamage {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "total_damage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalDamage() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "dps" field.</summary>
    public const int DpsFieldNumber = 6;
    private readonly static uint DpsDefaultValue = 0;

    private uint dps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dps {
      get { if ((_hasBits0 & 32) != 0) { return dps_; } else { return DpsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        dps_ = value;
      }
    }
    /// <summary>Gets whether the "dps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDps {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "dps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDps() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "has_scepter" field.</summary>
    public const int HasScepterFieldNumber = 7;
    private readonly static uint HasScepterDefaultValue = 0;

    private uint hasScepter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HasScepter {
      get { if ((_hasBits0 & 64) != 0) { return hasScepter_; } else { return HasScepterDefaultValue; } }
      set {
        _hasBits0 |= 64;
        hasScepter_ = value;
      }
    }
    /// <summary>Gets whether the "has_scepter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasScepter {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "has_scepter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasScepter() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCSurvivorsPowerUpTelemetryData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCSurvivorsPowerUpTelemetryData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PowerupId != other.PowerupId) return false;
      if (Level != other.Level) return false;
      if (TimeReceived != other.TimeReceived) return false;
      if (TimeHeld != other.TimeHeld) return false;
      if (TotalDamage != other.TotalDamage) return false;
      if (Dps != other.Dps) return false;
      if (HasScepter != other.HasScepter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPowerupId) hash ^= PowerupId.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasTimeReceived) hash ^= TimeReceived.GetHashCode();
      if (HasTimeHeld) hash ^= TimeHeld.GetHashCode();
      if (HasTotalDamage) hash ^= TotalDamage.GetHashCode();
      if (HasDps) hash ^= Dps.GetHashCode();
      if (HasHasScepter) hash ^= HasScepter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPowerupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(PowerupId);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (HasTimeReceived) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeReceived);
      }
      if (HasTimeHeld) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeHeld);
      }
      if (HasTotalDamage) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalDamage);
      }
      if (HasDps) {
        output.WriteRawTag(48);
        output.WriteUInt32(Dps);
      }
      if (HasHasScepter) {
        output.WriteRawTag(56);
        output.WriteUInt32(HasScepter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPowerupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(PowerupId);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (HasTimeReceived) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeReceived);
      }
      if (HasTimeHeld) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeHeld);
      }
      if (HasTotalDamage) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalDamage);
      }
      if (HasDps) {
        output.WriteRawTag(48);
        output.WriteUInt32(Dps);
      }
      if (HasHasScepter) {
        output.WriteRawTag(56);
        output.WriteUInt32(HasScepter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPowerupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PowerupId);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HasTimeReceived) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeReceived);
      }
      if (HasTimeHeld) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeHeld);
      }
      if (HasTotalDamage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalDamage);
      }
      if (HasDps) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dps);
      }
      if (HasHasScepter) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HasScepter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCSurvivorsPowerUpTelemetryData other) {
      if (other == null) {
        return;
      }
      if (other.HasPowerupId) {
        PowerupId = other.PowerupId;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasTimeReceived) {
        TimeReceived = other.TimeReceived;
      }
      if (other.HasTimeHeld) {
        TimeHeld = other.TimeHeld;
      }
      if (other.HasTotalDamage) {
        TotalDamage = other.TotalDamage;
      }
      if (other.HasDps) {
        Dps = other.Dps;
      }
      if (other.HasHasScepter) {
        HasScepter = other.HasScepter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PowerupId = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            TimeReceived = input.ReadUInt32();
            break;
          }
          case 32: {
            TimeHeld = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalDamage = input.ReadUInt64();
            break;
          }
          case 48: {
            Dps = input.ReadUInt32();
            break;
          }
          case 56: {
            HasScepter = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PowerupId = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            TimeReceived = input.ReadUInt32();
            break;
          }
          case 32: {
            TimeHeld = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalDamage = input.ReadUInt64();
            break;
          }
          case 48: {
            Dps = input.ReadUInt32();
            break;
          }
          case 56: {
            HasScepter = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCSurvivorsGameTelemetryData : pb::IMessage<CMsgClientToGCSurvivorsGameTelemetryData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCSurvivorsGameTelemetryData> _parser = new pb::MessageParser<CMsgClientToGCSurvivorsGameTelemetryData>(() => new CMsgClientToGCSurvivorsGameTelemetryData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCSurvivorsGameTelemetryData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonSurvivorsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCSurvivorsGameTelemetryData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCSurvivorsGameTelemetryData(CMsgClientToGCSurvivorsGameTelemetryData other) : this() {
      _hasBits0 = other._hasBits0;
      timeSurvived_ = other.timeSurvived_;
      playerLevel_ = other.playerLevel_;
      gameResult_ = other.gameResult_;
      goldEarned_ = other.goldEarned_;
      powerups_ = other.powerups_.Clone();
      difficulty_ = other.difficulty_;
      metaprogressionLevel_ = other.metaprogressionLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCSurvivorsGameTelemetryData Clone() {
      return new CMsgClientToGCSurvivorsGameTelemetryData(this);
    }

    /// <summary>Field number for the "time_survived" field.</summary>
    public const int TimeSurvivedFieldNumber = 1;
    private readonly static uint TimeSurvivedDefaultValue = 0;

    private uint timeSurvived_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeSurvived {
      get { if ((_hasBits0 & 1) != 0) { return timeSurvived_; } else { return TimeSurvivedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timeSurvived_ = value;
      }
    }
    /// <summary>Gets whether the "time_survived" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeSurvived {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "time_survived" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeSurvived() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_level" field.</summary>
    public const int PlayerLevelFieldNumber = 2;
    private readonly static uint PlayerLevelDefaultValue = 0;

    private uint playerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerLevel {
      get { if ((_hasBits0 & 2) != 0) { return playerLevel_; } else { return PlayerLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerLevel_ = value;
      }
    }
    /// <summary>Gets whether the "player_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "game_result" field.</summary>
    public const int GameResultFieldNumber = 3;
    private readonly static uint GameResultDefaultValue = 0;

    private uint gameResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameResult {
      get { if ((_hasBits0 & 4) != 0) { return gameResult_; } else { return GameResultDefaultValue; } }
      set {
        _hasBits0 |= 4;
        gameResult_ = value;
      }
    }
    /// <summary>Gets whether the "game_result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameResult {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "game_result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameResult() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gold_earned" field.</summary>
    public const int GoldEarnedFieldNumber = 4;
    private readonly static uint GoldEarnedDefaultValue = 0;

    private uint goldEarned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoldEarned {
      get { if ((_hasBits0 & 8) != 0) { return goldEarned_; } else { return GoldEarnedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        goldEarned_ = value;
      }
    }
    /// <summary>Gets whether the "gold_earned" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoldEarned {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gold_earned" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoldEarned() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "powerups" field.</summary>
    public const int PowerupsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsPowerUpTelemetryData> _repeated_powerups_codec
        = pb::FieldCodec.ForMessage(42, global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsPowerUpTelemetryData.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsPowerUpTelemetryData> powerups_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsPowerUpTelemetryData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsPowerUpTelemetryData> Powerups {
      get { return powerups_; }
    }

    /// <summary>Field number for the "difficulty" field.</summary>
    public const int DifficultyFieldNumber = 6;
    private readonly static uint DifficultyDefaultValue = 0;

    private uint difficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Difficulty {
      get { if ((_hasBits0 & 16) != 0) { return difficulty_; } else { return DifficultyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        difficulty_ = value;
      }
    }
    /// <summary>Gets whether the "difficulty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDifficulty {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "difficulty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDifficulty() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "metaprogression_level" field.</summary>
    public const int MetaprogressionLevelFieldNumber = 7;
    private readonly static uint MetaprogressionLevelDefaultValue = 0;

    private uint metaprogressionLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MetaprogressionLevel {
      get { if ((_hasBits0 & 32) != 0) { return metaprogressionLevel_; } else { return MetaprogressionLevelDefaultValue; } }
      set {
        _hasBits0 |= 32;
        metaprogressionLevel_ = value;
      }
    }
    /// <summary>Gets whether the "metaprogression_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMetaprogressionLevel {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "metaprogression_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMetaprogressionLevel() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCSurvivorsGameTelemetryData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCSurvivorsGameTelemetryData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeSurvived != other.TimeSurvived) return false;
      if (PlayerLevel != other.PlayerLevel) return false;
      if (GameResult != other.GameResult) return false;
      if (GoldEarned != other.GoldEarned) return false;
      if(!powerups_.Equals(other.powerups_)) return false;
      if (Difficulty != other.Difficulty) return false;
      if (MetaprogressionLevel != other.MetaprogressionLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimeSurvived) hash ^= TimeSurvived.GetHashCode();
      if (HasPlayerLevel) hash ^= PlayerLevel.GetHashCode();
      if (HasGameResult) hash ^= GameResult.GetHashCode();
      if (HasGoldEarned) hash ^= GoldEarned.GetHashCode();
      hash ^= powerups_.GetHashCode();
      if (HasDifficulty) hash ^= Difficulty.GetHashCode();
      if (HasMetaprogressionLevel) hash ^= MetaprogressionLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTimeSurvived) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeSurvived);
      }
      if (HasPlayerLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerLevel);
      }
      if (HasGameResult) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameResult);
      }
      if (HasGoldEarned) {
        output.WriteRawTag(32);
        output.WriteUInt32(GoldEarned);
      }
      powerups_.WriteTo(output, _repeated_powerups_codec);
      if (HasDifficulty) {
        output.WriteRawTag(48);
        output.WriteUInt32(Difficulty);
      }
      if (HasMetaprogressionLevel) {
        output.WriteRawTag(56);
        output.WriteUInt32(MetaprogressionLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTimeSurvived) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeSurvived);
      }
      if (HasPlayerLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerLevel);
      }
      if (HasGameResult) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameResult);
      }
      if (HasGoldEarned) {
        output.WriteRawTag(32);
        output.WriteUInt32(GoldEarned);
      }
      powerups_.WriteTo(ref output, _repeated_powerups_codec);
      if (HasDifficulty) {
        output.WriteRawTag(48);
        output.WriteUInt32(Difficulty);
      }
      if (HasMetaprogressionLevel) {
        output.WriteRawTag(56);
        output.WriteUInt32(MetaprogressionLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimeSurvived) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeSurvived);
      }
      if (HasPlayerLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerLevel);
      }
      if (HasGameResult) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameResult);
      }
      if (HasGoldEarned) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldEarned);
      }
      size += powerups_.CalculateSize(_repeated_powerups_codec);
      if (HasDifficulty) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Difficulty);
      }
      if (HasMetaprogressionLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MetaprogressionLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCSurvivorsGameTelemetryData other) {
      if (other == null) {
        return;
      }
      if (other.HasTimeSurvived) {
        TimeSurvived = other.TimeSurvived;
      }
      if (other.HasPlayerLevel) {
        PlayerLevel = other.PlayerLevel;
      }
      if (other.HasGameResult) {
        GameResult = other.GameResult;
      }
      if (other.HasGoldEarned) {
        GoldEarned = other.GoldEarned;
      }
      powerups_.Add(other.powerups_);
      if (other.HasDifficulty) {
        Difficulty = other.Difficulty;
      }
      if (other.HasMetaprogressionLevel) {
        MetaprogressionLevel = other.MetaprogressionLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimeSurvived = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            GameResult = input.ReadUInt32();
            break;
          }
          case 32: {
            GoldEarned = input.ReadUInt32();
            break;
          }
          case 42: {
            powerups_.AddEntriesFrom(input, _repeated_powerups_codec);
            break;
          }
          case 48: {
            Difficulty = input.ReadUInt32();
            break;
          }
          case 56: {
            MetaprogressionLevel = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TimeSurvived = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            GameResult = input.ReadUInt32();
            break;
          }
          case 32: {
            GoldEarned = input.ReadUInt32();
            break;
          }
          case 42: {
            powerups_.AddEntriesFrom(ref input, _repeated_powerups_codec);
            break;
          }
          case 48: {
            Difficulty = input.ReadUInt32();
            break;
          }
          case 56: {
            MetaprogressionLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCSurvivorsGameTelemetryDataResponse : pb::IMessage<CMsgClientToGCSurvivorsGameTelemetryDataResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCSurvivorsGameTelemetryDataResponse> _parser = new pb::MessageParser<CMsgClientToGCSurvivorsGameTelemetryDataResponse>(() => new CMsgClientToGCSurvivorsGameTelemetryDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCSurvivorsGameTelemetryDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonSurvivorsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCSurvivorsGameTelemetryDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCSurvivorsGameTelemetryDataResponse(CMsgClientToGCSurvivorsGameTelemetryDataResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCSurvivorsGameTelemetryDataResponse Clone() {
      return new CMsgClientToGCSurvivorsGameTelemetryDataResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryDataResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryDataResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryDataResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryDataResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCSurvivorsGameTelemetryDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCSurvivorsGameTelemetryDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCSurvivorsGameTelemetryDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryDataResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCSurvivorsGameTelemetryDataResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCSurvivorsGameTelemetryDataResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 5,
        [pbr::OriginalName("k_eInvalidItem")] KEInvalidItem = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
