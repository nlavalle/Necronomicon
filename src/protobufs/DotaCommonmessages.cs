// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_commonmessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Steam.Protos.Dota2 {

  /// <summary>Holder for reflection information generated from dota_commonmessages.proto</summary>
  public static partial class DotaCommonmessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_commonmessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaCommonmessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chlkb3RhX2NvbW1vbm1lc3NhZ2VzLnByb3RvGhZuZXR3b3JrYmFzZXR5cGVz",
            "LnByb3RvIk4KGUNET1RBTXNnX1BpbmdXYXlwb2ludFBhdGgSCQoBeBgBIAEo",
            "BRIJCgF5GAIgASgFEhsKE2dyaWRfbmF2X2RpcmVjdGlvbnMYAyABKAwi3QEK",
            "FUNET1RBTXNnX0xvY2F0aW9uUGluZxIJCgF4GAEgASgFEgkKAXkYAiABKAUS",
            "EgoGdGFyZ2V0GAMgASgFOgItMRITCgtkaXJlY3RfcGluZxgEIAEoCBIYCgR0",
            "eXBlGAUgASgNOgo0Mjk0OTY3Mjk1EjgKC3Bpbmdfc291cmNlGAYgASgOMgwu",
            "RVBpbmdTb3VyY2U6FWtfZVBpbmdTb3VyY2VfRGVmYXVsdBIxCg13YXlwb2lu",
            "dF9wYXRoGAcgASgLMhouQ0RPVEFNc2dfUGluZ1dheXBvaW50UGF0aCJHChJD",
            "RE9UQU1zZ19JdGVtQWxlcnQSCQoBeBgBIAEoBRIJCgF5GAIgASgFEhsKD2l0",
            "ZW1fYWJpbGl0eV9pZBgDIAEoBToCLTEiOQoQQ0RPVEFNc2dfTWFwTGluZRIJ",
            "CgF4GAEgASgFEgkKAXkYAiABKAUSDwoHaW5pdGlhbBgDIAEoCCJTChJDRE9U",
            "QU1zZ19Xb3JsZExpbmUSCQoBeBgBIAEoBRIJCgF5GAIgASgFEgkKAXoYAyAB",
            "KAUSDwoHaW5pdGlhbBgEIAEoCBILCgNlbmQYBSABKAgi0AEKFkNET1RBTXNn",
            "X1NlbmRTdGF0UG9wdXASOQoFc3R5bGUYASABKA4yFC5FRE9UQVN0YXRQb3B1",
            "cFR5cGVzOhRrX0VET1RBX1NQVF9UZXh0bGluZRIUCgxzdGF0X3N0cmluZ3MY",
            "AiADKAkSEwoLc3RhdF9pbWFnZXMYAyADKAUSGAoQc3RhdF9pbWFnZV90eXBl",
            "cxgEIAMoBRIQCghkdXJhdGlvbhgFIAEoAhIQCgh1c2VfaHRtbBgGIAEoCBIS",
            "Cgptb3ZpZV9uYW1lGAcgASgJIjMKHUNET1RBTXNnX0Rpc21pc3NBbGxTdGF0",
            "UG9wdXBzEhIKCnRpbWVfZGVsYXkYASABKAIiPgoVQ0RPVEFNc2dfQ29hY2hI",
            "VURQaW5nEgkKAXgYASABKA0SCQoBeRgCIAEoDRIPCgd0Z3RwYXRoGAMgASgJ",
            "ItoBChJDRE9UQU1zZ19Vbml0T3JkZXISOgoKb3JkZXJfdHlwZRgCIAEoDjIQ",
            "LmRvdGF1bml0b3JkZXJfdDoURE9UQV9VTklUX09SREVSX05PTkUSDQoFdW5p",
            "dHMYAyADKAUSFwoMdGFyZ2V0X2luZGV4GAQgASgFOgEwEhkKDWFiaWxpdHlf",
            "aW5kZXgYBSABKAU6Ai0xEh0KCHBvc2l0aW9uGAYgASgLMgsuQ01zZ1ZlY3Rv",
            "chIXCg9zZXF1ZW5jZV9udW1iZXIYCCABKAUSDQoFZmxhZ3MYCSABKA0iwQEK",
            "GFZlcnN1c1NjZW5lX1BsYXlBY3Rpdml0eRI6CgphY3Rpdml0aWVzGAEgAygL",
            "MiYuVmVyc3VzU2NlbmVfUGxheUFjdGl2aXR5LkFjdGl2aXR5SW5mbxIVCg1w",
            "bGF5YmFja19yYXRlGAIgASgCGlIKDEFjdGl2aXR5SW5mbxIQCghhY3Rpdml0",
            "eRgBIAEoCRIZChFkaXNhYmxlX2F1dG9fa2lsbBgCIAEoCBIVCg1mb3JjZV9s",
            "b29waW5nGAMgASgIIlEKFVZlcnN1c1NjZW5lX0NoYXRXaGVlbBIjCg9jaGF0",
            "X21lc3NhZ2VfaWQYASABKA06CjQyOTQ5NjcyOTUSEwoLZW1vdGljb25faWQY",
            "AiABKA0iKAoYVmVyc3VzU2NlbmVfUGxheWJhY2tSYXRlEgwKBHJhdGUYASAB",
            "KAIqdgoLRVBpbmdTb3VyY2USGQoVa19lUGluZ1NvdXJjZV9EZWZhdWx0EAAS",
            "GQoVa19lUGluZ1NvdXJjZV9XYXJuaW5nEAESFwoTa19lUGluZ1NvdXJjZV9X",
            "aGVlbBACEhgKFGtfZVBpbmdTb3VyY2VfU3lzdGVtEAMqpAEKE0VET1RBU3Rh",
            "dFBvcHVwVHlwZXMSGAoUa19FRE9UQV9TUFRfVGV4dGxpbmUQABIVChFrX0VE",
            "T1RBX1NQVF9CYXNpYxABEhQKEGtfRURPVEFfU1BUX1BvbGwQAhIUChBrX0VE",
            "T1RBX1NQVF9HcmlkEAMSGQoVa19FRE9UQV9TUFRfRHVhbEltYWdlEAQSFQoR",
            "a19FRE9UQV9TUFRfTW92aWUQBSqFDAoPZG90YXVuaXRvcmRlcl90EhgKFERP",
            "VEFfVU5JVF9PUkRFUl9OT05FEAASJAogRE9UQV9VTklUX09SREVSX01PVkVf",
            "VE9fUE9TSVRJT04QARIiCh5ET1RBX1VOSVRfT1JERVJfTU9WRV9UT19UQVJH",
            "RVQQAhIfChtET1RBX1VOSVRfT1JERVJfQVRUQUNLX01PVkUQAxIhCh1ET1RB",
            "X1VOSVRfT1JERVJfQVRUQUNLX1RBUkdFVBAEEiEKHURPVEFfVU5JVF9PUkRF",
            "Ul9DQVNUX1BPU0lUSU9OEAUSHwobRE9UQV9VTklUX09SREVSX0NBU1RfVEFS",
            "R0VUEAYSJAogRE9UQV9VTklUX09SREVSX0NBU1RfVEFSR0VUX1RSRUUQBxIi",
            "Ch5ET1RBX1VOSVRfT1JERVJfQ0FTVF9OT19UQVJHRVQQCBIfChtET1RBX1VO",
            "SVRfT1JERVJfQ0FTVF9UT0dHTEUQCRIhCh1ET1RBX1VOSVRfT1JERVJfSE9M",
            "RF9QT1NJVElPThAKEiEKHURPVEFfVU5JVF9PUkRFUl9UUkFJTl9BQklMSVRZ",
            "EAsSHQoZRE9UQV9VTklUX09SREVSX0RST1BfSVRFTRAMEh0KGURPVEFfVU5J",
            "VF9PUkRFUl9HSVZFX0lURU0QDRIfChtET1RBX1VOSVRfT1JERVJfUElDS1VQ",
            "X0lURU0QDhIfChtET1RBX1VOSVRfT1JERVJfUElDS1VQX1JVTkUQDxIhCh1E",
            "T1RBX1VOSVRfT1JERVJfUFVSQ0hBU0VfSVRFTRAQEh0KGURPVEFfVU5JVF9P",
            "UkRFUl9TRUxMX0lURU0QERIkCiBET1RBX1VOSVRfT1JERVJfRElTQVNTRU1C",
            "TEVfSVRFTRASEh0KGURPVEFfVU5JVF9PUkRFUl9NT1ZFX0lURU0QExIkCiBE",
            "T1RBX1VOSVRfT1JERVJfQ0FTVF9UT0dHTEVfQVVUTxAUEhgKFERPVEFfVU5J",
            "VF9PUkRFUl9TVE9QEBUSGQoVRE9UQV9VTklUX09SREVSX1RBVU5UEBYSGwoX",
            "RE9UQV9VTklUX09SREVSX0JVWUJBQ0sQFxIZChVET1RBX1VOSVRfT1JERVJf",
            "R0xZUEgQGBIpCiVET1RBX1VOSVRfT1JERVJfRUpFQ1RfSVRFTV9GUk9NX1NU",
            "QVNIEBkSHQoZRE9UQV9VTklUX09SREVSX0NBU1RfUlVORRAaEiAKHERPVEFf",
            "VU5JVF9PUkRFUl9QSU5HX0FCSUxJVFkQGxIlCiFET1RBX1VOSVRfT1JERVJf",
            "TU9WRV9UT19ESVJFQ1RJT04QHBIaChZET1RBX1VOSVRfT1JERVJfUEFUUk9M",
            "EB0SKgomRE9UQV9VTklUX09SREVSX1ZFQ1RPUl9UQVJHRVRfUE9TSVRJT04Q",
            "HhIZChVET1RBX1VOSVRfT1JERVJfUkFEQVIQHxIpCiVET1RBX1VOSVRfT1JE",
            "RVJfU0VUX0lURU1fQ09NQklORV9MT0NLECASHAoYRE9UQV9VTklUX09SREVS",
            "X0NPTlRJTlVFECESKgomRE9UQV9VTklUX09SREVSX1ZFQ1RPUl9UQVJHRVRf",
            "Q0FOQ0VMRUQQIhIkCiBET1RBX1VOSVRfT1JERVJfQ0FTVF9SSVZFUl9QQUlO",
            "VBAjEjIKLkRPVEFfVU5JVF9PUkRFUl9QUkVHQU1FX0FESlVTVF9JVEVNX0FT",
            "U0lHTk1FTlQQJBIpCiVET1RBX1VOSVRfT1JERVJfRFJPUF9JVEVNX0FUX0ZP",
            "VU5UQUlOECUSNQoxRE9UQV9VTklUX09SREVSX1RBS0VfSVRFTV9GUk9NX05F",
            "VVRSQUxfSVRFTV9TVEFTSBAmEiEKHURPVEFfVU5JVF9PUkRFUl9NT1ZFX1JF",
            "TEFUSVZFECcSIwofRE9UQV9VTklUX09SREVSX0NBU1RfVE9HR0xFX0FMVBAo",
            "EiAKHERPVEFfVU5JVF9PUkRFUl9DT05TVU1FX0lURU0QKRIqCiZET1RBX1VO",
            "SVRfT1JERVJfU0VUX0lURU1fTUFSS19GT1JfU0VMTBAqKo8BCh5FRE9UQVZl",
            "cnN1c1NjZW5lUGxheWVyQmVoYXZpb3ISJAogVlNfUExBWUVSX0JFSEFWSU9S",
            "X1BMQVlfQUNUSVZJVFkQARIhCh1WU19QTEFZRVJfQkVIQVZJT1JfQ0hBVF9X",
            "SEVFTBACEiQKIFZTX1BMQVlFUl9CRUhBVklPUl9QTEFZQkFDS19SQVRFEANC",
            "FaoCElN0ZWFtLlByb3Rvcy5Eb3RhMg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Steam.Protos.Dota2.NetworkbasetypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Steam.Protos.Dota2.EPingSource), typeof(global::Steam.Protos.Dota2.EDOTAStatPopupTypes), typeof(global::Steam.Protos.Dota2.dotaunitorder_t), typeof(global::Steam.Protos.Dota2.EDOTAVersusScenePlayerBehavior), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAMsg_PingWaypointPath), global::Steam.Protos.Dota2.CDOTAMsg_PingWaypointPath.Parser, new[]{ "X", "Y", "GridNavDirections" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAMsg_LocationPing), global::Steam.Protos.Dota2.CDOTAMsg_LocationPing.Parser, new[]{ "X", "Y", "Target", "DirectPing", "Type", "PingSource", "WaypointPath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAMsg_ItemAlert), global::Steam.Protos.Dota2.CDOTAMsg_ItemAlert.Parser, new[]{ "X", "Y", "ItemAbilityId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAMsg_MapLine), global::Steam.Protos.Dota2.CDOTAMsg_MapLine.Parser, new[]{ "X", "Y", "Initial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAMsg_WorldLine), global::Steam.Protos.Dota2.CDOTAMsg_WorldLine.Parser, new[]{ "X", "Y", "Z", "Initial", "End" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAMsg_SendStatPopup), global::Steam.Protos.Dota2.CDOTAMsg_SendStatPopup.Parser, new[]{ "Style", "StatStrings", "StatImages", "StatImageTypes", "Duration", "UseHtml", "MovieName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAMsg_DismissAllStatPopups), global::Steam.Protos.Dota2.CDOTAMsg_DismissAllStatPopups.Parser, new[]{ "TimeDelay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAMsg_CoachHUDPing), global::Steam.Protos.Dota2.CDOTAMsg_CoachHUDPing.Parser, new[]{ "X", "Y", "Tgtpath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAMsg_UnitOrder), global::Steam.Protos.Dota2.CDOTAMsg_UnitOrder.Parser, new[]{ "OrderType", "Units", "TargetIndex", "AbilityIndex", "Position", "SequenceNumber", "Flags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.VersusScene_PlayActivity), global::Steam.Protos.Dota2.VersusScene_PlayActivity.Parser, new[]{ "Activities", "PlaybackRate" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.VersusScene_PlayActivity.Types.ActivityInfo), global::Steam.Protos.Dota2.VersusScene_PlayActivity.Types.ActivityInfo.Parser, new[]{ "Activity", "DisableAutoKill", "ForceLooping" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.VersusScene_ChatWheel), global::Steam.Protos.Dota2.VersusScene_ChatWheel.Parser, new[]{ "ChatMessageId", "EmoticonId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.VersusScene_PlaybackRate), global::Steam.Protos.Dota2.VersusScene_PlaybackRate.Parser, new[]{ "Rate" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EPingSource {
    [pbr::OriginalName("k_ePingSource_Default")] KEPingSourceDefault = 0,
    [pbr::OriginalName("k_ePingSource_Warning")] KEPingSourceWarning = 1,
    [pbr::OriginalName("k_ePingSource_Wheel")] KEPingSourceWheel = 2,
    [pbr::OriginalName("k_ePingSource_System")] KEPingSourceSystem = 3,
  }

  public enum EDOTAStatPopupTypes {
    [pbr::OriginalName("k_EDOTA_SPT_Textline")] KEdotaSptTextline = 0,
    [pbr::OriginalName("k_EDOTA_SPT_Basic")] KEdotaSptBasic = 1,
    [pbr::OriginalName("k_EDOTA_SPT_Poll")] KEdotaSptPoll = 2,
    [pbr::OriginalName("k_EDOTA_SPT_Grid")] KEdotaSptGrid = 3,
    [pbr::OriginalName("k_EDOTA_SPT_DualImage")] KEdotaSptDualImage = 4,
    [pbr::OriginalName("k_EDOTA_SPT_Movie")] KEdotaSptMovie = 5,
  }

  public enum dotaunitorder_t {
    [pbr::OriginalName("DOTA_UNIT_ORDER_NONE")] DotaUnitOrderNone = 0,
    [pbr::OriginalName("DOTA_UNIT_ORDER_MOVE_TO_POSITION")] DotaUnitOrderMoveToPosition = 1,
    [pbr::OriginalName("DOTA_UNIT_ORDER_MOVE_TO_TARGET")] DotaUnitOrderMoveToTarget = 2,
    [pbr::OriginalName("DOTA_UNIT_ORDER_ATTACK_MOVE")] DotaUnitOrderAttackMove = 3,
    [pbr::OriginalName("DOTA_UNIT_ORDER_ATTACK_TARGET")] DotaUnitOrderAttackTarget = 4,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_POSITION")] DotaUnitOrderCastPosition = 5,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_TARGET")] DotaUnitOrderCastTarget = 6,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_TARGET_TREE")] DotaUnitOrderCastTargetTree = 7,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_NO_TARGET")] DotaUnitOrderCastNoTarget = 8,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_TOGGLE")] DotaUnitOrderCastToggle = 9,
    [pbr::OriginalName("DOTA_UNIT_ORDER_HOLD_POSITION")] DotaUnitOrderHoldPosition = 10,
    [pbr::OriginalName("DOTA_UNIT_ORDER_TRAIN_ABILITY")] RainAbility = 11,
    [pbr::OriginalName("DOTA_UNIT_ORDER_DROP_ITEM")] DotaUnitOrderDropItem = 12,
    [pbr::OriginalName("DOTA_UNIT_ORDER_GIVE_ITEM")] DotaUnitOrderGiveItem = 13,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PICKUP_ITEM")] DotaUnitOrderPickupItem = 14,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PICKUP_RUNE")] DotaUnitOrderPickupRune = 15,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PURCHASE_ITEM")] DotaUnitOrderPurchaseItem = 16,
    [pbr::OriginalName("DOTA_UNIT_ORDER_SELL_ITEM")] DotaUnitOrderSellItem = 17,
    [pbr::OriginalName("DOTA_UNIT_ORDER_DISASSEMBLE_ITEM")] DotaUnitOrderDisassembleItem = 18,
    [pbr::OriginalName("DOTA_UNIT_ORDER_MOVE_ITEM")] DotaUnitOrderMoveItem = 19,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO")] DotaUnitOrderCastToggleAuto = 20,
    [pbr::OriginalName("DOTA_UNIT_ORDER_STOP")] DotaUnitOrderStop = 21,
    [pbr::OriginalName("DOTA_UNIT_ORDER_TAUNT")] Aunt = 22,
    [pbr::OriginalName("DOTA_UNIT_ORDER_BUYBACK")] DotaUnitOrderBuyback = 23,
    [pbr::OriginalName("DOTA_UNIT_ORDER_GLYPH")] DotaUnitOrderGlyph = 24,
    [pbr::OriginalName("DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH")] DotaUnitOrderEjectItemFromStash = 25,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_RUNE")] DotaUnitOrderCastRune = 26,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PING_ABILITY")] DotaUnitOrderPingAbility = 27,
    [pbr::OriginalName("DOTA_UNIT_ORDER_MOVE_TO_DIRECTION")] DotaUnitOrderMoveToDirection = 28,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PATROL")] DotaUnitOrderPatrol = 29,
    [pbr::OriginalName("DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION")] DotaUnitOrderVectorTargetPosition = 30,
    [pbr::OriginalName("DOTA_UNIT_ORDER_RADAR")] DotaUnitOrderRadar = 31,
    [pbr::OriginalName("DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK")] DotaUnitOrderSetItemCombineLock = 32,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CONTINUE")] DotaUnitOrderContinue = 33,
    [pbr::OriginalName("DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED")] DotaUnitOrderVectorTargetCanceled = 34,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_RIVER_PAINT")] DotaUnitOrderCastRiverPaint = 35,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT")] DotaUnitOrderPregameAdjustItemAssignment = 36,
    [pbr::OriginalName("DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN")] DotaUnitOrderDropItemAtFountain = 37,
    [pbr::OriginalName("DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH")] AkeItemFromNeutralItemStash = 38,
    [pbr::OriginalName("DOTA_UNIT_ORDER_MOVE_RELATIVE")] DotaUnitOrderMoveRelative = 39,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_TOGGLE_ALT")] DotaUnitOrderCastToggleAlt = 40,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CONSUME_ITEM")] DotaUnitOrderConsumeItem = 41,
    [pbr::OriginalName("DOTA_UNIT_ORDER_SET_ITEM_MARK_FOR_SELL")] DotaUnitOrderSetItemMarkForSell = 42,
  }

  public enum EDOTAVersusScenePlayerBehavior {
    [pbr::OriginalName("VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY")] VsPlayerBehaviorPlayActivity = 1,
    [pbr::OriginalName("VS_PLAYER_BEHAVIOR_CHAT_WHEEL")] VsPlayerBehaviorChatWheel = 2,
    [pbr::OriginalName("VS_PLAYER_BEHAVIOR_PLAYBACK_RATE")] VsPlayerBehaviorPlaybackRate = 3,
  }

  #endregion

  #region Messages
  public sealed partial class CDOTAMsg_PingWaypointPath : pb::IMessage<CDOTAMsg_PingWaypointPath>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAMsg_PingWaypointPath> _parser = new pb::MessageParser<CDOTAMsg_PingWaypointPath>(() => new CDOTAMsg_PingWaypointPath());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_PingWaypointPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_PingWaypointPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_PingWaypointPath(CDOTAMsg_PingWaypointPath other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      gridNavDirections_ = other.gridNavDirections_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_PingWaypointPath Clone() {
      return new CDOTAMsg_PingWaypointPath(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "grid_nav_directions" field.</summary>
    public const int GridNavDirectionsFieldNumber = 3;
    private readonly static pb::ByteString GridNavDirectionsDefaultValue = pb::ByteString.Empty;

    private pb::ByteString gridNavDirections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GridNavDirections {
      get { return gridNavDirections_ ?? GridNavDirectionsDefaultValue; }
      set {
        gridNavDirections_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "grid_nav_directions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGridNavDirections {
      get { return gridNavDirections_ != null; }
    }
    /// <summary>Clears the value of the "grid_nav_directions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGridNavDirections() {
      gridNavDirections_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_PingWaypointPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_PingWaypointPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (GridNavDirections != other.GridNavDirections) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasGridNavDirections) hash ^= GridNavDirections.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (HasGridNavDirections) {
        output.WriteRawTag(26);
        output.WriteBytes(GridNavDirections);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (HasGridNavDirections) {
        output.WriteRawTag(26);
        output.WriteBytes(GridNavDirections);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasGridNavDirections) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GridNavDirections);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_PingWaypointPath other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasGridNavDirections) {
        GridNavDirections = other.GridNavDirections;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 26: {
            GridNavDirections = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 26: {
            GridNavDirections = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAMsg_LocationPing : pb::IMessage<CDOTAMsg_LocationPing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAMsg_LocationPing> _parser = new pb::MessageParser<CDOTAMsg_LocationPing>(() => new CDOTAMsg_LocationPing());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_LocationPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_LocationPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_LocationPing(CDOTAMsg_LocationPing other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      target_ = other.target_;
      directPing_ = other.directPing_;
      type_ = other.type_;
      pingSource_ = other.pingSource_;
      waypointPath_ = other.waypointPath_ != null ? other.waypointPath_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_LocationPing Clone() {
      return new CDOTAMsg_LocationPing(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private readonly static int TargetDefaultValue = -1;

    private int target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { if ((_hasBits0 & 4) != 0) { return target_; } else { return TargetDefaultValue; } }
      set {
        _hasBits0 |= 4;
        target_ = value;
      }
    }
    /// <summary>Gets whether the "target" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "target" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "direct_ping" field.</summary>
    public const int DirectPingFieldNumber = 4;
    private readonly static bool DirectPingDefaultValue = false;

    private bool directPing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DirectPing {
      get { if ((_hasBits0 & 8) != 0) { return directPing_; } else { return DirectPingDefaultValue; } }
      set {
        _hasBits0 |= 8;
        directPing_ = value;
      }
    }
    /// <summary>Gets whether the "direct_ping" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDirectPing {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "direct_ping" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDirectPing() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private readonly static uint TypeDefaultValue = 4294967295;

    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 16) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "ping_source" field.</summary>
    public const int PingSourceFieldNumber = 6;
    private readonly static global::Steam.Protos.Dota2.EPingSource PingSourceDefaultValue = global::Steam.Protos.Dota2.EPingSource.KEPingSourceDefault;

    private global::Steam.Protos.Dota2.EPingSource pingSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EPingSource PingSource {
      get { if ((_hasBits0 & 32) != 0) { return pingSource_; } else { return PingSourceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        pingSource_ = value;
      }
    }
    /// <summary>Gets whether the "ping_source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPingSource {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ping_source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPingSource() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "waypoint_path" field.</summary>
    public const int WaypointPathFieldNumber = 7;
    private global::Steam.Protos.Dota2.CDOTAMsg_PingWaypointPath waypointPath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAMsg_PingWaypointPath WaypointPath {
      get { return waypointPath_; }
      set {
        waypointPath_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_LocationPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_LocationPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Target != other.Target) return false;
      if (DirectPing != other.DirectPing) return false;
      if (Type != other.Type) return false;
      if (PingSource != other.PingSource) return false;
      if (!object.Equals(WaypointPath, other.WaypointPath)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasTarget) hash ^= Target.GetHashCode();
      if (HasDirectPing) hash ^= DirectPing.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasPingSource) hash ^= PingSource.GetHashCode();
      if (waypointPath_ != null) hash ^= WaypointPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (HasTarget) {
        output.WriteRawTag(24);
        output.WriteInt32(Target);
      }
      if (HasDirectPing) {
        output.WriteRawTag(32);
        output.WriteBool(DirectPing);
      }
      if (HasType) {
        output.WriteRawTag(40);
        output.WriteUInt32(Type);
      }
      if (HasPingSource) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PingSource);
      }
      if (waypointPath_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(WaypointPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (HasTarget) {
        output.WriteRawTag(24);
        output.WriteInt32(Target);
      }
      if (HasDirectPing) {
        output.WriteRawTag(32);
        output.WriteBool(DirectPing);
      }
      if (HasType) {
        output.WriteRawTag(40);
        output.WriteUInt32(Type);
      }
      if (HasPingSource) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PingSource);
      }
      if (waypointPath_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(WaypointPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (HasDirectPing) {
        size += 1 + 1;
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (HasPingSource) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PingSource);
      }
      if (waypointPath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WaypointPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_LocationPing other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasTarget) {
        Target = other.Target;
      }
      if (other.HasDirectPing) {
        DirectPing = other.DirectPing;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasPingSource) {
        PingSource = other.PingSource;
      }
      if (other.waypointPath_ != null) {
        if (waypointPath_ == null) {
          WaypointPath = new global::Steam.Protos.Dota2.CDOTAMsg_PingWaypointPath();
        }
        WaypointPath.MergeFrom(other.WaypointPath);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Target = input.ReadInt32();
            break;
          }
          case 32: {
            DirectPing = input.ReadBool();
            break;
          }
          case 40: {
            Type = input.ReadUInt32();
            break;
          }
          case 48: {
            PingSource = (global::Steam.Protos.Dota2.EPingSource) input.ReadEnum();
            break;
          }
          case 58: {
            if (waypointPath_ == null) {
              WaypointPath = new global::Steam.Protos.Dota2.CDOTAMsg_PingWaypointPath();
            }
            input.ReadMessage(WaypointPath);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Target = input.ReadInt32();
            break;
          }
          case 32: {
            DirectPing = input.ReadBool();
            break;
          }
          case 40: {
            Type = input.ReadUInt32();
            break;
          }
          case 48: {
            PingSource = (global::Steam.Protos.Dota2.EPingSource) input.ReadEnum();
            break;
          }
          case 58: {
            if (waypointPath_ == null) {
              WaypointPath = new global::Steam.Protos.Dota2.CDOTAMsg_PingWaypointPath();
            }
            input.ReadMessage(WaypointPath);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAMsg_ItemAlert : pb::IMessage<CDOTAMsg_ItemAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAMsg_ItemAlert> _parser = new pb::MessageParser<CDOTAMsg_ItemAlert>(() => new CDOTAMsg_ItemAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_ItemAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_ItemAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_ItemAlert(CDOTAMsg_ItemAlert other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      itemAbilityId_ = other.itemAbilityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_ItemAlert Clone() {
      return new CDOTAMsg_ItemAlert(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 3;
    private readonly static int ItemAbilityIdDefaultValue = -1;

    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { if ((_hasBits0 & 4) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        itemAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "item_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemAbilityId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "item_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemAbilityId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_ItemAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_ItemAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (ItemAbilityId != other.ItemAbilityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemAbilityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemAbilityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasItemAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_ItemAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasItemAbilityId) {
        ItemAbilityId = other.ItemAbilityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAMsg_MapLine : pb::IMessage<CDOTAMsg_MapLine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAMsg_MapLine> _parser = new pb::MessageParser<CDOTAMsg_MapLine>(() => new CDOTAMsg_MapLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_MapLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_MapLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_MapLine(CDOTAMsg_MapLine other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      initial_ = other.initial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_MapLine Clone() {
      return new CDOTAMsg_MapLine(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "initial" field.</summary>
    public const int InitialFieldNumber = 3;
    private readonly static bool InitialDefaultValue = false;

    private bool initial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Initial {
      get { if ((_hasBits0 & 4) != 0) { return initial_; } else { return InitialDefaultValue; } }
      set {
        _hasBits0 |= 4;
        initial_ = value;
      }
    }
    /// <summary>Gets whether the "initial" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInitial {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "initial" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInitial() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_MapLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_MapLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Initial != other.Initial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasInitial) hash ^= Initial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (HasInitial) {
        output.WriteRawTag(24);
        output.WriteBool(Initial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (HasInitial) {
        output.WriteRawTag(24);
        output.WriteBool(Initial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasInitial) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_MapLine other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasInitial) {
        Initial = other.Initial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Initial = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Initial = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAMsg_WorldLine : pb::IMessage<CDOTAMsg_WorldLine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAMsg_WorldLine> _parser = new pb::MessageParser<CDOTAMsg_WorldLine>(() => new CDOTAMsg_WorldLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_WorldLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_WorldLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_WorldLine(CDOTAMsg_WorldLine other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      initial_ = other.initial_;
      end_ = other.end_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_WorldLine Clone() {
      return new CDOTAMsg_WorldLine(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private readonly static int ZDefaultValue = 0;

    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
      set {
        _hasBits0 |= 4;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZ {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZ() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "initial" field.</summary>
    public const int InitialFieldNumber = 4;
    private readonly static bool InitialDefaultValue = false;

    private bool initial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Initial {
      get { if ((_hasBits0 & 8) != 0) { return initial_; } else { return InitialDefaultValue; } }
      set {
        _hasBits0 |= 8;
        initial_ = value;
      }
    }
    /// <summary>Gets whether the "initial" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInitial {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "initial" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInitial() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 5;
    private readonly static bool EndDefaultValue = false;

    private bool end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool End {
      get { if ((_hasBits0 & 16) != 0) { return end_; } else { return EndDefaultValue; } }
      set {
        _hasBits0 |= 16;
        end_ = value;
      }
    }
    /// <summary>Gets whether the "end" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnd {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "end" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnd() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_WorldLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_WorldLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Initial != other.Initial) return false;
      if (End != other.End) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasZ) hash ^= Z.GetHashCode();
      if (HasInitial) hash ^= Initial.GetHashCode();
      if (HasEnd) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (HasZ) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (HasInitial) {
        output.WriteRawTag(32);
        output.WriteBool(Initial);
      }
      if (HasEnd) {
        output.WriteRawTag(40);
        output.WriteBool(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (HasZ) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (HasInitial) {
        output.WriteRawTag(32);
        output.WriteBool(Initial);
      }
      if (HasEnd) {
        output.WriteRawTag(40);
        output.WriteBool(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasZ) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (HasInitial) {
        size += 1 + 1;
      }
      if (HasEnd) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_WorldLine other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      if (other.HasInitial) {
        Initial = other.Initial;
      }
      if (other.HasEnd) {
        End = other.End;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
          case 32: {
            Initial = input.ReadBool();
            break;
          }
          case 40: {
            End = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
          case 32: {
            Initial = input.ReadBool();
            break;
          }
          case 40: {
            End = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAMsg_SendStatPopup : pb::IMessage<CDOTAMsg_SendStatPopup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAMsg_SendStatPopup> _parser = new pb::MessageParser<CDOTAMsg_SendStatPopup>(() => new CDOTAMsg_SendStatPopup());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_SendStatPopup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_SendStatPopup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_SendStatPopup(CDOTAMsg_SendStatPopup other) : this() {
      _hasBits0 = other._hasBits0;
      style_ = other.style_;
      statStrings_ = other.statStrings_.Clone();
      statImages_ = other.statImages_.Clone();
      statImageTypes_ = other.statImageTypes_.Clone();
      duration_ = other.duration_;
      useHtml_ = other.useHtml_;
      movieName_ = other.movieName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_SendStatPopup Clone() {
      return new CDOTAMsg_SendStatPopup(this);
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EDOTAStatPopupTypes StyleDefaultValue = global::Steam.Protos.Dota2.EDOTAStatPopupTypes.KEdotaSptTextline;

    private global::Steam.Protos.Dota2.EDOTAStatPopupTypes style_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EDOTAStatPopupTypes Style {
      get { if ((_hasBits0 & 1) != 0) { return style_; } else { return StyleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        style_ = value;
      }
    }
    /// <summary>Gets whether the "style" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStyle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "style" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStyle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stat_strings" field.</summary>
    public const int StatStringsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_statStrings_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> statStrings_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StatStrings {
      get { return statStrings_; }
    }

    /// <summary>Field number for the "stat_images" field.</summary>
    public const int StatImagesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_statImages_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> statImages_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StatImages {
      get { return statImages_; }
    }

    /// <summary>Field number for the "stat_image_types" field.</summary>
    public const int StatImageTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_statImageTypes_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> statImageTypes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StatImageTypes {
      get { return statImageTypes_; }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 5;
    private readonly static float DurationDefaultValue = 0F;

    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { if ((_hasBits0 & 2) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "use_html" field.</summary>
    public const int UseHtmlFieldNumber = 6;
    private readonly static bool UseHtmlDefaultValue = false;

    private bool useHtml_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseHtml {
      get { if ((_hasBits0 & 4) != 0) { return useHtml_; } else { return UseHtmlDefaultValue; } }
      set {
        _hasBits0 |= 4;
        useHtml_ = value;
      }
    }
    /// <summary>Gets whether the "use_html" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseHtml {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "use_html" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseHtml() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "movie_name" field.</summary>
    public const int MovieNameFieldNumber = 7;
    private readonly static string MovieNameDefaultValue = "";

    private string movieName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MovieName {
      get { return movieName_ ?? MovieNameDefaultValue; }
      set {
        movieName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "movie_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMovieName {
      get { return movieName_ != null; }
    }
    /// <summary>Clears the value of the "movie_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMovieName() {
      movieName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_SendStatPopup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_SendStatPopup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Style != other.Style) return false;
      if(!statStrings_.Equals(other.statStrings_)) return false;
      if(!statImages_.Equals(other.statImages_)) return false;
      if(!statImageTypes_.Equals(other.statImageTypes_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (UseHtml != other.UseHtml) return false;
      if (MovieName != other.MovieName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStyle) hash ^= Style.GetHashCode();
      hash ^= statStrings_.GetHashCode();
      hash ^= statImages_.GetHashCode();
      hash ^= statImageTypes_.GetHashCode();
      if (HasDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (HasUseHtml) hash ^= UseHtml.GetHashCode();
      if (HasMovieName) hash ^= MovieName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStyle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Style);
      }
      statStrings_.WriteTo(output, _repeated_statStrings_codec);
      statImages_.WriteTo(output, _repeated_statImages_codec);
      statImageTypes_.WriteTo(output, _repeated_statImageTypes_codec);
      if (HasDuration) {
        output.WriteRawTag(45);
        output.WriteFloat(Duration);
      }
      if (HasUseHtml) {
        output.WriteRawTag(48);
        output.WriteBool(UseHtml);
      }
      if (HasMovieName) {
        output.WriteRawTag(58);
        output.WriteString(MovieName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStyle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Style);
      }
      statStrings_.WriteTo(ref output, _repeated_statStrings_codec);
      statImages_.WriteTo(ref output, _repeated_statImages_codec);
      statImageTypes_.WriteTo(ref output, _repeated_statImageTypes_codec);
      if (HasDuration) {
        output.WriteRawTag(45);
        output.WriteFloat(Duration);
      }
      if (HasUseHtml) {
        output.WriteRawTag(48);
        output.WriteBool(UseHtml);
      }
      if (HasMovieName) {
        output.WriteRawTag(58);
        output.WriteString(MovieName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStyle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Style);
      }
      size += statStrings_.CalculateSize(_repeated_statStrings_codec);
      size += statImages_.CalculateSize(_repeated_statImages_codec);
      size += statImageTypes_.CalculateSize(_repeated_statImageTypes_codec);
      if (HasDuration) {
        size += 1 + 4;
      }
      if (HasUseHtml) {
        size += 1 + 1;
      }
      if (HasMovieName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MovieName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_SendStatPopup other) {
      if (other == null) {
        return;
      }
      if (other.HasStyle) {
        Style = other.Style;
      }
      statStrings_.Add(other.statStrings_);
      statImages_.Add(other.statImages_);
      statImageTypes_.Add(other.statImageTypes_);
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasUseHtml) {
        UseHtml = other.UseHtml;
      }
      if (other.HasMovieName) {
        MovieName = other.MovieName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Style = (global::Steam.Protos.Dota2.EDOTAStatPopupTypes) input.ReadEnum();
            break;
          }
          case 18: {
            statStrings_.AddEntriesFrom(input, _repeated_statStrings_codec);
            break;
          }
          case 26:
          case 24: {
            statImages_.AddEntriesFrom(input, _repeated_statImages_codec);
            break;
          }
          case 34:
          case 32: {
            statImageTypes_.AddEntriesFrom(input, _repeated_statImageTypes_codec);
            break;
          }
          case 45: {
            Duration = input.ReadFloat();
            break;
          }
          case 48: {
            UseHtml = input.ReadBool();
            break;
          }
          case 58: {
            MovieName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Style = (global::Steam.Protos.Dota2.EDOTAStatPopupTypes) input.ReadEnum();
            break;
          }
          case 18: {
            statStrings_.AddEntriesFrom(ref input, _repeated_statStrings_codec);
            break;
          }
          case 26:
          case 24: {
            statImages_.AddEntriesFrom(ref input, _repeated_statImages_codec);
            break;
          }
          case 34:
          case 32: {
            statImageTypes_.AddEntriesFrom(ref input, _repeated_statImageTypes_codec);
            break;
          }
          case 45: {
            Duration = input.ReadFloat();
            break;
          }
          case 48: {
            UseHtml = input.ReadBool();
            break;
          }
          case 58: {
            MovieName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAMsg_DismissAllStatPopups : pb::IMessage<CDOTAMsg_DismissAllStatPopups>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAMsg_DismissAllStatPopups> _parser = new pb::MessageParser<CDOTAMsg_DismissAllStatPopups>(() => new CDOTAMsg_DismissAllStatPopups());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_DismissAllStatPopups> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_DismissAllStatPopups() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_DismissAllStatPopups(CDOTAMsg_DismissAllStatPopups other) : this() {
      _hasBits0 = other._hasBits0;
      timeDelay_ = other.timeDelay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_DismissAllStatPopups Clone() {
      return new CDOTAMsg_DismissAllStatPopups(this);
    }

    /// <summary>Field number for the "time_delay" field.</summary>
    public const int TimeDelayFieldNumber = 1;
    private readonly static float TimeDelayDefaultValue = 0F;

    private float timeDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeDelay {
      get { if ((_hasBits0 & 1) != 0) { return timeDelay_; } else { return TimeDelayDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timeDelay_ = value;
      }
    }
    /// <summary>Gets whether the "time_delay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeDelay {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "time_delay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeDelay() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_DismissAllStatPopups);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_DismissAllStatPopups other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeDelay, other.TimeDelay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimeDelay) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeDelay);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTimeDelay) {
        output.WriteRawTag(13);
        output.WriteFloat(TimeDelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTimeDelay) {
        output.WriteRawTag(13);
        output.WriteFloat(TimeDelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimeDelay) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_DismissAllStatPopups other) {
      if (other == null) {
        return;
      }
      if (other.HasTimeDelay) {
        TimeDelay = other.TimeDelay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            TimeDelay = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            TimeDelay = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAMsg_CoachHUDPing : pb::IMessage<CDOTAMsg_CoachHUDPing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAMsg_CoachHUDPing> _parser = new pb::MessageParser<CDOTAMsg_CoachHUDPing>(() => new CDOTAMsg_CoachHUDPing());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_CoachHUDPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_CoachHUDPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_CoachHUDPing(CDOTAMsg_CoachHUDPing other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      tgtpath_ = other.tgtpath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_CoachHUDPing Clone() {
      return new CDOTAMsg_CoachHUDPing(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static uint XDefaultValue = 0;

    private uint x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static uint YDefaultValue = 0;

    private uint y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "tgtpath" field.</summary>
    public const int TgtpathFieldNumber = 3;
    private readonly static string TgtpathDefaultValue = "";

    private string tgtpath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tgtpath {
      get { return tgtpath_ ?? TgtpathDefaultValue; }
      set {
        tgtpath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tgtpath" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTgtpath {
      get { return tgtpath_ != null; }
    }
    /// <summary>Clears the value of the "tgtpath" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTgtpath() {
      tgtpath_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_CoachHUDPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_CoachHUDPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Tgtpath != other.Tgtpath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasTgtpath) hash ^= Tgtpath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteUInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y);
      }
      if (HasTgtpath) {
        output.WriteRawTag(26);
        output.WriteString(Tgtpath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX) {
        output.WriteRawTag(8);
        output.WriteUInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y);
      }
      if (HasTgtpath) {
        output.WriteRawTag(26);
        output.WriteString(Tgtpath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (HasTgtpath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tgtpath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_CoachHUDPing other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasTgtpath) {
        Tgtpath = other.Tgtpath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadUInt32();
            break;
          }
          case 16: {
            Y = input.ReadUInt32();
            break;
          }
          case 26: {
            Tgtpath = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X = input.ReadUInt32();
            break;
          }
          case 16: {
            Y = input.ReadUInt32();
            break;
          }
          case 26: {
            Tgtpath = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAMsg_UnitOrder : pb::IMessage<CDOTAMsg_UnitOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAMsg_UnitOrder> _parser = new pb::MessageParser<CDOTAMsg_UnitOrder>(() => new CDOTAMsg_UnitOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_UnitOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_UnitOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_UnitOrder(CDOTAMsg_UnitOrder other) : this() {
      _hasBits0 = other._hasBits0;
      orderType_ = other.orderType_;
      units_ = other.units_.Clone();
      targetIndex_ = other.targetIndex_;
      abilityIndex_ = other.abilityIndex_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      sequenceNumber_ = other.sequenceNumber_;
      flags_ = other.flags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_UnitOrder Clone() {
      return new CDOTAMsg_UnitOrder(this);
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.dotaunitorder_t OrderTypeDefaultValue = global::Steam.Protos.Dota2.dotaunitorder_t.DotaUnitOrderNone;

    private global::Steam.Protos.Dota2.dotaunitorder_t orderType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.dotaunitorder_t OrderType {
      get { if ((_hasBits0 & 1) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        orderType_ = value;
      }
    }
    /// <summary>Gets whether the "order_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "order_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_units_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> units_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "target_index" field.</summary>
    public const int TargetIndexFieldNumber = 4;
    private readonly static int TargetIndexDefaultValue = 0;

    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { if ((_hasBits0 & 2) != 0) { return targetIndex_; } else { return TargetIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetIndex_ = value;
      }
    }
    /// <summary>Gets whether the "target_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ability_index" field.</summary>
    public const int AbilityIndexFieldNumber = 5;
    private readonly static int AbilityIndexDefaultValue = -1;

    private int abilityIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityIndex {
      get { if ((_hasBits0 & 4) != 0) { return abilityIndex_; } else { return AbilityIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        abilityIndex_ = value;
      }
    }
    /// <summary>Gets whether the "ability_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ability_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityIndex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private global::Steam.Protos.Dota2.CMsgVector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 8;
    private readonly static int SequenceNumberDefaultValue = 0;

    private int sequenceNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceNumber {
      get { if ((_hasBits0 & 8) != 0) { return sequenceNumber_; } else { return SequenceNumberDefaultValue; } }
      set {
        _hasBits0 |= 8;
        sequenceNumber_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceNumber {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "sequence_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceNumber() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 9;
    private readonly static uint FlagsDefaultValue = 0;

    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { if ((_hasBits0 & 16) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_UnitOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_UnitOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderType != other.OrderType) return false;
      if(!units_.Equals(other.units_)) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (AbilityIndex != other.AbilityIndex) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      if (Flags != other.Flags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderType) hash ^= OrderType.GetHashCode();
      hash ^= units_.GetHashCode();
      if (HasTargetIndex) hash ^= TargetIndex.GetHashCode();
      if (HasAbilityIndex) hash ^= AbilityIndex.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (HasSequenceNumber) hash ^= SequenceNumber.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrderType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) OrderType);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (HasTargetIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetIndex);
      }
      if (HasAbilityIndex) {
        output.WriteRawTag(40);
        output.WriteInt32(AbilityIndex);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      if (HasSequenceNumber) {
        output.WriteRawTag(64);
        output.WriteInt32(SequenceNumber);
      }
      if (HasFlags) {
        output.WriteRawTag(72);
        output.WriteUInt32(Flags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrderType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) OrderType);
      }
      units_.WriteTo(ref output, _repeated_units_codec);
      if (HasTargetIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetIndex);
      }
      if (HasAbilityIndex) {
        output.WriteRawTag(40);
        output.WriteInt32(AbilityIndex);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      if (HasSequenceNumber) {
        output.WriteRawTag(64);
        output.WriteInt32(SequenceNumber);
      }
      if (HasFlags) {
        output.WriteRawTag(72);
        output.WriteUInt32(Flags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      if (HasTargetIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (HasAbilityIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityIndex);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (HasSequenceNumber) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumber);
      }
      if (HasFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_UnitOrder other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderType) {
        OrderType = other.OrderType;
      }
      units_.Add(other.units_);
      if (other.HasTargetIndex) {
        TargetIndex = other.TargetIndex;
      }
      if (other.HasAbilityIndex) {
        AbilityIndex = other.AbilityIndex;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Steam.Protos.Dota2.CMsgVector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.HasSequenceNumber) {
        SequenceNumber = other.SequenceNumber;
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            OrderType = (global::Steam.Protos.Dota2.dotaunitorder_t) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 32: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 40: {
            AbilityIndex = input.ReadInt32();
            break;
          }
          case 50: {
            if (position_ == null) {
              Position = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 64: {
            SequenceNumber = input.ReadInt32();
            break;
          }
          case 72: {
            Flags = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            OrderType = (global::Steam.Protos.Dota2.dotaunitorder_t) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            units_.AddEntriesFrom(ref input, _repeated_units_codec);
            break;
          }
          case 32: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 40: {
            AbilityIndex = input.ReadInt32();
            break;
          }
          case 50: {
            if (position_ == null) {
              Position = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 64: {
            SequenceNumber = input.ReadInt32();
            break;
          }
          case 72: {
            Flags = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VersusScene_PlayActivity : pb::IMessage<VersusScene_PlayActivity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VersusScene_PlayActivity> _parser = new pb::MessageParser<VersusScene_PlayActivity>(() => new VersusScene_PlayActivity());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersusScene_PlayActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersusScene_PlayActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersusScene_PlayActivity(VersusScene_PlayActivity other) : this() {
      _hasBits0 = other._hasBits0;
      activities_ = other.activities_.Clone();
      playbackRate_ = other.playbackRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersusScene_PlayActivity Clone() {
      return new VersusScene_PlayActivity(this);
    }

    /// <summary>Field number for the "activities" field.</summary>
    public const int ActivitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.VersusScene_PlayActivity.Types.ActivityInfo> _repeated_activities_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.VersusScene_PlayActivity.Types.ActivityInfo.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.VersusScene_PlayActivity.Types.ActivityInfo> activities_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.VersusScene_PlayActivity.Types.ActivityInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.VersusScene_PlayActivity.Types.ActivityInfo> Activities {
      get { return activities_; }
    }

    /// <summary>Field number for the "playback_rate" field.</summary>
    public const int PlaybackRateFieldNumber = 2;
    private readonly static float PlaybackRateDefaultValue = 0F;

    private float playbackRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlaybackRate {
      get { if ((_hasBits0 & 1) != 0) { return playbackRate_; } else { return PlaybackRateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playbackRate_ = value;
      }
    }
    /// <summary>Gets whether the "playback_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlaybackRate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "playback_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlaybackRate() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersusScene_PlayActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersusScene_PlayActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!activities_.Equals(other.activities_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlaybackRate, other.PlaybackRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= activities_.GetHashCode();
      if (HasPlaybackRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlaybackRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      activities_.WriteTo(output, _repeated_activities_codec);
      if (HasPlaybackRate) {
        output.WriteRawTag(21);
        output.WriteFloat(PlaybackRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      activities_.WriteTo(ref output, _repeated_activities_codec);
      if (HasPlaybackRate) {
        output.WriteRawTag(21);
        output.WriteFloat(PlaybackRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activities_.CalculateSize(_repeated_activities_codec);
      if (HasPlaybackRate) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersusScene_PlayActivity other) {
      if (other == null) {
        return;
      }
      activities_.Add(other.activities_);
      if (other.HasPlaybackRate) {
        PlaybackRate = other.PlaybackRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            activities_.AddEntriesFrom(input, _repeated_activities_codec);
            break;
          }
          case 21: {
            PlaybackRate = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            activities_.AddEntriesFrom(ref input, _repeated_activities_codec);
            break;
          }
          case 21: {
            PlaybackRate = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the VersusScene_PlayActivity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ActivityInfo : pb::IMessage<ActivityInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ActivityInfo> _parser = new pb::MessageParser<ActivityInfo>(() => new ActivityInfo());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActivityInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.VersusScene_PlayActivity.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActivityInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActivityInfo(ActivityInfo other) : this() {
          _hasBits0 = other._hasBits0;
          activity_ = other.activity_;
          disableAutoKill_ = other.disableAutoKill_;
          forceLooping_ = other.forceLooping_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActivityInfo Clone() {
          return new ActivityInfo(this);
        }

        /// <summary>Field number for the "activity" field.</summary>
        public const int ActivityFieldNumber = 1;
        private readonly static string ActivityDefaultValue = "";

        private string activity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Activity {
          get { return activity_ ?? ActivityDefaultValue; }
          set {
            activity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "activity" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActivity {
          get { return activity_ != null; }
        }
        /// <summary>Clears the value of the "activity" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActivity() {
          activity_ = null;
        }

        /// <summary>Field number for the "disable_auto_kill" field.</summary>
        public const int DisableAutoKillFieldNumber = 2;
        private readonly static bool DisableAutoKillDefaultValue = false;

        private bool disableAutoKill_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DisableAutoKill {
          get { if ((_hasBits0 & 1) != 0) { return disableAutoKill_; } else { return DisableAutoKillDefaultValue; } }
          set {
            _hasBits0 |= 1;
            disableAutoKill_ = value;
          }
        }
        /// <summary>Gets whether the "disable_auto_kill" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDisableAutoKill {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "disable_auto_kill" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDisableAutoKill() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "force_looping" field.</summary>
        public const int ForceLoopingFieldNumber = 3;
        private readonly static bool ForceLoopingDefaultValue = false;

        private bool forceLooping_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ForceLooping {
          get { if ((_hasBits0 & 2) != 0) { return forceLooping_; } else { return ForceLoopingDefaultValue; } }
          set {
            _hasBits0 |= 2;
            forceLooping_ = value;
          }
        }
        /// <summary>Gets whether the "force_looping" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasForceLooping {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "force_looping" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearForceLooping() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ActivityInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActivityInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Activity != other.Activity) return false;
          if (DisableAutoKill != other.DisableAutoKill) return false;
          if (ForceLooping != other.ForceLooping) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasActivity) hash ^= Activity.GetHashCode();
          if (HasDisableAutoKill) hash ^= DisableAutoKill.GetHashCode();
          if (HasForceLooping) hash ^= ForceLooping.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasActivity) {
            output.WriteRawTag(10);
            output.WriteString(Activity);
          }
          if (HasDisableAutoKill) {
            output.WriteRawTag(16);
            output.WriteBool(DisableAutoKill);
          }
          if (HasForceLooping) {
            output.WriteRawTag(24);
            output.WriteBool(ForceLooping);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasActivity) {
            output.WriteRawTag(10);
            output.WriteString(Activity);
          }
          if (HasDisableAutoKill) {
            output.WriteRawTag(16);
            output.WriteBool(DisableAutoKill);
          }
          if (HasForceLooping) {
            output.WriteRawTag(24);
            output.WriteBool(ForceLooping);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasActivity) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Activity);
          }
          if (HasDisableAutoKill) {
            size += 1 + 1;
          }
          if (HasForceLooping) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActivityInfo other) {
          if (other == null) {
            return;
          }
          if (other.HasActivity) {
            Activity = other.Activity;
          }
          if (other.HasDisableAutoKill) {
            DisableAutoKill = other.DisableAutoKill;
          }
          if (other.HasForceLooping) {
            ForceLooping = other.ForceLooping;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Activity = input.ReadString();
                break;
              }
              case 16: {
                DisableAutoKill = input.ReadBool();
                break;
              }
              case 24: {
                ForceLooping = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Activity = input.ReadString();
                break;
              }
              case 16: {
                DisableAutoKill = input.ReadBool();
                break;
              }
              case 24: {
                ForceLooping = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class VersusScene_ChatWheel : pb::IMessage<VersusScene_ChatWheel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VersusScene_ChatWheel> _parser = new pb::MessageParser<VersusScene_ChatWheel>(() => new VersusScene_ChatWheel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersusScene_ChatWheel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersusScene_ChatWheel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersusScene_ChatWheel(VersusScene_ChatWheel other) : this() {
      _hasBits0 = other._hasBits0;
      chatMessageId_ = other.chatMessageId_;
      emoticonId_ = other.emoticonId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersusScene_ChatWheel Clone() {
      return new VersusScene_ChatWheel(this);
    }

    /// <summary>Field number for the "chat_message_id" field.</summary>
    public const int ChatMessageIdFieldNumber = 1;
    private readonly static uint ChatMessageIdDefaultValue = 4294967295;

    private uint chatMessageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatMessageId {
      get { if ((_hasBits0 & 1) != 0) { return chatMessageId_; } else { return ChatMessageIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chatMessageId_ = value;
      }
    }
    /// <summary>Gets whether the "chat_message_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChatMessageId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chat_message_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChatMessageId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "emoticon_id" field.</summary>
    public const int EmoticonIdFieldNumber = 2;
    private readonly static uint EmoticonIdDefaultValue = 0;

    private uint emoticonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EmoticonId {
      get { if ((_hasBits0 & 2) != 0) { return emoticonId_; } else { return EmoticonIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        emoticonId_ = value;
      }
    }
    /// <summary>Gets whether the "emoticon_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEmoticonId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "emoticon_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEmoticonId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersusScene_ChatWheel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersusScene_ChatWheel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatMessageId != other.ChatMessageId) return false;
      if (EmoticonId != other.EmoticonId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChatMessageId) hash ^= ChatMessageId.GetHashCode();
      if (HasEmoticonId) hash ^= EmoticonId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChatMessageId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChatMessageId);
      }
      if (HasEmoticonId) {
        output.WriteRawTag(16);
        output.WriteUInt32(EmoticonId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChatMessageId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChatMessageId);
      }
      if (HasEmoticonId) {
        output.WriteRawTag(16);
        output.WriteUInt32(EmoticonId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChatMessageId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatMessageId);
      }
      if (HasEmoticonId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EmoticonId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersusScene_ChatWheel other) {
      if (other == null) {
        return;
      }
      if (other.HasChatMessageId) {
        ChatMessageId = other.ChatMessageId;
      }
      if (other.HasEmoticonId) {
        EmoticonId = other.EmoticonId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChatMessageId = input.ReadUInt32();
            break;
          }
          case 16: {
            EmoticonId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChatMessageId = input.ReadUInt32();
            break;
          }
          case 16: {
            EmoticonId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VersusScene_PlaybackRate : pb::IMessage<VersusScene_PlaybackRate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VersusScene_PlaybackRate> _parser = new pb::MessageParser<VersusScene_PlaybackRate>(() => new VersusScene_PlaybackRate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersusScene_PlaybackRate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersusScene_PlaybackRate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersusScene_PlaybackRate(VersusScene_PlaybackRate other) : this() {
      _hasBits0 = other._hasBits0;
      rate_ = other.rate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersusScene_PlaybackRate Clone() {
      return new VersusScene_PlaybackRate(this);
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private readonly static float RateDefaultValue = 0F;

    private float rate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rate {
      get { if ((_hasBits0 & 1) != 0) { return rate_; } else { return RateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        rate_ = value;
      }
    }
    /// <summary>Gets whether the "rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRate() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersusScene_PlaybackRate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersusScene_PlaybackRate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRate) {
        output.WriteRawTag(13);
        output.WriteFloat(Rate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRate) {
        output.WriteRawTag(13);
        output.WriteFloat(Rate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRate) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersusScene_PlaybackRate other) {
      if (other == null) {
        return;
      }
      if (other.HasRate) {
        Rate = other.Rate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Rate = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Rate = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
