// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_gcmessages_common_match_management.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Steam.Protos.Dota2 {

  /// <summary>Holder for reflection information generated from dota_gcmessages_common_match_management.proto</summary>
  public static partial class DotaGcmessagesCommonMatchManagementReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_gcmessages_common_match_management.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaGcmessagesCommonMatchManagementReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1kb3RhX2djbWVzc2FnZXNfY29tbW9uX21hdGNoX21hbmFnZW1lbnQucHJv",
            "dG8aE3N0ZWFtbWVzc2FnZXMucHJvdG8aFmdjc2RrX2djbWVzc2FnZXMucHJv",
            "dG8aF2RvdGFfc2hhcmVkX2VudW1zLnByb3RvIrcDChJDU09ET1RBUGFydHlN",
            "ZW1iZXISEAoIaXNfY29hY2gYAiABKAgSHQoRcmVnaW9uX3BpbmdfY29kZXMY",
            "BCADKA1CAhABEh0KEXJlZ2lvbl9waW5nX3RpbWVzGAUgAygNQgIQARIiChpy",
            "ZWdpb25fcGluZ19mYWlsZWRfYml0bWFzaxgGIAEoDRIaChJpc19wbHVzX3N1",
            "YnNjcmliZXIYCiABKAgSGwoTdG91cm5leV9za2lsbF9sZXZlbBgHIAEoDRIV",
            "Cg10b3VybmV5X2J1eWluGAggASgNEh0KFXRvdXJuZXlfcHJldmVudF91bnRp",
            "bBgJIAEoDRIVCg1tbV9kYXRhX3ZhbGlkGA0gASgIEhwKFGxhbmVfc2VsZWN0",
            "aW9uX2ZsYWdzGAsgASgNEh4KFmhpZ2hfcHJpb3JpdHlfZGlzYWJsZWQYDiAB",
            "KAgSFwoPaGFzX2hwX3Jlc291cmNlGA8gASgIEh8KF2pvaW5lZF9mcm9tX3Bh",
            "cnR5ZmluZGVyGAwgASgIEhYKDmlzX3N0ZWFtX2NoaW5hGBAgASgIEhcKD2Jh",
            "bm5lZF9oZXJvX2lkcxgRIAMoBSKMDwoMQ1NPRE9UQVBhcnR5EhYKCHBhcnR5",
            "X2lkGAEgASgEQgSAph0BEhEKCWxlYWRlcl9pZBgCIAEoBhISCgptZW1iZXJf",
            "aWRzGAMgAygGEhIKCmdhbWVfbW9kZXMYBCABKA0SJgoFc3RhdGUYBiABKA4y",
            "Ey5DU09ET1RBUGFydHkuU3RhdGU6AlVJEioKImVmZmVjdGl2ZV9zdGFydGVk",
            "X21hdGNobWFraW5nX3RpbWUYByABKA0SJAoccmF3X3N0YXJ0ZWRfbWF0Y2ht",
            "YWtpbmdfdGltZRggIAEoDRIaChJhdHRlbXB0X3N0YXJ0X3RpbWUYISABKA0S",
            "EwoLYXR0ZW1wdF9udW0YIiABKA0SEwoLbWF0Y2hncm91cHMYCyABKA0SHwoX",
            "bG93X3ByaW9yaXR5X2FjY291bnRfaWQYEyABKA0SMQoKbWF0Y2hfdHlwZRgV",
            "IAEoDjIKLk1hdGNoVHlwZToRTUFUQ0hfVFlQRV9DQVNVQUwSDwoHdGVhbV9p",
            "ZBgXIAEoDRIRCgl0ZWFtX25hbWUYMyABKAkSFAoMdGVhbV91aV9sb2dvGDQg",
            "ASgEEhYKDnRlYW1fYmFzZV9sb2dvGDUgASgEEiEKGW1hdGNoX2Rpc2FibGVk",
            "X3VudGlsX2RhdGUYGCABKA0SIQoZbWF0Y2hfZGlzYWJsZWRfYWNjb3VudF9p",
            "ZBgZIAEoDRIlCh1tYXRjaG1ha2luZ19tYXhfcmFuZ2VfbWludXRlcxgaIAEo",
            "DRIWCg5tYXRjaGxhbmd1YWdlcxgbIAEoDRIkCgdtZW1iZXJzGB0gAygLMhMu",
            "Q1NPRE9UQVBhcnR5TWVtYmVyEiQKHGxvd19wcmlvcml0eV9nYW1lc19yZW1h",
            "aW5pbmcYIyABKA0SHgoWb3Blbl9mb3Jfam9pbl9yZXF1ZXN0cxgoIAEoCBIp",
            "CgxzZW50X2ludml0ZXMYKSADKAsyEy5DU09ET1RBUGFydHlJbnZpdGUSKQoM",
            "cmVjdl9pbnZpdGVzGCogAygLMhMuQ1NPRE9UQVBhcnR5SW52aXRlEhUKDWFj",
            "Y291bnRfZmxhZ3MYKyABKA0SGwoTcmVnaW9uX3NlbGVjdF9mbGFncxgsIAEo",
            "DRIfChdleGNsdXNpdmVfdG91cm5hbWVudF9pZBgtIAEoDRIbChN0b3VybmV5",
            "X2RpdmlzaW9uX2lkGC8gASgNEh0KFXRvdXJuZXlfc2NoZWR1bGVfdGltZRgw",
            "IAEoDRIbChN0b3VybmV5X3NraWxsX2xldmVsGDEgASgNEh0KFXRvdXJuZXlf",
            "YnJhY2tldF9yb3VuZBgyIAEoDRIjCht0b3VybmV5X3F1ZXVlX2RlYWRsaW5l",
            "X3RpbWUYNiABKA0SZgocdG91cm5leV9xdWV1ZV9kZWFkbGluZV9zdGF0ZRg3",
            "IAEoDjIbLkVUb3VybmV5UXVldWVEZWFkbGluZVN0YXRlOiNrX0VUb3VybmV5",
            "UXVldWVEZWFkbGluZVN0YXRlX05vcm1hbBIjChtwYXJ0eV9idWlsZGVyX3Ns",
            "b3RzX3RvX2ZpbGwYOCABKA0SIgoacGFydHlfYnVpbGRlcl9tYXRjaF9ncm91",
            "cHMYOSABKA0SIAoYcGFydHlfYnVpbGRlcl9zdGFydF90aW1lGDogASgNEhIK",
            "CnNvbG9fcXVldWUYOyABKAgSHQoVc3RlYW1fY2xhbl9hY2NvdW50X2lkGD0g",
            "ASgNEioKC3JlYWR5X2NoZWNrGD4gASgLMhUuQ01zZ1JlYWR5Q2hlY2tTdGF0",
            "dXMSJwofY3VzdG9tX2dhbWVfZGlzYWJsZWRfdW50aWxfZGF0ZRg/IAEoDRIn",
            "Ch9jdXN0b21fZ2FtZV9kaXNhYmxlZF9hY2NvdW50X2lkGEAgASgNEhoKEmlz",
            "X2NoYWxsZW5nZV9tYXRjaBhBIAEoCBIiChpwYXJ0eV9zZWFyY2hfYmVhY29u",
            "X2FjdGl2ZRhCIAEoCBIZChFtYXRjaG1ha2luZ19mbGFncxhDIAEoDRJNChNo",
            "aWdoX3ByaW9yaXR5X3N0YXRlGEQgASgOMhUuRUhpZ2hQcmlvcml0eU1NU3Rh",
            "dGU6GWtfRUhpZ2hQcmlvcml0eU1NX1Vua25vd24SHwoXbGFuZV9zZWxlY3Rp",
            "b25zX2VuYWJsZWQYRSABKAgSIwobY3VzdG9tX2dhbWVfZGlmZmljdWx0eV9t",
            "YXNrGEYgASgNEhYKDmlzX3N0ZWFtX2NoaW5hGEcgASgIEhsKE2JvdF9kaWZm",
            "aWN1bHR5X21hc2sYSCABKA0SHQoVYm90X3NjcmlwdF9pbmRleF9tYXNrGEkg",
            "ASgNEh4KFnJlc3RyaWN0ZWRfZnJvbV9yYW5rZWQYSiABKAgSKQohcmVzdHJp",
            "Y3RlZF9mcm9tX3JhbmtlZF9hY2NvdW50X2lkGEsgASgNEiAKGHJhbmtfc3By",
            "ZWFkX2xpa2VydF9zY2FsZRhMIAEoDRIjChtiZWhhdmlvcl9zY29yZV9saWtl",
            "cnRfc2NhbGUYTSABKA0iMAoFU3RhdGUSBgoCVUkQABIRCg1GSU5ESU5HX01B",
            "VENIEAESDAoISU5fTUFUQ0gQAiKbAgoSQ1NPRE9UQVBhcnR5SW52aXRlEhYK",
            "CGdyb3VwX2lkGAEgASgEQgSAph0BEhEKCXNlbmRlcl9pZBgCIAEoBhITCgtz",
            "ZW5kZXJfbmFtZRgDIAEoCRIwCgdtZW1iZXJzGAQgAygLMh8uQ1NPRE9UQVBh",
            "cnR5SW52aXRlLlBhcnR5TWVtYmVyEg8KB3RlYW1faWQYBSABKA0SGwoTbG93",
            "X3ByaW9yaXR5X3N0YXR1cxgGIAEoCBIQCghhc19jb2FjaBgHIAEoCBISCgpp",
            "bnZpdGVfZ2lkGAggASgGGj8KC1BhcnR5TWVtYmVyEgwKBG5hbWUYASABKAkS",
            "EAoIc3RlYW1faWQYAiABKAYSEAoIaXNfY29hY2gYBCABKAgi1QEKD0NNc2dM",
            "ZWF2ZXJTdGF0ZRITCgtsb2JieV9zdGF0ZRgBIAEoDRI+CgpnYW1lX3N0YXRl",
            "GAIgASgOMg8uRE9UQV9HYW1lU3RhdGU6GURPVEFfR0FNRVJVTEVTX1NUQVRF",
            "X0lOSVQSFwoPbGVhdmVyX2RldGVjdGVkGAMgASgIEhwKFGZpcnN0X2Jsb29k",
            "X2hhcHBlbmVkGAQgASgIEh0KFWRpc2NhcmRfbWF0Y2hfcmVzdWx0cxgFIAEo",
            "CBIXCg9tYXNzX2Rpc2Nvbm5lY3QYBiABKAgiiwIKFENNc2dSZWFkeUNoZWNr",
            "U3RhdHVzEhcKD3N0YXJ0X3RpbWVzdGFtcBgBIAEoDRIYChBmaW5pc2hfdGlt",
            "ZXN0YW1wGAIgASgNEhwKFGluaXRpYXRvcl9hY2NvdW50X2lkGAMgASgNEjgK",
            "DXJlYWR5X21lbWJlcnMYBCADKAsyIS5DTXNnUmVhZHlDaGVja1N0YXR1cy5S",
            "ZWFkeU1lbWJlchpoCgtSZWFkeU1lbWJlchISCgphY2NvdW50X2lkGAEgASgN",
            "EkUKDHJlYWR5X3N0YXR1cxgCIAEoDjISLkVSZWFkeUNoZWNrU3RhdHVzOhtr",
            "X0VSZWFkeUNoZWNrU3RhdHVzX1Vua25vd24iHAoaQ01zZ1BhcnR5UmVhZHlD",
            "aGVja1JlcXVlc3QibAobQ01zZ1BhcnR5UmVhZHlDaGVja1Jlc3BvbnNlEk0K",
            "BnJlc3VsdBgBIAEoDjIZLkVSZWFkeUNoZWNrUmVxdWVzdFJlc3VsdDoia19F",
            "UmVhZHlDaGVja1JlcXVlc3RSZXN1bHRfU3VjY2VzcyJnCh5DTXNnUGFydHlS",
            "ZWFkeUNoZWNrQWNrbm93bGVkZ2USRQoMcmVhZHlfc3RhdHVzGAEgASgOMhIu",
            "RVJlYWR5Q2hlY2tTdGF0dXM6G2tfRVJlYWR5Q2hlY2tTdGF0dXNfVW5rbm93",
            "biIsChlDTXNnTG9iYnlFdmVudEdhbWVEZXRhaWxzEg8KB2t2X2RhdGEYASAB",
            "KAwiuQEKGUNNc2dNYXRjaE1hdGNobWFraW5nU3RhdHMSGgoSYXZlcmFnZV9x",
            "dWV1ZV90aW1lGAEgASgNEhoKEm1heGltdW1fcXVldWVfdGltZRgCIAEoDRJk",
            "ChdiZWhhdmlvcl9zY29yZV92YXJpYW5jZRgDIAEoDjIcLkVNYXRjaEJlaGF2",
            "aW9yU2NvcmVWYXJpYW5jZTola19FTWF0Y2hCZWhhdmlvclNjb3JlVmFyaWFu",
            "Y2VfSW52YWxpZCLbbgoIQ012cERhdGESIAoEbXZwcxgBIAMoCzISLkNNdnBE",
            "YXRhLk12cERhdHVtEiYKCmV2ZW50X212cHMYAiADKAsyEi5DTXZwRGF0YS5N",
            "dnBEYXR1bRqEbgoITXZwRGF0dW0SEwoLcGxheWVyX3Nsb3QYASABKA0SMQoJ",
            "YWNjb2xhZGVzGAIgAygLMh4uQ012cERhdGEuTXZwRGF0dW0uTXZwQWNjb2xh",
            "ZGUar20KC012cEFjY29sYWRlEkMKBHR5cGUYASABKA4yLi5DTXZwRGF0YS5N",
            "dnBEYXR1bS5NdnBBY2NvbGFkZS5NdnBBY2NvbGFkZVR5cGU6BWtpbGxzEhQK",
            "DGRldGFpbF92YWx1ZRgCIAEoAiLEbAoPTXZwQWNjb2xhZGVUeXBlEgkKBWtp",
            "bGxzEAESCgoGZGVhdGhzEAISCwoHYXNzaXN0cxADEg0KCW5ldF93b3J0aBAF",
            "Eg4KCml0ZW1fdmFsdWUQBhIWChJzdXBwb3J0X2dvbGRfc3BlbnQQBxIQCgx3",
            "YXJkc19wbGFjZWQQCBILCgdkZXdhcmRzEAkSEQoNY2FtcHNfc3RhY2tlZBAK",
            "Eg0KCWxhc3RfaGl0cxALEgoKBmRlbmllcxAMEiIKHmtLaWxsRWF0ZXJFdmVu",
            "dF9LaWxsaW5nX1NwcmVlcxANEhsKF2tLaWxsRWF0ZXJFdmVudF9Hb2RsaWtl",
            "EA4SJAoga0tpbGxFYXRlckV2ZW50X1Rvd2Vyc19EZXN0cm95ZWQQDxIuCipr",
            "S2lsbEVhdGVyRXZlbnRUeXBlX0ludm9rZXJfU3Vuc3RyaWtlS2lsbHMQEBIh",
            "Ch1rS2lsbEVhdGVyRXZlbnRUeXBlX0F4ZV9DdWxscxAREi0KKWtLaWxsRWF0",
            "ZXJFdmVudFR5cGVfQXhlX0JhdHRsZUh1bmdlcktpbGxzEBISJgoia0tpbGxF",
            "YXRlckV2ZW50VHlwZV9Mb3dIZWFsdGhLaWxscxATEiwKKGtLaWxsRWF0ZXJF",
            "dmVudFR5cGVfSW52b2tlcl9Ub3JuYWRvS2lsbHMQFBIoCiRrS2lsbEVhdGVy",
            "RXZlbnRUeXBlX1N2ZW5fRG91YmxlU3R1bnMQFRIqCiZrS2lsbEVhdGVyRXZl",
            "bnRUeXBlX1N2ZW5fV2FyY3J5QXNzaXN0cxAWEi4KKmtLaWxsRWF0ZXJFdmVu",
            "dFR5cGVfU3Zlbl9DbGVhdmVEb3VibGVLaWxscxAXEi8KK2tLaWxsRWF0ZXJF",
            "dmVudFR5cGVfU3Zlbl9UZWxlcG9ydEludGVycnVwdHMQGBIsCihrS2lsbEVh",
            "dGVyRXZlbnRUeXBlX0ZhY2VsZXNzX011bHRpQ2hyb25vEBkSLAooa0tpbGxF",
            "YXRlckV2ZW50VHlwZV9GYWNlbGVzc19DaHJvbm9LaWxscxAaEigKJGtLaWxs",
            "RWF0ZXJFdmVudFR5cGVfVXJzYV9NdWx0aVNob2NrcxAbEiMKH2tLaWxsRWF0",
            "ZXJFdmVudFR5cGVfUm9zaGFuS2lsbHMQHBIoCiRrS2lsbEVhdGVyRXZlbnRU",
            "eXBlX0xpb25fRmluZ2VyS2lsbHMQHRIsCihrS2lsbEVhdGVyRXZlbnRUeXBl",
            "X1Jpa2lfU21va2VkSGVyb0tpbGxzECASLgoqa0tpbGxFYXRlckV2ZW50VHlw",
            "ZV9IZXJvZXNSZXZlYWxlZFdpdGhEdXN0ECESNwoza0tpbGxFYXRlckV2ZW50",
            "VHlwZV9Ta2VsZXRvbktpbmdfUmVpbmNhcm5hdGlvbktpbGxzECISKwona0tp",
            "bGxFYXRlckV2ZW50VHlwZV9Ta3l3cmF0aF9GbGFyZUtpbGxzECMSLwora0tp",
            "bGxFYXRlckV2ZW50VHlwZV9MZXNocmFjX1NwbGl0RWFydGhTdHVucxAkEiwK",
            "KGtLaWxsRWF0ZXJFdmVudFR5cGVfTWlyYW5hX01heFN0dW5BcnJvd3MQJRI4",
            "CjRrS2lsbEVhdGVyRXZlbnRUeXBlX1BoYW50b21Bc3Nhc3Npbl9Db3VwZGVH",
            "cmFjZUNyaXRzECYSMwova0tpbGxFYXRlckV2ZW50VHlwZV9QaGFudG9tQXNz",
            "YXNzaW5fRGFnZ2VyQ3JpdHMQJxIoCiRrS2lsbEVhdGVyRXZlbnRUeXBlX01l",
            "ZXBvX0VhcnRoYmluZHMQKBIwCixrS2lsbEVhdGVyRXZlbnRUeXBlX0Jsb29k",
            "c2Vla2VyX1J1cHR1cmVLaWxscxApEiwKKGtLaWxsRWF0ZXJFdmVudFR5cGVf",
            "U2xhcmtfTGVhc2hlZEVuZW1pZXMQKhIyCi5rS2lsbEVhdGVyRXZlbnRUeXBl",
            "X0Rpc3J1cHRvcl9Gb3VudGFpbkdsaW1wc2VzECsSKwona0tpbGxFYXRlckV2",
            "ZW50VHlwZV9SdWJpY2tfU3BlbGxzU3RvbGVuECwSLgoqa0tpbGxFYXRlckV2",
            "ZW50VHlwZV9SdWJpY2tfVWx0aW1hdGVzU3RvbGVuEC0SKgoma0tpbGxFYXRl",
            "ckV2ZW50VHlwZV9Eb29tX0VuZW1pZXNEb29tZWQQLhIwCixrS2lsbEVhdGVy",
            "RXZlbnRUeXBlX09tbmlrbmlnaHRfUHVyaWZpY2F0aW9ucxAvEjEKLWtLaWxs",
            "RWF0ZXJFdmVudFR5cGVfT21uaWtuaWdodF9BbGxpZXNSZXBlbGxlZBAwEjIK",
            "LmtLaWxsRWF0ZXJFdmVudFR5cGVfT21uaWtuaWdodF9FbmVtaWVzUmVwZWxs",
            "ZWQQMRIyCi5rS2lsbEVhdGVyRXZlbnRUeXBlX1dhcmxvY2tfRml2ZUhlcm9G",
            "YXRhbEJvbmRzEDISOAo0a0tpbGxFYXRlckV2ZW50VHlwZV9DcnlzdGFsTWFp",
            "ZGVuX0Zyb3N0Yml0dGVuRW5lbWllcxAzEjIKLmtLaWxsRWF0ZXJFdmVudFR5",
            "cGVfQ3J5c3RhbE1haWRlbl9DcnlzdGFsTm92YXMQNBIxCi1rS2lsbEVhdGVy",
            "RXZlbnRUeXBlX0t1bmtrYV9Eb3VibGVIZXJvVG9ycmVudHMQNRIzCi9rS2ls",
            "bEVhdGVyRXZlbnRUeXBlX0t1bmtrYV9UcmlwbGVIZXJvR2hvc3RTaGlwcxA2",
            "EjEKLWtLaWxsRWF0ZXJFdmVudFR5cGVfTmFnYVNpcmVuX0VuZW1pZXNFbnNu",
            "YXJlZBA3EjQKMGtLaWxsRWF0ZXJFdmVudFR5cGVfTmFnYVNpcmVuX1RyaXBs",
            "ZUhlcm9SaXBUaWRlcxA4EjMKL2tLaWxsRWF0ZXJFdmVudFR5cGVfTHljYW5f",
            "S2lsbHNEdXJpbmdTaGFwZXNoaWZ0EDkSLAooa0tpbGxFYXRlckV2ZW50VHlw",
            "ZV9QdWRnZV9EaXNtZW1iZXJLaWxscxA6Ei8KK2tLaWxsRWF0ZXJFdmVudFR5",
            "cGVfUHVkZ2VfRW5lbXlIZXJvZXNIb29rZWQQOxInCiNrS2lsbEVhdGVyRXZl",
            "bnRUeXBlX1B1ZGdlX0hvb2tLaWxscxA8EjUKMWtLaWxsRWF0ZXJFdmVudFR5",
            "cGVfUHVkZ2VfVW5zZWVuRW5lbXlIZXJvZXNIb29rZWQQPRIyCi5rS2lsbEVh",
            "dGVyRXZlbnRUeXBlX0Ryb3dSYW5nZXJfRW5lbWllc1NpbGVuY2VkED4SNAow",
            "a0tpbGxFYXRlckV2ZW50VHlwZV9Ecm93UmFuZ2VyX011bHRpSGVyb1NpbGVu",
            "Y2VzED8SMAosa0tpbGxFYXRlckV2ZW50VHlwZV9Ecm93UmFuZ2VyX1NpbGVu",
            "Y2VkS2lsbHMQQBIyCi5rS2lsbEVhdGVyRXZlbnRUeXBlX0Ryb3dSYW5nZXJf",
            "RnJvc3RBcnJvd0tpbGxzEEESNgoya0tpbGxFYXRlckV2ZW50VHlwZV9EcmFn",
            "b25LbmlnaHRfS2lsbHNJbkRyYWdvbkZvcm0QQhI1CjFrS2lsbEVhdGVyRXZl",
            "bnRUeXBlX0RyYWdvbktuaWdodF9CcmVhdGhlRmlyZUtpbGxzEEMSMAosa0tp",
            "bGxFYXRlckV2ZW50VHlwZV9EcmFnb25LbmlnaHRfU3BsYXNoS2lsbHMQRBIt",
            "CilrS2lsbEVhdGVyRXZlbnRUeXBlX1dpdGNoRG9jdG9yX0Nhc2tTdHVucxBF",
            "EjEKLWtLaWxsRWF0ZXJFdmVudFR5cGVfV2l0Y2hEb2N0b3JfTWFsZWRpY3RL",
            "aWxscxBGEjYKMmtLaWxsRWF0ZXJFdmVudFR5cGVfV2l0Y2hEb2N0b3JfTXVs",
            "dGlIZXJvTWFsZWRpY3RzEEcSMgoua0tpbGxFYXRlckV2ZW50VHlwZV9XaXRj",
            "aERvY3Rvcl9EZWF0aFdhcmRLaWxscxBIEjQKMGtLaWxsRWF0ZXJFdmVudFR5",
            "cGVfRGlzcnVwdG9yX1RodW5kZXJTdHJpa2VLaWxscxBJEjAKLGtLaWxsRWF0",
            "ZXJFdmVudFR5cGVfRGlzcnVwdG9yX0hlcm9lc0dsaW1wc2VkEEoSOAo0a0tp",
            "bGxFYXRlckV2ZW50VHlwZV9DcnlzdGFsTWFpZGVuX0ZyZWV6aW5nRmllbGRL",
            "aWxscxBLEi8KK2tLaWxsRWF0ZXJFdmVudFR5cGVfTWVkdXNhX0VuZW1pZXNQ",
            "ZXRyaWZpZWQQTRIvCitrS2lsbEVhdGVyRXZlbnRUeXBlX1dhcmxvY2tfRmF0",
            "YWxCb25kc0tpbGxzEE4SKgoma0tpbGxFYXRlckV2ZW50VHlwZV9XYXJsb2Nr",
            "X0dvbGVtS2lsbHMQTxIqCiZrS2lsbEVhdGVyRXZlbnRUeXBlX1R1c2tfV2Fs",
            "cnVzUHVuY2hlcxBQEioKJmtLaWxsRWF0ZXJFdmVudFR5cGVfVHVza19Tbm93",
            "YmFsbFN0dW5zEFESMAosa0tpbGxFYXRlckV2ZW50VHlwZV9FYXJ0aHNoYWtl",
            "cl9GaXNzdXJlU3R1bnMQUhIyCi5rS2lsbEVhdGVyRXZlbnRUeXBlX0VhcnRo",
            "c2hha2VyXzNIZXJvRWNob3NsYW1zEFMSMgoua0tpbGxFYXRlckV2ZW50VHlw",
            "ZV9TYW5kS2luZ19CdXJyb3dzdHJpa2VTdHVucxBUEi8KK2tLaWxsRWF0ZXJF",
            "dmVudFR5cGVfU2FuZEtpbmdfRXBpY2VudGVyS2lsbHMQVRI1CjFrS2lsbEVh",
            "dGVyRXZlbnRUeXBlX1NreXdyYXRoTWFnZV9BbmNpZW50U2VhbEtpbGxzEFYS",
            "OAo0a0tpbGxFYXRlckV2ZW50VHlwZV9Ta3l3cmF0aE1hZ2VfQ29uY3Vzc2l2",
            "ZVNob3RLaWxscxBXEiwKKGtLaWxsRWF0ZXJFdmVudFR5cGVfTHVuYV9MdWNl",
            "bnRCZWFtS2lsbHMQWBIpCiVrS2lsbEVhdGVyRXZlbnRUeXBlX0x1bmFfRWNs",
            "aXBzZUtpbGxzEFkSOAo0a0tpbGxFYXRlckV2ZW50VHlwZV9LZWVwZXJPZlRo",
            "ZUxpZ2h0X0lsbHVtaW5hdGVLaWxscxBaEjYKMmtLaWxsRWF0ZXJFdmVudFR5",
            "cGVfS2VlcGVyT2ZUaGVMaWdodF9NYW5hTGVha1N0dW5zEFsSOgo2a0tpbGxF",
            "YXRlckV2ZW50VHlwZV9LZWVwZXJPZlRoZUxpZ2h0X1RlYW1tYXRlc1JlY2Fs",
            "bGVkEFwSMAosa0tpbGxFYXRlckV2ZW50VHlwZV9MZWdpb25Db21tYW5kZXJf",
            "RHVlbHNXb24QXRItCilrS2lsbEVhdGVyRXZlbnRUeXBlX0JlYXN0bWFzdGVy",
            "X1JvYXJLaWxscxBeEjIKLmtLaWxsRWF0ZXJFdmVudFR5cGVfQmVhc3RtYXN0",
            "ZXJfUm9hck11bHRpS2lsbHMQXxI1CjFrS2lsbEVhdGVyRXZlbnRUeXBlX1dp",
            "bmRydW5uZXJfRm9jdXNGaXJlQnVpbGRpbmdzEGASMQota0tpbGxFYXRlckV2",
            "ZW50VHlwZV9XaW5kcnVubmVyX1Bvd2Vyc2hvdEtpbGxzEGESNgoya0tpbGxF",
            "YXRlckV2ZW50VHlwZV9QaGFudG9tQXNzYXNzaW5fRGFnZ2VyTGFzdEhpdHMQ",
            "YhI6CjZrS2lsbEVhdGVyRXZlbnRUeXBlX1BoYW50b21Bc3Nhc3Npbl9QaGFu",
            "dG9tU3RyaWtlS2lsbHMQYxI0CjBrS2lsbEVhdGVyRXZlbnRUeXBlX0RlYXRo",
            "UHJvcGhldF9DcnlwdFN3YXJtS2lsbHMQZBI6CjZrS2lsbEVhdGVyRXZlbnRU",
            "eXBlX0RlYXRoUHJvcGhldF9FeG9yY2lzbUJ1aWxkaW5nS2lsbHMQZRI8Cjhr",
            "S2lsbEVhdGVyRXZlbnRUeXBlX0RlYXRoUHJvcGhldF9FeG9yY2lzbVNwaXJp",
            "dHNTdW1tb25lZBBmEjYKMmtLaWxsRWF0ZXJFdmVudFR5cGVfRGVhdGhQcm9w",
            "aGV0X011bHRpSGVyb1NpbGVuY2VzEGcSLQopa0tpbGxFYXRlckV2ZW50VHlw",
            "ZV9BYmFkZG9uX01pc3RDb2lsS2lsbHMQaBIuCiprS2lsbEVhdGVyRXZlbnRU",
            "eXBlX0FiYWRkb25fTWlzdENvaWxIZWFsZWQQaRIyCi5rS2lsbEVhdGVyRXZl",
            "bnRUeXBlX0FiYWRkb25fQXBob3RpY1NoaWVsZEtpbGxzEGoSMgoua0tpbGxF",
            "YXRlckV2ZW50VHlwZV9MaWNoX0NoYWluRnJvc3RUcmlwbGVLaWxscxBrEjEK",
            "LWtLaWxsRWF0ZXJFdmVudFR5cGVfTGljaF9DaGFpbkZyb3N0TXVsdGlLaWxs",
            "cxBsEi4KKmtLaWxsRWF0ZXJFdmVudFR5cGVfTGljaF9DaGFpbkZyb3N0Qm91",
            "bmNlcxBtEikKJWtLaWxsRWF0ZXJFdmVudFR5cGVfVXJzYV9FbnJhZ2VkS2ls",
            "bHMQbhIsCihrS2lsbEVhdGVyRXZlbnRUeXBlX1Vyc2FfRWFydGhzaG9ja0tp",
            "bGxzEG8SLQopa0tpbGxFYXRlckV2ZW50VHlwZV9MaW5hX0xhZ3VuYUJsYWRl",
            "S2lsbHMQcBItCilrS2lsbEVhdGVyRXZlbnRUeXBlX0xpbmFfRHJhZ29uU2xh",
            "dmVLaWxscxBxEjIKLmtLaWxsRWF0ZXJFdmVudFR5cGVfTGluYV9MaWdodFN0",
            "cmlrZUFycmF5U3R1bnMQchImCiJrS2lsbEVhdGVyRXZlbnRfQmFycmFja3Nf",
            "RGVzdHJveWVkEHMSLQopa0tpbGxFYXRlckV2ZW50X1RlbXBsYXJBc3Nhc3Np",
            "bl9NZWxkS2lsbHMQdBIwCixrS2lsbEVhdGVyRXZlbnRfVGVtcGxhckFzc2Fz",
            "c2luX0hlcm9lc1Nsb3dlZBB1Ei0KKWtLaWxsRWF0ZXJFdmVudF9TbmlwZXJf",
            "QXNzYXNzaW5hdGlvbktpbGxzEHYSKAoka0tpbGxFYXRlckV2ZW50X1NuaXBl",
            "cl9IZWFkc2hvdFN0dW5zEHcSKgoma0tpbGxFYXRlckV2ZW50X0VhcnRoU3Bp",
            "cml0X1NtYXNoU3R1bnMQeBIsCihrS2lsbEVhdGVyRXZlbnRfRWFydGhTcGly",
            "aXRfR3JpcFNpbGVuY2VzEHkSLQopa0tpbGxFYXRlckV2ZW50X1NoYWRvd1No",
            "YW1hbl9TaGFja2xlS2lsbHMQehIpCiVrS2lsbEVhdGVyRXZlbnRfU2hhZG93",
            "U2hhbWFuX0hleEtpbGxzEHsSKgoma0tpbGxFYXRlckV2ZW50X0NlbnRhdXJf",
            "RW5lbWllc1N0b21wZWQQfBIrCidrS2lsbEVhdGVyRXZlbnRfQ2VudGF1cl9E",
            "b3VibGVFZGdlS2lsbHMQfRInCiNrS2lsbEVhdGVyRXZlbnRfQ2VudGF1cl9S",
            "ZXR1cm5LaWxscxB+Ei4KKmtLaWxsRWF0ZXJFdmVudF9FbWJlclNwaXJpdF9F",
            "bmVtaWVzQ2hhaW5lZBB/EjgKM2tLaWxsRWF0ZXJFdmVudF9FbWJlclNwaXJp",
            "dF9TbGVpZ2h0T2ZGaXN0TXVsdGlLaWxscxCAARIiCh1rS2lsbEVhdGVyRXZl",
            "bnRfUHVja19PcmJLaWxscxCBARIyCi1rS2lsbEVhdGVyRXZlbnRfVmVuZ2Vm",
            "dWxTcGlyaXRfRW5lbWllc1N0dW5uZWQQggESKgola0tpbGxFYXRlckV2ZW50",
            "X0xpZmVzdGVhbGVyX1JhZ2VLaWxscxCDARIwCitrS2lsbEVhdGVyRXZlbnRf",
            "TGlmZXN0ZWFsZXJfT3BlbldvdW5kc0tpbGxzEIQBEiwKJ2tLaWxsRWF0ZXJF",
            "dmVudF9MaWZlc3RlYWxlcl9JbmZlc3RLaWxscxCFARIrCiZrS2lsbEVhdGVy",
            "RXZlbnRfRWxkZXJUaXRhbl9TcGlyaXRLaWxscxCGARIqCiVrS2lsbEVhdGVy",
            "RXZlbnRfRWxkZXJUaXRhbl9Hb29kU3RvbXBzEIcBEioKJWtLaWxsRWF0ZXJF",
            "dmVudF9DbG9ja3dlcmtfUm9ja2V0S2lsbHMQiAESLwoqa0tpbGxFYXRlckV2",
            "ZW50X0Nsb2Nrd2Vya19CbGluZFJvY2tldEtpbGxzEIkBEioKJWtLaWxsRWF0",
            "ZXJFdmVudF9TdG9ybVNwaXJpdF9CYWxsS2lsbHMQigESMwoua0tpbGxFYXRl",
            "ckV2ZW50X1N0b3JtU3Bpcml0X0RvdWJsZVJlbW5hbnRLaWxscxCLARIsCidr",
            "S2lsbEVhdGVyRXZlbnRfU3Rvcm1TcGlyaXRfVm9ydGV4S2lsbHMQjAESLgop",
            "a0tpbGxFYXRlckV2ZW50X1Rpbmtlcl9Eb3VibGVNaXNzaWxlS2lsbHMQjQES",
            "Jgoha0tpbGxFYXRlckV2ZW50X1Rpbmtlcl9MYXNlcktpbGxzEI4BEikKJGtL",
            "aWxsRWF0ZXJFdmVudF9UZWNoaWVzX1N1aWNpZGVLaWxscxCPARIqCiVrS2ls",
            "bEVhdGVyRXZlbnRfVGVjaGllc19MYW5kTWluZUtpbGxzEJABEiwKJ2tLaWxs",
            "RWF0ZXJFdmVudF9UZWNoaWVzX1N0YXRpc1RyYXBTdHVucxCRARIsCidrS2ls",
            "bEVhdGVyRXZlbnRfVGVjaGllc19SZW1vdGVNaW5lS2lsbHMQkgESMAora0tp",
            "bGxFYXRlckV2ZW50X1NoYWRvd0ZpZW5kX1RyaXBsZVJhemVLaWxscxCTARIy",
            "Ci1rS2lsbEVhdGVyRXZlbnRfU2hhZG93RmllbmRfUmVxdWllbU11bHRpS2ls",
            "bHMQlAESKwoma0tpbGxFYXRlckV2ZW50X1NoYWRvd0ZpZW5kX1FSYXplS2ls",
            "bHMQlQESKwoma0tpbGxFYXRlckV2ZW50X1NoYWRvd0ZpZW5kX1dSYXplS2ls",
            "bHMQlgESKwoma0tpbGxFYXRlckV2ZW50X1NoYWRvd0ZpZW5kX0VSYXplS2ls",
            "bHMQlwESKwoma0tpbGxFYXRlckV2ZW50X09yYWNsZV9GYXRlc0VkaWN0S2ls",
            "bHMQmAESLQooa0tpbGxFYXRlckV2ZW50X09yYWNsZV9GYWxzZVByb21pc2VT",
            "YXZlcxCZARIuCilrS2lsbEVhdGVyRXZlbnRfSnVnZ2VybmF1dF9PbW5pc2xh",
            "c2hLaWxscxCaARI3CjJrS2lsbEVhdGVyRXZlbnRUeXBlX1NrZWxldG9uS2lu",
            "Z19Ta2VsZXRvbkhlcm9LaWxscxCdARI6CjVrS2lsbEVhdGVyRXZlbnRUeXBl",
            "X0RhcmtXaWxsb3dfQ3Vyc2VkQ3Jvd25UcmlwbGVTdHVucxCeARIxCixrS2ls",
            "bEVhdGVyRXZlbnRUeXBlX0RhenpsZV9TaGFsbG93R3JhdmVTYXZlcxCfARIw",
            "CitrS2lsbEVhdGVyRXZlbnRUeXBlX0RhenpsZV9Qb2lzb25Ub3VjaEtpbGxz",
            "EKABEiUKIGtLaWxsRWF0ZXJFdmVudFR5cGVfVGhyZWVNYW5NZWtzEKEBEjAK",
            "K2tLaWxsRWF0ZXJFdmVudFR5cGVfVmlwZXJfUG9pc29uQXR0YWNrS2lsbHMQ",
            "ogESMQosa0tpbGxFYXRlckV2ZW50VHlwZV9WaXBlcl9Db3Jyb3NpdmVTa2lu",
            "S2lsbHMQowESJwoia0tpbGxFYXRlckV2ZW50VHlwZV9UaHJlZUhlcm9WZWls",
            "cxCkARI1CjBrS2lsbEVhdGVyRXZlbnRUeXBlX1ZpcGVyX0tpbGxzRHVyaW5n",
            "VmlwZXJTdHJpa2UQpQESKAoja0tpbGxFYXRlckV2ZW50VHlwZV9Tb2xhckNy",
            "ZXN0S2lsbHMQpgESLAona0tpbGxFYXRlckV2ZW50VHlwZV9UaW55X1RyZWVU",
            "aHJvd0tpbGxzEKcBEisKJmtLaWxsRWF0ZXJFdmVudFR5cGVfUmlraV9CYWNr",
            "c3RhYktpbGxzEKgBEjgKM2tLaWxsRWF0ZXJFdmVudFR5cGVfUGhvZW5peF9U",
            "aHJlZUhlcm9TdXBlcm5vdmFTdHVucxCpARI3CjJrS2lsbEVhdGVyRXZlbnRU",
            "eXBlX1RlcnJvcmJsYWRlX01ldGFtb3JwaG9zaXNLaWxscxCqARIuCilrS2ls",
            "bEVhdGVyRXZlbnRUeXBlX0xpb25fR3JlYXRGaW5nZXJLaWxscxCrARI7CjZr",
            "S2lsbEVhdGVyRXZlbnRUeXBlX0FudGltYWdlX1NwZWxsc0Jsb2NrZWRXaXRo",
            "QWdoYW5pbXMQrAESMwoua0tpbGxFYXRlckV2ZW50VHlwZV9BbnRpbWFnZV9U",
            "aHJlZU1hbk1hbmFWb2lkcxCtARI1CjBrS2lsbEVhdGVyRXZlbnRUeXBlX0Fy",
            "Y1dhcmRlbl9UZW1wZXN0RG91YmxlS2lsbHMQrgESMwoua0tpbGxFYXRlckV2",
            "ZW50VHlwZV9BcmNXYXJkZW5fU3BhcmtXcmFpdGhLaWxscxCvARIrCiZrS2ls",
            "bEVhdGVyRXZlbnRUeXBlX0JhbmVfQnJhaW5TYXBLaWxscxCwARItCihrS2ls",
            "bEVhdGVyRXZlbnRUeXBlX0JhbmVfRmllbmRzR3JpcEtpbGxzELEBEjcKMmtL",
            "aWxsRWF0ZXJFdmVudFR5cGVfQmF0cmlkZXJfVHJpcGxlSGVyb0ZsYW1lYnJl",
            "YWtzELIBEjMKLmtLaWxsRWF0ZXJFdmVudFR5cGVfQmF0cmlkZXJfRG91Ymxl",
            "SGVyb0xhc3NvZXMQswESOgo1a0tpbGxFYXRlckV2ZW50VHlwZV9CcmV3bWFz",
            "dGVyX0tpbGxzRHVyaW5nUHJpbWFsU3BsaXQQtAESPgo5a0tpbGxFYXRlckV2",
            "ZW50VHlwZV9CcmlzdGxlYmFja19LaWxsc1VuZGVyRm91clF1aWxsU3RhY2tz",
            "ELUBEjcKMmtLaWxsRWF0ZXJFdmVudFR5cGVfQnJpc3RsZWJhY2tfVHJpcGxl",
            "SGVyb05hc2FsR29vELYBEjgKM2tLaWxsRWF0ZXJFdmVudFR5cGVfQnJvb2Rt",
            "b3RoZXJfU3BpZGVybGluZ0hlcm9LaWxscxC3ARIzCi5rS2lsbEVhdGVyRXZl",
            "bnRUeXBlX0Jyb29kbW90aGVyX0tpbGxzSW5zaWRlV2ViELgBEjIKLWtLaWxs",
            "RWF0ZXJFdmVudFR5cGVfQ2VudGF1cl9UaHJlZUhlcm9TdGFtcGVkZRC5ARI1",
            "CjBrS2lsbEVhdGVyRXZlbnRUeXBlX0NoYW9zS25pZ2h0X1JlYWxpdHlSaWZ0",
            "S2lsbHMQugESMAora0tpbGxFYXRlckV2ZW50VHlwZV9DaGVuX0tpbGxzV2l0",
            "aFBlbml0ZW5jZRC7ARI6CjVrS2lsbEVhdGVyRXZlbnRUeXBlX0NyeXN0YWxN",
            "YWlkZW5fVHdvSGVyb0NyeXN0YWxOb3ZhcxC8ARI+CjlrS2lsbEVhdGVyRXZl",
            "bnRUeXBlX0NyeXN0YWxNYWlkZW5fVGhyZWVIZXJvRnJlZXppbmdGaWVsZHMQ",
            "vQESLwoqa0tpbGxFYXRlckV2ZW50VHlwZV9EYXp6bGVfU2hhZG93V2F2ZUtp",
            "bGxzEL4BEjEKLGtLaWxsRWF0ZXJFdmVudFR5cGVfRGVhdGhQcm9waGV0X1Np",
            "cGhvbktpbGxzEL8BEj0KOGtLaWxsRWF0ZXJFdmVudFR5cGVfRGVhdGhQcm9w",
            "aGV0X0V4b3JjaXNtS2lsbHNEdXJpbmdFdWxzEMABEkMKPmtLaWxsRWF0ZXJF",
            "dmVudFR5cGVfRGlzcnVwdG9yX1RocmVlSGVyb0tpbmV0aWNGaWVsZFN0YXRp",
            "Y1N0b3JtEMEBEjQKL2tLaWxsRWF0ZXJFdmVudFR5cGVfRG9vbV9JbmZlcm5h",
            "bEJsYWRlQnVybktpbGxzEMIBEkAKO2tLaWxsRWF0ZXJFdmVudFR5cGVfRHJv",
            "d1Jhbmdlcl9QcmVjaXNpb25BdXJhQ3JlZXBUb3dlcktpbGxzEMMBEjEKLGtL",
            "aWxsRWF0ZXJFdmVudFR5cGVfRW1iZXJTcGlyaXRfUmVtbmFudEtpbGxzEMQB",
            "EjcKMmtLaWxsRWF0ZXJFdmVudFR5cGVfRW1iZXJTcGlyaXRfU2xlaWdodE9m",
            "RmlzdEtpbGxzEMUBEjwKN2tLaWxsRWF0ZXJFdmVudFR5cGVfRW5pZ21hX01p",
            "ZG5pZ2h0UHVsc2VCbGFja0hvbGVDb21ib3MQxgESMgota0tpbGxFYXRlckV2",
            "ZW50VHlwZV9FbmlnbWFfVGhyZWVNYW5CbGFja0hvbGVzEMcBEjsKNmtLaWxs",
            "RWF0ZXJFdmVudFR5cGVfRmFjZWxlc3NWb2lkX011bHRpSGVyb1RpbWVEaWxh",
            "dGlvbhDIARI3CjJrS2lsbEVhdGVyRXZlbnRUeXBlX0d5cm9jb3B0ZXJfVGhy",
            "ZWVIZXJvRmxha0Nhbm5vbhDJARI2CjFrS2lsbEVhdGVyRXZlbnRUeXBlX0d5",
            "cm9jb3B0ZXJfSG9taW5nTWlzc2lsZUtpbGxzEMoBEjYKMWtLaWxsRWF0ZXJF",
            "dmVudFR5cGVfR3lyb2NvcHRlcl9Sb2NrZXRCYXJyYWdlS2lsbHMQywESNAov",
            "a0tpbGxFYXRlckV2ZW50VHlwZV9IdXNrYXJfS2lsbHNEdXJpbmdMaWZlQnJl",
            "YWsQzAESMQosa0tpbGxFYXRlckV2ZW50VHlwZV9IdXNrYXJfQnVybmluZ1Nw",
            "ZWFyS2lsbHMQzQESMQosa0tpbGxFYXRlckV2ZW50VHlwZV9JbnZva2VyX011",
            "bHRpSGVyb0ljZVdhbGwQzgESLQooa0tpbGxFYXRlckV2ZW50VHlwZV9JbnZv",
            "a2VyX1RocmVlSGVyb0VNUBDPARI4CjNrS2lsbEVhdGVyRXZlbnRUeXBlX0lu",
            "dm9rZXJfVGhyZWVIZXJvRGVhZmVuaW5nQmxhc3QQ0AESNQowa0tpbGxFYXRl",
            "ckV2ZW50VHlwZV9JbnZva2VyX011bHRpSGVyb0NoYW9zTWV0ZW9yENEBEjMK",
            "LmtLaWxsRWF0ZXJFdmVudFR5cGVfSmFraXJvX011bHRpSGVyb0R1YWxCcmVh",
            "dGgQ0gESNgoxa0tpbGxFYXRlckV2ZW50VHlwZV9KYWtpcm9fSWNlUGF0aE1h",
            "Y3JvcHlyZUNvbWJvcxDTARIvCiprS2lsbEVhdGVyRXZlbnRUeXBlX0xlc2hy",
            "YWNfUHVsc2VOb3ZhS2lsbHMQ1AESOAoza0tpbGxFYXRlckV2ZW50VHlwZV9M",
            "ZXNocmFjX1RocmVlSGVyb0xpZ2h0bmluZ1N0b3JtENUBEjQKL2tLaWxsRWF0",
            "ZXJFdmVudFR5cGVfTGlvbl9UaHJlZUhlcm9GaW5nZXJPZkRlYXRoENYBEigK",
            "I2tLaWxsRWF0ZXJFdmVudFR5cGVfTWVlcG9fUG9vZktpbGxzENcBEjIKLWtL",
            "aWxsRWF0ZXJFdmVudFR5cGVfTWVlcG9fTXVsdGlIZXJvRWFydGhiaW5kcxDY",
            "ARI0Ci9rS2lsbEVhdGVyRXZlbnRUeXBlX05pZ2h0U3RhbGtlcl9OaWdodHRp",
            "bWVLaWxscxDZARI3CjJrS2lsbEVhdGVyRXZlbnRUeXBlX01vcnBobGluZ19L",
            "aWxsc0R1cmluZ1JlcGxpY2F0ZRDaARIwCitrS2lsbEVhdGVyRXZlbnRUeXBl",
            "X09ncmVNYWdpX0ZpcmVibGFzdEtpbGxzENsBEi0KKGtLaWxsRWF0ZXJFdmVu",
            "dFR5cGVfT2dyZU1hZ2lfSWduaXRlS2lsbHMQ3AESLgopa0tpbGxFYXRlckV2",
            "ZW50VHlwZV9Eb21pbmF0aW5nS2lsbFN0cmVha3MQ3QESKAoja0tpbGxFYXRl",
            "ckV2ZW50VHlwZV9NZWdhS2lsbFN0cmVha3MQ3gESMAora0tpbGxFYXRlckV2",
            "ZW50VHlwZV9BbGNoZW1pc3RfQWdoYW5pbXNHaXZlbhDfARIsCidrS2lsbEVh",
            "dGVyRXZlbnRUeXBlX1ZlaWxzTGVhZGluZ1RvS2lsbHMQ4AESKwoma0tpbGxF",
            "YXRlckV2ZW50VHlwZV9EdXN0TGVhZGluZ1RvS2lsbHMQ4QESNwoya0tpbGxF",
            "YXRlckV2ZW50VHlwZV9XaXRjaERvY3Rvcl9NdWx0aUhlcm9DYXNrU3R1bnMQ",
            "4gESLQooa0tpbGxFYXRlckV2ZW50VHlwZV9XZWF2ZXJfU2h1a3VjaGlLaWxs",
            "cxDjARI5CjRrS2lsbEVhdGVyRXZlbnRUeXBlX1dpbmRydW5uZXJfU2hhY2ts",
            "ZUZvY3VzRmlyZUtpbGxzEOQBEkIKPWtLaWxsRWF0ZXJFdmVudFR5cGVfVmVu",
            "Z2VmdWxTcGlyaXRfVmVuZ2VhbmNlQXVyYUlsbHVzaW9uS2lsbHMQ5QESLgop",
            "a0tpbGxFYXRlckV2ZW50VHlwZV9UdXNrX1dhbHJ1c1B1bmNoS2lsbHMQ5gES",
            "Lwoqa0tpbGxFYXRlckV2ZW50VHlwZV9UaW5rZXJfTXVsdGlIZXJvTGFzZXJz",
            "EOcBEjsKNmtLaWxsRWF0ZXJFdmVudFR5cGVfVGVtcGxhckFzc2Fzc2luX011",
            "bHRpSGVyb1BzaUJsYWRlcxDoARI1CjBrS2lsbEVhdGVyRXZlbnRUeXBlX1N2",
            "ZW5fS2lsbHNEdXJpbmdHb2RzU3RyZW5ndGgQ6QESMgota0tpbGxFYXRlckV2",
            "ZW50VHlwZV9TbmlwZXJfVGhyZWVIZXJvU2hyYXBuZWxzEOoBEjUKMGtLaWxs",
            "RWF0ZXJFdmVudFR5cGVfU2xhcmtfS2lsbHNEdXJpbmdTaGFkb3dEYW5jZRDr",
            "ARI6CjVrS2lsbEVhdGVyRXZlbnRUeXBlX1NoYWRvd1NoYW1hbl9NdWx0aUhl",
            "cm9FdGhlclNob2NrcxDsARI9CjhrS2lsbEVhdGVyRXZlbnRUeXBlX1NoYWRv",
            "d1NoYW1hbl9TZXJwZW50V2FyZFNoYWNrbGVLaWxscxDtARI3CjJrS2lsbEVh",
            "dGVyRXZlbnRUeXBlX1Jpa2lfVGhyZWVIZXJvVHJpY2tzT2ZUaGVUcmFkZRDu",
            "ARIxCixrS2lsbEVhdGVyRXZlbnRUeXBlX1Jhem9yX0V5ZU9mVGhlU3Rvcm1L",
            "aWxscxDvARItCihrS2lsbEVhdGVyRXZlbnRUeXBlX1B1Z25hX0xpZmVEcmFp",
            "bktpbGxzEPABEj4KOWtLaWxsRWF0ZXJFdmVudFR5cGVfT2JzaWRpYW5EZXN0",
            "cm95ZXJfU2FuaXR5c0VjbGlwc2VLaWxscxDxARI0Ci9rS2lsbEVhdGVyRXZl",
            "bnRUeXBlX09yYWNsZV9NdWx0aUhlcm9Gb3J0dW5lc0VuZBDyARI1CjBrS2ls",
            "bEVhdGVyRXZlbnRUeXBlX09tbmlrbmlnaHRfUHVyaWZpY2F0aW9uS2lsbHMQ",
            "8wESQwo+a0tpbGxFYXRlckV2ZW50VHlwZV9OaWdodFN0YWxrZXJfRW5lbXlN",
            "aXNzZXNVbmRlckNyaXBwbGluZ0ZlYXIQ9AESNAova0tpbGxFYXRlckV2ZW50",
            "VHlwZV9XYXJsb2NrX1RocmVlSGVyb0ZhdGFsQm9uZHMQ9QESMwoua0tpbGxF",
            "YXRlckV2ZW50VHlwZV9SaWtpX1RyaWNrc09mVGhlVHJhZGVLaWxscxD2ARI1",
            "CjBrS2lsbEVhdGVyRXZlbnRUeXBlX0VhcnRoc2hha2VyX0FmdGVyc2hvY2tI",
            "aXRzMTAQ9wESMwoua0tpbGxFYXRlckV2ZW50VHlwZV9FYXJ0aHNoYWtlcl81",
            "SGVyb0VjaG9zbGFtcxD4ARIyCi1rS2lsbEVhdGVyRXZlbnRUeXBlX0xpbmFf",
            "TGFndW5hQmxhZGVIZXJvS2lsbHMQ+QESMgota0tpbGxFYXRlckV2ZW50VHlw",
            "ZV9MaW5hX0xpZ2h0U3RyaWtlSGVyb1N0dW5zEPoBEjYKMWtLaWxsRWF0ZXJF",
            "dmVudFR5cGVfRWFydGhzaGFrZXJfRmlzc3VyZU11bHRpU3R1bnMQ+wESLwoq",
            "a0tpbGxFYXRlckV2ZW50VHlwZV9FYXJ0aHNoYWtlcl9Ub3RlbUtpbGxzEPwB",
            "EjMKLmtLaWxsRWF0ZXJFdmVudFR5cGVfUGFuZ29saWVyX1N3YXNoYnVja2xl",
            "S2lsbHMQ/QESMgota0tpbGxFYXRlckV2ZW50VHlwZV9GdXJpb25fRW5lbXlI",
            "ZXJvZXNUcmFwcGVkEP4BEjQKL2tLaWxsRWF0ZXJFdmVudFR5cGVfUGFuZ29s",
            "aWVyX0hlYXJ0cGllcmNlcktpbGxzEP8BEjIKLWtLaWxsRWF0ZXJFdmVudFR5",
            "cGVfTWVkdXNhX011bHRpSGVyb1N0b25lR2F6ZRCAAhIuCilrS2lsbEVhdGVy",
            "RXZlbnRUeXBlX01lZHVzYV9TcGxpdFNob3RLaWxscxCBAhIyCi1rS2lsbEVh",
            "dGVyRXZlbnRUeXBlX01pcmFuYV9NdWx0aUhlcm9TdGFyc3Rvcm0QggISOAoz",
            "a0tpbGxFYXRlckV2ZW50VHlwZV9NaXJhbmFfS2lsbHNGcm9tTW9vbmxpZ2h0",
            "U2hhZG93EIMCEjAKK2tLaWxsRWF0ZXJFdmVudFR5cGVfTWFnbnVzX011bHRp",
            "SGVyb1NrZXdlcnMQhAISOAoza0tpbGxFYXRlckV2ZW50VHlwZV9NYWdudXNf",
            "TXVsdGlIZXJvUmV2ZXJzZVBvbGFyaXR5EIUCEjkKNGtLaWxsRWF0ZXJFdmVu",
            "dFR5cGVfTWFnbnVzX0hlcm9lc1Nsb3dlZFdpdGhTaG9ja3dhdmUQhgISMAor",
            "a0tpbGxFYXRlckV2ZW50VHlwZV9OYWdhU2lyZW5fTXVsdGlIZXJvU29uZxCH",
            "AhI1CjBrS2lsbEVhdGVyRXZlbnRUeXBlX05hZ2FTaXJlbl9BbGxpZXNIZWFs",
            "ZWRCeVNvbmcQiAISMAora0tpbGxFYXRlckV2ZW50VHlwZV9Mb25lRHJ1aWRf",
            "TXVsdGlIZXJvUm9hchCJAhIxCixrS2lsbEVhdGVyRXZlbnRUeXBlX0xvbmVE",
            "cnVpZF9CYXR0bGVDcnlLaWxscxCKAhI1CjBrS2lsbEVhdGVyRXZlbnRUeXBl",
            "X1dpbnRlcld5dmVybl9UaHJlZUhlcm9DdXJzZXMQiwISPwo6a0tpbGxFYXRl",
            "ckV2ZW50VHlwZV9BbnRpbWFnZV9TcGVsbHNCbG9ja2VkV2l0aENvdW50ZXJz",
            "cGVsbBCMAhIyCi1rS2lsbEVhdGVyRXZlbnRUeXBlX01hcnNfRW5lbWllc0tp",
            "bGxlZEluQXJlbmEQjQISMQosa0tpbGxFYXRlckV2ZW50VHlwZV9NYXJzX011",
            "bHRpSGVyb0dvZHNSZWJ1a2UQjgISLQooa0tpbGxFYXRlckV2ZW50VHlwZV9N",
            "YXJzX0dvZHNSZWJ1a2VLaWxscxCPAhIyCi1rS2lsbEVhdGVyRXZlbnRUeXBl",
            "X1NuYXBmaXJlX0xpemFyZEJsb2JzS2lsbHMQkAISNAova0tpbGxFYXRlckV2",
            "ZW50VHlwZV9TbmFwZmlyZV9Ud29IZXJvQ29va2llU3R1bnMQkQISFgoRQ3Vz",
            "dG9tX0tpbGxTdHJlYWsQkgISLQooa0tpbGxFYXRlckV2ZW50VHlwZV9NdWVy",
            "dGFfRGVhZFNob3RLaWxscxCTAhIyCi1rS2lsbEVhdGVyRXZlbnRUeXBlX011",
            "ZXJ0YV9QaWVyY2VUaGVWZWlsS2lsbHMQlAISMQosa0tpbGxFYXRlckV2ZW50",
            "VHlwZV9NdWVydGFfTXVsdGlIZXJvRGVhZFNob3QQlQISNwoya0tpbGxFYXRl",
            "ckV2ZW50VHlwZV9NdWVydGFfRGVhZFNob3RzSW50b1RoZUNhbGxpbmcQlgIS",
            "Nwoya0tpbGxFYXRlckV2ZW50VHlwZV9SaW5nbWFzdGVyX0xvbmdSYW5nZURh",
            "Z2dlckhpdHMQlwISMgota0tpbGxFYXRlckV2ZW50VHlwZV9SaW5nbWFzdGVy",
            "X011bHRpSGVyb1doaXBzEJgCEjcKMmtLaWxsRWF0ZXJFdmVudFR5cGVfUmlu",
            "Z21hc3Rlcl9NdWx0aUhlcm9NZXNtZXJpemVzEJkCEjAKK2tLaWxsRWF0ZXJF",
            "dmVudFR5cGVfS2V6X1BhcnJ5Q291bnRlckF0dGFja3MQmgISLAona0tpbGxF",
            "YXRlckV2ZW50VHlwZV9LZXpfUmF2ZW5zVmVpbEtpbGxzEJsCEi8KKmtLaWxs",
            "RWF0ZXJFdmVudFR5cGVfS2V6X1JhcHRvckRhbmNlSGVhbGluZxCcAhIyCi1r",
            "S2lsbEVhdGVyRXZlbnRUeXBlX0tlel9LaWxsc0R1cmluZ0ZhbGNvblJ1c2gQ",
            "nQISMQosa0tpbGxFYXRlckV2ZW50VHlwZV9TZWFzb25hbF9QYXJ0eUhhdHNT",
            "dG9sZW4QngISLAona0tpbGxFYXRlckV2ZW50VHlwZV9TZWFzb25hbF9UYWxs",
            "ZXN0SGF0EJ8CKqsBCg5FTGFuZVNlbGVjdGlvbhIdChlrX0VMYW5lU2VsZWN0",
            "aW9uX1NBRkVMQU5FEAASHAoYa19FTGFuZVNlbGVjdGlvbl9PRkZMQU5FEAES",
            "HAoYa19FTGFuZVNlbGVjdGlvbl9NSURMQU5FEAISHAoYa19FTGFuZVNlbGVj",
            "dGlvbl9TVVBQT1JUEAMSIAoca19FTGFuZVNlbGVjdGlvbl9IQVJEU1VQUE9S",
            "VBAEKtsCChNFTGFuZVNlbGVjdGlvbkZsYWdzEiIKHmtfRUxhbmVTZWxlY3Rp",
            "b25GbGFnc19TQUZFTEFORRABEiEKHWtfRUxhbmVTZWxlY3Rpb25GbGFnc19P",
            "RkZMQU5FEAISIQoda19FTGFuZVNlbGVjdGlvbkZsYWdzX01JRExBTkUQBBIh",
            "Ch1rX0VMYW5lU2VsZWN0aW9uRmxhZ3NfU1VQUE9SVBAIEiUKIWtfRUxhbmVT",
            "ZWxlY3Rpb25GbGFnc19IQVJEU1VQUE9SVBAQEiIKHmtfRUxhbmVTZWxlY3Rp",
            "b25GbGFnR3JvdXBfTm9uZRAAEiIKHmtfRUxhbmVTZWxlY3Rpb25GbGFnR3Jv",
            "dXBfQ09SRRAHEiUKIWtfRUxhbmVTZWxlY3Rpb25GbGFnR3JvdXBfU1VQUE9S",
            "VBAYEiEKHWtfRUxhbmVTZWxlY3Rpb25GbGFnR3JvdXBfQUxMEB8qaQoWRVBh",
            "cnR5TWF0Y2htYWtpbmdGbGFncxIhCh1rX0VQYXJ0eU1hdGNobWFraW5nRmxh",
            "Z3NfTm9uZRAAEiwKKGtfRVBhcnR5TWF0Y2htYWtpbmdGbGFnc19MYXJnZVJh",
            "bmtTcHJlYWQQASrcAgoURUhpZ2hQcmlvcml0eU1NU3RhdGUSHQoZa19FSGln",
            "aFByaW9yaXR5TU1fVW5rbm93bhAAEiMKH2tfRUhpZ2hQcmlvcml0eU1NX01p",
            "c3NpbmdNTURhdGEQARIlCiFrX0VIaWdoUHJpb3JpdHlNTV9SZXNvdXJjZU1p",
            "c3NpbmcQAhImCiJrX0VIaWdoUHJpb3JpdHlNTV9NYW51YWxseURpc2FibGVk",
            "EAMSIQoda19FSGlnaFByaW9yaXR5TU1fTWluX0VuYWJsZWQQQBImCiJrX0VI",
            "aWdoUHJpb3JpdHlNTV9BbGxSb2xlc1NlbGVjdGVkEEESIwofa19FSGlnaFBy",
            "aW9yaXR5TU1fVXNpbmdSZXNvdXJjZRBCEh8KG2tfRUhpZ2hQcmlvcml0eU1N",
            "X0ZpdmVTdGFjaxBDEiAKHGtfRUhpZ2hQcmlvcml0eU1NX0hpZ2hEZW1hbmQQ",
            "RCp1ChFFUmVhZHlDaGVja1N0YXR1cxIfChtrX0VSZWFkeUNoZWNrU3RhdHVz",
            "X1Vua25vd24QABIgChxrX0VSZWFkeUNoZWNrU3RhdHVzX05vdFJlYWR5EAES",
            "HQoZa19FUmVhZHlDaGVja1N0YXR1c19SZWFkeRACKvYBChhFUmVhZHlDaGVj",
            "a1JlcXVlc3RSZXN1bHQSJgoia19FUmVhZHlDaGVja1JlcXVlc3RSZXN1bHRf",
            "U3VjY2VzcxAAEjAKLGtfRVJlYWR5Q2hlY2tSZXF1ZXN0UmVzdWx0X0FscmVh",
            "ZHlJblByb2dyZXNzEAESKQola19FUmVhZHlDaGVja1JlcXVlc3RSZXN1bHRf",
            "Tm90SW5QYXJ0eRACEigKJGtfRVJlYWR5Q2hlY2tSZXF1ZXN0UmVzdWx0X1Nl",
            "bmRFcnJvchADEisKJ2tfRVJlYWR5Q2hlY2tSZXF1ZXN0UmVzdWx0X1Vua25v",
            "d25FcnJvchAEKsEBChtFTWF0Y2hCZWhhdmlvclNjb3JlVmFyaWFuY2USKQol",
            "a19FTWF0Y2hCZWhhdmlvclNjb3JlVmFyaWFuY2VfSW52YWxpZBAAEiUKIWtf",
            "RU1hdGNoQmVoYXZpb3JTY29yZVZhcmlhbmNlX0xvdxABEigKJGtfRU1hdGNo",
            "QmVoYXZpb3JTY29yZVZhcmlhbmNlX01lZGl1bRACEiYKImtfRU1hdGNoQmVo",
            "YXZpb3JTY29yZVZhcmlhbmNlX0hpZ2gQA0IVqgISU3RlYW0uUHJvdG9zLkRv",
            "dGEy"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Steam.Protos.Dota2.SteammessagesReflection.Descriptor, global::Steam.Protos.Dota2.GcsdkGcmessagesReflection.Descriptor, global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Steam.Protos.Dota2.ELaneSelection), typeof(global::Steam.Protos.Dota2.ELaneSelectionFlags), typeof(global::Steam.Protos.Dota2.EPartyMatchmakingFlags), typeof(global::Steam.Protos.Dota2.EHighPriorityMMState), typeof(global::Steam.Protos.Dota2.EReadyCheckStatus), typeof(global::Steam.Protos.Dota2.EReadyCheckRequestResult), typeof(global::Steam.Protos.Dota2.EMatchBehaviorScoreVariance), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAPartyMember), global::Steam.Protos.Dota2.CSODOTAPartyMember.Parser, new[]{ "IsCoach", "RegionPingCodes", "RegionPingTimes", "RegionPingFailedBitmask", "IsPlusSubscriber", "TourneySkillLevel", "TourneyBuyin", "TourneyPreventUntil", "MmDataValid", "LaneSelectionFlags", "HighPriorityDisabled", "HasHpResource", "JoinedFromPartyfinder", "IsSteamChina", "BannedHeroIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAParty), global::Steam.Protos.Dota2.CSODOTAParty.Parser, new[]{ "PartyId", "LeaderId", "MemberIds", "GameModes", "State", "EffectiveStartedMatchmakingTime", "RawStartedMatchmakingTime", "AttemptStartTime", "AttemptNum", "Matchgroups", "LowPriorityAccountId", "MatchType", "TeamId", "TeamName", "TeamUiLogo", "TeamBaseLogo", "MatchDisabledUntilDate", "MatchDisabledAccountId", "MatchmakingMaxRangeMinutes", "Matchlanguages", "Members", "LowPriorityGamesRemaining", "OpenForJoinRequests", "SentInvites", "RecvInvites", "AccountFlags", "RegionSelectFlags", "ExclusiveTournamentId", "TourneyDivisionId", "TourneyScheduleTime", "TourneySkillLevel", "TourneyBracketRound", "TourneyQueueDeadlineTime", "TourneyQueueDeadlineState", "PartyBuilderSlotsToFill", "PartyBuilderMatchGroups", "PartyBuilderStartTime", "SoloQueue", "SteamClanAccountId", "ReadyCheck", "CustomGameDisabledUntilDate", "CustomGameDisabledAccountId", "IsChallengeMatch", "PartySearchBeaconActive", "MatchmakingFlags", "HighPriorityState", "LaneSelectionsEnabled", "CustomGameDifficultyMask", "IsSteamChina", "BotDifficultyMask", "BotScriptIndexMask", "RestrictedFromRanked", "RestrictedFromRankedAccountId", "RankSpreadLikertScale", "BehaviorScoreLikertScale" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CSODOTAParty.Types.State) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAPartyInvite), global::Steam.Protos.Dota2.CSODOTAPartyInvite.Parser, new[]{ "GroupId", "SenderId", "SenderName", "Members", "TeamId", "LowPriorityStatus", "AsCoach", "InviteGid" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CSODOTAPartyInvite.Types.PartyMember), global::Steam.Protos.Dota2.CSODOTAPartyInvite.Types.PartyMember.Parser, new[]{ "Name", "SteamId", "IsCoach" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLeaverState), global::Steam.Protos.Dota2.CMsgLeaverState.Parser, new[]{ "LobbyState", "GameState", "LeaverDetected", "FirstBloodHappened", "DiscardMatchResults", "MassDisconnect" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgReadyCheckStatus), global::Steam.Protos.Dota2.CMsgReadyCheckStatus.Parser, new[]{ "StartTimestamp", "FinishTimestamp", "InitiatorAccountId", "ReadyMembers" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgReadyCheckStatus.Types.ReadyMember), global::Steam.Protos.Dota2.CMsgReadyCheckStatus.Types.ReadyMember.Parser, new[]{ "AccountId", "ReadyStatus" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPartyReadyCheckRequest), global::Steam.Protos.Dota2.CMsgPartyReadyCheckRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPartyReadyCheckResponse), global::Steam.Protos.Dota2.CMsgPartyReadyCheckResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPartyReadyCheckAcknowledge), global::Steam.Protos.Dota2.CMsgPartyReadyCheckAcknowledge.Parser, new[]{ "ReadyStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgLobbyEventGameDetails), global::Steam.Protos.Dota2.CMsgLobbyEventGameDetails.Parser, new[]{ "KvData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgMatchMatchmakingStats), global::Steam.Protos.Dota2.CMsgMatchMatchmakingStats.Parser, new[]{ "AverageQueueTime", "MaximumQueueTime", "BehaviorScoreVariance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMvpData), global::Steam.Protos.Dota2.CMvpData.Parser, new[]{ "Mvps", "EventMvps" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum), global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Parser, new[]{ "PlayerSlot", "Accolades" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade), global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade.Parser, new[]{ "Type", "DetailValue" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade.Types.MvpAccoladeType) }, null, null)})})
          }));
    }
    #endregion

  }
  #region Enums
  public enum ELaneSelection {
    [pbr::OriginalName("k_ELaneSelection_SAFELANE")] KElaneSelectionSafelane = 0,
    [pbr::OriginalName("k_ELaneSelection_OFFLANE")] KElaneSelectionOfflane = 1,
    [pbr::OriginalName("k_ELaneSelection_MIDLANE")] KElaneSelectionMidlane = 2,
    [pbr::OriginalName("k_ELaneSelection_SUPPORT")] KElaneSelectionSupport = 3,
    [pbr::OriginalName("k_ELaneSelection_HARDSUPPORT")] KElaneSelectionHardsupport = 4,
  }

  public enum ELaneSelectionFlags {
    [pbr::OriginalName("k_ELaneSelectionFlags_SAFELANE")] KElaneSelectionFlagsSafelane = 1,
    [pbr::OriginalName("k_ELaneSelectionFlags_OFFLANE")] KElaneSelectionFlagsOfflane = 2,
    [pbr::OriginalName("k_ELaneSelectionFlags_MIDLANE")] KElaneSelectionFlagsMidlane = 4,
    [pbr::OriginalName("k_ELaneSelectionFlags_SUPPORT")] KElaneSelectionFlagsSupport = 8,
    [pbr::OriginalName("k_ELaneSelectionFlags_HARDSUPPORT")] KElaneSelectionFlagsHardsupport = 16,
    [pbr::OriginalName("k_ELaneSelectionFlagGroup_None")] KElaneSelectionFlagGroupNone = 0,
    [pbr::OriginalName("k_ELaneSelectionFlagGroup_CORE")] KElaneSelectionFlagGroupCore = 7,
    [pbr::OriginalName("k_ELaneSelectionFlagGroup_SUPPORT")] KElaneSelectionFlagGroupSupport = 24,
    [pbr::OriginalName("k_ELaneSelectionFlagGroup_ALL")] KElaneSelectionFlagGroupAll = 31,
  }

  public enum EPartyMatchmakingFlags {
    [pbr::OriginalName("k_EPartyMatchmakingFlags_None")] KEpartyMatchmakingFlagsNone = 0,
    [pbr::OriginalName("k_EPartyMatchmakingFlags_LargeRankSpread")] KEpartyMatchmakingFlagsLargeRankSpread = 1,
  }

  public enum EHighPriorityMMState {
    [pbr::OriginalName("k_EHighPriorityMM_Unknown")] KEhighPriorityMmUnknown = 0,
    [pbr::OriginalName("k_EHighPriorityMM_MissingMMData")] KEhighPriorityMmMissingMmdata = 1,
    [pbr::OriginalName("k_EHighPriorityMM_ResourceMissing")] KEhighPriorityMmResourceMissing = 2,
    [pbr::OriginalName("k_EHighPriorityMM_ManuallyDisabled")] KEhighPriorityMmManuallyDisabled = 3,
    [pbr::OriginalName("k_EHighPriorityMM_Min_Enabled")] KEhighPriorityMmMinEnabled = 64,
    [pbr::OriginalName("k_EHighPriorityMM_AllRolesSelected")] KEhighPriorityMmAllRolesSelected = 65,
    [pbr::OriginalName("k_EHighPriorityMM_UsingResource")] KEhighPriorityMmUsingResource = 66,
    [pbr::OriginalName("k_EHighPriorityMM_FiveStack")] KEhighPriorityMmFiveStack = 67,
    [pbr::OriginalName("k_EHighPriorityMM_HighDemand")] KEhighPriorityMmHighDemand = 68,
  }

  public enum EReadyCheckStatus {
    [pbr::OriginalName("k_EReadyCheckStatus_Unknown")] KEreadyCheckStatusUnknown = 0,
    [pbr::OriginalName("k_EReadyCheckStatus_NotReady")] KEreadyCheckStatusNotReady = 1,
    [pbr::OriginalName("k_EReadyCheckStatus_Ready")] KEreadyCheckStatusReady = 2,
  }

  public enum EReadyCheckRequestResult {
    [pbr::OriginalName("k_EReadyCheckRequestResult_Success")] KEreadyCheckRequestResultSuccess = 0,
    [pbr::OriginalName("k_EReadyCheckRequestResult_AlreadyInProgress")] KEreadyCheckRequestResultAlreadyInProgress = 1,
    [pbr::OriginalName("k_EReadyCheckRequestResult_NotInParty")] KEreadyCheckRequestResultNotInParty = 2,
    [pbr::OriginalName("k_EReadyCheckRequestResult_SendError")] KEreadyCheckRequestResultSendError = 3,
    [pbr::OriginalName("k_EReadyCheckRequestResult_UnknownError")] KEreadyCheckRequestResultUnknownError = 4,
  }

  public enum EMatchBehaviorScoreVariance {
    [pbr::OriginalName("k_EMatchBehaviorScoreVariance_Invalid")] KEmatchBehaviorScoreVarianceInvalid = 0,
    [pbr::OriginalName("k_EMatchBehaviorScoreVariance_Low")] KEmatchBehaviorScoreVarianceLow = 1,
    [pbr::OriginalName("k_EMatchBehaviorScoreVariance_Medium")] KEmatchBehaviorScoreVarianceMedium = 2,
    [pbr::OriginalName("k_EMatchBehaviorScoreVariance_High")] KEmatchBehaviorScoreVarianceHigh = 3,
  }

  #endregion

  #region Messages
  public sealed partial class CSODOTAPartyMember : pb::IMessage<CSODOTAPartyMember>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAPartyMember> _parser = new pb::MessageParser<CSODOTAPartyMember>(() => new CSODOTAPartyMember());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAPartyMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAPartyMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAPartyMember(CSODOTAPartyMember other) : this() {
      _hasBits0 = other._hasBits0;
      isCoach_ = other.isCoach_;
      regionPingCodes_ = other.regionPingCodes_.Clone();
      regionPingTimes_ = other.regionPingTimes_.Clone();
      regionPingFailedBitmask_ = other.regionPingFailedBitmask_;
      isPlusSubscriber_ = other.isPlusSubscriber_;
      tourneySkillLevel_ = other.tourneySkillLevel_;
      tourneyBuyin_ = other.tourneyBuyin_;
      tourneyPreventUntil_ = other.tourneyPreventUntil_;
      mmDataValid_ = other.mmDataValid_;
      laneSelectionFlags_ = other.laneSelectionFlags_;
      highPriorityDisabled_ = other.highPriorityDisabled_;
      hasHpResource_ = other.hasHpResource_;
      joinedFromPartyfinder_ = other.joinedFromPartyfinder_;
      isSteamChina_ = other.isSteamChina_;
      bannedHeroIds_ = other.bannedHeroIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAPartyMember Clone() {
      return new CSODOTAPartyMember(this);
    }

    /// <summary>Field number for the "is_coach" field.</summary>
    public const int IsCoachFieldNumber = 2;
    private readonly static bool IsCoachDefaultValue = false;

    private bool isCoach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCoach {
      get { if ((_hasBits0 & 1) != 0) { return isCoach_; } else { return IsCoachDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isCoach_ = value;
      }
    }
    /// <summary>Gets whether the "is_coach" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsCoach {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_coach" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsCoach() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "region_ping_codes" field.</summary>
    public const int RegionPingCodesFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_regionPingCodes_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> regionPingCodes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RegionPingCodes {
      get { return regionPingCodes_; }
    }

    /// <summary>Field number for the "region_ping_times" field.</summary>
    public const int RegionPingTimesFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_regionPingTimes_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> regionPingTimes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RegionPingTimes {
      get { return regionPingTimes_; }
    }

    /// <summary>Field number for the "region_ping_failed_bitmask" field.</summary>
    public const int RegionPingFailedBitmaskFieldNumber = 6;
    private readonly static uint RegionPingFailedBitmaskDefaultValue = 0;

    private uint regionPingFailedBitmask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RegionPingFailedBitmask {
      get { if ((_hasBits0 & 2) != 0) { return regionPingFailedBitmask_; } else { return RegionPingFailedBitmaskDefaultValue; } }
      set {
        _hasBits0 |= 2;
        regionPingFailedBitmask_ = value;
      }
    }
    /// <summary>Gets whether the "region_ping_failed_bitmask" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegionPingFailedBitmask {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "region_ping_failed_bitmask" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegionPingFailedBitmask() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_plus_subscriber" field.</summary>
    public const int IsPlusSubscriberFieldNumber = 10;
    private readonly static bool IsPlusSubscriberDefaultValue = false;

    private bool isPlusSubscriber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlusSubscriber {
      get { if ((_hasBits0 & 32) != 0) { return isPlusSubscriber_; } else { return IsPlusSubscriberDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isPlusSubscriber_ = value;
      }
    }
    /// <summary>Gets whether the "is_plus_subscriber" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPlusSubscriber {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_plus_subscriber" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPlusSubscriber() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "tourney_skill_level" field.</summary>
    public const int TourneySkillLevelFieldNumber = 7;
    private readonly static uint TourneySkillLevelDefaultValue = 0;

    private uint tourneySkillLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TourneySkillLevel {
      get { if ((_hasBits0 & 4) != 0) { return tourneySkillLevel_; } else { return TourneySkillLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tourneySkillLevel_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_skill_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneySkillLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "tourney_skill_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneySkillLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "tourney_buyin" field.</summary>
    public const int TourneyBuyinFieldNumber = 8;
    private readonly static uint TourneyBuyinDefaultValue = 0;

    private uint tourneyBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TourneyBuyin {
      get { if ((_hasBits0 & 8) != 0) { return tourneyBuyin_; } else { return TourneyBuyinDefaultValue; } }
      set {
        _hasBits0 |= 8;
        tourneyBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneyBuyin {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "tourney_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneyBuyin() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "tourney_prevent_until" field.</summary>
    public const int TourneyPreventUntilFieldNumber = 9;
    private readonly static uint TourneyPreventUntilDefaultValue = 0;

    private uint tourneyPreventUntil_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TourneyPreventUntil {
      get { if ((_hasBits0 & 16) != 0) { return tourneyPreventUntil_; } else { return TourneyPreventUntilDefaultValue; } }
      set {
        _hasBits0 |= 16;
        tourneyPreventUntil_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_prevent_until" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneyPreventUntil {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "tourney_prevent_until" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneyPreventUntil() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "mm_data_valid" field.</summary>
    public const int MmDataValidFieldNumber = 13;
    private readonly static bool MmDataValidDefaultValue = false;

    private bool mmDataValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MmDataValid {
      get { if ((_hasBits0 & 256) != 0) { return mmDataValid_; } else { return MmDataValidDefaultValue; } }
      set {
        _hasBits0 |= 256;
        mmDataValid_ = value;
      }
    }
    /// <summary>Gets whether the "mm_data_valid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMmDataValid {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "mm_data_valid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMmDataValid() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "lane_selection_flags" field.</summary>
    public const int LaneSelectionFlagsFieldNumber = 11;
    private readonly static uint LaneSelectionFlagsDefaultValue = 0;

    private uint laneSelectionFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LaneSelectionFlags {
      get { if ((_hasBits0 & 64) != 0) { return laneSelectionFlags_; } else { return LaneSelectionFlagsDefaultValue; } }
      set {
        _hasBits0 |= 64;
        laneSelectionFlags_ = value;
      }
    }
    /// <summary>Gets whether the "lane_selection_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneSelectionFlags {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "lane_selection_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneSelectionFlags() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "high_priority_disabled" field.</summary>
    public const int HighPriorityDisabledFieldNumber = 14;
    private readonly static bool HighPriorityDisabledDefaultValue = false;

    private bool highPriorityDisabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HighPriorityDisabled {
      get { if ((_hasBits0 & 512) != 0) { return highPriorityDisabled_; } else { return HighPriorityDisabledDefaultValue; } }
      set {
        _hasBits0 |= 512;
        highPriorityDisabled_ = value;
      }
    }
    /// <summary>Gets whether the "high_priority_disabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHighPriorityDisabled {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "high_priority_disabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHighPriorityDisabled() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "has_hp_resource" field.</summary>
    public const int HasHpResourceFieldNumber = 15;
    private readonly static bool HasHpResourceDefaultValue = false;

    private bool hasHpResource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHpResource {
      get { if ((_hasBits0 & 1024) != 0) { return hasHpResource_; } else { return HasHpResourceDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        hasHpResource_ = value;
      }
    }
    /// <summary>Gets whether the "has_hp_resource" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasHpResource {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "has_hp_resource" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasHpResource() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "joined_from_partyfinder" field.</summary>
    public const int JoinedFromPartyfinderFieldNumber = 12;
    private readonly static bool JoinedFromPartyfinderDefaultValue = false;

    private bool joinedFromPartyfinder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool JoinedFromPartyfinder {
      get { if ((_hasBits0 & 128) != 0) { return joinedFromPartyfinder_; } else { return JoinedFromPartyfinderDefaultValue; } }
      set {
        _hasBits0 |= 128;
        joinedFromPartyfinder_ = value;
      }
    }
    /// <summary>Gets whether the "joined_from_partyfinder" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJoinedFromPartyfinder {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "joined_from_partyfinder" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJoinedFromPartyfinder() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "is_steam_china" field.</summary>
    public const int IsSteamChinaFieldNumber = 16;
    private readonly static bool IsSteamChinaDefaultValue = false;

    private bool isSteamChina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSteamChina {
      get { if ((_hasBits0 & 2048) != 0) { return isSteamChina_; } else { return IsSteamChinaDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        isSteamChina_ = value;
      }
    }
    /// <summary>Gets whether the "is_steam_china" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsSteamChina {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "is_steam_china" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsSteamChina() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "banned_hero_ids" field.</summary>
    public const int BannedHeroIdsFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_bannedHeroIds_codec
        = pb::FieldCodec.ForInt32(136);
    private readonly pbc::RepeatedField<int> bannedHeroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BannedHeroIds {
      get { return bannedHeroIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAPartyMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAPartyMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsCoach != other.IsCoach) return false;
      if(!regionPingCodes_.Equals(other.regionPingCodes_)) return false;
      if(!regionPingTimes_.Equals(other.regionPingTimes_)) return false;
      if (RegionPingFailedBitmask != other.RegionPingFailedBitmask) return false;
      if (IsPlusSubscriber != other.IsPlusSubscriber) return false;
      if (TourneySkillLevel != other.TourneySkillLevel) return false;
      if (TourneyBuyin != other.TourneyBuyin) return false;
      if (TourneyPreventUntil != other.TourneyPreventUntil) return false;
      if (MmDataValid != other.MmDataValid) return false;
      if (LaneSelectionFlags != other.LaneSelectionFlags) return false;
      if (HighPriorityDisabled != other.HighPriorityDisabled) return false;
      if (HasHpResource != other.HasHpResource) return false;
      if (JoinedFromPartyfinder != other.JoinedFromPartyfinder) return false;
      if (IsSteamChina != other.IsSteamChina) return false;
      if(!bannedHeroIds_.Equals(other.bannedHeroIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsCoach) hash ^= IsCoach.GetHashCode();
      hash ^= regionPingCodes_.GetHashCode();
      hash ^= regionPingTimes_.GetHashCode();
      if (HasRegionPingFailedBitmask) hash ^= RegionPingFailedBitmask.GetHashCode();
      if (HasIsPlusSubscriber) hash ^= IsPlusSubscriber.GetHashCode();
      if (HasTourneySkillLevel) hash ^= TourneySkillLevel.GetHashCode();
      if (HasTourneyBuyin) hash ^= TourneyBuyin.GetHashCode();
      if (HasTourneyPreventUntil) hash ^= TourneyPreventUntil.GetHashCode();
      if (HasMmDataValid) hash ^= MmDataValid.GetHashCode();
      if (HasLaneSelectionFlags) hash ^= LaneSelectionFlags.GetHashCode();
      if (HasHighPriorityDisabled) hash ^= HighPriorityDisabled.GetHashCode();
      if (HasHasHpResource) hash ^= HasHpResource.GetHashCode();
      if (HasJoinedFromPartyfinder) hash ^= JoinedFromPartyfinder.GetHashCode();
      if (HasIsSteamChina) hash ^= IsSteamChina.GetHashCode();
      hash ^= bannedHeroIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsCoach) {
        output.WriteRawTag(16);
        output.WriteBool(IsCoach);
      }
      regionPingCodes_.WriteTo(output, _repeated_regionPingCodes_codec);
      regionPingTimes_.WriteTo(output, _repeated_regionPingTimes_codec);
      if (HasRegionPingFailedBitmask) {
        output.WriteRawTag(48);
        output.WriteUInt32(RegionPingFailedBitmask);
      }
      if (HasTourneySkillLevel) {
        output.WriteRawTag(56);
        output.WriteUInt32(TourneySkillLevel);
      }
      if (HasTourneyBuyin) {
        output.WriteRawTag(64);
        output.WriteUInt32(TourneyBuyin);
      }
      if (HasTourneyPreventUntil) {
        output.WriteRawTag(72);
        output.WriteUInt32(TourneyPreventUntil);
      }
      if (HasIsPlusSubscriber) {
        output.WriteRawTag(80);
        output.WriteBool(IsPlusSubscriber);
      }
      if (HasLaneSelectionFlags) {
        output.WriteRawTag(88);
        output.WriteUInt32(LaneSelectionFlags);
      }
      if (HasJoinedFromPartyfinder) {
        output.WriteRawTag(96);
        output.WriteBool(JoinedFromPartyfinder);
      }
      if (HasMmDataValid) {
        output.WriteRawTag(104);
        output.WriteBool(MmDataValid);
      }
      if (HasHighPriorityDisabled) {
        output.WriteRawTag(112);
        output.WriteBool(HighPriorityDisabled);
      }
      if (HasHasHpResource) {
        output.WriteRawTag(120);
        output.WriteBool(HasHpResource);
      }
      if (HasIsSteamChina) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsSteamChina);
      }
      bannedHeroIds_.WriteTo(output, _repeated_bannedHeroIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsCoach) {
        output.WriteRawTag(16);
        output.WriteBool(IsCoach);
      }
      regionPingCodes_.WriteTo(ref output, _repeated_regionPingCodes_codec);
      regionPingTimes_.WriteTo(ref output, _repeated_regionPingTimes_codec);
      if (HasRegionPingFailedBitmask) {
        output.WriteRawTag(48);
        output.WriteUInt32(RegionPingFailedBitmask);
      }
      if (HasTourneySkillLevel) {
        output.WriteRawTag(56);
        output.WriteUInt32(TourneySkillLevel);
      }
      if (HasTourneyBuyin) {
        output.WriteRawTag(64);
        output.WriteUInt32(TourneyBuyin);
      }
      if (HasTourneyPreventUntil) {
        output.WriteRawTag(72);
        output.WriteUInt32(TourneyPreventUntil);
      }
      if (HasIsPlusSubscriber) {
        output.WriteRawTag(80);
        output.WriteBool(IsPlusSubscriber);
      }
      if (HasLaneSelectionFlags) {
        output.WriteRawTag(88);
        output.WriteUInt32(LaneSelectionFlags);
      }
      if (HasJoinedFromPartyfinder) {
        output.WriteRawTag(96);
        output.WriteBool(JoinedFromPartyfinder);
      }
      if (HasMmDataValid) {
        output.WriteRawTag(104);
        output.WriteBool(MmDataValid);
      }
      if (HasHighPriorityDisabled) {
        output.WriteRawTag(112);
        output.WriteBool(HighPriorityDisabled);
      }
      if (HasHasHpResource) {
        output.WriteRawTag(120);
        output.WriteBool(HasHpResource);
      }
      if (HasIsSteamChina) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsSteamChina);
      }
      bannedHeroIds_.WriteTo(ref output, _repeated_bannedHeroIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIsCoach) {
        size += 1 + 1;
      }
      size += regionPingCodes_.CalculateSize(_repeated_regionPingCodes_codec);
      size += regionPingTimes_.CalculateSize(_repeated_regionPingTimes_codec);
      if (HasRegionPingFailedBitmask) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegionPingFailedBitmask);
      }
      if (HasIsPlusSubscriber) {
        size += 1 + 1;
      }
      if (HasTourneySkillLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TourneySkillLevel);
      }
      if (HasTourneyBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TourneyBuyin);
      }
      if (HasTourneyPreventUntil) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TourneyPreventUntil);
      }
      if (HasMmDataValid) {
        size += 1 + 1;
      }
      if (HasLaneSelectionFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LaneSelectionFlags);
      }
      if (HasHighPriorityDisabled) {
        size += 1 + 1;
      }
      if (HasHasHpResource) {
        size += 1 + 1;
      }
      if (HasJoinedFromPartyfinder) {
        size += 1 + 1;
      }
      if (HasIsSteamChina) {
        size += 2 + 1;
      }
      size += bannedHeroIds_.CalculateSize(_repeated_bannedHeroIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAPartyMember other) {
      if (other == null) {
        return;
      }
      if (other.HasIsCoach) {
        IsCoach = other.IsCoach;
      }
      regionPingCodes_.Add(other.regionPingCodes_);
      regionPingTimes_.Add(other.regionPingTimes_);
      if (other.HasRegionPingFailedBitmask) {
        RegionPingFailedBitmask = other.RegionPingFailedBitmask;
      }
      if (other.HasIsPlusSubscriber) {
        IsPlusSubscriber = other.IsPlusSubscriber;
      }
      if (other.HasTourneySkillLevel) {
        TourneySkillLevel = other.TourneySkillLevel;
      }
      if (other.HasTourneyBuyin) {
        TourneyBuyin = other.TourneyBuyin;
      }
      if (other.HasTourneyPreventUntil) {
        TourneyPreventUntil = other.TourneyPreventUntil;
      }
      if (other.HasMmDataValid) {
        MmDataValid = other.MmDataValid;
      }
      if (other.HasLaneSelectionFlags) {
        LaneSelectionFlags = other.LaneSelectionFlags;
      }
      if (other.HasHighPriorityDisabled) {
        HighPriorityDisabled = other.HighPriorityDisabled;
      }
      if (other.HasHasHpResource) {
        HasHpResource = other.HasHpResource;
      }
      if (other.HasJoinedFromPartyfinder) {
        JoinedFromPartyfinder = other.JoinedFromPartyfinder;
      }
      if (other.HasIsSteamChina) {
        IsSteamChina = other.IsSteamChina;
      }
      bannedHeroIds_.Add(other.bannedHeroIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            IsCoach = input.ReadBool();
            break;
          }
          case 34:
          case 32: {
            regionPingCodes_.AddEntriesFrom(input, _repeated_regionPingCodes_codec);
            break;
          }
          case 42:
          case 40: {
            regionPingTimes_.AddEntriesFrom(input, _repeated_regionPingTimes_codec);
            break;
          }
          case 48: {
            RegionPingFailedBitmask = input.ReadUInt32();
            break;
          }
          case 56: {
            TourneySkillLevel = input.ReadUInt32();
            break;
          }
          case 64: {
            TourneyBuyin = input.ReadUInt32();
            break;
          }
          case 72: {
            TourneyPreventUntil = input.ReadUInt32();
            break;
          }
          case 80: {
            IsPlusSubscriber = input.ReadBool();
            break;
          }
          case 88: {
            LaneSelectionFlags = input.ReadUInt32();
            break;
          }
          case 96: {
            JoinedFromPartyfinder = input.ReadBool();
            break;
          }
          case 104: {
            MmDataValid = input.ReadBool();
            break;
          }
          case 112: {
            HighPriorityDisabled = input.ReadBool();
            break;
          }
          case 120: {
            HasHpResource = input.ReadBool();
            break;
          }
          case 128: {
            IsSteamChina = input.ReadBool();
            break;
          }
          case 138:
          case 136: {
            bannedHeroIds_.AddEntriesFrom(input, _repeated_bannedHeroIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            IsCoach = input.ReadBool();
            break;
          }
          case 34:
          case 32: {
            regionPingCodes_.AddEntriesFrom(ref input, _repeated_regionPingCodes_codec);
            break;
          }
          case 42:
          case 40: {
            regionPingTimes_.AddEntriesFrom(ref input, _repeated_regionPingTimes_codec);
            break;
          }
          case 48: {
            RegionPingFailedBitmask = input.ReadUInt32();
            break;
          }
          case 56: {
            TourneySkillLevel = input.ReadUInt32();
            break;
          }
          case 64: {
            TourneyBuyin = input.ReadUInt32();
            break;
          }
          case 72: {
            TourneyPreventUntil = input.ReadUInt32();
            break;
          }
          case 80: {
            IsPlusSubscriber = input.ReadBool();
            break;
          }
          case 88: {
            LaneSelectionFlags = input.ReadUInt32();
            break;
          }
          case 96: {
            JoinedFromPartyfinder = input.ReadBool();
            break;
          }
          case 104: {
            MmDataValid = input.ReadBool();
            break;
          }
          case 112: {
            HighPriorityDisabled = input.ReadBool();
            break;
          }
          case 120: {
            HasHpResource = input.ReadBool();
            break;
          }
          case 128: {
            IsSteamChina = input.ReadBool();
            break;
          }
          case 138:
          case 136: {
            bannedHeroIds_.AddEntriesFrom(ref input, _repeated_bannedHeroIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSODOTAParty : pb::IMessage<CSODOTAParty>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAParty> _parser = new pb::MessageParser<CSODOTAParty>(() => new CSODOTAParty());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAParty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAParty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAParty(CSODOTAParty other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      partyId_ = other.partyId_;
      leaderId_ = other.leaderId_;
      memberIds_ = other.memberIds_.Clone();
      gameModes_ = other.gameModes_;
      state_ = other.state_;
      effectiveStartedMatchmakingTime_ = other.effectiveStartedMatchmakingTime_;
      rawStartedMatchmakingTime_ = other.rawStartedMatchmakingTime_;
      attemptStartTime_ = other.attemptStartTime_;
      attemptNum_ = other.attemptNum_;
      matchgroups_ = other.matchgroups_;
      lowPriorityAccountId_ = other.lowPriorityAccountId_;
      matchType_ = other.matchType_;
      teamId_ = other.teamId_;
      teamName_ = other.teamName_;
      teamUiLogo_ = other.teamUiLogo_;
      teamBaseLogo_ = other.teamBaseLogo_;
      matchDisabledUntilDate_ = other.matchDisabledUntilDate_;
      matchDisabledAccountId_ = other.matchDisabledAccountId_;
      matchmakingMaxRangeMinutes_ = other.matchmakingMaxRangeMinutes_;
      matchlanguages_ = other.matchlanguages_;
      members_ = other.members_.Clone();
      lowPriorityGamesRemaining_ = other.lowPriorityGamesRemaining_;
      openForJoinRequests_ = other.openForJoinRequests_;
      sentInvites_ = other.sentInvites_.Clone();
      recvInvites_ = other.recvInvites_.Clone();
      accountFlags_ = other.accountFlags_;
      regionSelectFlags_ = other.regionSelectFlags_;
      exclusiveTournamentId_ = other.exclusiveTournamentId_;
      tourneyDivisionId_ = other.tourneyDivisionId_;
      tourneyScheduleTime_ = other.tourneyScheduleTime_;
      tourneySkillLevel_ = other.tourneySkillLevel_;
      tourneyBracketRound_ = other.tourneyBracketRound_;
      tourneyQueueDeadlineTime_ = other.tourneyQueueDeadlineTime_;
      tourneyQueueDeadlineState_ = other.tourneyQueueDeadlineState_;
      partyBuilderSlotsToFill_ = other.partyBuilderSlotsToFill_;
      partyBuilderMatchGroups_ = other.partyBuilderMatchGroups_;
      partyBuilderStartTime_ = other.partyBuilderStartTime_;
      soloQueue_ = other.soloQueue_;
      steamClanAccountId_ = other.steamClanAccountId_;
      readyCheck_ = other.readyCheck_ != null ? other.readyCheck_.Clone() : null;
      customGameDisabledUntilDate_ = other.customGameDisabledUntilDate_;
      customGameDisabledAccountId_ = other.customGameDisabledAccountId_;
      isChallengeMatch_ = other.isChallengeMatch_;
      partySearchBeaconActive_ = other.partySearchBeaconActive_;
      matchmakingFlags_ = other.matchmakingFlags_;
      highPriorityState_ = other.highPriorityState_;
      laneSelectionsEnabled_ = other.laneSelectionsEnabled_;
      customGameDifficultyMask_ = other.customGameDifficultyMask_;
      isSteamChina_ = other.isSteamChina_;
      botDifficultyMask_ = other.botDifficultyMask_;
      botScriptIndexMask_ = other.botScriptIndexMask_;
      restrictedFromRanked_ = other.restrictedFromRanked_;
      restrictedFromRankedAccountId_ = other.restrictedFromRankedAccountId_;
      rankSpreadLikertScale_ = other.rankSpreadLikertScale_;
      behaviorScoreLikertScale_ = other.behaviorScoreLikertScale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAParty Clone() {
      return new CSODOTAParty(this);
    }

    /// <summary>Field number for the "party_id" field.</summary>
    public const int PartyIdFieldNumber = 1;
    private readonly static ulong PartyIdDefaultValue = 0UL;

    private ulong partyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PartyId {
      get { if ((_hasBits0 & 1) != 0) { return partyId_; } else { return PartyIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        partyId_ = value;
      }
    }
    /// <summary>Gets whether the "party_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartyId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "party_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartyId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leader_id" field.</summary>
    public const int LeaderIdFieldNumber = 2;
    private readonly static ulong LeaderIdDefaultValue = 0UL;

    private ulong leaderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderId {
      get { if ((_hasBits0 & 2) != 0) { return leaderId_; } else { return LeaderIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leaderId_ = value;
      }
    }
    /// <summary>Gets whether the "leader_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaderId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leader_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaderId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "member_ids" field.</summary>
    public const int MemberIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_memberIds_codec
        = pb::FieldCodec.ForFixed64(25);
    private readonly pbc::RepeatedField<ulong> memberIds_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> MemberIds {
      get { return memberIds_; }
    }

    /// <summary>Field number for the "game_modes" field.</summary>
    public const int GameModesFieldNumber = 4;
    private readonly static uint GameModesDefaultValue = 0;

    private uint gameModes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameModes {
      get { if ((_hasBits0 & 4) != 0) { return gameModes_; } else { return GameModesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        gameModes_ = value;
      }
    }
    /// <summary>Gets whether the "game_modes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameModes {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "game_modes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameModes() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private readonly static global::Steam.Protos.Dota2.CSODOTAParty.Types.State StateDefaultValue = global::Steam.Protos.Dota2.CSODOTAParty.Types.State.Ui;

    private global::Steam.Protos.Dota2.CSODOTAParty.Types.State state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CSODOTAParty.Types.State State {
      get { if ((_hasBits0 & 8) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "effective_started_matchmaking_time" field.</summary>
    public const int EffectiveStartedMatchmakingTimeFieldNumber = 7;
    private readonly static uint EffectiveStartedMatchmakingTimeDefaultValue = 0;

    private uint effectiveStartedMatchmakingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectiveStartedMatchmakingTime {
      get { if ((_hasBits0 & 16) != 0) { return effectiveStartedMatchmakingTime_; } else { return EffectiveStartedMatchmakingTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        effectiveStartedMatchmakingTime_ = value;
      }
    }
    /// <summary>Gets whether the "effective_started_matchmaking_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEffectiveStartedMatchmakingTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "effective_started_matchmaking_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffectiveStartedMatchmakingTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "raw_started_matchmaking_time" field.</summary>
    public const int RawStartedMatchmakingTimeFieldNumber = 32;
    private readonly static uint RawStartedMatchmakingTimeDefaultValue = 0;

    private uint rawStartedMatchmakingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RawStartedMatchmakingTime {
      get { if ((_hasBits0 & 8192) != 0) { return rawStartedMatchmakingTime_; } else { return RawStartedMatchmakingTimeDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        rawStartedMatchmakingTime_ = value;
      }
    }
    /// <summary>Gets whether the "raw_started_matchmaking_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRawStartedMatchmakingTime {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "raw_started_matchmaking_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRawStartedMatchmakingTime() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "attempt_start_time" field.</summary>
    public const int AttemptStartTimeFieldNumber = 33;
    private readonly static uint AttemptStartTimeDefaultValue = 0;

    private uint attemptStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttemptStartTime {
      get { if ((_hasBits0 & 16384) != 0) { return attemptStartTime_; } else { return AttemptStartTimeDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        attemptStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "attempt_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttemptStartTime {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "attempt_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttemptStartTime() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "attempt_num" field.</summary>
    public const int AttemptNumFieldNumber = 34;
    private readonly static uint AttemptNumDefaultValue = 0;

    private uint attemptNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttemptNum {
      get { if ((_hasBits0 & 32768) != 0) { return attemptNum_; } else { return AttemptNumDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        attemptNum_ = value;
      }
    }
    /// <summary>Gets whether the "attempt_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttemptNum {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "attempt_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttemptNum() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "matchgroups" field.</summary>
    public const int MatchgroupsFieldNumber = 11;
    private readonly static uint MatchgroupsDefaultValue = 0;

    private uint matchgroups_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Matchgroups {
      get { if ((_hasBits0 & 32) != 0) { return matchgroups_; } else { return MatchgroupsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        matchgroups_ = value;
      }
    }
    /// <summary>Gets whether the "matchgroups" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchgroups {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "matchgroups" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchgroups() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "low_priority_account_id" field.</summary>
    public const int LowPriorityAccountIdFieldNumber = 19;
    private readonly static uint LowPriorityAccountIdDefaultValue = 0;

    private uint lowPriorityAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LowPriorityAccountId {
      get { if ((_hasBits0 & 64) != 0) { return lowPriorityAccountId_; } else { return LowPriorityAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        lowPriorityAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "low_priority_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLowPriorityAccountId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "low_priority_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowPriorityAccountId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 21;
    private readonly static global::Steam.Protos.Dota2.MatchType MatchTypeDefaultValue = global::Steam.Protos.Dota2.MatchType.Casual;

    private global::Steam.Protos.Dota2.MatchType matchType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.MatchType MatchType {
      get { if ((_hasBits0 & 128) != 0) { return matchType_; } else { return MatchTypeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        matchType_ = value;
      }
    }
    /// <summary>Gets whether the "match_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchType {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "match_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchType() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 23;
    private readonly static uint TeamIdDefaultValue = 0;

    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { if ((_hasBits0 & 256) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
      set {
        _hasBits0 |= 256;
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamId {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamId() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "team_name" field.</summary>
    public const int TeamNameFieldNumber = 51;
    private readonly static string TeamNameDefaultValue = "";

    private string teamName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamName {
      get { return teamName_ ?? TeamNameDefaultValue; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "team_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamName {
      get { return teamName_ != null; }
    }
    /// <summary>Clears the value of the "team_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamName() {
      teamName_ = null;
    }

    /// <summary>Field number for the "team_ui_logo" field.</summary>
    public const int TeamUiLogoFieldNumber = 52;
    private readonly static ulong TeamUiLogoDefaultValue = 0UL;

    private ulong teamUiLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamUiLogo {
      get { if ((_hasBits0 & 33554432) != 0) { return teamUiLogo_; } else { return TeamUiLogoDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        teamUiLogo_ = value;
      }
    }
    /// <summary>Gets whether the "team_ui_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamUiLogo {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "team_ui_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamUiLogo() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "team_base_logo" field.</summary>
    public const int TeamBaseLogoFieldNumber = 53;
    private readonly static ulong TeamBaseLogoDefaultValue = 0UL;

    private ulong teamBaseLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamBaseLogo {
      get { if ((_hasBits0 & 67108864) != 0) { return teamBaseLogo_; } else { return TeamBaseLogoDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        teamBaseLogo_ = value;
      }
    }
    /// <summary>Gets whether the "team_base_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamBaseLogo {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "team_base_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamBaseLogo() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "match_disabled_until_date" field.</summary>
    public const int MatchDisabledUntilDateFieldNumber = 24;
    private readonly static uint MatchDisabledUntilDateDefaultValue = 0;

    private uint matchDisabledUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchDisabledUntilDate {
      get { if ((_hasBits0 & 512) != 0) { return matchDisabledUntilDate_; } else { return MatchDisabledUntilDateDefaultValue; } }
      set {
        _hasBits0 |= 512;
        matchDisabledUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "match_disabled_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchDisabledUntilDate {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "match_disabled_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchDisabledUntilDate() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "match_disabled_account_id" field.</summary>
    public const int MatchDisabledAccountIdFieldNumber = 25;
    private readonly static uint MatchDisabledAccountIdDefaultValue = 0;

    private uint matchDisabledAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchDisabledAccountId {
      get { if ((_hasBits0 & 1024) != 0) { return matchDisabledAccountId_; } else { return MatchDisabledAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        matchDisabledAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "match_disabled_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchDisabledAccountId {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "match_disabled_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchDisabledAccountId() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "matchmaking_max_range_minutes" field.</summary>
    public const int MatchmakingMaxRangeMinutesFieldNumber = 26;
    private readonly static uint MatchmakingMaxRangeMinutesDefaultValue = 0;

    private uint matchmakingMaxRangeMinutes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchmakingMaxRangeMinutes {
      get { if ((_hasBits0 & 2048) != 0) { return matchmakingMaxRangeMinutes_; } else { return MatchmakingMaxRangeMinutesDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        matchmakingMaxRangeMinutes_ = value;
      }
    }
    /// <summary>Gets whether the "matchmaking_max_range_minutes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchmakingMaxRangeMinutes {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "matchmaking_max_range_minutes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchmakingMaxRangeMinutes() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "matchlanguages" field.</summary>
    public const int MatchlanguagesFieldNumber = 27;
    private readonly static uint MatchlanguagesDefaultValue = 0;

    private uint matchlanguages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Matchlanguages {
      get { if ((_hasBits0 & 4096) != 0) { return matchlanguages_; } else { return MatchlanguagesDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        matchlanguages_ = value;
      }
    }
    /// <summary>Gets whether the "matchlanguages" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchlanguages {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "matchlanguages" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchlanguages() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 29;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTAPartyMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(234, global::Steam.Protos.Dota2.CSODOTAPartyMember.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyMember> members_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "low_priority_games_remaining" field.</summary>
    public const int LowPriorityGamesRemainingFieldNumber = 35;
    private readonly static uint LowPriorityGamesRemainingDefaultValue = 0;

    private uint lowPriorityGamesRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LowPriorityGamesRemaining {
      get { if ((_hasBits0 & 65536) != 0) { return lowPriorityGamesRemaining_; } else { return LowPriorityGamesRemainingDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        lowPriorityGamesRemaining_ = value;
      }
    }
    /// <summary>Gets whether the "low_priority_games_remaining" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLowPriorityGamesRemaining {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "low_priority_games_remaining" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowPriorityGamesRemaining() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "open_for_join_requests" field.</summary>
    public const int OpenForJoinRequestsFieldNumber = 40;
    private readonly static bool OpenForJoinRequestsDefaultValue = false;

    private bool openForJoinRequests_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenForJoinRequests {
      get { if ((_hasBits0 & 131072) != 0) { return openForJoinRequests_; } else { return OpenForJoinRequestsDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        openForJoinRequests_ = value;
      }
    }
    /// <summary>Gets whether the "open_for_join_requests" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOpenForJoinRequests {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "open_for_join_requests" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOpenForJoinRequests() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "sent_invites" field.</summary>
    public const int SentInvitesFieldNumber = 41;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTAPartyInvite> _repeated_sentInvites_codec
        = pb::FieldCodec.ForMessage(330, global::Steam.Protos.Dota2.CSODOTAPartyInvite.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyInvite> sentInvites_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyInvite>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyInvite> SentInvites {
      get { return sentInvites_; }
    }

    /// <summary>Field number for the "recv_invites" field.</summary>
    public const int RecvInvitesFieldNumber = 42;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTAPartyInvite> _repeated_recvInvites_codec
        = pb::FieldCodec.ForMessage(338, global::Steam.Protos.Dota2.CSODOTAPartyInvite.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyInvite> recvInvites_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyInvite>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyInvite> RecvInvites {
      get { return recvInvites_; }
    }

    /// <summary>Field number for the "account_flags" field.</summary>
    public const int AccountFlagsFieldNumber = 43;
    private readonly static uint AccountFlagsDefaultValue = 0;

    private uint accountFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountFlags {
      get { if ((_hasBits0 & 262144) != 0) { return accountFlags_; } else { return AccountFlagsDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        accountFlags_ = value;
      }
    }
    /// <summary>Gets whether the "account_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountFlags {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "account_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountFlags() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "region_select_flags" field.</summary>
    public const int RegionSelectFlagsFieldNumber = 44;
    private readonly static uint RegionSelectFlagsDefaultValue = 0;

    private uint regionSelectFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RegionSelectFlags {
      get { if ((_hasBits0 & 524288) != 0) { return regionSelectFlags_; } else { return RegionSelectFlagsDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        regionSelectFlags_ = value;
      }
    }
    /// <summary>Gets whether the "region_select_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegionSelectFlags {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "region_select_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegionSelectFlags() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "exclusive_tournament_id" field.</summary>
    public const int ExclusiveTournamentIdFieldNumber = 45;
    private readonly static uint ExclusiveTournamentIdDefaultValue = 0;

    private uint exclusiveTournamentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExclusiveTournamentId {
      get { if ((_hasBits0 & 1048576) != 0) { return exclusiveTournamentId_; } else { return ExclusiveTournamentIdDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        exclusiveTournamentId_ = value;
      }
    }
    /// <summary>Gets whether the "exclusive_tournament_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExclusiveTournamentId {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "exclusive_tournament_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExclusiveTournamentId() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "tourney_division_id" field.</summary>
    public const int TourneyDivisionIdFieldNumber = 47;
    private readonly static uint TourneyDivisionIdDefaultValue = 0;

    private uint tourneyDivisionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TourneyDivisionId {
      get { if ((_hasBits0 & 2097152) != 0) { return tourneyDivisionId_; } else { return TourneyDivisionIdDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        tourneyDivisionId_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_division_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneyDivisionId {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "tourney_division_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneyDivisionId() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "tourney_schedule_time" field.</summary>
    public const int TourneyScheduleTimeFieldNumber = 48;
    private readonly static uint TourneyScheduleTimeDefaultValue = 0;

    private uint tourneyScheduleTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TourneyScheduleTime {
      get { if ((_hasBits0 & 4194304) != 0) { return tourneyScheduleTime_; } else { return TourneyScheduleTimeDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        tourneyScheduleTime_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_schedule_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneyScheduleTime {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "tourney_schedule_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneyScheduleTime() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "tourney_skill_level" field.</summary>
    public const int TourneySkillLevelFieldNumber = 49;
    private readonly static uint TourneySkillLevelDefaultValue = 0;

    private uint tourneySkillLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TourneySkillLevel {
      get { if ((_hasBits0 & 8388608) != 0) { return tourneySkillLevel_; } else { return TourneySkillLevelDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        tourneySkillLevel_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_skill_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneySkillLevel {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "tourney_skill_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneySkillLevel() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "tourney_bracket_round" field.</summary>
    public const int TourneyBracketRoundFieldNumber = 50;
    private readonly static uint TourneyBracketRoundDefaultValue = 0;

    private uint tourneyBracketRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TourneyBracketRound {
      get { if ((_hasBits0 & 16777216) != 0) { return tourneyBracketRound_; } else { return TourneyBracketRoundDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        tourneyBracketRound_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_bracket_round" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneyBracketRound {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "tourney_bracket_round" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneyBracketRound() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "tourney_queue_deadline_time" field.</summary>
    public const int TourneyQueueDeadlineTimeFieldNumber = 54;
    private readonly static uint TourneyQueueDeadlineTimeDefaultValue = 0;

    private uint tourneyQueueDeadlineTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TourneyQueueDeadlineTime {
      get { if ((_hasBits0 & 134217728) != 0) { return tourneyQueueDeadlineTime_; } else { return TourneyQueueDeadlineTimeDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        tourneyQueueDeadlineTime_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_queue_deadline_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneyQueueDeadlineTime {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "tourney_queue_deadline_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneyQueueDeadlineTime() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "tourney_queue_deadline_state" field.</summary>
    public const int TourneyQueueDeadlineStateFieldNumber = 55;
    private readonly static global::Steam.Protos.Dota2.ETourneyQueueDeadlineState TourneyQueueDeadlineStateDefaultValue = global::Steam.Protos.Dota2.ETourneyQueueDeadlineState.KEtourneyQueueDeadlineStateNormal;

    private global::Steam.Protos.Dota2.ETourneyQueueDeadlineState tourneyQueueDeadlineState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.ETourneyQueueDeadlineState TourneyQueueDeadlineState {
      get { if ((_hasBits0 & 268435456) != 0) { return tourneyQueueDeadlineState_; } else { return TourneyQueueDeadlineStateDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        tourneyQueueDeadlineState_ = value;
      }
    }
    /// <summary>Gets whether the "tourney_queue_deadline_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTourneyQueueDeadlineState {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "tourney_queue_deadline_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTourneyQueueDeadlineState() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "party_builder_slots_to_fill" field.</summary>
    public const int PartyBuilderSlotsToFillFieldNumber = 56;
    private readonly static uint PartyBuilderSlotsToFillDefaultValue = 0;

    private uint partyBuilderSlotsToFill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartyBuilderSlotsToFill {
      get { if ((_hasBits0 & 536870912) != 0) { return partyBuilderSlotsToFill_; } else { return PartyBuilderSlotsToFillDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        partyBuilderSlotsToFill_ = value;
      }
    }
    /// <summary>Gets whether the "party_builder_slots_to_fill" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartyBuilderSlotsToFill {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "party_builder_slots_to_fill" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartyBuilderSlotsToFill() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "party_builder_match_groups" field.</summary>
    public const int PartyBuilderMatchGroupsFieldNumber = 57;
    private readonly static uint PartyBuilderMatchGroupsDefaultValue = 0;

    private uint partyBuilderMatchGroups_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartyBuilderMatchGroups {
      get { if ((_hasBits0 & 1073741824) != 0) { return partyBuilderMatchGroups_; } else { return PartyBuilderMatchGroupsDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        partyBuilderMatchGroups_ = value;
      }
    }
    /// <summary>Gets whether the "party_builder_match_groups" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartyBuilderMatchGroups {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "party_builder_match_groups" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartyBuilderMatchGroups() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "party_builder_start_time" field.</summary>
    public const int PartyBuilderStartTimeFieldNumber = 58;
    private readonly static uint PartyBuilderStartTimeDefaultValue = 0;

    private uint partyBuilderStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartyBuilderStartTime {
      get { if ((_hasBits0 & -2147483648) != 0) { return partyBuilderStartTime_; } else { return PartyBuilderStartTimeDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        partyBuilderStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "party_builder_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartyBuilderStartTime {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "party_builder_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartyBuilderStartTime() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "solo_queue" field.</summary>
    public const int SoloQueueFieldNumber = 59;
    private readonly static bool SoloQueueDefaultValue = false;

    private bool soloQueue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SoloQueue {
      get { if ((_hasBits1 & 1) != 0) { return soloQueue_; } else { return SoloQueueDefaultValue; } }
      set {
        _hasBits1 |= 1;
        soloQueue_ = value;
      }
    }
    /// <summary>Gets whether the "solo_queue" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSoloQueue {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "solo_queue" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSoloQueue() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "steam_clan_account_id" field.</summary>
    public const int SteamClanAccountIdFieldNumber = 61;
    private readonly static uint SteamClanAccountIdDefaultValue = 0;

    private uint steamClanAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SteamClanAccountId {
      get { if ((_hasBits1 & 2) != 0) { return steamClanAccountId_; } else { return SteamClanAccountIdDefaultValue; } }
      set {
        _hasBits1 |= 2;
        steamClanAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "steam_clan_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSteamClanAccountId {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "steam_clan_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSteamClanAccountId() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "ready_check" field.</summary>
    public const int ReadyCheckFieldNumber = 62;
    private global::Steam.Protos.Dota2.CMsgReadyCheckStatus readyCheck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgReadyCheckStatus ReadyCheck {
      get { return readyCheck_; }
      set {
        readyCheck_ = value;
      }
    }

    /// <summary>Field number for the "custom_game_disabled_until_date" field.</summary>
    public const int CustomGameDisabledUntilDateFieldNumber = 63;
    private readonly static uint CustomGameDisabledUntilDateDefaultValue = 0;

    private uint customGameDisabledUntilDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CustomGameDisabledUntilDate {
      get { if ((_hasBits1 & 4) != 0) { return customGameDisabledUntilDate_; } else { return CustomGameDisabledUntilDateDefaultValue; } }
      set {
        _hasBits1 |= 4;
        customGameDisabledUntilDate_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_disabled_until_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameDisabledUntilDate {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_disabled_until_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameDisabledUntilDate() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "custom_game_disabled_account_id" field.</summary>
    public const int CustomGameDisabledAccountIdFieldNumber = 64;
    private readonly static uint CustomGameDisabledAccountIdDefaultValue = 0;

    private uint customGameDisabledAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CustomGameDisabledAccountId {
      get { if ((_hasBits1 & 8) != 0) { return customGameDisabledAccountId_; } else { return CustomGameDisabledAccountIdDefaultValue; } }
      set {
        _hasBits1 |= 8;
        customGameDisabledAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_disabled_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameDisabledAccountId {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_disabled_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameDisabledAccountId() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "is_challenge_match" field.</summary>
    public const int IsChallengeMatchFieldNumber = 65;
    private readonly static bool IsChallengeMatchDefaultValue = false;

    private bool isChallengeMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsChallengeMatch {
      get { if ((_hasBits1 & 16) != 0) { return isChallengeMatch_; } else { return IsChallengeMatchDefaultValue; } }
      set {
        _hasBits1 |= 16;
        isChallengeMatch_ = value;
      }
    }
    /// <summary>Gets whether the "is_challenge_match" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsChallengeMatch {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_challenge_match" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsChallengeMatch() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "party_search_beacon_active" field.</summary>
    public const int PartySearchBeaconActiveFieldNumber = 66;
    private readonly static bool PartySearchBeaconActiveDefaultValue = false;

    private bool partySearchBeaconActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PartySearchBeaconActive {
      get { if ((_hasBits1 & 32) != 0) { return partySearchBeaconActive_; } else { return PartySearchBeaconActiveDefaultValue; } }
      set {
        _hasBits1 |= 32;
        partySearchBeaconActive_ = value;
      }
    }
    /// <summary>Gets whether the "party_search_beacon_active" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartySearchBeaconActive {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "party_search_beacon_active" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartySearchBeaconActive() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "matchmaking_flags" field.</summary>
    public const int MatchmakingFlagsFieldNumber = 67;
    private readonly static uint MatchmakingFlagsDefaultValue = 0;

    private uint matchmakingFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchmakingFlags {
      get { if ((_hasBits1 & 64) != 0) { return matchmakingFlags_; } else { return MatchmakingFlagsDefaultValue; } }
      set {
        _hasBits1 |= 64;
        matchmakingFlags_ = value;
      }
    }
    /// <summary>Gets whether the "matchmaking_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchmakingFlags {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "matchmaking_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchmakingFlags() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "high_priority_state" field.</summary>
    public const int HighPriorityStateFieldNumber = 68;
    private readonly static global::Steam.Protos.Dota2.EHighPriorityMMState HighPriorityStateDefaultValue = global::Steam.Protos.Dota2.EHighPriorityMMState.KEhighPriorityMmUnknown;

    private global::Steam.Protos.Dota2.EHighPriorityMMState highPriorityState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EHighPriorityMMState HighPriorityState {
      get { if ((_hasBits1 & 128) != 0) { return highPriorityState_; } else { return HighPriorityStateDefaultValue; } }
      set {
        _hasBits1 |= 128;
        highPriorityState_ = value;
      }
    }
    /// <summary>Gets whether the "high_priority_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHighPriorityState {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "high_priority_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHighPriorityState() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "lane_selections_enabled" field.</summary>
    public const int LaneSelectionsEnabledFieldNumber = 69;
    private readonly static bool LaneSelectionsEnabledDefaultValue = false;

    private bool laneSelectionsEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LaneSelectionsEnabled {
      get { if ((_hasBits1 & 256) != 0) { return laneSelectionsEnabled_; } else { return LaneSelectionsEnabledDefaultValue; } }
      set {
        _hasBits1 |= 256;
        laneSelectionsEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "lane_selections_enabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneSelectionsEnabled {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "lane_selections_enabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneSelectionsEnabled() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "custom_game_difficulty_mask" field.</summary>
    public const int CustomGameDifficultyMaskFieldNumber = 70;
    private readonly static uint CustomGameDifficultyMaskDefaultValue = 0;

    private uint customGameDifficultyMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CustomGameDifficultyMask {
      get { if ((_hasBits1 & 512) != 0) { return customGameDifficultyMask_; } else { return CustomGameDifficultyMaskDefaultValue; } }
      set {
        _hasBits1 |= 512;
        customGameDifficultyMask_ = value;
      }
    }
    /// <summary>Gets whether the "custom_game_difficulty_mask" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomGameDifficultyMask {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "custom_game_difficulty_mask" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomGameDifficultyMask() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "is_steam_china" field.</summary>
    public const int IsSteamChinaFieldNumber = 71;
    private readonly static bool IsSteamChinaDefaultValue = false;

    private bool isSteamChina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSteamChina {
      get { if ((_hasBits1 & 1024) != 0) { return isSteamChina_; } else { return IsSteamChinaDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        isSteamChina_ = value;
      }
    }
    /// <summary>Gets whether the "is_steam_china" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsSteamChina {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "is_steam_china" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsSteamChina() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "bot_difficulty_mask" field.</summary>
    public const int BotDifficultyMaskFieldNumber = 72;
    private readonly static uint BotDifficultyMaskDefaultValue = 0;

    private uint botDifficultyMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BotDifficultyMask {
      get { if ((_hasBits1 & 2048) != 0) { return botDifficultyMask_; } else { return BotDifficultyMaskDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        botDifficultyMask_ = value;
      }
    }
    /// <summary>Gets whether the "bot_difficulty_mask" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBotDifficultyMask {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "bot_difficulty_mask" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBotDifficultyMask() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "bot_script_index_mask" field.</summary>
    public const int BotScriptIndexMaskFieldNumber = 73;
    private readonly static uint BotScriptIndexMaskDefaultValue = 0;

    private uint botScriptIndexMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BotScriptIndexMask {
      get { if ((_hasBits1 & 4096) != 0) { return botScriptIndexMask_; } else { return BotScriptIndexMaskDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        botScriptIndexMask_ = value;
      }
    }
    /// <summary>Gets whether the "bot_script_index_mask" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBotScriptIndexMask {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "bot_script_index_mask" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBotScriptIndexMask() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "restricted_from_ranked" field.</summary>
    public const int RestrictedFromRankedFieldNumber = 74;
    private readonly static bool RestrictedFromRankedDefaultValue = false;

    private bool restrictedFromRanked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictedFromRanked {
      get { if ((_hasBits1 & 8192) != 0) { return restrictedFromRanked_; } else { return RestrictedFromRankedDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        restrictedFromRanked_ = value;
      }
    }
    /// <summary>Gets whether the "restricted_from_ranked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRestrictedFromRanked {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "restricted_from_ranked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRestrictedFromRanked() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "restricted_from_ranked_account_id" field.</summary>
    public const int RestrictedFromRankedAccountIdFieldNumber = 75;
    private readonly static uint RestrictedFromRankedAccountIdDefaultValue = 0;

    private uint restrictedFromRankedAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RestrictedFromRankedAccountId {
      get { if ((_hasBits1 & 16384) != 0) { return restrictedFromRankedAccountId_; } else { return RestrictedFromRankedAccountIdDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        restrictedFromRankedAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "restricted_from_ranked_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRestrictedFromRankedAccountId {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "restricted_from_ranked_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRestrictedFromRankedAccountId() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "rank_spread_likert_scale" field.</summary>
    public const int RankSpreadLikertScaleFieldNumber = 76;
    private readonly static uint RankSpreadLikertScaleDefaultValue = 0;

    private uint rankSpreadLikertScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankSpreadLikertScale {
      get { if ((_hasBits1 & 32768) != 0) { return rankSpreadLikertScale_; } else { return RankSpreadLikertScaleDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        rankSpreadLikertScale_ = value;
      }
    }
    /// <summary>Gets whether the "rank_spread_likert_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRankSpreadLikertScale {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "rank_spread_likert_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRankSpreadLikertScale() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "behavior_score_likert_scale" field.</summary>
    public const int BehaviorScoreLikertScaleFieldNumber = 77;
    private readonly static uint BehaviorScoreLikertScaleDefaultValue = 0;

    private uint behaviorScoreLikertScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BehaviorScoreLikertScale {
      get { if ((_hasBits1 & 65536) != 0) { return behaviorScoreLikertScale_; } else { return BehaviorScoreLikertScaleDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        behaviorScoreLikertScale_ = value;
      }
    }
    /// <summary>Gets whether the "behavior_score_likert_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBehaviorScoreLikertScale {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "behavior_score_likert_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBehaviorScoreLikertScale() {
      _hasBits1 &= ~65536;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAParty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAParty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartyId != other.PartyId) return false;
      if (LeaderId != other.LeaderId) return false;
      if(!memberIds_.Equals(other.memberIds_)) return false;
      if (GameModes != other.GameModes) return false;
      if (State != other.State) return false;
      if (EffectiveStartedMatchmakingTime != other.EffectiveStartedMatchmakingTime) return false;
      if (RawStartedMatchmakingTime != other.RawStartedMatchmakingTime) return false;
      if (AttemptStartTime != other.AttemptStartTime) return false;
      if (AttemptNum != other.AttemptNum) return false;
      if (Matchgroups != other.Matchgroups) return false;
      if (LowPriorityAccountId != other.LowPriorityAccountId) return false;
      if (MatchType != other.MatchType) return false;
      if (TeamId != other.TeamId) return false;
      if (TeamName != other.TeamName) return false;
      if (TeamUiLogo != other.TeamUiLogo) return false;
      if (TeamBaseLogo != other.TeamBaseLogo) return false;
      if (MatchDisabledUntilDate != other.MatchDisabledUntilDate) return false;
      if (MatchDisabledAccountId != other.MatchDisabledAccountId) return false;
      if (MatchmakingMaxRangeMinutes != other.MatchmakingMaxRangeMinutes) return false;
      if (Matchlanguages != other.Matchlanguages) return false;
      if(!members_.Equals(other.members_)) return false;
      if (LowPriorityGamesRemaining != other.LowPriorityGamesRemaining) return false;
      if (OpenForJoinRequests != other.OpenForJoinRequests) return false;
      if(!sentInvites_.Equals(other.sentInvites_)) return false;
      if(!recvInvites_.Equals(other.recvInvites_)) return false;
      if (AccountFlags != other.AccountFlags) return false;
      if (RegionSelectFlags != other.RegionSelectFlags) return false;
      if (ExclusiveTournamentId != other.ExclusiveTournamentId) return false;
      if (TourneyDivisionId != other.TourneyDivisionId) return false;
      if (TourneyScheduleTime != other.TourneyScheduleTime) return false;
      if (TourneySkillLevel != other.TourneySkillLevel) return false;
      if (TourneyBracketRound != other.TourneyBracketRound) return false;
      if (TourneyQueueDeadlineTime != other.TourneyQueueDeadlineTime) return false;
      if (TourneyQueueDeadlineState != other.TourneyQueueDeadlineState) return false;
      if (PartyBuilderSlotsToFill != other.PartyBuilderSlotsToFill) return false;
      if (PartyBuilderMatchGroups != other.PartyBuilderMatchGroups) return false;
      if (PartyBuilderStartTime != other.PartyBuilderStartTime) return false;
      if (SoloQueue != other.SoloQueue) return false;
      if (SteamClanAccountId != other.SteamClanAccountId) return false;
      if (!object.Equals(ReadyCheck, other.ReadyCheck)) return false;
      if (CustomGameDisabledUntilDate != other.CustomGameDisabledUntilDate) return false;
      if (CustomGameDisabledAccountId != other.CustomGameDisabledAccountId) return false;
      if (IsChallengeMatch != other.IsChallengeMatch) return false;
      if (PartySearchBeaconActive != other.PartySearchBeaconActive) return false;
      if (MatchmakingFlags != other.MatchmakingFlags) return false;
      if (HighPriorityState != other.HighPriorityState) return false;
      if (LaneSelectionsEnabled != other.LaneSelectionsEnabled) return false;
      if (CustomGameDifficultyMask != other.CustomGameDifficultyMask) return false;
      if (IsSteamChina != other.IsSteamChina) return false;
      if (BotDifficultyMask != other.BotDifficultyMask) return false;
      if (BotScriptIndexMask != other.BotScriptIndexMask) return false;
      if (RestrictedFromRanked != other.RestrictedFromRanked) return false;
      if (RestrictedFromRankedAccountId != other.RestrictedFromRankedAccountId) return false;
      if (RankSpreadLikertScale != other.RankSpreadLikertScale) return false;
      if (BehaviorScoreLikertScale != other.BehaviorScoreLikertScale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPartyId) hash ^= PartyId.GetHashCode();
      if (HasLeaderId) hash ^= LeaderId.GetHashCode();
      hash ^= memberIds_.GetHashCode();
      if (HasGameModes) hash ^= GameModes.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasEffectiveStartedMatchmakingTime) hash ^= EffectiveStartedMatchmakingTime.GetHashCode();
      if (HasRawStartedMatchmakingTime) hash ^= RawStartedMatchmakingTime.GetHashCode();
      if (HasAttemptStartTime) hash ^= AttemptStartTime.GetHashCode();
      if (HasAttemptNum) hash ^= AttemptNum.GetHashCode();
      if (HasMatchgroups) hash ^= Matchgroups.GetHashCode();
      if (HasLowPriorityAccountId) hash ^= LowPriorityAccountId.GetHashCode();
      if (HasMatchType) hash ^= MatchType.GetHashCode();
      if (HasTeamId) hash ^= TeamId.GetHashCode();
      if (HasTeamName) hash ^= TeamName.GetHashCode();
      if (HasTeamUiLogo) hash ^= TeamUiLogo.GetHashCode();
      if (HasTeamBaseLogo) hash ^= TeamBaseLogo.GetHashCode();
      if (HasMatchDisabledUntilDate) hash ^= MatchDisabledUntilDate.GetHashCode();
      if (HasMatchDisabledAccountId) hash ^= MatchDisabledAccountId.GetHashCode();
      if (HasMatchmakingMaxRangeMinutes) hash ^= MatchmakingMaxRangeMinutes.GetHashCode();
      if (HasMatchlanguages) hash ^= Matchlanguages.GetHashCode();
      hash ^= members_.GetHashCode();
      if (HasLowPriorityGamesRemaining) hash ^= LowPriorityGamesRemaining.GetHashCode();
      if (HasOpenForJoinRequests) hash ^= OpenForJoinRequests.GetHashCode();
      hash ^= sentInvites_.GetHashCode();
      hash ^= recvInvites_.GetHashCode();
      if (HasAccountFlags) hash ^= AccountFlags.GetHashCode();
      if (HasRegionSelectFlags) hash ^= RegionSelectFlags.GetHashCode();
      if (HasExclusiveTournamentId) hash ^= ExclusiveTournamentId.GetHashCode();
      if (HasTourneyDivisionId) hash ^= TourneyDivisionId.GetHashCode();
      if (HasTourneyScheduleTime) hash ^= TourneyScheduleTime.GetHashCode();
      if (HasTourneySkillLevel) hash ^= TourneySkillLevel.GetHashCode();
      if (HasTourneyBracketRound) hash ^= TourneyBracketRound.GetHashCode();
      if (HasTourneyQueueDeadlineTime) hash ^= TourneyQueueDeadlineTime.GetHashCode();
      if (HasTourneyQueueDeadlineState) hash ^= TourneyQueueDeadlineState.GetHashCode();
      if (HasPartyBuilderSlotsToFill) hash ^= PartyBuilderSlotsToFill.GetHashCode();
      if (HasPartyBuilderMatchGroups) hash ^= PartyBuilderMatchGroups.GetHashCode();
      if (HasPartyBuilderStartTime) hash ^= PartyBuilderStartTime.GetHashCode();
      if (HasSoloQueue) hash ^= SoloQueue.GetHashCode();
      if (HasSteamClanAccountId) hash ^= SteamClanAccountId.GetHashCode();
      if (readyCheck_ != null) hash ^= ReadyCheck.GetHashCode();
      if (HasCustomGameDisabledUntilDate) hash ^= CustomGameDisabledUntilDate.GetHashCode();
      if (HasCustomGameDisabledAccountId) hash ^= CustomGameDisabledAccountId.GetHashCode();
      if (HasIsChallengeMatch) hash ^= IsChallengeMatch.GetHashCode();
      if (HasPartySearchBeaconActive) hash ^= PartySearchBeaconActive.GetHashCode();
      if (HasMatchmakingFlags) hash ^= MatchmakingFlags.GetHashCode();
      if (HasHighPriorityState) hash ^= HighPriorityState.GetHashCode();
      if (HasLaneSelectionsEnabled) hash ^= LaneSelectionsEnabled.GetHashCode();
      if (HasCustomGameDifficultyMask) hash ^= CustomGameDifficultyMask.GetHashCode();
      if (HasIsSteamChina) hash ^= IsSteamChina.GetHashCode();
      if (HasBotDifficultyMask) hash ^= BotDifficultyMask.GetHashCode();
      if (HasBotScriptIndexMask) hash ^= BotScriptIndexMask.GetHashCode();
      if (HasRestrictedFromRanked) hash ^= RestrictedFromRanked.GetHashCode();
      if (HasRestrictedFromRankedAccountId) hash ^= RestrictedFromRankedAccountId.GetHashCode();
      if (HasRankSpreadLikertScale) hash ^= RankSpreadLikertScale.GetHashCode();
      if (HasBehaviorScoreLikertScale) hash ^= BehaviorScoreLikertScale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPartyId) {
        output.WriteRawTag(8);
        output.WriteUInt64(PartyId);
      }
      if (HasLeaderId) {
        output.WriteRawTag(17);
        output.WriteFixed64(LeaderId);
      }
      memberIds_.WriteTo(output, _repeated_memberIds_codec);
      if (HasGameModes) {
        output.WriteRawTag(32);
        output.WriteUInt32(GameModes);
      }
      if (HasState) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (HasEffectiveStartedMatchmakingTime) {
        output.WriteRawTag(56);
        output.WriteUInt32(EffectiveStartedMatchmakingTime);
      }
      if (HasMatchgroups) {
        output.WriteRawTag(88);
        output.WriteUInt32(Matchgroups);
      }
      if (HasLowPriorityAccountId) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(LowPriorityAccountId);
      }
      if (HasMatchType) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) MatchType);
      }
      if (HasTeamId) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(TeamId);
      }
      if (HasMatchDisabledUntilDate) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(MatchDisabledUntilDate);
      }
      if (HasMatchDisabledAccountId) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(MatchDisabledAccountId);
      }
      if (HasMatchmakingMaxRangeMinutes) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(MatchmakingMaxRangeMinutes);
      }
      if (HasMatchlanguages) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Matchlanguages);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (HasRawStartedMatchmakingTime) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(RawStartedMatchmakingTime);
      }
      if (HasAttemptStartTime) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(AttemptStartTime);
      }
      if (HasAttemptNum) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(AttemptNum);
      }
      if (HasLowPriorityGamesRemaining) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(LowPriorityGamesRemaining);
      }
      if (HasOpenForJoinRequests) {
        output.WriteRawTag(192, 2);
        output.WriteBool(OpenForJoinRequests);
      }
      sentInvites_.WriteTo(output, _repeated_sentInvites_codec);
      recvInvites_.WriteTo(output, _repeated_recvInvites_codec);
      if (HasAccountFlags) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(AccountFlags);
      }
      if (HasRegionSelectFlags) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(RegionSelectFlags);
      }
      if (HasExclusiveTournamentId) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(ExclusiveTournamentId);
      }
      if (HasTourneyDivisionId) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(TourneyDivisionId);
      }
      if (HasTourneyScheduleTime) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(TourneyScheduleTime);
      }
      if (HasTourneySkillLevel) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(TourneySkillLevel);
      }
      if (HasTourneyBracketRound) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(TourneyBracketRound);
      }
      if (HasTeamName) {
        output.WriteRawTag(154, 3);
        output.WriteString(TeamName);
      }
      if (HasTeamUiLogo) {
        output.WriteRawTag(160, 3);
        output.WriteUInt64(TeamUiLogo);
      }
      if (HasTeamBaseLogo) {
        output.WriteRawTag(168, 3);
        output.WriteUInt64(TeamBaseLogo);
      }
      if (HasTourneyQueueDeadlineTime) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(TourneyQueueDeadlineTime);
      }
      if (HasTourneyQueueDeadlineState) {
        output.WriteRawTag(184, 3);
        output.WriteEnum((int) TourneyQueueDeadlineState);
      }
      if (HasPartyBuilderSlotsToFill) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(PartyBuilderSlotsToFill);
      }
      if (HasPartyBuilderMatchGroups) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(PartyBuilderMatchGroups);
      }
      if (HasPartyBuilderStartTime) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(PartyBuilderStartTime);
      }
      if (HasSoloQueue) {
        output.WriteRawTag(216, 3);
        output.WriteBool(SoloQueue);
      }
      if (HasSteamClanAccountId) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(SteamClanAccountId);
      }
      if (readyCheck_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(ReadyCheck);
      }
      if (HasCustomGameDisabledUntilDate) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(CustomGameDisabledUntilDate);
      }
      if (HasCustomGameDisabledAccountId) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(CustomGameDisabledAccountId);
      }
      if (HasIsChallengeMatch) {
        output.WriteRawTag(136, 4);
        output.WriteBool(IsChallengeMatch);
      }
      if (HasPartySearchBeaconActive) {
        output.WriteRawTag(144, 4);
        output.WriteBool(PartySearchBeaconActive);
      }
      if (HasMatchmakingFlags) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(MatchmakingFlags);
      }
      if (HasHighPriorityState) {
        output.WriteRawTag(160, 4);
        output.WriteEnum((int) HighPriorityState);
      }
      if (HasLaneSelectionsEnabled) {
        output.WriteRawTag(168, 4);
        output.WriteBool(LaneSelectionsEnabled);
      }
      if (HasCustomGameDifficultyMask) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(CustomGameDifficultyMask);
      }
      if (HasIsSteamChina) {
        output.WriteRawTag(184, 4);
        output.WriteBool(IsSteamChina);
      }
      if (HasBotDifficultyMask) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(BotDifficultyMask);
      }
      if (HasBotScriptIndexMask) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(BotScriptIndexMask);
      }
      if (HasRestrictedFromRanked) {
        output.WriteRawTag(208, 4);
        output.WriteBool(RestrictedFromRanked);
      }
      if (HasRestrictedFromRankedAccountId) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(RestrictedFromRankedAccountId);
      }
      if (HasRankSpreadLikertScale) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(RankSpreadLikertScale);
      }
      if (HasBehaviorScoreLikertScale) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(BehaviorScoreLikertScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPartyId) {
        output.WriteRawTag(8);
        output.WriteUInt64(PartyId);
      }
      if (HasLeaderId) {
        output.WriteRawTag(17);
        output.WriteFixed64(LeaderId);
      }
      memberIds_.WriteTo(ref output, _repeated_memberIds_codec);
      if (HasGameModes) {
        output.WriteRawTag(32);
        output.WriteUInt32(GameModes);
      }
      if (HasState) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (HasEffectiveStartedMatchmakingTime) {
        output.WriteRawTag(56);
        output.WriteUInt32(EffectiveStartedMatchmakingTime);
      }
      if (HasMatchgroups) {
        output.WriteRawTag(88);
        output.WriteUInt32(Matchgroups);
      }
      if (HasLowPriorityAccountId) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(LowPriorityAccountId);
      }
      if (HasMatchType) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) MatchType);
      }
      if (HasTeamId) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(TeamId);
      }
      if (HasMatchDisabledUntilDate) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(MatchDisabledUntilDate);
      }
      if (HasMatchDisabledAccountId) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(MatchDisabledAccountId);
      }
      if (HasMatchmakingMaxRangeMinutes) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(MatchmakingMaxRangeMinutes);
      }
      if (HasMatchlanguages) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Matchlanguages);
      }
      members_.WriteTo(ref output, _repeated_members_codec);
      if (HasRawStartedMatchmakingTime) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(RawStartedMatchmakingTime);
      }
      if (HasAttemptStartTime) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(AttemptStartTime);
      }
      if (HasAttemptNum) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(AttemptNum);
      }
      if (HasLowPriorityGamesRemaining) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(LowPriorityGamesRemaining);
      }
      if (HasOpenForJoinRequests) {
        output.WriteRawTag(192, 2);
        output.WriteBool(OpenForJoinRequests);
      }
      sentInvites_.WriteTo(ref output, _repeated_sentInvites_codec);
      recvInvites_.WriteTo(ref output, _repeated_recvInvites_codec);
      if (HasAccountFlags) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(AccountFlags);
      }
      if (HasRegionSelectFlags) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(RegionSelectFlags);
      }
      if (HasExclusiveTournamentId) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(ExclusiveTournamentId);
      }
      if (HasTourneyDivisionId) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(TourneyDivisionId);
      }
      if (HasTourneyScheduleTime) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(TourneyScheduleTime);
      }
      if (HasTourneySkillLevel) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(TourneySkillLevel);
      }
      if (HasTourneyBracketRound) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(TourneyBracketRound);
      }
      if (HasTeamName) {
        output.WriteRawTag(154, 3);
        output.WriteString(TeamName);
      }
      if (HasTeamUiLogo) {
        output.WriteRawTag(160, 3);
        output.WriteUInt64(TeamUiLogo);
      }
      if (HasTeamBaseLogo) {
        output.WriteRawTag(168, 3);
        output.WriteUInt64(TeamBaseLogo);
      }
      if (HasTourneyQueueDeadlineTime) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(TourneyQueueDeadlineTime);
      }
      if (HasTourneyQueueDeadlineState) {
        output.WriteRawTag(184, 3);
        output.WriteEnum((int) TourneyQueueDeadlineState);
      }
      if (HasPartyBuilderSlotsToFill) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(PartyBuilderSlotsToFill);
      }
      if (HasPartyBuilderMatchGroups) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(PartyBuilderMatchGroups);
      }
      if (HasPartyBuilderStartTime) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(PartyBuilderStartTime);
      }
      if (HasSoloQueue) {
        output.WriteRawTag(216, 3);
        output.WriteBool(SoloQueue);
      }
      if (HasSteamClanAccountId) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(SteamClanAccountId);
      }
      if (readyCheck_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(ReadyCheck);
      }
      if (HasCustomGameDisabledUntilDate) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(CustomGameDisabledUntilDate);
      }
      if (HasCustomGameDisabledAccountId) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(CustomGameDisabledAccountId);
      }
      if (HasIsChallengeMatch) {
        output.WriteRawTag(136, 4);
        output.WriteBool(IsChallengeMatch);
      }
      if (HasPartySearchBeaconActive) {
        output.WriteRawTag(144, 4);
        output.WriteBool(PartySearchBeaconActive);
      }
      if (HasMatchmakingFlags) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(MatchmakingFlags);
      }
      if (HasHighPriorityState) {
        output.WriteRawTag(160, 4);
        output.WriteEnum((int) HighPriorityState);
      }
      if (HasLaneSelectionsEnabled) {
        output.WriteRawTag(168, 4);
        output.WriteBool(LaneSelectionsEnabled);
      }
      if (HasCustomGameDifficultyMask) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(CustomGameDifficultyMask);
      }
      if (HasIsSteamChina) {
        output.WriteRawTag(184, 4);
        output.WriteBool(IsSteamChina);
      }
      if (HasBotDifficultyMask) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(BotDifficultyMask);
      }
      if (HasBotScriptIndexMask) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(BotScriptIndexMask);
      }
      if (HasRestrictedFromRanked) {
        output.WriteRawTag(208, 4);
        output.WriteBool(RestrictedFromRanked);
      }
      if (HasRestrictedFromRankedAccountId) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(RestrictedFromRankedAccountId);
      }
      if (HasRankSpreadLikertScale) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(RankSpreadLikertScale);
      }
      if (HasBehaviorScoreLikertScale) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(BehaviorScoreLikertScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPartyId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PartyId);
      }
      if (HasLeaderId) {
        size += 1 + 8;
      }
      size += memberIds_.CalculateSize(_repeated_memberIds_codec);
      if (HasGameModes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameModes);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (HasEffectiveStartedMatchmakingTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectiveStartedMatchmakingTime);
      }
      if (HasRawStartedMatchmakingTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RawStartedMatchmakingTime);
      }
      if (HasAttemptStartTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttemptStartTime);
      }
      if (HasAttemptNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttemptNum);
      }
      if (HasMatchgroups) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Matchgroups);
      }
      if (HasLowPriorityAccountId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LowPriorityAccountId);
      }
      if (HasMatchType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (HasTeamId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (HasTeamName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (HasTeamUiLogo) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TeamUiLogo);
      }
      if (HasTeamBaseLogo) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TeamBaseLogo);
      }
      if (HasMatchDisabledUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchDisabledUntilDate);
      }
      if (HasMatchDisabledAccountId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchDisabledAccountId);
      }
      if (HasMatchmakingMaxRangeMinutes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchmakingMaxRangeMinutes);
      }
      if (HasMatchlanguages) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Matchlanguages);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (HasLowPriorityGamesRemaining) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LowPriorityGamesRemaining);
      }
      if (HasOpenForJoinRequests) {
        size += 2 + 1;
      }
      size += sentInvites_.CalculateSize(_repeated_sentInvites_codec);
      size += recvInvites_.CalculateSize(_repeated_recvInvites_codec);
      if (HasAccountFlags) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AccountFlags);
      }
      if (HasRegionSelectFlags) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RegionSelectFlags);
      }
      if (HasExclusiveTournamentId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExclusiveTournamentId);
      }
      if (HasTourneyDivisionId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TourneyDivisionId);
      }
      if (HasTourneyScheduleTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TourneyScheduleTime);
      }
      if (HasTourneySkillLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TourneySkillLevel);
      }
      if (HasTourneyBracketRound) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TourneyBracketRound);
      }
      if (HasTourneyQueueDeadlineTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TourneyQueueDeadlineTime);
      }
      if (HasTourneyQueueDeadlineState) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TourneyQueueDeadlineState);
      }
      if (HasPartyBuilderSlotsToFill) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PartyBuilderSlotsToFill);
      }
      if (HasPartyBuilderMatchGroups) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PartyBuilderMatchGroups);
      }
      if (HasPartyBuilderStartTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PartyBuilderStartTime);
      }
      if (HasSoloQueue) {
        size += 2 + 1;
      }
      if (HasSteamClanAccountId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SteamClanAccountId);
      }
      if (readyCheck_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReadyCheck);
      }
      if (HasCustomGameDisabledUntilDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CustomGameDisabledUntilDate);
      }
      if (HasCustomGameDisabledAccountId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CustomGameDisabledAccountId);
      }
      if (HasIsChallengeMatch) {
        size += 2 + 1;
      }
      if (HasPartySearchBeaconActive) {
        size += 2 + 1;
      }
      if (HasMatchmakingFlags) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchmakingFlags);
      }
      if (HasHighPriorityState) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HighPriorityState);
      }
      if (HasLaneSelectionsEnabled) {
        size += 2 + 1;
      }
      if (HasCustomGameDifficultyMask) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CustomGameDifficultyMask);
      }
      if (HasIsSteamChina) {
        size += 2 + 1;
      }
      if (HasBotDifficultyMask) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BotDifficultyMask);
      }
      if (HasBotScriptIndexMask) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BotScriptIndexMask);
      }
      if (HasRestrictedFromRanked) {
        size += 2 + 1;
      }
      if (HasRestrictedFromRankedAccountId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RestrictedFromRankedAccountId);
      }
      if (HasRankSpreadLikertScale) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RankSpreadLikertScale);
      }
      if (HasBehaviorScoreLikertScale) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BehaviorScoreLikertScale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAParty other) {
      if (other == null) {
        return;
      }
      if (other.HasPartyId) {
        PartyId = other.PartyId;
      }
      if (other.HasLeaderId) {
        LeaderId = other.LeaderId;
      }
      memberIds_.Add(other.memberIds_);
      if (other.HasGameModes) {
        GameModes = other.GameModes;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasEffectiveStartedMatchmakingTime) {
        EffectiveStartedMatchmakingTime = other.EffectiveStartedMatchmakingTime;
      }
      if (other.HasRawStartedMatchmakingTime) {
        RawStartedMatchmakingTime = other.RawStartedMatchmakingTime;
      }
      if (other.HasAttemptStartTime) {
        AttemptStartTime = other.AttemptStartTime;
      }
      if (other.HasAttemptNum) {
        AttemptNum = other.AttemptNum;
      }
      if (other.HasMatchgroups) {
        Matchgroups = other.Matchgroups;
      }
      if (other.HasLowPriorityAccountId) {
        LowPriorityAccountId = other.LowPriorityAccountId;
      }
      if (other.HasMatchType) {
        MatchType = other.MatchType;
      }
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      if (other.HasTeamName) {
        TeamName = other.TeamName;
      }
      if (other.HasTeamUiLogo) {
        TeamUiLogo = other.TeamUiLogo;
      }
      if (other.HasTeamBaseLogo) {
        TeamBaseLogo = other.TeamBaseLogo;
      }
      if (other.HasMatchDisabledUntilDate) {
        MatchDisabledUntilDate = other.MatchDisabledUntilDate;
      }
      if (other.HasMatchDisabledAccountId) {
        MatchDisabledAccountId = other.MatchDisabledAccountId;
      }
      if (other.HasMatchmakingMaxRangeMinutes) {
        MatchmakingMaxRangeMinutes = other.MatchmakingMaxRangeMinutes;
      }
      if (other.HasMatchlanguages) {
        Matchlanguages = other.Matchlanguages;
      }
      members_.Add(other.members_);
      if (other.HasLowPriorityGamesRemaining) {
        LowPriorityGamesRemaining = other.LowPriorityGamesRemaining;
      }
      if (other.HasOpenForJoinRequests) {
        OpenForJoinRequests = other.OpenForJoinRequests;
      }
      sentInvites_.Add(other.sentInvites_);
      recvInvites_.Add(other.recvInvites_);
      if (other.HasAccountFlags) {
        AccountFlags = other.AccountFlags;
      }
      if (other.HasRegionSelectFlags) {
        RegionSelectFlags = other.RegionSelectFlags;
      }
      if (other.HasExclusiveTournamentId) {
        ExclusiveTournamentId = other.ExclusiveTournamentId;
      }
      if (other.HasTourneyDivisionId) {
        TourneyDivisionId = other.TourneyDivisionId;
      }
      if (other.HasTourneyScheduleTime) {
        TourneyScheduleTime = other.TourneyScheduleTime;
      }
      if (other.HasTourneySkillLevel) {
        TourneySkillLevel = other.TourneySkillLevel;
      }
      if (other.HasTourneyBracketRound) {
        TourneyBracketRound = other.TourneyBracketRound;
      }
      if (other.HasTourneyQueueDeadlineTime) {
        TourneyQueueDeadlineTime = other.TourneyQueueDeadlineTime;
      }
      if (other.HasTourneyQueueDeadlineState) {
        TourneyQueueDeadlineState = other.TourneyQueueDeadlineState;
      }
      if (other.HasPartyBuilderSlotsToFill) {
        PartyBuilderSlotsToFill = other.PartyBuilderSlotsToFill;
      }
      if (other.HasPartyBuilderMatchGroups) {
        PartyBuilderMatchGroups = other.PartyBuilderMatchGroups;
      }
      if (other.HasPartyBuilderStartTime) {
        PartyBuilderStartTime = other.PartyBuilderStartTime;
      }
      if (other.HasSoloQueue) {
        SoloQueue = other.SoloQueue;
      }
      if (other.HasSteamClanAccountId) {
        SteamClanAccountId = other.SteamClanAccountId;
      }
      if (other.readyCheck_ != null) {
        if (readyCheck_ == null) {
          ReadyCheck = new global::Steam.Protos.Dota2.CMsgReadyCheckStatus();
        }
        ReadyCheck.MergeFrom(other.ReadyCheck);
      }
      if (other.HasCustomGameDisabledUntilDate) {
        CustomGameDisabledUntilDate = other.CustomGameDisabledUntilDate;
      }
      if (other.HasCustomGameDisabledAccountId) {
        CustomGameDisabledAccountId = other.CustomGameDisabledAccountId;
      }
      if (other.HasIsChallengeMatch) {
        IsChallengeMatch = other.IsChallengeMatch;
      }
      if (other.HasPartySearchBeaconActive) {
        PartySearchBeaconActive = other.PartySearchBeaconActive;
      }
      if (other.HasMatchmakingFlags) {
        MatchmakingFlags = other.MatchmakingFlags;
      }
      if (other.HasHighPriorityState) {
        HighPriorityState = other.HighPriorityState;
      }
      if (other.HasLaneSelectionsEnabled) {
        LaneSelectionsEnabled = other.LaneSelectionsEnabled;
      }
      if (other.HasCustomGameDifficultyMask) {
        CustomGameDifficultyMask = other.CustomGameDifficultyMask;
      }
      if (other.HasIsSteamChina) {
        IsSteamChina = other.IsSteamChina;
      }
      if (other.HasBotDifficultyMask) {
        BotDifficultyMask = other.BotDifficultyMask;
      }
      if (other.HasBotScriptIndexMask) {
        BotScriptIndexMask = other.BotScriptIndexMask;
      }
      if (other.HasRestrictedFromRanked) {
        RestrictedFromRanked = other.RestrictedFromRanked;
      }
      if (other.HasRestrictedFromRankedAccountId) {
        RestrictedFromRankedAccountId = other.RestrictedFromRankedAccountId;
      }
      if (other.HasRankSpreadLikertScale) {
        RankSpreadLikertScale = other.RankSpreadLikertScale;
      }
      if (other.HasBehaviorScoreLikertScale) {
        BehaviorScoreLikertScale = other.BehaviorScoreLikertScale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PartyId = input.ReadUInt64();
            break;
          }
          case 17: {
            LeaderId = input.ReadFixed64();
            break;
          }
          case 26:
          case 25: {
            memberIds_.AddEntriesFrom(input, _repeated_memberIds_codec);
            break;
          }
          case 32: {
            GameModes = input.ReadUInt32();
            break;
          }
          case 48: {
            State = (global::Steam.Protos.Dota2.CSODOTAParty.Types.State) input.ReadEnum();
            break;
          }
          case 56: {
            EffectiveStartedMatchmakingTime = input.ReadUInt32();
            break;
          }
          case 88: {
            Matchgroups = input.ReadUInt32();
            break;
          }
          case 152: {
            LowPriorityAccountId = input.ReadUInt32();
            break;
          }
          case 168: {
            MatchType = (global::Steam.Protos.Dota2.MatchType) input.ReadEnum();
            break;
          }
          case 184: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 192: {
            MatchDisabledUntilDate = input.ReadUInt32();
            break;
          }
          case 200: {
            MatchDisabledAccountId = input.ReadUInt32();
            break;
          }
          case 208: {
            MatchmakingMaxRangeMinutes = input.ReadUInt32();
            break;
          }
          case 216: {
            Matchlanguages = input.ReadUInt32();
            break;
          }
          case 234: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 256: {
            RawStartedMatchmakingTime = input.ReadUInt32();
            break;
          }
          case 264: {
            AttemptStartTime = input.ReadUInt32();
            break;
          }
          case 272: {
            AttemptNum = input.ReadUInt32();
            break;
          }
          case 280: {
            LowPriorityGamesRemaining = input.ReadUInt32();
            break;
          }
          case 320: {
            OpenForJoinRequests = input.ReadBool();
            break;
          }
          case 330: {
            sentInvites_.AddEntriesFrom(input, _repeated_sentInvites_codec);
            break;
          }
          case 338: {
            recvInvites_.AddEntriesFrom(input, _repeated_recvInvites_codec);
            break;
          }
          case 344: {
            AccountFlags = input.ReadUInt32();
            break;
          }
          case 352: {
            RegionSelectFlags = input.ReadUInt32();
            break;
          }
          case 360: {
            ExclusiveTournamentId = input.ReadUInt32();
            break;
          }
          case 376: {
            TourneyDivisionId = input.ReadUInt32();
            break;
          }
          case 384: {
            TourneyScheduleTime = input.ReadUInt32();
            break;
          }
          case 392: {
            TourneySkillLevel = input.ReadUInt32();
            break;
          }
          case 400: {
            TourneyBracketRound = input.ReadUInt32();
            break;
          }
          case 410: {
            TeamName = input.ReadString();
            break;
          }
          case 416: {
            TeamUiLogo = input.ReadUInt64();
            break;
          }
          case 424: {
            TeamBaseLogo = input.ReadUInt64();
            break;
          }
          case 432: {
            TourneyQueueDeadlineTime = input.ReadUInt32();
            break;
          }
          case 440: {
            TourneyQueueDeadlineState = (global::Steam.Protos.Dota2.ETourneyQueueDeadlineState) input.ReadEnum();
            break;
          }
          case 448: {
            PartyBuilderSlotsToFill = input.ReadUInt32();
            break;
          }
          case 456: {
            PartyBuilderMatchGroups = input.ReadUInt32();
            break;
          }
          case 464: {
            PartyBuilderStartTime = input.ReadUInt32();
            break;
          }
          case 472: {
            SoloQueue = input.ReadBool();
            break;
          }
          case 488: {
            SteamClanAccountId = input.ReadUInt32();
            break;
          }
          case 498: {
            if (readyCheck_ == null) {
              ReadyCheck = new global::Steam.Protos.Dota2.CMsgReadyCheckStatus();
            }
            input.ReadMessage(ReadyCheck);
            break;
          }
          case 504: {
            CustomGameDisabledUntilDate = input.ReadUInt32();
            break;
          }
          case 512: {
            CustomGameDisabledAccountId = input.ReadUInt32();
            break;
          }
          case 520: {
            IsChallengeMatch = input.ReadBool();
            break;
          }
          case 528: {
            PartySearchBeaconActive = input.ReadBool();
            break;
          }
          case 536: {
            MatchmakingFlags = input.ReadUInt32();
            break;
          }
          case 544: {
            HighPriorityState = (global::Steam.Protos.Dota2.EHighPriorityMMState) input.ReadEnum();
            break;
          }
          case 552: {
            LaneSelectionsEnabled = input.ReadBool();
            break;
          }
          case 560: {
            CustomGameDifficultyMask = input.ReadUInt32();
            break;
          }
          case 568: {
            IsSteamChina = input.ReadBool();
            break;
          }
          case 576: {
            BotDifficultyMask = input.ReadUInt32();
            break;
          }
          case 584: {
            BotScriptIndexMask = input.ReadUInt32();
            break;
          }
          case 592: {
            RestrictedFromRanked = input.ReadBool();
            break;
          }
          case 600: {
            RestrictedFromRankedAccountId = input.ReadUInt32();
            break;
          }
          case 608: {
            RankSpreadLikertScale = input.ReadUInt32();
            break;
          }
          case 616: {
            BehaviorScoreLikertScale = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PartyId = input.ReadUInt64();
            break;
          }
          case 17: {
            LeaderId = input.ReadFixed64();
            break;
          }
          case 26:
          case 25: {
            memberIds_.AddEntriesFrom(ref input, _repeated_memberIds_codec);
            break;
          }
          case 32: {
            GameModes = input.ReadUInt32();
            break;
          }
          case 48: {
            State = (global::Steam.Protos.Dota2.CSODOTAParty.Types.State) input.ReadEnum();
            break;
          }
          case 56: {
            EffectiveStartedMatchmakingTime = input.ReadUInt32();
            break;
          }
          case 88: {
            Matchgroups = input.ReadUInt32();
            break;
          }
          case 152: {
            LowPriorityAccountId = input.ReadUInt32();
            break;
          }
          case 168: {
            MatchType = (global::Steam.Protos.Dota2.MatchType) input.ReadEnum();
            break;
          }
          case 184: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 192: {
            MatchDisabledUntilDate = input.ReadUInt32();
            break;
          }
          case 200: {
            MatchDisabledAccountId = input.ReadUInt32();
            break;
          }
          case 208: {
            MatchmakingMaxRangeMinutes = input.ReadUInt32();
            break;
          }
          case 216: {
            Matchlanguages = input.ReadUInt32();
            break;
          }
          case 234: {
            members_.AddEntriesFrom(ref input, _repeated_members_codec);
            break;
          }
          case 256: {
            RawStartedMatchmakingTime = input.ReadUInt32();
            break;
          }
          case 264: {
            AttemptStartTime = input.ReadUInt32();
            break;
          }
          case 272: {
            AttemptNum = input.ReadUInt32();
            break;
          }
          case 280: {
            LowPriorityGamesRemaining = input.ReadUInt32();
            break;
          }
          case 320: {
            OpenForJoinRequests = input.ReadBool();
            break;
          }
          case 330: {
            sentInvites_.AddEntriesFrom(ref input, _repeated_sentInvites_codec);
            break;
          }
          case 338: {
            recvInvites_.AddEntriesFrom(ref input, _repeated_recvInvites_codec);
            break;
          }
          case 344: {
            AccountFlags = input.ReadUInt32();
            break;
          }
          case 352: {
            RegionSelectFlags = input.ReadUInt32();
            break;
          }
          case 360: {
            ExclusiveTournamentId = input.ReadUInt32();
            break;
          }
          case 376: {
            TourneyDivisionId = input.ReadUInt32();
            break;
          }
          case 384: {
            TourneyScheduleTime = input.ReadUInt32();
            break;
          }
          case 392: {
            TourneySkillLevel = input.ReadUInt32();
            break;
          }
          case 400: {
            TourneyBracketRound = input.ReadUInt32();
            break;
          }
          case 410: {
            TeamName = input.ReadString();
            break;
          }
          case 416: {
            TeamUiLogo = input.ReadUInt64();
            break;
          }
          case 424: {
            TeamBaseLogo = input.ReadUInt64();
            break;
          }
          case 432: {
            TourneyQueueDeadlineTime = input.ReadUInt32();
            break;
          }
          case 440: {
            TourneyQueueDeadlineState = (global::Steam.Protos.Dota2.ETourneyQueueDeadlineState) input.ReadEnum();
            break;
          }
          case 448: {
            PartyBuilderSlotsToFill = input.ReadUInt32();
            break;
          }
          case 456: {
            PartyBuilderMatchGroups = input.ReadUInt32();
            break;
          }
          case 464: {
            PartyBuilderStartTime = input.ReadUInt32();
            break;
          }
          case 472: {
            SoloQueue = input.ReadBool();
            break;
          }
          case 488: {
            SteamClanAccountId = input.ReadUInt32();
            break;
          }
          case 498: {
            if (readyCheck_ == null) {
              ReadyCheck = new global::Steam.Protos.Dota2.CMsgReadyCheckStatus();
            }
            input.ReadMessage(ReadyCheck);
            break;
          }
          case 504: {
            CustomGameDisabledUntilDate = input.ReadUInt32();
            break;
          }
          case 512: {
            CustomGameDisabledAccountId = input.ReadUInt32();
            break;
          }
          case 520: {
            IsChallengeMatch = input.ReadBool();
            break;
          }
          case 528: {
            PartySearchBeaconActive = input.ReadBool();
            break;
          }
          case 536: {
            MatchmakingFlags = input.ReadUInt32();
            break;
          }
          case 544: {
            HighPriorityState = (global::Steam.Protos.Dota2.EHighPriorityMMState) input.ReadEnum();
            break;
          }
          case 552: {
            LaneSelectionsEnabled = input.ReadBool();
            break;
          }
          case 560: {
            CustomGameDifficultyMask = input.ReadUInt32();
            break;
          }
          case 568: {
            IsSteamChina = input.ReadBool();
            break;
          }
          case 576: {
            BotDifficultyMask = input.ReadUInt32();
            break;
          }
          case 584: {
            BotScriptIndexMask = input.ReadUInt32();
            break;
          }
          case 592: {
            RestrictedFromRanked = input.ReadBool();
            break;
          }
          case 600: {
            RestrictedFromRankedAccountId = input.ReadUInt32();
            break;
          }
          case 608: {
            RankSpreadLikertScale = input.ReadUInt32();
            break;
          }
          case 616: {
            BehaviorScoreLikertScale = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CSODOTAParty message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("UI")] Ui = 0,
        [pbr::OriginalName("FINDING_MATCH")] FindingMatch = 1,
        [pbr::OriginalName("IN_MATCH")] InMatch = 2,
      }

    }
    #endregion

  }

  public sealed partial class CSODOTAPartyInvite : pb::IMessage<CSODOTAPartyInvite>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSODOTAPartyInvite> _parser = new pb::MessageParser<CSODOTAPartyInvite>(() => new CSODOTAPartyInvite());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSODOTAPartyInvite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAPartyInvite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAPartyInvite(CSODOTAPartyInvite other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      senderId_ = other.senderId_;
      senderName_ = other.senderName_;
      members_ = other.members_.Clone();
      teamId_ = other.teamId_;
      lowPriorityStatus_ = other.lowPriorityStatus_;
      asCoach_ = other.asCoach_;
      inviteGid_ = other.inviteGid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSODOTAPartyInvite Clone() {
      return new CSODOTAPartyInvite(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static ulong GroupIdDefaultValue = 0UL;

    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sender_id" field.</summary>
    public const int SenderIdFieldNumber = 2;
    private readonly static ulong SenderIdDefaultValue = 0UL;

    private ulong senderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SenderId {
      get { if ((_hasBits0 & 2) != 0) { return senderId_; } else { return SenderIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        senderId_ = value;
      }
    }
    /// <summary>Gets whether the "sender_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSenderId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sender_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSenderId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "sender_name" field.</summary>
    public const int SenderNameFieldNumber = 3;
    private readonly static string SenderNameDefaultValue = "";

    private string senderName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderName {
      get { return senderName_ ?? SenderNameDefaultValue; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sender_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSenderName {
      get { return senderName_ != null; }
    }
    /// <summary>Clears the value of the "sender_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSenderName() {
      senderName_ = null;
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CSODOTAPartyInvite.Types.PartyMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CSODOTAPartyInvite.Types.PartyMember.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyInvite.Types.PartyMember> members_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyInvite.Types.PartyMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CSODOTAPartyInvite.Types.PartyMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 5;
    private readonly static uint TeamIdDefaultValue = 0;

    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { if ((_hasBits0 & 4) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "low_priority_status" field.</summary>
    public const int LowPriorityStatusFieldNumber = 6;
    private readonly static bool LowPriorityStatusDefaultValue = false;

    private bool lowPriorityStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LowPriorityStatus {
      get { if ((_hasBits0 & 8) != 0) { return lowPriorityStatus_; } else { return LowPriorityStatusDefaultValue; } }
      set {
        _hasBits0 |= 8;
        lowPriorityStatus_ = value;
      }
    }
    /// <summary>Gets whether the "low_priority_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLowPriorityStatus {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "low_priority_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowPriorityStatus() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "as_coach" field.</summary>
    public const int AsCoachFieldNumber = 7;
    private readonly static bool AsCoachDefaultValue = false;

    private bool asCoach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AsCoach {
      get { if ((_hasBits0 & 16) != 0) { return asCoach_; } else { return AsCoachDefaultValue; } }
      set {
        _hasBits0 |= 16;
        asCoach_ = value;
      }
    }
    /// <summary>Gets whether the "as_coach" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAsCoach {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "as_coach" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAsCoach() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "invite_gid" field.</summary>
    public const int InviteGidFieldNumber = 8;
    private readonly static ulong InviteGidDefaultValue = 0UL;

    private ulong inviteGid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InviteGid {
      get { if ((_hasBits0 & 32) != 0) { return inviteGid_; } else { return InviteGidDefaultValue; } }
      set {
        _hasBits0 |= 32;
        inviteGid_ = value;
      }
    }
    /// <summary>Gets whether the "invite_gid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInviteGid {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "invite_gid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInviteGid() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSODOTAPartyInvite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSODOTAPartyInvite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (SenderId != other.SenderId) return false;
      if (SenderName != other.SenderName) return false;
      if(!members_.Equals(other.members_)) return false;
      if (TeamId != other.TeamId) return false;
      if (LowPriorityStatus != other.LowPriorityStatus) return false;
      if (AsCoach != other.AsCoach) return false;
      if (InviteGid != other.InviteGid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasSenderId) hash ^= SenderId.GetHashCode();
      if (HasSenderName) hash ^= SenderName.GetHashCode();
      hash ^= members_.GetHashCode();
      if (HasTeamId) hash ^= TeamId.GetHashCode();
      if (HasLowPriorityStatus) hash ^= LowPriorityStatus.GetHashCode();
      if (HasAsCoach) hash ^= AsCoach.GetHashCode();
      if (HasInviteGid) hash ^= InviteGid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GroupId);
      }
      if (HasSenderId) {
        output.WriteRawTag(17);
        output.WriteFixed64(SenderId);
      }
      if (HasSenderName) {
        output.WriteRawTag(26);
        output.WriteString(SenderName);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (HasTeamId) {
        output.WriteRawTag(40);
        output.WriteUInt32(TeamId);
      }
      if (HasLowPriorityStatus) {
        output.WriteRawTag(48);
        output.WriteBool(LowPriorityStatus);
      }
      if (HasAsCoach) {
        output.WriteRawTag(56);
        output.WriteBool(AsCoach);
      }
      if (HasInviteGid) {
        output.WriteRawTag(65);
        output.WriteFixed64(InviteGid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GroupId);
      }
      if (HasSenderId) {
        output.WriteRawTag(17);
        output.WriteFixed64(SenderId);
      }
      if (HasSenderName) {
        output.WriteRawTag(26);
        output.WriteString(SenderName);
      }
      members_.WriteTo(ref output, _repeated_members_codec);
      if (HasTeamId) {
        output.WriteRawTag(40);
        output.WriteUInt32(TeamId);
      }
      if (HasLowPriorityStatus) {
        output.WriteRawTag(48);
        output.WriteBool(LowPriorityStatus);
      }
      if (HasAsCoach) {
        output.WriteRawTag(56);
        output.WriteBool(AsCoach);
      }
      if (HasInviteGid) {
        output.WriteRawTag(65);
        output.WriteFixed64(InviteGid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      if (HasSenderId) {
        size += 1 + 8;
      }
      if (HasSenderName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (HasTeamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (HasLowPriorityStatus) {
        size += 1 + 1;
      }
      if (HasAsCoach) {
        size += 1 + 1;
      }
      if (HasInviteGid) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSODOTAPartyInvite other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasSenderId) {
        SenderId = other.SenderId;
      }
      if (other.HasSenderName) {
        SenderName = other.SenderName;
      }
      members_.Add(other.members_);
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      if (other.HasLowPriorityStatus) {
        LowPriorityStatus = other.LowPriorityStatus;
      }
      if (other.HasAsCoach) {
        AsCoach = other.AsCoach;
      }
      if (other.HasInviteGid) {
        InviteGid = other.InviteGid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 17: {
            SenderId = input.ReadFixed64();
            break;
          }
          case 26: {
            SenderName = input.ReadString();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 40: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 48: {
            LowPriorityStatus = input.ReadBool();
            break;
          }
          case 56: {
            AsCoach = input.ReadBool();
            break;
          }
          case 65: {
            InviteGid = input.ReadFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 17: {
            SenderId = input.ReadFixed64();
            break;
          }
          case 26: {
            SenderName = input.ReadString();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(ref input, _repeated_members_codec);
            break;
          }
          case 40: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 48: {
            LowPriorityStatus = input.ReadBool();
            break;
          }
          case 56: {
            AsCoach = input.ReadBool();
            break;
          }
          case 65: {
            InviteGid = input.ReadFixed64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CSODOTAPartyInvite message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PartyMember : pb::IMessage<PartyMember>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PartyMember> _parser = new pb::MessageParser<PartyMember>(() => new PartyMember());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PartyMember> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CSODOTAPartyInvite.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PartyMember() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PartyMember(PartyMember other) : this() {
          _hasBits0 = other._hasBits0;
          name_ = other.name_;
          steamId_ = other.steamId_;
          isCoach_ = other.isCoach_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PartyMember Clone() {
          return new PartyMember(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "steam_id" field.</summary>
        public const int SteamIdFieldNumber = 2;
        private readonly static ulong SteamIdDefaultValue = 0UL;

        private ulong steamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong SteamId {
          get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            steamId_ = value;
          }
        }
        /// <summary>Gets whether the "steam_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSteamId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "steam_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSteamId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "is_coach" field.</summary>
        public const int IsCoachFieldNumber = 4;
        private readonly static bool IsCoachDefaultValue = false;

        private bool isCoach_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsCoach {
          get { if ((_hasBits0 & 2) != 0) { return isCoach_; } else { return IsCoachDefaultValue; } }
          set {
            _hasBits0 |= 2;
            isCoach_ = value;
          }
        }
        /// <summary>Gets whether the "is_coach" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsCoach {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "is_coach" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsCoach() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PartyMember);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PartyMember other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (SteamId != other.SteamId) return false;
          if (IsCoach != other.IsCoach) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasName) hash ^= Name.GetHashCode();
          if (HasSteamId) hash ^= SteamId.GetHashCode();
          if (HasIsCoach) hash ^= IsCoach.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasSteamId) {
            output.WriteRawTag(17);
            output.WriteFixed64(SteamId);
          }
          if (HasIsCoach) {
            output.WriteRawTag(32);
            output.WriteBool(IsCoach);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasSteamId) {
            output.WriteRawTag(17);
            output.WriteFixed64(SteamId);
          }
          if (HasIsCoach) {
            output.WriteRawTag(32);
            output.WriteBool(IsCoach);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasSteamId) {
            size += 1 + 8;
          }
          if (HasIsCoach) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PartyMember other) {
          if (other == null) {
            return;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasSteamId) {
            SteamId = other.SteamId;
          }
          if (other.HasIsCoach) {
            IsCoach = other.IsCoach;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 17: {
                SteamId = input.ReadFixed64();
                break;
              }
              case 32: {
                IsCoach = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 17: {
                SteamId = input.ReadFixed64();
                break;
              }
              case 32: {
                IsCoach = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgLeaverState : pb::IMessage<CMsgLeaverState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLeaverState> _parser = new pb::MessageParser<CMsgLeaverState>(() => new CMsgLeaverState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLeaverState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaverState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaverState(CMsgLeaverState other) : this() {
      _hasBits0 = other._hasBits0;
      lobbyState_ = other.lobbyState_;
      gameState_ = other.gameState_;
      leaverDetected_ = other.leaverDetected_;
      firstBloodHappened_ = other.firstBloodHappened_;
      discardMatchResults_ = other.discardMatchResults_;
      massDisconnect_ = other.massDisconnect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLeaverState Clone() {
      return new CMsgLeaverState(this);
    }

    /// <summary>Field number for the "lobby_state" field.</summary>
    public const int LobbyStateFieldNumber = 1;
    private readonly static uint LobbyStateDefaultValue = 0;

    private uint lobbyState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyState {
      get { if ((_hasBits0 & 1) != 0) { return lobbyState_; } else { return LobbyStateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lobbyState_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLobbyState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lobby_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLobbyState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.DOTA_GameState GameStateDefaultValue = global::Steam.Protos.Dota2.DOTA_GameState.DotaGamerulesStateInit;

    private global::Steam.Protos.Dota2.DOTA_GameState gameState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_GameState GameState {
      get { if ((_hasBits0 & 2) != 0) { return gameState_; } else { return GameStateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gameState_ = value;
      }
    }
    /// <summary>Gets whether the "game_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "game_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "leaver_detected" field.</summary>
    public const int LeaverDetectedFieldNumber = 3;
    private readonly static bool LeaverDetectedDefaultValue = false;

    private bool leaverDetected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LeaverDetected {
      get { if ((_hasBits0 & 4) != 0) { return leaverDetected_; } else { return LeaverDetectedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leaverDetected_ = value;
      }
    }
    /// <summary>Gets whether the "leaver_detected" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaverDetected {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "leaver_detected" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaverDetected() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "first_blood_happened" field.</summary>
    public const int FirstBloodHappenedFieldNumber = 4;
    private readonly static bool FirstBloodHappenedDefaultValue = false;

    private bool firstBloodHappened_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FirstBloodHappened {
      get { if ((_hasBits0 & 8) != 0) { return firstBloodHappened_; } else { return FirstBloodHappenedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        firstBloodHappened_ = value;
      }
    }
    /// <summary>Gets whether the "first_blood_happened" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstBloodHappened {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "first_blood_happened" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstBloodHappened() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "discard_match_results" field.</summary>
    public const int DiscardMatchResultsFieldNumber = 5;
    private readonly static bool DiscardMatchResultsDefaultValue = false;

    private bool discardMatchResults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DiscardMatchResults {
      get { if ((_hasBits0 & 16) != 0) { return discardMatchResults_; } else { return DiscardMatchResultsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        discardMatchResults_ = value;
      }
    }
    /// <summary>Gets whether the "discard_match_results" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDiscardMatchResults {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "discard_match_results" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDiscardMatchResults() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "mass_disconnect" field.</summary>
    public const int MassDisconnectFieldNumber = 6;
    private readonly static bool MassDisconnectDefaultValue = false;

    private bool massDisconnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MassDisconnect {
      get { if ((_hasBits0 & 32) != 0) { return massDisconnect_; } else { return MassDisconnectDefaultValue; } }
      set {
        _hasBits0 |= 32;
        massDisconnect_ = value;
      }
    }
    /// <summary>Gets whether the "mass_disconnect" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMassDisconnect {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "mass_disconnect" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMassDisconnect() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLeaverState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLeaverState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LobbyState != other.LobbyState) return false;
      if (GameState != other.GameState) return false;
      if (LeaverDetected != other.LeaverDetected) return false;
      if (FirstBloodHappened != other.FirstBloodHappened) return false;
      if (DiscardMatchResults != other.DiscardMatchResults) return false;
      if (MassDisconnect != other.MassDisconnect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLobbyState) hash ^= LobbyState.GetHashCode();
      if (HasGameState) hash ^= GameState.GetHashCode();
      if (HasLeaverDetected) hash ^= LeaverDetected.GetHashCode();
      if (HasFirstBloodHappened) hash ^= FirstBloodHappened.GetHashCode();
      if (HasDiscardMatchResults) hash ^= DiscardMatchResults.GetHashCode();
      if (HasMassDisconnect) hash ^= MassDisconnect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLobbyState) {
        output.WriteRawTag(8);
        output.WriteUInt32(LobbyState);
      }
      if (HasGameState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameState);
      }
      if (HasLeaverDetected) {
        output.WriteRawTag(24);
        output.WriteBool(LeaverDetected);
      }
      if (HasFirstBloodHappened) {
        output.WriteRawTag(32);
        output.WriteBool(FirstBloodHappened);
      }
      if (HasDiscardMatchResults) {
        output.WriteRawTag(40);
        output.WriteBool(DiscardMatchResults);
      }
      if (HasMassDisconnect) {
        output.WriteRawTag(48);
        output.WriteBool(MassDisconnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLobbyState) {
        output.WriteRawTag(8);
        output.WriteUInt32(LobbyState);
      }
      if (HasGameState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameState);
      }
      if (HasLeaverDetected) {
        output.WriteRawTag(24);
        output.WriteBool(LeaverDetected);
      }
      if (HasFirstBloodHappened) {
        output.WriteRawTag(32);
        output.WriteBool(FirstBloodHappened);
      }
      if (HasDiscardMatchResults) {
        output.WriteRawTag(40);
        output.WriteBool(DiscardMatchResults);
      }
      if (HasMassDisconnect) {
        output.WriteRawTag(48);
        output.WriteBool(MassDisconnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLobbyState) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LobbyState);
      }
      if (HasGameState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameState);
      }
      if (HasLeaverDetected) {
        size += 1 + 1;
      }
      if (HasFirstBloodHappened) {
        size += 1 + 1;
      }
      if (HasDiscardMatchResults) {
        size += 1 + 1;
      }
      if (HasMassDisconnect) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLeaverState other) {
      if (other == null) {
        return;
      }
      if (other.HasLobbyState) {
        LobbyState = other.LobbyState;
      }
      if (other.HasGameState) {
        GameState = other.GameState;
      }
      if (other.HasLeaverDetected) {
        LeaverDetected = other.LeaverDetected;
      }
      if (other.HasFirstBloodHappened) {
        FirstBloodHappened = other.FirstBloodHappened;
      }
      if (other.HasDiscardMatchResults) {
        DiscardMatchResults = other.DiscardMatchResults;
      }
      if (other.HasMassDisconnect) {
        MassDisconnect = other.MassDisconnect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LobbyState = input.ReadUInt32();
            break;
          }
          case 16: {
            GameState = (global::Steam.Protos.Dota2.DOTA_GameState) input.ReadEnum();
            break;
          }
          case 24: {
            LeaverDetected = input.ReadBool();
            break;
          }
          case 32: {
            FirstBloodHappened = input.ReadBool();
            break;
          }
          case 40: {
            DiscardMatchResults = input.ReadBool();
            break;
          }
          case 48: {
            MassDisconnect = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LobbyState = input.ReadUInt32();
            break;
          }
          case 16: {
            GameState = (global::Steam.Protos.Dota2.DOTA_GameState) input.ReadEnum();
            break;
          }
          case 24: {
            LeaverDetected = input.ReadBool();
            break;
          }
          case 32: {
            FirstBloodHappened = input.ReadBool();
            break;
          }
          case 40: {
            DiscardMatchResults = input.ReadBool();
            break;
          }
          case 48: {
            MassDisconnect = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgReadyCheckStatus : pb::IMessage<CMsgReadyCheckStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgReadyCheckStatus> _parser = new pb::MessageParser<CMsgReadyCheckStatus>(() => new CMsgReadyCheckStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgReadyCheckStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgReadyCheckStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgReadyCheckStatus(CMsgReadyCheckStatus other) : this() {
      _hasBits0 = other._hasBits0;
      startTimestamp_ = other.startTimestamp_;
      finishTimestamp_ = other.finishTimestamp_;
      initiatorAccountId_ = other.initiatorAccountId_;
      readyMembers_ = other.readyMembers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgReadyCheckStatus Clone() {
      return new CMsgReadyCheckStatus(this);
    }

    /// <summary>Field number for the "start_timestamp" field.</summary>
    public const int StartTimestampFieldNumber = 1;
    private readonly static uint StartTimestampDefaultValue = 0;

    private uint startTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTimestamp {
      get { if ((_hasBits0 & 1) != 0) { return startTimestamp_; } else { return StartTimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        startTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "start_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "start_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "finish_timestamp" field.</summary>
    public const int FinishTimestampFieldNumber = 2;
    private readonly static uint FinishTimestampDefaultValue = 0;

    private uint finishTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishTimestamp {
      get { if ((_hasBits0 & 2) != 0) { return finishTimestamp_; } else { return FinishTimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        finishTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "finish_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFinishTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "finish_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFinishTimestamp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "initiator_account_id" field.</summary>
    public const int InitiatorAccountIdFieldNumber = 3;
    private readonly static uint InitiatorAccountIdDefaultValue = 0;

    private uint initiatorAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InitiatorAccountId {
      get { if ((_hasBits0 & 4) != 0) { return initiatorAccountId_; } else { return InitiatorAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        initiatorAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "initiator_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInitiatorAccountId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "initiator_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInitiatorAccountId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ready_members" field.</summary>
    public const int ReadyMembersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgReadyCheckStatus.Types.ReadyMember> _repeated_readyMembers_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CMsgReadyCheckStatus.Types.ReadyMember.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgReadyCheckStatus.Types.ReadyMember> readyMembers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgReadyCheckStatus.Types.ReadyMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgReadyCheckStatus.Types.ReadyMember> ReadyMembers {
      get { return readyMembers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgReadyCheckStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgReadyCheckStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTimestamp != other.StartTimestamp) return false;
      if (FinishTimestamp != other.FinishTimestamp) return false;
      if (InitiatorAccountId != other.InitiatorAccountId) return false;
      if(!readyMembers_.Equals(other.readyMembers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStartTimestamp) hash ^= StartTimestamp.GetHashCode();
      if (HasFinishTimestamp) hash ^= FinishTimestamp.GetHashCode();
      if (HasInitiatorAccountId) hash ^= InitiatorAccountId.GetHashCode();
      hash ^= readyMembers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStartTimestamp) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartTimestamp);
      }
      if (HasFinishTimestamp) {
        output.WriteRawTag(16);
        output.WriteUInt32(FinishTimestamp);
      }
      if (HasInitiatorAccountId) {
        output.WriteRawTag(24);
        output.WriteUInt32(InitiatorAccountId);
      }
      readyMembers_.WriteTo(output, _repeated_readyMembers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStartTimestamp) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartTimestamp);
      }
      if (HasFinishTimestamp) {
        output.WriteRawTag(16);
        output.WriteUInt32(FinishTimestamp);
      }
      if (HasInitiatorAccountId) {
        output.WriteRawTag(24);
        output.WriteUInt32(InitiatorAccountId);
      }
      readyMembers_.WriteTo(ref output, _repeated_readyMembers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStartTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTimestamp);
      }
      if (HasFinishTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishTimestamp);
      }
      if (HasInitiatorAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InitiatorAccountId);
      }
      size += readyMembers_.CalculateSize(_repeated_readyMembers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgReadyCheckStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasStartTimestamp) {
        StartTimestamp = other.StartTimestamp;
      }
      if (other.HasFinishTimestamp) {
        FinishTimestamp = other.FinishTimestamp;
      }
      if (other.HasInitiatorAccountId) {
        InitiatorAccountId = other.InitiatorAccountId;
      }
      readyMembers_.Add(other.readyMembers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTimestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            FinishTimestamp = input.ReadUInt32();
            break;
          }
          case 24: {
            InitiatorAccountId = input.ReadUInt32();
            break;
          }
          case 34: {
            readyMembers_.AddEntriesFrom(input, _repeated_readyMembers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartTimestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            FinishTimestamp = input.ReadUInt32();
            break;
          }
          case 24: {
            InitiatorAccountId = input.ReadUInt32();
            break;
          }
          case 34: {
            readyMembers_.AddEntriesFrom(ref input, _repeated_readyMembers_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgReadyCheckStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ReadyMember : pb::IMessage<ReadyMember>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ReadyMember> _parser = new pb::MessageParser<ReadyMember>(() => new ReadyMember());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReadyMember> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgReadyCheckStatus.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReadyMember() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReadyMember(ReadyMember other) : this() {
          _hasBits0 = other._hasBits0;
          accountId_ = other.accountId_;
          readyStatus_ = other.readyStatus_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReadyMember Clone() {
          return new ReadyMember(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private readonly static uint AccountIdDefaultValue = 0;

        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            accountId_ = value;
          }
        }
        /// <summary>Gets whether the "account_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAccountId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "account_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAccountId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "ready_status" field.</summary>
        public const int ReadyStatusFieldNumber = 2;
        private readonly static global::Steam.Protos.Dota2.EReadyCheckStatus ReadyStatusDefaultValue = global::Steam.Protos.Dota2.EReadyCheckStatus.KEreadyCheckStatusUnknown;

        private global::Steam.Protos.Dota2.EReadyCheckStatus readyStatus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.EReadyCheckStatus ReadyStatus {
          get { if ((_hasBits0 & 2) != 0) { return readyStatus_; } else { return ReadyStatusDefaultValue; } }
          set {
            _hasBits0 |= 2;
            readyStatus_ = value;
          }
        }
        /// <summary>Gets whether the "ready_status" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReadyStatus {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "ready_status" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReadyStatus() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ReadyMember);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReadyMember other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (ReadyStatus != other.ReadyStatus) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAccountId) hash ^= AccountId.GetHashCode();
          if (HasReadyStatus) hash ^= ReadyStatus.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasReadyStatus) {
            output.WriteRawTag(16);
            output.WriteEnum((int) ReadyStatus);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAccountId) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (HasReadyStatus) {
            output.WriteRawTag(16);
            output.WriteEnum((int) ReadyStatus);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAccountId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (HasReadyStatus) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReadyStatus);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReadyMember other) {
          if (other == null) {
            return;
          }
          if (other.HasAccountId) {
            AccountId = other.AccountId;
          }
          if (other.HasReadyStatus) {
            ReadyStatus = other.ReadyStatus;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                ReadyStatus = (global::Steam.Protos.Dota2.EReadyCheckStatus) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                ReadyStatus = (global::Steam.Protos.Dota2.EReadyCheckStatus) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgPartyReadyCheckRequest : pb::IMessage<CMsgPartyReadyCheckRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPartyReadyCheckRequest> _parser = new pb::MessageParser<CMsgPartyReadyCheckRequest>(() => new CMsgPartyReadyCheckRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPartyReadyCheckRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyReadyCheckRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyReadyCheckRequest(CMsgPartyReadyCheckRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyReadyCheckRequest Clone() {
      return new CMsgPartyReadyCheckRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPartyReadyCheckRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPartyReadyCheckRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPartyReadyCheckRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPartyReadyCheckResponse : pb::IMessage<CMsgPartyReadyCheckResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPartyReadyCheckResponse> _parser = new pb::MessageParser<CMsgPartyReadyCheckResponse>(() => new CMsgPartyReadyCheckResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPartyReadyCheckResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyReadyCheckResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyReadyCheckResponse(CMsgPartyReadyCheckResponse other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyReadyCheckResponse Clone() {
      return new CMsgPartyReadyCheckResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EReadyCheckRequestResult ResultDefaultValue = global::Steam.Protos.Dota2.EReadyCheckRequestResult.KEreadyCheckRequestResultSuccess;

    private global::Steam.Protos.Dota2.EReadyCheckRequestResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EReadyCheckRequestResult Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPartyReadyCheckResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPartyReadyCheckResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPartyReadyCheckResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Steam.Protos.Dota2.EReadyCheckRequestResult) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = (global::Steam.Protos.Dota2.EReadyCheckRequestResult) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPartyReadyCheckAcknowledge : pb::IMessage<CMsgPartyReadyCheckAcknowledge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPartyReadyCheckAcknowledge> _parser = new pb::MessageParser<CMsgPartyReadyCheckAcknowledge>(() => new CMsgPartyReadyCheckAcknowledge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPartyReadyCheckAcknowledge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyReadyCheckAcknowledge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyReadyCheckAcknowledge(CMsgPartyReadyCheckAcknowledge other) : this() {
      _hasBits0 = other._hasBits0;
      readyStatus_ = other.readyStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPartyReadyCheckAcknowledge Clone() {
      return new CMsgPartyReadyCheckAcknowledge(this);
    }

    /// <summary>Field number for the "ready_status" field.</summary>
    public const int ReadyStatusFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EReadyCheckStatus ReadyStatusDefaultValue = global::Steam.Protos.Dota2.EReadyCheckStatus.KEreadyCheckStatusUnknown;

    private global::Steam.Protos.Dota2.EReadyCheckStatus readyStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EReadyCheckStatus ReadyStatus {
      get { if ((_hasBits0 & 1) != 0) { return readyStatus_; } else { return ReadyStatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        readyStatus_ = value;
      }
    }
    /// <summary>Gets whether the "ready_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReadyStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ready_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReadyStatus() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPartyReadyCheckAcknowledge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPartyReadyCheckAcknowledge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReadyStatus != other.ReadyStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReadyStatus) hash ^= ReadyStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReadyStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReadyStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReadyStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReadyStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasReadyStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReadyStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPartyReadyCheckAcknowledge other) {
      if (other == null) {
        return;
      }
      if (other.HasReadyStatus) {
        ReadyStatus = other.ReadyStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReadyStatus = (global::Steam.Protos.Dota2.EReadyCheckStatus) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReadyStatus = (global::Steam.Protos.Dota2.EReadyCheckStatus) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgLobbyEventGameDetails : pb::IMessage<CMsgLobbyEventGameDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgLobbyEventGameDetails> _parser = new pb::MessageParser<CMsgLobbyEventGameDetails>(() => new CMsgLobbyEventGameDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgLobbyEventGameDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyEventGameDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyEventGameDetails(CMsgLobbyEventGameDetails other) : this() {
      kvData_ = other.kvData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgLobbyEventGameDetails Clone() {
      return new CMsgLobbyEventGameDetails(this);
    }

    /// <summary>Field number for the "kv_data" field.</summary>
    public const int KvDataFieldNumber = 1;
    private readonly static pb::ByteString KvDataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString kvData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString KvData {
      get { return kvData_ ?? KvDataDefaultValue; }
      set {
        kvData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "kv_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKvData {
      get { return kvData_ != null; }
    }
    /// <summary>Clears the value of the "kv_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKvData() {
      kvData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgLobbyEventGameDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgLobbyEventGameDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KvData != other.KvData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKvData) hash ^= KvData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKvData) {
        output.WriteRawTag(10);
        output.WriteBytes(KvData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKvData) {
        output.WriteRawTag(10);
        output.WriteBytes(KvData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKvData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(KvData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgLobbyEventGameDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasKvData) {
        KvData = other.KvData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KvData = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            KvData = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgMatchMatchmakingStats : pb::IMessage<CMsgMatchMatchmakingStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgMatchMatchmakingStats> _parser = new pb::MessageParser<CMsgMatchMatchmakingStats>(() => new CMsgMatchMatchmakingStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgMatchMatchmakingStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchMatchmakingStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchMatchmakingStats(CMsgMatchMatchmakingStats other) : this() {
      _hasBits0 = other._hasBits0;
      averageQueueTime_ = other.averageQueueTime_;
      maximumQueueTime_ = other.maximumQueueTime_;
      behaviorScoreVariance_ = other.behaviorScoreVariance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchMatchmakingStats Clone() {
      return new CMsgMatchMatchmakingStats(this);
    }

    /// <summary>Field number for the "average_queue_time" field.</summary>
    public const int AverageQueueTimeFieldNumber = 1;
    private readonly static uint AverageQueueTimeDefaultValue = 0;

    private uint averageQueueTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AverageQueueTime {
      get { if ((_hasBits0 & 1) != 0) { return averageQueueTime_; } else { return AverageQueueTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        averageQueueTime_ = value;
      }
    }
    /// <summary>Gets whether the "average_queue_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAverageQueueTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "average_queue_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAverageQueueTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "maximum_queue_time" field.</summary>
    public const int MaximumQueueTimeFieldNumber = 2;
    private readonly static uint MaximumQueueTimeDefaultValue = 0;

    private uint maximumQueueTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaximumQueueTime {
      get { if ((_hasBits0 & 2) != 0) { return maximumQueueTime_; } else { return MaximumQueueTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maximumQueueTime_ = value;
      }
    }
    /// <summary>Gets whether the "maximum_queue_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaximumQueueTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "maximum_queue_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaximumQueueTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "behavior_score_variance" field.</summary>
    public const int BehaviorScoreVarianceFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.EMatchBehaviorScoreVariance BehaviorScoreVarianceDefaultValue = global::Steam.Protos.Dota2.EMatchBehaviorScoreVariance.KEmatchBehaviorScoreVarianceInvalid;

    private global::Steam.Protos.Dota2.EMatchBehaviorScoreVariance behaviorScoreVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EMatchBehaviorScoreVariance BehaviorScoreVariance {
      get { if ((_hasBits0 & 4) != 0) { return behaviorScoreVariance_; } else { return BehaviorScoreVarianceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        behaviorScoreVariance_ = value;
      }
    }
    /// <summary>Gets whether the "behavior_score_variance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBehaviorScoreVariance {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "behavior_score_variance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBehaviorScoreVariance() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgMatchMatchmakingStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgMatchMatchmakingStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AverageQueueTime != other.AverageQueueTime) return false;
      if (MaximumQueueTime != other.MaximumQueueTime) return false;
      if (BehaviorScoreVariance != other.BehaviorScoreVariance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAverageQueueTime) hash ^= AverageQueueTime.GetHashCode();
      if (HasMaximumQueueTime) hash ^= MaximumQueueTime.GetHashCode();
      if (HasBehaviorScoreVariance) hash ^= BehaviorScoreVariance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAverageQueueTime) {
        output.WriteRawTag(8);
        output.WriteUInt32(AverageQueueTime);
      }
      if (HasMaximumQueueTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaximumQueueTime);
      }
      if (HasBehaviorScoreVariance) {
        output.WriteRawTag(24);
        output.WriteEnum((int) BehaviorScoreVariance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAverageQueueTime) {
        output.WriteRawTag(8);
        output.WriteUInt32(AverageQueueTime);
      }
      if (HasMaximumQueueTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaximumQueueTime);
      }
      if (HasBehaviorScoreVariance) {
        output.WriteRawTag(24);
        output.WriteEnum((int) BehaviorScoreVariance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAverageQueueTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AverageQueueTime);
      }
      if (HasMaximumQueueTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumQueueTime);
      }
      if (HasBehaviorScoreVariance) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BehaviorScoreVariance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgMatchMatchmakingStats other) {
      if (other == null) {
        return;
      }
      if (other.HasAverageQueueTime) {
        AverageQueueTime = other.AverageQueueTime;
      }
      if (other.HasMaximumQueueTime) {
        MaximumQueueTime = other.MaximumQueueTime;
      }
      if (other.HasBehaviorScoreVariance) {
        BehaviorScoreVariance = other.BehaviorScoreVariance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AverageQueueTime = input.ReadUInt32();
            break;
          }
          case 16: {
            MaximumQueueTime = input.ReadUInt32();
            break;
          }
          case 24: {
            BehaviorScoreVariance = (global::Steam.Protos.Dota2.EMatchBehaviorScoreVariance) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AverageQueueTime = input.ReadUInt32();
            break;
          }
          case 16: {
            MaximumQueueTime = input.ReadUInt32();
            break;
          }
          case 24: {
            BehaviorScoreVariance = (global::Steam.Protos.Dota2.EMatchBehaviorScoreVariance) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMvpData : pb::IMessage<CMvpData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMvpData> _parser = new pb::MessageParser<CMvpData>(() => new CMvpData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMvpData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonMatchManagementReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMvpData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMvpData(CMvpData other) : this() {
      mvps_ = other.mvps_.Clone();
      eventMvps_ = other.eventMvps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMvpData Clone() {
      return new CMvpData(this);
    }

    /// <summary>Field number for the "mvps" field.</summary>
    public const int MvpsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum> _repeated_mvps_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum> mvps_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum> Mvps {
      get { return mvps_; }
    }

    /// <summary>Field number for the "event_mvps" field.</summary>
    public const int EventMvpsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum> _repeated_eventMvps_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum> eventMvps_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum> EventMvps {
      get { return eventMvps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMvpData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMvpData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mvps_.Equals(other.mvps_)) return false;
      if(!eventMvps_.Equals(other.eventMvps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mvps_.GetHashCode();
      hash ^= eventMvps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      mvps_.WriteTo(output, _repeated_mvps_codec);
      eventMvps_.WriteTo(output, _repeated_eventMvps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      mvps_.WriteTo(ref output, _repeated_mvps_codec);
      eventMvps_.WriteTo(ref output, _repeated_eventMvps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mvps_.CalculateSize(_repeated_mvps_codec);
      size += eventMvps_.CalculateSize(_repeated_eventMvps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMvpData other) {
      if (other == null) {
        return;
      }
      mvps_.Add(other.mvps_);
      eventMvps_.Add(other.eventMvps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mvps_.AddEntriesFrom(input, _repeated_mvps_codec);
            break;
          }
          case 18: {
            eventMvps_.AddEntriesFrom(input, _repeated_eventMvps_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            mvps_.AddEntriesFrom(ref input, _repeated_mvps_codec);
            break;
          }
          case 18: {
            eventMvps_.AddEntriesFrom(ref input, _repeated_eventMvps_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMvpData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MvpDatum : pb::IMessage<MvpDatum>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MvpDatum> _parser = new pb::MessageParser<MvpDatum>(() => new MvpDatum());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MvpDatum> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMvpData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MvpDatum() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MvpDatum(MvpDatum other) : this() {
          _hasBits0 = other._hasBits0;
          playerSlot_ = other.playerSlot_;
          accolades_ = other.accolades_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MvpDatum Clone() {
          return new MvpDatum(this);
        }

        /// <summary>Field number for the "player_slot" field.</summary>
        public const int PlayerSlotFieldNumber = 1;
        private readonly static uint PlayerSlotDefaultValue = 0;

        private uint playerSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerSlot {
          get { if ((_hasBits0 & 1) != 0) { return playerSlot_; } else { return PlayerSlotDefaultValue; } }
          set {
            _hasBits0 |= 1;
            playerSlot_ = value;
          }
        }
        /// <summary>Gets whether the "player_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerSlot {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerSlot() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "accolades" field.</summary>
        public const int AccoladesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade> _repeated_accolades_codec
            = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade> accolades_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade> Accolades {
          get { return accolades_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MvpDatum);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MvpDatum other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerSlot != other.PlayerSlot) return false;
          if(!accolades_.Equals(other.accolades_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPlayerSlot) hash ^= PlayerSlot.GetHashCode();
          hash ^= accolades_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPlayerSlot) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlayerSlot);
          }
          accolades_.WriteTo(output, _repeated_accolades_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPlayerSlot) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlayerSlot);
          }
          accolades_.WriteTo(ref output, _repeated_accolades_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPlayerSlot) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
          }
          size += accolades_.CalculateSize(_repeated_accolades_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MvpDatum other) {
          if (other == null) {
            return;
          }
          if (other.HasPlayerSlot) {
            PlayerSlot = other.PlayerSlot;
          }
          accolades_.Add(other.accolades_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 18: {
                accolades_.AddEntriesFrom(input, _repeated_accolades_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 18: {
                accolades_.AddEntriesFrom(ref input, _repeated_accolades_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the MvpDatum message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class MvpAccolade : pb::IMessage<MvpAccolade>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<MvpAccolade> _parser = new pb::MessageParser<MvpAccolade>(() => new MvpAccolade());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MvpAccolade> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MvpAccolade() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MvpAccolade(MvpAccolade other) : this() {
              _hasBits0 = other._hasBits0;
              type_ = other.type_;
              detailValue_ = other.detailValue_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MvpAccolade Clone() {
              return new MvpAccolade(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private readonly static global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade.Types.MvpAccoladeType TypeDefaultValue = global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade.Types.MvpAccoladeType.Kills;

            private global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade.Types.MvpAccoladeType type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade.Types.MvpAccoladeType Type {
              get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
              set {
                _hasBits0 |= 1;
                type_ = value;
              }
            }
            /// <summary>Gets whether the "type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasType {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "detail_value" field.</summary>
            public const int DetailValueFieldNumber = 2;
            private readonly static float DetailValueDefaultValue = 0F;

            private float detailValue_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float DetailValue {
              get { if ((_hasBits0 & 2) != 0) { return detailValue_; } else { return DetailValueDefaultValue; } }
              set {
                _hasBits0 |= 2;
                detailValue_ = value;
              }
            }
            /// <summary>Gets whether the "detail_value" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDetailValue {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "detail_value" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDetailValue() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MvpAccolade);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MvpAccolade other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DetailValue, other.DetailValue)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasType) hash ^= Type.GetHashCode();
              if (HasDetailValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DetailValue);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasType) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Type);
              }
              if (HasDetailValue) {
                output.WriteRawTag(21);
                output.WriteFloat(DetailValue);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasType) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Type);
              }
              if (HasDetailValue) {
                output.WriteRawTag(21);
                output.WriteFloat(DetailValue);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (HasDetailValue) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MvpAccolade other) {
              if (other == null) {
                return;
              }
              if (other.HasType) {
                Type = other.Type;
              }
              if (other.HasDetailValue) {
                DetailValue = other.DetailValue;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Type = (global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade.Types.MvpAccoladeType) input.ReadEnum();
                    break;
                  }
                  case 21: {
                    DetailValue = input.ReadFloat();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Type = (global::Steam.Protos.Dota2.CMvpData.Types.MvpDatum.Types.MvpAccolade.Types.MvpAccoladeType) input.ReadEnum();
                    break;
                  }
                  case 21: {
                    DetailValue = input.ReadFloat();
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the MvpAccolade message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum MvpAccoladeType {
                [pbr::OriginalName("kills")] Kills = 1,
                [pbr::OriginalName("deaths")] Deaths = 2,
                [pbr::OriginalName("assists")] Assists = 3,
                [pbr::OriginalName("net_worth")] NetWorth = 5,
                [pbr::OriginalName("item_value")] ItemValue = 6,
                [pbr::OriginalName("support_gold_spent")] SupportGoldSpent = 7,
                [pbr::OriginalName("wards_placed")] WardsPlaced = 8,
                [pbr::OriginalName("dewards")] Dewards = 9,
                [pbr::OriginalName("camps_stacked")] CampsStacked = 10,
                [pbr::OriginalName("last_hits")] LastHits = 11,
                [pbr::OriginalName("denies")] Denies = 12,
                [pbr::OriginalName("kKillEaterEvent_Killing_Sprees")] KKillEaterEventKillingSprees = 13,
                [pbr::OriginalName("kKillEaterEvent_Godlike")] KKillEaterEventGodlike = 14,
                [pbr::OriginalName("kKillEaterEvent_Towers_Destroyed")] KKillEaterEventTowersDestroyed = 15,
                [pbr::OriginalName("kKillEaterEventType_Invoker_SunstrikeKills")] KKillEaterEventTypeInvokerSunstrikeKills = 16,
                [pbr::OriginalName("kKillEaterEventType_Axe_Culls")] KKillEaterEventTypeAxeCulls = 17,
                [pbr::OriginalName("kKillEaterEventType_Axe_BattleHungerKills")] KKillEaterEventTypeAxeBattleHungerKills = 18,
                [pbr::OriginalName("kKillEaterEventType_LowHealthKills")] KKillEaterEventTypeLowHealthKills = 19,
                [pbr::OriginalName("kKillEaterEventType_Invoker_TornadoKills")] KKillEaterEventTypeInvokerTornadoKills = 20,
                [pbr::OriginalName("kKillEaterEventType_Sven_DoubleStuns")] KKillEaterEventTypeSvenDoubleStuns = 21,
                [pbr::OriginalName("kKillEaterEventType_Sven_WarcryAssists")] KKillEaterEventTypeSvenWarcryAssists = 22,
                [pbr::OriginalName("kKillEaterEventType_Sven_CleaveDoubleKills")] KKillEaterEventTypeSvenCleaveDoubleKills = 23,
                [pbr::OriginalName("kKillEaterEventType_Sven_TeleportInterrupts")] KKillEaterEventTypeSvenTeleportInterrupts = 24,
                [pbr::OriginalName("kKillEaterEventType_Faceless_MultiChrono")] KKillEaterEventTypeFacelessMultiChrono = 25,
                [pbr::OriginalName("kKillEaterEventType_Faceless_ChronoKills")] KKillEaterEventTypeFacelessChronoKills = 26,
                [pbr::OriginalName("kKillEaterEventType_Ursa_MultiShocks")] KKillEaterEventTypeUrsaMultiShocks = 27,
                [pbr::OriginalName("kKillEaterEventType_RoshanKills")] KKillEaterEventTypeRoshanKills = 28,
                [pbr::OriginalName("kKillEaterEventType_Lion_FingerKills")] KKillEaterEventTypeLionFingerKills = 29,
                [pbr::OriginalName("kKillEaterEventType_Riki_SmokedHeroKills")] KKillEaterEventTypeRikiSmokedHeroKills = 32,
                [pbr::OriginalName("kKillEaterEventType_HeroesRevealedWithDust")] KKillEaterEventTypeHeroesRevealedWithDust = 33,
                [pbr::OriginalName("kKillEaterEventType_SkeletonKing_ReincarnationKills")] KKillEaterEventTypeSkeletonKingReincarnationKills = 34,
                [pbr::OriginalName("kKillEaterEventType_Skywrath_FlareKills")] KKillEaterEventTypeSkywrathFlareKills = 35,
                [pbr::OriginalName("kKillEaterEventType_Leshrac_SplitEarthStuns")] KKillEaterEventTypeLeshracSplitEarthStuns = 36,
                [pbr::OriginalName("kKillEaterEventType_Mirana_MaxStunArrows")] KKillEaterEventTypeMiranaMaxStunArrows = 37,
                [pbr::OriginalName("kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits")] KKillEaterEventTypePhantomAssassinCoupdeGraceCrits = 38,
                [pbr::OriginalName("kKillEaterEventType_PhantomAssassin_DaggerCrits")] KKillEaterEventTypePhantomAssassinDaggerCrits = 39,
                [pbr::OriginalName("kKillEaterEventType_Meepo_Earthbinds")] KKillEaterEventTypeMeepoEarthbinds = 40,
                [pbr::OriginalName("kKillEaterEventType_Bloodseeker_RuptureKills")] KKillEaterEventTypeBloodseekerRuptureKills = 41,
                [pbr::OriginalName("kKillEaterEventType_Slark_LeashedEnemies")] KKillEaterEventTypeSlarkLeashedEnemies = 42,
                [pbr::OriginalName("kKillEaterEventType_Disruptor_FountainGlimpses")] KKillEaterEventTypeDisruptorFountainGlimpses = 43,
                [pbr::OriginalName("kKillEaterEventType_Rubick_SpellsStolen")] KKillEaterEventTypeRubickSpellsStolen = 44,
                [pbr::OriginalName("kKillEaterEventType_Rubick_UltimatesStolen")] KKillEaterEventTypeRubickUltimatesStolen = 45,
                [pbr::OriginalName("kKillEaterEventType_Doom_EnemiesDoomed")] KKillEaterEventTypeDoomEnemiesDoomed = 46,
                [pbr::OriginalName("kKillEaterEventType_Omniknight_Purifications")] KKillEaterEventTypeOmniknightPurifications = 47,
                [pbr::OriginalName("kKillEaterEventType_Omniknight_AlliesRepelled")] KKillEaterEventTypeOmniknightAlliesRepelled = 48,
                [pbr::OriginalName("kKillEaterEventType_Omniknight_EnemiesRepelled")] KKillEaterEventTypeOmniknightEnemiesRepelled = 49,
                [pbr::OriginalName("kKillEaterEventType_Warlock_FiveHeroFatalBonds")] KKillEaterEventTypeWarlockFiveHeroFatalBonds = 50,
                [pbr::OriginalName("kKillEaterEventType_CrystalMaiden_FrostbittenEnemies")] KKillEaterEventTypeCrystalMaidenFrostbittenEnemies = 51,
                [pbr::OriginalName("kKillEaterEventType_CrystalMaiden_CrystalNovas")] KKillEaterEventTypeCrystalMaidenCrystalNovas = 52,
                [pbr::OriginalName("kKillEaterEventType_Kunkka_DoubleHeroTorrents")] KKillEaterEventTypeKunkkaDoubleHeroTorrents = 53,
                [pbr::OriginalName("kKillEaterEventType_Kunkka_TripleHeroGhostShips")] KKillEaterEventTypeKunkkaTripleHeroGhostShips = 54,
                [pbr::OriginalName("kKillEaterEventType_NagaSiren_EnemiesEnsnared")] KKillEaterEventTypeNagaSirenEnemiesEnsnared = 55,
                [pbr::OriginalName("kKillEaterEventType_NagaSiren_TripleHeroRipTides")] KKillEaterEventTypeNagaSirenTripleHeroRipTides = 56,
                [pbr::OriginalName("kKillEaterEventType_Lycan_KillsDuringShapeshift")] KKillEaterEventTypeLycanKillsDuringShapeshift = 57,
                [pbr::OriginalName("kKillEaterEventType_Pudge_DismemberKills")] KKillEaterEventTypePudgeDismemberKills = 58,
                [pbr::OriginalName("kKillEaterEventType_Pudge_EnemyHeroesHooked")] KKillEaterEventTypePudgeEnemyHeroesHooked = 59,
                [pbr::OriginalName("kKillEaterEventType_Pudge_HookKills")] KKillEaterEventTypePudgeHookKills = 60,
                [pbr::OriginalName("kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked")] KKillEaterEventTypePudgeUnseenEnemyHeroesHooked = 61,
                [pbr::OriginalName("kKillEaterEventType_DrowRanger_EnemiesSilenced")] KKillEaterEventTypeDrowRangerEnemiesSilenced = 62,
                [pbr::OriginalName("kKillEaterEventType_DrowRanger_MultiHeroSilences")] KKillEaterEventTypeDrowRangerMultiHeroSilences = 63,
                [pbr::OriginalName("kKillEaterEventType_DrowRanger_SilencedKills")] KKillEaterEventTypeDrowRangerSilencedKills = 64,
                [pbr::OriginalName("kKillEaterEventType_DrowRanger_FrostArrowKills")] KKillEaterEventTypeDrowRangerFrostArrowKills = 65,
                [pbr::OriginalName("kKillEaterEventType_DragonKnight_KillsInDragonForm")] KKillEaterEventTypeDragonKnightKillsInDragonForm = 66,
                [pbr::OriginalName("kKillEaterEventType_DragonKnight_BreatheFireKills")] KKillEaterEventTypeDragonKnightBreatheFireKills = 67,
                [pbr::OriginalName("kKillEaterEventType_DragonKnight_SplashKills")] KKillEaterEventTypeDragonKnightSplashKills = 68,
                [pbr::OriginalName("kKillEaterEventType_WitchDoctor_CaskStuns")] KKillEaterEventTypeWitchDoctorCaskStuns = 69,
                [pbr::OriginalName("kKillEaterEventType_WitchDoctor_MaledictKills")] KKillEaterEventTypeWitchDoctorMaledictKills = 70,
                [pbr::OriginalName("kKillEaterEventType_WitchDoctor_MultiHeroMaledicts")] KKillEaterEventTypeWitchDoctorMultiHeroMaledicts = 71,
                [pbr::OriginalName("kKillEaterEventType_WitchDoctor_DeathWardKills")] KKillEaterEventTypeWitchDoctorDeathWardKills = 72,
                [pbr::OriginalName("kKillEaterEventType_Disruptor_ThunderStrikeKills")] KKillEaterEventTypeDisruptorThunderStrikeKills = 73,
                [pbr::OriginalName("kKillEaterEventType_Disruptor_HeroesGlimpsed")] KKillEaterEventTypeDisruptorHeroesGlimpsed = 74,
                [pbr::OriginalName("kKillEaterEventType_CrystalMaiden_FreezingFieldKills")] KKillEaterEventTypeCrystalMaidenFreezingFieldKills = 75,
                [pbr::OriginalName("kKillEaterEventType_Medusa_EnemiesPetrified")] KKillEaterEventTypeMedusaEnemiesPetrified = 77,
                [pbr::OriginalName("kKillEaterEventType_Warlock_FatalBondsKills")] KKillEaterEventTypeWarlockFatalBondsKills = 78,
                [pbr::OriginalName("kKillEaterEventType_Warlock_GolemKills")] KKillEaterEventTypeWarlockGolemKills = 79,
                [pbr::OriginalName("kKillEaterEventType_Tusk_WalrusPunches")] KKillEaterEventTypeTuskWalrusPunches = 80,
                [pbr::OriginalName("kKillEaterEventType_Tusk_SnowballStuns")] KKillEaterEventTypeTuskSnowballStuns = 81,
                [pbr::OriginalName("kKillEaterEventType_Earthshaker_FissureStuns")] KKillEaterEventTypeEarthshakerFissureStuns = 82,
                [pbr::OriginalName("kKillEaterEventType_Earthshaker_3HeroEchoslams")] KKillEaterEventTypeEarthshaker3HeroEchoslams = 83,
                [pbr::OriginalName("kKillEaterEventType_SandKing_BurrowstrikeStuns")] KKillEaterEventTypeSandKingBurrowstrikeStuns = 84,
                [pbr::OriginalName("kKillEaterEventType_SandKing_EpicenterKills")] KKillEaterEventTypeSandKingEpicenterKills = 85,
                [pbr::OriginalName("kKillEaterEventType_SkywrathMage_AncientSealKills")] KKillEaterEventTypeSkywrathMageAncientSealKills = 86,
                [pbr::OriginalName("kKillEaterEventType_SkywrathMage_ConcussiveShotKills")] KKillEaterEventTypeSkywrathMageConcussiveShotKills = 87,
                [pbr::OriginalName("kKillEaterEventType_Luna_LucentBeamKills")] KKillEaterEventTypeLunaLucentBeamKills = 88,
                [pbr::OriginalName("kKillEaterEventType_Luna_EclipseKills")] KKillEaterEventTypeLunaEclipseKills = 89,
                [pbr::OriginalName("kKillEaterEventType_KeeperOfTheLight_IlluminateKills")] KKillEaterEventTypeKeeperOfTheLightIlluminateKills = 90,
                [pbr::OriginalName("kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns")] KKillEaterEventTypeKeeperOfTheLightManaLeakStuns = 91,
                [pbr::OriginalName("kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled")] KKillEaterEventTypeKeeperOfTheLightTeammatesRecalled = 92,
                [pbr::OriginalName("kKillEaterEventType_LegionCommander_DuelsWon")] KKillEaterEventTypeLegionCommanderDuelsWon = 93,
                [pbr::OriginalName("kKillEaterEventType_Beastmaster_RoarKills")] KKillEaterEventTypeBeastmasterRoarKills = 94,
                [pbr::OriginalName("kKillEaterEventType_Beastmaster_RoarMultiKills")] KKillEaterEventTypeBeastmasterRoarMultiKills = 95,
                [pbr::OriginalName("kKillEaterEventType_Windrunner_FocusFireBuildings")] KKillEaterEventTypeWindrunnerFocusFireBuildings = 96,
                [pbr::OriginalName("kKillEaterEventType_Windrunner_PowershotKills")] KKillEaterEventTypeWindrunnerPowershotKills = 97,
                [pbr::OriginalName("kKillEaterEventType_PhantomAssassin_DaggerLastHits")] KKillEaterEventTypePhantomAssassinDaggerLastHits = 98,
                [pbr::OriginalName("kKillEaterEventType_PhantomAssassin_PhantomStrikeKills")] KKillEaterEventTypePhantomAssassinPhantomStrikeKills = 99,
                [pbr::OriginalName("kKillEaterEventType_DeathProphet_CryptSwarmKills")] KKillEaterEventTypeDeathProphetCryptSwarmKills = 100,
                [pbr::OriginalName("kKillEaterEventType_DeathProphet_ExorcismBuildingKills")] KKillEaterEventTypeDeathProphetExorcismBuildingKills = 101,
                [pbr::OriginalName("kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned")] KKillEaterEventTypeDeathProphetExorcismSpiritsSummoned = 102,
                [pbr::OriginalName("kKillEaterEventType_DeathProphet_MultiHeroSilences")] KKillEaterEventTypeDeathProphetMultiHeroSilences = 103,
                [pbr::OriginalName("kKillEaterEventType_Abaddon_MistCoilKills")] KKillEaterEventTypeAbaddonMistCoilKills = 104,
                [pbr::OriginalName("kKillEaterEventType_Abaddon_MistCoilHealed")] KKillEaterEventTypeAbaddonMistCoilHealed = 105,
                [pbr::OriginalName("kKillEaterEventType_Abaddon_AphoticShieldKills")] KKillEaterEventTypeAbaddonAphoticShieldKills = 106,
                [pbr::OriginalName("kKillEaterEventType_Lich_ChainFrostTripleKills")] KKillEaterEventTypeLichChainFrostTripleKills = 107,
                [pbr::OriginalName("kKillEaterEventType_Lich_ChainFrostMultiKills")] KKillEaterEventTypeLichChainFrostMultiKills = 108,
                [pbr::OriginalName("kKillEaterEventType_Lich_ChainFrostBounces")] KKillEaterEventTypeLichChainFrostBounces = 109,
                [pbr::OriginalName("kKillEaterEventType_Ursa_EnragedKills")] KKillEaterEventTypeUrsaEnragedKills = 110,
                [pbr::OriginalName("kKillEaterEventType_Ursa_EarthshockKills")] KKillEaterEventTypeUrsaEarthshockKills = 111,
                [pbr::OriginalName("kKillEaterEventType_Lina_LagunaBladeKills")] KKillEaterEventTypeLinaLagunaBladeKills = 112,
                [pbr::OriginalName("kKillEaterEventType_Lina_DragonSlaveKills")] KKillEaterEventTypeLinaDragonSlaveKills = 113,
                [pbr::OriginalName("kKillEaterEventType_Lina_LightStrikeArrayStuns")] KKillEaterEventTypeLinaLightStrikeArrayStuns = 114,
                [pbr::OriginalName("kKillEaterEvent_Barracks_Destroyed")] KKillEaterEventBarracksDestroyed = 115,
                [pbr::OriginalName("kKillEaterEvent_TemplarAssassin_MeldKills")] KKillEaterEventTemplarAssassinMeldKills = 116,
                [pbr::OriginalName("kKillEaterEvent_TemplarAssassin_HeroesSlowed")] KKillEaterEventTemplarAssassinHeroesSlowed = 117,
                [pbr::OriginalName("kKillEaterEvent_Sniper_AssassinationKills")] KKillEaterEventSniperAssassinationKills = 118,
                [pbr::OriginalName("kKillEaterEvent_Sniper_HeadshotStuns")] KKillEaterEventSniperHeadshotStuns = 119,
                [pbr::OriginalName("kKillEaterEvent_EarthSpirit_SmashStuns")] KKillEaterEventEarthSpiritSmashStuns = 120,
                [pbr::OriginalName("kKillEaterEvent_EarthSpirit_GripSilences")] KKillEaterEventEarthSpiritGripSilences = 121,
                [pbr::OriginalName("kKillEaterEvent_ShadowShaman_ShackleKills")] KKillEaterEventShadowShamanShackleKills = 122,
                [pbr::OriginalName("kKillEaterEvent_ShadowShaman_HexKills")] KKillEaterEventShadowShamanHexKills = 123,
                [pbr::OriginalName("kKillEaterEvent_Centaur_EnemiesStomped")] KKillEaterEventCentaurEnemiesStomped = 124,
                [pbr::OriginalName("kKillEaterEvent_Centaur_DoubleEdgeKills")] KKillEaterEventCentaurDoubleEdgeKills = 125,
                [pbr::OriginalName("kKillEaterEvent_Centaur_ReturnKills")] KKillEaterEventCentaurReturnKills = 126,
                [pbr::OriginalName("kKillEaterEvent_EmberSpirit_EnemiesChained")] KKillEaterEventEmberSpiritEnemiesChained = 127,
                [pbr::OriginalName("kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills")] KKillEaterEventEmberSpiritSleightOfFistMultiKills = 128,
                [pbr::OriginalName("kKillEaterEvent_Puck_OrbKills")] KKillEaterEventPuckOrbKills = 129,
                [pbr::OriginalName("kKillEaterEvent_VengefulSpirit_EnemiesStunned")] KKillEaterEventVengefulSpiritEnemiesStunned = 130,
                [pbr::OriginalName("kKillEaterEvent_Lifestealer_RageKills")] KKillEaterEventLifestealerRageKills = 131,
                [pbr::OriginalName("kKillEaterEvent_Lifestealer_OpenWoundsKills")] KKillEaterEventLifestealerOpenWoundsKills = 132,
                [pbr::OriginalName("kKillEaterEvent_Lifestealer_InfestKills")] KKillEaterEventLifestealerInfestKills = 133,
                [pbr::OriginalName("kKillEaterEvent_ElderTitan_SpiritKills")] KKillEaterEventElderTitanSpiritKills = 134,
                [pbr::OriginalName("kKillEaterEvent_ElderTitan_GoodStomps")] KKillEaterEventElderTitanGoodStomps = 135,
                [pbr::OriginalName("kKillEaterEvent_Clockwerk_RocketKills")] KKillEaterEventClockwerkRocketKills = 136,
                [pbr::OriginalName("kKillEaterEvent_Clockwerk_BlindRocketKills")] KKillEaterEventClockwerkBlindRocketKills = 137,
                [pbr::OriginalName("kKillEaterEvent_StormSpirit_BallKills")] KKillEaterEventStormSpiritBallKills = 138,
                [pbr::OriginalName("kKillEaterEvent_StormSpirit_DoubleRemnantKills")] KKillEaterEventStormSpiritDoubleRemnantKills = 139,
                [pbr::OriginalName("kKillEaterEvent_StormSpirit_VortexKills")] KKillEaterEventStormSpiritVortexKills = 140,
                [pbr::OriginalName("kKillEaterEvent_Tinker_DoubleMissileKills")] KKillEaterEventTinkerDoubleMissileKills = 141,
                [pbr::OriginalName("kKillEaterEvent_Tinker_LaserKills")] KKillEaterEventTinkerLaserKills = 142,
                [pbr::OriginalName("kKillEaterEvent_Techies_SuicideKills")] KKillEaterEventTechiesSuicideKills = 143,
                [pbr::OriginalName("kKillEaterEvent_Techies_LandMineKills")] KKillEaterEventTechiesLandMineKills = 144,
                [pbr::OriginalName("kKillEaterEvent_Techies_StatisTrapStuns")] KKillEaterEventTechiesStatisTrapStuns = 145,
                [pbr::OriginalName("kKillEaterEvent_Techies_RemoteMineKills")] KKillEaterEventTechiesRemoteMineKills = 146,
                [pbr::OriginalName("kKillEaterEvent_ShadowFiend_TripleRazeKills")] KKillEaterEventShadowFiendTripleRazeKills = 147,
                [pbr::OriginalName("kKillEaterEvent_ShadowFiend_RequiemMultiKills")] KKillEaterEventShadowFiendRequiemMultiKills = 148,
                [pbr::OriginalName("kKillEaterEvent_ShadowFiend_QRazeKills")] KKillEaterEventShadowFiendQrazeKills = 149,
                [pbr::OriginalName("kKillEaterEvent_ShadowFiend_WRazeKills")] KKillEaterEventShadowFiendWrazeKills = 150,
                [pbr::OriginalName("kKillEaterEvent_ShadowFiend_ERazeKills")] KKillEaterEventShadowFiendErazeKills = 151,
                [pbr::OriginalName("kKillEaterEvent_Oracle_FatesEdictKills")] KKillEaterEventOracleFatesEdictKills = 152,
                [pbr::OriginalName("kKillEaterEvent_Oracle_FalsePromiseSaves")] KKillEaterEventOracleFalsePromiseSaves = 153,
                [pbr::OriginalName("kKillEaterEvent_Juggernaut_OmnislashKills")] KKillEaterEventJuggernautOmnislashKills = 154,
                [pbr::OriginalName("kKillEaterEventType_SkeletonKing_SkeletonHeroKills")] KKillEaterEventTypeSkeletonKingSkeletonHeroKills = 157,
                [pbr::OriginalName("kKillEaterEventType_DarkWillow_CursedCrownTripleStuns")] KKillEaterEventTypeDarkWillowCursedCrownTripleStuns = 158,
                [pbr::OriginalName("kKillEaterEventType_Dazzle_ShallowGraveSaves")] KKillEaterEventTypeDazzleShallowGraveSaves = 159,
                [pbr::OriginalName("kKillEaterEventType_Dazzle_PoisonTouchKills")] KKillEaterEventTypeDazzlePoisonTouchKills = 160,
                [pbr::OriginalName("kKillEaterEventType_ThreeManMeks")] KKillEaterEventTypeThreeManMeks = 161,
                [pbr::OriginalName("kKillEaterEventType_Viper_PoisonAttackKills")] KKillEaterEventTypeViperPoisonAttackKills = 162,
                [pbr::OriginalName("kKillEaterEventType_Viper_CorrosiveSkinKills")] KKillEaterEventTypeViperCorrosiveSkinKills = 163,
                [pbr::OriginalName("kKillEaterEventType_ThreeHeroVeils")] KKillEaterEventTypeThreeHeroVeils = 164,
                [pbr::OriginalName("kKillEaterEventType_Viper_KillsDuringViperStrike")] KKillEaterEventTypeViperKillsDuringViperStrike = 165,
                [pbr::OriginalName("kKillEaterEventType_SolarCrestKills")] KKillEaterEventTypeSolarCrestKills = 166,
                [pbr::OriginalName("kKillEaterEventType_Tiny_TreeThrowKills")] KKillEaterEventTypeTinyTreeThrowKills = 167,
                [pbr::OriginalName("kKillEaterEventType_Riki_BackstabKills")] KKillEaterEventTypeRikiBackstabKills = 168,
                [pbr::OriginalName("kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns")] KKillEaterEventTypePhoenixThreeHeroSupernovaStuns = 169,
                [pbr::OriginalName("kKillEaterEventType_Terrorblade_MetamorphosisKills")] KKillEaterEventTypeTerrorbladeMetamorphosisKills = 170,
                [pbr::OriginalName("kKillEaterEventType_Lion_GreatFingerKills")] KKillEaterEventTypeLionGreatFingerKills = 171,
                [pbr::OriginalName("kKillEaterEventType_Antimage_SpellsBlockedWithAghanims")] KKillEaterEventTypeAntimageSpellsBlockedWithAghanims = 172,
                [pbr::OriginalName("kKillEaterEventType_Antimage_ThreeManManaVoids")] KKillEaterEventTypeAntimageThreeManManaVoids = 173,
                [pbr::OriginalName("kKillEaterEventType_ArcWarden_TempestDoubleKills")] KKillEaterEventTypeArcWardenTempestDoubleKills = 174,
                [pbr::OriginalName("kKillEaterEventType_ArcWarden_SparkWraithKills")] KKillEaterEventTypeArcWardenSparkWraithKills = 175,
                [pbr::OriginalName("kKillEaterEventType_Bane_BrainSapKills")] KKillEaterEventTypeBaneBrainSapKills = 176,
                [pbr::OriginalName("kKillEaterEventType_Bane_FiendsGripKills")] KKillEaterEventTypeBaneFiendsGripKills = 177,
                [pbr::OriginalName("kKillEaterEventType_Batrider_TripleHeroFlamebreaks")] KKillEaterEventTypeBatriderTripleHeroFlamebreaks = 178,
                [pbr::OriginalName("kKillEaterEventType_Batrider_DoubleHeroLassoes")] KKillEaterEventTypeBatriderDoubleHeroLassoes = 179,
                [pbr::OriginalName("kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit")] KKillEaterEventTypeBrewmasterKillsDuringPrimalSplit = 180,
                [pbr::OriginalName("kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks")] KKillEaterEventTypeBristlebackKillsUnderFourQuillStacks = 181,
                [pbr::OriginalName("kKillEaterEventType_Bristleback_TripleHeroNasalGoo")] KKillEaterEventTypeBristlebackTripleHeroNasalGoo = 182,
                [pbr::OriginalName("kKillEaterEventType_Broodmother_SpiderlingHeroKills")] KKillEaterEventTypeBroodmotherSpiderlingHeroKills = 183,
                [pbr::OriginalName("kKillEaterEventType_Broodmother_KillsInsideWeb")] KKillEaterEventTypeBroodmotherKillsInsideWeb = 184,
                [pbr::OriginalName("kKillEaterEventType_Centaur_ThreeHeroStampede")] KKillEaterEventTypeCentaurThreeHeroStampede = 185,
                [pbr::OriginalName("kKillEaterEventType_ChaosKnight_RealityRiftKills")] KKillEaterEventTypeChaosKnightRealityRiftKills = 186,
                [pbr::OriginalName("kKillEaterEventType_Chen_KillsWithPenitence")] KKillEaterEventTypeChenKillsWithPenitence = 187,
                [pbr::OriginalName("kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas")] KKillEaterEventTypeCrystalMaidenTwoHeroCrystalNovas = 188,
                [pbr::OriginalName("kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields")] KKillEaterEventTypeCrystalMaidenThreeHeroFreezingFields = 189,
                [pbr::OriginalName("kKillEaterEventType_Dazzle_ShadowWaveKills")] KKillEaterEventTypeDazzleShadowWaveKills = 190,
                [pbr::OriginalName("kKillEaterEventType_DeathProphet_SiphonKills")] KKillEaterEventTypeDeathProphetSiphonKills = 191,
                [pbr::OriginalName("kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls")] KKillEaterEventTypeDeathProphetExorcismKillsDuringEuls = 192,
                [pbr::OriginalName("kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm")] KKillEaterEventTypeDisruptorThreeHeroKineticFieldStaticStorm = 193,
                [pbr::OriginalName("kKillEaterEventType_Doom_InfernalBladeBurnKills")] KKillEaterEventTypeDoomInfernalBladeBurnKills = 194,
                [pbr::OriginalName("kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills")] KKillEaterEventTypeDrowRangerPrecisionAuraCreepTowerKills = 195,
                [pbr::OriginalName("kKillEaterEventType_EmberSpirit_RemnantKills")] KKillEaterEventTypeEmberSpiritRemnantKills = 196,
                [pbr::OriginalName("kKillEaterEventType_EmberSpirit_SleightOfFistKills")] KKillEaterEventTypeEmberSpiritSleightOfFistKills = 197,
                [pbr::OriginalName("kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos")] KKillEaterEventTypeEnigmaMidnightPulseBlackHoleCombos = 198,
                [pbr::OriginalName("kKillEaterEventType_Enigma_ThreeManBlackHoles")] KKillEaterEventTypeEnigmaThreeManBlackHoles = 199,
                [pbr::OriginalName("kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation")] KKillEaterEventTypeFacelessVoidMultiHeroTimeDilation = 200,
                [pbr::OriginalName("kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon")] KKillEaterEventTypeGyrocopterThreeHeroFlakCannon = 201,
                [pbr::OriginalName("kKillEaterEventType_Gyrocopter_HomingMissileKills")] KKillEaterEventTypeGyrocopterHomingMissileKills = 202,
                [pbr::OriginalName("kKillEaterEventType_Gyrocopter_RocketBarrageKills")] KKillEaterEventTypeGyrocopterRocketBarrageKills = 203,
                [pbr::OriginalName("kKillEaterEventType_Huskar_KillsDuringLifeBreak")] KKillEaterEventTypeHuskarKillsDuringLifeBreak = 204,
                [pbr::OriginalName("kKillEaterEventType_Huskar_BurningSpearKills")] KKillEaterEventTypeHuskarBurningSpearKills = 205,
                [pbr::OriginalName("kKillEaterEventType_Invoker_MultiHeroIceWall")] KKillEaterEventTypeInvokerMultiHeroIceWall = 206,
                [pbr::OriginalName("kKillEaterEventType_Invoker_ThreeHeroEMP")] KKillEaterEventTypeInvokerThreeHeroEmp = 207,
                [pbr::OriginalName("kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast")] KKillEaterEventTypeInvokerThreeHeroDeafeningBlast = 208,
                [pbr::OriginalName("kKillEaterEventType_Invoker_MultiHeroChaosMeteor")] KKillEaterEventTypeInvokerMultiHeroChaosMeteor = 209,
                [pbr::OriginalName("kKillEaterEventType_Jakiro_MultiHeroDualBreath")] KKillEaterEventTypeJakiroMultiHeroDualBreath = 210,
                [pbr::OriginalName("kKillEaterEventType_Jakiro_IcePathMacropyreCombos")] KKillEaterEventTypeJakiroIcePathMacropyreCombos = 211,
                [pbr::OriginalName("kKillEaterEventType_Leshrac_PulseNovaKills")] KKillEaterEventTypeLeshracPulseNovaKills = 212,
                [pbr::OriginalName("kKillEaterEventType_Leshrac_ThreeHeroLightningStorm")] KKillEaterEventTypeLeshracThreeHeroLightningStorm = 213,
                [pbr::OriginalName("kKillEaterEventType_Lion_ThreeHeroFingerOfDeath")] KKillEaterEventTypeLionThreeHeroFingerOfDeath = 214,
                [pbr::OriginalName("kKillEaterEventType_Meepo_PoofKills")] KKillEaterEventTypeMeepoPoofKills = 215,
                [pbr::OriginalName("kKillEaterEventType_Meepo_MultiHeroEarthbinds")] KKillEaterEventTypeMeepoMultiHeroEarthbinds = 216,
                [pbr::OriginalName("kKillEaterEventType_NightStalker_NighttimeKills")] KKillEaterEventTypeNightStalkerNighttimeKills = 217,
                [pbr::OriginalName("kKillEaterEventType_Morphling_KillsDuringReplicate")] KKillEaterEventTypeMorphlingKillsDuringReplicate = 218,
                [pbr::OriginalName("kKillEaterEventType_OgreMagi_FireblastKills")] KKillEaterEventTypeOgreMagiFireblastKills = 219,
                [pbr::OriginalName("kKillEaterEventType_OgreMagi_IgniteKills")] KKillEaterEventTypeOgreMagiIgniteKills = 220,
                [pbr::OriginalName("kKillEaterEventType_DominatingKillStreaks")] KKillEaterEventTypeDominatingKillStreaks = 221,
                [pbr::OriginalName("kKillEaterEventType_MegaKillStreaks")] KKillEaterEventTypeMegaKillStreaks = 222,
                [pbr::OriginalName("kKillEaterEventType_Alchemist_AghanimsGiven")] KKillEaterEventTypeAlchemistAghanimsGiven = 223,
                [pbr::OriginalName("kKillEaterEventType_VeilsLeadingToKills")] KKillEaterEventTypeVeilsLeadingToKills = 224,
                [pbr::OriginalName("kKillEaterEventType_DustLeadingToKills")] KKillEaterEventTypeDustLeadingToKills = 225,
                [pbr::OriginalName("kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns")] KKillEaterEventTypeWitchDoctorMultiHeroCaskStuns = 226,
                [pbr::OriginalName("kKillEaterEventType_Weaver_ShukuchiKills")] KKillEaterEventTypeWeaverShukuchiKills = 227,
                [pbr::OriginalName("kKillEaterEventType_Windrunner_ShackleFocusFireKills")] KKillEaterEventTypeWindrunnerShackleFocusFireKills = 228,
                [pbr::OriginalName("kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills")] KKillEaterEventTypeVengefulSpiritVengeanceAuraIllusionKills = 229,
                [pbr::OriginalName("kKillEaterEventType_Tusk_WalrusPunchKills")] KKillEaterEventTypeTuskWalrusPunchKills = 230,
                [pbr::OriginalName("kKillEaterEventType_Tinker_MultiHeroLasers")] KKillEaterEventTypeTinkerMultiHeroLasers = 231,
                [pbr::OriginalName("kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades")] KKillEaterEventTypeTemplarAssassinMultiHeroPsiBlades = 232,
                [pbr::OriginalName("kKillEaterEventType_Sven_KillsDuringGodsStrength")] KKillEaterEventTypeSvenKillsDuringGodsStrength = 233,
                [pbr::OriginalName("kKillEaterEventType_Sniper_ThreeHeroShrapnels")] KKillEaterEventTypeSniperThreeHeroShrapnels = 234,
                [pbr::OriginalName("kKillEaterEventType_Slark_KillsDuringShadowDance")] KKillEaterEventTypeSlarkKillsDuringShadowDance = 235,
                [pbr::OriginalName("kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks")] KKillEaterEventTypeShadowShamanMultiHeroEtherShocks = 236,
                [pbr::OriginalName("kKillEaterEventType_ShadowShaman_SerpentWardShackleKills")] KKillEaterEventTypeShadowShamanSerpentWardShackleKills = 237,
                [pbr::OriginalName("kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade")] KKillEaterEventTypeRikiThreeHeroTricksOfTheTrade = 238,
                [pbr::OriginalName("kKillEaterEventType_Razor_EyeOfTheStormKills")] KKillEaterEventTypeRazorEyeOfTheStormKills = 239,
                [pbr::OriginalName("kKillEaterEventType_Pugna_LifeDrainKills")] KKillEaterEventTypePugnaLifeDrainKills = 240,
                [pbr::OriginalName("kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills")] KKillEaterEventTypeObsidianDestroyerSanitysEclipseKills = 241,
                [pbr::OriginalName("kKillEaterEventType_Oracle_MultiHeroFortunesEnd")] KKillEaterEventTypeOracleMultiHeroFortunesEnd = 242,
                [pbr::OriginalName("kKillEaterEventType_Omniknight_PurificationKills")] KKillEaterEventTypeOmniknightPurificationKills = 243,
                [pbr::OriginalName("kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear")] KKillEaterEventTypeNightStalkerEnemyMissesUnderCripplingFear = 244,
                [pbr::OriginalName("kKillEaterEventType_Warlock_ThreeHeroFatalBonds")] KKillEaterEventTypeWarlockThreeHeroFatalBonds = 245,
                [pbr::OriginalName("kKillEaterEventType_Riki_TricksOfTheTradeKills")] KKillEaterEventTypeRikiTricksOfTheTradeKills = 246,
                [pbr::OriginalName("kKillEaterEventType_Earthshaker_AftershockHits10")] KKillEaterEventTypeEarthshakerAftershockHits10 = 247,
                [pbr::OriginalName("kKillEaterEventType_Earthshaker_5HeroEchoslams")] KKillEaterEventTypeEarthshaker5HeroEchoslams = 248,
                [pbr::OriginalName("kKillEaterEventType_Lina_LagunaBladeHeroKills")] KKillEaterEventTypeLinaLagunaBladeHeroKills = 249,
                [pbr::OriginalName("kKillEaterEventType_Lina_LightStrikeHeroStuns")] KKillEaterEventTypeLinaLightStrikeHeroStuns = 250,
                [pbr::OriginalName("kKillEaterEventType_Earthshaker_FissureMultiStuns")] KKillEaterEventTypeEarthshakerFissureMultiStuns = 251,
                [pbr::OriginalName("kKillEaterEventType_Earthshaker_TotemKills")] KKillEaterEventTypeEarthshakerTotemKills = 252,
                [pbr::OriginalName("kKillEaterEventType_Pangolier_SwashbuckleKills")] KKillEaterEventTypePangolierSwashbuckleKills = 253,
                [pbr::OriginalName("kKillEaterEventType_Furion_EnemyHeroesTrapped")] KKillEaterEventTypeFurionEnemyHeroesTrapped = 254,
                [pbr::OriginalName("kKillEaterEventType_Pangolier_HeartpiercerKills")] KKillEaterEventTypePangolierHeartpiercerKills = 255,
                [pbr::OriginalName("kKillEaterEventType_Medusa_MultiHeroStoneGaze")] KKillEaterEventTypeMedusaMultiHeroStoneGaze = 256,
                [pbr::OriginalName("kKillEaterEventType_Medusa_SplitShotKills")] KKillEaterEventTypeMedusaSplitShotKills = 257,
                [pbr::OriginalName("kKillEaterEventType_Mirana_MultiHeroStarstorm")] KKillEaterEventTypeMiranaMultiHeroStarstorm = 258,
                [pbr::OriginalName("kKillEaterEventType_Mirana_KillsFromMoonlightShadow")] KKillEaterEventTypeMiranaKillsFromMoonlightShadow = 259,
                [pbr::OriginalName("kKillEaterEventType_Magnus_MultiHeroSkewers")] KKillEaterEventTypeMagnusMultiHeroSkewers = 260,
                [pbr::OriginalName("kKillEaterEventType_Magnus_MultiHeroReversePolarity")] KKillEaterEventTypeMagnusMultiHeroReversePolarity = 261,
                [pbr::OriginalName("kKillEaterEventType_Magnus_HeroesSlowedWithShockwave")] KKillEaterEventTypeMagnusHeroesSlowedWithShockwave = 262,
                [pbr::OriginalName("kKillEaterEventType_NagaSiren_MultiHeroSong")] KKillEaterEventTypeNagaSirenMultiHeroSong = 263,
                [pbr::OriginalName("kKillEaterEventType_NagaSiren_AlliesHealedBySong")] KKillEaterEventTypeNagaSirenAlliesHealedBySong = 264,
                [pbr::OriginalName("kKillEaterEventType_LoneDruid_MultiHeroRoar")] KKillEaterEventTypeLoneDruidMultiHeroRoar = 265,
                [pbr::OriginalName("kKillEaterEventType_LoneDruid_BattleCryKills")] KKillEaterEventTypeLoneDruidBattleCryKills = 266,
                [pbr::OriginalName("kKillEaterEventType_WinterWyvern_ThreeHeroCurses")] KKillEaterEventTypeWinterWyvernThreeHeroCurses = 267,
                [pbr::OriginalName("kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell")] KKillEaterEventTypeAntimageSpellsBlockedWithCounterspell = 268,
                [pbr::OriginalName("kKillEaterEventType_Mars_EnemiesKilledInArena")] KKillEaterEventTypeMarsEnemiesKilledInArena = 269,
                [pbr::OriginalName("kKillEaterEventType_Mars_MultiHeroGodsRebuke")] KKillEaterEventTypeMarsMultiHeroGodsRebuke = 270,
                [pbr::OriginalName("kKillEaterEventType_Mars_GodsRebukeKills")] KKillEaterEventTypeMarsGodsRebukeKills = 271,
                [pbr::OriginalName("kKillEaterEventType_Snapfire_LizardBlobsKills")] KKillEaterEventTypeSnapfireLizardBlobsKills = 272,
                [pbr::OriginalName("kKillEaterEventType_Snapfire_TwoHeroCookieStuns")] KKillEaterEventTypeSnapfireTwoHeroCookieStuns = 273,
                [pbr::OriginalName("Custom_KillStreak")] CustomKillStreak = 274,
                [pbr::OriginalName("kKillEaterEventType_Muerta_DeadShotKills")] KKillEaterEventTypeMuertaDeadShotKills = 275,
                [pbr::OriginalName("kKillEaterEventType_Muerta_PierceTheVeilKills")] KKillEaterEventTypeMuertaPierceTheVeilKills = 276,
                [pbr::OriginalName("kKillEaterEventType_Muerta_MultiHeroDeadShot")] KKillEaterEventTypeMuertaMultiHeroDeadShot = 277,
                [pbr::OriginalName("kKillEaterEventType_Muerta_DeadShotsIntoTheCalling")] KKillEaterEventTypeMuertaDeadShotsIntoTheCalling = 278,
                [pbr::OriginalName("kKillEaterEventType_Ringmaster_LongRangeDaggerHits")] KKillEaterEventTypeRingmasterLongRangeDaggerHits = 279,
                [pbr::OriginalName("kKillEaterEventType_Ringmaster_MultiHeroWhips")] KKillEaterEventTypeRingmasterMultiHeroWhips = 280,
                [pbr::OriginalName("kKillEaterEventType_Ringmaster_MultiHeroMesmerizes")] KKillEaterEventTypeRingmasterMultiHeroMesmerizes = 281,
                [pbr::OriginalName("kKillEaterEventType_Kez_ParryCounterAttacks")] KKillEaterEventTypeKezParryCounterAttacks = 282,
                [pbr::OriginalName("kKillEaterEventType_Kez_RavensVeilKills")] KKillEaterEventTypeKezRavensVeilKills = 283,
                [pbr::OriginalName("kKillEaterEventType_Kez_RaptorDanceHealing")] KKillEaterEventTypeKezRaptorDanceHealing = 284,
                [pbr::OriginalName("kKillEaterEventType_Kez_KillsDuringFalconRush")] KKillEaterEventTypeKezKillsDuringFalconRush = 285,
                [pbr::OriginalName("kKillEaterEventType_Seasonal_PartyHatsStolen")] KKillEaterEventTypeSeasonalPartyHatsStolen = 286,
                [pbr::OriginalName("kKillEaterEventType_Seasonal_TallestHat")] KKillEaterEventTypeSeasonalTallestHat = 287,
              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
