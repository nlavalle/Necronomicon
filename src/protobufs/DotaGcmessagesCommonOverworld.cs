// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_gcmessages_common_overworld.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Steam.Protos.Dota2 {

  /// <summary>Holder for reflection information generated from dota_gcmessages_common_overworld.proto</summary>
  public static partial class DotaGcmessagesCommonOverworldReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_gcmessages_common_overworld.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaGcmessagesCommonOverworldReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZkb3RhX2djbWVzc2FnZXNfY29tbW9uX292ZXJ3b3JsZC5wcm90bxoTc3Rl",
            "YW1tZXNzYWdlcy5wcm90bxoXZG90YV9zaGFyZWRfZW51bXMucHJvdG8aHGRv",
            "dGFfZ2NtZXNzYWdlc19jb21tb24ucHJvdG8aJmRvdGFfZ2NtZXNzYWdlc19j",
            "b21tb25fc3Vydml2b3JzLnByb3RvGhZnY3Nka19nY21lc3NhZ2VzLnByb3Rv",
            "IkAKF0NNc2dPdmVyd29ybGRUb2tlbkNvdW50EhAKCHRva2VuX2lkGAEgASgN",
            "EhMKC3Rva2VuX2NvdW50GAIgASgNIkwKGkNNc2dPdmVyd29ybGRUb2tlblF1",
            "YW50aXR5Ei4KDHRva2VuX2NvdW50cxgBIAMoCzIYLkNNc2dPdmVyd29ybGRU",
            "b2tlbkNvdW50IoICCidDTXNnT3ZlcndvcmxkRW5jb3VudGVyVG9rZW5UcmVh",
            "c3VyZURhdGESTQoOcmV3YXJkX29wdGlvbnMYASADKAsyNS5DTXNnT3Zlcndv",
            "cmxkRW5jb3VudGVyVG9rZW5UcmVhc3VyZURhdGEuUmV3YXJkT3B0aW9uGocB",
            "CgxSZXdhcmRPcHRpb24SEwoLcmV3YXJkX2RhdGEYASABKA0SLwoKdG9rZW5f",
            "Y29zdBgCIAEoCzIbLkNNc2dPdmVyd29ybGRUb2tlblF1YW50aXR5EjEKDHRv",
            "a2VuX3Jld2FyZBgDIAEoCzIbLkNNc2dPdmVyd29ybGRUb2tlblF1YW50aXR5",
            "IuYBCiRDTXNnT3ZlcndvcmxkRW5jb3VudGVyVG9rZW5RdWVzdERhdGESOwoG",
            "cXVlc3RzGAEgAygLMisuQ01zZ092ZXJ3b3JsZEVuY291bnRlclRva2VuUXVl",
            "c3REYXRhLlF1ZXN0GoABCgVRdWVzdBITCgtyZXdhcmRfZGF0YRgBIAEoDRIv",
            "Cgp0b2tlbl9jb3N0GAIgASgLMhsuQ01zZ092ZXJ3b3JsZFRva2VuUXVhbnRp",
            "dHkSMQoMdG9rZW5fcmV3YXJkGAMgASgLMhsuQ01zZ092ZXJ3b3JsZFRva2Vu",
            "UXVhbnRpdHkiKQoVQ01zZ092ZXJ3b3JsZEhlcm9MaXN0EhAKCGhlcm9faWRz",
            "GAEgAygFImMKJENNc2dPdmVyd29ybGRFbmNvdW50ZXJDaG9vc2VIZXJvRGF0",
            "YRIpCgloZXJvX2xpc3QYASABKAsyFi5DTXNnT3ZlcndvcmxkSGVyb0xpc3QS",
            "EAoIYWRkaXRpdmUYAiABKAgibQoiQ01zZ092ZXJ3b3JsZEVuY291bnRlclBy",
            "b2dyZXNzRGF0YRIOCgZjaG9pY2UYASABKAUSEAoIcHJvZ3Jlc3MYAiABKAUS",
            "FAoMbWF4X3Byb2dyZXNzGAMgASgFEg8KB3Zpc2l0ZWQYBCABKAgiSwoaQ01z",
            "Z092ZXJ3b3JsZEVuY291bnRlckRhdGESLQoUZXh0cmFfZW5jb3VudGVyX2Rh",
            "dGEYASADKAsyDy5DRXh0cmFNc2dCbG9jayKnAQoRQ01zZ092ZXJ3b3JsZE5v",
            "ZGUSDwoHbm9kZV9pZBgBIAEoDRJHCgpub2RlX3N0YXRlGAIgASgOMhQuRU92",
            "ZXJ3b3JsZE5vZGVTdGF0ZToda19lT3ZlcndvcmxkTm9kZVN0YXRlX0ludmFs",
            "aWQSOAoTbm9kZV9lbmNvdW50ZXJfZGF0YRgDIAEoCzIbLkNNc2dPdmVyd29y",
            "bGRFbmNvdW50ZXJEYXRhIp0BChFDTXNnT3ZlcndvcmxkUGF0aBIPCgdwYXRo",
            "X2lkGAEgASgNEi4KCXBhdGhfY29zdBgCIAEoCzIbLkNNc2dPdmVyd29ybGRU",
            "b2tlblF1YW50aXR5EkcKCnBhdGhfc3RhdGUYAyABKA4yFC5FT3Zlcndvcmxk",
            "UGF0aFN0YXRlOh1rX2VPdmVyd29ybGRQYXRoU3RhdGVfSW52YWxpZCJkCh9D",
            "TXNnT3ZlcndvcmxkTWluaWdhbWVDdXN0b21EYXRhEjAKDnN1cnZpdm9yc19k",
            "YXRhGAEgASgLMhYuQ01zZ1N1cnZpdm9yc1VzZXJEYXRhSABCDwoNbWluaWdh",
            "bWVfdHlwZSKAAQodQ01zZ092ZXJ3b3JsZE1pbmlnYW1lVXNlckRhdGESDwoH",
            "bm9kZV9pZBgBIAEoDRIXCg9jdXJyZW5jeV9hbW91bnQYAiABKA0SNQoLY3Vz",
            "dG9tX2RhdGEYAyABKAsyIC5DTXNnT3ZlcndvcmxkTWluaWdhbWVDdXN0b21E",
            "YXRhItICChVDTXNnT3ZlcndvcmxkVXNlckRhdGESNAoPdG9rZW5faW52ZW50",
            "b3J5GAEgASgLMhsuQ01zZ092ZXJ3b3JsZFRva2VuUXVhbnRpdHkSKwoPb3Zl",
            "cndvcmxkX25vZGVzGAIgAygLMhIuQ01zZ092ZXJ3b3JsZE5vZGUSKwoPb3Zl",
            "cndvcmxkX3BhdGhzGAMgAygLMhIuQ01zZ092ZXJ3b3JsZFBhdGgSFwoPY3Vy",
            "cmVudF9ub2RlX2lkGAQgASgNEj8KDW1pbmlnYW1lX2RhdGEYBSADKAsyKC5D",
            "TXNnT3ZlcndvcmxkVXNlckRhdGEuTWluaWdhbWVEYXRhRW50cnkaTwoRTWlu",
            "aWdhbWVEYXRhRW50cnkSCwoDa2V5GAEgASgNEi0KBXZhbHVlGAIgASgLMh4u",
            "Q01zZ092ZXJ3b3JsZE1pbmlnYW1lVXNlckRhdGEisQEKGUNNc2dPdmVyd29y",
            "bGRNYXRjaFJld2FyZHMSMgoHcGxheWVycxgBIAMoCzIhLkNNc2dPdmVyd29y",
            "bGRNYXRjaFJld2FyZHMuUGxheWVyGmAKBlBsYXllchITCgtwbGF5ZXJfc2xv",
            "dBgBIAEoDRIrCgZ0b2tlbnMYAiABKAsyGy5DTXNnT3ZlcndvcmxkVG9rZW5R",
            "dWFudGl0eRIUCgxvdmVyd29ybGRfaWQYAyABKA0iOgoiQ01zZ0NsaWVudFRv",
            "R0NPdmVyd29ybGRHZXRVc2VyRGF0YRIUCgxvdmVyd29ybGRfaWQYASABKA0i",
            "rwIKKkNNc2dDbGllbnRUb0dDT3ZlcndvcmxkR2V0VXNlckRhdGFSZXNwb25z",
            "ZRJZCghyZXNwb25zZRgBIAEoDjI1LkNNc2dDbGllbnRUb0dDT3Zlcndvcmxk",
            "R2V0VXNlckRhdGFSZXNwb25zZS5FUmVzcG9uc2U6EGtfZUludGVybmFsRXJy",
            "b3ISKQoJdXNlcl9kYXRhGAIgASgLMhYuQ01zZ092ZXJ3b3JsZFVzZXJEYXRh",
            "InsKCUVSZXNwb25zZRIUChBrX2VJbnRlcm5hbEVycm9yEAASDgoKa19lU3Vj",
            "Y2VzcxABEg4KCmtfZVRvb0J1c3kQAhIPCgtrX2VEaXNhYmxlZBADEg4KCmtf",
            "ZVRpbWVvdXQQBBIXChNrX2VJbnZhbGlkT3ZlcndvcmxkEAUiaQomQ01zZ0dD",
            "VG9DbGllbnRPdmVyd29ybGRVc2VyRGF0YVVwZGF0ZWQSFAoMb3Zlcndvcmxk",
            "X2lkGAEgASgNEikKCXVzZXJfZGF0YRgCIAEoCzIWLkNNc2dPdmVyd29ybGRV",
            "c2VyRGF0YSJMCiNDTXNnQ2xpZW50VG9HQ092ZXJ3b3JsZENvbXBsZXRlUGF0",
            "aBIUCgxvdmVyd29ybGRfaWQYASABKA0SDwoHcGF0aF9pZBgCIAEoDSKfAwor",
            "Q01zZ0NsaWVudFRvR0NPdmVyd29ybGRDb21wbGV0ZVBhdGhSZXNwb25zZRJa",
            "CghyZXNwb25zZRgBIAEoDjI2LkNNc2dDbGllbnRUb0dDT3ZlcndvcmxkQ29t",
            "cGxldGVQYXRoUmVzcG9uc2UuRVJlc3BvbnNlOhBrX2VJbnRlcm5hbEVycm9y",
            "EjkKDmNsYWltX3Jlc3BvbnNlGAIgASgLMiEuQ01zZ0RPVEFDbGFpbUV2ZW50",
            "QWN0aW9uUmVzcG9uc2Ui2AEKCUVSZXNwb25zZRIUChBrX2VJbnRlcm5hbEVy",
            "cm9yEAASDgoKa19lU3VjY2VzcxABEg4KCmtfZVRvb0J1c3kQAhIPCgtrX2VE",
            "aXNhYmxlZBADEg4KCmtfZVRpbWVvdXQQBBIXChNrX2VJbnZhbGlkT3Zlcndv",
            "cmxkEAUSEgoOa19lSW52YWxpZFBhdGgQBhIWChJrX2VOb3RFbm91Z2hUb2tl",
            "bnMQBxITCg9rX2VQYXRoSXNMb2NrZWQQCBIaChZrX2VQYXRoQWxyZWFkeVVu",
            "bG9ja2VkEAkiTgoqQ01zZ092ZXJ3b3JsZEVuY291bnRlclBpdEZpZ2h0ZXJS",
            "ZXdhcmREYXRhEhAKCHRva2VuX2lkGAEgASgNEg4KBmNob2ljZRgCIAEoDSKR",
            "AgorQ01zZ0NsaWVudFRvR0NPdmVyd29ybGRDbGFpbUVuY291bnRlclJld2Fy",
            "ZBIUCgxvdmVyd29ybGRfaWQYASABKA0SDwoHbm9kZV9pZBgCIAEoDRITCgty",
            "ZXdhcmRfZGF0YRgDIAEoDRIcChRwZXJpb2RpY19yZXNvdXJjZV9pZBgEIAEo",
            "DRI2ChFleHRyYV9yZXdhcmRfZGF0YRgFIAEoCzIbLkNNc2dPdmVyd29ybGRF",
            "bmNvdW50ZXJEYXRhEhgKEGxlYWRlcmJvYXJkX2RhdGEYBiABKA0SGQoRbGVh",
            "ZGVyYm9hcmRfaW5kZXgYByABKA0SGwoTc2hvdWxkX2NsYWltX3Jld2FyZBgI",
            "IAEoCCKkBQozQ01zZ0NsaWVudFRvR0NPdmVyd29ybGRDbGFpbUVuY291bnRl",
            "clJld2FyZFJlc3BvbnNlEmIKCHJlc3BvbnNlGAEgASgOMj4uQ01zZ0NsaWVu",
            "dFRvR0NPdmVyd29ybGRDbGFpbUVuY291bnRlclJld2FyZFJlc3BvbnNlLkVS",
            "ZXNwb25zZToQa19lSW50ZXJuYWxFcnJvchI5Cg5jbGFpbV9yZXNwb25zZRgC",
            "IAEoCzIhLkNNc2dET1RBQ2xhaW1FdmVudEFjdGlvblJlc3BvbnNlEjQKD3Rv",
            "a2Vuc19yZWNlaXZlZBgDIAEoCzIbLkNNc2dPdmVyd29ybGRUb2tlblF1YW50",
            "aXR5IpcDCglFUmVzcG9uc2USFAoQa19lSW50ZXJuYWxFcnJvchAAEg4KCmtf",
            "ZVN1Y2Nlc3MQARIOCgprX2VUb29CdXN5EAISDwoLa19lRGlzYWJsZWQQAxIO",
            "CgprX2VUaW1lb3V0EAQSFwoTa19lSW52YWxpZE92ZXJ3b3JsZBAFEhIKDmtf",
            "ZUludmFsaWROb2RlEAYSEQoNa19lTm9kZUxvY2tlZBAHEhsKF2tfZVJld2Fy",
            "ZEFscmVhZHlDbGFpbWVkEAgSFwoTa19lTm9kZU5vdEVuY291bnRlchAJEh4K",
            "GmtfZUVuY291bnRlck1pc3NpbmdSZXdhcmRzEAoSIgoea19lSW52YWxpZEVu",
            "Y291bnRlclJld2FyZFN0eWxlEAsSGwoXa19lSW52YWxpZEVuY291bnRlckRh",
            "dGEQDBIfChtrX2VOb3RFbm91Z2hUb2tlbnNGb3JSZXdhcmQQDRIhCh1rX2VO",
            "b3RFbm91Z2hSZXNvdXJjZUZvclJld2FyZBAOEhgKFGtfZUludmFsaWRSZXdh",
            "cmREYXRhEA8iTgolQ01zZ0NsaWVudFRvR0NPdmVyd29ybGRWaXNpdEVuY291",
            "bnRlchIUCgxvdmVyd29ybGRfaWQYASABKA0SDwoHbm9kZV9pZBgCIAEoDSLi",
            "AgotQ01zZ0NsaWVudFRvR0NPdmVyd29ybGRWaXNpdEVuY291bnRlclJlc3Bv",
            "bnNlElwKCHJlc3BvbnNlGAEgASgOMjguQ01zZ0NsaWVudFRvR0NPdmVyd29y",
            "bGRWaXNpdEVuY291bnRlclJlc3BvbnNlLkVSZXNwb25zZToQa19lSW50ZXJu",
            "YWxFcnJvciLSAQoJRVJlc3BvbnNlEhQKEGtfZUludGVybmFsRXJyb3IQABIO",
            "CgprX2VTdWNjZXNzEAESDgoKa19lVG9vQnVzeRACEg8KC2tfZURpc2FibGVk",
            "EAMSDgoKa19lVGltZW91dBAEEhcKE2tfZUludmFsaWRPdmVyd29ybGQQBRIS",
            "Cg5rX2VJbnZhbGlkTm9kZRAGEhEKDWtfZU5vZGVMb2NrZWQQBxIXChNrX2VO",
            "b2RlTm90RW5jb3VudGVyEAgSFQoRa19lQWxyZWFkeVZpc2l0ZWQQCSJKCiFD",
            "TXNnQ2xpZW50VG9HQ092ZXJ3b3JsZE1vdmVUb05vZGUSFAoMb3Zlcndvcmxk",
            "X2lkGAEgASgNEg8KB25vZGVfaWQYAiABKA0iqgIKKUNNc2dDbGllbnRUb0dD",
            "T3ZlcndvcmxkTW92ZVRvTm9kZVJlc3BvbnNlElgKCHJlc3BvbnNlGAEgASgO",
            "MjQuQ01zZ0NsaWVudFRvR0NPdmVyd29ybGRNb3ZlVG9Ob2RlUmVzcG9uc2Uu",
            "RVJlc3BvbnNlOhBrX2VJbnRlcm5hbEVycm9yIqIBCglFUmVzcG9uc2USFAoQ",
            "a19lSW50ZXJuYWxFcnJvchAAEg4KCmtfZVN1Y2Nlc3MQARIOCgprX2VUb29C",
            "dXN5EAISDwoLa19lRGlzYWJsZWQQAxIOCgprX2VUaW1lb3V0EAQSFwoTa19l",
            "SW52YWxpZE92ZXJ3b3JsZBAFEhIKDmtfZUludmFsaWROb2RlEAYSEQoNa19l",
            "Tm9kZUxvY2tlZBAHIsYBCiJDTXNnQ2xpZW50VG9HQ092ZXJ3b3JsZFRyYWRl",
            "VG9rZW5zEhQKDG92ZXJ3b3JsZF9pZBgBIAEoDRIwCgt0b2tlbl9vZmZlchgC",
            "IAEoCzIbLkNNc2dPdmVyd29ybGRUb2tlblF1YW50aXR5EjIKDXRva2VuX3Jl",
            "cXVlc3QYAyABKAsyGy5DTXNnT3ZlcndvcmxkVG9rZW5RdWFudGl0eRIOCgZy",
            "ZWNpcGUYBCABKA0SFAoMZW5jb3VudGVyX2lkGAUgASgNItwDCipDTXNnQ2xp",
            "ZW50VG9HQ092ZXJ3b3JsZFRyYWRlVG9rZW5zUmVzcG9uc2USWQoIcmVzcG9u",
            "c2UYASABKA4yNS5DTXNnQ2xpZW50VG9HQ092ZXJ3b3JsZFRyYWRlVG9rZW5z",
            "UmVzcG9uc2UuRVJlc3BvbnNlOhBrX2VJbnRlcm5hbEVycm9yEjQKD3Rva2Vu",
            "c19yZWNlaXZlZBgCIAEoCzIbLkNNc2dPdmVyd29ybGRUb2tlblF1YW50aXR5",
            "IpwCCglFUmVzcG9uc2USFAoQa19lSW50ZXJuYWxFcnJvchAAEg4KCmtfZVN1",
            "Y2Nlc3MQARIOCgprX2VUb29CdXN5EAISDwoLa19lRGlzYWJsZWQQAxIOCgpr",
            "X2VUaW1lb3V0EAQSEQoNa19lTm90QWxsb3dlZBAFEhEKDWtfZU5vZGVMb2Nr",
            "ZWQQBhIXChNrX2VJbnZhbGlkT3ZlcndvcmxkEAcSEwoPa19lSW52YWxpZE9m",
            "ZmVyEAgSFgoSa19lTm90RW5vdWdoVG9rZW5zEAkSEgoOa19lSW52YWxpZE5v",
            "ZGUQChIXChNrX2VJbnZhbGlkRW5jb3VudGVyEAsSHwoba19lUmV3YXJkRG9l",
            "c05vdE1hdGNoUmVjaXBlEAwiowEKIUNNc2dDbGllbnRUb0dDT3Zlcndvcmxk",
            "R2lmdFRva2VucxIUCgxvdmVyd29ybGRfaWQYASABKA0SLAoKdG9rZW5fZ2lm",
            "dBgCIAEoCzIYLkNNc2dPdmVyd29ybGRUb2tlbkNvdW50EhwKFHJlY2lwaWVu",
            "dF9hY2NvdW50X2lkGAMgASgNEhwKFHBlcmlvZGljX3Jlc291cmNlX2lkGAQg",
            "ASgNIpADCilDTXNnQ2xpZW50VG9HQ092ZXJ3b3JsZEdpZnRUb2tlbnNSZXNw",
            "b25zZRJYCghyZXNwb25zZRgBIAEoDjI0LkNNc2dDbGllbnRUb0dDT3Zlcndv",
            "cmxkR2lmdFRva2Vuc1Jlc3BvbnNlLkVSZXNwb25zZToQa19lSW50ZXJuYWxF",
            "cnJvciKIAgoJRVJlc3BvbnNlEhQKEGtfZUludGVybmFsRXJyb3IQABIOCgpr",
            "X2VTdWNjZXNzEAESDgoKa19lVG9vQnVzeRACEg8KC2tfZURpc2FibGVkEAMS",
            "DgoKa19lVGltZW91dBAEEhEKDWtfZU5vdEFsbG93ZWQQBRIRCg1rX2VOb2Rl",
            "TG9ja2VkEAYSFwoTa19lSW52YWxpZE92ZXJ3b3JsZBAHEhIKDmtfZUludmFs",
            "aWRHaWZ0EAgSFgoSa19lTm90RW5vdWdoVG9rZW5zEAkSFwoTa19lSW52YWxp",
            "ZFJlY2lwaWVudBAKEiAKHGtfZU5vdEVub3VnaFBlcmlvZGljUmVzb3VyY2UQ",
            "CyJlCjJDTXNnQ2xpZW50VG9HQ092ZXJ3b3JsZFJlcXVlc3RUb2tlbnNOZWVk",
            "ZWRCeUZyaWVuZBIZChFmcmllbmRfYWNjb3VudF9pZBgBIAEoDRIUCgxvdmVy",
            "d29ybGRfaWQYAiABKA0irgMKOkNNc2dDbGllbnRUb0dDT3ZlcndvcmxkUmVx",
            "dWVzdFRva2Vuc05lZWRlZEJ5RnJpZW5kUmVzcG9uc2USaQoIcmVzcG9uc2UY",
            "ASABKA4yRS5DTXNnQ2xpZW50VG9HQ092ZXJ3b3JsZFJlcXVlc3RUb2tlbnNO",
            "ZWVkZWRCeUZyaWVuZFJlc3BvbnNlLkVSZXNwb25zZToQa19lSW50ZXJuYWxF",
            "cnJvchIzCg50b2tlbl9xdWFudGl0eRgCIAEoCzIbLkNNc2dPdmVyd29ybGRU",
            "b2tlblF1YW50aXR5Is8BCglFUmVzcG9uc2USFAoQa19lSW50ZXJuYWxFcnJv",
            "chAAEg4KCmtfZVN1Y2Nlc3MQARIOCgprX2VUb29CdXN5EAISDwoLa19lRGlz",
            "YWJsZWQQAxIOCgprX2VUaW1lb3V0EAQSEQoNa19lTm90QWxsb3dlZBAFEhEK",
            "DWtfZU5vZGVMb2NrZWQQBhIXChNrX2VJbnZhbGlkT3ZlcndvcmxkEAcSFAoQ",
            "a19lSW52YWxpZEZyaWVuZBAIEhYKEmtfZVRvb01hbnlSZXF1ZXN0cxAJIjoK",
            "IkNNc2dDbGllbnRUb0dDT3ZlcndvcmxkRGV2UmVzZXRBbGwSFAoMb3Zlcndv",
            "cmxkX2lkGAEgASgNIpgCCipDTXNnQ2xpZW50VG9HQ092ZXJ3b3JsZERldlJl",
            "c2V0QWxsUmVzcG9uc2USWQoIcmVzcG9uc2UYASABKA4yNS5DTXNnQ2xpZW50",
            "VG9HQ092ZXJ3b3JsZERldlJlc2V0QWxsUmVzcG9uc2UuRVJlc3BvbnNlOhBr",
            "X2VJbnRlcm5hbEVycm9yIo4BCglFUmVzcG9uc2USFAoQa19lSW50ZXJuYWxF",
            "cnJvchAAEg4KCmtfZVN1Y2Nlc3MQARIOCgprX2VUb29CdXN5EAISDwoLa19l",
            "RGlzYWJsZWQQAxIOCgprX2VUaW1lb3V0EAQSEQoNa19lTm90QWxsb3dlZBAF",
            "EhcKE2tfZUludmFsaWRPdmVyd29ybGQQBiJMCiNDTXNnQ2xpZW50VG9HQ092",
            "ZXJ3b3JsZERldlJlc2V0Tm9kZRIUCgxvdmVyd29ybGRfaWQYASABKA0SDwoH",
            "bm9kZV9pZBgCIAEoDSKuAgorQ01zZ0NsaWVudFRvR0NPdmVyd29ybGREZXZS",
            "ZXNldE5vZGVSZXNwb25zZRJaCghyZXNwb25zZRgBIAEoDjI2LkNNc2dDbGll",
            "bnRUb0dDT3ZlcndvcmxkRGV2UmVzZXROb2RlUmVzcG9uc2UuRVJlc3BvbnNl",
            "OhBrX2VJbnRlcm5hbEVycm9yIqIBCglFUmVzcG9uc2USFAoQa19lSW50ZXJu",
            "YWxFcnJvchAAEg4KCmtfZVN1Y2Nlc3MQARIOCgprX2VUb29CdXN5EAISDwoL",
            "a19lRGlzYWJsZWQQAxIOCgprX2VUaW1lb3V0EAQSEQoNa19lTm90QWxsb3dl",
            "ZBAFEhcKE2tfZUludmFsaWRPdmVyd29ybGQQBhISCg5rX2VJbnZhbGlkTm9k",
            "ZRAHInIKJUNNc2dDbGllbnRUb0dDT3ZlcndvcmxkRGV2R3JhbnRUb2tlbnMS",
            "FAoMb3ZlcndvcmxkX2lkGAEgASgNEjMKDnRva2VuX3F1YW50aXR5GAIgASgL",
            "MhsuQ01zZ092ZXJ3b3JsZFRva2VuUXVhbnRpdHkingIKLUNNc2dDbGllbnRU",
            "b0dDT3ZlcndvcmxkRGV2R3JhbnRUb2tlbnNSZXNwb25zZRJcCghyZXNwb25z",
            "ZRgBIAEoDjI4LkNNc2dDbGllbnRUb0dDT3ZlcndvcmxkRGV2R3JhbnRUb2tl",
            "bnNSZXNwb25zZS5FUmVzcG9uc2U6EGtfZUludGVybmFsRXJyb3IijgEKCUVS",
            "ZXNwb25zZRIUChBrX2VJbnRlcm5hbEVycm9yEAASDgoKa19lU3VjY2VzcxAB",
            "Eg4KCmtfZVRvb0J1c3kQAhIPCgtrX2VEaXNhYmxlZBADEg4KCmtfZVRpbWVv",
            "dXQQBBIRCg1rX2VOb3RBbGxvd2VkEAUSFwoTa19lSW52YWxpZE92ZXJ3b3Js",
            "ZBAGIkAKKENNc2dDbGllbnRUb0dDT3ZlcndvcmxkRGV2Q2xlYXJJbnZlbnRv",
            "cnkSFAoMb3ZlcndvcmxkX2lkGAEgASgNIqQCCjBDTXNnQ2xpZW50VG9HQ092",
            "ZXJ3b3JsZERldkNsZWFySW52ZW50b3J5UmVzcG9uc2USXwoIcmVzcG9uc2UY",
            "ASABKA4yOy5DTXNnQ2xpZW50VG9HQ092ZXJ3b3JsZERldkNsZWFySW52ZW50",
            "b3J5UmVzcG9uc2UuRVJlc3BvbnNlOhBrX2VJbnRlcm5hbEVycm9yIo4BCglF",
            "UmVzcG9uc2USFAoQa19lSW50ZXJuYWxFcnJvchAAEg4KCmtfZVN1Y2Nlc3MQ",
            "ARIOCgprX2VUb29CdXN5EAISDwoLa19lRGlzYWJsZWQQAxIOCgprX2VUaW1l",
            "b3V0EAQSEQoNa19lTm90QWxsb3dlZBAFEhcKE2tfZUludmFsaWRPdmVyd29y",
            "bGQQBiJbCh9DTXNnQ2xpZW50VG9HQ092ZXJ3b3JsZEZlZWRiYWNrEhAKCGxh",
            "bmd1YWdlGAEgASgNEhQKDG92ZXJ3b3JsZF9pZBgCIAEoDRIQCghmZWVkYmFj",
            "axgDIAEoCSKSAgonQ01zZ0NsaWVudFRvR0NPdmVyd29ybGRGZWVkYmFja1Jl",
            "c3BvbnNlElYKCHJlc3BvbnNlGAEgASgOMjIuQ01zZ0NsaWVudFRvR0NPdmVy",
            "d29ybGRGZWVkYmFja1Jlc3BvbnNlLkVSZXNwb25zZToQa19lSW50ZXJuYWxF",
            "cnJvciKOAQoJRVJlc3BvbnNlEhQKEGtfZUludGVybmFsRXJyb3IQABIOCgpr",
            "X2VTdWNjZXNzEAESDgoKa19lVG9vQnVzeRACEg8KC2tfZURpc2FibGVkEAMS",
            "DgoKa19lVGltZW91dBAEEhEKDWtfZU5vdEFsbG93ZWQQBRIXChNrX2VJbnZh",
            "bGlkT3ZlcndvcmxkEAYiWwomQ01zZ0NsaWVudFRvR0NPdmVyd29ybGRHZXRE",
            "eW5hbWljSW1hZ2USDQoFbWFnaWMYASABKA0SEAoIaW1hZ2VfaWQYAiABKA0S",
            "EAoIbGFuZ3VhZ2UYAyABKA0i6AIKLkNNc2dDbGllbnRUb0dDT3Zlcndvcmxk",
            "R2V0RHluYW1pY0ltYWdlUmVzcG9uc2USEAoIaW1hZ2VfaWQYASABKA0SRQoG",
            "aW1hZ2VzGAIgAygLMjUuQ01zZ0NsaWVudFRvR0NPdmVyd29ybGRHZXREeW5h",
            "bWljSW1hZ2VSZXNwb25zZS5JbWFnZRqcAQoFSW1hZ2USDQoFd2lkdGgYASAB",
            "KA0SDgoGaGVpZ2h0GAIgASgNEl8KBmZvcm1hdBgDIAEoDjJDLkNNc2dDbGll",
            "bnRUb0dDT3ZlcndvcmxkR2V0RHluYW1pY0ltYWdlUmVzcG9uc2UuRUR5bmFt",
            "aWNJbWFnZUZvcm1hdDoKa19lVW5rbm93bhITCgtpbWFnZV9ieXRlcxgEIAEo",
            "DCI+ChNFRHluYW1pY0ltYWdlRm9ybWF0Eg4KCmtfZVVua25vd24QABIKCgZr",
            "X2VQTkcQARILCgdrX2VEYXRhEAIi3wEKJUNNc2dDbGllbnRUb0dDT3Zlcndv",
            "cmxkTWluaWdhbWVBY3Rpb24SFAoMb3ZlcndvcmxkX2lkGAEgASgNEg8KB25v",
            "ZGVfaWQYAiABKA0STQoGYWN0aW9uGAMgASgOMhkuRU92ZXJ3b3JsZE1pbmln",
            "YW1lQWN0aW9uOiJrX2VPdmVyd29ybGRNaW5pZ2FtZUFjdGlvbl9JbnZhbGlk",
            "EhEKCXNlbGVjdGlvbhgEIAEoDRIUCgxvcHRpb25fdmFsdWUYBSABKA0SFwoP",
            "Y3VycmVuY3lfYW1vdW50GAYgASgNIpgDCi1DTXNnQ2xpZW50VG9HQ092ZXJ3",
            "b3JsZE1pbmlnYW1lQWN0aW9uUmVzcG9uc2USXAoIcmVzcG9uc2UYASABKA4y",
            "OC5DTXNnQ2xpZW50VG9HQ092ZXJ3b3JsZE1pbmlnYW1lQWN0aW9uUmVzcG9u",
            "c2UuRVJlc3BvbnNlOhBrX2VJbnRlcm5hbEVycm9yIogCCglFUmVzcG9uc2US",
            "FAoQa19lSW50ZXJuYWxFcnJvchAAEg4KCmtfZVN1Y2Nlc3MQARIOCgprX2VU",
            "b29CdXN5EAISDwoLa19lRGlzYWJsZWQQAxIOCgprX2VUaW1lb3V0EAQSFwoT",
            "a19lSW52YWxpZE92ZXJ3b3JsZBAFEhIKDmtfZUludmFsaWROb2RlEAYSEQoN",
            "a19lTm9kZUxvY2tlZBAHEhcKE2tfZUludmFsaWRTZWxlY3Rpb24QCBIWChJr",
            "X2VOb3RFbm91Z2hUb2tlbnMQCRIgChxrX2VOb3RFbm91Z2hNaW5pZ2FtZUN1",
            "cnJlbmN5EAoSEQoNa19lTm90QWxsb3dlZBALKn4KE0VPdmVyd29ybGROb2Rl",
            "U3RhdGUSIQoda19lT3ZlcndvcmxkTm9kZVN0YXRlX0ludmFsaWQQABIgChxr",
            "X2VPdmVyd29ybGROb2RlU3RhdGVfTG9ja2VkEAESIgoea19lT3Zlcndvcmxk",
            "Tm9kZVN0YXRlX1VubG9ja2VkEAIqggEKE0VPdmVyd29ybGRQYXRoU3RhdGUS",
            "IQoda19lT3ZlcndvcmxkUGF0aFN0YXRlX0ludmFsaWQQABIkCiBrX2VPdmVy",
            "d29ybGRQYXRoU3RhdGVfSW5jb21wbGV0ZRABEiIKHmtfZU92ZXJ3b3JsZFBh",
            "dGhTdGF0ZV9Db21wbGV0ZRACKqgGChVFT3ZlcndvcmxkQXVkaXRBY3Rpb24S",
            "Iwofa19lT3ZlcndvcmxkQXVkaXRBY3Rpb25fSW52YWxpZBAAEisKJ2tfZU92",
            "ZXJ3b3JsZEF1ZGl0QWN0aW9uX0Rldk1vZGlmeVRva2VucxABEi0KKWtfZU92",
            "ZXJ3b3JsZEF1ZGl0QWN0aW9uX0RldkNsZWFySW52ZW50b3J5EAISKgoma19l",
            "T3ZlcndvcmxkQXVkaXRBY3Rpb25fRGV2R3JhbnRUb2tlbnMQAxIoCiRrX2VP",
            "dmVyd29ybGRBdWRpdEFjdGlvbl9Db21wbGV0ZVBhdGgQBBIwCixrX2VPdmVy",
            "d29ybGRBdWRpdEFjdGlvbl9DbGFpbUVuY291bnRlclJld2FyZBAFEigKJGtf",
            "ZU92ZXJ3b3JsZEF1ZGl0QWN0aW9uX0RldlJlc2V0Tm9kZRAGEigKJGtfZU92",
            "ZXJ3b3JsZEF1ZGl0QWN0aW9uX0RldlJlc2V0UGF0aBAHEiwKKGtfZU92ZXJ3",
            "b3JsZEF1ZGl0QWN0aW9uX01hdGNoUmV3YXJkc0Z1bGwQCBIsCihrX2VPdmVy",
            "d29ybGRBdWRpdEFjdGlvbl9NYXRjaFJld2FyZHNIYWxmEAkSMQota19lT3Zl",
            "cndvcmxkQXVkaXRBY3Rpb25fRXZlbnRBY3Rpb25Ub2tlbkdyYW50EAoSKwon",
            "a19lT3ZlcndvcmxkQXVkaXRBY3Rpb25fVG9rZW5UcmFkZXJMb3N0EAsSLQop",
            "a19lT3ZlcndvcmxkQXVkaXRBY3Rpb25fVG9rZW5UcmFkZXJHYWluZWQQDBI0",
            "CjBrX2VPdmVyd29ybGRBdWRpdEFjdGlvbl9FbmNvdW50ZXJSZXdhcmRUb2tl",
            "bkNvc3QQDRI2CjJrX2VPdmVyd29ybGRBdWRpdEFjdGlvbl9FbmNvdW50ZXJS",
            "ZXdhcmRUb2tlblJld2FyZBAOEi4KKmtfZU92ZXJ3b3JsZEF1ZGl0QWN0aW9u",
            "X1N1cHBvcnRHcmFudFRva2VucxAQEikKJWtfZU92ZXJ3b3JsZEF1ZGl0QWN0",
            "aW9uX1Rva2VuR2lmdFNlbnQQESrUAgoYRU92ZXJ3b3JsZE1pbmlnYW1lQWN0",
            "aW9uEiYKImtfZU92ZXJ3b3JsZE1pbmlnYW1lQWN0aW9uX0ludmFsaWQQABIn",
            "CiNrX2VPdmVyd29ybGRNaW5pZ2FtZUFjdGlvbl9EZXZSZXNldBABEi4KKmtf",
            "ZU92ZXJ3b3JsZE1pbmlnYW1lQWN0aW9uX0RldkdpdmVDdXJyZW5jeRACEicK",
            "I2tfZU92ZXJ3b3JsZE1pbmlnYW1lQWN0aW9uX1B1cmNoYXNlEAMSKAoka19l",
            "T3ZlcndvcmxkTWluaWdhbWVBY3Rpb25fU2V0T3B0aW9uEAQSMwova19lT3Zl",
            "cndvcmxkTWluaWdhbWVBY3Rpb25fUmVwb3J0Q3VycmVuY3lHYWluZWQQBRIv",
            "CitrX2VPdmVyd29ybGRNaW5pZ2FtZUFjdGlvbl9VbmxvY2tEaWZmaWN1bHR5",
            "EAZCFaoCElN0ZWFtLlByb3Rvcy5Eb3RhMg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Steam.Protos.Dota2.SteammessagesReflection.Descriptor, global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor, global::Steam.Protos.Dota2.DotaGcmessagesCommonReflection.Descriptor, global::Steam.Protos.Dota2.DotaGcmessagesCommonSurvivorsReflection.Descriptor, global::Steam.Protos.Dota2.GcsdkGcmessagesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Steam.Protos.Dota2.EOverworldNodeState), typeof(global::Steam.Protos.Dota2.EOverworldPathState), typeof(global::Steam.Protos.Dota2.EOverworldAuditAction), typeof(global::Steam.Protos.Dota2.EOverworldMinigameAction), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldTokenCount), global::Steam.Protos.Dota2.CMsgOverworldTokenCount.Parser, new[]{ "TokenId", "TokenCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity), global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity.Parser, new[]{ "TokenCounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenTreasureData), global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenTreasureData.Parser, new[]{ "RewardOptions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenTreasureData.Types.RewardOption), global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenTreasureData.Types.RewardOption.Parser, new[]{ "RewardData", "TokenCost", "TokenReward" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenQuestData), global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenQuestData.Parser, new[]{ "Quests" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenQuestData.Types.Quest), global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenQuestData.Types.Quest.Parser, new[]{ "RewardData", "TokenCost", "TokenReward" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldHeroList), global::Steam.Protos.Dota2.CMsgOverworldHeroList.Parser, new[]{ "HeroIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldEncounterChooseHeroData), global::Steam.Protos.Dota2.CMsgOverworldEncounterChooseHeroData.Parser, new[]{ "HeroList", "Additive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldEncounterProgressData), global::Steam.Protos.Dota2.CMsgOverworldEncounterProgressData.Parser, new[]{ "Choice", "Progress", "MaxProgress", "Visited" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldEncounterData), global::Steam.Protos.Dota2.CMsgOverworldEncounterData.Parser, new[]{ "ExtraEncounterData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldNode), global::Steam.Protos.Dota2.CMsgOverworldNode.Parser, new[]{ "NodeId", "NodeState", "NodeEncounterData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldPath), global::Steam.Protos.Dota2.CMsgOverworldPath.Parser, new[]{ "PathId", "PathCost", "PathState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldMinigameCustomData), global::Steam.Protos.Dota2.CMsgOverworldMinigameCustomData.Parser, new[]{ "SurvivorsData" }, new[]{ "MinigameType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldMinigameUserData), global::Steam.Protos.Dota2.CMsgOverworldMinigameUserData.Parser, new[]{ "NodeId", "CurrencyAmount", "CustomData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldUserData), global::Steam.Protos.Dota2.CMsgOverworldUserData.Parser, new[]{ "TokenInventory", "OverworldNodes", "OverworldPaths", "CurrentNodeId", "MinigameData" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldUserData.Types.MinigameDataEntry), global::Steam.Protos.Dota2.CMsgOverworldUserData.Types.MinigameDataEntry.Parser, new[]{ "Key", "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldMatchRewards), global::Steam.Protos.Dota2.CMsgOverworldMatchRewards.Parser, new[]{ "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldMatchRewards.Types.Player), global::Steam.Protos.Dota2.CMsgOverworldMatchRewards.Types.Player.Parser, new[]{ "PlayerSlot", "Tokens", "OverworldId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserData), global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserData.Parser, new[]{ "OverworldId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserDataResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserDataResponse.Parser, new[]{ "Response", "UserData" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserDataResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgGCToClientOverworldUserDataUpdated), global::Steam.Protos.Dota2.CMsgGCToClientOverworldUserDataUpdated.Parser, new[]{ "OverworldId", "UserData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePath), global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePath.Parser, new[]{ "OverworldId", "PathId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePathResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePathResponse.Parser, new[]{ "Response", "ClaimResponse" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePathResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgOverworldEncounterPitFighterRewardData), global::Steam.Protos.Dota2.CMsgOverworldEncounterPitFighterRewardData.Parser, new[]{ "TokenId", "Choice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterReward), global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterReward.Parser, new[]{ "OverworldId", "NodeId", "RewardData", "PeriodicResourceId", "ExtraRewardData", "LeaderboardData", "LeaderboardIndex", "ShouldClaimReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterRewardResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterRewardResponse.Parser, new[]{ "Response", "ClaimResponse", "TokensReceived" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterRewardResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounter), global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounter.Parser, new[]{ "OverworldId", "NodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounterResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounterResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounterResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNode), global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNode.Parser, new[]{ "OverworldId", "NodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNodeResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNodeResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNodeResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokens), global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokens.Parser, new[]{ "OverworldId", "TokenOffer", "TokenRequest", "Recipe", "EncounterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokensResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokensResponse.Parser, new[]{ "Response", "TokensReceived" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokensResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokens), global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokens.Parser, new[]{ "OverworldId", "TokenGift", "RecipientAccountId", "PeriodicResourceId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokensResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokensResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokensResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriend), global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriend.Parser, new[]{ "FriendAccountId", "OverworldId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.Parser, new[]{ "Response", "TokenQuantity" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAll), global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAll.Parser, new[]{ "OverworldId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAllResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAllResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAllResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNode), global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNode.Parser, new[]{ "OverworldId", "NodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNodeResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNodeResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNodeResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokens), global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokens.Parser, new[]{ "OverworldId", "TokenQuantity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokensResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokensResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokensResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventory), global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventory.Parser, new[]{ "OverworldId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventoryResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventoryResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventoryResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedback), global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedback.Parser, new[]{ "Language", "OverworldId", "Feedback" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedbackResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedbackResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedbackResponse.Types.EResponse) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImage), global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImage.Parser, new[]{ "Magic", "ImageId", "Language" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Parser, new[]{ "ImageId", "Images" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.EDynamicImageFormat) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.Image), global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.Image.Parser, new[]{ "Width", "Height", "Format", "ImageBytes" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameAction), global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameAction.Parser, new[]{ "OverworldId", "NodeId", "Action", "Selection", "OptionValue", "CurrencyAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameActionResponse), global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameActionResponse.Parser, new[]{ "Response" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameActionResponse.Types.EResponse) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EOverworldNodeState {
    [pbr::OriginalName("k_eOverworldNodeState_Invalid")] KEOverworldNodeStateInvalid = 0,
    [pbr::OriginalName("k_eOverworldNodeState_Locked")] KEOverworldNodeStateLocked = 1,
    [pbr::OriginalName("k_eOverworldNodeState_Unlocked")] KEOverworldNodeStateUnlocked = 2,
  }

  public enum EOverworldPathState {
    [pbr::OriginalName("k_eOverworldPathState_Invalid")] KEOverworldPathStateInvalid = 0,
    [pbr::OriginalName("k_eOverworldPathState_Incomplete")] KEOverworldPathStateIncomplete = 1,
    [pbr::OriginalName("k_eOverworldPathState_Complete")] KEOverworldPathStateComplete = 2,
  }

  public enum EOverworldAuditAction {
    [pbr::OriginalName("k_eOverworldAuditAction_Invalid")] KEOverworldAuditActionInvalid = 0,
    [pbr::OriginalName("k_eOverworldAuditAction_DevModifyTokens")] KEOverworldAuditActionDevModifyTokens = 1,
    [pbr::OriginalName("k_eOverworldAuditAction_DevClearInventory")] KEOverworldAuditActionDevClearInventory = 2,
    [pbr::OriginalName("k_eOverworldAuditAction_DevGrantTokens")] KEOverworldAuditActionDevGrantTokens = 3,
    [pbr::OriginalName("k_eOverworldAuditAction_CompletePath")] KEOverworldAuditActionCompletePath = 4,
    [pbr::OriginalName("k_eOverworldAuditAction_ClaimEncounterReward")] KEOverworldAuditActionClaimEncounterReward = 5,
    [pbr::OriginalName("k_eOverworldAuditAction_DevResetNode")] KEOverworldAuditActionDevResetNode = 6,
    [pbr::OriginalName("k_eOverworldAuditAction_DevResetPath")] KEOverworldAuditActionDevResetPath = 7,
    [pbr::OriginalName("k_eOverworldAuditAction_MatchRewardsFull")] KEOverworldAuditActionMatchRewardsFull = 8,
    [pbr::OriginalName("k_eOverworldAuditAction_MatchRewardsHalf")] KEOverworldAuditActionMatchRewardsHalf = 9,
    [pbr::OriginalName("k_eOverworldAuditAction_EventActionTokenGrant")] KEOverworldAuditActionEventActionTokenGrant = 10,
    [pbr::OriginalName("k_eOverworldAuditAction_TokenTraderLost")] KEOverworldAuditActionTokenTraderLost = 11,
    [pbr::OriginalName("k_eOverworldAuditAction_TokenTraderGained")] KEOverworldAuditActionTokenTraderGained = 12,
    [pbr::OriginalName("k_eOverworldAuditAction_EncounterRewardTokenCost")] KEOverworldAuditActionEncounterRewardTokenCost = 13,
    [pbr::OriginalName("k_eOverworldAuditAction_EncounterRewardTokenReward")] KEOverworldAuditActionEncounterRewardTokenReward = 14,
    [pbr::OriginalName("k_eOverworldAuditAction_SupportGrantTokens")] KEOverworldAuditActionSupportGrantTokens = 16,
    [pbr::OriginalName("k_eOverworldAuditAction_TokenGiftSent")] KEOverworldAuditActionTokenGiftSent = 17,
  }

  public enum EOverworldMinigameAction {
    [pbr::OriginalName("k_eOverworldMinigameAction_Invalid")] KEOverworldMinigameActionInvalid = 0,
    [pbr::OriginalName("k_eOverworldMinigameAction_DevReset")] KEOverworldMinigameActionDevReset = 1,
    [pbr::OriginalName("k_eOverworldMinigameAction_DevGiveCurrency")] KEOverworldMinigameActionDevGiveCurrency = 2,
    [pbr::OriginalName("k_eOverworldMinigameAction_Purchase")] KEOverworldMinigameActionPurchase = 3,
    [pbr::OriginalName("k_eOverworldMinigameAction_SetOption")] KEOverworldMinigameActionSetOption = 4,
    [pbr::OriginalName("k_eOverworldMinigameAction_ReportCurrencyGained")] KEOverworldMinigameActionReportCurrencyGained = 5,
    [pbr::OriginalName("k_eOverworldMinigameAction_UnlockDifficulty")] KEOverworldMinigameActionUnlockDifficulty = 6,
  }

  #endregion

  #region Messages
  public sealed partial class CMsgOverworldTokenCount : pb::IMessage<CMsgOverworldTokenCount>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldTokenCount> _parser = new pb::MessageParser<CMsgOverworldTokenCount>(() => new CMsgOverworldTokenCount());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldTokenCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldTokenCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldTokenCount(CMsgOverworldTokenCount other) : this() {
      _hasBits0 = other._hasBits0;
      tokenId_ = other.tokenId_;
      tokenCount_ = other.tokenCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldTokenCount Clone() {
      return new CMsgOverworldTokenCount(this);
    }

    /// <summary>Field number for the "token_id" field.</summary>
    public const int TokenIdFieldNumber = 1;
    private readonly static uint TokenIdDefaultValue = 0;

    private uint tokenId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TokenId {
      get { if ((_hasBits0 & 1) != 0) { return tokenId_; } else { return TokenIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tokenId_ = value;
      }
    }
    /// <summary>Gets whether the "token_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTokenId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "token_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTokenId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "token_count" field.</summary>
    public const int TokenCountFieldNumber = 2;
    private readonly static uint TokenCountDefaultValue = 0;

    private uint tokenCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TokenCount {
      get { if ((_hasBits0 & 2) != 0) { return tokenCount_; } else { return TokenCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tokenCount_ = value;
      }
    }
    /// <summary>Gets whether the "token_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTokenCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "token_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTokenCount() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldTokenCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldTokenCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenId != other.TokenId) return false;
      if (TokenCount != other.TokenCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTokenId) hash ^= TokenId.GetHashCode();
      if (HasTokenCount) hash ^= TokenCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTokenId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TokenId);
      }
      if (HasTokenCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(TokenCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTokenId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TokenId);
      }
      if (HasTokenCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(TokenCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTokenId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenId);
      }
      if (HasTokenCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldTokenCount other) {
      if (other == null) {
        return;
      }
      if (other.HasTokenId) {
        TokenId = other.TokenId;
      }
      if (other.HasTokenCount) {
        TokenCount = other.TokenCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TokenId = input.ReadUInt32();
            break;
          }
          case 16: {
            TokenCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TokenId = input.ReadUInt32();
            break;
          }
          case 16: {
            TokenCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgOverworldTokenQuantity : pb::IMessage<CMsgOverworldTokenQuantity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldTokenQuantity> _parser = new pb::MessageParser<CMsgOverworldTokenQuantity>(() => new CMsgOverworldTokenQuantity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldTokenQuantity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldTokenQuantity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldTokenQuantity(CMsgOverworldTokenQuantity other) : this() {
      tokenCounts_ = other.tokenCounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldTokenQuantity Clone() {
      return new CMsgOverworldTokenQuantity(this);
    }

    /// <summary>Field number for the "token_counts" field.</summary>
    public const int TokenCountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgOverworldTokenCount> _repeated_tokenCounts_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgOverworldTokenCount.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldTokenCount> tokenCounts_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldTokenCount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldTokenCount> TokenCounts {
      get { return tokenCounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldTokenQuantity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldTokenQuantity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tokenCounts_.Equals(other.tokenCounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tokenCounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tokenCounts_.WriteTo(output, _repeated_tokenCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tokenCounts_.WriteTo(ref output, _repeated_tokenCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tokenCounts_.CalculateSize(_repeated_tokenCounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldTokenQuantity other) {
      if (other == null) {
        return;
      }
      tokenCounts_.Add(other.tokenCounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tokenCounts_.AddEntriesFrom(input, _repeated_tokenCounts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tokenCounts_.AddEntriesFrom(ref input, _repeated_tokenCounts_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgOverworldEncounterTokenTreasureData : pb::IMessage<CMsgOverworldEncounterTokenTreasureData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldEncounterTokenTreasureData> _parser = new pb::MessageParser<CMsgOverworldEncounterTokenTreasureData>(() => new CMsgOverworldEncounterTokenTreasureData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldEncounterTokenTreasureData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterTokenTreasureData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterTokenTreasureData(CMsgOverworldEncounterTokenTreasureData other) : this() {
      rewardOptions_ = other.rewardOptions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterTokenTreasureData Clone() {
      return new CMsgOverworldEncounterTokenTreasureData(this);
    }

    /// <summary>Field number for the "reward_options" field.</summary>
    public const int RewardOptionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenTreasureData.Types.RewardOption> _repeated_rewardOptions_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenTreasureData.Types.RewardOption.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenTreasureData.Types.RewardOption> rewardOptions_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenTreasureData.Types.RewardOption>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenTreasureData.Types.RewardOption> RewardOptions {
      get { return rewardOptions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldEncounterTokenTreasureData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldEncounterTokenTreasureData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardOptions_.Equals(other.rewardOptions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardOptions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rewardOptions_.WriteTo(output, _repeated_rewardOptions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rewardOptions_.WriteTo(ref output, _repeated_rewardOptions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardOptions_.CalculateSize(_repeated_rewardOptions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldEncounterTokenTreasureData other) {
      if (other == null) {
        return;
      }
      rewardOptions_.Add(other.rewardOptions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardOptions_.AddEntriesFrom(input, _repeated_rewardOptions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rewardOptions_.AddEntriesFrom(ref input, _repeated_rewardOptions_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgOverworldEncounterTokenTreasureData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class RewardOption : pb::IMessage<RewardOption>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RewardOption> _parser = new pb::MessageParser<RewardOption>(() => new RewardOption());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RewardOption> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenTreasureData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RewardOption() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RewardOption(RewardOption other) : this() {
          _hasBits0 = other._hasBits0;
          rewardData_ = other.rewardData_;
          tokenCost_ = other.tokenCost_ != null ? other.tokenCost_.Clone() : null;
          tokenReward_ = other.tokenReward_ != null ? other.tokenReward_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RewardOption Clone() {
          return new RewardOption(this);
        }

        /// <summary>Field number for the "reward_data" field.</summary>
        public const int RewardDataFieldNumber = 1;
        private readonly static uint RewardDataDefaultValue = 0;

        private uint rewardData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RewardData {
          get { if ((_hasBits0 & 1) != 0) { return rewardData_; } else { return RewardDataDefaultValue; } }
          set {
            _hasBits0 |= 1;
            rewardData_ = value;
          }
        }
        /// <summary>Gets whether the "reward_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRewardData {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "reward_data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRewardData() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "token_cost" field.</summary>
        public const int TokenCostFieldNumber = 2;
        private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokenCost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokenCost {
          get { return tokenCost_; }
          set {
            tokenCost_ = value;
          }
        }

        /// <summary>Field number for the "token_reward" field.</summary>
        public const int TokenRewardFieldNumber = 3;
        private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokenReward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokenReward {
          get { return tokenReward_; }
          set {
            tokenReward_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RewardOption);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RewardOption other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RewardData != other.RewardData) return false;
          if (!object.Equals(TokenCost, other.TokenCost)) return false;
          if (!object.Equals(TokenReward, other.TokenReward)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasRewardData) hash ^= RewardData.GetHashCode();
          if (tokenCost_ != null) hash ^= TokenCost.GetHashCode();
          if (tokenReward_ != null) hash ^= TokenReward.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasRewardData) {
            output.WriteRawTag(8);
            output.WriteUInt32(RewardData);
          }
          if (tokenCost_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(TokenCost);
          }
          if (tokenReward_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(TokenReward);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasRewardData) {
            output.WriteRawTag(8);
            output.WriteUInt32(RewardData);
          }
          if (tokenCost_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(TokenCost);
          }
          if (tokenReward_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(TokenReward);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasRewardData) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardData);
          }
          if (tokenCost_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenCost);
          }
          if (tokenReward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenReward);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RewardOption other) {
          if (other == null) {
            return;
          }
          if (other.HasRewardData) {
            RewardData = other.RewardData;
          }
          if (other.tokenCost_ != null) {
            if (tokenCost_ == null) {
              TokenCost = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            TokenCost.MergeFrom(other.TokenCost);
          }
          if (other.tokenReward_ != null) {
            if (tokenReward_ == null) {
              TokenReward = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            TokenReward.MergeFrom(other.TokenReward);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RewardData = input.ReadUInt32();
                break;
              }
              case 18: {
                if (tokenCost_ == null) {
                  TokenCost = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
                }
                input.ReadMessage(TokenCost);
                break;
              }
              case 26: {
                if (tokenReward_ == null) {
                  TokenReward = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
                }
                input.ReadMessage(TokenReward);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                RewardData = input.ReadUInt32();
                break;
              }
              case 18: {
                if (tokenCost_ == null) {
                  TokenCost = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
                }
                input.ReadMessage(TokenCost);
                break;
              }
              case 26: {
                if (tokenReward_ == null) {
                  TokenReward = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
                }
                input.ReadMessage(TokenReward);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgOverworldEncounterTokenQuestData : pb::IMessage<CMsgOverworldEncounterTokenQuestData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldEncounterTokenQuestData> _parser = new pb::MessageParser<CMsgOverworldEncounterTokenQuestData>(() => new CMsgOverworldEncounterTokenQuestData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldEncounterTokenQuestData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterTokenQuestData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterTokenQuestData(CMsgOverworldEncounterTokenQuestData other) : this() {
      quests_ = other.quests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterTokenQuestData Clone() {
      return new CMsgOverworldEncounterTokenQuestData(this);
    }

    /// <summary>Field number for the "quests" field.</summary>
    public const int QuestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenQuestData.Types.Quest> _repeated_quests_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenQuestData.Types.Quest.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenQuestData.Types.Quest> quests_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenQuestData.Types.Quest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenQuestData.Types.Quest> Quests {
      get { return quests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldEncounterTokenQuestData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldEncounterTokenQuestData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!quests_.Equals(other.quests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= quests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      quests_.WriteTo(output, _repeated_quests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      quests_.WriteTo(ref output, _repeated_quests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += quests_.CalculateSize(_repeated_quests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldEncounterTokenQuestData other) {
      if (other == null) {
        return;
      }
      quests_.Add(other.quests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            quests_.AddEntriesFrom(input, _repeated_quests_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            quests_.AddEntriesFrom(ref input, _repeated_quests_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgOverworldEncounterTokenQuestData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Quest : pb::IMessage<Quest>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Quest> _parser = new pb::MessageParser<Quest>(() => new Quest());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Quest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgOverworldEncounterTokenQuestData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quest(Quest other) : this() {
          _hasBits0 = other._hasBits0;
          rewardData_ = other.rewardData_;
          tokenCost_ = other.tokenCost_ != null ? other.tokenCost_.Clone() : null;
          tokenReward_ = other.tokenReward_ != null ? other.tokenReward_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quest Clone() {
          return new Quest(this);
        }

        /// <summary>Field number for the "reward_data" field.</summary>
        public const int RewardDataFieldNumber = 1;
        private readonly static uint RewardDataDefaultValue = 0;

        private uint rewardData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RewardData {
          get { if ((_hasBits0 & 1) != 0) { return rewardData_; } else { return RewardDataDefaultValue; } }
          set {
            _hasBits0 |= 1;
            rewardData_ = value;
          }
        }
        /// <summary>Gets whether the "reward_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRewardData {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "reward_data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRewardData() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "token_cost" field.</summary>
        public const int TokenCostFieldNumber = 2;
        private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokenCost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokenCost {
          get { return tokenCost_; }
          set {
            tokenCost_ = value;
          }
        }

        /// <summary>Field number for the "token_reward" field.</summary>
        public const int TokenRewardFieldNumber = 3;
        private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokenReward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokenReward {
          get { return tokenReward_; }
          set {
            tokenReward_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Quest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Quest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RewardData != other.RewardData) return false;
          if (!object.Equals(TokenCost, other.TokenCost)) return false;
          if (!object.Equals(TokenReward, other.TokenReward)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasRewardData) hash ^= RewardData.GetHashCode();
          if (tokenCost_ != null) hash ^= TokenCost.GetHashCode();
          if (tokenReward_ != null) hash ^= TokenReward.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasRewardData) {
            output.WriteRawTag(8);
            output.WriteUInt32(RewardData);
          }
          if (tokenCost_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(TokenCost);
          }
          if (tokenReward_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(TokenReward);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasRewardData) {
            output.WriteRawTag(8);
            output.WriteUInt32(RewardData);
          }
          if (tokenCost_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(TokenCost);
          }
          if (tokenReward_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(TokenReward);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasRewardData) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardData);
          }
          if (tokenCost_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenCost);
          }
          if (tokenReward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenReward);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Quest other) {
          if (other == null) {
            return;
          }
          if (other.HasRewardData) {
            RewardData = other.RewardData;
          }
          if (other.tokenCost_ != null) {
            if (tokenCost_ == null) {
              TokenCost = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            TokenCost.MergeFrom(other.TokenCost);
          }
          if (other.tokenReward_ != null) {
            if (tokenReward_ == null) {
              TokenReward = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            TokenReward.MergeFrom(other.TokenReward);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RewardData = input.ReadUInt32();
                break;
              }
              case 18: {
                if (tokenCost_ == null) {
                  TokenCost = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
                }
                input.ReadMessage(TokenCost);
                break;
              }
              case 26: {
                if (tokenReward_ == null) {
                  TokenReward = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
                }
                input.ReadMessage(TokenReward);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                RewardData = input.ReadUInt32();
                break;
              }
              case 18: {
                if (tokenCost_ == null) {
                  TokenCost = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
                }
                input.ReadMessage(TokenCost);
                break;
              }
              case 26: {
                if (tokenReward_ == null) {
                  TokenReward = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
                }
                input.ReadMessage(TokenReward);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgOverworldHeroList : pb::IMessage<CMsgOverworldHeroList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldHeroList> _parser = new pb::MessageParser<CMsgOverworldHeroList>(() => new CMsgOverworldHeroList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldHeroList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldHeroList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldHeroList(CMsgOverworldHeroList other) : this() {
      heroIds_ = other.heroIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldHeroList Clone() {
      return new CMsgOverworldHeroList(this);
    }

    /// <summary>Field number for the "hero_ids" field.</summary>
    public const int HeroIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_heroIds_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> heroIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroIds {
      get { return heroIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldHeroList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldHeroList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroIds_.Equals(other.heroIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      heroIds_.WriteTo(output, _repeated_heroIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      heroIds_.WriteTo(ref output, _repeated_heroIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroIds_.CalculateSize(_repeated_heroIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldHeroList other) {
      if (other == null) {
        return;
      }
      heroIds_.Add(other.heroIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            heroIds_.AddEntriesFrom(input, _repeated_heroIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            heroIds_.AddEntriesFrom(ref input, _repeated_heroIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgOverworldEncounterChooseHeroData : pb::IMessage<CMsgOverworldEncounterChooseHeroData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldEncounterChooseHeroData> _parser = new pb::MessageParser<CMsgOverworldEncounterChooseHeroData>(() => new CMsgOverworldEncounterChooseHeroData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldEncounterChooseHeroData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterChooseHeroData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterChooseHeroData(CMsgOverworldEncounterChooseHeroData other) : this() {
      _hasBits0 = other._hasBits0;
      heroList_ = other.heroList_ != null ? other.heroList_.Clone() : null;
      additive_ = other.additive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterChooseHeroData Clone() {
      return new CMsgOverworldEncounterChooseHeroData(this);
    }

    /// <summary>Field number for the "hero_list" field.</summary>
    public const int HeroListFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgOverworldHeroList heroList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldHeroList HeroList {
      get { return heroList_; }
      set {
        heroList_ = value;
      }
    }

    /// <summary>Field number for the "additive" field.</summary>
    public const int AdditiveFieldNumber = 2;
    private readonly static bool AdditiveDefaultValue = false;

    private bool additive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Additive {
      get { if ((_hasBits0 & 1) != 0) { return additive_; } else { return AdditiveDefaultValue; } }
      set {
        _hasBits0 |= 1;
        additive_ = value;
      }
    }
    /// <summary>Gets whether the "additive" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdditive {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "additive" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdditive() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldEncounterChooseHeroData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldEncounterChooseHeroData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HeroList, other.HeroList)) return false;
      if (Additive != other.Additive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (heroList_ != null) hash ^= HeroList.GetHashCode();
      if (HasAdditive) hash ^= Additive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (heroList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HeroList);
      }
      if (HasAdditive) {
        output.WriteRawTag(16);
        output.WriteBool(Additive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (heroList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HeroList);
      }
      if (HasAdditive) {
        output.WriteRawTag(16);
        output.WriteBool(Additive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heroList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroList);
      }
      if (HasAdditive) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldEncounterChooseHeroData other) {
      if (other == null) {
        return;
      }
      if (other.heroList_ != null) {
        if (heroList_ == null) {
          HeroList = new global::Steam.Protos.Dota2.CMsgOverworldHeroList();
        }
        HeroList.MergeFrom(other.HeroList);
      }
      if (other.HasAdditive) {
        Additive = other.Additive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (heroList_ == null) {
              HeroList = new global::Steam.Protos.Dota2.CMsgOverworldHeroList();
            }
            input.ReadMessage(HeroList);
            break;
          }
          case 16: {
            Additive = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (heroList_ == null) {
              HeroList = new global::Steam.Protos.Dota2.CMsgOverworldHeroList();
            }
            input.ReadMessage(HeroList);
            break;
          }
          case 16: {
            Additive = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgOverworldEncounterProgressData : pb::IMessage<CMsgOverworldEncounterProgressData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldEncounterProgressData> _parser = new pb::MessageParser<CMsgOverworldEncounterProgressData>(() => new CMsgOverworldEncounterProgressData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldEncounterProgressData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterProgressData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterProgressData(CMsgOverworldEncounterProgressData other) : this() {
      _hasBits0 = other._hasBits0;
      choice_ = other.choice_;
      progress_ = other.progress_;
      maxProgress_ = other.maxProgress_;
      visited_ = other.visited_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterProgressData Clone() {
      return new CMsgOverworldEncounterProgressData(this);
    }

    /// <summary>Field number for the "choice" field.</summary>
    public const int ChoiceFieldNumber = 1;
    private readonly static int ChoiceDefaultValue = 0;

    private int choice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Choice {
      get { if ((_hasBits0 & 1) != 0) { return choice_; } else { return ChoiceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        choice_ = value;
      }
    }
    /// <summary>Gets whether the "choice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChoice {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "choice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChoice() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private readonly static int ProgressDefaultValue = 0;

    private int progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { if ((_hasBits0 & 2) != 0) { return progress_; } else { return ProgressDefaultValue; } }
      set {
        _hasBits0 |= 2;
        progress_ = value;
      }
    }
    /// <summary>Gets whether the "progress" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProgress {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "progress" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProgress() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max_progress" field.</summary>
    public const int MaxProgressFieldNumber = 3;
    private readonly static int MaxProgressDefaultValue = 0;

    private int maxProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxProgress {
      get { if ((_hasBits0 & 4) != 0) { return maxProgress_; } else { return MaxProgressDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxProgress_ = value;
      }
    }
    /// <summary>Gets whether the "max_progress" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxProgress {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_progress" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxProgress() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "visited" field.</summary>
    public const int VisitedFieldNumber = 4;
    private readonly static bool VisitedDefaultValue = false;

    private bool visited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visited {
      get { if ((_hasBits0 & 8) != 0) { return visited_; } else { return VisitedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        visited_ = value;
      }
    }
    /// <summary>Gets whether the "visited" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisited {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "visited" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisited() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldEncounterProgressData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldEncounterProgressData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Choice != other.Choice) return false;
      if (Progress != other.Progress) return false;
      if (MaxProgress != other.MaxProgress) return false;
      if (Visited != other.Visited) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChoice) hash ^= Choice.GetHashCode();
      if (HasProgress) hash ^= Progress.GetHashCode();
      if (HasMaxProgress) hash ^= MaxProgress.GetHashCode();
      if (HasVisited) hash ^= Visited.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChoice) {
        output.WriteRawTag(8);
        output.WriteInt32(Choice);
      }
      if (HasProgress) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
      if (HasMaxProgress) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxProgress);
      }
      if (HasVisited) {
        output.WriteRawTag(32);
        output.WriteBool(Visited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChoice) {
        output.WriteRawTag(8);
        output.WriteInt32(Choice);
      }
      if (HasProgress) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
      if (HasMaxProgress) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxProgress);
      }
      if (HasVisited) {
        output.WriteRawTag(32);
        output.WriteBool(Visited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChoice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Choice);
      }
      if (HasProgress) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (HasMaxProgress) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxProgress);
      }
      if (HasVisited) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldEncounterProgressData other) {
      if (other == null) {
        return;
      }
      if (other.HasChoice) {
        Choice = other.Choice;
      }
      if (other.HasProgress) {
        Progress = other.Progress;
      }
      if (other.HasMaxProgress) {
        MaxProgress = other.MaxProgress;
      }
      if (other.HasVisited) {
        Visited = other.Visited;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Choice = input.ReadInt32();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
          case 24: {
            MaxProgress = input.ReadInt32();
            break;
          }
          case 32: {
            Visited = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Choice = input.ReadInt32();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
          case 24: {
            MaxProgress = input.ReadInt32();
            break;
          }
          case 32: {
            Visited = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgOverworldEncounterData : pb::IMessage<CMsgOverworldEncounterData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldEncounterData> _parser = new pb::MessageParser<CMsgOverworldEncounterData>(() => new CMsgOverworldEncounterData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldEncounterData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterData(CMsgOverworldEncounterData other) : this() {
      extraEncounterData_ = other.extraEncounterData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterData Clone() {
      return new CMsgOverworldEncounterData(this);
    }

    /// <summary>Field number for the "extra_encounter_data" field.</summary>
    public const int ExtraEncounterDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CExtraMsgBlock> _repeated_extraEncounterData_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CExtraMsgBlock.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock> extraEncounterData_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CExtraMsgBlock> ExtraEncounterData {
      get { return extraEncounterData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldEncounterData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldEncounterData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!extraEncounterData_.Equals(other.extraEncounterData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= extraEncounterData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      extraEncounterData_.WriteTo(output, _repeated_extraEncounterData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      extraEncounterData_.WriteTo(ref output, _repeated_extraEncounterData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += extraEncounterData_.CalculateSize(_repeated_extraEncounterData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldEncounterData other) {
      if (other == null) {
        return;
      }
      extraEncounterData_.Add(other.extraEncounterData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            extraEncounterData_.AddEntriesFrom(input, _repeated_extraEncounterData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            extraEncounterData_.AddEntriesFrom(ref input, _repeated_extraEncounterData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgOverworldNode : pb::IMessage<CMsgOverworldNode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldNode> _parser = new pb::MessageParser<CMsgOverworldNode>(() => new CMsgOverworldNode());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldNode(CMsgOverworldNode other) : this() {
      _hasBits0 = other._hasBits0;
      nodeId_ = other.nodeId_;
      nodeState_ = other.nodeState_;
      nodeEncounterData_ = other.nodeEncounterData_ != null ? other.nodeEncounterData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldNode Clone() {
      return new CMsgOverworldNode(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private readonly static uint NodeIdDefaultValue = 0;

    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { if ((_hasBits0 & 1) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "node_state" field.</summary>
    public const int NodeStateFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EOverworldNodeState NodeStateDefaultValue = global::Steam.Protos.Dota2.EOverworldNodeState.KEOverworldNodeStateInvalid;

    private global::Steam.Protos.Dota2.EOverworldNodeState nodeState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EOverworldNodeState NodeState {
      get { if ((_hasBits0 & 2) != 0) { return nodeState_; } else { return NodeStateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        nodeState_ = value;
      }
    }
    /// <summary>Gets whether the "node_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "node_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "node_encounter_data" field.</summary>
    public const int NodeEncounterDataFieldNumber = 3;
    private global::Steam.Protos.Dota2.CMsgOverworldEncounterData nodeEncounterData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldEncounterData NodeEncounterData {
      get { return nodeEncounterData_; }
      set {
        nodeEncounterData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (NodeState != other.NodeState) return false;
      if (!object.Equals(NodeEncounterData, other.NodeEncounterData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      if (HasNodeState) hash ^= NodeState.GetHashCode();
      if (nodeEncounterData_ != null) hash ^= NodeEncounterData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNodeId) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeId);
      }
      if (HasNodeState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) NodeState);
      }
      if (nodeEncounterData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NodeEncounterData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNodeId) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeId);
      }
      if (HasNodeState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) NodeState);
      }
      if (nodeEncounterData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NodeEncounterData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      if (HasNodeState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeState);
      }
      if (nodeEncounterData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeEncounterData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldNode other) {
      if (other == null) {
        return;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      if (other.HasNodeState) {
        NodeState = other.NodeState;
      }
      if (other.nodeEncounterData_ != null) {
        if (nodeEncounterData_ == null) {
          NodeEncounterData = new global::Steam.Protos.Dota2.CMsgOverworldEncounterData();
        }
        NodeEncounterData.MergeFrom(other.NodeEncounterData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeState = (global::Steam.Protos.Dota2.EOverworldNodeState) input.ReadEnum();
            break;
          }
          case 26: {
            if (nodeEncounterData_ == null) {
              NodeEncounterData = new global::Steam.Protos.Dota2.CMsgOverworldEncounterData();
            }
            input.ReadMessage(NodeEncounterData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeState = (global::Steam.Protos.Dota2.EOverworldNodeState) input.ReadEnum();
            break;
          }
          case 26: {
            if (nodeEncounterData_ == null) {
              NodeEncounterData = new global::Steam.Protos.Dota2.CMsgOverworldEncounterData();
            }
            input.ReadMessage(NodeEncounterData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgOverworldPath : pb::IMessage<CMsgOverworldPath>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldPath> _parser = new pb::MessageParser<CMsgOverworldPath>(() => new CMsgOverworldPath());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldPath(CMsgOverworldPath other) : this() {
      _hasBits0 = other._hasBits0;
      pathId_ = other.pathId_;
      pathCost_ = other.pathCost_ != null ? other.pathCost_.Clone() : null;
      pathState_ = other.pathState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldPath Clone() {
      return new CMsgOverworldPath(this);
    }

    /// <summary>Field number for the "path_id" field.</summary>
    public const int PathIdFieldNumber = 1;
    private readonly static uint PathIdDefaultValue = 0;

    private uint pathId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PathId {
      get { if ((_hasBits0 & 1) != 0) { return pathId_; } else { return PathIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pathId_ = value;
      }
    }
    /// <summary>Gets whether the "path_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPathId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "path_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPathId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "path_cost" field.</summary>
    public const int PathCostFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity pathCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity PathCost {
      get { return pathCost_; }
      set {
        pathCost_ = value;
      }
    }

    /// <summary>Field number for the "path_state" field.</summary>
    public const int PathStateFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.EOverworldPathState PathStateDefaultValue = global::Steam.Protos.Dota2.EOverworldPathState.KEOverworldPathStateInvalid;

    private global::Steam.Protos.Dota2.EOverworldPathState pathState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EOverworldPathState PathState {
      get { if ((_hasBits0 & 2) != 0) { return pathState_; } else { return PathStateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        pathState_ = value;
      }
    }
    /// <summary>Gets whether the "path_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPathState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "path_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPathState() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PathId != other.PathId) return false;
      if (!object.Equals(PathCost, other.PathCost)) return false;
      if (PathState != other.PathState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPathId) hash ^= PathId.GetHashCode();
      if (pathCost_ != null) hash ^= PathCost.GetHashCode();
      if (HasPathState) hash ^= PathState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPathId) {
        output.WriteRawTag(8);
        output.WriteUInt32(PathId);
      }
      if (pathCost_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PathCost);
      }
      if (HasPathState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PathState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPathId) {
        output.WriteRawTag(8);
        output.WriteUInt32(PathId);
      }
      if (pathCost_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PathCost);
      }
      if (HasPathState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PathState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPathId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PathId);
      }
      if (pathCost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PathCost);
      }
      if (HasPathState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PathState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldPath other) {
      if (other == null) {
        return;
      }
      if (other.HasPathId) {
        PathId = other.PathId;
      }
      if (other.pathCost_ != null) {
        if (pathCost_ == null) {
          PathCost = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
        }
        PathCost.MergeFrom(other.PathCost);
      }
      if (other.HasPathState) {
        PathState = other.PathState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PathId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pathCost_ == null) {
              PathCost = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(PathCost);
            break;
          }
          case 24: {
            PathState = (global::Steam.Protos.Dota2.EOverworldPathState) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PathId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pathCost_ == null) {
              PathCost = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(PathCost);
            break;
          }
          case 24: {
            PathState = (global::Steam.Protos.Dota2.EOverworldPathState) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgOverworldMinigameCustomData : pb::IMessage<CMsgOverworldMinigameCustomData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldMinigameCustomData> _parser = new pb::MessageParser<CMsgOverworldMinigameCustomData>(() => new CMsgOverworldMinigameCustomData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldMinigameCustomData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldMinigameCustomData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldMinigameCustomData(CMsgOverworldMinigameCustomData other) : this() {
      switch (other.MinigameTypeCase) {
        case MinigameTypeOneofCase.SurvivorsData:
          SurvivorsData = other.SurvivorsData.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldMinigameCustomData Clone() {
      return new CMsgOverworldMinigameCustomData(this);
    }

    /// <summary>Field number for the "survivors_data" field.</summary>
    public const int SurvivorsDataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgSurvivorsUserData SurvivorsData {
      get { return minigameTypeCase_ == MinigameTypeOneofCase.SurvivorsData ? (global::Steam.Protos.Dota2.CMsgSurvivorsUserData) minigameType_ : null; }
      set {
        minigameType_ = value;
        minigameTypeCase_ = value == null ? MinigameTypeOneofCase.None : MinigameTypeOneofCase.SurvivorsData;
      }
    }

    private object minigameType_;
    /// <summary>Enum of possible cases for the "minigame_type" oneof.</summary>
    public enum MinigameTypeOneofCase {
      None = 0,
      SurvivorsData = 1,
    }
    private MinigameTypeOneofCase minigameTypeCase_ = MinigameTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinigameTypeOneofCase MinigameTypeCase {
      get { return minigameTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinigameType() {
      minigameTypeCase_ = MinigameTypeOneofCase.None;
      minigameType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldMinigameCustomData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldMinigameCustomData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SurvivorsData, other.SurvivorsData)) return false;
      if (MinigameTypeCase != other.MinigameTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (minigameTypeCase_ == MinigameTypeOneofCase.SurvivorsData) hash ^= SurvivorsData.GetHashCode();
      hash ^= (int) minigameTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (minigameTypeCase_ == MinigameTypeOneofCase.SurvivorsData) {
        output.WriteRawTag(10);
        output.WriteMessage(SurvivorsData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (minigameTypeCase_ == MinigameTypeOneofCase.SurvivorsData) {
        output.WriteRawTag(10);
        output.WriteMessage(SurvivorsData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (minigameTypeCase_ == MinigameTypeOneofCase.SurvivorsData) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SurvivorsData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldMinigameCustomData other) {
      if (other == null) {
        return;
      }
      switch (other.MinigameTypeCase) {
        case MinigameTypeOneofCase.SurvivorsData:
          if (SurvivorsData == null) {
            SurvivorsData = new global::Steam.Protos.Dota2.CMsgSurvivorsUserData();
          }
          SurvivorsData.MergeFrom(other.SurvivorsData);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Steam.Protos.Dota2.CMsgSurvivorsUserData subBuilder = new global::Steam.Protos.Dota2.CMsgSurvivorsUserData();
            if (minigameTypeCase_ == MinigameTypeOneofCase.SurvivorsData) {
              subBuilder.MergeFrom(SurvivorsData);
            }
            input.ReadMessage(subBuilder);
            SurvivorsData = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Steam.Protos.Dota2.CMsgSurvivorsUserData subBuilder = new global::Steam.Protos.Dota2.CMsgSurvivorsUserData();
            if (minigameTypeCase_ == MinigameTypeOneofCase.SurvivorsData) {
              subBuilder.MergeFrom(SurvivorsData);
            }
            input.ReadMessage(subBuilder);
            SurvivorsData = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgOverworldMinigameUserData : pb::IMessage<CMsgOverworldMinigameUserData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldMinigameUserData> _parser = new pb::MessageParser<CMsgOverworldMinigameUserData>(() => new CMsgOverworldMinigameUserData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldMinigameUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldMinigameUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldMinigameUserData(CMsgOverworldMinigameUserData other) : this() {
      _hasBits0 = other._hasBits0;
      nodeId_ = other.nodeId_;
      currencyAmount_ = other.currencyAmount_;
      customData_ = other.customData_ != null ? other.customData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldMinigameUserData Clone() {
      return new CMsgOverworldMinigameUserData(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private readonly static uint NodeIdDefaultValue = 0;

    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { if ((_hasBits0 & 1) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "currency_amount" field.</summary>
    public const int CurrencyAmountFieldNumber = 2;
    private readonly static uint CurrencyAmountDefaultValue = 0;

    private uint currencyAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyAmount {
      get { if ((_hasBits0 & 2) != 0) { return currencyAmount_; } else { return CurrencyAmountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        currencyAmount_ = value;
      }
    }
    /// <summary>Gets whether the "currency_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrencyAmount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "currency_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrencyAmount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "custom_data" field.</summary>
    public const int CustomDataFieldNumber = 3;
    private global::Steam.Protos.Dota2.CMsgOverworldMinigameCustomData customData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldMinigameCustomData CustomData {
      get { return customData_; }
      set {
        customData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldMinigameUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldMinigameUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (CurrencyAmount != other.CurrencyAmount) return false;
      if (!object.Equals(CustomData, other.CustomData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      if (HasCurrencyAmount) hash ^= CurrencyAmount.GetHashCode();
      if (customData_ != null) hash ^= CustomData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNodeId) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeId);
      }
      if (HasCurrencyAmount) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurrencyAmount);
      }
      if (customData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CustomData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNodeId) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeId);
      }
      if (HasCurrencyAmount) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurrencyAmount);
      }
      if (customData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CustomData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      if (HasCurrencyAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyAmount);
      }
      if (customData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldMinigameUserData other) {
      if (other == null) {
        return;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      if (other.HasCurrencyAmount) {
        CurrencyAmount = other.CurrencyAmount;
      }
      if (other.customData_ != null) {
        if (customData_ == null) {
          CustomData = new global::Steam.Protos.Dota2.CMsgOverworldMinigameCustomData();
        }
        CustomData.MergeFrom(other.CustomData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            CurrencyAmount = input.ReadUInt32();
            break;
          }
          case 26: {
            if (customData_ == null) {
              CustomData = new global::Steam.Protos.Dota2.CMsgOverworldMinigameCustomData();
            }
            input.ReadMessage(CustomData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            CurrencyAmount = input.ReadUInt32();
            break;
          }
          case 26: {
            if (customData_ == null) {
              CustomData = new global::Steam.Protos.Dota2.CMsgOverworldMinigameCustomData();
            }
            input.ReadMessage(CustomData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgOverworldUserData : pb::IMessage<CMsgOverworldUserData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldUserData> _parser = new pb::MessageParser<CMsgOverworldUserData>(() => new CMsgOverworldUserData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldUserData(CMsgOverworldUserData other) : this() {
      _hasBits0 = other._hasBits0;
      tokenInventory_ = other.tokenInventory_ != null ? other.tokenInventory_.Clone() : null;
      overworldNodes_ = other.overworldNodes_.Clone();
      overworldPaths_ = other.overworldPaths_.Clone();
      currentNodeId_ = other.currentNodeId_;
      minigameData_ = other.minigameData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldUserData Clone() {
      return new CMsgOverworldUserData(this);
    }

    /// <summary>Field number for the "token_inventory" field.</summary>
    public const int TokenInventoryFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokenInventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokenInventory {
      get { return tokenInventory_; }
      set {
        tokenInventory_ = value;
      }
    }

    /// <summary>Field number for the "overworld_nodes" field.</summary>
    public const int OverworldNodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgOverworldNode> _repeated_overworldNodes_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgOverworldNode.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldNode> overworldNodes_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldNode> OverworldNodes {
      get { return overworldNodes_; }
    }

    /// <summary>Field number for the "overworld_paths" field.</summary>
    public const int OverworldPathsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgOverworldPath> _repeated_overworldPaths_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CMsgOverworldPath.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldPath> overworldPaths_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldPath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldPath> OverworldPaths {
      get { return overworldPaths_; }
    }

    /// <summary>Field number for the "current_node_id" field.</summary>
    public const int CurrentNodeIdFieldNumber = 4;
    private readonly static uint CurrentNodeIdDefaultValue = 0;

    private uint currentNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentNodeId {
      get { if ((_hasBits0 & 1) != 0) { return currentNodeId_; } else { return CurrentNodeIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        currentNodeId_ = value;
      }
    }
    /// <summary>Gets whether the "current_node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentNodeId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "current_node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentNodeId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "minigame_data" field.</summary>
    public const int MinigameDataFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgOverworldUserData.Types.MinigameDataEntry> _repeated_minigameData_codec
        = pb::FieldCodec.ForMessage(42, global::Steam.Protos.Dota2.CMsgOverworldUserData.Types.MinigameDataEntry.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldUserData.Types.MinigameDataEntry> minigameData_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldUserData.Types.MinigameDataEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldUserData.Types.MinigameDataEntry> MinigameData {
      get { return minigameData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TokenInventory, other.TokenInventory)) return false;
      if(!overworldNodes_.Equals(other.overworldNodes_)) return false;
      if(!overworldPaths_.Equals(other.overworldPaths_)) return false;
      if (CurrentNodeId != other.CurrentNodeId) return false;
      if(!minigameData_.Equals(other.minigameData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tokenInventory_ != null) hash ^= TokenInventory.GetHashCode();
      hash ^= overworldNodes_.GetHashCode();
      hash ^= overworldPaths_.GetHashCode();
      if (HasCurrentNodeId) hash ^= CurrentNodeId.GetHashCode();
      hash ^= minigameData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (tokenInventory_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TokenInventory);
      }
      overworldNodes_.WriteTo(output, _repeated_overworldNodes_codec);
      overworldPaths_.WriteTo(output, _repeated_overworldPaths_codec);
      if (HasCurrentNodeId) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurrentNodeId);
      }
      minigameData_.WriteTo(output, _repeated_minigameData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (tokenInventory_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TokenInventory);
      }
      overworldNodes_.WriteTo(ref output, _repeated_overworldNodes_codec);
      overworldPaths_.WriteTo(ref output, _repeated_overworldPaths_codec);
      if (HasCurrentNodeId) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurrentNodeId);
      }
      minigameData_.WriteTo(ref output, _repeated_minigameData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tokenInventory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenInventory);
      }
      size += overworldNodes_.CalculateSize(_repeated_overworldNodes_codec);
      size += overworldPaths_.CalculateSize(_repeated_overworldPaths_codec);
      if (HasCurrentNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentNodeId);
      }
      size += minigameData_.CalculateSize(_repeated_minigameData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldUserData other) {
      if (other == null) {
        return;
      }
      if (other.tokenInventory_ != null) {
        if (tokenInventory_ == null) {
          TokenInventory = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
        }
        TokenInventory.MergeFrom(other.TokenInventory);
      }
      overworldNodes_.Add(other.overworldNodes_);
      overworldPaths_.Add(other.overworldPaths_);
      if (other.HasCurrentNodeId) {
        CurrentNodeId = other.CurrentNodeId;
      }
      minigameData_.Add(other.minigameData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tokenInventory_ == null) {
              TokenInventory = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokenInventory);
            break;
          }
          case 18: {
            overworldNodes_.AddEntriesFrom(input, _repeated_overworldNodes_codec);
            break;
          }
          case 26: {
            overworldPaths_.AddEntriesFrom(input, _repeated_overworldPaths_codec);
            break;
          }
          case 32: {
            CurrentNodeId = input.ReadUInt32();
            break;
          }
          case 42: {
            minigameData_.AddEntriesFrom(input, _repeated_minigameData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (tokenInventory_ == null) {
              TokenInventory = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokenInventory);
            break;
          }
          case 18: {
            overworldNodes_.AddEntriesFrom(ref input, _repeated_overworldNodes_codec);
            break;
          }
          case 26: {
            overworldPaths_.AddEntriesFrom(ref input, _repeated_overworldPaths_codec);
            break;
          }
          case 32: {
            CurrentNodeId = input.ReadUInt32();
            break;
          }
          case 42: {
            minigameData_.AddEntriesFrom(ref input, _repeated_minigameData_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgOverworldUserData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MinigameDataEntry : pb::IMessage<MinigameDataEntry>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MinigameDataEntry> _parser = new pb::MessageParser<MinigameDataEntry>(() => new MinigameDataEntry());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MinigameDataEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgOverworldUserData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MinigameDataEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MinigameDataEntry(MinigameDataEntry other) : this() {
          _hasBits0 = other._hasBits0;
          key_ = other.key_;
          value_ = other.value_ != null ? other.value_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MinigameDataEntry Clone() {
          return new MinigameDataEntry(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private readonly static uint KeyDefaultValue = 0;

        private uint key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Key {
          get { if ((_hasBits0 & 1) != 0) { return key_; } else { return KeyDefaultValue; } }
          set {
            _hasBits0 |= 1;
            key_ = value;
          }
        }
        /// <summary>Gets whether the "key" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKey {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "key" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKey() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private global::Steam.Protos.Dota2.CMsgOverworldMinigameUserData value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgOverworldMinigameUserData Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MinigameDataEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MinigameDataEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (!object.Equals(Value, other.Value)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasKey) hash ^= Key.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasKey) {
            output.WriteRawTag(8);
            output.WriteUInt32(Key);
          }
          if (value_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasKey) {
            output.WriteRawTag(8);
            output.WriteUInt32(Key);
          }
          if (value_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasKey) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MinigameDataEntry other) {
          if (other == null) {
            return;
          }
          if (other.HasKey) {
            Key = other.Key;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              Value = new global::Steam.Protos.Dota2.CMsgOverworldMinigameUserData();
            }
            Value.MergeFrom(other.Value);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key = input.ReadUInt32();
                break;
              }
              case 18: {
                if (value_ == null) {
                  Value = new global::Steam.Protos.Dota2.CMsgOverworldMinigameUserData();
                }
                input.ReadMessage(Value);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Key = input.ReadUInt32();
                break;
              }
              case 18: {
                if (value_ == null) {
                  Value = new global::Steam.Protos.Dota2.CMsgOverworldMinigameUserData();
                }
                input.ReadMessage(Value);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgOverworldMatchRewards : pb::IMessage<CMsgOverworldMatchRewards>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldMatchRewards> _parser = new pb::MessageParser<CMsgOverworldMatchRewards>(() => new CMsgOverworldMatchRewards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldMatchRewards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldMatchRewards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldMatchRewards(CMsgOverworldMatchRewards other) : this() {
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldMatchRewards Clone() {
      return new CMsgOverworldMatchRewards(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgOverworldMatchRewards.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgOverworldMatchRewards.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldMatchRewards.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldMatchRewards.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgOverworldMatchRewards.Types.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldMatchRewards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldMatchRewards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldMatchRewards other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgOverworldMatchRewards message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgOverworldMatchRewards.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          playerSlot_ = other.playerSlot_;
          tokens_ = other.tokens_ != null ? other.tokens_.Clone() : null;
          overworldId_ = other.overworldId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "player_slot" field.</summary>
        public const int PlayerSlotFieldNumber = 1;
        private readonly static uint PlayerSlotDefaultValue = 0;

        private uint playerSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerSlot {
          get { if ((_hasBits0 & 1) != 0) { return playerSlot_; } else { return PlayerSlotDefaultValue; } }
          set {
            _hasBits0 |= 1;
            playerSlot_ = value;
          }
        }
        /// <summary>Gets whether the "player_slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerSlot {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerSlot() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "tokens" field.</summary>
        public const int TokensFieldNumber = 2;
        private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokens_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity Tokens {
          get { return tokens_; }
          set {
            tokens_ = value;
          }
        }

        /// <summary>Field number for the "overworld_id" field.</summary>
        public const int OverworldIdFieldNumber = 3;
        private readonly static uint OverworldIdDefaultValue = 0;

        private uint overworldId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OverworldId {
          get { if ((_hasBits0 & 2) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
          set {
            _hasBits0 |= 2;
            overworldId_ = value;
          }
        }
        /// <summary>Gets whether the "overworld_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOverworldId {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "overworld_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOverworldId() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerSlot != other.PlayerSlot) return false;
          if (!object.Equals(Tokens, other.Tokens)) return false;
          if (OverworldId != other.OverworldId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPlayerSlot) hash ^= PlayerSlot.GetHashCode();
          if (tokens_ != null) hash ^= Tokens.GetHashCode();
          if (HasOverworldId) hash ^= OverworldId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPlayerSlot) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlayerSlot);
          }
          if (tokens_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Tokens);
          }
          if (HasOverworldId) {
            output.WriteRawTag(24);
            output.WriteUInt32(OverworldId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPlayerSlot) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlayerSlot);
          }
          if (tokens_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Tokens);
          }
          if (HasOverworldId) {
            output.WriteRawTag(24);
            output.WriteUInt32(OverworldId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPlayerSlot) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
          }
          if (tokens_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tokens);
          }
          if (HasOverworldId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasPlayerSlot) {
            PlayerSlot = other.PlayerSlot;
          }
          if (other.tokens_ != null) {
            if (tokens_ == null) {
              Tokens = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            Tokens.MergeFrom(other.Tokens);
          }
          if (other.HasOverworldId) {
            OverworldId = other.OverworldId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 18: {
                if (tokens_ == null) {
                  Tokens = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
                }
                input.ReadMessage(Tokens);
                break;
              }
              case 24: {
                OverworldId = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 18: {
                if (tokens_ == null) {
                  Tokens = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
                }
                input.ReadMessage(Tokens);
                break;
              }
              case 24: {
                OverworldId = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldGetUserData : pb::IMessage<CMsgClientToGCOverworldGetUserData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldGetUserData> _parser = new pb::MessageParser<CMsgClientToGCOverworldGetUserData>(() => new CMsgClientToGCOverworldGetUserData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldGetUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetUserData(CMsgClientToGCOverworldGetUserData other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetUserData Clone() {
      return new CMsgClientToGCOverworldGetUserData(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldGetUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldGetUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldGetUserData other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldGetUserDataResponse : pb::IMessage<CMsgClientToGCOverworldGetUserDataResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldGetUserDataResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldGetUserDataResponse>(() => new CMsgClientToGCOverworldGetUserDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldGetUserDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetUserDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetUserDataResponse(CMsgClientToGCOverworldGetUserDataResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      userData_ = other.userData_ != null ? other.userData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetUserDataResponse Clone() {
      return new CMsgClientToGCOverworldGetUserDataResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserDataResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserDataResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserDataResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserDataResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "user_data" field.</summary>
    public const int UserDataFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgOverworldUserData userData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldUserData UserData {
      get { return userData_; }
      set {
        userData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldGetUserDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldGetUserDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      if (!object.Equals(UserData, other.UserData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (userData_ != null) hash ^= UserData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (userData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (userData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (userData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldGetUserDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      if (other.userData_ != null) {
        if (userData_ == null) {
          UserData = new global::Steam.Protos.Dota2.CMsgOverworldUserData();
        }
        UserData.MergeFrom(other.UserData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserDataResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (userData_ == null) {
              UserData = new global::Steam.Protos.Dota2.CMsgOverworldUserData();
            }
            input.ReadMessage(UserData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetUserDataResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (userData_ == null) {
              UserData = new global::Steam.Protos.Dota2.CMsgOverworldUserData();
            }
            input.ReadMessage(UserData);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldGetUserDataResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 5,
      }

    }
    #endregion

  }

  public sealed partial class CMsgGCToClientOverworldUserDataUpdated : pb::IMessage<CMsgGCToClientOverworldUserDataUpdated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgGCToClientOverworldUserDataUpdated> _parser = new pb::MessageParser<CMsgGCToClientOverworldUserDataUpdated>(() => new CMsgGCToClientOverworldUserDataUpdated());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgGCToClientOverworldUserDataUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientOverworldUserDataUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientOverworldUserDataUpdated(CMsgGCToClientOverworldUserDataUpdated other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      userData_ = other.userData_ != null ? other.userData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgGCToClientOverworldUserDataUpdated Clone() {
      return new CMsgGCToClientOverworldUserDataUpdated(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "user_data" field.</summary>
    public const int UserDataFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgOverworldUserData userData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldUserData UserData {
      get { return userData_; }
      set {
        userData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgGCToClientOverworldUserDataUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgGCToClientOverworldUserDataUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      if (!object.Equals(UserData, other.UserData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (userData_ != null) hash ^= UserData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (userData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (userData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (userData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgGCToClientOverworldUserDataUpdated other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.userData_ != null) {
        if (userData_ == null) {
          UserData = new global::Steam.Protos.Dota2.CMsgOverworldUserData();
        }
        UserData.MergeFrom(other.UserData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (userData_ == null) {
              UserData = new global::Steam.Protos.Dota2.CMsgOverworldUserData();
            }
            input.ReadMessage(UserData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (userData_ == null) {
              UserData = new global::Steam.Protos.Dota2.CMsgOverworldUserData();
            }
            input.ReadMessage(UserData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldCompletePath : pb::IMessage<CMsgClientToGCOverworldCompletePath>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldCompletePath> _parser = new pb::MessageParser<CMsgClientToGCOverworldCompletePath>(() => new CMsgClientToGCOverworldCompletePath());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldCompletePath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldCompletePath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldCompletePath(CMsgClientToGCOverworldCompletePath other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      pathId_ = other.pathId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldCompletePath Clone() {
      return new CMsgClientToGCOverworldCompletePath(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "path_id" field.</summary>
    public const int PathIdFieldNumber = 2;
    private readonly static uint PathIdDefaultValue = 0;

    private uint pathId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PathId {
      get { if ((_hasBits0 & 2) != 0) { return pathId_; } else { return PathIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        pathId_ = value;
      }
    }
    /// <summary>Gets whether the "path_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPathId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "path_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPathId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldCompletePath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldCompletePath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      if (PathId != other.PathId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (HasPathId) hash ^= PathId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasPathId) {
        output.WriteRawTag(16);
        output.WriteUInt32(PathId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasPathId) {
        output.WriteRawTag(16);
        output.WriteUInt32(PathId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (HasPathId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PathId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldCompletePath other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.HasPathId) {
        PathId = other.PathId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            PathId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            PathId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldCompletePathResponse : pb::IMessage<CMsgClientToGCOverworldCompletePathResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldCompletePathResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldCompletePathResponse>(() => new CMsgClientToGCOverworldCompletePathResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldCompletePathResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldCompletePathResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldCompletePathResponse(CMsgClientToGCOverworldCompletePathResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      claimResponse_ = other.claimResponse_ != null ? other.claimResponse_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldCompletePathResponse Clone() {
      return new CMsgClientToGCOverworldCompletePathResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePathResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePathResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePathResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePathResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "claim_response" field.</summary>
    public const int ClaimResponseFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse claimResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse ClaimResponse {
      get { return claimResponse_; }
      set {
        claimResponse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldCompletePathResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldCompletePathResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      if (!object.Equals(ClaimResponse, other.ClaimResponse)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (claimResponse_ != null) hash ^= ClaimResponse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (claimResponse_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClaimResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (claimResponse_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClaimResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (claimResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimResponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldCompletePathResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      if (other.claimResponse_ != null) {
        if (claimResponse_ == null) {
          ClaimResponse = new global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse();
        }
        ClaimResponse.MergeFrom(other.ClaimResponse);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePathResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (claimResponse_ == null) {
              ClaimResponse = new global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse();
            }
            input.ReadMessage(ClaimResponse);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldCompletePathResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (claimResponse_ == null) {
              ClaimResponse = new global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse();
            }
            input.ReadMessage(ClaimResponse);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldCompletePathResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 5,
        [pbr::OriginalName("k_eInvalidPath")] KEInvalidPath = 6,
        [pbr::OriginalName("k_eNotEnoughTokens")] KENotEnoughTokens = 7,
        [pbr::OriginalName("k_ePathIsLocked")] KEPathIsLocked = 8,
        [pbr::OriginalName("k_ePathAlreadyUnlocked")] KEPathAlreadyUnlocked = 9,
      }

    }
    #endregion

  }

  public sealed partial class CMsgOverworldEncounterPitFighterRewardData : pb::IMessage<CMsgOverworldEncounterPitFighterRewardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgOverworldEncounterPitFighterRewardData> _parser = new pb::MessageParser<CMsgOverworldEncounterPitFighterRewardData>(() => new CMsgOverworldEncounterPitFighterRewardData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgOverworldEncounterPitFighterRewardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterPitFighterRewardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterPitFighterRewardData(CMsgOverworldEncounterPitFighterRewardData other) : this() {
      _hasBits0 = other._hasBits0;
      tokenId_ = other.tokenId_;
      choice_ = other.choice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgOverworldEncounterPitFighterRewardData Clone() {
      return new CMsgOverworldEncounterPitFighterRewardData(this);
    }

    /// <summary>Field number for the "token_id" field.</summary>
    public const int TokenIdFieldNumber = 1;
    private readonly static uint TokenIdDefaultValue = 0;

    private uint tokenId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TokenId {
      get { if ((_hasBits0 & 1) != 0) { return tokenId_; } else { return TokenIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tokenId_ = value;
      }
    }
    /// <summary>Gets whether the "token_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTokenId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "token_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTokenId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "choice" field.</summary>
    public const int ChoiceFieldNumber = 2;
    private readonly static uint ChoiceDefaultValue = 0;

    private uint choice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Choice {
      get { if ((_hasBits0 & 2) != 0) { return choice_; } else { return ChoiceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        choice_ = value;
      }
    }
    /// <summary>Gets whether the "choice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChoice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "choice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChoice() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgOverworldEncounterPitFighterRewardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgOverworldEncounterPitFighterRewardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenId != other.TokenId) return false;
      if (Choice != other.Choice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTokenId) hash ^= TokenId.GetHashCode();
      if (HasChoice) hash ^= Choice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTokenId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TokenId);
      }
      if (HasChoice) {
        output.WriteRawTag(16);
        output.WriteUInt32(Choice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTokenId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TokenId);
      }
      if (HasChoice) {
        output.WriteRawTag(16);
        output.WriteUInt32(Choice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTokenId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenId);
      }
      if (HasChoice) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Choice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgOverworldEncounterPitFighterRewardData other) {
      if (other == null) {
        return;
      }
      if (other.HasTokenId) {
        TokenId = other.TokenId;
      }
      if (other.HasChoice) {
        Choice = other.Choice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TokenId = input.ReadUInt32();
            break;
          }
          case 16: {
            Choice = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TokenId = input.ReadUInt32();
            break;
          }
          case 16: {
            Choice = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldClaimEncounterReward : pb::IMessage<CMsgClientToGCOverworldClaimEncounterReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldClaimEncounterReward> _parser = new pb::MessageParser<CMsgClientToGCOverworldClaimEncounterReward>(() => new CMsgClientToGCOverworldClaimEncounterReward());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldClaimEncounterReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldClaimEncounterReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldClaimEncounterReward(CMsgClientToGCOverworldClaimEncounterReward other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      nodeId_ = other.nodeId_;
      rewardData_ = other.rewardData_;
      periodicResourceId_ = other.periodicResourceId_;
      extraRewardData_ = other.extraRewardData_ != null ? other.extraRewardData_.Clone() : null;
      leaderboardData_ = other.leaderboardData_;
      leaderboardIndex_ = other.leaderboardIndex_;
      shouldClaimReward_ = other.shouldClaimReward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldClaimEncounterReward Clone() {
      return new CMsgClientToGCOverworldClaimEncounterReward(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private readonly static uint NodeIdDefaultValue = 0;

    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { if ((_hasBits0 & 2) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "reward_data" field.</summary>
    public const int RewardDataFieldNumber = 3;
    private readonly static uint RewardDataDefaultValue = 0;

    private uint rewardData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardData {
      get { if ((_hasBits0 & 4) != 0) { return rewardData_; } else { return RewardDataDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rewardData_ = value;
      }
    }
    /// <summary>Gets whether the "reward_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRewardData {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "reward_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRewardData() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "periodic_resource_id" field.</summary>
    public const int PeriodicResourceIdFieldNumber = 4;
    private readonly static uint PeriodicResourceIdDefaultValue = 0;

    private uint periodicResourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PeriodicResourceId {
      get { if ((_hasBits0 & 8) != 0) { return periodicResourceId_; } else { return PeriodicResourceIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        periodicResourceId_ = value;
      }
    }
    /// <summary>Gets whether the "periodic_resource_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPeriodicResourceId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "periodic_resource_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPeriodicResourceId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "extra_reward_data" field.</summary>
    public const int ExtraRewardDataFieldNumber = 5;
    private global::Steam.Protos.Dota2.CMsgOverworldEncounterData extraRewardData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldEncounterData ExtraRewardData {
      get { return extraRewardData_; }
      set {
        extraRewardData_ = value;
      }
    }

    /// <summary>Field number for the "leaderboard_data" field.</summary>
    public const int LeaderboardDataFieldNumber = 6;
    private readonly static uint LeaderboardDataDefaultValue = 0;

    private uint leaderboardData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderboardData {
      get { if ((_hasBits0 & 16) != 0) { return leaderboardData_; } else { return LeaderboardDataDefaultValue; } }
      set {
        _hasBits0 |= 16;
        leaderboardData_ = value;
      }
    }
    /// <summary>Gets whether the "leaderboard_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaderboardData {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "leaderboard_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaderboardData() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "leaderboard_index" field.</summary>
    public const int LeaderboardIndexFieldNumber = 7;
    private readonly static uint LeaderboardIndexDefaultValue = 0;

    private uint leaderboardIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderboardIndex {
      get { if ((_hasBits0 & 32) != 0) { return leaderboardIndex_; } else { return LeaderboardIndexDefaultValue; } }
      set {
        _hasBits0 |= 32;
        leaderboardIndex_ = value;
      }
    }
    /// <summary>Gets whether the "leaderboard_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeaderboardIndex {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "leaderboard_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaderboardIndex() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "should_claim_reward" field.</summary>
    public const int ShouldClaimRewardFieldNumber = 8;
    private readonly static bool ShouldClaimRewardDefaultValue = false;

    private bool shouldClaimReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShouldClaimReward {
      get { if ((_hasBits0 & 64) != 0) { return shouldClaimReward_; } else { return ShouldClaimRewardDefaultValue; } }
      set {
        _hasBits0 |= 64;
        shouldClaimReward_ = value;
      }
    }
    /// <summary>Gets whether the "should_claim_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShouldClaimReward {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "should_claim_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShouldClaimReward() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldClaimEncounterReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldClaimEncounterReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      if (NodeId != other.NodeId) return false;
      if (RewardData != other.RewardData) return false;
      if (PeriodicResourceId != other.PeriodicResourceId) return false;
      if (!object.Equals(ExtraRewardData, other.ExtraRewardData)) return false;
      if (LeaderboardData != other.LeaderboardData) return false;
      if (LeaderboardIndex != other.LeaderboardIndex) return false;
      if (ShouldClaimReward != other.ShouldClaimReward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      if (HasRewardData) hash ^= RewardData.GetHashCode();
      if (HasPeriodicResourceId) hash ^= PeriodicResourceId.GetHashCode();
      if (extraRewardData_ != null) hash ^= ExtraRewardData.GetHashCode();
      if (HasLeaderboardData) hash ^= LeaderboardData.GetHashCode();
      if (HasLeaderboardIndex) hash ^= LeaderboardIndex.GetHashCode();
      if (HasShouldClaimReward) hash ^= ShouldClaimReward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodeId);
      }
      if (HasRewardData) {
        output.WriteRawTag(24);
        output.WriteUInt32(RewardData);
      }
      if (HasPeriodicResourceId) {
        output.WriteRawTag(32);
        output.WriteUInt32(PeriodicResourceId);
      }
      if (extraRewardData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExtraRewardData);
      }
      if (HasLeaderboardData) {
        output.WriteRawTag(48);
        output.WriteUInt32(LeaderboardData);
      }
      if (HasLeaderboardIndex) {
        output.WriteRawTag(56);
        output.WriteUInt32(LeaderboardIndex);
      }
      if (HasShouldClaimReward) {
        output.WriteRawTag(64);
        output.WriteBool(ShouldClaimReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodeId);
      }
      if (HasRewardData) {
        output.WriteRawTag(24);
        output.WriteUInt32(RewardData);
      }
      if (HasPeriodicResourceId) {
        output.WriteRawTag(32);
        output.WriteUInt32(PeriodicResourceId);
      }
      if (extraRewardData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExtraRewardData);
      }
      if (HasLeaderboardData) {
        output.WriteRawTag(48);
        output.WriteUInt32(LeaderboardData);
      }
      if (HasLeaderboardIndex) {
        output.WriteRawTag(56);
        output.WriteUInt32(LeaderboardIndex);
      }
      if (HasShouldClaimReward) {
        output.WriteRawTag(64);
        output.WriteBool(ShouldClaimReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      if (HasRewardData) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardData);
      }
      if (HasPeriodicResourceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeriodicResourceId);
      }
      if (extraRewardData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtraRewardData);
      }
      if (HasLeaderboardData) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderboardData);
      }
      if (HasLeaderboardIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderboardIndex);
      }
      if (HasShouldClaimReward) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldClaimEncounterReward other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      if (other.HasRewardData) {
        RewardData = other.RewardData;
      }
      if (other.HasPeriodicResourceId) {
        PeriodicResourceId = other.PeriodicResourceId;
      }
      if (other.extraRewardData_ != null) {
        if (extraRewardData_ == null) {
          ExtraRewardData = new global::Steam.Protos.Dota2.CMsgOverworldEncounterData();
        }
        ExtraRewardData.MergeFrom(other.ExtraRewardData);
      }
      if (other.HasLeaderboardData) {
        LeaderboardData = other.LeaderboardData;
      }
      if (other.HasLeaderboardIndex) {
        LeaderboardIndex = other.LeaderboardIndex;
      }
      if (other.HasShouldClaimReward) {
        ShouldClaimReward = other.ShouldClaimReward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 24: {
            RewardData = input.ReadUInt32();
            break;
          }
          case 32: {
            PeriodicResourceId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (extraRewardData_ == null) {
              ExtraRewardData = new global::Steam.Protos.Dota2.CMsgOverworldEncounterData();
            }
            input.ReadMessage(ExtraRewardData);
            break;
          }
          case 48: {
            LeaderboardData = input.ReadUInt32();
            break;
          }
          case 56: {
            LeaderboardIndex = input.ReadUInt32();
            break;
          }
          case 64: {
            ShouldClaimReward = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 24: {
            RewardData = input.ReadUInt32();
            break;
          }
          case 32: {
            PeriodicResourceId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (extraRewardData_ == null) {
              ExtraRewardData = new global::Steam.Protos.Dota2.CMsgOverworldEncounterData();
            }
            input.ReadMessage(ExtraRewardData);
            break;
          }
          case 48: {
            LeaderboardData = input.ReadUInt32();
            break;
          }
          case 56: {
            LeaderboardIndex = input.ReadUInt32();
            break;
          }
          case 64: {
            ShouldClaimReward = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldClaimEncounterRewardResponse : pb::IMessage<CMsgClientToGCOverworldClaimEncounterRewardResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldClaimEncounterRewardResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldClaimEncounterRewardResponse>(() => new CMsgClientToGCOverworldClaimEncounterRewardResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldClaimEncounterRewardResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldClaimEncounterRewardResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldClaimEncounterRewardResponse(CMsgClientToGCOverworldClaimEncounterRewardResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      claimResponse_ = other.claimResponse_ != null ? other.claimResponse_.Clone() : null;
      tokensReceived_ = other.tokensReceived_ != null ? other.tokensReceived_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldClaimEncounterRewardResponse Clone() {
      return new CMsgClientToGCOverworldClaimEncounterRewardResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterRewardResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterRewardResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterRewardResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterRewardResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "claim_response" field.</summary>
    public const int ClaimResponseFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse claimResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse ClaimResponse {
      get { return claimResponse_; }
      set {
        claimResponse_ = value;
      }
    }

    /// <summary>Field number for the "tokens_received" field.</summary>
    public const int TokensReceivedFieldNumber = 3;
    private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokensReceived_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokensReceived {
      get { return tokensReceived_; }
      set {
        tokensReceived_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldClaimEncounterRewardResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldClaimEncounterRewardResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      if (!object.Equals(ClaimResponse, other.ClaimResponse)) return false;
      if (!object.Equals(TokensReceived, other.TokensReceived)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (claimResponse_ != null) hash ^= ClaimResponse.GetHashCode();
      if (tokensReceived_ != null) hash ^= TokensReceived.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (claimResponse_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClaimResponse);
      }
      if (tokensReceived_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TokensReceived);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (claimResponse_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClaimResponse);
      }
      if (tokensReceived_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TokensReceived);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (claimResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimResponse);
      }
      if (tokensReceived_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokensReceived);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldClaimEncounterRewardResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      if (other.claimResponse_ != null) {
        if (claimResponse_ == null) {
          ClaimResponse = new global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse();
        }
        ClaimResponse.MergeFrom(other.ClaimResponse);
      }
      if (other.tokensReceived_ != null) {
        if (tokensReceived_ == null) {
          TokensReceived = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
        }
        TokensReceived.MergeFrom(other.TokensReceived);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterRewardResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (claimResponse_ == null) {
              ClaimResponse = new global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse();
            }
            input.ReadMessage(ClaimResponse);
            break;
          }
          case 26: {
            if (tokensReceived_ == null) {
              TokensReceived = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokensReceived);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldClaimEncounterRewardResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (claimResponse_ == null) {
              ClaimResponse = new global::Steam.Protos.Dota2.CMsgDOTAClaimEventActionResponse();
            }
            input.ReadMessage(ClaimResponse);
            break;
          }
          case 26: {
            if (tokensReceived_ == null) {
              TokensReceived = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokensReceived);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldClaimEncounterRewardResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 5,
        [pbr::OriginalName("k_eInvalidNode")] KEInvalidNode = 6,
        [pbr::OriginalName("k_eNodeLocked")] KENodeLocked = 7,
        [pbr::OriginalName("k_eRewardAlreadyClaimed")] KERewardAlreadyClaimed = 8,
        [pbr::OriginalName("k_eNodeNotEncounter")] KENodeNotEncounter = 9,
        [pbr::OriginalName("k_eEncounterMissingRewards")] KEEncounterMissingRewards = 10,
        [pbr::OriginalName("k_eInvalidEncounterRewardStyle")] KEInvalidEncounterRewardStyle = 11,
        [pbr::OriginalName("k_eInvalidEncounterData")] KEInvalidEncounterData = 12,
        [pbr::OriginalName("k_eNotEnoughTokensForReward")] KENotEnoughTokensForReward = 13,
        [pbr::OriginalName("k_eNotEnoughResourceForReward")] KENotEnoughResourceForReward = 14,
        [pbr::OriginalName("k_eInvalidRewardData")] KEInvalidRewardData = 15,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldVisitEncounter : pb::IMessage<CMsgClientToGCOverworldVisitEncounter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldVisitEncounter> _parser = new pb::MessageParser<CMsgClientToGCOverworldVisitEncounter>(() => new CMsgClientToGCOverworldVisitEncounter());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldVisitEncounter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldVisitEncounter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldVisitEncounter(CMsgClientToGCOverworldVisitEncounter other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldVisitEncounter Clone() {
      return new CMsgClientToGCOverworldVisitEncounter(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private readonly static uint NodeIdDefaultValue = 0;

    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { if ((_hasBits0 & 2) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldVisitEncounter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldVisitEncounter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldVisitEncounter other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldVisitEncounterResponse : pb::IMessage<CMsgClientToGCOverworldVisitEncounterResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldVisitEncounterResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldVisitEncounterResponse>(() => new CMsgClientToGCOverworldVisitEncounterResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldVisitEncounterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldVisitEncounterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldVisitEncounterResponse(CMsgClientToGCOverworldVisitEncounterResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldVisitEncounterResponse Clone() {
      return new CMsgClientToGCOverworldVisitEncounterResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounterResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounterResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounterResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounterResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldVisitEncounterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldVisitEncounterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldVisitEncounterResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounterResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldVisitEncounterResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldVisitEncounterResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 5,
        [pbr::OriginalName("k_eInvalidNode")] KEInvalidNode = 6,
        [pbr::OriginalName("k_eNodeLocked")] KENodeLocked = 7,
        [pbr::OriginalName("k_eNodeNotEncounter")] KENodeNotEncounter = 8,
        [pbr::OriginalName("k_eAlreadyVisited")] KEAlreadyVisited = 9,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldMoveToNode : pb::IMessage<CMsgClientToGCOverworldMoveToNode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldMoveToNode> _parser = new pb::MessageParser<CMsgClientToGCOverworldMoveToNode>(() => new CMsgClientToGCOverworldMoveToNode());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldMoveToNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMoveToNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMoveToNode(CMsgClientToGCOverworldMoveToNode other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMoveToNode Clone() {
      return new CMsgClientToGCOverworldMoveToNode(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private readonly static uint NodeIdDefaultValue = 0;

    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { if ((_hasBits0 & 2) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldMoveToNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldMoveToNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldMoveToNode other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldMoveToNodeResponse : pb::IMessage<CMsgClientToGCOverworldMoveToNodeResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldMoveToNodeResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldMoveToNodeResponse>(() => new CMsgClientToGCOverworldMoveToNodeResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldMoveToNodeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMoveToNodeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMoveToNodeResponse(CMsgClientToGCOverworldMoveToNodeResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMoveToNodeResponse Clone() {
      return new CMsgClientToGCOverworldMoveToNodeResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNodeResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNodeResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNodeResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNodeResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldMoveToNodeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldMoveToNodeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldMoveToNodeResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNodeResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldMoveToNodeResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldMoveToNodeResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 5,
        [pbr::OriginalName("k_eInvalidNode")] KEInvalidNode = 6,
        [pbr::OriginalName("k_eNodeLocked")] KENodeLocked = 7,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldTradeTokens : pb::IMessage<CMsgClientToGCOverworldTradeTokens>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldTradeTokens> _parser = new pb::MessageParser<CMsgClientToGCOverworldTradeTokens>(() => new CMsgClientToGCOverworldTradeTokens());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldTradeTokens> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldTradeTokens() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldTradeTokens(CMsgClientToGCOverworldTradeTokens other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      tokenOffer_ = other.tokenOffer_ != null ? other.tokenOffer_.Clone() : null;
      tokenRequest_ = other.tokenRequest_ != null ? other.tokenRequest_.Clone() : null;
      recipe_ = other.recipe_;
      encounterId_ = other.encounterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldTradeTokens Clone() {
      return new CMsgClientToGCOverworldTradeTokens(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "token_offer" field.</summary>
    public const int TokenOfferFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokenOffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokenOffer {
      get { return tokenOffer_; }
      set {
        tokenOffer_ = value;
      }
    }

    /// <summary>Field number for the "token_request" field.</summary>
    public const int TokenRequestFieldNumber = 3;
    private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokenRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokenRequest {
      get { return tokenRequest_; }
      set {
        tokenRequest_ = value;
      }
    }

    /// <summary>Field number for the "recipe" field.</summary>
    public const int RecipeFieldNumber = 4;
    private readonly static uint RecipeDefaultValue = 0;

    private uint recipe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Recipe {
      get { if ((_hasBits0 & 2) != 0) { return recipe_; } else { return RecipeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        recipe_ = value;
      }
    }
    /// <summary>Gets whether the "recipe" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecipe {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "recipe" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecipe() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "encounter_id" field.</summary>
    public const int EncounterIdFieldNumber = 5;
    private readonly static uint EncounterIdDefaultValue = 0;

    private uint encounterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EncounterId {
      get { if ((_hasBits0 & 4) != 0) { return encounterId_; } else { return EncounterIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        encounterId_ = value;
      }
    }
    /// <summary>Gets whether the "encounter_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncounterId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "encounter_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncounterId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldTradeTokens);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldTradeTokens other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      if (!object.Equals(TokenOffer, other.TokenOffer)) return false;
      if (!object.Equals(TokenRequest, other.TokenRequest)) return false;
      if (Recipe != other.Recipe) return false;
      if (EncounterId != other.EncounterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (tokenOffer_ != null) hash ^= TokenOffer.GetHashCode();
      if (tokenRequest_ != null) hash ^= TokenRequest.GetHashCode();
      if (HasRecipe) hash ^= Recipe.GetHashCode();
      if (HasEncounterId) hash ^= EncounterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (tokenOffer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokenOffer);
      }
      if (tokenRequest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TokenRequest);
      }
      if (HasRecipe) {
        output.WriteRawTag(32);
        output.WriteUInt32(Recipe);
      }
      if (HasEncounterId) {
        output.WriteRawTag(40);
        output.WriteUInt32(EncounterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (tokenOffer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokenOffer);
      }
      if (tokenRequest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TokenRequest);
      }
      if (HasRecipe) {
        output.WriteRawTag(32);
        output.WriteUInt32(Recipe);
      }
      if (HasEncounterId) {
        output.WriteRawTag(40);
        output.WriteUInt32(EncounterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (tokenOffer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenOffer);
      }
      if (tokenRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenRequest);
      }
      if (HasRecipe) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Recipe);
      }
      if (HasEncounterId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EncounterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldTradeTokens other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.tokenOffer_ != null) {
        if (tokenOffer_ == null) {
          TokenOffer = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
        }
        TokenOffer.MergeFrom(other.TokenOffer);
      }
      if (other.tokenRequest_ != null) {
        if (tokenRequest_ == null) {
          TokenRequest = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
        }
        TokenRequest.MergeFrom(other.TokenRequest);
      }
      if (other.HasRecipe) {
        Recipe = other.Recipe;
      }
      if (other.HasEncounterId) {
        EncounterId = other.EncounterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (tokenOffer_ == null) {
              TokenOffer = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokenOffer);
            break;
          }
          case 26: {
            if (tokenRequest_ == null) {
              TokenRequest = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokenRequest);
            break;
          }
          case 32: {
            Recipe = input.ReadUInt32();
            break;
          }
          case 40: {
            EncounterId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (tokenOffer_ == null) {
              TokenOffer = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokenOffer);
            break;
          }
          case 26: {
            if (tokenRequest_ == null) {
              TokenRequest = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokenRequest);
            break;
          }
          case 32: {
            Recipe = input.ReadUInt32();
            break;
          }
          case 40: {
            EncounterId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldTradeTokensResponse : pb::IMessage<CMsgClientToGCOverworldTradeTokensResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldTradeTokensResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldTradeTokensResponse>(() => new CMsgClientToGCOverworldTradeTokensResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldTradeTokensResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldTradeTokensResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldTradeTokensResponse(CMsgClientToGCOverworldTradeTokensResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      tokensReceived_ = other.tokensReceived_ != null ? other.tokensReceived_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldTradeTokensResponse Clone() {
      return new CMsgClientToGCOverworldTradeTokensResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokensResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokensResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokensResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokensResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tokens_received" field.</summary>
    public const int TokensReceivedFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokensReceived_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokensReceived {
      get { return tokensReceived_; }
      set {
        tokensReceived_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldTradeTokensResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldTradeTokensResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      if (!object.Equals(TokensReceived, other.TokensReceived)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (tokensReceived_ != null) hash ^= TokensReceived.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (tokensReceived_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokensReceived);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (tokensReceived_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokensReceived);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (tokensReceived_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokensReceived);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldTradeTokensResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      if (other.tokensReceived_ != null) {
        if (tokensReceived_ == null) {
          TokensReceived = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
        }
        TokensReceived.MergeFrom(other.TokensReceived);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokensResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (tokensReceived_ == null) {
              TokensReceived = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokensReceived);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldTradeTokensResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (tokensReceived_ == null) {
              TokensReceived = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokensReceived);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldTradeTokensResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 5,
        [pbr::OriginalName("k_eNodeLocked")] KENodeLocked = 6,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 7,
        [pbr::OriginalName("k_eInvalidOffer")] KEInvalidOffer = 8,
        [pbr::OriginalName("k_eNotEnoughTokens")] KENotEnoughTokens = 9,
        [pbr::OriginalName("k_eInvalidNode")] KEInvalidNode = 10,
        [pbr::OriginalName("k_eInvalidEncounter")] KEInvalidEncounter = 11,
        [pbr::OriginalName("k_eRewardDoesNotMatchRecipe")] KERewardDoesNotMatchRecipe = 12,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldGiftTokens : pb::IMessage<CMsgClientToGCOverworldGiftTokens>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldGiftTokens> _parser = new pb::MessageParser<CMsgClientToGCOverworldGiftTokens>(() => new CMsgClientToGCOverworldGiftTokens());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldGiftTokens> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGiftTokens() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGiftTokens(CMsgClientToGCOverworldGiftTokens other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      tokenGift_ = other.tokenGift_ != null ? other.tokenGift_.Clone() : null;
      recipientAccountId_ = other.recipientAccountId_;
      periodicResourceId_ = other.periodicResourceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGiftTokens Clone() {
      return new CMsgClientToGCOverworldGiftTokens(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "token_gift" field.</summary>
    public const int TokenGiftFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgOverworldTokenCount tokenGift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldTokenCount TokenGift {
      get { return tokenGift_; }
      set {
        tokenGift_ = value;
      }
    }

    /// <summary>Field number for the "recipient_account_id" field.</summary>
    public const int RecipientAccountIdFieldNumber = 3;
    private readonly static uint RecipientAccountIdDefaultValue = 0;

    private uint recipientAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecipientAccountId {
      get { if ((_hasBits0 & 2) != 0) { return recipientAccountId_; } else { return RecipientAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        recipientAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "recipient_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecipientAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "recipient_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecipientAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "periodic_resource_id" field.</summary>
    public const int PeriodicResourceIdFieldNumber = 4;
    private readonly static uint PeriodicResourceIdDefaultValue = 0;

    private uint periodicResourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PeriodicResourceId {
      get { if ((_hasBits0 & 4) != 0) { return periodicResourceId_; } else { return PeriodicResourceIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        periodicResourceId_ = value;
      }
    }
    /// <summary>Gets whether the "periodic_resource_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPeriodicResourceId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "periodic_resource_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPeriodicResourceId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldGiftTokens);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldGiftTokens other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      if (!object.Equals(TokenGift, other.TokenGift)) return false;
      if (RecipientAccountId != other.RecipientAccountId) return false;
      if (PeriodicResourceId != other.PeriodicResourceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (tokenGift_ != null) hash ^= TokenGift.GetHashCode();
      if (HasRecipientAccountId) hash ^= RecipientAccountId.GetHashCode();
      if (HasPeriodicResourceId) hash ^= PeriodicResourceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (tokenGift_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokenGift);
      }
      if (HasRecipientAccountId) {
        output.WriteRawTag(24);
        output.WriteUInt32(RecipientAccountId);
      }
      if (HasPeriodicResourceId) {
        output.WriteRawTag(32);
        output.WriteUInt32(PeriodicResourceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (tokenGift_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokenGift);
      }
      if (HasRecipientAccountId) {
        output.WriteRawTag(24);
        output.WriteUInt32(RecipientAccountId);
      }
      if (HasPeriodicResourceId) {
        output.WriteRawTag(32);
        output.WriteUInt32(PeriodicResourceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (tokenGift_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenGift);
      }
      if (HasRecipientAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecipientAccountId);
      }
      if (HasPeriodicResourceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeriodicResourceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldGiftTokens other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.tokenGift_ != null) {
        if (tokenGift_ == null) {
          TokenGift = new global::Steam.Protos.Dota2.CMsgOverworldTokenCount();
        }
        TokenGift.MergeFrom(other.TokenGift);
      }
      if (other.HasRecipientAccountId) {
        RecipientAccountId = other.RecipientAccountId;
      }
      if (other.HasPeriodicResourceId) {
        PeriodicResourceId = other.PeriodicResourceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (tokenGift_ == null) {
              TokenGift = new global::Steam.Protos.Dota2.CMsgOverworldTokenCount();
            }
            input.ReadMessage(TokenGift);
            break;
          }
          case 24: {
            RecipientAccountId = input.ReadUInt32();
            break;
          }
          case 32: {
            PeriodicResourceId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (tokenGift_ == null) {
              TokenGift = new global::Steam.Protos.Dota2.CMsgOverworldTokenCount();
            }
            input.ReadMessage(TokenGift);
            break;
          }
          case 24: {
            RecipientAccountId = input.ReadUInt32();
            break;
          }
          case 32: {
            PeriodicResourceId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldGiftTokensResponse : pb::IMessage<CMsgClientToGCOverworldGiftTokensResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldGiftTokensResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldGiftTokensResponse>(() => new CMsgClientToGCOverworldGiftTokensResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldGiftTokensResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGiftTokensResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGiftTokensResponse(CMsgClientToGCOverworldGiftTokensResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGiftTokensResponse Clone() {
      return new CMsgClientToGCOverworldGiftTokensResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokensResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokensResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokensResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokensResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldGiftTokensResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldGiftTokensResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldGiftTokensResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokensResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldGiftTokensResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldGiftTokensResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 5,
        [pbr::OriginalName("k_eNodeLocked")] KENodeLocked = 6,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 7,
        [pbr::OriginalName("k_eInvalidGift")] KEInvalidGift = 8,
        [pbr::OriginalName("k_eNotEnoughTokens")] KENotEnoughTokens = 9,
        [pbr::OriginalName("k_eInvalidRecipient")] KEInvalidRecipient = 10,
        [pbr::OriginalName("k_eNotEnoughPeriodicResource")] KENotEnoughPeriodicResource = 11,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldRequestTokensNeededByFriend : pb::IMessage<CMsgClientToGCOverworldRequestTokensNeededByFriend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldRequestTokensNeededByFriend> _parser = new pb::MessageParser<CMsgClientToGCOverworldRequestTokensNeededByFriend>(() => new CMsgClientToGCOverworldRequestTokensNeededByFriend());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldRequestTokensNeededByFriend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldRequestTokensNeededByFriend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldRequestTokensNeededByFriend(CMsgClientToGCOverworldRequestTokensNeededByFriend other) : this() {
      _hasBits0 = other._hasBits0;
      friendAccountId_ = other.friendAccountId_;
      overworldId_ = other.overworldId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldRequestTokensNeededByFriend Clone() {
      return new CMsgClientToGCOverworldRequestTokensNeededByFriend(this);
    }

    /// <summary>Field number for the "friend_account_id" field.</summary>
    public const int FriendAccountIdFieldNumber = 1;
    private readonly static uint FriendAccountIdDefaultValue = 0;

    private uint friendAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendAccountId {
      get { if ((_hasBits0 & 1) != 0) { return friendAccountId_; } else { return FriendAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        friendAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "friend_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "friend_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 2;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 2) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldRequestTokensNeededByFriend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldRequestTokensNeededByFriend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendAccountId != other.FriendAccountId) return false;
      if (OverworldId != other.OverworldId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFriendAccountId) hash ^= FriendAccountId.GetHashCode();
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFriendAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(FriendAccountId);
      }
      if (HasOverworldId) {
        output.WriteRawTag(16);
        output.WriteUInt32(OverworldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFriendAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(FriendAccountId);
      }
      if (HasOverworldId) {
        output.WriteRawTag(16);
        output.WriteUInt32(OverworldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFriendAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FriendAccountId);
      }
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldRequestTokensNeededByFriend other) {
      if (other == null) {
        return;
      }
      if (other.HasFriendAccountId) {
        FriendAccountId = other.FriendAccountId;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FriendAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            OverworldId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FriendAccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            OverworldId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldRequestTokensNeededByFriendResponse : pb::IMessage<CMsgClientToGCOverworldRequestTokensNeededByFriendResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldRequestTokensNeededByFriendResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldRequestTokensNeededByFriendResponse>(() => new CMsgClientToGCOverworldRequestTokensNeededByFriendResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldRequestTokensNeededByFriendResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldRequestTokensNeededByFriendResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldRequestTokensNeededByFriendResponse(CMsgClientToGCOverworldRequestTokensNeededByFriendResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      tokenQuantity_ = other.tokenQuantity_ != null ? other.tokenQuantity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldRequestTokensNeededByFriendResponse Clone() {
      return new CMsgClientToGCOverworldRequestTokensNeededByFriendResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "token_quantity" field.</summary>
    public const int TokenQuantityFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokenQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokenQuantity {
      get { return tokenQuantity_; }
      set {
        tokenQuantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldRequestTokensNeededByFriendResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldRequestTokensNeededByFriendResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      if (!object.Equals(TokenQuantity, other.TokenQuantity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (tokenQuantity_ != null) hash ^= TokenQuantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (tokenQuantity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokenQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (tokenQuantity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokenQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (tokenQuantity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenQuantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldRequestTokensNeededByFriendResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      if (other.tokenQuantity_ != null) {
        if (tokenQuantity_ == null) {
          TokenQuantity = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
        }
        TokenQuantity.MergeFrom(other.TokenQuantity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (tokenQuantity_ == null) {
              TokenQuantity = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokenQuantity);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.Types.EResponse) input.ReadEnum();
            break;
          }
          case 18: {
            if (tokenQuantity_ == null) {
              TokenQuantity = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokenQuantity);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldRequestTokensNeededByFriendResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 5,
        [pbr::OriginalName("k_eNodeLocked")] KENodeLocked = 6,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 7,
        [pbr::OriginalName("k_eInvalidFriend")] KEInvalidFriend = 8,
        [pbr::OriginalName("k_eTooManyRequests")] KETooManyRequests = 9,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldDevResetAll : pb::IMessage<CMsgClientToGCOverworldDevResetAll>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldDevResetAll> _parser = new pb::MessageParser<CMsgClientToGCOverworldDevResetAll>(() => new CMsgClientToGCOverworldDevResetAll());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldDevResetAll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetAll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetAll(CMsgClientToGCOverworldDevResetAll other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetAll Clone() {
      return new CMsgClientToGCOverworldDevResetAll(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldDevResetAll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldDevResetAll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldDevResetAll other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldDevResetAllResponse : pb::IMessage<CMsgClientToGCOverworldDevResetAllResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldDevResetAllResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldDevResetAllResponse>(() => new CMsgClientToGCOverworldDevResetAllResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldDevResetAllResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetAllResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetAllResponse(CMsgClientToGCOverworldDevResetAllResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetAllResponse Clone() {
      return new CMsgClientToGCOverworldDevResetAllResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAllResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAllResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAllResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAllResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldDevResetAllResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldDevResetAllResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldDevResetAllResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAllResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetAllResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldDevResetAllResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 5,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 6,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldDevResetNode : pb::IMessage<CMsgClientToGCOverworldDevResetNode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldDevResetNode> _parser = new pb::MessageParser<CMsgClientToGCOverworldDevResetNode>(() => new CMsgClientToGCOverworldDevResetNode());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldDevResetNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetNode(CMsgClientToGCOverworldDevResetNode other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetNode Clone() {
      return new CMsgClientToGCOverworldDevResetNode(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private readonly static uint NodeIdDefaultValue = 0;

    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { if ((_hasBits0 & 2) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldDevResetNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldDevResetNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldDevResetNode other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldDevResetNodeResponse : pb::IMessage<CMsgClientToGCOverworldDevResetNodeResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldDevResetNodeResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldDevResetNodeResponse>(() => new CMsgClientToGCOverworldDevResetNodeResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldDevResetNodeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetNodeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetNodeResponse(CMsgClientToGCOverworldDevResetNodeResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevResetNodeResponse Clone() {
      return new CMsgClientToGCOverworldDevResetNodeResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNodeResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNodeResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNodeResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNodeResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldDevResetNodeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldDevResetNodeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldDevResetNodeResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNodeResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevResetNodeResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldDevResetNodeResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 5,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 6,
        [pbr::OriginalName("k_eInvalidNode")] KEInvalidNode = 7,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldDevGrantTokens : pb::IMessage<CMsgClientToGCOverworldDevGrantTokens>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldDevGrantTokens> _parser = new pb::MessageParser<CMsgClientToGCOverworldDevGrantTokens>(() => new CMsgClientToGCOverworldDevGrantTokens());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldDevGrantTokens> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevGrantTokens() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevGrantTokens(CMsgClientToGCOverworldDevGrantTokens other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      tokenQuantity_ = other.tokenQuantity_ != null ? other.tokenQuantity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevGrantTokens Clone() {
      return new CMsgClientToGCOverworldDevGrantTokens(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "token_quantity" field.</summary>
    public const int TokenQuantityFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity tokenQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity TokenQuantity {
      get { return tokenQuantity_; }
      set {
        tokenQuantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldDevGrantTokens);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldDevGrantTokens other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      if (!object.Equals(TokenQuantity, other.TokenQuantity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (tokenQuantity_ != null) hash ^= TokenQuantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (tokenQuantity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokenQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (tokenQuantity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokenQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (tokenQuantity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenQuantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldDevGrantTokens other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.tokenQuantity_ != null) {
        if (tokenQuantity_ == null) {
          TokenQuantity = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
        }
        TokenQuantity.MergeFrom(other.TokenQuantity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (tokenQuantity_ == null) {
              TokenQuantity = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokenQuantity);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (tokenQuantity_ == null) {
              TokenQuantity = new global::Steam.Protos.Dota2.CMsgOverworldTokenQuantity();
            }
            input.ReadMessage(TokenQuantity);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldDevGrantTokensResponse : pb::IMessage<CMsgClientToGCOverworldDevGrantTokensResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldDevGrantTokensResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldDevGrantTokensResponse>(() => new CMsgClientToGCOverworldDevGrantTokensResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldDevGrantTokensResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevGrantTokensResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevGrantTokensResponse(CMsgClientToGCOverworldDevGrantTokensResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevGrantTokensResponse Clone() {
      return new CMsgClientToGCOverworldDevGrantTokensResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokensResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokensResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokensResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokensResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldDevGrantTokensResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldDevGrantTokensResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldDevGrantTokensResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokensResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevGrantTokensResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldDevGrantTokensResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 5,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 6,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldDevClearInventory : pb::IMessage<CMsgClientToGCOverworldDevClearInventory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldDevClearInventory> _parser = new pb::MessageParser<CMsgClientToGCOverworldDevClearInventory>(() => new CMsgClientToGCOverworldDevClearInventory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldDevClearInventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevClearInventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevClearInventory(CMsgClientToGCOverworldDevClearInventory other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevClearInventory Clone() {
      return new CMsgClientToGCOverworldDevClearInventory(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldDevClearInventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldDevClearInventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldDevClearInventory other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldDevClearInventoryResponse : pb::IMessage<CMsgClientToGCOverworldDevClearInventoryResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldDevClearInventoryResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldDevClearInventoryResponse>(() => new CMsgClientToGCOverworldDevClearInventoryResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldDevClearInventoryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevClearInventoryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevClearInventoryResponse(CMsgClientToGCOverworldDevClearInventoryResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldDevClearInventoryResponse Clone() {
      return new CMsgClientToGCOverworldDevClearInventoryResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventoryResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventoryResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventoryResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventoryResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldDevClearInventoryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldDevClearInventoryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldDevClearInventoryResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventoryResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldDevClearInventoryResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldDevClearInventoryResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 5,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 6,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldFeedback : pb::IMessage<CMsgClientToGCOverworldFeedback>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldFeedback> _parser = new pb::MessageParser<CMsgClientToGCOverworldFeedback>(() => new CMsgClientToGCOverworldFeedback());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldFeedback> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldFeedback(CMsgClientToGCOverworldFeedback other) : this() {
      _hasBits0 = other._hasBits0;
      language_ = other.language_;
      overworldId_ = other.overworldId_;
      feedback_ = other.feedback_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldFeedback Clone() {
      return new CMsgClientToGCOverworldFeedback(this);
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 1;
    private readonly static uint LanguageDefaultValue = 0;

    private uint language_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { if ((_hasBits0 & 1) != 0) { return language_; } else { return LanguageDefaultValue; } }
      set {
        _hasBits0 |= 1;
        language_ = value;
      }
    }
    /// <summary>Gets whether the "language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanguage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanguage() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 2;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 2) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "feedback" field.</summary>
    public const int FeedbackFieldNumber = 3;
    private readonly static string FeedbackDefaultValue = "";

    private string feedback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Feedback {
      get { return feedback_ ?? FeedbackDefaultValue; }
      set {
        feedback_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "feedback" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFeedback {
      get { return feedback_ != null; }
    }
    /// <summary>Clears the value of the "feedback" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFeedback() {
      feedback_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldFeedback);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Language != other.Language) return false;
      if (OverworldId != other.OverworldId) return false;
      if (Feedback != other.Feedback) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLanguage) hash ^= Language.GetHashCode();
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (HasFeedback) hash ^= Feedback.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLanguage) {
        output.WriteRawTag(8);
        output.WriteUInt32(Language);
      }
      if (HasOverworldId) {
        output.WriteRawTag(16);
        output.WriteUInt32(OverworldId);
      }
      if (HasFeedback) {
        output.WriteRawTag(26);
        output.WriteString(Feedback);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLanguage) {
        output.WriteRawTag(8);
        output.WriteUInt32(Language);
      }
      if (HasOverworldId) {
        output.WriteRawTag(16);
        output.WriteUInt32(OverworldId);
      }
      if (HasFeedback) {
        output.WriteRawTag(26);
        output.WriteString(Feedback);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (HasFeedback) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Feedback);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldFeedback other) {
      if (other == null) {
        return;
      }
      if (other.HasLanguage) {
        Language = other.Language;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.HasFeedback) {
        Feedback = other.Feedback;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Language = input.ReadUInt32();
            break;
          }
          case 16: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 26: {
            Feedback = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Language = input.ReadUInt32();
            break;
          }
          case 16: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 26: {
            Feedback = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldFeedbackResponse : pb::IMessage<CMsgClientToGCOverworldFeedbackResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldFeedbackResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldFeedbackResponse>(() => new CMsgClientToGCOverworldFeedbackResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldFeedbackResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldFeedbackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldFeedbackResponse(CMsgClientToGCOverworldFeedbackResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldFeedbackResponse Clone() {
      return new CMsgClientToGCOverworldFeedbackResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedbackResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedbackResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedbackResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedbackResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldFeedbackResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldFeedbackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldFeedbackResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedbackResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldFeedbackResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldFeedbackResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 5,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 6,
      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldGetDynamicImage : pb::IMessage<CMsgClientToGCOverworldGetDynamicImage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldGetDynamicImage> _parser = new pb::MessageParser<CMsgClientToGCOverworldGetDynamicImage>(() => new CMsgClientToGCOverworldGetDynamicImage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldGetDynamicImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetDynamicImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetDynamicImage(CMsgClientToGCOverworldGetDynamicImage other) : this() {
      _hasBits0 = other._hasBits0;
      magic_ = other.magic_;
      imageId_ = other.imageId_;
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetDynamicImage Clone() {
      return new CMsgClientToGCOverworldGetDynamicImage(this);
    }

    /// <summary>Field number for the "magic" field.</summary>
    public const int MagicFieldNumber = 1;
    private readonly static uint MagicDefaultValue = 0;

    private uint magic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Magic {
      get { if ((_hasBits0 & 1) != 0) { return magic_; } else { return MagicDefaultValue; } }
      set {
        _hasBits0 |= 1;
        magic_ = value;
      }
    }
    /// <summary>Gets whether the "magic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMagic {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "magic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMagic() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 2;
    private readonly static uint ImageIdDefaultValue = 0;

    private uint imageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImageId {
      get { if ((_hasBits0 & 2) != 0) { return imageId_; } else { return ImageIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        imageId_ = value;
      }
    }
    /// <summary>Gets whether the "image_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImageId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "image_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 3;
    private readonly static uint LanguageDefaultValue = 0;

    private uint language_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { if ((_hasBits0 & 4) != 0) { return language_; } else { return LanguageDefaultValue; } }
      set {
        _hasBits0 |= 4;
        language_ = value;
      }
    }
    /// <summary>Gets whether the "language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanguage {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanguage() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldGetDynamicImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldGetDynamicImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Magic != other.Magic) return false;
      if (ImageId != other.ImageId) return false;
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMagic) hash ^= Magic.GetHashCode();
      if (HasImageId) hash ^= ImageId.GetHashCode();
      if (HasLanguage) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMagic) {
        output.WriteRawTag(8);
        output.WriteUInt32(Magic);
      }
      if (HasImageId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImageId);
      }
      if (HasLanguage) {
        output.WriteRawTag(24);
        output.WriteUInt32(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMagic) {
        output.WriteRawTag(8);
        output.WriteUInt32(Magic);
      }
      if (HasImageId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImageId);
      }
      if (HasLanguage) {
        output.WriteRawTag(24);
        output.WriteUInt32(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMagic) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Magic);
      }
      if (HasImageId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImageId);
      }
      if (HasLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldGetDynamicImage other) {
      if (other == null) {
        return;
      }
      if (other.HasMagic) {
        Magic = other.Magic;
      }
      if (other.HasImageId) {
        ImageId = other.ImageId;
      }
      if (other.HasLanguage) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Magic = input.ReadUInt32();
            break;
          }
          case 16: {
            ImageId = input.ReadUInt32();
            break;
          }
          case 24: {
            Language = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Magic = input.ReadUInt32();
            break;
          }
          case 16: {
            ImageId = input.ReadUInt32();
            break;
          }
          case 24: {
            Language = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldGetDynamicImageResponse : pb::IMessage<CMsgClientToGCOverworldGetDynamicImageResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldGetDynamicImageResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldGetDynamicImageResponse>(() => new CMsgClientToGCOverworldGetDynamicImageResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldGetDynamicImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetDynamicImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetDynamicImageResponse(CMsgClientToGCOverworldGetDynamicImageResponse other) : this() {
      _hasBits0 = other._hasBits0;
      imageId_ = other.imageId_;
      images_ = other.images_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldGetDynamicImageResponse Clone() {
      return new CMsgClientToGCOverworldGetDynamicImageResponse(this);
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 1;
    private readonly static uint ImageIdDefaultValue = 0;

    private uint imageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImageId {
      get { if ((_hasBits0 & 1) != 0) { return imageId_; } else { return ImageIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        imageId_ = value;
      }
    }
    /// <summary>Gets whether the "image_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImageId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "image_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "images" field.</summary>
    public const int ImagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.Image> _repeated_images_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.Image.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.Image> images_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.Image>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.Image> Images {
      get { return images_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldGetDynamicImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldGetDynamicImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageId != other.ImageId) return false;
      if(!images_.Equals(other.images_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasImageId) hash ^= ImageId.GetHashCode();
      hash ^= images_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasImageId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ImageId);
      }
      images_.WriteTo(output, _repeated_images_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasImageId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ImageId);
      }
      images_.WriteTo(ref output, _repeated_images_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasImageId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImageId);
      }
      size += images_.CalculateSize(_repeated_images_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldGetDynamicImageResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasImageId) {
        ImageId = other.ImageId;
      }
      images_.Add(other.images_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ImageId = input.ReadUInt32();
            break;
          }
          case 18: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ImageId = input.ReadUInt32();
            break;
          }
          case 18: {
            images_.AddEntriesFrom(ref input, _repeated_images_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldGetDynamicImageResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EDynamicImageFormat {
        [pbr::OriginalName("k_eUnknown")] KEUnknown = 0,
        [pbr::OriginalName("k_ePNG")] KEPng = 1,
        [pbr::OriginalName("k_eData")] KEData = 2,
      }

      public sealed partial class Image : pb::IMessage<Image>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Image> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Image() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Image(Image other) : this() {
          _hasBits0 = other._hasBits0;
          width_ = other.width_;
          height_ = other.height_;
          format_ = other.format_;
          imageBytes_ = other.imageBytes_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Image Clone() {
          return new Image(this);
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 1;
        private readonly static uint WidthDefaultValue = 0;

        private uint width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Width {
          get { if ((_hasBits0 & 1) != 0) { return width_; } else { return WidthDefaultValue; } }
          set {
            _hasBits0 |= 1;
            width_ = value;
          }
        }
        /// <summary>Gets whether the "width" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWidth {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "width" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWidth() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 2;
        private readonly static uint HeightDefaultValue = 0;

        private uint height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Height {
          get { if ((_hasBits0 & 2) != 0) { return height_; } else { return HeightDefaultValue; } }
          set {
            _hasBits0 |= 2;
            height_ = value;
          }
        }
        /// <summary>Gets whether the "height" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeight {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "height" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeight() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "format" field.</summary>
        public const int FormatFieldNumber = 3;
        private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.EDynamicImageFormat FormatDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.EDynamicImageFormat.KEUnknown;

        private global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.EDynamicImageFormat format_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.EDynamicImageFormat Format {
          get { if ((_hasBits0 & 4) != 0) { return format_; } else { return FormatDefaultValue; } }
          set {
            _hasBits0 |= 4;
            format_ = value;
          }
        }
        /// <summary>Gets whether the "format" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFormat {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "format" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFormat() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "image_bytes" field.</summary>
        public const int ImageBytesFieldNumber = 4;
        private readonly static pb::ByteString ImageBytesDefaultValue = pb::ByteString.Empty;

        private pb::ByteString imageBytes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ImageBytes {
          get { return imageBytes_ ?? ImageBytesDefaultValue; }
          set {
            imageBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "image_bytes" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasImageBytes {
          get { return imageBytes_ != null; }
        }
        /// <summary>Clears the value of the "image_bytes" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearImageBytes() {
          imageBytes_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Image);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Image other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          if (Format != other.Format) return false;
          if (ImageBytes != other.ImageBytes) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasWidth) hash ^= Width.GetHashCode();
          if (HasHeight) hash ^= Height.GetHashCode();
          if (HasFormat) hash ^= Format.GetHashCode();
          if (HasImageBytes) hash ^= ImageBytes.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasWidth) {
            output.WriteRawTag(8);
            output.WriteUInt32(Width);
          }
          if (HasHeight) {
            output.WriteRawTag(16);
            output.WriteUInt32(Height);
          }
          if (HasFormat) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Format);
          }
          if (HasImageBytes) {
            output.WriteRawTag(34);
            output.WriteBytes(ImageBytes);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasWidth) {
            output.WriteRawTag(8);
            output.WriteUInt32(Width);
          }
          if (HasHeight) {
            output.WriteRawTag(16);
            output.WriteUInt32(Height);
          }
          if (HasFormat) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Format);
          }
          if (HasImageBytes) {
            output.WriteRawTag(34);
            output.WriteBytes(ImageBytes);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasWidth) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
          }
          if (HasHeight) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
          }
          if (HasFormat) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
          }
          if (HasImageBytes) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImageBytes);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Image other) {
          if (other == null) {
            return;
          }
          if (other.HasWidth) {
            Width = other.Width;
          }
          if (other.HasHeight) {
            Height = other.Height;
          }
          if (other.HasFormat) {
            Format = other.Format;
          }
          if (other.HasImageBytes) {
            ImageBytes = other.ImageBytes;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Width = input.ReadUInt32();
                break;
              }
              case 16: {
                Height = input.ReadUInt32();
                break;
              }
              case 24: {
                Format = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.EDynamicImageFormat) input.ReadEnum();
                break;
              }
              case 34: {
                ImageBytes = input.ReadBytes();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Width = input.ReadUInt32();
                break;
              }
              case 16: {
                Height = input.ReadUInt32();
                break;
              }
              case 24: {
                Format = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldGetDynamicImageResponse.Types.EDynamicImageFormat) input.ReadEnum();
                break;
              }
              case 34: {
                ImageBytes = input.ReadBytes();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CMsgClientToGCOverworldMinigameAction : pb::IMessage<CMsgClientToGCOverworldMinigameAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldMinigameAction> _parser = new pb::MessageParser<CMsgClientToGCOverworldMinigameAction>(() => new CMsgClientToGCOverworldMinigameAction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldMinigameAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMinigameAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMinigameAction(CMsgClientToGCOverworldMinigameAction other) : this() {
      _hasBits0 = other._hasBits0;
      overworldId_ = other.overworldId_;
      nodeId_ = other.nodeId_;
      action_ = other.action_;
      selection_ = other.selection_;
      optionValue_ = other.optionValue_;
      currencyAmount_ = other.currencyAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMinigameAction Clone() {
      return new CMsgClientToGCOverworldMinigameAction(this);
    }

    /// <summary>Field number for the "overworld_id" field.</summary>
    public const int OverworldIdFieldNumber = 1;
    private readonly static uint OverworldIdDefaultValue = 0;

    private uint overworldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverworldId {
      get { if ((_hasBits0 & 1) != 0) { return overworldId_; } else { return OverworldIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overworldId_ = value;
      }
    }
    /// <summary>Gets whether the "overworld_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOverworldId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overworld_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOverworldId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private readonly static uint NodeIdDefaultValue = 0;

    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { if ((_hasBits0 & 2) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.EOverworldMinigameAction ActionDefaultValue = global::Steam.Protos.Dota2.EOverworldMinigameAction.KEOverworldMinigameActionInvalid;

    private global::Steam.Protos.Dota2.EOverworldMinigameAction action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EOverworldMinigameAction Action {
      get { if ((_hasBits0 & 4) != 0) { return action_; } else { return ActionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAction {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "selection" field.</summary>
    public const int SelectionFieldNumber = 4;
    private readonly static uint SelectionDefaultValue = 0;

    private uint selection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Selection {
      get { if ((_hasBits0 & 8) != 0) { return selection_; } else { return SelectionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        selection_ = value;
      }
    }
    /// <summary>Gets whether the "selection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSelection {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "selection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSelection() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "option_value" field.</summary>
    public const int OptionValueFieldNumber = 5;
    private readonly static uint OptionValueDefaultValue = 0;

    private uint optionValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OptionValue {
      get { if ((_hasBits0 & 16) != 0) { return optionValue_; } else { return OptionValueDefaultValue; } }
      set {
        _hasBits0 |= 16;
        optionValue_ = value;
      }
    }
    /// <summary>Gets whether the "option_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOptionValue {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "option_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOptionValue() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "currency_amount" field.</summary>
    public const int CurrencyAmountFieldNumber = 6;
    private readonly static uint CurrencyAmountDefaultValue = 0;

    private uint currencyAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyAmount {
      get { if ((_hasBits0 & 32) != 0) { return currencyAmount_; } else { return CurrencyAmountDefaultValue; } }
      set {
        _hasBits0 |= 32;
        currencyAmount_ = value;
      }
    }
    /// <summary>Gets whether the "currency_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrencyAmount {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "currency_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrencyAmount() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldMinigameAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldMinigameAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverworldId != other.OverworldId) return false;
      if (NodeId != other.NodeId) return false;
      if (Action != other.Action) return false;
      if (Selection != other.Selection) return false;
      if (OptionValue != other.OptionValue) return false;
      if (CurrencyAmount != other.CurrencyAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverworldId) hash ^= OverworldId.GetHashCode();
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (HasSelection) hash ^= Selection.GetHashCode();
      if (HasOptionValue) hash ^= OptionValue.GetHashCode();
      if (HasCurrencyAmount) hash ^= CurrencyAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodeId);
      }
      if (HasAction) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Action);
      }
      if (HasSelection) {
        output.WriteRawTag(32);
        output.WriteUInt32(Selection);
      }
      if (HasOptionValue) {
        output.WriteRawTag(40);
        output.WriteUInt32(OptionValue);
      }
      if (HasCurrencyAmount) {
        output.WriteRawTag(48);
        output.WriteUInt32(CurrencyAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverworldId) {
        output.WriteRawTag(8);
        output.WriteUInt32(OverworldId);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodeId);
      }
      if (HasAction) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Action);
      }
      if (HasSelection) {
        output.WriteRawTag(32);
        output.WriteUInt32(Selection);
      }
      if (HasOptionValue) {
        output.WriteRawTag(40);
        output.WriteUInt32(OptionValue);
      }
      if (HasCurrencyAmount) {
        output.WriteRawTag(48);
        output.WriteUInt32(CurrencyAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOverworldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverworldId);
      }
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      if (HasAction) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (HasSelection) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Selection);
      }
      if (HasOptionValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OptionValue);
      }
      if (HasCurrencyAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldMinigameAction other) {
      if (other == null) {
        return;
      }
      if (other.HasOverworldId) {
        OverworldId = other.OverworldId;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.HasSelection) {
        Selection = other.Selection;
      }
      if (other.HasOptionValue) {
        OptionValue = other.OptionValue;
      }
      if (other.HasCurrencyAmount) {
        CurrencyAmount = other.CurrencyAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 24: {
            Action = (global::Steam.Protos.Dota2.EOverworldMinigameAction) input.ReadEnum();
            break;
          }
          case 32: {
            Selection = input.ReadUInt32();
            break;
          }
          case 40: {
            OptionValue = input.ReadUInt32();
            break;
          }
          case 48: {
            CurrencyAmount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverworldId = input.ReadUInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 24: {
            Action = (global::Steam.Protos.Dota2.EOverworldMinigameAction) input.ReadEnum();
            break;
          }
          case 32: {
            Selection = input.ReadUInt32();
            break;
          }
          case 40: {
            OptionValue = input.ReadUInt32();
            break;
          }
          case 48: {
            CurrencyAmount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgClientToGCOverworldMinigameActionResponse : pb::IMessage<CMsgClientToGCOverworldMinigameActionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgClientToGCOverworldMinigameActionResponse> _parser = new pb::MessageParser<CMsgClientToGCOverworldMinigameActionResponse>(() => new CMsgClientToGCOverworldMinigameActionResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgClientToGCOverworldMinigameActionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaGcmessagesCommonOverworldReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMinigameActionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMinigameActionResponse(CMsgClientToGCOverworldMinigameActionResponse other) : this() {
      _hasBits0 = other._hasBits0;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgClientToGCOverworldMinigameActionResponse Clone() {
      return new CMsgClientToGCOverworldMinigameActionResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameActionResponse.Types.EResponse ResponseDefaultValue = global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameActionResponse.Types.EResponse.KEInternalError;

    private global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameActionResponse.Types.EResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameActionResponse.Types.EResponse Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgClientToGCOverworldMinigameActionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgClientToGCOverworldMinigameActionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasResponse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgClientToGCOverworldMinigameActionResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameActionResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Response = (global::Steam.Protos.Dota2.CMsgClientToGCOverworldMinigameActionResponse.Types.EResponse) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgClientToGCOverworldMinigameActionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResponse {
        [pbr::OriginalName("k_eInternalError")] KEInternalError = 0,
        [pbr::OriginalName("k_eSuccess")] KESuccess = 1,
        [pbr::OriginalName("k_eTooBusy")] KETooBusy = 2,
        [pbr::OriginalName("k_eDisabled")] KEDisabled = 3,
        [pbr::OriginalName("k_eTimeout")] KETimeout = 4,
        [pbr::OriginalName("k_eInvalidOverworld")] KEInvalidOverworld = 5,
        [pbr::OriginalName("k_eInvalidNode")] KEInvalidNode = 6,
        [pbr::OriginalName("k_eNodeLocked")] KENodeLocked = 7,
        [pbr::OriginalName("k_eInvalidSelection")] KEInvalidSelection = 8,
        [pbr::OriginalName("k_eNotEnoughTokens")] KENotEnoughTokens = 9,
        [pbr::OriginalName("k_eNotEnoughMinigameCurrency")] KENotEnoughMinigameCurrency = 10,
        [pbr::OriginalName("k_eNotAllowed")] KENotAllowed = 11,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
