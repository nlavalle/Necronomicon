// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_shared_enums.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Steam.Protos.Dota2 {

  /// <summary>Holder for reflection information generated from dota_shared_enums.proto</summary>
  public static partial class DotaSharedEnumsReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_shared_enums.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaSharedEnumsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdkb3RhX3NoYXJlZF9lbnVtcy5wcm90byLMAQoYQ0RPVEFDbGllbnRIYXJk",
            "d2FyZVNwZWNzEhoKEmxvZ2ljYWxfcHJvY2Vzc29ycxgBIAEoDRIdChVjcHVf",
            "Y3ljbGVzX3Blcl9zZWNvbmQYAiABKAYSHQoVdG90YWxfcGh5c2ljYWxfbWVt",
            "b3J5GAMgASgGEhQKDGlzXzY0X2JpdF9vcxgEIAEoCBIaChJ1cGxvYWRfbWVh",
            "c3VyZW1lbnQYBSABKAQSFwoPcHJlZmVyX25vdF9ob3N0GAYgASgIEgsKA2Ny",
            "YxgHIAMoDSLOAwoNQ0RPVEFTYXZlR2FtZRIQCghtYXRjaF9pZBgFIAEoBBIR",
            "CglzYXZlX3RpbWUYAiABKA0SJgoHcGxheWVycxgDIAMoCzIVLkNET1RBU2F2",
            "ZUdhbWUuUGxheWVyEjMKDnNhdmVfaW5zdGFuY2VzGAQgAygLMhsuQ0RPVEFT",
            "YXZlR2FtZS5TYXZlSW5zdGFuY2UaWQoGUGxheWVyEjMKBHRlYW0YASABKA4y",
            "DS5ET1RBX0dDX1RFQU06FkRPVEFfR0NfVEVBTV9HT09EX0dVWVMSDAoEbmFt",
            "ZRgCIAEoCRIMCgRoZXJvGAMgASgJGt8BCgxTYXZlSW5zdGFuY2USEQoJZ2Ft",
            "ZV90aW1lGAIgASgNEhMKC3RlYW0xX3Njb3JlGAMgASgNEhMKC3RlYW0yX3Nj",
            "b3JlGAQgASgNEkUKEHBsYXllcl9wb3NpdGlvbnMYBSADKAsyKy5DRE9UQVNh",
            "dmVHYW1lLlNhdmVJbnN0YW5jZS5QbGF5ZXJQb3NpdGlvbnMSDwoHc2F2ZV9p",
            "ZBgGIAEoDRIRCglzYXZlX3RpbWUYByABKA0aJwoPUGxheWVyUG9zaXRpb25z",
            "EgkKAXgYASABKAISCQoBeRgCIAEoAiKSEAoWQ01zZ0RPVEFDb21iYXRMb2dF",
            "bnRyeRI7CgR0eXBlGAEgASgOMhUuRE9UQV9DT01CQVRMT0dfVFlQRVM6FkRP",
            "VEFfQ09NQkFUTE9HX0lOVkFMSUQSEwoLdGFyZ2V0X25hbWUYAiABKA0SGgoS",
            "dGFyZ2V0X3NvdXJjZV9uYW1lGAMgASgNEhUKDWF0dGFja2VyX25hbWUYBCAB",
            "KA0SGgoSZGFtYWdlX3NvdXJjZV9uYW1lGAUgASgNEhYKDmluZmxpY3Rvcl9u",
            "YW1lGAYgASgNEhwKFGlzX2F0dGFja2VyX2lsbHVzaW9uGAcgASgIEhgKEGlz",
            "X2F0dGFja2VyX2hlcm8YCCABKAgSGgoSaXNfdGFyZ2V0X2lsbHVzaW9uGAkg",
            "ASgIEhYKDmlzX3RhcmdldF9oZXJvGAogASgIEhoKEmlzX3Zpc2libGVfcmFk",
            "aWFudBgLIAEoCBIXCg9pc192aXNpYmxlX2RpcmUYDCABKAgSDQoFdmFsdWUY",
            "DSABKA0SDgoGaGVhbHRoGA4gASgFEhEKCXRpbWVzdGFtcBgPIAEoAhIVCg1z",
            "dHVuX2R1cmF0aW9uGBAgASgCEhUKDXNsb3dfZHVyYXRpb24YESABKAISHAoU",
            "aXNfYWJpbGl0eV90b2dnbGVfb24YEiABKAgSHQoVaXNfYWJpbGl0eV90b2dn",
            "bGVfb2ZmGBMgASgIEhUKDWFiaWxpdHlfbGV2ZWwYFCABKA0SEgoKbG9jYXRp",
            "b25feBgVIAEoAhISCgpsb2NhdGlvbl95GBYgASgCEhMKC2dvbGRfcmVhc29u",
            "GBcgASgNEhUKDXRpbWVzdGFtcF9yYXcYGCABKAISGQoRbW9kaWZpZXJfZHVy",
            "YXRpb24YGSABKAISEQoJeHBfcmVhc29uGBogASgNEhEKCWxhc3RfaGl0cxgb",
            "IAEoDRIVCg1hdHRhY2tlcl90ZWFtGBwgASgNEhMKC3RhcmdldF90ZWFtGB0g",
            "ASgNEhgKEG9ic193YXJkc19wbGFjZWQYHiABKA0SFgoOYXNzaXN0X3BsYXll",
            "cjAYHyABKA0SFgoOYXNzaXN0X3BsYXllcjEYICABKA0SFgoOYXNzaXN0X3Bs",
            "YXllcjIYISABKA0SFgoOYXNzaXN0X3BsYXllcjMYIiABKA0SEwoLc3RhY2tf",
            "Y291bnQYIyABKA0SFwoPaGlkZGVuX21vZGlmaWVyGCQgASgIEhoKEmlzX3Rh",
            "cmdldF9idWlsZGluZxglIAEoCBIZChFuZXV0cmFsX2NhbXBfdHlwZRgmIAEo",
            "DRIRCglydW5lX3R5cGUYJyABKA0SFgoOYXNzaXN0X3BsYXllcnMYKCADKAUS",
            "FAoMaXNfaGVhbF9zYXZlGCkgASgIEhsKE2lzX3VsdGltYXRlX2FiaWxpdHkY",
            "KiABKAgSGwoTYXR0YWNrZXJfaGVyb19sZXZlbBgrIAEoDRIZChF0YXJnZXRf",
            "aGVyb19sZXZlbBgsIAEoDRILCgN4cG0YLSABKA0SCwoDZ3BtGC4gASgNEhYK",
            "DmV2ZW50X2xvY2F0aW9uGC8gASgNEhYKDnRhcmdldF9pc19zZWxmGDAgASgI",
            "EhMKC2RhbWFnZV90eXBlGDEgASgNEh0KFWludmlzaWJpbGl0eV9tb2RpZmll",
            "chgyIAEoCBIXCg9kYW1hZ2VfY2F0ZWdvcnkYMyABKA0SEAoIbmV0d29ydGgY",
            "NCABKA0SFQoNYnVpbGRpbmdfdHlwZRg1IAEoDRIhChltb2RpZmllcl9lbGFw",
            "c2VkX2R1cmF0aW9uGDYgASgCEhgKEHNpbGVuY2VfbW9kaWZpZXIYNyABKAgS",
            "GwoTaGVhbF9mcm9tX2xpZmVzdGVhbBg4IAEoCBIXCg9tb2RpZmllcl9wdXJn",
            "ZWQYOSABKAgSFAoMc3BlbGxfZXZhZGVkGDogASgIEiIKGm1vdGlvbl9jb250",
            "cm9sbGVyX21vZGlmaWVyGDsgASgIEhcKD2xvbmdfcmFuZ2Vfa2lsbBg8IAEo",
            "CBIeChZtb2RpZmllcl9wdXJnZV9hYmlsaXR5GD0gASgNEhoKEm1vZGlmaWVy",
            "X3B1cmdlX25wYxg+IAEoDRIVCg1yb290X21vZGlmaWVyGD8gASgIEh4KFnRv",
            "dGFsX3VuaXRfZGVhdGhfY291bnQYQCABKA0SFQoNYXVyYV9tb2RpZmllchhB",
            "IAEoCBIdChVhcm1vcl9kZWJ1ZmZfbW9kaWZpZXIYQiABKAgSIwobbm9fcGh5",
            "c2ljYWxfZGFtYWdlX21vZGlmaWVyGEMgASgIEhgKEG1vZGlmaWVyX2FiaWxp",
            "dHkYRCABKA0SFwoPbW9kaWZpZXJfaGlkZGVuGEUgASgIEiMKG2luZmxpY3Rv",
            "cl9pc19zdG9sZW5fYWJpbGl0eRhGIAEoCBIYChBraWxsX2VhdGVyX2V2ZW50",
            "GEcgASgNEhkKEXVuaXRfc3RhdHVzX2xhYmVsGEggASgNEh4KFnNwZWxsX2dl",
            "bmVyYXRlZF9hdHRhY2sYSSABKAgSFQoNYXRfbmlnaHRfdGltZRhKIAEoCBIc",
            "ChRhdHRhY2tlcl9oYXNfc2NlcHRlchhLIAEoCBIZChFuZXV0cmFsX2NhbXBf",
            "dGVhbRhMIAEoDRIaChJyZWdlbmVyYXRlZF9oZWFsdGgYTSABKAISGAoQd2ls",
            "bF9yZWluY2FybmF0ZRhOIAEoCBIUCgx1c2VzX2NoYXJnZXMYTyABKAgSFwoP",
            "dHJhY2tlZF9zdGF0X2lkGFAgASgNIt0BChVDTXNnUGVuZGluZ0V2ZW50QXdh",
            "cmQSKAoIZXZlbnRfaWQYASABKA4yBy5FRXZlbnQ6DUVWRU5UX0lEX05PTkUS",
            "EQoJYWN0aW9uX2lkGAIgASgNEhQKDG51bV90b19ncmFudBgDIAEoDRJHCgpz",
            "Y29yZV9tb2RlGAQgASgOMhYuRUV2ZW50QWN0aW9uU2NvcmVNb2RlOhtrX2VF",
            "dmVudEFjdGlvblNjb3JlTW9kZV9BZGQSFAoMYXVkaXRfYWN0aW9uGAUgASgN",
            "EhIKCmF1ZGl0X2RhdGEYBiABKAQqmgUKDURPVEFfR2FtZU1vZGUSFgoSRE9U",
            "QV9HQU1FTU9ERV9OT05FEAASFAoQRE9UQV9HQU1FTU9ERV9BUBABEhQKEERP",
            "VEFfR0FNRU1PREVfQ00QAhIUChBET1RBX0dBTUVNT0RFX1JEEAMSFAoQRE9U",
            "QV9HQU1FTU9ERV9TRBAEEhQKEERPVEFfR0FNRU1PREVfQVIQBRIXChNET1RB",
            "X0dBTUVNT0RFX0lOVFJPEAYSFAoQRE9UQV9HQU1FTU9ERV9IVxAHEhwKGERP",
            "VEFfR0FNRU1PREVfUkVWRVJTRV9DTRAIEhYKEkRPVEFfR0FNRU1PREVfWE1B",
            "UxAJEhoKFkRPVEFfR0FNRU1PREVfVFVUT1JJQUwQChIUChBET1RBX0dBTUVN",
            "T0RFX01PEAsSFAoQRE9UQV9HQU1FTU9ERV9MUBAMEhcKE0RPVEFfR0FNRU1P",
            "REVfUE9PTDEQDRIUChBET1RBX0dBTUVNT0RFX0ZIEA4SGAoURE9UQV9HQU1F",
            "TU9ERV9DVVNUT00QDxIUChBET1RBX0dBTUVNT0RFX0NEEBASFAoQRE9UQV9H",
            "QU1FTU9ERV9CRBAREh8KG0RPVEFfR0FNRU1PREVfQUJJTElUWV9EUkFGVBAS",
            "EhcKE0RPVEFfR0FNRU1PREVfRVZFTlQQExIWChJET1RBX0dBTUVNT0RFX0FS",
            "RE0QFBIYChRET1RBX0dBTUVNT0RFXzFWMU1JRBAVEhsKF0RPVEFfR0FNRU1P",
            "REVfQUxMX0RSQUZUEBYSFwoTRE9UQV9HQU1FTU9ERV9UVVJCTxAXEhoKFkRP",
            "VEFfR0FNRU1PREVfTVVUQVRJT04QGBIjCh9ET1RBX0dBTUVNT0RFX0NPQUNI",
            "RVNfQ0hBTExFTkdFEBkqvAQKDkRPVEFfR2FtZVN0YXRlEh0KGURPVEFfR0FN",
            "RVJVTEVTX1NUQVRFX0lOSVQQABIxCi1ET1RBX0dBTUVSVUxFU19TVEFURV9X",
            "QUlUX0ZPUl9QTEFZRVJTX1RPX0xPQUQQARInCiNET1RBX0dBTUVSVUxFU19T",
            "VEFURV9IRVJPX1NFTEVDVElPThACEiYKIkRPVEFfR0FNRVJVTEVTX1NUQVRF",
            "X1NUUkFURUdZX1RJTUUQAxIhCh1ET1RBX0dBTUVSVUxFU19TVEFURV9QUkVf",
            "R0FNRRAEEikKJURPVEFfR0FNRVJVTEVTX1NUQVRFX0dBTUVfSU5fUFJPR1JF",
            "U1MQBRIiCh5ET1RBX0dBTUVSVUxFU19TVEFURV9QT1NUX0dBTUUQBhIjCh9E",
            "T1RBX0dBTUVSVUxFU19TVEFURV9ESVNDT05ORUNUEAcSJgoiRE9UQV9HQU1F",
            "UlVMRVNfU1RBVEVfVEVBTV9TSE9XQ0FTRRAIEioKJkRPVEFfR0FNRVJVTEVT",
            "X1NUQVRFX0NVU1RPTV9HQU1FX1NFVFVQEAkSLQopRE9UQV9HQU1FUlVMRVNf",
            "U1RBVEVfV0FJVF9GT1JfTUFQX1RPX0xPQUQQChInCiNET1RBX0dBTUVSVUxF",
            "U19TVEFURV9TQ0VOQVJJT19TRVRVUBALEiUKIURPVEFfR0FNRVJVTEVTX1NU",
            "QVRFX1BMQVlFUl9EUkFGVBAMEh0KGURPVEFfR0FNRVJVTEVTX1NUQVRFX0xB",
            "U1QQDSqpAwoMRE9UQV9HQ19URUFNEhoKFkRPVEFfR0NfVEVBTV9HT09EX0dV",
            "WVMQABIZChVET1RBX0dDX1RFQU1fQkFEX0dVWVMQARIcChhET1RBX0dDX1RF",
            "QU1fQlJPQURDQVNURVIQAhIaChZET1RBX0dDX1RFQU1fU1BFQ1RBVE9SEAMS",
            "HAoYRE9UQV9HQ19URUFNX1BMQVlFUl9QT09MEAQSFwoTRE9UQV9HQ19URUFN",
            "X05PVEVBTRAFEhkKFURPVEFfR0NfVEVBTV9DVVNUT01fMRAGEhkKFURPVEFf",
            "R0NfVEVBTV9DVVNUT01fMhAHEhkKFURPVEFfR0NfVEVBTV9DVVNUT01fMxAI",
            "EhkKFURPVEFfR0NfVEVBTV9DVVNUT01fNBAJEhkKFURPVEFfR0NfVEVBTV9D",
            "VVNUT01fNRAKEhkKFURPVEFfR0NfVEVBTV9DVVNUT01fNhALEhkKFURPVEFf",
            "R0NfVEVBTV9DVVNUT01fNxAMEhkKFURPVEFfR0NfVEVBTV9DVVNUT01fOBAN",
            "EhkKFURPVEFfR0NfVEVBTV9ORVVUUkFMUxAOKvYLCgZFRXZlbnQSEQoNRVZF",
            "TlRfSURfTk9ORRAAEhUKEUVWRU5UX0lEX0RJUkVUSURFEAESHAoYRVZFTlRf",
            "SURfU1BSSU5HX0ZFU1RJVkFMEAISGwoXRVZFTlRfSURfRlJPU1RJVlVTXzIw",
            "MTMQAxIcChhFVkVOVF9JRF9DT01QRU5ESVVNXzIwMTQQBBIaChZFVkVOVF9J",
            "RF9ORVhPTl9QQ19CQU5HEAUSGgoWRVZFTlRfSURfUFdSRF9EQUNfMjAxNRAG",
            "EhsKF0VWRU5UX0lEX05FV19CTE9PTV8yMDE1EAcSHwobRVZFTlRfSURfSU5U",
            "RVJOQVRJT05BTF8yMDE1EAgSHAoYRVZFTlRfSURfRkFMTF9NQUpPUl8yMDE1",
            "EAkSFgoSRVZFTlRfSURfT1JBQ0xFX1BBEAoSJAogRVZFTlRfSURfTkVXX0JM",
            "T09NXzIwMTVfUFJFQkVBU1QQCxIWChJFVkVOVF9JRF9GUk9TVElWVVMQDBIe",
            "ChpFVkVOVF9JRF9XSU5URVJfTUFKT1JfMjAxNhANEh8KG0VWRU5UX0lEX0lO",
            "VEVSTkFUSU9OQUxfMjAxNhAOEhwKGEVWRU5UX0lEX0ZBTExfTUFKT1JfMjAx",
            "NhAPEh4KGkVWRU5UX0lEX1dJTlRFUl9NQUpPUl8yMDE3EBASGwoXRVZFTlRf",
            "SURfTkVXX0JMT09NXzIwMTcQERIfChtFVkVOVF9JRF9JTlRFUk5BVElPTkFM",
            "XzIwMTcQEhIeChpFVkVOVF9JRF9QTFVTX1NVQlNDUklQVElPThATEh0KGUVW",
            "RU5UX0lEX1NJTkdMRVNfREFZXzIwMTcQFBIbChdFVkVOVF9JRF9GUk9TVElW",
            "VVNfMjAxNxAVEh8KG0VWRU5UX0lEX0lOVEVSTkFUSU9OQUxfMjAxOBAWEhsK",
            "F0VWRU5UX0lEX0ZST1NUSVZVU18yMDE4EBcSGwoXRVZFTlRfSURfTkVXX0JM",
            "T09NXzIwMTkQGBIfChtFVkVOVF9JRF9JTlRFUk5BVElPTkFMXzIwMTkQGRIi",
            "Ch5FVkVOVF9JRF9ORVdfUExBWUVSX0VYUEVSSUVOQ0UQGhIbChdFVkVOVF9J",
            "RF9GUk9TVElWVVNfMjAxORAbEhsKF0VWRU5UX0lEX05FV19CTE9PTV8yMDIw",
            "EBwSHwobRVZFTlRfSURfSU5URVJOQVRJT05BTF8yMDIwEB0SGAoURVZFTlRf",
            "SURfVEVBTV9GQU5ET00QHhIaChZFVkVOVF9JRF9ESVJFVElERV8yMDIwEB8S",
            "GAoURVZFTlRfSURfU1BSSU5HXzIwMjEQIBIWChJFVkVOVF9JRF9GQUxMXzIw",
            "MjEQIRIiCh5FVkVOVF9JRF9URUFNX0ZBTkRPTV9GQUxMXzIwMjEQIhIhCh1F",
            "VkVOVF9JRF9URUFNXzIwMjFfMjAyMl9UT1VSMhAjEh8KG0VWRU5UX0lEX0lO",
            "VEVSTkFUSU9OQUxfMjAyMhAkEiEKHUVWRU5UX0lEX1RFQU1fMjAyMV8yMDIy",
            "X1RPVVIzECUSJAogRVZFTlRfSURfVEVBTV9JTlRFUk5BVElPTkFMXzIwMjIQ",
            "JhIdChlFVkVOVF9JRF9QRVJNQU5FTlRfR1JBTlRTECcSJgoiRVZFTlRfSURf",
            "TVVFUlRBX1JFTEVBU0VfU1BSSU5HMjAyMxAoEhwKGEVWRU5UX0lEX1RFQU1f",
            "MjAyM19UT1VSMRApEhwKGEVWRU5UX0lEX1RFQU1fMjAyM19UT1VSMhAqEhwK",
            "GEVWRU5UX0lEX1RFQU1fMjAyM19UT1VSMxArEh8KG0VWRU5UX0lEX0lOVEVS",
            "TkFUSU9OQUxfMjAyMxAtEh0KGUVWRU5UX0lEXzEwVEhfQU5OSVZFUlNBUlkQ",
            "LhIWChJFVkVOVF9JRF9DUk9XTkZBTEwQLxIbChdFVkVOVF9JRF9GUk9TVElW",
            "VVNfMjAyMxAwEh8KG0VWRU5UX0lEX0lOVEVSTkFUSU9OQUxfMjAyNBAxEhsK",
            "F0VWRU5UX0lEX0ZST1NUSVZVU18yMDI0EDIquwIKCUVSYW5rVHlwZRIXChNr",
            "X0VSYW5rVHlwZV9JbnZhbGlkEAASFgoSa19FUmFua1R5cGVfQ2FzdWFsEAES",
            "FgoSa19FUmFua1R5cGVfUmFua2VkEAISHAoYa19FUmFua1R5cGVfQ2FzdWFs",
            "TGVnYWN5EAMSHAoYa19FUmFua1R5cGVfUmFua2VkTGVnYWN5EAQSHAoYa19F",
            "UmFua1R5cGVfQ2FzdWFsR2xpY2tvEAUSHAoYa19FUmFua1R5cGVfUmFua2Vk",
            "R2xpY2tvEAYSFwoTa19FUmFua1R5cGVfUmFua01heBAHEh8KG2tfRVJhbmtU",
            "eXBlX0JlaGF2aW9yUHJpdmF0ZRBkEh4KGmtfRVJhbmtUeXBlX0JlaGF2aW9y",
            "UHVibGljEGUSEwoPa19FUmFua1R5cGVfTWF4EGYqygIKEkRPVEFMZWF2ZXJT",
            "dGF0dXNfdBIUChBET1RBX0xFQVZFUl9OT05FEAASHAoYRE9UQV9MRUFWRVJf",
            "RElTQ09OTkVDVEVEEAESJQohRE9UQV9MRUFWRVJfRElTQ09OTkVDVEVEX1RP",
            "T19MT05HEAISGQoVRE9UQV9MRUFWRVJfQUJBTkRPTkVEEAMSEwoPRE9UQV9M",
            "RUFWRVJfQUZLEAQSHwobRE9UQV9MRUFWRVJfTkVWRVJfQ09OTkVDVEVEEAUS",
            "KAokRE9UQV9MRUFWRVJfTkVWRVJfQ09OTkVDVEVEX1RPT19MT05HEAYSIgoe",
            "RE9UQV9MRUFWRVJfRkFJTEVEX1RPX1JFQURZX1VQEAcSGAoURE9UQV9MRUFW",
            "RVJfREVDTElORUQQCBIgChxET1RBX0xFQVZFUl9ERUNMSU5FRF9SRVFVRVVF",
            "EAkqngIKFURPVEFDb25uZWN0aW9uU3RhdGVfdBIhCh1ET1RBX0NPTk5FQ1RJ",
            "T05fU1RBVEVfVU5LTk9XThAAEisKJ0RPVEFfQ09OTkVDVElPTl9TVEFURV9O",
            "T1RfWUVUX0NPTk5FQ1RFRBABEiMKH0RPVEFfQ09OTkVDVElPTl9TVEFURV9D",
            "T05ORUNURUQQAhImCiJET1RBX0NPTk5FQ1RJT05fU1RBVEVfRElTQ09OTkVD",
            "VEVEEAMSIwofRE9UQV9DT05ORUNUSU9OX1NUQVRFX0FCQU5ET05FRBAEEiEK",
            "HURPVEFfQ09OTkVDVElPTl9TVEFURV9MT0FESU5HEAUSIAocRE9UQV9DT05O",
            "RUNUSU9OX1NUQVRFX0ZBSUxFRBAGKowBCg1GYW50YXN5X1JvbGVzEhoKFkZB",
            "TlRBU1lfUk9MRV9VTkRFRklORUQQABIVChFGQU5UQVNZX1JPTEVfQ09SRRAB",
            "EhgKFEZBTlRBU1lfUk9MRV9TVVBQT1JUEAISGAoURkFOVEFTWV9ST0xFX09G",
            "RkxBTkUQAxIUChBGQU5UQVNZX1JPTEVfTUlEEAQqoQUKD0ZhbnRhc3lfU2Nv",
            "cmluZxIZChVGQU5UQVNZX1NDT1JJTkdfS0lMTFMQABIaChZGQU5UQVNZX1ND",
            "T1JJTkdfREVBVEhTEAESFgoSRkFOVEFTWV9TQ09SSU5HX0NTEAISFwoTRkFO",
            "VEFTWV9TQ09SSU5HX0dQTRADEh8KG0ZBTlRBU1lfU0NPUklOR19UT1dFUl9L",
            "SUxMUxAEEiAKHEZBTlRBU1lfU0NPUklOR19ST1NIQU5fS0lMTFMQBRIrCidG",
            "QU5UQVNZX1NDT1JJTkdfVEVBTUZJR0hUX1BBUlRJQ0lQQVRJT04QBhIhCh1G",
            "QU5UQVNZX1NDT1JJTkdfV0FSRFNfUExBTlRFRBAHEiEKHUZBTlRBU1lfU0NP",
            "UklOR19DQU1QU19TVEFDS0VEEAgSIQodRkFOVEFTWV9TQ09SSU5HX1JVTkVT",
            "X0dSQUJCRUQQCRIfChtGQU5UQVNZX1NDT1JJTkdfRklSU1RfQkxPT0QQChIZ",
            "ChVGQU5UQVNZX1NDT1JJTkdfU1RVTlMQCxIfChtGQU5UQVNZX1NDT1JJTkdf",
            "U01PS0VTX1VTRUQQDBIoCiRGQU5UQVNZX1NDT1JJTkdfTkVVVFJBTF9UT0tF",
            "TlNfRk9VTkQQDRIiCh5GQU5UQVNZX1NDT1JJTkdfV0FUQ0hFUlNfVEFLRU4Q",
            "DhIiCh5GQU5UQVNZX1NDT1JJTkdfTE9UVVNFU19HQUlORUQQDxIjCh9GQU5U",
            "QVNZX1NDT1JJTkdfVE9STUVOVE9SX0tJTExTEBASIQodRkFOVEFTWV9TQ09S",
            "SU5HX0NPVVJJRVJfS0lMTFMQERIZChVGQU5UQVNZX1NDT1JJTkdfVFlQRVMQ",
            "EhIbChdGQU5UQVNZX1NDT1JJTkdfSU5WQUxJRBATKooBChJGYW50YXN5X1Rl",
            "YW1fU2xvdHMSFQoRRkFOVEFTWV9TTE9UX05PTkUQABIVChFGQU5UQVNZX1NM",
            "T1RfQ09SRRABEhgKFEZBTlRBU1lfU0xPVF9TVVBQT1JUEAISFAoQRkFOVEFT",
            "WV9TTE9UX0FOWRADEhYKEkZBTlRBU1lfU0xPVF9CRU5DSBAEKt0CChZGYW50",
            "YXN5X1NlbGVjdGlvbl9Nb2RlEh0KGUZBTlRBU1lfU0VMRUNUSU9OX0lOVkFM",
            "SUQQABIcChhGQU5UQVNZX1NFTEVDVElPTl9MT0NLRUQQARIdChlGQU5UQVNZ",
            "X1NFTEVDVElPTl9TSFVGRkxFEAISHwobRkFOVEFTWV9TRUxFQ1RJT05fRlJF",
            "RV9QSUNLEAMSGwoXRkFOVEFTWV9TRUxFQ1RJT05fRU5ERUQQBBIgChxGQU5U",
            "QVNZX1NFTEVDVElPTl9QUkVfU0VBU09OEAUSHwobRkFOVEFTWV9TRUxFQ1RJ",
            "T05fUFJFX0RSQUZUEAYSHgoaRkFOVEFTWV9TRUxFQ1RJT05fRFJBRlRJTkcQ",
            "BxIkCiBGQU5UQVNZX1NFTEVDVElPTl9SRUdVTEFSX1NFQVNPThAIEiAKHEZB",
            "TlRBU1lfU0VMRUNUSU9OX0NBUkRfQkFTRUQQCSpqChBGYW50YXN5X0dlbV9U",
            "eXBlEhkKFUZBTlRBU1lfR0VNX1RZUEVfUlVCWRAAEh0KGUZBTlRBU1lfR0VN",
            "X1RZUEVfU0FQUEhJUkUQARIcChhGQU5UQVNZX0dFTV9UWVBFX0VNRVJBTEQQ",
            "AiqCBgoVRE9UQUNoYXRDaGFubmVsVHlwZV90EhwKGERPVEFDaGFubmVsVHlw",
            "ZV9SZWdpb25hbBAAEhoKFkRPVEFDaGFubmVsVHlwZV9DdXN0b20QARIZChVE",
            "T1RBQ2hhbm5lbFR5cGVfUGFydHkQAhIZChVET1RBQ2hhbm5lbFR5cGVfTG9i",
            "YnkQAxIYChRET1RBQ2hhbm5lbFR5cGVfVGVhbRAEEhkKFURPVEFDaGFubmVs",
            "VHlwZV9HdWlsZBAFEhsKF0RPVEFDaGFubmVsVHlwZV9GYW50YXN5EAYSGwoX",
            "RE9UQUNoYW5uZWxUeXBlX1doaXNwZXIQBxIbChdET1RBQ2hhbm5lbFR5cGVf",
            "Q29uc29sZRAIEhcKE0RPVEFDaGFubmVsVHlwZV9UYWIQCRIbChdET1RBQ2hh",
            "bm5lbFR5cGVfSW52YWxpZBAKEhsKF0RPVEFDaGFubmVsVHlwZV9HYW1lQWxs",
            "EAsSHgoaRE9UQUNoYW5uZWxUeXBlX0dhbWVBbGxpZXMQDBIhCh1ET1RBQ2hh",
            "bm5lbFR5cGVfR2FtZVNwZWN0YXRvchANEiAKHERPVEFDaGFubmVsVHlwZV9H",
            "YW1lQ29hY2hpbmcQDhIYChRET1RBQ2hhbm5lbFR5cGVfQ2FmZRAPEh4KGkRP",
            "VEFDaGFubmVsVHlwZV9DdXN0b21HYW1lEBASGwoXRE9UQUNoYW5uZWxUeXBl",
            "X1ByaXZhdGUQERIcChhET1RBQ2hhbm5lbFR5cGVfUG9zdEdhbWUQEhIdChlE",
            "T1RBQ2hhbm5lbFR5cGVfQmF0dGxlQ3VwEBMSIQodRE9UQUNoYW5uZWxUeXBl",
            "X0hMVFZTcGVjdGF0b3IQFBIeChpET1RBQ2hhbm5lbFR5cGVfR2FtZUV2ZW50",
            "cxAVEhoKFkRPVEFDaGFubmVsVHlwZV9Ucml2aWEQFhIdChlET1RBQ2hhbm5l",
            "bFR5cGVfTmV3UGxheWVyEBcSIwofRE9UQUNoYW5uZWxUeXBlX1ByaXZhdGVD",
            "b2FjaGluZxAYKpABChZFQ2hhdFNwZWNpYWxQcml2aWxlZ2VzEiEKHWtfRUNo",
            "YXRTcGVjaWFsUHJpdmlsZWdlc19Ob25lEAASJgoia19FQ2hhdFNwZWNpYWxQ",
            "cml2aWxlZ2VzX01vZGVyYXRvchABEisKJ2tfRUNoYXRTcGVjaWFsUHJpdmls",
            "ZWdlc19TdXBlck1vZGVyYXRvchACKt0DCg5ET1RBQ29tbVR5cGVfdBIXChNE",
            "T1RBX0NPTU1fVFlQRV9OT05FEAASFwoTRE9UQV9DT01NX1RZUEVfUElORxAB",
            "EhwKGERPVEFfQ09NTV9UWVBFX0NIQVRXSEVFTBACEhYKEkRPVEFfQ09NTV9U",
            "WVBFX1RJUBADEhcKE0RPVEFfQ09NTV9UWVBFX1RFWFQQBBIbChdET1RBX0NP",
            "TU1fVFlQRV9TSE9XQ0FTRRAFEhgKFERPVEFfQ09NTV9UWVBFX1ZPSUNFEAYS",
            "HwobRE9UQV9DT01NX1RZUEVfQUxMWV9BQklMSVRZEAcSGAoURE9UQV9DT01N",
            "X1RZUEVfUEFVU0UQCBIbChdET1RBX0NPTU1fVFlQRV9DT0FDSElORxAJEh0K",
            "GURPVEFfQ09NTV9UWVBFX05PQ09PTERPV04QChIiCh5ET1RBX0NPTU1fVFlQ",
            "RV9SQU5LRURNQVRDSE1BS0UQCxIYChRET1RBX0NPTU1fVFlQRV9EUk9QUxAM",
            "EiMKH0RPVEFfQ09NTV9UWVBFX05FV1BMQVlFUl9FWFBFUlQQDRIaChZET1RB",
            "X0NPTU1fVFlQRV9DT0FDSEVEEA4SHQoZRE9UQV9DT01NX1RZUEVfTUFQRFJB",
            "V0lORxAPKvoBCg9ET1RBQ29tbUxldmVsX3QSGAoURE9UQV9DT01NX0xFVkVM",
            "X05PTkUQABIcChhET1RBX0NPTU1fTEVWRUxfQ09PTERPV04QARIZChVET1RB",
            "X0NPTU1fTEVWRUxfUElOR1MQAhIeChpET1RBX0NPTU1fTEVWRUxfTUFQRFJB",
            "V0lORxADEhgKFERPVEFfQ09NTV9MRVZFTF9DSEFUEAQSGwoXRE9UQV9DT01N",
            "X0xFVkVMX1RJUFBJTkcQBRIZChVET1RBX0NPTU1fTEVWRUxfVk9JQ0UQBhIi",
            "Ch5ET1RBX0NPTU1fTEVWRUxfQUxMSUVEX0FCSUxJVFkQByq9AQoTRE9UQUJl",
            "aGF2aW9yTGV2ZWxfdBIcChhET1RBX0JFSEFWSU9SX0xFVkVMX05PTkUQABIm",
            "CiJET1RBX0JFSEFWSU9SX0xFVkVMX1JBTktFRF9BTExPV0VEEAESHwobRE9U",
            "QV9CRUhBVklPUl9MRVZFTF9QQVVTSU5HEAISHQoZRE9UQV9CRUhBVklPUl9M",
            "RVZFTF9EUk9QUxADEiAKHERPVEFfQkVIQVZJT1JfTEVWRUxfQ09BQ0hJTkcQ",
            "BCqEAgoURVByb2ZpbGVDYXJkU2xvdFR5cGUSIAoca19FUHJvZmlsZUNhcmRT",
            "bG90VHlwZV9FbXB0eRAAEh8KG2tfRVByb2ZpbGVDYXJkU2xvdFR5cGVfU3Rh",
            "dBABEiEKHWtfRVByb2ZpbGVDYXJkU2xvdFR5cGVfVHJvcGh5EAISHwoba19F",
            "UHJvZmlsZUNhcmRTbG90VHlwZV9JdGVtEAMSHwoba19FUHJvZmlsZUNhcmRT",
            "bG90VHlwZV9IZXJvEAQSIwofa19FUHJvZmlsZUNhcmRTbG90VHlwZV9FbW90",
            "aWNvbhAFEh8KG2tfRVByb2ZpbGVDYXJkU2xvdFR5cGVfVGVhbRAGKpUBChdF",
            "TWF0Y2hHcm91cFNlcnZlclN0YXR1cxIgChxrX0VNYXRjaEdyb3VwU2VydmVy",
            "U3RhdHVzX09LEAASMQota19FTWF0Y2hHcm91cFNlcnZlclN0YXR1c19MaW1p",
            "dGVkQXZhaWxhYmlsaXR5EAESJQoha19FTWF0Y2hHcm91cFNlcnZlclN0YXR1",
            "c19PZmZsaW5lEAIqTwoMRE9UQV9DTV9QSUNLEhIKDkRPVEFfQ01fUkFORE9N",
            "EAASFQoRRE9UQV9DTV9HT09EX0dVWVMQARIUChBET1RBX0NNX0JBRF9HVVlT",
            "EAIqtAEKFkRPVEFMb3dQcmlvcml0eUJhblR5cGUSIQodRE9UQV9MT1dfUFJJ",
            "T1JJVFlfQkFOX0FCQU5ET04QABIhCh1ET1RBX0xPV19QUklPUklUWV9CQU5f",
            "UkVQT1JUUxABEisKJ0RPVEFfTE9XX1BSSU9SSVRZX0JBTl9TRUNPTkRBUllf",
            "QUJBTkRPThACEicKI0RPVEFfTE9XX1BSSU9SSVRZX0JBTl9QUkVfR0FNRV9S",
            "T0xFEAMqpwEKE0RPVEFMb2JieVJlYWR5U3RhdGUSIgoeRE9UQUxvYmJ5UmVh",
            "ZHlTdGF0ZV9VTkRFQ0xBUkVEEAASIAocRE9UQUxvYmJ5UmVhZHlTdGF0ZV9B",
            "Q0NFUFRFRBABEiAKHERPVEFMb2JieVJlYWR5U3RhdGVfREVDTElORUQQAhIo",
            "CiRET1RBTG9iYnlSZWFkeVN0YXRlX0RFQ0xJTkVEX1JFUVVFVUUQAyq6BAoT",
            "RE9UQUpvaW5Mb2JieVJlc3VsdBIcChhET1RBX0pPSU5fUkVTVUxUX1NVQ0NF",
            "U1MQABIkCiBET1RBX0pPSU5fUkVTVUxUX0FMUkVBRFlfSU5fR0FNRRABEiIK",
            "HkRPVEFfSk9JTl9SRVNVTFRfSU5WQUxJRF9MT0JCWRACEicKI0RPVEFfSk9J",
            "Tl9SRVNVTFRfSU5DT1JSRUNUX1BBU1NXT1JEEAMSIgoeRE9UQV9KT0lOX1JF",
            "U1VMVF9BQ0NFU1NfREVOSUVEEAQSIgoeRE9UQV9KT0lOX1JFU1VMVF9HRU5F",
            "UklDX0VSUk9SEAUSJgoiRE9UQV9KT0lOX1JFU1VMVF9JTkNPUlJFQ1RfVkVS",
            "U0lPThAGEiIKHkRPVEFfSk9JTl9SRVNVTFRfSU5fVEVBTV9QQVJUWRAHEiMK",
            "H0RPVEFfSk9JTl9SRVNVTFRfTk9fTE9CQllfRk9VTkQQCBIfChtET1RBX0pP",
            "SU5fUkVTVUxUX0xPQkJZX0ZVTEwQCRIyCi5ET1RBX0pPSU5fUkVTVUxUX0NV",
            "U1RPTV9HQU1FX0lOQ09SUkVDVF9WRVJTSU9OEAoSHAoYRE9UQV9KT0lOX1JF",
            "U1VMVF9USU1FT1VUEAsSKQolRE9UQV9KT0lOX1JFU1VMVF9DVVNUT01fR0FN",
            "RV9DT09MRE9XThAMEhkKFURPVEFfSk9JTl9SRVNVTFRfQlVTWRANEiAKHERP",
            "VEFfSk9JTl9SRVNVTFRfTk9fUExBWVRJTUUQDipxChpET1RBU2VsZWN0aW9u",
            "UHJpb3JpdHlSdWxlcxInCiNrX0RPVEFTZWxlY3Rpb25Qcmlvcml0eVJ1bGVz",
            "X01hbnVhbBAAEioKJmtfRE9UQVNlbGVjdGlvblByaW9yaXR5UnVsZXNfQXV0",
            "b21hdGljEAEq9gEKG0RPVEFTZWxlY3Rpb25Qcmlvcml0eUNob2ljZRIpCiVr",
            "X0RPVEFTZWxlY3Rpb25Qcmlvcml0eUNob2ljZV9JbnZhbGlkEAASKwona19E",
            "T1RBU2VsZWN0aW9uUHJpb3JpdHlDaG9pY2VfRmlyc3RQaWNrEAESLAooa19E",
            "T1RBU2VsZWN0aW9uUHJpb3JpdHlDaG9pY2VfU2Vjb25kUGljaxACEikKJWtf",
            "RE9UQVNlbGVjdGlvblByaW9yaXR5Q2hvaWNlX1JhZGlhbnQQAxImCiJrX0RP",
            "VEFTZWxlY3Rpb25Qcmlvcml0eUNob2ljZV9EaXJlEAQqYgoNRE9UQU1hdGNo",
            "Vm90ZRIZChVET1RBTWF0Y2hWb3RlX0lOVkFMSUQQABIaChZET1RBTWF0Y2hW",
            "b3RlX1BPU0lUSVZFEAESGgoWRE9UQU1hdGNoVm90ZV9ORUdBVElWRRACKngK",
            "E0RPVEFMb2JieVZpc2liaWxpdHkSHgoaRE9UQUxvYmJ5VmlzaWJpbGl0eV9Q",
            "dWJsaWMQABIfChtET1RBTG9iYnlWaXNpYmlsaXR5X0ZyaWVuZHMQARIgChxE",
            "T1RBTG9iYnlWaXNpYmlsaXR5X1VubGlzdGVkEAIqiwEKEkVET1RBUGxheWVy",
            "TU1SVHlwZRIgChxrX0VET1RBUGxheWVyTU1SVHlwZV9JbnZhbGlkEAASJgoi",
            "a19FRE9UQVBsYXllck1NUlR5cGVfR2VuZXJhbEhpZGRlbhABEisKJ2tfRURP",
            "VEFQbGF5ZXJNTVJUeXBlX0dlbmVyYWxDb21wZXRpdGl2ZRADKnMKEUVET1RB",
            "TU1SQm9vc3RUeXBlEhwKGGtfRURPVEFNTVJCb29zdFR5cGVfTm9uZRAAEh4K",
            "GmtfRURPVEFNTVJCb29zdFR5cGVfTGVhZGVyEAESIAoca19FRE9UQU1NUkJv",
            "b3N0VHlwZV9Gb2xsb3dlchACKtABCglNYXRjaFR5cGUSFQoRTUFUQ0hfVFlQ",
            "RV9DQVNVQUwQABIYChRNQVRDSF9UWVBFX0NPT1BfQk9UUxABEhoKFk1BVENI",
            "X1RZUEVfQ09NUEVUSVRJVkUQBBIeChpNQVRDSF9UWVBFX1dFRUtFTkRfVE9V",
            "Uk5FWRAFEhQKEE1BVENIX1RZUEVfRVZFTlQQBxIgChxNQVRDSF9UWVBFX0NP",
            "QUNIRVNfQ0hBTExFTkdFEAwSHgoaTUFUQ0hfVFlQRV9ORVdfUExBWUVSX1BP",
            "T0wQDiqcAgoRRE9UQUJvdERpZmZpY3VsdHkSGgoWQk9UX0RJRkZJQ1VMVFlf",
            "UEFTU0lWRRAAEhcKE0JPVF9ESUZGSUNVTFRZX0VBU1kQARIZChVCT1RfRElG",
            "RklDVUxUWV9NRURJVU0QAhIXChNCT1RfRElGRklDVUxUWV9IQVJEEAMSGQoV",
            "Qk9UX0RJRkZJQ1VMVFlfVU5GQUlSEAQSGgoWQk9UX0RJRkZJQ1VMVFlfSU5W",
            "QUxJRBAFEhkKFUJPVF9ESUZGSUNVTFRZX0VYVFJBMRAGEhkKFUJPVF9ESUZG",
            "SUNVTFRZX0VYVFJBMhAHEhkKFUJPVF9ESUZGSUNVTFRZX0VYVFJBMxAIEhYK",
            "EkJPVF9ESUZGSUNVTFRZX05QWBAJKq4GCg1ET1RBX0JPVF9NT0RFEhYKEkRP",
            "VEFfQk9UX01PREVfTk9ORRAAEhgKFERPVEFfQk9UX01PREVfTEFOSU5HEAES",
            "GAoURE9UQV9CT1RfTU9ERV9BVFRBQ0sQAhIWChJET1RBX0JPVF9NT0RFX1JP",
            "QU0QAxIZChVET1RBX0JPVF9NT0RFX1JFVFJFQVQQBBIdChlET1RBX0JPVF9N",
            "T0RFX1NFQ1JFVF9TSE9QEAUSGwoXRE9UQV9CT1RfTU9ERV9TSURFX1NIT1AQ",
            "BhIWChJET1RBX0JPVF9NT0RFX1JVTkUQBxIgChxET1RBX0JPVF9NT0RFX1BV",
            "U0hfVE9XRVJfVE9QEAgSIAocRE9UQV9CT1RfTU9ERV9QVVNIX1RPV0VSX01J",
            "RBAJEiAKHERPVEFfQk9UX01PREVfUFVTSF9UT1dFUl9CT1QQChIiCh5ET1RB",
            "X0JPVF9NT0RFX0RFRkVORF9UT1dFUl9UT1AQCxIiCh5ET1RBX0JPVF9NT0RF",
            "X0RFRkVORF9UT1dFUl9NSUQQDBIiCh5ET1RBX0JPVF9NT0RFX0RFRkVORF9U",
            "T1dFUl9CT1QQDRIaChZET1RBX0JPVF9NT0RFX0FTU0VNQkxFEA4SJgoiRE9U",
            "QV9CT1RfTU9ERV9BU1NFTUJMRV9XSVRIX0hVTUFOUxAPEhsKF0RPVEFfQk9U",
            "X01PREVfVEVBTV9ST0FNEBASFgoSRE9UQV9CT1RfTU9ERV9GQVJNEBESHQoZ",
            "RE9UQV9CT1RfTU9ERV9ERUZFTkRfQUxMWRASEiMKH0RPVEFfQk9UX01PREVf",
            "RVZBU0lWRV9NQU5FVVZFUlMQExIYChRET1RBX0JPVF9NT0RFX1JPU0hBThAU",
            "EhYKEkRPVEFfQk9UX01PREVfSVRFTRAVEhYKEkRPVEFfQk9UX01PREVfV0FS",
            "RBAWEhsKF0RPVEFfQk9UX01PREVfQ09NUEFOSU9OEBcSHwobRE9UQV9CT1Rf",
            "TU9ERV9UVVRPUklBTF9CT1NTEBgSGAoURE9UQV9CT1RfTU9ERV9NSU5JT04Q",
            "GRIZChVET1RBX0JPVF9NT0RFX09VVFBPU1QQGirzAQoOTWF0Y2hMYW5ndWFn",
            "ZXMSGgoWTUFUQ0hfTEFOR1VBR0VfSU5WQUxJRBAAEhoKFk1BVENIX0xBTkdV",
            "QUdFX0VOR0xJU0gQARIaChZNQVRDSF9MQU5HVUFHRV9SVVNTSUFOEAISGgoW",
            "TUFUQ0hfTEFOR1VBR0VfQ0hJTkVTRRADEhkKFU1BVENIX0xBTkdVQUdFX0tP",
            "UkVBThAEEhoKFk1BVENIX0xBTkdVQUdFX1NQQU5JU0gQBRIdChlNQVRDSF9M",
            "QU5HVUFHRV9QT1JUVUdVRVNFEAYSGwoXTUFUQ0hfTEFOR1VBR0VfRU5HTElT",
            "SDIQByrYAgoaRVRvdXJuZXlRdWV1ZURlYWRsaW5lU3RhdGUSJwoja19FVG91",
            "cm5leVF1ZXVlRGVhZGxpbmVTdGF0ZV9Ob3JtYWwQABInCiNrX0VUb3VybmV5",
            "UXVldWVEZWFkbGluZVN0YXRlX01pc3NlZBABEioKJmtfRVRvdXJuZXlRdWV1",
            "ZURlYWRsaW5lU3RhdGVfRXhwaXJlZE9LEAISKwona19FVG91cm5leVF1ZXVl",
            "RGVhZGxpbmVTdGF0ZV9TZWVraW5nQnllEAMSMgoua19FVG91cm5leVF1ZXVl",
            "RGVhZGxpbmVTdGF0ZV9FbGlnaWJsZUZvclJlZnVuZBAEEiwKH2tfRVRvdXJu",
            "ZXlRdWV1ZURlYWRsaW5lU3RhdGVfTkEQ////////////ARItCilrX0VUb3Vy",
            "bmV5UXVldWVEZWFkbGluZVN0YXRlX0V4cGlyaW5nU29vbhBlKtcFCg1FTWF0",
            "Y2hPdXRjb21lEhsKF2tfRU1hdGNoT3V0Y29tZV9Vbmtub3duEAASHgoaa19F",
            "TWF0Y2hPdXRjb21lX1JhZFZpY3RvcnkQAhIfChtrX0VNYXRjaE91dGNvbWVf",
            "RGlyZVZpY3RvcnkQAxIiCh5rX0VNYXRjaE91dGNvbWVfTmV1dHJhbFZpY3Rv",
            "cnkQBBIgChxrX0VNYXRjaE91dGNvbWVfTm9UZWFtV2lubmVyEAUSIgoea19F",
            "TWF0Y2hPdXRjb21lX0N1c3RvbTFWaWN0b3J5EAYSIgoea19FTWF0Y2hPdXRj",
            "b21lX0N1c3RvbTJWaWN0b3J5EAcSIgoea19FTWF0Y2hPdXRjb21lX0N1c3Rv",
            "bTNWaWN0b3J5EAgSIgoea19FTWF0Y2hPdXRjb21lX0N1c3RvbTRWaWN0b3J5",
            "EAkSIgoea19FTWF0Y2hPdXRjb21lX0N1c3RvbTVWaWN0b3J5EAoSIgoea19F",
            "TWF0Y2hPdXRjb21lX0N1c3RvbTZWaWN0b3J5EAsSIgoea19FTWF0Y2hPdXRj",
            "b21lX0N1c3RvbTdWaWN0b3J5EAwSIgoea19FTWF0Y2hPdXRjb21lX0N1c3Rv",
            "bThWaWN0b3J5EA0SMwova19FTWF0Y2hPdXRjb21lX05vdFNjb3JlZF9Qb29y",
            "TmV0d29ya0NvbmRpdGlvbnMQQBIkCiBrX0VNYXRjaE91dGNvbWVfTm90U2Nv",
            "cmVkX0xlYXZlchBBEikKJWtfRU1hdGNoT3V0Y29tZV9Ob3RTY29yZWRfU2Vy",
            "dmVyQ3Jhc2gQQhIqCiZrX0VNYXRjaE91dGNvbWVfTm90U2NvcmVkX05ldmVy",
            "U3RhcnRlZBBDEiYKImtfRU1hdGNoT3V0Y29tZV9Ob3RTY29yZWRfQ2FuY2Vs",
            "ZWQQRBIoCiRrX0VNYXRjaE91dGNvbWVfTm90U2NvcmVkX1N1c3BpY2lvdXMQ",
            "RSqGAQoJRUxhbmVUeXBlEhUKEUxBTkVfVFlQRV9VTktOT1dOEAASEgoOTEFO",
            "RV9UWVBFX1NBRkUQARIRCg1MQU5FX1RZUEVfT0ZGEAISEQoNTEFORV9UWVBF",
            "X01JRBADEhQKEExBTkVfVFlQRV9KVU5HTEUQBBISCg5MQU5FX1RZUEVfUk9B",
            "TRAFKtsFCgpFQmFkZ2VUeXBlEhgKFGtfRUJhZGdlVHlwZV9JbnZhbGlkEAAS",
            "HAoYa19FQmFkZ2VUeXBlX1RJN19NaWR3ZWVrEAESGwoXa19FQmFkZ2VUeXBl",
            "X1RJN19GaW5hbHMQAhIdChlrX0VCYWRnZVR5cGVfVEk3X0FsbEV2ZW50EAMS",
            "HAoYa19FQmFkZ2VUeXBlX1RJOF9NaWR3ZWVrEAQSGwoXa19FQmFkZ2VUeXBl",
            "X1RJOF9GaW5hbHMQBRIdChlrX0VCYWRnZVR5cGVfVEk4X0FsbEV2ZW50EAYS",
            "FQoRa19FQmFkZ2VUeXBlX1RJMTAQBxIiCh5rX0VCYWRnZVR5cGVfVEkxMV9Q",
            "bGF5b2Zmc0RheTEQCBIiCh5rX0VCYWRnZVR5cGVfVEkxMV9QbGF5b2Zmc0Rh",
            "eTIQCRIiCh5rX0VCYWRnZVR5cGVfVEkxMV9QbGF5b2Zmc0RheTMQChIiCh5r",
            "X0VCYWRnZVR5cGVfVEkxMV9QbGF5b2Zmc0RheTQQCxIjCh9rX0VCYWRnZVR5",
            "cGVfVEkxMV9GaW5hbHNXZWVrZW5kEAwSIgoea19FQmFkZ2VUeXBlX1RJMTJf",
            "UGxheW9mZnNEYXkxEA0SIgoea19FQmFkZ2VUeXBlX1RJMTJfUGxheW9mZnNE",
            "YXkyEA4SIgoea19FQmFkZ2VUeXBlX1RJMTJfUGxheW9mZnNEYXkzEA8SIwof",
            "a19FQmFkZ2VUeXBlX1RJMTJfRmluYWxzV2Vla2VuZBAQEh0KGWtfRUJhZGdl",
            "VHlwZV9USTEyX1NwZWNpYWwQERIgChxrX0VCYWRnZVR5cGVfVEkxM19GaW5h",
            "bHNEYXkxEBISIAoca19FQmFkZ2VUeXBlX1RJMTNfRmluYWxzRGF5MhATEiAK",
            "HGtfRUJhZGdlVHlwZV9USTEzX0ZpbmFsc0RheTMQFBIdChlrX0VCYWRnZVR5",
            "cGVfVEkxM19TcGVjaWFsEBUq1AEKDUVMZWFndWVTdGF0dXMSFwoTTEVBR1VF",
            "X1NUQVRVU19VTlNFVBAAEh0KGUxFQUdVRV9TVEFUVVNfVU5TVUJNSVRURUQQ",
            "ARIbChdMRUFHVUVfU1RBVFVTX1NVQk1JVFRFRBACEhoKFkxFQUdVRV9TVEFU",
            "VVNfQUNDRVBURUQQAxIaChZMRUFHVUVfU1RBVFVTX1JFSkVDVEVEEAQSGwoX",
            "TEVBR1VFX1NUQVRVU19DT05DTFVERUQQBRIZChVMRUFHVUVfU1RBVFVTX0RF",
            "TEVURUQQBiqyAQoNRUxlYWd1ZVJlZ2lvbhIXChNMRUFHVUVfUkVHSU9OX1VO",
            "U0VUEAASFAoQTEVBR1VFX1JFR0lPTl9OQRABEhQKEExFQUdVRV9SRUdJT05f",
            "U0EQAhIVChFMRUFHVUVfUkVHSU9OX1dFVRADEhUKEUxFQUdVRV9SRUdJT05f",
            "RUVVEAQSFwoTTEVBR1VFX1JFR0lPTl9DSElOQRAFEhUKEUxFQUdVRV9SRUdJ",
            "T05fU0VBEAYqrAIKC0VMZWFndWVUaWVyEhUKEUxFQUdVRV9USUVSX1VOU0VU",
            "EAASFwoTTEVBR1VFX1RJRVJfQU1BVEVVUhABEhwKGExFQUdVRV9USUVSX1BS",
            "T0ZFU1NJT05BTBACEhUKEUxFQUdVRV9USUVSX01JTk9SEAMSFQoRTEVBR1VF",
            "X1RJRVJfTUFKT1IQBBIdChlMRUFHVUVfVElFUl9JTlRFUk5BVElPTkFMEAUS",
            "HQoZTEVBR1VFX1RJRVJfRFBDX1FVQUxJRklFUhAGEiQKIExFQUdVRV9USUVS",
            "X0RQQ19MRUFHVUVfUVVBTElGSUVSEAcSGgoWTEVBR1VFX1RJRVJfRFBDX0xF",
            "QUdVRRAIEiEKHUxFQUdVRV9USUVSX0RQQ19MRUFHVUVfRklOQUxTEAkqfAoT",
            "RUxlYWd1ZVRpZXJDYXRlZ29yeRIgChxMRUFHVUVfVElFUl9DQVRFR09SWV9B",
            "TUFURVVSEAESJQohTEVBR1VFX1RJRVJfQ0FURUdPUllfUFJPRkVTU0lPTkFM",
            "EAISHAoYTEVBR1VFX1RJRVJfQ0FURUdPUllfRFBDEAMqWwoPRUxlYWd1ZURp",
            "dmlzaW9uEhkKFUxFQUdVRV9ESVZJU0lPTl9VTlNFVBAAEhUKEUxFQUdVRV9E",
            "SVZJU0lPTl9JEAESFgoSTEVBR1VFX0RJVklTSU9OX0lJEAIqqwEKGEVMZWFn",
            "dWVCcm9hZGNhc3RQcm92aWRlchIcChhMRUFHVUVfQlJPQURDQVNUX1VOS05P",
            "V04QABIaChZMRUFHVUVfQlJPQURDQVNUX1NURUFNEAESGwoXTEVBR1VFX0JS",
            "T0FEQ0FTVF9UV0lUQ0gQAhIcChhMRUFHVUVfQlJPQURDQVNUX1lPVVRVQkUQ",
            "AxIaChZMRUFHVUVfQlJPQURDQVNUX09USEVSEGQqhgEKDEVMZWFndWVQaGFz",
            "ZRIWChJMRUFHVUVfUEhBU0VfVU5TRVQQABIjCh9MRUFHVUVfUEhBU0VfUkVH",
            "SU9OQUxfUVVBTElGSUVSEAESHAoYTEVBR1VFX1BIQVNFX0dST1VQX1NUQUdF",
            "EAISGwoXTEVBR1VFX1BIQVNFX01BSU5fRVZFTlQQAyraDgoSRUxlYWd1ZUF1",
            "ZGl0QWN0aW9uEh8KG0xFQUdVRV9BVURJVF9BQ1RJT05fSU5WQUxJRBAAEiUK",
            "IUxFQUdVRV9BVURJVF9BQ1RJT05fTEVBR1VFX0NSRUFURRABEiMKH0xFQUdV",
            "RV9BVURJVF9BQ1RJT05fTEVBR1VFX0VESVQQAhIlCiFMRUFHVUVfQVVESVRf",
            "QUNUSU9OX0xFQUdVRV9ERUxFVEUQAxIoCiRMRUFHVUVfQVVESVRfQUNUSU9O",
            "X0xFQUdVRV9BRE1JTl9BREQQBBIrCidMRUFHVUVfQVVESVRfQUNUSU9OX0xF",
            "QUdVRV9BRE1JTl9SRVZPS0UQBRIsCihMRUFHVUVfQVVESVRfQUNUSU9OX0xF",
            "QUdVRV9BRE1JTl9QUk9NT1RFEAYSKQolTEVBR1VFX0FVRElUX0FDVElPTl9M",
            "RUFHVUVfU1RSRUFNX0FERBAHEiwKKExFQUdVRV9BVURJVF9BQ1RJT05fTEVB",
            "R1VFX1NUUkVBTV9SRU1PVkUQCBIsCihMRUFHVUVfQVVESVRfQUNUSU9OX0xF",
            "QUdVRV9JTUFHRV9VUERBVEVEEAkSLAooTEVBR1VFX0FVRElUX0FDVElPTl9M",
            "RUFHVUVfTUVTU0FHRV9BRERFRBAKEigKJExFQUdVRV9BVURJVF9BQ1RJT05f",
            "TEVBR1VFX1NVQk1JVFRFRBALEi0KKUxFQUdVRV9BVURJVF9BQ1RJT05fTEVB",
            "R1VFX1NFVF9QUklaRV9QT09MEAwSMgouTEVBR1VFX0FVRElUX0FDVElPTl9M",
            "RUFHVUVfQUREX1BSSVpFX1BPT0xfSVRFTRANEjUKMUxFQUdVRV9BVURJVF9B",
            "Q1RJT05fTEVBR1VFX1JFTU9WRV9QUklaRV9QT09MX0lURU0QDhIqCiZMRUFH",
            "VUVfQVVESVRfQUNUSU9OX0xFQUdVRV9NQVRDSF9TVEFSVBAPEigKJExFQUdV",
            "RV9BVURJVF9BQ1RJT05fTEVBR1VFX01BVENIX0VORBAQEi8KK0xFQUdVRV9B",
            "VURJVF9BQ1RJT05fTEVBR1VFX0FERF9JTlZJVEVEX1RFQU0QERIyCi5MRUFH",
            "VUVfQVVESVRfQUNUSU9OX0xFQUdVRV9SRU1PVkVfSU5WSVRFRF9URUFNEBIS",
            "LQopTEVBR1VFX0FVRElUX0FDVElPTl9MRUFHVUVfU1RBVFVTX0NIQU5HRUQQ",
            "ExIqCiZMRUFHVUVfQVVESVRfQUNUSU9OX0xFQUdVRV9TVFJFQU1fRURJVBAU",
            "EigKJExFQUdVRV9BVURJVF9BQ1RJT05fTEVBR1VFX1RFQU1fU1dBUBAVEigK",
            "JExFQUdVRV9BVURJVF9BQ1RJT05fTk9ERUdST1VQX0NSRUFURRBkEikKJUxF",
            "QUdVRV9BVURJVF9BQ1RJT05fTk9ERUdST1VQX0RFU1RST1kQZRIqCiZMRUFH",
            "VUVfQVVESVRfQUNUSU9OX05PREVHUk9VUF9BRERfVEVBTRBmEi0KKUxFQUdV",
            "RV9BVURJVF9BQ1RJT05fTk9ERUdST1VQX1JFTU9WRV9URUFNEGcSLworTEVB",
            "R1VFX0FVRElUX0FDVElPTl9OT0RFR1JPVVBfU0VUX0FEVkFOQ0lORxBoEiYK",
            "IkxFQUdVRV9BVURJVF9BQ1RJT05fTk9ERUdST1VQX0VESVQQaRIqCiZMRUFH",
            "VUVfQVVESVRfQUNUSU9OX05PREVHUk9VUF9QT1BVTEFURRBqEisKJ0xFQUdV",
            "RV9BVURJVF9BQ1RJT05fTk9ERUdST1VQX0NPTVBMRVRFRBBrEjkKNUxFQUdV",
            "RV9BVURJVF9BQ1RJT05fTk9ERUdST1VQX1NFVF9TRUNPTkRBUllfQURWQU5D",
            "SU5HEGwSOAo0TEVBR1VFX0FVRElUX0FDVElPTl9OT0RFR1JPVVBfU0VUX1RF",
            "UlRJQVJZX0FEVkFOQ0lORxBtEiQKH0xFQUdVRV9BVURJVF9BQ1RJT05fTk9E",
            "RV9DUkVBVEUQyAESJQogTEVBR1VFX0FVRElUX0FDVElPTl9OT0RFX0RFU1RS",
            "T1kQyQESKAojTEVBR1VFX0FVRElUX0FDVElPTl9OT0RFX0FVVE9DUkVBVEUQ",
            "ygESJgohTEVBR1VFX0FVRElUX0FDVElPTl9OT0RFX1NFVF9URUFNEMsBEisK",
            "JkxFQUdVRV9BVURJVF9BQ1RJT05fTk9ERV9TRVRfU0VSSUVTX0lEEMwBEisK",
            "JkxFQUdVRV9BVURJVF9BQ1RJT05fTk9ERV9TRVRfQURWQU5DSU5HEM0BEiYK",
            "IUxFQUdVRV9BVURJVF9BQ1RJT05fTk9ERV9TRVRfVElNRRDOARItCihMRUFH",
            "VUVfQVVESVRfQUNUSU9OX05PREVfTUFUQ0hfQ09NUExFVEVEEM8BEicKIkxF",
            "QUdVRV9BVURJVF9BQ1RJT05fTk9ERV9DT01QTEVURUQQ0AESIgodTEVBR1VF",
            "X0FVRElUX0FDVElPTl9OT0RFX0VESVQQ0QEqjwwKFERPVEFfQ09NQkFUTE9H",
            "X1RZUEVTEiMKFkRPVEFfQ09NQkFUTE9HX0lOVkFMSUQQ////////////ARIZ",
            "ChVET1RBX0NPTUJBVExPR19EQU1BR0UQABIXChNET1RBX0NPTUJBVExPR19I",
            "RUFMEAESHwobRE9UQV9DT01CQVRMT0dfTU9ESUZJRVJfQUREEAISIgoeRE9U",
            "QV9DT01CQVRMT0dfTU9ESUZJRVJfUkVNT1ZFEAMSGAoURE9UQV9DT01CQVRM",
            "T0dfREVBVEgQBBIaChZET1RBX0NPTUJBVExPR19BQklMSVRZEAUSFwoTRE9U",
            "QV9DT01CQVRMT0dfSVRFTRAGEhsKF0RPVEFfQ09NQkFUTE9HX0xPQ0FUSU9O",
            "EAcSFwoTRE9UQV9DT01CQVRMT0dfR09MRBAIEh0KGURPVEFfQ09NQkFUTE9H",
            "X0dBTUVfU1RBVEUQCRIVChFET1RBX0NPTUJBVExPR19YUBAKEhsKF0RPVEFf",
            "Q09NQkFUTE9HX1BVUkNIQVNFEAsSGgoWRE9UQV9DT01CQVRMT0dfQlVZQkFD",
            "SxAMEiIKHkRPVEFfQ09NQkFUTE9HX0FCSUxJVFlfVFJJR0dFUhANEh4KGkRP",
            "VEFfQ09NQkFUTE9HX1BMQVlFUlNUQVRTEA4SHAoYRE9UQV9DT01CQVRMT0df",
            "TVVMVElLSUxMEA8SHQoZRE9UQV9DT01CQVRMT0dfS0lMTFNUUkVBSxAQEiUK",
            "IURPVEFfQ09NQkFUTE9HX1RFQU1fQlVJTERJTkdfS0lMTBAREh4KGkRPVEFf",
            "Q09NQkFUTE9HX0ZJUlNUX0JMT09EEBISJwojRE9UQV9DT01CQVRMT0dfTU9E",
            "SUZJRVJfU1RBQ0tfRVZFTlQQExIlCiFET1RBX0NPTUJBVExPR19ORVVUUkFM",
            "X0NBTVBfU1RBQ0sQFBIeChpET1RBX0NPTUJBVExPR19QSUNLVVBfUlVORRAV",
            "EiUKIURPVEFfQ09NQkFUTE9HX1JFVkVBTEVEX0lOVklTSUJMRRAWEh0KGURP",
            "VEFfQ09NQkFUTE9HX0hFUk9fU0FWRUQQFxIgChxET1RBX0NPTUJBVExPR19N",
            "QU5BX1JFU1RPUkVEEBgSHwobRE9UQV9DT01CQVRMT0dfSEVST19MRVZFTFVQ",
            "EBkSIwofRE9UQV9DT01CQVRMT0dfQk9UVExFX0hFQUxfQUxMWRAaEiAKHERP",
            "VEFfQ09NQkFUTE9HX0VOREdBTUVfU1RBVFMQGxIkCiBET1RBX0NPTUJBVExP",
            "R19JTlRFUlJVUFRfQ0hBTk5FTBAcEh4KGkRPVEFfQ09NQkFUTE9HX0FMTElF",
            "RF9HT0xEEB0SHgoaRE9UQV9DT01CQVRMT0dfQUVHSVNfVEFLRU4QHhIeChpE",
            "T1RBX0NPTUJBVExPR19NQU5BX0RBTUFHRRAfEiwKKERPVEFfQ09NQkFUTE9H",
            "X1BIWVNJQ0FMX0RBTUFHRV9QUkVWRU5URUQQIBIgChxET1RBX0NPTUJBVExP",
            "R19VTklUX1NVTU1PTkVEECESHwobRE9UQV9DT01CQVRMT0dfQVRUQUNLX0VW",
            "QURFECISGwoXRE9UQV9DT01CQVRMT0dfVFJFRV9DVVQQIxIiCh5ET1RBX0NP",
            "TUJBVExPR19TVUNDRVNTRlVMX1NDQU4QJBIhCh1ET1RBX0NPTUJBVExPR19F",
            "TkRfS0lMTFNUUkVBSxAlEiQKIERPVEFfQ09NQkFUTE9HX0JMT09EU1RPTkVf",
            "Q0hBUkdFECYSIgoeRE9UQV9DT01CQVRMT0dfQ1JJVElDQUxfREFNQUdFECcS",
            "HwobRE9UQV9DT01CQVRMT0dfU1BFTExfQUJTT1JCECgSIgoeRE9UQV9DT01C",
            "QVRMT0dfVU5JVF9URUxFUE9SVEVEECkSIwofRE9UQV9DT01CQVRMT0dfS0lM",
            "TF9FQVRFUl9FVkVOVBAqEiYKIkRPVEFfQ09NQkFUTE9HX05FVVRSQUxfSVRF",
            "TV9FQVJORUQQKxImCiJET1RBX0NPTUJBVExPR19TVEFUX1RSQUNLRVJfUExB",
            "WUVSECwqdQoQRURQQ0Zhdm9yaXRlVHlwZRIVChFGQVZPUklURV9UWVBFX0FM",
            "TBAAEhgKFEZBVk9SSVRFX1RZUEVfUExBWUVSEAESFgoSRkFWT1JJVEVfVFlQ",
            "RV9URUFNEAISGAoURkFWT1JJVEVfVFlQRV9MRUFHVUUQAyqoBAoURURQQ1B1",
            "c2hOb3RpZmljYXRpb24SKAokRFBDX1BVU0hfTk9USUZJQ0FUSU9OX01BVENI",
            "X1NUQVJUSU5HEAESKgomRFBDX1BVU0hfTk9USUZJQ0FUSU9OX1BMQVlFUl9M",
            "RUZUX1RFQU0QChIsCihEUENfUFVTSF9OT1RJRklDQVRJT05fUExBWUVSX0pP",
            "SU5FRF9URUFNEAsSNQoxRFBDX1BVU0hfTk9USUZJQ0FUSU9OX1BMQVlFUl9K",
            "T0lORURfVEVBTV9BU19DT0FDSBAMEjMKL0RQQ19QVVNIX05PVElGSUNBVElP",
            "Tl9QTEFZRVJfTEVGVF9URUFNX0FTX0NPQUNIEA0SJwojRFBDX1BVU0hfTk9U",
            "SUZJQ0FUSU9OX0xFQUdVRV9SRVNVTFQQFBI2CjJEUENfUFVTSF9OT1RJRklD",
            "QVRJT05fUFJFRElDVElPTl9NQVRDSEVTX0FWQUlMQUJMRRAeEisKJ0RQQ19Q",
            "VVNIX05PVElGSUNBVElPTl9QUkVESUNUSU9OX1JFU1VMVBAfEjAKLERQQ19Q",
            "VVNIX05PVElGSUNBVElPTl9GQU5UQVNZX1BMQVlFUl9DTEVBUkVEECgSLwor",
            "RFBDX1BVU0hfTk9USUZJQ0FUSU9OX0ZBTlRBU1lfREFJTFlfU1VNTUFSWRAp",
            "Ei8KK0RQQ19QVVNIX05PVElGSUNBVElPTl9GQU5UQVNZX0ZJTkFMX1JFU1VM",
            "VFMQKipZChVFRXZlbnRBY3Rpb25TY29yZU1vZGUSHwoba19lRXZlbnRBY3Rp",
            "b25TY29yZU1vZGVfQWRkEAASHwoba19lRXZlbnRBY3Rpb25TY29yZU1vZGVf",
            "TWluEAEqzgIKG0VQbGF5ZXJDaGFsbGVuZ2VIaXN0b3J5VHlwZRIpCiVrX0VQ",
            "bGF5ZXJDaGFsbGVuZ2VIaXN0b3J5VHlwZV9JbnZhbGlkEAASKwona19FUGxh",
            "eWVyQ2hhbGxlbmdlSGlzdG9yeVR5cGVfS2lsbEVhdGVyEAESLwora19FUGxh",
            "eWVyQ2hhbGxlbmdlSGlzdG9yeVR5cGVfRG90YVBsdXNSZWxpYxACEj0KOWtf",
            "RVBsYXllckNoYWxsZW5nZUhpc3RvcnlUeXBlX0RvdGFQbHVzSGVyb1BsYXll",
            "ckNoYWxsZW5nZRADEjYKMmtfRVBsYXllckNoYWxsZW5nZUhpc3RvcnlUeXBl",
            "X0luR2FtZUV2ZW50Q2hhbGxlbmdlEAQSLwora19FUGxheWVyQ2hhbGxlbmdl",
            "SGlzdG9yeVR5cGVfR3VpbGRDb250cmFjdBAFKoYCChZFT3ZlcndhdGNoUmVw",
            "b3J0UmVhc29uEiQKIGtfRU92ZXJ3YXRjaFJlcG9ydFJlYXNvbl9Vbmtub3du",
            "EAASJQoha19FT3ZlcndhdGNoUmVwb3J0UmVhc29uX0NoZWF0aW5nEAESJAog",
            "a19FT3ZlcndhdGNoUmVwb3J0UmVhc29uX0ZlZWRpbmcQAhIlCiFrX0VPdmVy",
            "d2F0Y2hSZXBvcnRSZWFzb25fR3JpZWZpbmcQAxInCiNrX0VPdmVyd2F0Y2hS",
            "ZXBvcnRSZWFzb25fU3VzcGljaW91cxAEEikKJWtfRU92ZXJ3YXRjaFJlcG9y",
            "dFJlYXNvbl9BYmlsaXR5QWJ1c2UQBSq1AQoRRUNhbmR5U2hvcFVwZ3JhZGUS",
            "Jwoaa19FQ2FuZHlTaG9wVXBncmFkZUludmFsaWQQ////////////ARIlCiFr",
            "X0VDYW5keVNob3BVcGdyYWRlX0ludmVudG9yeVNpemUQABIjCh9rX0VDYW5k",
            "eVNob3BVcGdyYWRlX1Jld2FyZFNoZWxmEAESKwona19FQ2FuZHlTaG9wVXBn",
            "cmFkZV9FeHRyYUV4Y2hhbmdlUmVjaXBlEAIqhgEKFkVJdGVtU3VnZ2VzdFBy",
            "ZWZlcmVuY2USIQoda19FSXRlbVN1Z2dlc3RQcmVmZXJlbmNlX05vbmUQABIi",
            "Ch5rX0VJdGVtU3VnZ2VzdFByZWZlcmVuY2VfTGlrZWQQARIlCiFrX0VJdGVt",
            "U3VnZ2VzdFByZWZlcmVuY2VfRGlzbGlrZWQQAiq3AQoPRVRpbWVyQWxlcnRU",
            "eXBlEh4KGmtfVGltZXJBbGVydFR5cGVfUG93ZXJSdW5lEAESHwoba19UaW1l",
            "ckFsZXJ0VHlwZV9Cb3VudHlSdW5lEAISIQoda19UaW1lckFsZXJ0VHlwZV9X",
            "aXNkb21TaHJpbmUQAxIgChxrX1RpbWVyQWxlcnRUeXBlX0p1bmdsZUNhbXBz",
            "EAQSHgoaa19UaW1lckFsZXJ0VHlwZV9Mb3R1c1Bvb2wQBUIVqgISU3RlYW0u",
            "UHJvdG9zLkRvdGEy"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Steam.Protos.Dota2.DOTA_GameMode), typeof(global::Steam.Protos.Dota2.DOTA_GameState), typeof(global::Steam.Protos.Dota2.DOTA_GC_TEAM), typeof(global::Steam.Protos.Dota2.EEvent), typeof(global::Steam.Protos.Dota2.ERankType), typeof(global::Steam.Protos.Dota2.DOTALeaverStatus_t), typeof(global::Steam.Protos.Dota2.DOTAConnectionState_t), typeof(global::Steam.Protos.Dota2.Fantasy_Roles), typeof(global::Steam.Protos.Dota2.Fantasy_Scoring), typeof(global::Steam.Protos.Dota2.Fantasy_Team_Slots), typeof(global::Steam.Protos.Dota2.Fantasy_Selection_Mode), typeof(global::Steam.Protos.Dota2.Fantasy_Gem_Type), typeof(global::Steam.Protos.Dota2.DOTAChatChannelType_t), typeof(global::Steam.Protos.Dota2.EChatSpecialPrivileges), typeof(global::Steam.Protos.Dota2.DOTACommType_t), typeof(global::Steam.Protos.Dota2.DOTACommLevel_t), typeof(global::Steam.Protos.Dota2.DOTABehaviorLevel_t), typeof(global::Steam.Protos.Dota2.EProfileCardSlotType), typeof(global::Steam.Protos.Dota2.EMatchGroupServerStatus), typeof(global::Steam.Protos.Dota2.DOTA_CM_PICK), typeof(global::Steam.Protos.Dota2.DOTALowPriorityBanType), typeof(global::Steam.Protos.Dota2.DOTALobbyReadyState), typeof(global::Steam.Protos.Dota2.DOTAJoinLobbyResult), typeof(global::Steam.Protos.Dota2.DOTASelectionPriorityRules), typeof(global::Steam.Protos.Dota2.DOTASelectionPriorityChoice), typeof(global::Steam.Protos.Dota2.DOTAMatchVote), typeof(global::Steam.Protos.Dota2.DOTALobbyVisibility), typeof(global::Steam.Protos.Dota2.EDOTAPlayerMMRType), typeof(global::Steam.Protos.Dota2.EDOTAMMRBoostType), typeof(global::Steam.Protos.Dota2.MatchType), typeof(global::Steam.Protos.Dota2.DOTABotDifficulty), typeof(global::Steam.Protos.Dota2.DOTA_BOT_MODE), typeof(global::Steam.Protos.Dota2.MatchLanguages), typeof(global::Steam.Protos.Dota2.ETourneyQueueDeadlineState), typeof(global::Steam.Protos.Dota2.EMatchOutcome), typeof(global::Steam.Protos.Dota2.ELaneType), typeof(global::Steam.Protos.Dota2.EBadgeType), typeof(global::Steam.Protos.Dota2.ELeagueStatus), typeof(global::Steam.Protos.Dota2.ELeagueRegion), typeof(global::Steam.Protos.Dota2.ELeagueTier), typeof(global::Steam.Protos.Dota2.ELeagueTierCategory), typeof(global::Steam.Protos.Dota2.ELeagueDivision), typeof(global::Steam.Protos.Dota2.ELeagueBroadcastProvider), typeof(global::Steam.Protos.Dota2.ELeaguePhase), typeof(global::Steam.Protos.Dota2.ELeagueAuditAction), typeof(global::Steam.Protos.Dota2.DOTA_COMBATLOG_TYPES), typeof(global::Steam.Protos.Dota2.EDPCFavoriteType), typeof(global::Steam.Protos.Dota2.EDPCPushNotification), typeof(global::Steam.Protos.Dota2.EEventActionScoreMode), typeof(global::Steam.Protos.Dota2.EPlayerChallengeHistoryType), typeof(global::Steam.Protos.Dota2.EOverwatchReportReason), typeof(global::Steam.Protos.Dota2.ECandyShopUpgrade), typeof(global::Steam.Protos.Dota2.EItemSuggestPreference), typeof(global::Steam.Protos.Dota2.ETimerAlertType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAClientHardwareSpecs), global::Steam.Protos.Dota2.CDOTAClientHardwareSpecs.Parser, new[]{ "LogicalProcessors", "CpuCyclesPerSecond", "TotalPhysicalMemory", "Is64BitOs", "UploadMeasurement", "PreferNotHost", "Crc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTASaveGame), global::Steam.Protos.Dota2.CDOTASaveGame.Parser, new[]{ "MatchId", "SaveTime", "Players", "SaveInstances" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTASaveGame.Types.Player), global::Steam.Protos.Dota2.CDOTASaveGame.Types.Player.Parser, new[]{ "Team", "Name", "Hero" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance), global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance.Parser, new[]{ "GameTime", "Team1Score", "Team2Score", "PlayerPositions", "SaveId", "SaveTime" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance.Types.PlayerPositions), global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance.Types.PlayerPositions.Parser, new[]{ "X", "Y" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry), global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry.Parser, new[]{ "Type", "TargetName", "TargetSourceName", "AttackerName", "DamageSourceName", "InflictorName", "IsAttackerIllusion", "IsAttackerHero", "IsTargetIllusion", "IsTargetHero", "IsVisibleRadiant", "IsVisibleDire", "Value", "Health", "Timestamp", "StunDuration", "SlowDuration", "IsAbilityToggleOn", "IsAbilityToggleOff", "AbilityLevel", "LocationX", "LocationY", "GoldReason", "TimestampRaw", "ModifierDuration", "XpReason", "LastHits", "AttackerTeam", "TargetTeam", "ObsWardsPlaced", "AssistPlayer0", "AssistPlayer1", "AssistPlayer2", "AssistPlayer3", "StackCount", "HiddenModifier", "IsTargetBuilding", "NeutralCampType", "RuneType", "AssistPlayers", "IsHealSave", "IsUltimateAbility", "AttackerHeroLevel", "TargetHeroLevel", "Xpm", "Gpm", "EventLocation", "TargetIsSelf", "DamageType", "InvisibilityModifier", "DamageCategory", "Networth", "BuildingType", "ModifierElapsedDuration", "SilenceModifier", "HealFromLifesteal", "ModifierPurged", "SpellEvaded", "MotionControllerModifier", "LongRangeKill", "ModifierPurgeAbility", "ModifierPurgeNpc", "RootModifier", "TotalUnitDeathCount", "AuraModifier", "ArmorDebuffModifier", "NoPhysicalDamageModifier", "ModifierAbility", "ModifierHidden", "InflictorIsStolenAbility", "KillEaterEvent", "UnitStatusLabel", "SpellGeneratedAttack", "AtNightTime", "AttackerHasScepter", "NeutralCampTeam", "RegeneratedHealth", "WillReincarnate", "UsesCharges", "TrackedStatId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgPendingEventAward), global::Steam.Protos.Dota2.CMsgPendingEventAward.Parser, new[]{ "EventId", "ActionId", "NumToGrant", "ScoreMode", "AuditAction", "AuditData" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DOTA_GameMode {
    [pbr::OriginalName("DOTA_GAMEMODE_NONE")] None = 0,
    [pbr::OriginalName("DOTA_GAMEMODE_AP")] Ap = 1,
    [pbr::OriginalName("DOTA_GAMEMODE_CM")] Cm = 2,
    [pbr::OriginalName("DOTA_GAMEMODE_RD")] Rd = 3,
    [pbr::OriginalName("DOTA_GAMEMODE_SD")] Sd = 4,
    [pbr::OriginalName("DOTA_GAMEMODE_AR")] Ar = 5,
    [pbr::OriginalName("DOTA_GAMEMODE_INTRO")] Intro = 6,
    [pbr::OriginalName("DOTA_GAMEMODE_HW")] Hw = 7,
    [pbr::OriginalName("DOTA_GAMEMODE_REVERSE_CM")] ReverseCm = 8,
    [pbr::OriginalName("DOTA_GAMEMODE_XMAS")] Xmas = 9,
    [pbr::OriginalName("DOTA_GAMEMODE_TUTORIAL")] Tutorial = 10,
    [pbr::OriginalName("DOTA_GAMEMODE_MO")] Mo = 11,
    [pbr::OriginalName("DOTA_GAMEMODE_LP")] Lp = 12,
    [pbr::OriginalName("DOTA_GAMEMODE_POOL1")] Pool1 = 13,
    [pbr::OriginalName("DOTA_GAMEMODE_FH")] Fh = 14,
    [pbr::OriginalName("DOTA_GAMEMODE_CUSTOM")] Custom = 15,
    [pbr::OriginalName("DOTA_GAMEMODE_CD")] Cd = 16,
    [pbr::OriginalName("DOTA_GAMEMODE_BD")] Bd = 17,
    [pbr::OriginalName("DOTA_GAMEMODE_ABILITY_DRAFT")] AbilityDraft = 18,
    [pbr::OriginalName("DOTA_GAMEMODE_EVENT")] Event = 19,
    [pbr::OriginalName("DOTA_GAMEMODE_ARDM")] Ardm = 20,
    [pbr::OriginalName("DOTA_GAMEMODE_1V1MID")] _1V1Mid = 21,
    [pbr::OriginalName("DOTA_GAMEMODE_ALL_DRAFT")] AllDraft = 22,
    [pbr::OriginalName("DOTA_GAMEMODE_TURBO")] Turbo = 23,
    [pbr::OriginalName("DOTA_GAMEMODE_MUTATION")] Mutation = 24,
    [pbr::OriginalName("DOTA_GAMEMODE_COACHES_CHALLENGE")] CoachesChallenge = 25,
  }

  public enum DOTA_GameState {
    [pbr::OriginalName("DOTA_GAMERULES_STATE_INIT")] DotaGamerulesStateInit = 0,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD")] DotaGamerulesStateWaitForPlayersToLoad = 1,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_HERO_SELECTION")] DotaGamerulesStateHeroSelection = 2,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_STRATEGY_TIME")] DotaGamerulesStateStrategyTime = 3,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_PRE_GAME")] DotaGamerulesStatePreGame = 4,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_GAME_IN_PROGRESS")] DotaGamerulesStateGameInProgress = 5,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_POST_GAME")] DotaGamerulesStatePostGame = 6,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_DISCONNECT")] DotaGamerulesStateDisconnect = 7,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_TEAM_SHOWCASE")] DotaGamerulesStateTeamShowcase = 8,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP")] DotaGamerulesStateCustomGameSetup = 9,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD")] DotaGamerulesStateWaitForMapToLoad = 10,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_SCENARIO_SETUP")] DotaGamerulesStateScenarioSetup = 11,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_PLAYER_DRAFT")] DotaGamerulesStatePlayerDraft = 12,
    [pbr::OriginalName("DOTA_GAMERULES_STATE_LAST")] DotaGamerulesStateLast = 13,
  }

  public enum DOTA_GC_TEAM {
    [pbr::OriginalName("DOTA_GC_TEAM_GOOD_GUYS")] GoodGuys = 0,
    [pbr::OriginalName("DOTA_GC_TEAM_BAD_GUYS")] BadGuys = 1,
    [pbr::OriginalName("DOTA_GC_TEAM_BROADCASTER")] Broadcaster = 2,
    [pbr::OriginalName("DOTA_GC_TEAM_SPECTATOR")] Spectator = 3,
    [pbr::OriginalName("DOTA_GC_TEAM_PLAYER_POOL")] PlayerPool = 4,
    [pbr::OriginalName("DOTA_GC_TEAM_NOTEAM")] Noteam = 5,
    [pbr::OriginalName("DOTA_GC_TEAM_CUSTOM_1")] Custom1 = 6,
    [pbr::OriginalName("DOTA_GC_TEAM_CUSTOM_2")] Custom2 = 7,
    [pbr::OriginalName("DOTA_GC_TEAM_CUSTOM_3")] Custom3 = 8,
    [pbr::OriginalName("DOTA_GC_TEAM_CUSTOM_4")] Custom4 = 9,
    [pbr::OriginalName("DOTA_GC_TEAM_CUSTOM_5")] Custom5 = 10,
    [pbr::OriginalName("DOTA_GC_TEAM_CUSTOM_6")] Custom6 = 11,
    [pbr::OriginalName("DOTA_GC_TEAM_CUSTOM_7")] Custom7 = 12,
    [pbr::OriginalName("DOTA_GC_TEAM_CUSTOM_8")] Custom8 = 13,
    [pbr::OriginalName("DOTA_GC_TEAM_NEUTRALS")] Neutrals = 14,
  }

  public enum EEvent {
    [pbr::OriginalName("EVENT_ID_NONE")] EventIdNone = 0,
    [pbr::OriginalName("EVENT_ID_DIRETIDE")] EventIdDiretide = 1,
    [pbr::OriginalName("EVENT_ID_SPRING_FESTIVAL")] EventIdSpringFestival = 2,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS_2013")] EventIdFrostivus2013 = 3,
    [pbr::OriginalName("EVENT_ID_COMPENDIUM_2014")] EventIdCompendium2014 = 4,
    [pbr::OriginalName("EVENT_ID_NEXON_PC_BANG")] EventIdNexonPcBang = 5,
    [pbr::OriginalName("EVENT_ID_PWRD_DAC_2015")] EventIdPwrdDac2015 = 6,
    [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2015")] EventIdNewBloom2015 = 7,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2015")] EventIdInternational2015 = 8,
    [pbr::OriginalName("EVENT_ID_FALL_MAJOR_2015")] EventIdFallMajor2015 = 9,
    [pbr::OriginalName("EVENT_ID_ORACLE_PA")] EventIdOraclePa = 10,
    [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2015_PREBEAST")] EventIdNewBloom2015Prebeast = 11,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS")] EventIdFrostivus = 12,
    [pbr::OriginalName("EVENT_ID_WINTER_MAJOR_2016")] EventIdWinterMajor2016 = 13,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2016")] EventIdInternational2016 = 14,
    [pbr::OriginalName("EVENT_ID_FALL_MAJOR_2016")] EventIdFallMajor2016 = 15,
    [pbr::OriginalName("EVENT_ID_WINTER_MAJOR_2017")] EventIdWinterMajor2017 = 16,
    [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2017")] EventIdNewBloom2017 = 17,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2017")] EventIdInternational2017 = 18,
    [pbr::OriginalName("EVENT_ID_PLUS_SUBSCRIPTION")] EventIdPlusSubscription = 19,
    [pbr::OriginalName("EVENT_ID_SINGLES_DAY_2017")] EventIdSinglesDay2017 = 20,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS_2017")] EventIdFrostivus2017 = 21,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2018")] EventIdInternational2018 = 22,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS_2018")] EventIdFrostivus2018 = 23,
    [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2019")] EventIdNewBloom2019 = 24,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2019")] EventIdInternational2019 = 25,
    [pbr::OriginalName("EVENT_ID_NEW_PLAYER_EXPERIENCE")] EventIdNewPlayerExperience = 26,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS_2019")] EventIdFrostivus2019 = 27,
    [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2020")] EventIdNewBloom2020 = 28,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2020")] EventIdInternational2020 = 29,
    [pbr::OriginalName("EVENT_ID_TEAM_FANDOM")] EventIdTeamFandom = 30,
    [pbr::OriginalName("EVENT_ID_DIRETIDE_2020")] EventIdDiretide2020 = 31,
    [pbr::OriginalName("EVENT_ID_SPRING_2021")] EventIdSpring2021 = 32,
    [pbr::OriginalName("EVENT_ID_FALL_2021")] EventIdFall2021 = 33,
    [pbr::OriginalName("EVENT_ID_TEAM_FANDOM_FALL_2021")] EventIdTeamFandomFall2021 = 34,
    [pbr::OriginalName("EVENT_ID_TEAM_2021_2022_TOUR2")] EventIdTeam20212022Tour2 = 35,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2022")] EventIdInternational2022 = 36,
    [pbr::OriginalName("EVENT_ID_TEAM_2021_2022_TOUR3")] EventIdTeam20212022Tour3 = 37,
    [pbr::OriginalName("EVENT_ID_TEAM_INTERNATIONAL_2022")] EventIdTeamInternational2022 = 38,
    [pbr::OriginalName("EVENT_ID_PERMANENT_GRANTS")] EventIdPermanentGrants = 39,
    [pbr::OriginalName("EVENT_ID_MUERTA_RELEASE_SPRING2023")] EventIdMuertaReleaseSpring2023 = 40,
    [pbr::OriginalName("EVENT_ID_TEAM_2023_TOUR1")] EventIdTeam2023Tour1 = 41,
    [pbr::OriginalName("EVENT_ID_TEAM_2023_TOUR2")] EventIdTeam2023Tour2 = 42,
    [pbr::OriginalName("EVENT_ID_TEAM_2023_TOUR3")] EventIdTeam2023Tour3 = 43,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2023")] EventIdInternational2023 = 45,
    [pbr::OriginalName("EVENT_ID_10TH_ANNIVERSARY")] EventId10ThAnniversary = 46,
    [pbr::OriginalName("EVENT_ID_CROWNFALL")] EventIdCrownfall = 47,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS_2023")] EventIdFrostivus2023 = 48,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2024")] EventIdInternational2024 = 49,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS_2024")] EventIdFrostivus2024 = 50,
  }

  public enum ERankType {
    [pbr::OriginalName("k_ERankType_Invalid")] KErankTypeInvalid = 0,
    [pbr::OriginalName("k_ERankType_Casual")] KErankTypeCasual = 1,
    [pbr::OriginalName("k_ERankType_Ranked")] KErankTypeRanked = 2,
    [pbr::OriginalName("k_ERankType_CasualLegacy")] KErankTypeCasualLegacy = 3,
    [pbr::OriginalName("k_ERankType_RankedLegacy")] KErankTypeRankedLegacy = 4,
    [pbr::OriginalName("k_ERankType_CasualGlicko")] KErankTypeCasualGlicko = 5,
    [pbr::OriginalName("k_ERankType_RankedGlicko")] KErankTypeRankedGlicko = 6,
    [pbr::OriginalName("k_ERankType_RankMax")] KErankTypeRankMax = 7,
    [pbr::OriginalName("k_ERankType_BehaviorPrivate")] KErankTypeBehaviorPrivate = 100,
    [pbr::OriginalName("k_ERankType_BehaviorPublic")] KErankTypeBehaviorPublic = 101,
    [pbr::OriginalName("k_ERankType_Max")] KErankTypeMax = 102,
  }

  public enum DOTALeaverStatus_t {
    [pbr::OriginalName("DOTA_LEAVER_NONE")] DotaLeaverNone = 0,
    [pbr::OriginalName("DOTA_LEAVER_DISCONNECTED")] DotaLeaverDisconnected = 1,
    [pbr::OriginalName("DOTA_LEAVER_DISCONNECTED_TOO_LONG")] DotaLeaverDisconnectedTooLong = 2,
    [pbr::OriginalName("DOTA_LEAVER_ABANDONED")] DotaLeaverAbandoned = 3,
    [pbr::OriginalName("DOTA_LEAVER_AFK")] DotaLeaverAfk = 4,
    [pbr::OriginalName("DOTA_LEAVER_NEVER_CONNECTED")] DotaLeaverNeverConnected = 5,
    [pbr::OriginalName("DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG")] DotaLeaverNeverConnectedTooLong = 6,
    [pbr::OriginalName("DOTA_LEAVER_FAILED_TO_READY_UP")] DotaLeaverFailedToReadyUp = 7,
    [pbr::OriginalName("DOTA_LEAVER_DECLINED")] DotaLeaverDeclined = 8,
    [pbr::OriginalName("DOTA_LEAVER_DECLINED_REQUEUE")] DotaLeaverDeclinedRequeue = 9,
  }

  public enum DOTAConnectionState_t {
    [pbr::OriginalName("DOTA_CONNECTION_STATE_UNKNOWN")] DotaConnectionStateUnknown = 0,
    [pbr::OriginalName("DOTA_CONNECTION_STATE_NOT_YET_CONNECTED")] DotaConnectionStateNotYetConnected = 1,
    [pbr::OriginalName("DOTA_CONNECTION_STATE_CONNECTED")] DotaConnectionStateConnected = 2,
    [pbr::OriginalName("DOTA_CONNECTION_STATE_DISCONNECTED")] DotaConnectionStateDisconnected = 3,
    [pbr::OriginalName("DOTA_CONNECTION_STATE_ABANDONED")] DotaConnectionStateAbandoned = 4,
    [pbr::OriginalName("DOTA_CONNECTION_STATE_LOADING")] DotaConnectionStateLoading = 5,
    [pbr::OriginalName("DOTA_CONNECTION_STATE_FAILED")] DotaConnectionStateFailed = 6,
  }

  public enum Fantasy_Roles {
    [pbr::OriginalName("FANTASY_ROLE_UNDEFINED")] FantasyRoleUndefined = 0,
    [pbr::OriginalName("FANTASY_ROLE_CORE")] FantasyRoleCore = 1,
    [pbr::OriginalName("FANTASY_ROLE_SUPPORT")] Upport = 2,
    [pbr::OriginalName("FANTASY_ROLE_OFFLANE")] FantasyRoleOfflane = 3,
    [pbr::OriginalName("FANTASY_ROLE_MID")] FantasyRoleMid = 4,
  }

  public enum Fantasy_Scoring {
    [pbr::OriginalName("FANTASY_SCORING_KILLS")] Kills = 0,
    [pbr::OriginalName("FANTASY_SCORING_DEATHS")] Deaths = 1,
    [pbr::OriginalName("FANTASY_SCORING_CS")] Cs = 2,
    [pbr::OriginalName("FANTASY_SCORING_GPM")] Gpm = 3,
    [pbr::OriginalName("FANTASY_SCORING_TOWER_KILLS")] TowerKills = 4,
    [pbr::OriginalName("FANTASY_SCORING_ROSHAN_KILLS")] RoshanKills = 5,
    [pbr::OriginalName("FANTASY_SCORING_TEAMFIGHT_PARTICIPATION")] TeamfightParticipation = 6,
    [pbr::OriginalName("FANTASY_SCORING_WARDS_PLANTED")] WardsPlanted = 7,
    [pbr::OriginalName("FANTASY_SCORING_CAMPS_STACKED")] CampsStacked = 8,
    [pbr::OriginalName("FANTASY_SCORING_RUNES_GRABBED")] RunesGrabbed = 9,
    [pbr::OriginalName("FANTASY_SCORING_FIRST_BLOOD")] FirstBlood = 10,
    [pbr::OriginalName("FANTASY_SCORING_STUNS")] Stuns = 11,
    [pbr::OriginalName("FANTASY_SCORING_SMOKES_USED")] SmokesUsed = 12,
    [pbr::OriginalName("FANTASY_SCORING_NEUTRAL_TOKENS_FOUND")] NeutralTokensFound = 13,
    [pbr::OriginalName("FANTASY_SCORING_WATCHERS_TAKEN")] WatchersTaken = 14,
    [pbr::OriginalName("FANTASY_SCORING_LOTUSES_GAINED")] LotusesGained = 15,
    [pbr::OriginalName("FANTASY_SCORING_TORMENTOR_KILLS")] TormentorKills = 16,
    [pbr::OriginalName("FANTASY_SCORING_COURIER_KILLS")] CourierKills = 17,
    [pbr::OriginalName("FANTASY_SCORING_TYPES")] Types = 18,
    [pbr::OriginalName("FANTASY_SCORING_INVALID")] Invalid = 19,
  }

  public enum Fantasy_Team_Slots {
    [pbr::OriginalName("FANTASY_SLOT_NONE")] FantasySlotNone = 0,
    [pbr::OriginalName("FANTASY_SLOT_CORE")] FantasySlotCore = 1,
    [pbr::OriginalName("FANTASY_SLOT_SUPPORT")] FantasySlotSupport = 2,
    [pbr::OriginalName("FANTASY_SLOT_ANY")] FantasySlotAny = 3,
    [pbr::OriginalName("FANTASY_SLOT_BENCH")] FantasySlotBench = 4,
  }

  public enum Fantasy_Selection_Mode {
    [pbr::OriginalName("FANTASY_SELECTION_INVALID")] FantasySelectionInvalid = 0,
    [pbr::OriginalName("FANTASY_SELECTION_LOCKED")] FantasySelectionLocked = 1,
    [pbr::OriginalName("FANTASY_SELECTION_SHUFFLE")] FantasySelectionShuffle = 2,
    [pbr::OriginalName("FANTASY_SELECTION_FREE_PICK")] FantasySelectionFreePick = 3,
    [pbr::OriginalName("FANTASY_SELECTION_ENDED")] FantasySelectionEnded = 4,
    [pbr::OriginalName("FANTASY_SELECTION_PRE_SEASON")] FantasySelectionPreSeason = 5,
    [pbr::OriginalName("FANTASY_SELECTION_PRE_DRAFT")] FantasySelectionPreDraft = 6,
    [pbr::OriginalName("FANTASY_SELECTION_DRAFTING")] FantasySelectionDrafting = 7,
    [pbr::OriginalName("FANTASY_SELECTION_REGULAR_SEASON")] FantasySelectionRegularSeason = 8,
    [pbr::OriginalName("FANTASY_SELECTION_CARD_BASED")] FantasySelectionCardBased = 9,
  }

  public enum Fantasy_Gem_Type {
    [pbr::OriginalName("FANTASY_GEM_TYPE_RUBY")] Ruby = 0,
    [pbr::OriginalName("FANTASY_GEM_TYPE_SAPPHIRE")] Sapphire = 1,
    [pbr::OriginalName("FANTASY_GEM_TYPE_EMERALD")] Emerald = 2,
  }

  public enum DOTAChatChannelType_t {
    [pbr::OriginalName("DOTAChannelType_Regional")] DotachannelTypeRegional = 0,
    [pbr::OriginalName("DOTAChannelType_Custom")] DotachannelTypeCustom = 1,
    [pbr::OriginalName("DOTAChannelType_Party")] DotachannelTypeParty = 2,
    [pbr::OriginalName("DOTAChannelType_Lobby")] DotachannelTypeLobby = 3,
    [pbr::OriginalName("DOTAChannelType_Team")] DotachannelTypeTeam = 4,
    [pbr::OriginalName("DOTAChannelType_Guild")] DotachannelTypeGuild = 5,
    [pbr::OriginalName("DOTAChannelType_Fantasy")] DotachannelTypeFantasy = 6,
    [pbr::OriginalName("DOTAChannelType_Whisper")] DotachannelTypeWhisper = 7,
    [pbr::OriginalName("DOTAChannelType_Console")] DotachannelTypeConsole = 8,
    [pbr::OriginalName("DOTAChannelType_Tab")] DotachannelTypeTab = 9,
    [pbr::OriginalName("DOTAChannelType_Invalid")] DotachannelTypeInvalid = 10,
    [pbr::OriginalName("DOTAChannelType_GameAll")] DotachannelTypeGameAll = 11,
    [pbr::OriginalName("DOTAChannelType_GameAllies")] DotachannelTypeGameAllies = 12,
    [pbr::OriginalName("DOTAChannelType_GameSpectator")] DotachannelTypeGameSpectator = 13,
    [pbr::OriginalName("DOTAChannelType_GameCoaching")] DotachannelTypeGameCoaching = 14,
    [pbr::OriginalName("DOTAChannelType_Cafe")] DotachannelTypeCafe = 15,
    [pbr::OriginalName("DOTAChannelType_CustomGame")] DotachannelTypeCustomGame = 16,
    [pbr::OriginalName("DOTAChannelType_Private")] DotachannelTypePrivate = 17,
    [pbr::OriginalName("DOTAChannelType_PostGame")] DotachannelTypePostGame = 18,
    [pbr::OriginalName("DOTAChannelType_BattleCup")] DotachannelTypeBattleCup = 19,
    [pbr::OriginalName("DOTAChannelType_HLTVSpectator")] DotachannelTypeHltvspectator = 20,
    [pbr::OriginalName("DOTAChannelType_GameEvents")] DotachannelTypeGameEvents = 21,
    [pbr::OriginalName("DOTAChannelType_Trivia")] DotachannelTypeTrivia = 22,
    [pbr::OriginalName("DOTAChannelType_NewPlayer")] DotachannelTypeNewPlayer = 23,
    [pbr::OriginalName("DOTAChannelType_PrivateCoaching")] DotachannelTypePrivateCoaching = 24,
  }

  public enum EChatSpecialPrivileges {
    [pbr::OriginalName("k_EChatSpecialPrivileges_None")] KEchatSpecialPrivilegesNone = 0,
    [pbr::OriginalName("k_EChatSpecialPrivileges_Moderator")] KEchatSpecialPrivilegesModerator = 1,
    [pbr::OriginalName("k_EChatSpecialPrivileges_SuperModerator")] KEchatSpecialPrivilegesSuperModerator = 2,
  }

  public enum DOTACommType_t {
    [pbr::OriginalName("DOTA_COMM_TYPE_NONE")] DotaCommTypeNone = 0,
    [pbr::OriginalName("DOTA_COMM_TYPE_PING")] DotaCommTypePing = 1,
    [pbr::OriginalName("DOTA_COMM_TYPE_CHATWHEEL")] DotaCommTypeChatwheel = 2,
    [pbr::OriginalName("DOTA_COMM_TYPE_TIP")] Ip = 3,
    [pbr::OriginalName("DOTA_COMM_TYPE_TEXT")] Ext = 4,
    [pbr::OriginalName("DOTA_COMM_TYPE_SHOWCASE")] DotaCommTypeShowcase = 5,
    [pbr::OriginalName("DOTA_COMM_TYPE_VOICE")] DotaCommTypeVoice = 6,
    [pbr::OriginalName("DOTA_COMM_TYPE_ALLY_ABILITY")] DotaCommTypeAllyAbility = 7,
    [pbr::OriginalName("DOTA_COMM_TYPE_PAUSE")] DotaCommTypePause = 8,
    [pbr::OriginalName("DOTA_COMM_TYPE_COACHING")] DotaCommTypeCoaching = 9,
    [pbr::OriginalName("DOTA_COMM_TYPE_NOCOOLDOWN")] DotaCommTypeNocooldown = 10,
    [pbr::OriginalName("DOTA_COMM_TYPE_RANKEDMATCHMAKE")] DotaCommTypeRankedmatchmake = 11,
    [pbr::OriginalName("DOTA_COMM_TYPE_DROPS")] DotaCommTypeDrops = 12,
    [pbr::OriginalName("DOTA_COMM_TYPE_NEWPLAYER_EXPERT")] DotaCommTypeNewplayerExpert = 13,
    [pbr::OriginalName("DOTA_COMM_TYPE_COACHED")] DotaCommTypeCoached = 14,
    [pbr::OriginalName("DOTA_COMM_TYPE_MAPDRAWING")] DotaCommTypeMapdrawing = 15,
  }

  public enum DOTACommLevel_t {
    [pbr::OriginalName("DOTA_COMM_LEVEL_NONE")] DotaCommLevelNone = 0,
    [pbr::OriginalName("DOTA_COMM_LEVEL_COOLDOWN")] DotaCommLevelCooldown = 1,
    [pbr::OriginalName("DOTA_COMM_LEVEL_PINGS")] DotaCommLevelPings = 2,
    [pbr::OriginalName("DOTA_COMM_LEVEL_MAPDRAWING")] DotaCommLevelMapdrawing = 3,
    [pbr::OriginalName("DOTA_COMM_LEVEL_CHAT")] DotaCommLevelChat = 4,
    [pbr::OriginalName("DOTA_COMM_LEVEL_TIPPING")] Ipping = 5,
    [pbr::OriginalName("DOTA_COMM_LEVEL_VOICE")] DotaCommLevelVoice = 6,
    [pbr::OriginalName("DOTA_COMM_LEVEL_ALLIED_ABILITY")] DotaCommLevelAlliedAbility = 7,
  }

  public enum DOTABehaviorLevel_t {
    [pbr::OriginalName("DOTA_BEHAVIOR_LEVEL_NONE")] DotaBehaviorLevelNone = 0,
    [pbr::OriginalName("DOTA_BEHAVIOR_LEVEL_RANKED_ALLOWED")] DotaBehaviorLevelRankedAllowed = 1,
    [pbr::OriginalName("DOTA_BEHAVIOR_LEVEL_PAUSING")] DotaBehaviorLevelPausing = 2,
    [pbr::OriginalName("DOTA_BEHAVIOR_LEVEL_DROPS")] DotaBehaviorLevelDrops = 3,
    [pbr::OriginalName("DOTA_BEHAVIOR_LEVEL_COACHING")] DotaBehaviorLevelCoaching = 4,
  }

  public enum EProfileCardSlotType {
    [pbr::OriginalName("k_EProfileCardSlotType_Empty")] KEprofileCardSlotTypeEmpty = 0,
    [pbr::OriginalName("k_EProfileCardSlotType_Stat")] KEprofileCardSlotTypeStat = 1,
    [pbr::OriginalName("k_EProfileCardSlotType_Trophy")] KEprofileCardSlotTypeTrophy = 2,
    [pbr::OriginalName("k_EProfileCardSlotType_Item")] KEprofileCardSlotTypeItem = 3,
    [pbr::OriginalName("k_EProfileCardSlotType_Hero")] KEprofileCardSlotTypeHero = 4,
    [pbr::OriginalName("k_EProfileCardSlotType_Emoticon")] KEprofileCardSlotTypeEmoticon = 5,
    [pbr::OriginalName("k_EProfileCardSlotType_Team")] KEprofileCardSlotTypeTeam = 6,
  }

  public enum EMatchGroupServerStatus {
    [pbr::OriginalName("k_EMatchGroupServerStatus_OK")] KEmatchGroupServerStatusOk = 0,
    [pbr::OriginalName("k_EMatchGroupServerStatus_LimitedAvailability")] KEmatchGroupServerStatusLimitedAvailability = 1,
    [pbr::OriginalName("k_EMatchGroupServerStatus_Offline")] KEmatchGroupServerStatusOffline = 2,
  }

  public enum DOTA_CM_PICK {
    [pbr::OriginalName("DOTA_CM_RANDOM")] DotaCmRandom = 0,
    [pbr::OriginalName("DOTA_CM_GOOD_GUYS")] DotaCmGoodGuys = 1,
    [pbr::OriginalName("DOTA_CM_BAD_GUYS")] DotaCmBadGuys = 2,
  }

  public enum DOTALowPriorityBanType {
    [pbr::OriginalName("DOTA_LOW_PRIORITY_BAN_ABANDON")] DotaLowPriorityBanAbandon = 0,
    [pbr::OriginalName("DOTA_LOW_PRIORITY_BAN_REPORTS")] DotaLowPriorityBanReports = 1,
    [pbr::OriginalName("DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON")] DotaLowPriorityBanSecondaryAbandon = 2,
    [pbr::OriginalName("DOTA_LOW_PRIORITY_BAN_PRE_GAME_ROLE")] DotaLowPriorityBanPreGameRole = 3,
  }

  public enum DOTALobbyReadyState {
    [pbr::OriginalName("DOTALobbyReadyState_UNDECLARED")] Undeclared = 0,
    [pbr::OriginalName("DOTALobbyReadyState_ACCEPTED")] Accepted = 1,
    [pbr::OriginalName("DOTALobbyReadyState_DECLINED")] Declined = 2,
    [pbr::OriginalName("DOTALobbyReadyState_DECLINED_REQUEUE")] DeclinedRequeue = 3,
  }

  public enum DOTAJoinLobbyResult {
    [pbr::OriginalName("DOTA_JOIN_RESULT_SUCCESS")] DotaJoinResultSuccess = 0,
    [pbr::OriginalName("DOTA_JOIN_RESULT_ALREADY_IN_GAME")] DotaJoinResultAlreadyInGame = 1,
    [pbr::OriginalName("DOTA_JOIN_RESULT_INVALID_LOBBY")] DotaJoinResultInvalidLobby = 2,
    [pbr::OriginalName("DOTA_JOIN_RESULT_INCORRECT_PASSWORD")] DotaJoinResultIncorrectPassword = 3,
    [pbr::OriginalName("DOTA_JOIN_RESULT_ACCESS_DENIED")] DotaJoinResultAccessDenied = 4,
    [pbr::OriginalName("DOTA_JOIN_RESULT_GENERIC_ERROR")] DotaJoinResultGenericError = 5,
    [pbr::OriginalName("DOTA_JOIN_RESULT_INCORRECT_VERSION")] DotaJoinResultIncorrectVersion = 6,
    [pbr::OriginalName("DOTA_JOIN_RESULT_IN_TEAM_PARTY")] DotaJoinResultInTeamParty = 7,
    [pbr::OriginalName("DOTA_JOIN_RESULT_NO_LOBBY_FOUND")] DotaJoinResultNoLobbyFound = 8,
    [pbr::OriginalName("DOTA_JOIN_RESULT_LOBBY_FULL")] DotaJoinResultLobbyFull = 9,
    [pbr::OriginalName("DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION")] DotaJoinResultCustomGameIncorrectVersion = 10,
    [pbr::OriginalName("DOTA_JOIN_RESULT_TIMEOUT")] DotaJoinResultTimeout = 11,
    [pbr::OriginalName("DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN")] DotaJoinResultCustomGameCooldown = 12,
    [pbr::OriginalName("DOTA_JOIN_RESULT_BUSY")] DotaJoinResultBusy = 13,
    [pbr::OriginalName("DOTA_JOIN_RESULT_NO_PLAYTIME")] DotaJoinResultNoPlaytime = 14,
  }

  public enum DOTASelectionPriorityRules {
    [pbr::OriginalName("k_DOTASelectionPriorityRules_Manual")] KDotaselectionPriorityRulesManual = 0,
    [pbr::OriginalName("k_DOTASelectionPriorityRules_Automatic")] KDotaselectionPriorityRulesAutomatic = 1,
  }

  public enum DOTASelectionPriorityChoice {
    [pbr::OriginalName("k_DOTASelectionPriorityChoice_Invalid")] KDotaselectionPriorityChoiceInvalid = 0,
    [pbr::OriginalName("k_DOTASelectionPriorityChoice_FirstPick")] KDotaselectionPriorityChoiceFirstPick = 1,
    [pbr::OriginalName("k_DOTASelectionPriorityChoice_SecondPick")] KDotaselectionPriorityChoiceSecondPick = 2,
    [pbr::OriginalName("k_DOTASelectionPriorityChoice_Radiant")] KDotaselectionPriorityChoiceRadiant = 3,
    [pbr::OriginalName("k_DOTASelectionPriorityChoice_Dire")] KDotaselectionPriorityChoiceDire = 4,
  }

  public enum DOTAMatchVote {
    [pbr::OriginalName("DOTAMatchVote_INVALID")] Invalid = 0,
    [pbr::OriginalName("DOTAMatchVote_POSITIVE")] Positive = 1,
    [pbr::OriginalName("DOTAMatchVote_NEGATIVE")] Negative = 2,
  }

  public enum DOTALobbyVisibility {
    [pbr::OriginalName("DOTALobbyVisibility_Public")] Public = 0,
    [pbr::OriginalName("DOTALobbyVisibility_Friends")] Friends = 1,
    [pbr::OriginalName("DOTALobbyVisibility_Unlisted")] Unlisted = 2,
  }

  public enum EDOTAPlayerMMRType {
    [pbr::OriginalName("k_EDOTAPlayerMMRType_Invalid")] KEdotaplayerMmrtypeInvalid = 0,
    [pbr::OriginalName("k_EDOTAPlayerMMRType_GeneralHidden")] KEdotaplayerMmrtypeGeneralHidden = 1,
    [pbr::OriginalName("k_EDOTAPlayerMMRType_GeneralCompetitive")] KEdotaplayerMmrtypeGeneralCompetitive = 3,
  }

  public enum EDOTAMMRBoostType {
    [pbr::OriginalName("k_EDOTAMMRBoostType_None")] KEdotammrboostTypeNone = 0,
    [pbr::OriginalName("k_EDOTAMMRBoostType_Leader")] KEdotammrboostTypeLeader = 1,
    [pbr::OriginalName("k_EDOTAMMRBoostType_Follower")] KEdotammrboostTypeFollower = 2,
  }

  public enum MatchType {
    [pbr::OriginalName("MATCH_TYPE_CASUAL")] Casual = 0,
    [pbr::OriginalName("MATCH_TYPE_COOP_BOTS")] CoopBots = 1,
    [pbr::OriginalName("MATCH_TYPE_COMPETITIVE")] Competitive = 4,
    [pbr::OriginalName("MATCH_TYPE_WEEKEND_TOURNEY")] WeekendTourney = 5,
    [pbr::OriginalName("MATCH_TYPE_EVENT")] Event = 7,
    [pbr::OriginalName("MATCH_TYPE_COACHES_CHALLENGE")] CoachesChallenge = 12,
    [pbr::OriginalName("MATCH_TYPE_NEW_PLAYER_POOL")] NewPlayerPool = 14,
  }

  public enum DOTABotDifficulty {
    [pbr::OriginalName("BOT_DIFFICULTY_PASSIVE")] BotDifficultyPassive = 0,
    [pbr::OriginalName("BOT_DIFFICULTY_EASY")] BotDifficultyEasy = 1,
    [pbr::OriginalName("BOT_DIFFICULTY_MEDIUM")] BotDifficultyMedium = 2,
    [pbr::OriginalName("BOT_DIFFICULTY_HARD")] BotDifficultyHard = 3,
    [pbr::OriginalName("BOT_DIFFICULTY_UNFAIR")] BotDifficultyUnfair = 4,
    [pbr::OriginalName("BOT_DIFFICULTY_INVALID")] BotDifficultyInvalid = 5,
    [pbr::OriginalName("BOT_DIFFICULTY_EXTRA1")] BotDifficultyExtra1 = 6,
    [pbr::OriginalName("BOT_DIFFICULTY_EXTRA2")] BotDifficultyExtra2 = 7,
    [pbr::OriginalName("BOT_DIFFICULTY_EXTRA3")] BotDifficultyExtra3 = 8,
    [pbr::OriginalName("BOT_DIFFICULTY_NPX")] BotDifficultyNpx = 9,
  }

  public enum DOTA_BOT_MODE {
    [pbr::OriginalName("DOTA_BOT_MODE_NONE")] None = 0,
    [pbr::OriginalName("DOTA_BOT_MODE_LANING")] Laning = 1,
    [pbr::OriginalName("DOTA_BOT_MODE_ATTACK")] Attack = 2,
    [pbr::OriginalName("DOTA_BOT_MODE_ROAM")] Roam = 3,
    [pbr::OriginalName("DOTA_BOT_MODE_RETREAT")] Retreat = 4,
    [pbr::OriginalName("DOTA_BOT_MODE_SECRET_SHOP")] SecretShop = 5,
    [pbr::OriginalName("DOTA_BOT_MODE_SIDE_SHOP")] SideShop = 6,
    [pbr::OriginalName("DOTA_BOT_MODE_RUNE")] Rune = 7,
    [pbr::OriginalName("DOTA_BOT_MODE_PUSH_TOWER_TOP")] PushTowerTop = 8,
    [pbr::OriginalName("DOTA_BOT_MODE_PUSH_TOWER_MID")] PushTowerMid = 9,
    [pbr::OriginalName("DOTA_BOT_MODE_PUSH_TOWER_BOT")] PushTowerBot = 10,
    [pbr::OriginalName("DOTA_BOT_MODE_DEFEND_TOWER_TOP")] DefendTowerTop = 11,
    [pbr::OriginalName("DOTA_BOT_MODE_DEFEND_TOWER_MID")] DefendTowerMid = 12,
    [pbr::OriginalName("DOTA_BOT_MODE_DEFEND_TOWER_BOT")] DefendTowerBot = 13,
    [pbr::OriginalName("DOTA_BOT_MODE_ASSEMBLE")] Assemble = 14,
    [pbr::OriginalName("DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS")] AssembleWithHumans = 15,
    [pbr::OriginalName("DOTA_BOT_MODE_TEAM_ROAM")] TeamRoam = 16,
    [pbr::OriginalName("DOTA_BOT_MODE_FARM")] Farm = 17,
    [pbr::OriginalName("DOTA_BOT_MODE_DEFEND_ALLY")] DefendAlly = 18,
    [pbr::OriginalName("DOTA_BOT_MODE_EVASIVE_MANEUVERS")] EvasiveManeuvers = 19,
    [pbr::OriginalName("DOTA_BOT_MODE_ROSHAN")] Roshan = 20,
    [pbr::OriginalName("DOTA_BOT_MODE_ITEM")] Item = 21,
    [pbr::OriginalName("DOTA_BOT_MODE_WARD")] Ward = 22,
    [pbr::OriginalName("DOTA_BOT_MODE_COMPANION")] Companion = 23,
    [pbr::OriginalName("DOTA_BOT_MODE_TUTORIAL_BOSS")] TutorialBoss = 24,
    [pbr::OriginalName("DOTA_BOT_MODE_MINION")] Minion = 25,
    [pbr::OriginalName("DOTA_BOT_MODE_OUTPOST")] Outpost = 26,
  }

  public enum MatchLanguages {
    [pbr::OriginalName("MATCH_LANGUAGE_INVALID")] MatchLanguageInvalid = 0,
    [pbr::OriginalName("MATCH_LANGUAGE_ENGLISH")] MatchLanguageEnglish = 1,
    [pbr::OriginalName("MATCH_LANGUAGE_RUSSIAN")] MatchLanguageRussian = 2,
    [pbr::OriginalName("MATCH_LANGUAGE_CHINESE")] MatchLanguageChinese = 3,
    [pbr::OriginalName("MATCH_LANGUAGE_KOREAN")] MatchLanguageKorean = 4,
    [pbr::OriginalName("MATCH_LANGUAGE_SPANISH")] Panish = 5,
    [pbr::OriginalName("MATCH_LANGUAGE_PORTUGUESE")] MatchLanguagePortuguese = 6,
    [pbr::OriginalName("MATCH_LANGUAGE_ENGLISH2")] MatchLanguageEnglish2 = 7,
  }

  public enum ETourneyQueueDeadlineState {
    [pbr::OriginalName("k_ETourneyQueueDeadlineState_Normal")] KEtourneyQueueDeadlineStateNormal = 0,
    [pbr::OriginalName("k_ETourneyQueueDeadlineState_Missed")] KEtourneyQueueDeadlineStateMissed = 1,
    [pbr::OriginalName("k_ETourneyQueueDeadlineState_ExpiredOK")] KEtourneyQueueDeadlineStateExpiredOk = 2,
    [pbr::OriginalName("k_ETourneyQueueDeadlineState_SeekingBye")] KEtourneyQueueDeadlineStateSeekingBye = 3,
    [pbr::OriginalName("k_ETourneyQueueDeadlineState_EligibleForRefund")] KEtourneyQueueDeadlineStateEligibleForRefund = 4,
    [pbr::OriginalName("k_ETourneyQueueDeadlineState_NA")] KEtourneyQueueDeadlineStateNa = -1,
    [pbr::OriginalName("k_ETourneyQueueDeadlineState_ExpiringSoon")] KEtourneyQueueDeadlineStateExpiringSoon = 101,
  }

  public enum EMatchOutcome {
    [pbr::OriginalName("k_EMatchOutcome_Unknown")] KEmatchOutcomeUnknown = 0,
    [pbr::OriginalName("k_EMatchOutcome_RadVictory")] KEmatchOutcomeRadVictory = 2,
    [pbr::OriginalName("k_EMatchOutcome_DireVictory")] KEmatchOutcomeDireVictory = 3,
    [pbr::OriginalName("k_EMatchOutcome_NeutralVictory")] KEmatchOutcomeNeutralVictory = 4,
    [pbr::OriginalName("k_EMatchOutcome_NoTeamWinner")] KEmatchOutcomeNoTeamWinner = 5,
    [pbr::OriginalName("k_EMatchOutcome_Custom1Victory")] KEmatchOutcomeCustom1Victory = 6,
    [pbr::OriginalName("k_EMatchOutcome_Custom2Victory")] KEmatchOutcomeCustom2Victory = 7,
    [pbr::OriginalName("k_EMatchOutcome_Custom3Victory")] KEmatchOutcomeCustom3Victory = 8,
    [pbr::OriginalName("k_EMatchOutcome_Custom4Victory")] KEmatchOutcomeCustom4Victory = 9,
    [pbr::OriginalName("k_EMatchOutcome_Custom5Victory")] KEmatchOutcomeCustom5Victory = 10,
    [pbr::OriginalName("k_EMatchOutcome_Custom6Victory")] KEmatchOutcomeCustom6Victory = 11,
    [pbr::OriginalName("k_EMatchOutcome_Custom7Victory")] KEmatchOutcomeCustom7Victory = 12,
    [pbr::OriginalName("k_EMatchOutcome_Custom8Victory")] KEmatchOutcomeCustom8Victory = 13,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_PoorNetworkConditions")] KEmatchOutcomeNotScoredPoorNetworkConditions = 64,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_Leaver")] KEmatchOutcomeNotScoredLeaver = 65,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_ServerCrash")] KEmatchOutcomeNotScoredServerCrash = 66,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_NeverStarted")] KEmatchOutcomeNotScoredNeverStarted = 67,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_Canceled")] KEmatchOutcomeNotScoredCanceled = 68,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_Suspicious")] KEmatchOutcomeNotScoredSuspicious = 69,
  }

  public enum ELaneType {
    [pbr::OriginalName("LANE_TYPE_UNKNOWN")] LaneTypeUnknown = 0,
    [pbr::OriginalName("LANE_TYPE_SAFE")] LaneTypeSafe = 1,
    [pbr::OriginalName("LANE_TYPE_OFF")] LaneTypeOff = 2,
    [pbr::OriginalName("LANE_TYPE_MID")] LaneTypeMid = 3,
    [pbr::OriginalName("LANE_TYPE_JUNGLE")] LaneTypeJungle = 4,
    [pbr::OriginalName("LANE_TYPE_ROAM")] LaneTypeRoam = 5,
  }

  public enum EBadgeType {
    [pbr::OriginalName("k_EBadgeType_Invalid")] KEbadgeTypeInvalid = 0,
    [pbr::OriginalName("k_EBadgeType_TI7_Midweek")] KEbadgeTypeTi7Midweek = 1,
    [pbr::OriginalName("k_EBadgeType_TI7_Finals")] KEbadgeTypeTi7Finals = 2,
    [pbr::OriginalName("k_EBadgeType_TI7_AllEvent")] KEbadgeTypeTi7AllEvent = 3,
    [pbr::OriginalName("k_EBadgeType_TI8_Midweek")] KEbadgeTypeTi8Midweek = 4,
    [pbr::OriginalName("k_EBadgeType_TI8_Finals")] KEbadgeTypeTi8Finals = 5,
    [pbr::OriginalName("k_EBadgeType_TI8_AllEvent")] KEbadgeTypeTi8AllEvent = 6,
    [pbr::OriginalName("k_EBadgeType_TI10")] KEbadgeTypeTi10 = 7,
    [pbr::OriginalName("k_EBadgeType_TI11_PlayoffsDay1")] KEbadgeTypeTi11PlayoffsDay1 = 8,
    [pbr::OriginalName("k_EBadgeType_TI11_PlayoffsDay2")] KEbadgeTypeTi11PlayoffsDay2 = 9,
    [pbr::OriginalName("k_EBadgeType_TI11_PlayoffsDay3")] KEbadgeTypeTi11PlayoffsDay3 = 10,
    [pbr::OriginalName("k_EBadgeType_TI11_PlayoffsDay4")] KEbadgeTypeTi11PlayoffsDay4 = 11,
    [pbr::OriginalName("k_EBadgeType_TI11_FinalsWeekend")] KEbadgeTypeTi11FinalsWeekend = 12,
    [pbr::OriginalName("k_EBadgeType_TI12_PlayoffsDay1")] KEbadgeTypeTi12PlayoffsDay1 = 13,
    [pbr::OriginalName("k_EBadgeType_TI12_PlayoffsDay2")] KEbadgeTypeTi12PlayoffsDay2 = 14,
    [pbr::OriginalName("k_EBadgeType_TI12_PlayoffsDay3")] KEbadgeTypeTi12PlayoffsDay3 = 15,
    [pbr::OriginalName("k_EBadgeType_TI12_FinalsWeekend")] KEbadgeTypeTi12FinalsWeekend = 16,
    [pbr::OriginalName("k_EBadgeType_TI12_Special")] KEbadgeTypeTi12Special = 17,
    [pbr::OriginalName("k_EBadgeType_TI13_FinalsDay1")] KEbadgeTypeTi13FinalsDay1 = 18,
    [pbr::OriginalName("k_EBadgeType_TI13_FinalsDay2")] KEbadgeTypeTi13FinalsDay2 = 19,
    [pbr::OriginalName("k_EBadgeType_TI13_FinalsDay3")] KEbadgeTypeTi13FinalsDay3 = 20,
    [pbr::OriginalName("k_EBadgeType_TI13_Special")] KEbadgeTypeTi13Special = 21,
  }

  public enum ELeagueStatus {
    [pbr::OriginalName("LEAGUE_STATUS_UNSET")] LeagueStatusUnset = 0,
    [pbr::OriginalName("LEAGUE_STATUS_UNSUBMITTED")] LeagueStatusUnsubmitted = 1,
    [pbr::OriginalName("LEAGUE_STATUS_SUBMITTED")] LeagueStatusSubmitted = 2,
    [pbr::OriginalName("LEAGUE_STATUS_ACCEPTED")] LeagueStatusAccepted = 3,
    [pbr::OriginalName("LEAGUE_STATUS_REJECTED")] LeagueStatusRejected = 4,
    [pbr::OriginalName("LEAGUE_STATUS_CONCLUDED")] LeagueStatusConcluded = 5,
    [pbr::OriginalName("LEAGUE_STATUS_DELETED")] LeagueStatusDeleted = 6,
  }

  public enum ELeagueRegion {
    [pbr::OriginalName("LEAGUE_REGION_UNSET")] LeagueRegionUnset = 0,
    [pbr::OriginalName("LEAGUE_REGION_NA")] LeagueRegionNa = 1,
    [pbr::OriginalName("LEAGUE_REGION_SA")] LeagueRegionSa = 2,
    [pbr::OriginalName("LEAGUE_REGION_WEU")] LeagueRegionWeu = 3,
    [pbr::OriginalName("LEAGUE_REGION_EEU")] LeagueRegionEeu = 4,
    [pbr::OriginalName("LEAGUE_REGION_CHINA")] LeagueRegionChina = 5,
    [pbr::OriginalName("LEAGUE_REGION_SEA")] LeagueRegionSea = 6,
  }

  public enum ELeagueTier {
    [pbr::OriginalName("LEAGUE_TIER_UNSET")] LeagueTierUnset = 0,
    [pbr::OriginalName("LEAGUE_TIER_AMATEUR")] LeagueTierAmateur = 1,
    [pbr::OriginalName("LEAGUE_TIER_PROFESSIONAL")] LeagueTierProfessional = 2,
    [pbr::OriginalName("LEAGUE_TIER_MINOR")] LeagueTierMinor = 3,
    [pbr::OriginalName("LEAGUE_TIER_MAJOR")] LeagueTierMajor = 4,
    [pbr::OriginalName("LEAGUE_TIER_INTERNATIONAL")] LeagueTierInternational = 5,
    [pbr::OriginalName("LEAGUE_TIER_DPC_QUALIFIER")] LeagueTierDpcQualifier = 6,
    [pbr::OriginalName("LEAGUE_TIER_DPC_LEAGUE_QUALIFIER")] LeagueTierDpcLeagueQualifier = 7,
    [pbr::OriginalName("LEAGUE_TIER_DPC_LEAGUE")] LeagueTierDpcLeague = 8,
    [pbr::OriginalName("LEAGUE_TIER_DPC_LEAGUE_FINALS")] LeagueTierDpcLeagueFinals = 9,
  }

  public enum ELeagueTierCategory {
    [pbr::OriginalName("LEAGUE_TIER_CATEGORY_AMATEUR")] LeagueTierCategoryAmateur = 1,
    [pbr::OriginalName("LEAGUE_TIER_CATEGORY_PROFESSIONAL")] LeagueTierCategoryProfessional = 2,
    [pbr::OriginalName("LEAGUE_TIER_CATEGORY_DPC")] LeagueTierCategoryDpc = 3,
  }

  public enum ELeagueDivision {
    [pbr::OriginalName("LEAGUE_DIVISION_UNSET")] LeagueDivisionUnset = 0,
    [pbr::OriginalName("LEAGUE_DIVISION_I")] LeagueDivisionI = 1,
    [pbr::OriginalName("LEAGUE_DIVISION_II")] LeagueDivisionIi = 2,
  }

  public enum ELeagueBroadcastProvider {
    [pbr::OriginalName("LEAGUE_BROADCAST_UNKNOWN")] LeagueBroadcastUnknown = 0,
    [pbr::OriginalName("LEAGUE_BROADCAST_STEAM")] LeagueBroadcastSteam = 1,
    [pbr::OriginalName("LEAGUE_BROADCAST_TWITCH")] LeagueBroadcastTwitch = 2,
    [pbr::OriginalName("LEAGUE_BROADCAST_YOUTUBE")] LeagueBroadcastYoutube = 3,
    [pbr::OriginalName("LEAGUE_BROADCAST_OTHER")] LeagueBroadcastOther = 100,
  }

  public enum ELeaguePhase {
    [pbr::OriginalName("LEAGUE_PHASE_UNSET")] LeaguePhaseUnset = 0,
    [pbr::OriginalName("LEAGUE_PHASE_REGIONAL_QUALIFIER")] LeaguePhaseRegionalQualifier = 1,
    [pbr::OriginalName("LEAGUE_PHASE_GROUP_STAGE")] LeaguePhaseGroupStage = 2,
    [pbr::OriginalName("LEAGUE_PHASE_MAIN_EVENT")] LeaguePhaseMainEvent = 3,
  }

  public enum ELeagueAuditAction {
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_INVALID")] LeagueAuditActionInvalid = 0,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_CREATE")] LeagueAuditActionLeagueCreate = 1,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_EDIT")] LeagueAuditActionLeagueEdit = 2,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_DELETE")] LeagueAuditActionLeagueDelete = 3,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_ADD")] LeagueAuditActionLeagueAdminAdd = 4,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_REVOKE")] LeagueAuditActionLeagueAdminRevoke = 5,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_PROMOTE")] LeagueAuditActionLeagueAdminPromote = 6,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_ADD")] LeagueAuditActionLeagueStreamAdd = 7,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE")] LeagueAuditActionLeagueStreamRemove = 8,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UPDATED")] LeagueAuditActionLeagueImageUpdated = 9,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_MESSAGE_ADDED")] LeagueAuditActionLeagueMessageAdded = 10,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_SUBMITTED")] LeagueAuditActionLeagueSubmitted = 11,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_SET_PRIZE_POOL")] LeagueAuditActionLeagueSetPrizePool = 12,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_ADD_PRIZE_POOL_ITEM")] LeagueAuditActionLeagueAddPrizePoolItem = 13,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_POOL_ITEM")] LeagueAuditActionLeagueRemovePrizePoolItem = 14,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_START")] LeagueAuditActionLeagueMatchStart = 15,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_END")] LeagueAuditActionLeagueMatchEnd = 16,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_ADD_INVITED_TEAM")] LeagueAuditActionLeagueAddInvitedTeam = 17,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_INVITED_TEAM")] LeagueAuditActionLeagueRemoveInvitedTeam = 18,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGED")] LeagueAuditActionLeagueStatusChanged = 19,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_EDIT")] LeagueAuditActionLeagueStreamEdit = 20,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_TEAM_SWAP")] LeagueAuditActionLeagueTeamSwap = 21,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_CREATE")] LeagueAuditActionNodegroupCreate = 100,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_DESTROY")] LeagueAuditActionNodegroupDestroy = 101,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_ADD_TEAM")] LeagueAuditActionNodegroupAddTeam = 102,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_REMOVE_TEAM")] LeagueAuditActionNodegroupRemoveTeam = 103,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_SET_ADVANCING")] LeagueAuditActionNodegroupSetAdvancing = 104,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_EDIT")] LeagueAuditActionNodegroupEdit = 105,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_POPULATE")] LeagueAuditActionNodegroupPopulate = 106,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED")] LeagueAuditActionNodegroupCompleted = 107,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_SET_SECONDARY_ADVANCING")] LeagueAuditActionNodegroupSetSecondaryAdvancing = 108,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_SET_TERTIARY_ADVANCING")] LeagueAuditActionNodegroupSetTertiaryAdvancing = 109,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_CREATE")] LeagueAuditActionNodeCreate = 200,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_DESTROY")] LeagueAuditActionNodeDestroy = 201,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE")] LeagueAuditActionNodeAutocreate = 202,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_SET_TEAM")] LeagueAuditActionNodeSetTeam = 203,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_ID")] LeagueAuditActionNodeSetSeriesId = 204,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_SET_ADVANCING")] LeagueAuditActionNodeSetAdvancing = 205,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_SET_TIME")] LeagueAuditActionNodeSetTime = 206,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_MATCH_COMPLETED")] LeagueAuditActionNodeMatchCompleted = 207,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_COMPLETED")] LeagueAuditActionNodeCompleted = 208,
    [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_EDIT")] LeagueAuditActionNodeEdit = 209,
  }

  public enum DOTA_COMBATLOG_TYPES {
    [pbr::OriginalName("DOTA_COMBATLOG_INVALID")] DotaCombatlogInvalid = -1,
    [pbr::OriginalName("DOTA_COMBATLOG_DAMAGE")] DotaCombatlogDamage = 0,
    [pbr::OriginalName("DOTA_COMBATLOG_HEAL")] DotaCombatlogHeal = 1,
    [pbr::OriginalName("DOTA_COMBATLOG_MODIFIER_ADD")] DotaCombatlogModifierAdd = 2,
    [pbr::OriginalName("DOTA_COMBATLOG_MODIFIER_REMOVE")] DotaCombatlogModifierRemove = 3,
    [pbr::OriginalName("DOTA_COMBATLOG_DEATH")] DotaCombatlogDeath = 4,
    [pbr::OriginalName("DOTA_COMBATLOG_ABILITY")] DotaCombatlogAbility = 5,
    [pbr::OriginalName("DOTA_COMBATLOG_ITEM")] DotaCombatlogItem = 6,
    [pbr::OriginalName("DOTA_COMBATLOG_LOCATION")] DotaCombatlogLocation = 7,
    [pbr::OriginalName("DOTA_COMBATLOG_GOLD")] DotaCombatlogGold = 8,
    [pbr::OriginalName("DOTA_COMBATLOG_GAME_STATE")] DotaCombatlogGameState = 9,
    [pbr::OriginalName("DOTA_COMBATLOG_XP")] DotaCombatlogXp = 10,
    [pbr::OriginalName("DOTA_COMBATLOG_PURCHASE")] DotaCombatlogPurchase = 11,
    [pbr::OriginalName("DOTA_COMBATLOG_BUYBACK")] DotaCombatlogBuyback = 12,
    [pbr::OriginalName("DOTA_COMBATLOG_ABILITY_TRIGGER")] DotaCombatlogAbilityTrigger = 13,
    [pbr::OriginalName("DOTA_COMBATLOG_PLAYERSTATS")] DotaCombatlogPlayerstats = 14,
    [pbr::OriginalName("DOTA_COMBATLOG_MULTIKILL")] DotaCombatlogMultikill = 15,
    [pbr::OriginalName("DOTA_COMBATLOG_KILLSTREAK")] DotaCombatlogKillstreak = 16,
    [pbr::OriginalName("DOTA_COMBATLOG_TEAM_BUILDING_KILL")] DotaCombatlogTeamBuildingKill = 17,
    [pbr::OriginalName("DOTA_COMBATLOG_FIRST_BLOOD")] DotaCombatlogFirstBlood = 18,
    [pbr::OriginalName("DOTA_COMBATLOG_MODIFIER_STACK_EVENT")] DotaCombatlogModifierStackEvent = 19,
    [pbr::OriginalName("DOTA_COMBATLOG_NEUTRAL_CAMP_STACK")] DotaCombatlogNeutralCampStack = 20,
    [pbr::OriginalName("DOTA_COMBATLOG_PICKUP_RUNE")] DotaCombatlogPickupRune = 21,
    [pbr::OriginalName("DOTA_COMBATLOG_REVEALED_INVISIBLE")] DotaCombatlogRevealedInvisible = 22,
    [pbr::OriginalName("DOTA_COMBATLOG_HERO_SAVED")] DotaCombatlogHeroSaved = 23,
    [pbr::OriginalName("DOTA_COMBATLOG_MANA_RESTORED")] DotaCombatlogManaRestored = 24,
    [pbr::OriginalName("DOTA_COMBATLOG_HERO_LEVELUP")] DotaCombatlogHeroLevelup = 25,
    [pbr::OriginalName("DOTA_COMBATLOG_BOTTLE_HEAL_ALLY")] DotaCombatlogBottleHealAlly = 26,
    [pbr::OriginalName("DOTA_COMBATLOG_ENDGAME_STATS")] DotaCombatlogEndgameStats = 27,
    [pbr::OriginalName("DOTA_COMBATLOG_INTERRUPT_CHANNEL")] DotaCombatlogInterruptChannel = 28,
    [pbr::OriginalName("DOTA_COMBATLOG_ALLIED_GOLD")] DotaCombatlogAlliedGold = 29,
    [pbr::OriginalName("DOTA_COMBATLOG_AEGIS_TAKEN")] DotaCombatlogAegisTaken = 30,
    [pbr::OriginalName("DOTA_COMBATLOG_MANA_DAMAGE")] DotaCombatlogManaDamage = 31,
    [pbr::OriginalName("DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED")] DotaCombatlogPhysicalDamagePrevented = 32,
    [pbr::OriginalName("DOTA_COMBATLOG_UNIT_SUMMONED")] DotaCombatlogUnitSummoned = 33,
    [pbr::OriginalName("DOTA_COMBATLOG_ATTACK_EVADE")] DotaCombatlogAttackEvade = 34,
    [pbr::OriginalName("DOTA_COMBATLOG_TREE_CUT")] DotaCombatlogTreeCut = 35,
    [pbr::OriginalName("DOTA_COMBATLOG_SUCCESSFUL_SCAN")] DotaCombatlogSuccessfulScan = 36,
    [pbr::OriginalName("DOTA_COMBATLOG_END_KILLSTREAK")] DotaCombatlogEndKillstreak = 37,
    [pbr::OriginalName("DOTA_COMBATLOG_BLOODSTONE_CHARGE")] DotaCombatlogBloodstoneCharge = 38,
    [pbr::OriginalName("DOTA_COMBATLOG_CRITICAL_DAMAGE")] DotaCombatlogCriticalDamage = 39,
    [pbr::OriginalName("DOTA_COMBATLOG_SPELL_ABSORB")] DotaCombatlogSpellAbsorb = 40,
    [pbr::OriginalName("DOTA_COMBATLOG_UNIT_TELEPORTED")] DotaCombatlogUnitTeleported = 41,
    [pbr::OriginalName("DOTA_COMBATLOG_KILL_EATER_EVENT")] DotaCombatlogKillEaterEvent = 42,
    [pbr::OriginalName("DOTA_COMBATLOG_NEUTRAL_ITEM_EARNED")] DotaCombatlogNeutralItemEarned = 43,
    [pbr::OriginalName("DOTA_COMBATLOG_STAT_TRACKER_PLAYER")] DotaCombatlogStatTrackerPlayer = 44,
  }

  public enum EDPCFavoriteType {
    [pbr::OriginalName("FAVORITE_TYPE_ALL")] FavoriteTypeAll = 0,
    [pbr::OriginalName("FAVORITE_TYPE_PLAYER")] FavoriteTypePlayer = 1,
    [pbr::OriginalName("FAVORITE_TYPE_TEAM")] FavoriteTypeTeam = 2,
    [pbr::OriginalName("FAVORITE_TYPE_LEAGUE")] FavoriteTypeLeague = 3,
  }

  public enum EDPCPushNotification {
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_MATCH_STARTING")] DpcPushNotificationMatchStarting = 1,
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM")] DpcPushNotificationPlayerLeftTeam = 10,
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM")] DpcPushNotificationPlayerJoinedTeam = 11,
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM_AS_COACH")] DpcPushNotificationPlayerJoinedTeamAsCoach = 12,
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM_AS_COACH")] DpcPushNotificationPlayerLeftTeamAsCoach = 13,
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_LEAGUE_RESULT")] DpcPushNotificationLeagueResult = 20,
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_PREDICTION_MATCHES_AVAILABLE")] DpcPushNotificationPredictionMatchesAvailable = 30,
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_PREDICTION_RESULT")] DpcPushNotificationPredictionResult = 31,
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_FANTASY_PLAYER_CLEARED")] DpcPushNotificationFantasyPlayerCleared = 40,
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_FANTASY_DAILY_SUMMARY")] DpcPushNotificationFantasyDailySummary = 41,
    [pbr::OriginalName("DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS")] DpcPushNotificationFantasyFinalResults = 42,
  }

  public enum EEventActionScoreMode {
    [pbr::OriginalName("k_eEventActionScoreMode_Add")] KEEventActionScoreModeAdd = 0,
    [pbr::OriginalName("k_eEventActionScoreMode_Min")] KEEventActionScoreModeMin = 1,
  }

  public enum EPlayerChallengeHistoryType {
    [pbr::OriginalName("k_EPlayerChallengeHistoryType_Invalid")] KEplayerChallengeHistoryTypeInvalid = 0,
    [pbr::OriginalName("k_EPlayerChallengeHistoryType_KillEater")] KEplayerChallengeHistoryTypeKillEater = 1,
    [pbr::OriginalName("k_EPlayerChallengeHistoryType_DotaPlusRelic")] KEplayerChallengeHistoryTypeDotaPlusRelic = 2,
    [pbr::OriginalName("k_EPlayerChallengeHistoryType_DotaPlusHeroPlayerChallenge")] KEplayerChallengeHistoryTypeDotaPlusHeroPlayerChallenge = 3,
    [pbr::OriginalName("k_EPlayerChallengeHistoryType_InGameEventChallenge")] KEplayerChallengeHistoryTypeInGameEventChallenge = 4,
    [pbr::OriginalName("k_EPlayerChallengeHistoryType_GuildContract")] KEplayerChallengeHistoryTypeGuildContract = 5,
  }

  public enum EOverwatchReportReason {
    [pbr::OriginalName("k_EOverwatchReportReason_Unknown")] KEoverwatchReportReasonUnknown = 0,
    [pbr::OriginalName("k_EOverwatchReportReason_Cheating")] KEoverwatchReportReasonCheating = 1,
    [pbr::OriginalName("k_EOverwatchReportReason_Feeding")] KEoverwatchReportReasonFeeding = 2,
    [pbr::OriginalName("k_EOverwatchReportReason_Griefing")] KEoverwatchReportReasonGriefing = 3,
    [pbr::OriginalName("k_EOverwatchReportReason_Suspicious")] KEoverwatchReportReasonSuspicious = 4,
    [pbr::OriginalName("k_EOverwatchReportReason_AbilityAbuse")] KEoverwatchReportReasonAbilityAbuse = 5,
  }

  public enum ECandyShopUpgrade {
    [pbr::OriginalName("k_ECandyShopUpgradeInvalid")] KEcandyShopUpgradeInvalid = -1,
    [pbr::OriginalName("k_ECandyShopUpgrade_InventorySize")] KEcandyShopUpgradeInventorySize = 0,
    [pbr::OriginalName("k_ECandyShopUpgrade_RewardShelf")] KEcandyShopUpgradeRewardShelf = 1,
    [pbr::OriginalName("k_ECandyShopUpgrade_ExtraExchangeRecipe")] KEcandyShopUpgradeExtraExchangeRecipe = 2,
  }

  public enum EItemSuggestPreference {
    [pbr::OriginalName("k_EItemSuggestPreference_None")] KEitemSuggestPreferenceNone = 0,
    [pbr::OriginalName("k_EItemSuggestPreference_Liked")] KEitemSuggestPreferenceLiked = 1,
    [pbr::OriginalName("k_EItemSuggestPreference_Disliked")] KEitemSuggestPreferenceDisliked = 2,
  }

  public enum ETimerAlertType {
    [pbr::OriginalName("k_TimerAlertType_PowerRune")] KTimerAlertTypePowerRune = 1,
    [pbr::OriginalName("k_TimerAlertType_BountyRune")] KTimerAlertTypeBountyRune = 2,
    [pbr::OriginalName("k_TimerAlertType_WisdomShrine")] KTimerAlertTypeWisdomShrine = 3,
    [pbr::OriginalName("k_TimerAlertType_JungleCamps")] KTimerAlertTypeJungleCamps = 4,
    [pbr::OriginalName("k_TimerAlertType_LotusPool")] KTimerAlertTypeLotusPool = 5,
  }

  #endregion

  #region Messages
  public sealed partial class CDOTAClientHardwareSpecs : pb::IMessage<CDOTAClientHardwareSpecs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAClientHardwareSpecs> _parser = new pb::MessageParser<CDOTAClientHardwareSpecs>(() => new CDOTAClientHardwareSpecs());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAClientHardwareSpecs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAClientHardwareSpecs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAClientHardwareSpecs(CDOTAClientHardwareSpecs other) : this() {
      _hasBits0 = other._hasBits0;
      logicalProcessors_ = other.logicalProcessors_;
      cpuCyclesPerSecond_ = other.cpuCyclesPerSecond_;
      totalPhysicalMemory_ = other.totalPhysicalMemory_;
      is64BitOs_ = other.is64BitOs_;
      uploadMeasurement_ = other.uploadMeasurement_;
      preferNotHost_ = other.preferNotHost_;
      crc_ = other.crc_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAClientHardwareSpecs Clone() {
      return new CDOTAClientHardwareSpecs(this);
    }

    /// <summary>Field number for the "logical_processors" field.</summary>
    public const int LogicalProcessorsFieldNumber = 1;
    private readonly static uint LogicalProcessorsDefaultValue = 0;

    private uint logicalProcessors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LogicalProcessors {
      get { if ((_hasBits0 & 1) != 0) { return logicalProcessors_; } else { return LogicalProcessorsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        logicalProcessors_ = value;
      }
    }
    /// <summary>Gets whether the "logical_processors" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLogicalProcessors {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "logical_processors" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLogicalProcessors() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cpu_cycles_per_second" field.</summary>
    public const int CpuCyclesPerSecondFieldNumber = 2;
    private readonly static ulong CpuCyclesPerSecondDefaultValue = 0UL;

    private ulong cpuCyclesPerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CpuCyclesPerSecond {
      get { if ((_hasBits0 & 2) != 0) { return cpuCyclesPerSecond_; } else { return CpuCyclesPerSecondDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cpuCyclesPerSecond_ = value;
      }
    }
    /// <summary>Gets whether the "cpu_cycles_per_second" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpuCyclesPerSecond {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cpu_cycles_per_second" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpuCyclesPerSecond() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_physical_memory" field.</summary>
    public const int TotalPhysicalMemoryFieldNumber = 3;
    private readonly static ulong TotalPhysicalMemoryDefaultValue = 0UL;

    private ulong totalPhysicalMemory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalPhysicalMemory {
      get { if ((_hasBits0 & 4) != 0) { return totalPhysicalMemory_; } else { return TotalPhysicalMemoryDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalPhysicalMemory_ = value;
      }
    }
    /// <summary>Gets whether the "total_physical_memory" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalPhysicalMemory {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_physical_memory" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalPhysicalMemory() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_64_bit_os" field.</summary>
    public const int Is64BitOsFieldNumber = 4;
    private readonly static bool Is64BitOsDefaultValue = false;

    private bool is64BitOs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Is64BitOs {
      get { if ((_hasBits0 & 8) != 0) { return is64BitOs_; } else { return Is64BitOsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        is64BitOs_ = value;
      }
    }
    /// <summary>Gets whether the "is_64_bit_os" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIs64BitOs {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_64_bit_os" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIs64BitOs() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "upload_measurement" field.</summary>
    public const int UploadMeasurementFieldNumber = 5;
    private readonly static ulong UploadMeasurementDefaultValue = 0UL;

    private ulong uploadMeasurement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UploadMeasurement {
      get { if ((_hasBits0 & 16) != 0) { return uploadMeasurement_; } else { return UploadMeasurementDefaultValue; } }
      set {
        _hasBits0 |= 16;
        uploadMeasurement_ = value;
      }
    }
    /// <summary>Gets whether the "upload_measurement" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUploadMeasurement {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "upload_measurement" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUploadMeasurement() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "prefer_not_host" field.</summary>
    public const int PreferNotHostFieldNumber = 6;
    private readonly static bool PreferNotHostDefaultValue = false;

    private bool preferNotHost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreferNotHost {
      get { if ((_hasBits0 & 32) != 0) { return preferNotHost_; } else { return PreferNotHostDefaultValue; } }
      set {
        _hasBits0 |= 32;
        preferNotHost_ = value;
      }
    }
    /// <summary>Gets whether the "prefer_not_host" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreferNotHost {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "prefer_not_host" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreferNotHost() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "crc" field.</summary>
    public const int CrcFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_crc_codec
        = pb::FieldCodec.ForUInt32(56);
    private readonly pbc::RepeatedField<uint> crc_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Crc {
      get { return crc_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAClientHardwareSpecs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAClientHardwareSpecs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogicalProcessors != other.LogicalProcessors) return false;
      if (CpuCyclesPerSecond != other.CpuCyclesPerSecond) return false;
      if (TotalPhysicalMemory != other.TotalPhysicalMemory) return false;
      if (Is64BitOs != other.Is64BitOs) return false;
      if (UploadMeasurement != other.UploadMeasurement) return false;
      if (PreferNotHost != other.PreferNotHost) return false;
      if(!crc_.Equals(other.crc_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLogicalProcessors) hash ^= LogicalProcessors.GetHashCode();
      if (HasCpuCyclesPerSecond) hash ^= CpuCyclesPerSecond.GetHashCode();
      if (HasTotalPhysicalMemory) hash ^= TotalPhysicalMemory.GetHashCode();
      if (HasIs64BitOs) hash ^= Is64BitOs.GetHashCode();
      if (HasUploadMeasurement) hash ^= UploadMeasurement.GetHashCode();
      if (HasPreferNotHost) hash ^= PreferNotHost.GetHashCode();
      hash ^= crc_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLogicalProcessors) {
        output.WriteRawTag(8);
        output.WriteUInt32(LogicalProcessors);
      }
      if (HasCpuCyclesPerSecond) {
        output.WriteRawTag(17);
        output.WriteFixed64(CpuCyclesPerSecond);
      }
      if (HasTotalPhysicalMemory) {
        output.WriteRawTag(25);
        output.WriteFixed64(TotalPhysicalMemory);
      }
      if (HasIs64BitOs) {
        output.WriteRawTag(32);
        output.WriteBool(Is64BitOs);
      }
      if (HasUploadMeasurement) {
        output.WriteRawTag(40);
        output.WriteUInt64(UploadMeasurement);
      }
      if (HasPreferNotHost) {
        output.WriteRawTag(48);
        output.WriteBool(PreferNotHost);
      }
      crc_.WriteTo(output, _repeated_crc_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLogicalProcessors) {
        output.WriteRawTag(8);
        output.WriteUInt32(LogicalProcessors);
      }
      if (HasCpuCyclesPerSecond) {
        output.WriteRawTag(17);
        output.WriteFixed64(CpuCyclesPerSecond);
      }
      if (HasTotalPhysicalMemory) {
        output.WriteRawTag(25);
        output.WriteFixed64(TotalPhysicalMemory);
      }
      if (HasIs64BitOs) {
        output.WriteRawTag(32);
        output.WriteBool(Is64BitOs);
      }
      if (HasUploadMeasurement) {
        output.WriteRawTag(40);
        output.WriteUInt64(UploadMeasurement);
      }
      if (HasPreferNotHost) {
        output.WriteRawTag(48);
        output.WriteBool(PreferNotHost);
      }
      crc_.WriteTo(ref output, _repeated_crc_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLogicalProcessors) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LogicalProcessors);
      }
      if (HasCpuCyclesPerSecond) {
        size += 1 + 8;
      }
      if (HasTotalPhysicalMemory) {
        size += 1 + 8;
      }
      if (HasIs64BitOs) {
        size += 1 + 1;
      }
      if (HasUploadMeasurement) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UploadMeasurement);
      }
      if (HasPreferNotHost) {
        size += 1 + 1;
      }
      size += crc_.CalculateSize(_repeated_crc_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAClientHardwareSpecs other) {
      if (other == null) {
        return;
      }
      if (other.HasLogicalProcessors) {
        LogicalProcessors = other.LogicalProcessors;
      }
      if (other.HasCpuCyclesPerSecond) {
        CpuCyclesPerSecond = other.CpuCyclesPerSecond;
      }
      if (other.HasTotalPhysicalMemory) {
        TotalPhysicalMemory = other.TotalPhysicalMemory;
      }
      if (other.HasIs64BitOs) {
        Is64BitOs = other.Is64BitOs;
      }
      if (other.HasUploadMeasurement) {
        UploadMeasurement = other.UploadMeasurement;
      }
      if (other.HasPreferNotHost) {
        PreferNotHost = other.PreferNotHost;
      }
      crc_.Add(other.crc_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LogicalProcessors = input.ReadUInt32();
            break;
          }
          case 17: {
            CpuCyclesPerSecond = input.ReadFixed64();
            break;
          }
          case 25: {
            TotalPhysicalMemory = input.ReadFixed64();
            break;
          }
          case 32: {
            Is64BitOs = input.ReadBool();
            break;
          }
          case 40: {
            UploadMeasurement = input.ReadUInt64();
            break;
          }
          case 48: {
            PreferNotHost = input.ReadBool();
            break;
          }
          case 58:
          case 56: {
            crc_.AddEntriesFrom(input, _repeated_crc_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LogicalProcessors = input.ReadUInt32();
            break;
          }
          case 17: {
            CpuCyclesPerSecond = input.ReadFixed64();
            break;
          }
          case 25: {
            TotalPhysicalMemory = input.ReadFixed64();
            break;
          }
          case 32: {
            Is64BitOs = input.ReadBool();
            break;
          }
          case 40: {
            UploadMeasurement = input.ReadUInt64();
            break;
          }
          case 48: {
            PreferNotHost = input.ReadBool();
            break;
          }
          case 58:
          case 56: {
            crc_.AddEntriesFrom(ref input, _repeated_crc_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTASaveGame : pb::IMessage<CDOTASaveGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTASaveGame> _parser = new pb::MessageParser<CDOTASaveGame>(() => new CDOTASaveGame());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTASaveGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTASaveGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTASaveGame(CDOTASaveGame other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      saveTime_ = other.saveTime_;
      players_ = other.players_.Clone();
      saveInstances_ = other.saveInstances_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTASaveGame Clone() {
      return new CDOTASaveGame(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 5;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 2) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "save_time" field.</summary>
    public const int SaveTimeFieldNumber = 2;
    private readonly static uint SaveTimeDefaultValue = 0;

    private uint saveTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SaveTime {
      get { if ((_hasBits0 & 1) != 0) { return saveTime_; } else { return SaveTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        saveTime_ = value;
      }
    }
    /// <summary>Gets whether the "save_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSaveTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "save_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSaveTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTASaveGame.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CDOTASaveGame.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTASaveGame.Types.Player> players_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTASaveGame.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTASaveGame.Types.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "save_instances" field.</summary>
    public const int SaveInstancesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance> _repeated_saveInstances_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance> saveInstances_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance> SaveInstances {
      get { return saveInstances_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTASaveGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTASaveGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (SaveTime != other.SaveTime) return false;
      if(!players_.Equals(other.players_)) return false;
      if(!saveInstances_.Equals(other.saveInstances_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasSaveTime) hash ^= SaveTime.GetHashCode();
      hash ^= players_.GetHashCode();
      hash ^= saveInstances_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSaveTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(SaveTime);
      }
      players_.WriteTo(output, _repeated_players_codec);
      saveInstances_.WriteTo(output, _repeated_saveInstances_codec);
      if (HasMatchId) {
        output.WriteRawTag(40);
        output.WriteUInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSaveTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(SaveTime);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      saveInstances_.WriteTo(ref output, _repeated_saveInstances_codec);
      if (HasMatchId) {
        output.WriteRawTag(40);
        output.WriteUInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasSaveTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SaveTime);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      size += saveInstances_.CalculateSize(_repeated_saveInstances_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTASaveGame other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasSaveTime) {
        SaveTime = other.SaveTime;
      }
      players_.Add(other.players_);
      saveInstances_.Add(other.saveInstances_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            SaveTime = input.ReadUInt32();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 34: {
            saveInstances_.AddEntriesFrom(input, _repeated_saveInstances_codec);
            break;
          }
          case 40: {
            MatchId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            SaveTime = input.ReadUInt32();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 34: {
            saveInstances_.AddEntriesFrom(ref input, _repeated_saveInstances_codec);
            break;
          }
          case 40: {
            MatchId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTASaveGame message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTASaveGame.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          _hasBits0 = other._hasBits0;
          team_ = other.team_;
          name_ = other.name_;
          hero_ = other.hero_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "team" field.</summary>
        public const int TeamFieldNumber = 1;
        private readonly static global::Steam.Protos.Dota2.DOTA_GC_TEAM TeamDefaultValue = global::Steam.Protos.Dota2.DOTA_GC_TEAM.GoodGuys;

        private global::Steam.Protos.Dota2.DOTA_GC_TEAM team_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.DOTA_GC_TEAM Team {
          get { if ((_hasBits0 & 1) != 0) { return team_; } else { return TeamDefaultValue; } }
          set {
            _hasBits0 |= 1;
            team_ = value;
          }
        }
        /// <summary>Gets whether the "team" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "team" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "hero" field.</summary>
        public const int HeroFieldNumber = 3;
        private readonly static string HeroDefaultValue = "";

        private string hero_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Hero {
          get { return hero_ ?? HeroDefaultValue; }
          set {
            hero_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "hero" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHero {
          get { return hero_ != null; }
        }
        /// <summary>Clears the value of the "hero" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHero() {
          hero_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Team != other.Team) return false;
          if (Name != other.Name) return false;
          if (Hero != other.Hero) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTeam) hash ^= Team.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (HasHero) hash ^= Hero.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasTeam) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Team);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasHero) {
            output.WriteRawTag(26);
            output.WriteString(Hero);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasTeam) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Team);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasHero) {
            output.WriteRawTag(26);
            output.WriteString(Hero);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTeam) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Team);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasHero) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Hero);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.HasTeam) {
            Team = other.Team;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasHero) {
            Hero = other.Hero;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Team = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Hero = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Team = (global::Steam.Protos.Dota2.DOTA_GC_TEAM) input.ReadEnum();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Hero = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class SaveInstance : pb::IMessage<SaveInstance>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SaveInstance> _parser = new pb::MessageParser<SaveInstance>(() => new SaveInstance());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SaveInstance> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTASaveGame.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SaveInstance() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SaveInstance(SaveInstance other) : this() {
          _hasBits0 = other._hasBits0;
          gameTime_ = other.gameTime_;
          team1Score_ = other.team1Score_;
          team2Score_ = other.team2Score_;
          playerPositions_ = other.playerPositions_.Clone();
          saveId_ = other.saveId_;
          saveTime_ = other.saveTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SaveInstance Clone() {
          return new SaveInstance(this);
        }

        /// <summary>Field number for the "game_time" field.</summary>
        public const int GameTimeFieldNumber = 2;
        private readonly static uint GameTimeDefaultValue = 0;

        private uint gameTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameTime {
          get { if ((_hasBits0 & 1) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            gameTime_ = value;
          }
        }
        /// <summary>Gets whether the "game_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameTime {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "game_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameTime() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "team1_score" field.</summary>
        public const int Team1ScoreFieldNumber = 3;
        private readonly static uint Team1ScoreDefaultValue = 0;

        private uint team1Score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team1Score {
          get { if ((_hasBits0 & 2) != 0) { return team1Score_; } else { return Team1ScoreDefaultValue; } }
          set {
            _hasBits0 |= 2;
            team1Score_ = value;
          }
        }
        /// <summary>Gets whether the "team1_score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam1Score {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "team1_score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam1Score() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "team2_score" field.</summary>
        public const int Team2ScoreFieldNumber = 4;
        private readonly static uint Team2ScoreDefaultValue = 0;

        private uint team2Score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Team2Score {
          get { if ((_hasBits0 & 4) != 0) { return team2Score_; } else { return Team2ScoreDefaultValue; } }
          set {
            _hasBits0 |= 4;
            team2Score_ = value;
          }
        }
        /// <summary>Gets whether the "team2_score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTeam2Score {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "team2_score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTeam2Score() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "player_positions" field.</summary>
        public const int PlayerPositionsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance.Types.PlayerPositions> _repeated_playerPositions_codec
            = pb::FieldCodec.ForMessage(42, global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance.Types.PlayerPositions.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance.Types.PlayerPositions> playerPositions_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance.Types.PlayerPositions>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance.Types.PlayerPositions> PlayerPositions {
          get { return playerPositions_; }
        }

        /// <summary>Field number for the "save_id" field.</summary>
        public const int SaveIdFieldNumber = 6;
        private readonly static uint SaveIdDefaultValue = 0;

        private uint saveId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SaveId {
          get { if ((_hasBits0 & 8) != 0) { return saveId_; } else { return SaveIdDefaultValue; } }
          set {
            _hasBits0 |= 8;
            saveId_ = value;
          }
        }
        /// <summary>Gets whether the "save_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSaveId {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "save_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSaveId() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "save_time" field.</summary>
        public const int SaveTimeFieldNumber = 7;
        private readonly static uint SaveTimeDefaultValue = 0;

        private uint saveTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SaveTime {
          get { if ((_hasBits0 & 16) != 0) { return saveTime_; } else { return SaveTimeDefaultValue; } }
          set {
            _hasBits0 |= 16;
            saveTime_ = value;
          }
        }
        /// <summary>Gets whether the "save_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSaveTime {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "save_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSaveTime() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SaveInstance);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SaveInstance other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GameTime != other.GameTime) return false;
          if (Team1Score != other.Team1Score) return false;
          if (Team2Score != other.Team2Score) return false;
          if(!playerPositions_.Equals(other.playerPositions_)) return false;
          if (SaveId != other.SaveId) return false;
          if (SaveTime != other.SaveTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasGameTime) hash ^= GameTime.GetHashCode();
          if (HasTeam1Score) hash ^= Team1Score.GetHashCode();
          if (HasTeam2Score) hash ^= Team2Score.GetHashCode();
          hash ^= playerPositions_.GetHashCode();
          if (HasSaveId) hash ^= SaveId.GetHashCode();
          if (HasSaveTime) hash ^= SaveTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasGameTime) {
            output.WriteRawTag(16);
            output.WriteUInt32(GameTime);
          }
          if (HasTeam1Score) {
            output.WriteRawTag(24);
            output.WriteUInt32(Team1Score);
          }
          if (HasTeam2Score) {
            output.WriteRawTag(32);
            output.WriteUInt32(Team2Score);
          }
          playerPositions_.WriteTo(output, _repeated_playerPositions_codec);
          if (HasSaveId) {
            output.WriteRawTag(48);
            output.WriteUInt32(SaveId);
          }
          if (HasSaveTime) {
            output.WriteRawTag(56);
            output.WriteUInt32(SaveTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasGameTime) {
            output.WriteRawTag(16);
            output.WriteUInt32(GameTime);
          }
          if (HasTeam1Score) {
            output.WriteRawTag(24);
            output.WriteUInt32(Team1Score);
          }
          if (HasTeam2Score) {
            output.WriteRawTag(32);
            output.WriteUInt32(Team2Score);
          }
          playerPositions_.WriteTo(ref output, _repeated_playerPositions_codec);
          if (HasSaveId) {
            output.WriteRawTag(48);
            output.WriteUInt32(SaveId);
          }
          if (HasSaveTime) {
            output.WriteRawTag(56);
            output.WriteUInt32(SaveTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasGameTime) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameTime);
          }
          if (HasTeam1Score) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team1Score);
          }
          if (HasTeam2Score) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team2Score);
          }
          size += playerPositions_.CalculateSize(_repeated_playerPositions_codec);
          if (HasSaveId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SaveId);
          }
          if (HasSaveTime) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SaveTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SaveInstance other) {
          if (other == null) {
            return;
          }
          if (other.HasGameTime) {
            GameTime = other.GameTime;
          }
          if (other.HasTeam1Score) {
            Team1Score = other.Team1Score;
          }
          if (other.HasTeam2Score) {
            Team2Score = other.Team2Score;
          }
          playerPositions_.Add(other.playerPositions_);
          if (other.HasSaveId) {
            SaveId = other.SaveId;
          }
          if (other.HasSaveTime) {
            SaveTime = other.SaveTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 16: {
                GameTime = input.ReadUInt32();
                break;
              }
              case 24: {
                Team1Score = input.ReadUInt32();
                break;
              }
              case 32: {
                Team2Score = input.ReadUInt32();
                break;
              }
              case 42: {
                playerPositions_.AddEntriesFrom(input, _repeated_playerPositions_codec);
                break;
              }
              case 48: {
                SaveId = input.ReadUInt32();
                break;
              }
              case 56: {
                SaveTime = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 16: {
                GameTime = input.ReadUInt32();
                break;
              }
              case 24: {
                Team1Score = input.ReadUInt32();
                break;
              }
              case 32: {
                Team2Score = input.ReadUInt32();
                break;
              }
              case 42: {
                playerPositions_.AddEntriesFrom(ref input, _repeated_playerPositions_codec);
                break;
              }
              case 48: {
                SaveId = input.ReadUInt32();
                break;
              }
              case 56: {
                SaveTime = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the SaveInstance message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class PlayerPositions : pb::IMessage<PlayerPositions>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<PlayerPositions> _parser = new pb::MessageParser<PlayerPositions>(() => new PlayerPositions());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PlayerPositions> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CDOTASaveGame.Types.SaveInstance.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerPositions() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerPositions(PlayerPositions other) : this() {
              _hasBits0 = other._hasBits0;
              x_ = other.x_;
              y_ = other.y_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerPositions Clone() {
              return new PlayerPositions(this);
            }

            /// <summary>Field number for the "x" field.</summary>
            public const int XFieldNumber = 1;
            private readonly static float XDefaultValue = 0F;

            private float x_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float X {
              get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
              set {
                _hasBits0 |= 1;
                x_ = value;
              }
            }
            /// <summary>Gets whether the "x" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasX {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "x" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearX() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "y" field.</summary>
            public const int YFieldNumber = 2;
            private readonly static float YDefaultValue = 0F;

            private float y_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Y {
              get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
              set {
                _hasBits0 |= 2;
                y_ = value;
              }
            }
            /// <summary>Gets whether the "y" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasY {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "y" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearY() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PlayerPositions);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PlayerPositions other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
              if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasX) {
                output.WriteRawTag(13);
                output.WriteFloat(X);
              }
              if (HasY) {
                output.WriteRawTag(21);
                output.WriteFloat(Y);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasX) {
                output.WriteRawTag(13);
                output.WriteFloat(X);
              }
              if (HasY) {
                output.WriteRawTag(21);
                output.WriteFloat(Y);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasX) {
                size += 1 + 4;
              }
              if (HasY) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PlayerPositions other) {
              if (other == null) {
                return;
              }
              if (other.HasX) {
                X = other.X;
              }
              if (other.HasY) {
                Y = other.Y;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    X = input.ReadFloat();
                    break;
                  }
                  case 21: {
                    Y = input.ReadFloat();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 13: {
                    X = input.ReadFloat();
                    break;
                  }
                  case 21: {
                    Y = input.ReadFloat();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CMsgDOTACombatLogEntry : pb::IMessage<CMsgDOTACombatLogEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgDOTACombatLogEntry> _parser = new pb::MessageParser<CMsgDOTACombatLogEntry>(() => new CMsgDOTACombatLogEntry());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    private int _hasBits2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTACombatLogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTACombatLogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTACombatLogEntry(CMsgDOTACombatLogEntry other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      _hasBits2 = other._hasBits2;
      type_ = other.type_;
      targetName_ = other.targetName_;
      targetSourceName_ = other.targetSourceName_;
      attackerName_ = other.attackerName_;
      damageSourceName_ = other.damageSourceName_;
      inflictorName_ = other.inflictorName_;
      isAttackerIllusion_ = other.isAttackerIllusion_;
      isAttackerHero_ = other.isAttackerHero_;
      isTargetIllusion_ = other.isTargetIllusion_;
      isTargetHero_ = other.isTargetHero_;
      isVisibleRadiant_ = other.isVisibleRadiant_;
      isVisibleDire_ = other.isVisibleDire_;
      value_ = other.value_;
      health_ = other.health_;
      timestamp_ = other.timestamp_;
      stunDuration_ = other.stunDuration_;
      slowDuration_ = other.slowDuration_;
      isAbilityToggleOn_ = other.isAbilityToggleOn_;
      isAbilityToggleOff_ = other.isAbilityToggleOff_;
      abilityLevel_ = other.abilityLevel_;
      locationX_ = other.locationX_;
      locationY_ = other.locationY_;
      goldReason_ = other.goldReason_;
      timestampRaw_ = other.timestampRaw_;
      modifierDuration_ = other.modifierDuration_;
      xpReason_ = other.xpReason_;
      lastHits_ = other.lastHits_;
      attackerTeam_ = other.attackerTeam_;
      targetTeam_ = other.targetTeam_;
      obsWardsPlaced_ = other.obsWardsPlaced_;
      assistPlayer0_ = other.assistPlayer0_;
      assistPlayer1_ = other.assistPlayer1_;
      assistPlayer2_ = other.assistPlayer2_;
      assistPlayer3_ = other.assistPlayer3_;
      stackCount_ = other.stackCount_;
      hiddenModifier_ = other.hiddenModifier_;
      isTargetBuilding_ = other.isTargetBuilding_;
      neutralCampType_ = other.neutralCampType_;
      runeType_ = other.runeType_;
      assistPlayers_ = other.assistPlayers_.Clone();
      isHealSave_ = other.isHealSave_;
      isUltimateAbility_ = other.isUltimateAbility_;
      attackerHeroLevel_ = other.attackerHeroLevel_;
      targetHeroLevel_ = other.targetHeroLevel_;
      xpm_ = other.xpm_;
      gpm_ = other.gpm_;
      eventLocation_ = other.eventLocation_;
      targetIsSelf_ = other.targetIsSelf_;
      damageType_ = other.damageType_;
      invisibilityModifier_ = other.invisibilityModifier_;
      damageCategory_ = other.damageCategory_;
      networth_ = other.networth_;
      buildingType_ = other.buildingType_;
      modifierElapsedDuration_ = other.modifierElapsedDuration_;
      silenceModifier_ = other.silenceModifier_;
      healFromLifesteal_ = other.healFromLifesteal_;
      modifierPurged_ = other.modifierPurged_;
      spellEvaded_ = other.spellEvaded_;
      motionControllerModifier_ = other.motionControllerModifier_;
      longRangeKill_ = other.longRangeKill_;
      modifierPurgeAbility_ = other.modifierPurgeAbility_;
      modifierPurgeNpc_ = other.modifierPurgeNpc_;
      rootModifier_ = other.rootModifier_;
      totalUnitDeathCount_ = other.totalUnitDeathCount_;
      auraModifier_ = other.auraModifier_;
      armorDebuffModifier_ = other.armorDebuffModifier_;
      noPhysicalDamageModifier_ = other.noPhysicalDamageModifier_;
      modifierAbility_ = other.modifierAbility_;
      modifierHidden_ = other.modifierHidden_;
      inflictorIsStolenAbility_ = other.inflictorIsStolenAbility_;
      killEaterEvent_ = other.killEaterEvent_;
      unitStatusLabel_ = other.unitStatusLabel_;
      spellGeneratedAttack_ = other.spellGeneratedAttack_;
      atNightTime_ = other.atNightTime_;
      attackerHasScepter_ = other.attackerHasScepter_;
      neutralCampTeam_ = other.neutralCampTeam_;
      regeneratedHealth_ = other.regeneratedHealth_;
      willReincarnate_ = other.willReincarnate_;
      usesCharges_ = other.usesCharges_;
      trackedStatId_ = other.trackedStatId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTACombatLogEntry Clone() {
      return new CMsgDOTACombatLogEntry(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.DOTA_COMBATLOG_TYPES TypeDefaultValue = global::Steam.Protos.Dota2.DOTA_COMBATLOG_TYPES.DotaCombatlogInvalid;

    private global::Steam.Protos.Dota2.DOTA_COMBATLOG_TYPES type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_COMBATLOG_TYPES Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_name" field.</summary>
    public const int TargetNameFieldNumber = 2;
    private readonly static uint TargetNameDefaultValue = 0;

    private uint targetName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetName {
      get { if ((_hasBits0 & 2) != 0) { return targetName_; } else { return TargetNameDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetName_ = value;
      }
    }
    /// <summary>Gets whether the "target_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetName {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetName() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "target_source_name" field.</summary>
    public const int TargetSourceNameFieldNumber = 3;
    private readonly static uint TargetSourceNameDefaultValue = 0;

    private uint targetSourceName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetSourceName {
      get { if ((_hasBits0 & 4) != 0) { return targetSourceName_; } else { return TargetSourceNameDefaultValue; } }
      set {
        _hasBits0 |= 4;
        targetSourceName_ = value;
      }
    }
    /// <summary>Gets whether the "target_source_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetSourceName {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "target_source_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetSourceName() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "attacker_name" field.</summary>
    public const int AttackerNameFieldNumber = 4;
    private readonly static uint AttackerNameDefaultValue = 0;

    private uint attackerName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackerName {
      get { if ((_hasBits0 & 8) != 0) { return attackerName_; } else { return AttackerNameDefaultValue; } }
      set {
        _hasBits0 |= 8;
        attackerName_ = value;
      }
    }
    /// <summary>Gets whether the "attacker_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackerName {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "attacker_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackerName() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "damage_source_name" field.</summary>
    public const int DamageSourceNameFieldNumber = 5;
    private readonly static uint DamageSourceNameDefaultValue = 0;

    private uint damageSourceName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageSourceName {
      get { if ((_hasBits0 & 16) != 0) { return damageSourceName_; } else { return DamageSourceNameDefaultValue; } }
      set {
        _hasBits0 |= 16;
        damageSourceName_ = value;
      }
    }
    /// <summary>Gets whether the "damage_source_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageSourceName {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "damage_source_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageSourceName() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "inflictor_name" field.</summary>
    public const int InflictorNameFieldNumber = 6;
    private readonly static uint InflictorNameDefaultValue = 0;

    private uint inflictorName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InflictorName {
      get { if ((_hasBits0 & 32) != 0) { return inflictorName_; } else { return InflictorNameDefaultValue; } }
      set {
        _hasBits0 |= 32;
        inflictorName_ = value;
      }
    }
    /// <summary>Gets whether the "inflictor_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInflictorName {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "inflictor_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInflictorName() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_attacker_illusion" field.</summary>
    public const int IsAttackerIllusionFieldNumber = 7;
    private readonly static bool IsAttackerIllusionDefaultValue = false;

    private bool isAttackerIllusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackerIllusion {
      get { if ((_hasBits0 & 64) != 0) { return isAttackerIllusion_; } else { return IsAttackerIllusionDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isAttackerIllusion_ = value;
      }
    }
    /// <summary>Gets whether the "is_attacker_illusion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAttackerIllusion {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_attacker_illusion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAttackerIllusion() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_attacker_hero" field.</summary>
    public const int IsAttackerHeroFieldNumber = 8;
    private readonly static bool IsAttackerHeroDefaultValue = false;

    private bool isAttackerHero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackerHero {
      get { if ((_hasBits0 & 128) != 0) { return isAttackerHero_; } else { return IsAttackerHeroDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isAttackerHero_ = value;
      }
    }
    /// <summary>Gets whether the "is_attacker_hero" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAttackerHero {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_attacker_hero" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAttackerHero() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "is_target_illusion" field.</summary>
    public const int IsTargetIllusionFieldNumber = 9;
    private readonly static bool IsTargetIllusionDefaultValue = false;

    private bool isTargetIllusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetIllusion {
      get { if ((_hasBits0 & 256) != 0) { return isTargetIllusion_; } else { return IsTargetIllusionDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isTargetIllusion_ = value;
      }
    }
    /// <summary>Gets whether the "is_target_illusion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTargetIllusion {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_target_illusion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTargetIllusion() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "is_target_hero" field.</summary>
    public const int IsTargetHeroFieldNumber = 10;
    private readonly static bool IsTargetHeroDefaultValue = false;

    private bool isTargetHero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetHero {
      get { if ((_hasBits0 & 512) != 0) { return isTargetHero_; } else { return IsTargetHeroDefaultValue; } }
      set {
        _hasBits0 |= 512;
        isTargetHero_ = value;
      }
    }
    /// <summary>Gets whether the "is_target_hero" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTargetHero {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "is_target_hero" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTargetHero() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "is_visible_radiant" field.</summary>
    public const int IsVisibleRadiantFieldNumber = 11;
    private readonly static bool IsVisibleRadiantDefaultValue = false;

    private bool isVisibleRadiant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVisibleRadiant {
      get { if ((_hasBits0 & 1024) != 0) { return isVisibleRadiant_; } else { return IsVisibleRadiantDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        isVisibleRadiant_ = value;
      }
    }
    /// <summary>Gets whether the "is_visible_radiant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsVisibleRadiant {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "is_visible_radiant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsVisibleRadiant() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "is_visible_dire" field.</summary>
    public const int IsVisibleDireFieldNumber = 12;
    private readonly static bool IsVisibleDireDefaultValue = false;

    private bool isVisibleDire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVisibleDire {
      get { if ((_hasBits0 & 2048) != 0) { return isVisibleDire_; } else { return IsVisibleDireDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        isVisibleDire_ = value;
      }
    }
    /// <summary>Gets whether the "is_visible_dire" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsVisibleDire {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "is_visible_dire" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsVisibleDire() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 13;
    private readonly static uint ValueDefaultValue = 0;

    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { if ((_hasBits0 & 4096) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 14;
    private readonly static int HealthDefaultValue = 0;

    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { if ((_hasBits0 & 8192) != 0) { return health_; } else { return HealthDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        health_ = value;
      }
    }
    /// <summary>Gets whether the "health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHealth {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHealth() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 15;
    private readonly static float TimestampDefaultValue = 0F;

    private float timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Timestamp {
      get { if ((_hasBits0 & 16384) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "stun_duration" field.</summary>
    public const int StunDurationFieldNumber = 16;
    private readonly static float StunDurationDefaultValue = 0F;

    private float stunDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StunDuration {
      get { if ((_hasBits0 & 32768) != 0) { return stunDuration_; } else { return StunDurationDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        stunDuration_ = value;
      }
    }
    /// <summary>Gets whether the "stun_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStunDuration {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "stun_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStunDuration() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "slow_duration" field.</summary>
    public const int SlowDurationFieldNumber = 17;
    private readonly static float SlowDurationDefaultValue = 0F;

    private float slowDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SlowDuration {
      get { if ((_hasBits0 & 65536) != 0) { return slowDuration_; } else { return SlowDurationDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        slowDuration_ = value;
      }
    }
    /// <summary>Gets whether the "slow_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlowDuration {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "slow_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlowDuration() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "is_ability_toggle_on" field.</summary>
    public const int IsAbilityToggleOnFieldNumber = 18;
    private readonly static bool IsAbilityToggleOnDefaultValue = false;

    private bool isAbilityToggleOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbilityToggleOn {
      get { if ((_hasBits0 & 131072) != 0) { return isAbilityToggleOn_; } else { return IsAbilityToggleOnDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        isAbilityToggleOn_ = value;
      }
    }
    /// <summary>Gets whether the "is_ability_toggle_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAbilityToggleOn {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "is_ability_toggle_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAbilityToggleOn() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "is_ability_toggle_off" field.</summary>
    public const int IsAbilityToggleOffFieldNumber = 19;
    private readonly static bool IsAbilityToggleOffDefaultValue = false;

    private bool isAbilityToggleOff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbilityToggleOff {
      get { if ((_hasBits0 & 262144) != 0) { return isAbilityToggleOff_; } else { return IsAbilityToggleOffDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        isAbilityToggleOff_ = value;
      }
    }
    /// <summary>Gets whether the "is_ability_toggle_off" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAbilityToggleOff {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "is_ability_toggle_off" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAbilityToggleOff() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "ability_level" field.</summary>
    public const int AbilityLevelFieldNumber = 20;
    private readonly static uint AbilityLevelDefaultValue = 0;

    private uint abilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbilityLevel {
      get { if ((_hasBits0 & 524288) != 0) { return abilityLevel_; } else { return AbilityLevelDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        abilityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "ability_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityLevel {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "ability_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityLevel() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "location_x" field.</summary>
    public const int LocationXFieldNumber = 21;
    private readonly static float LocationXDefaultValue = 0F;

    private float locationX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocationX {
      get { if ((_hasBits0 & 1048576) != 0) { return locationX_; } else { return LocationXDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        locationX_ = value;
      }
    }
    /// <summary>Gets whether the "location_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocationX {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "location_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocationX() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "location_y" field.</summary>
    public const int LocationYFieldNumber = 22;
    private readonly static float LocationYDefaultValue = 0F;

    private float locationY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocationY {
      get { if ((_hasBits0 & 2097152) != 0) { return locationY_; } else { return LocationYDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        locationY_ = value;
      }
    }
    /// <summary>Gets whether the "location_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocationY {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "location_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocationY() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "gold_reason" field.</summary>
    public const int GoldReasonFieldNumber = 23;
    private readonly static uint GoldReasonDefaultValue = 0;

    private uint goldReason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoldReason {
      get { if ((_hasBits0 & 4194304) != 0) { return goldReason_; } else { return GoldReasonDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        goldReason_ = value;
      }
    }
    /// <summary>Gets whether the "gold_reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoldReason {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "gold_reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoldReason() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "timestamp_raw" field.</summary>
    public const int TimestampRawFieldNumber = 24;
    private readonly static float TimestampRawDefaultValue = 0F;

    private float timestampRaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimestampRaw {
      get { if ((_hasBits0 & 8388608) != 0) { return timestampRaw_; } else { return TimestampRawDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        timestampRaw_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp_raw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestampRaw {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "timestamp_raw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestampRaw() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "modifier_duration" field.</summary>
    public const int ModifierDurationFieldNumber = 25;
    private readonly static float ModifierDurationDefaultValue = 0F;

    private float modifierDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ModifierDuration {
      get { if ((_hasBits0 & 16777216) != 0) { return modifierDuration_; } else { return ModifierDurationDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        modifierDuration_ = value;
      }
    }
    /// <summary>Gets whether the "modifier_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModifierDuration {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "modifier_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModifierDuration() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "xp_reason" field.</summary>
    public const int XpReasonFieldNumber = 26;
    private readonly static uint XpReasonDefaultValue = 0;

    private uint xpReason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint XpReason {
      get { if ((_hasBits0 & 33554432) != 0) { return xpReason_; } else { return XpReasonDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        xpReason_ = value;
      }
    }
    /// <summary>Gets whether the "xp_reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXpReason {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "xp_reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearXpReason() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "last_hits" field.</summary>
    public const int LastHitsFieldNumber = 27;
    private readonly static uint LastHitsDefaultValue = 0;

    private uint lastHits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastHits {
      get { if ((_hasBits0 & 67108864) != 0) { return lastHits_; } else { return LastHitsDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        lastHits_ = value;
      }
    }
    /// <summary>Gets whether the "last_hits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastHits {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "last_hits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastHits() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "attacker_team" field.</summary>
    public const int AttackerTeamFieldNumber = 28;
    private readonly static uint AttackerTeamDefaultValue = 0;

    private uint attackerTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackerTeam {
      get { if ((_hasBits0 & 134217728) != 0) { return attackerTeam_; } else { return AttackerTeamDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        attackerTeam_ = value;
      }
    }
    /// <summary>Gets whether the "attacker_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackerTeam {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "attacker_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackerTeam() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "target_team" field.</summary>
    public const int TargetTeamFieldNumber = 29;
    private readonly static uint TargetTeamDefaultValue = 0;

    private uint targetTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetTeam {
      get { if ((_hasBits0 & 268435456) != 0) { return targetTeam_; } else { return TargetTeamDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        targetTeam_ = value;
      }
    }
    /// <summary>Gets whether the "target_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetTeam {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "target_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetTeam() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "obs_wards_placed" field.</summary>
    public const int ObsWardsPlacedFieldNumber = 30;
    private readonly static uint ObsWardsPlacedDefaultValue = 0;

    private uint obsWardsPlaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObsWardsPlaced {
      get { if ((_hasBits0 & 536870912) != 0) { return obsWardsPlaced_; } else { return ObsWardsPlacedDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        obsWardsPlaced_ = value;
      }
    }
    /// <summary>Gets whether the "obs_wards_placed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObsWardsPlaced {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "obs_wards_placed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObsWardsPlaced() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "assist_player0" field.</summary>
    public const int AssistPlayer0FieldNumber = 31;
    private readonly static uint AssistPlayer0DefaultValue = 0;

    private uint assistPlayer0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssistPlayer0 {
      get { if ((_hasBits0 & 1073741824) != 0) { return assistPlayer0_; } else { return AssistPlayer0DefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        assistPlayer0_ = value;
      }
    }
    /// <summary>Gets whether the "assist_player0" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssistPlayer0 {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "assist_player0" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssistPlayer0() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "assist_player1" field.</summary>
    public const int AssistPlayer1FieldNumber = 32;
    private readonly static uint AssistPlayer1DefaultValue = 0;

    private uint assistPlayer1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssistPlayer1 {
      get { if ((_hasBits0 & -2147483648) != 0) { return assistPlayer1_; } else { return AssistPlayer1DefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        assistPlayer1_ = value;
      }
    }
    /// <summary>Gets whether the "assist_player1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssistPlayer1 {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "assist_player1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssistPlayer1() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "assist_player2" field.</summary>
    public const int AssistPlayer2FieldNumber = 33;
    private readonly static uint AssistPlayer2DefaultValue = 0;

    private uint assistPlayer2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssistPlayer2 {
      get { if ((_hasBits1 & 1) != 0) { return assistPlayer2_; } else { return AssistPlayer2DefaultValue; } }
      set {
        _hasBits1 |= 1;
        assistPlayer2_ = value;
      }
    }
    /// <summary>Gets whether the "assist_player2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssistPlayer2 {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "assist_player2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssistPlayer2() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "assist_player3" field.</summary>
    public const int AssistPlayer3FieldNumber = 34;
    private readonly static uint AssistPlayer3DefaultValue = 0;

    private uint assistPlayer3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssistPlayer3 {
      get { if ((_hasBits1 & 2) != 0) { return assistPlayer3_; } else { return AssistPlayer3DefaultValue; } }
      set {
        _hasBits1 |= 2;
        assistPlayer3_ = value;
      }
    }
    /// <summary>Gets whether the "assist_player3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssistPlayer3 {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "assist_player3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssistPlayer3() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "stack_count" field.</summary>
    public const int StackCountFieldNumber = 35;
    private readonly static uint StackCountDefaultValue = 0;

    private uint stackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StackCount {
      get { if ((_hasBits1 & 4) != 0) { return stackCount_; } else { return StackCountDefaultValue; } }
      set {
        _hasBits1 |= 4;
        stackCount_ = value;
      }
    }
    /// <summary>Gets whether the "stack_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStackCount {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "stack_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStackCount() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "hidden_modifier" field.</summary>
    public const int HiddenModifierFieldNumber = 36;
    private readonly static bool HiddenModifierDefaultValue = false;

    private bool hiddenModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HiddenModifier {
      get { if ((_hasBits1 & 8) != 0) { return hiddenModifier_; } else { return HiddenModifierDefaultValue; } }
      set {
        _hasBits1 |= 8;
        hiddenModifier_ = value;
      }
    }
    /// <summary>Gets whether the "hidden_modifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHiddenModifier {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "hidden_modifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHiddenModifier() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "is_target_building" field.</summary>
    public const int IsTargetBuildingFieldNumber = 37;
    private readonly static bool IsTargetBuildingDefaultValue = false;

    private bool isTargetBuilding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetBuilding {
      get { if ((_hasBits1 & 16) != 0) { return isTargetBuilding_; } else { return IsTargetBuildingDefaultValue; } }
      set {
        _hasBits1 |= 16;
        isTargetBuilding_ = value;
      }
    }
    /// <summary>Gets whether the "is_target_building" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTargetBuilding {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_target_building" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTargetBuilding() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "neutral_camp_type" field.</summary>
    public const int NeutralCampTypeFieldNumber = 38;
    private readonly static uint NeutralCampTypeDefaultValue = 0;

    private uint neutralCampType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NeutralCampType {
      get { if ((_hasBits1 & 32) != 0) { return neutralCampType_; } else { return NeutralCampTypeDefaultValue; } }
      set {
        _hasBits1 |= 32;
        neutralCampType_ = value;
      }
    }
    /// <summary>Gets whether the "neutral_camp_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNeutralCampType {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "neutral_camp_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNeutralCampType() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "rune_type" field.</summary>
    public const int RuneTypeFieldNumber = 39;
    private readonly static uint RuneTypeDefaultValue = 0;

    private uint runeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RuneType {
      get { if ((_hasBits1 & 64) != 0) { return runeType_; } else { return RuneTypeDefaultValue; } }
      set {
        _hasBits1 |= 64;
        runeType_ = value;
      }
    }
    /// <summary>Gets whether the "rune_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRuneType {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "rune_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRuneType() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "assist_players" field.</summary>
    public const int AssistPlayersFieldNumber = 40;
    private static readonly pb::FieldCodec<int> _repeated_assistPlayers_codec
        = pb::FieldCodec.ForInt32(320);
    private readonly pbc::RepeatedField<int> assistPlayers_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AssistPlayers {
      get { return assistPlayers_; }
    }

    /// <summary>Field number for the "is_heal_save" field.</summary>
    public const int IsHealSaveFieldNumber = 41;
    private readonly static bool IsHealSaveDefaultValue = false;

    private bool isHealSave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHealSave {
      get { if ((_hasBits1 & 128) != 0) { return isHealSave_; } else { return IsHealSaveDefaultValue; } }
      set {
        _hasBits1 |= 128;
        isHealSave_ = value;
      }
    }
    /// <summary>Gets whether the "is_heal_save" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsHealSave {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_heal_save" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsHealSave() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "is_ultimate_ability" field.</summary>
    public const int IsUltimateAbilityFieldNumber = 42;
    private readonly static bool IsUltimateAbilityDefaultValue = false;

    private bool isUltimateAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUltimateAbility {
      get { if ((_hasBits1 & 256) != 0) { return isUltimateAbility_; } else { return IsUltimateAbilityDefaultValue; } }
      set {
        _hasBits1 |= 256;
        isUltimateAbility_ = value;
      }
    }
    /// <summary>Gets whether the "is_ultimate_ability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsUltimateAbility {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_ultimate_ability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsUltimateAbility() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "attacker_hero_level" field.</summary>
    public const int AttackerHeroLevelFieldNumber = 43;
    private readonly static uint AttackerHeroLevelDefaultValue = 0;

    private uint attackerHeroLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackerHeroLevel {
      get { if ((_hasBits1 & 512) != 0) { return attackerHeroLevel_; } else { return AttackerHeroLevelDefaultValue; } }
      set {
        _hasBits1 |= 512;
        attackerHeroLevel_ = value;
      }
    }
    /// <summary>Gets whether the "attacker_hero_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackerHeroLevel {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "attacker_hero_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackerHeroLevel() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "target_hero_level" field.</summary>
    public const int TargetHeroLevelFieldNumber = 44;
    private readonly static uint TargetHeroLevelDefaultValue = 0;

    private uint targetHeroLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetHeroLevel {
      get { if ((_hasBits1 & 1024) != 0) { return targetHeroLevel_; } else { return TargetHeroLevelDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        targetHeroLevel_ = value;
      }
    }
    /// <summary>Gets whether the "target_hero_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetHeroLevel {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "target_hero_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetHeroLevel() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "xpm" field.</summary>
    public const int XpmFieldNumber = 45;
    private readonly static uint XpmDefaultValue = 0;

    private uint xpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Xpm {
      get { if ((_hasBits1 & 2048) != 0) { return xpm_; } else { return XpmDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        xpm_ = value;
      }
    }
    /// <summary>Gets whether the "xpm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXpm {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "xpm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearXpm() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "gpm" field.</summary>
    public const int GpmFieldNumber = 46;
    private readonly static uint GpmDefaultValue = 0;

    private uint gpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gpm {
      get { if ((_hasBits1 & 4096) != 0) { return gpm_; } else { return GpmDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        gpm_ = value;
      }
    }
    /// <summary>Gets whether the "gpm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGpm {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "gpm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGpm() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "event_location" field.</summary>
    public const int EventLocationFieldNumber = 47;
    private readonly static uint EventLocationDefaultValue = 0;

    private uint eventLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventLocation {
      get { if ((_hasBits1 & 8192) != 0) { return eventLocation_; } else { return EventLocationDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        eventLocation_ = value;
      }
    }
    /// <summary>Gets whether the "event_location" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventLocation {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "event_location" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventLocation() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "target_is_self" field.</summary>
    public const int TargetIsSelfFieldNumber = 48;
    private readonly static bool TargetIsSelfDefaultValue = false;

    private bool targetIsSelf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TargetIsSelf {
      get { if ((_hasBits1 & 16384) != 0) { return targetIsSelf_; } else { return TargetIsSelfDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        targetIsSelf_ = value;
      }
    }
    /// <summary>Gets whether the "target_is_self" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetIsSelf {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "target_is_self" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetIsSelf() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "damage_type" field.</summary>
    public const int DamageTypeFieldNumber = 49;
    private readonly static uint DamageTypeDefaultValue = 0;

    private uint damageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageType {
      get { if ((_hasBits1 & 32768) != 0) { return damageType_; } else { return DamageTypeDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        damageType_ = value;
      }
    }
    /// <summary>Gets whether the "damage_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageType {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "damage_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageType() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "invisibility_modifier" field.</summary>
    public const int InvisibilityModifierFieldNumber = 50;
    private readonly static bool InvisibilityModifierDefaultValue = false;

    private bool invisibilityModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InvisibilityModifier {
      get { if ((_hasBits1 & 65536) != 0) { return invisibilityModifier_; } else { return InvisibilityModifierDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        invisibilityModifier_ = value;
      }
    }
    /// <summary>Gets whether the "invisibility_modifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvisibilityModifier {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "invisibility_modifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvisibilityModifier() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "damage_category" field.</summary>
    public const int DamageCategoryFieldNumber = 51;
    private readonly static uint DamageCategoryDefaultValue = 0;

    private uint damageCategory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageCategory {
      get { if ((_hasBits1 & 131072) != 0) { return damageCategory_; } else { return DamageCategoryDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        damageCategory_ = value;
      }
    }
    /// <summary>Gets whether the "damage_category" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageCategory {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "damage_category" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageCategory() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "networth" field.</summary>
    public const int NetworthFieldNumber = 52;
    private readonly static uint NetworthDefaultValue = 0;

    private uint networth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Networth {
      get { if ((_hasBits1 & 262144) != 0) { return networth_; } else { return NetworthDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        networth_ = value;
      }
    }
    /// <summary>Gets whether the "networth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNetworth {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "networth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNetworth() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "building_type" field.</summary>
    public const int BuildingTypeFieldNumber = 53;
    private readonly static uint BuildingTypeDefaultValue = 0;

    private uint buildingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildingType {
      get { if ((_hasBits1 & 524288) != 0) { return buildingType_; } else { return BuildingTypeDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        buildingType_ = value;
      }
    }
    /// <summary>Gets whether the "building_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuildingType {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "building_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuildingType() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "modifier_elapsed_duration" field.</summary>
    public const int ModifierElapsedDurationFieldNumber = 54;
    private readonly static float ModifierElapsedDurationDefaultValue = 0F;

    private float modifierElapsedDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ModifierElapsedDuration {
      get { if ((_hasBits1 & 1048576) != 0) { return modifierElapsedDuration_; } else { return ModifierElapsedDurationDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        modifierElapsedDuration_ = value;
      }
    }
    /// <summary>Gets whether the "modifier_elapsed_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModifierElapsedDuration {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "modifier_elapsed_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModifierElapsedDuration() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "silence_modifier" field.</summary>
    public const int SilenceModifierFieldNumber = 55;
    private readonly static bool SilenceModifierDefaultValue = false;

    private bool silenceModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SilenceModifier {
      get { if ((_hasBits1 & 2097152) != 0) { return silenceModifier_; } else { return SilenceModifierDefaultValue; } }
      set {
        _hasBits1 |= 2097152;
        silenceModifier_ = value;
      }
    }
    /// <summary>Gets whether the "silence_modifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSilenceModifier {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "silence_modifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSilenceModifier() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "heal_from_lifesteal" field.</summary>
    public const int HealFromLifestealFieldNumber = 56;
    private readonly static bool HealFromLifestealDefaultValue = false;

    private bool healFromLifesteal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HealFromLifesteal {
      get { if ((_hasBits1 & 4194304) != 0) { return healFromLifesteal_; } else { return HealFromLifestealDefaultValue; } }
      set {
        _hasBits1 |= 4194304;
        healFromLifesteal_ = value;
      }
    }
    /// <summary>Gets whether the "heal_from_lifesteal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHealFromLifesteal {
      get { return (_hasBits1 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "heal_from_lifesteal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHealFromLifesteal() {
      _hasBits1 &= ~4194304;
    }

    /// <summary>Field number for the "modifier_purged" field.</summary>
    public const int ModifierPurgedFieldNumber = 57;
    private readonly static bool ModifierPurgedDefaultValue = false;

    private bool modifierPurged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ModifierPurged {
      get { if ((_hasBits1 & 8388608) != 0) { return modifierPurged_; } else { return ModifierPurgedDefaultValue; } }
      set {
        _hasBits1 |= 8388608;
        modifierPurged_ = value;
      }
    }
    /// <summary>Gets whether the "modifier_purged" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModifierPurged {
      get { return (_hasBits1 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "modifier_purged" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModifierPurged() {
      _hasBits1 &= ~8388608;
    }

    /// <summary>Field number for the "spell_evaded" field.</summary>
    public const int SpellEvadedFieldNumber = 58;
    private readonly static bool SpellEvadedDefaultValue = false;

    private bool spellEvaded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpellEvaded {
      get { if ((_hasBits1 & 16777216) != 0) { return spellEvaded_; } else { return SpellEvadedDefaultValue; } }
      set {
        _hasBits1 |= 16777216;
        spellEvaded_ = value;
      }
    }
    /// <summary>Gets whether the "spell_evaded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpellEvaded {
      get { return (_hasBits1 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "spell_evaded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpellEvaded() {
      _hasBits1 &= ~16777216;
    }

    /// <summary>Field number for the "motion_controller_modifier" field.</summary>
    public const int MotionControllerModifierFieldNumber = 59;
    private readonly static bool MotionControllerModifierDefaultValue = false;

    private bool motionControllerModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MotionControllerModifier {
      get { if ((_hasBits1 & 33554432) != 0) { return motionControllerModifier_; } else { return MotionControllerModifierDefaultValue; } }
      set {
        _hasBits1 |= 33554432;
        motionControllerModifier_ = value;
      }
    }
    /// <summary>Gets whether the "motion_controller_modifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMotionControllerModifier {
      get { return (_hasBits1 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "motion_controller_modifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMotionControllerModifier() {
      _hasBits1 &= ~33554432;
    }

    /// <summary>Field number for the "long_range_kill" field.</summary>
    public const int LongRangeKillFieldNumber = 60;
    private readonly static bool LongRangeKillDefaultValue = false;

    private bool longRangeKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LongRangeKill {
      get { if ((_hasBits1 & 67108864) != 0) { return longRangeKill_; } else { return LongRangeKillDefaultValue; } }
      set {
        _hasBits1 |= 67108864;
        longRangeKill_ = value;
      }
    }
    /// <summary>Gets whether the "long_range_kill" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLongRangeKill {
      get { return (_hasBits1 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "long_range_kill" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLongRangeKill() {
      _hasBits1 &= ~67108864;
    }

    /// <summary>Field number for the "modifier_purge_ability" field.</summary>
    public const int ModifierPurgeAbilityFieldNumber = 61;
    private readonly static uint ModifierPurgeAbilityDefaultValue = 0;

    private uint modifierPurgeAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModifierPurgeAbility {
      get { if ((_hasBits1 & 134217728) != 0) { return modifierPurgeAbility_; } else { return ModifierPurgeAbilityDefaultValue; } }
      set {
        _hasBits1 |= 134217728;
        modifierPurgeAbility_ = value;
      }
    }
    /// <summary>Gets whether the "modifier_purge_ability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModifierPurgeAbility {
      get { return (_hasBits1 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "modifier_purge_ability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModifierPurgeAbility() {
      _hasBits1 &= ~134217728;
    }

    /// <summary>Field number for the "modifier_purge_npc" field.</summary>
    public const int ModifierPurgeNpcFieldNumber = 62;
    private readonly static uint ModifierPurgeNpcDefaultValue = 0;

    private uint modifierPurgeNpc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModifierPurgeNpc {
      get { if ((_hasBits1 & 268435456) != 0) { return modifierPurgeNpc_; } else { return ModifierPurgeNpcDefaultValue; } }
      set {
        _hasBits1 |= 268435456;
        modifierPurgeNpc_ = value;
      }
    }
    /// <summary>Gets whether the "modifier_purge_npc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModifierPurgeNpc {
      get { return (_hasBits1 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "modifier_purge_npc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModifierPurgeNpc() {
      _hasBits1 &= ~268435456;
    }

    /// <summary>Field number for the "root_modifier" field.</summary>
    public const int RootModifierFieldNumber = 63;
    private readonly static bool RootModifierDefaultValue = false;

    private bool rootModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RootModifier {
      get { if ((_hasBits1 & 536870912) != 0) { return rootModifier_; } else { return RootModifierDefaultValue; } }
      set {
        _hasBits1 |= 536870912;
        rootModifier_ = value;
      }
    }
    /// <summary>Gets whether the "root_modifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRootModifier {
      get { return (_hasBits1 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "root_modifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRootModifier() {
      _hasBits1 &= ~536870912;
    }

    /// <summary>Field number for the "total_unit_death_count" field.</summary>
    public const int TotalUnitDeathCountFieldNumber = 64;
    private readonly static uint TotalUnitDeathCountDefaultValue = 0;

    private uint totalUnitDeathCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalUnitDeathCount {
      get { if ((_hasBits1 & 1073741824) != 0) { return totalUnitDeathCount_; } else { return TotalUnitDeathCountDefaultValue; } }
      set {
        _hasBits1 |= 1073741824;
        totalUnitDeathCount_ = value;
      }
    }
    /// <summary>Gets whether the "total_unit_death_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalUnitDeathCount {
      get { return (_hasBits1 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "total_unit_death_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalUnitDeathCount() {
      _hasBits1 &= ~1073741824;
    }

    /// <summary>Field number for the "aura_modifier" field.</summary>
    public const int AuraModifierFieldNumber = 65;
    private readonly static bool AuraModifierDefaultValue = false;

    private bool auraModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AuraModifier {
      get { if ((_hasBits1 & -2147483648) != 0) { return auraModifier_; } else { return AuraModifierDefaultValue; } }
      set {
        _hasBits1 |= -2147483648;
        auraModifier_ = value;
      }
    }
    /// <summary>Gets whether the "aura_modifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuraModifier {
      get { return (_hasBits1 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "aura_modifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuraModifier() {
      _hasBits1 &= ~-2147483648;
    }

    /// <summary>Field number for the "armor_debuff_modifier" field.</summary>
    public const int ArmorDebuffModifierFieldNumber = 66;
    private readonly static bool ArmorDebuffModifierDefaultValue = false;

    private bool armorDebuffModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ArmorDebuffModifier {
      get { if ((_hasBits2 & 1) != 0) { return armorDebuffModifier_; } else { return ArmorDebuffModifierDefaultValue; } }
      set {
        _hasBits2 |= 1;
        armorDebuffModifier_ = value;
      }
    }
    /// <summary>Gets whether the "armor_debuff_modifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArmorDebuffModifier {
      get { return (_hasBits2 & 1) != 0; }
    }
    /// <summary>Clears the value of the "armor_debuff_modifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArmorDebuffModifier() {
      _hasBits2 &= ~1;
    }

    /// <summary>Field number for the "no_physical_damage_modifier" field.</summary>
    public const int NoPhysicalDamageModifierFieldNumber = 67;
    private readonly static bool NoPhysicalDamageModifierDefaultValue = false;

    private bool noPhysicalDamageModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoPhysicalDamageModifier {
      get { if ((_hasBits2 & 2) != 0) { return noPhysicalDamageModifier_; } else { return NoPhysicalDamageModifierDefaultValue; } }
      set {
        _hasBits2 |= 2;
        noPhysicalDamageModifier_ = value;
      }
    }
    /// <summary>Gets whether the "no_physical_damage_modifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNoPhysicalDamageModifier {
      get { return (_hasBits2 & 2) != 0; }
    }
    /// <summary>Clears the value of the "no_physical_damage_modifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNoPhysicalDamageModifier() {
      _hasBits2 &= ~2;
    }

    /// <summary>Field number for the "modifier_ability" field.</summary>
    public const int ModifierAbilityFieldNumber = 68;
    private readonly static uint ModifierAbilityDefaultValue = 0;

    private uint modifierAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModifierAbility {
      get { if ((_hasBits2 & 4) != 0) { return modifierAbility_; } else { return ModifierAbilityDefaultValue; } }
      set {
        _hasBits2 |= 4;
        modifierAbility_ = value;
      }
    }
    /// <summary>Gets whether the "modifier_ability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModifierAbility {
      get { return (_hasBits2 & 4) != 0; }
    }
    /// <summary>Clears the value of the "modifier_ability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModifierAbility() {
      _hasBits2 &= ~4;
    }

    /// <summary>Field number for the "modifier_hidden" field.</summary>
    public const int ModifierHiddenFieldNumber = 69;
    private readonly static bool ModifierHiddenDefaultValue = false;

    private bool modifierHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ModifierHidden {
      get { if ((_hasBits2 & 8) != 0) { return modifierHidden_; } else { return ModifierHiddenDefaultValue; } }
      set {
        _hasBits2 |= 8;
        modifierHidden_ = value;
      }
    }
    /// <summary>Gets whether the "modifier_hidden" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModifierHidden {
      get { return (_hasBits2 & 8) != 0; }
    }
    /// <summary>Clears the value of the "modifier_hidden" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModifierHidden() {
      _hasBits2 &= ~8;
    }

    /// <summary>Field number for the "inflictor_is_stolen_ability" field.</summary>
    public const int InflictorIsStolenAbilityFieldNumber = 70;
    private readonly static bool InflictorIsStolenAbilityDefaultValue = false;

    private bool inflictorIsStolenAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InflictorIsStolenAbility {
      get { if ((_hasBits2 & 16) != 0) { return inflictorIsStolenAbility_; } else { return InflictorIsStolenAbilityDefaultValue; } }
      set {
        _hasBits2 |= 16;
        inflictorIsStolenAbility_ = value;
      }
    }
    /// <summary>Gets whether the "inflictor_is_stolen_ability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInflictorIsStolenAbility {
      get { return (_hasBits2 & 16) != 0; }
    }
    /// <summary>Clears the value of the "inflictor_is_stolen_ability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInflictorIsStolenAbility() {
      _hasBits2 &= ~16;
    }

    /// <summary>Field number for the "kill_eater_event" field.</summary>
    public const int KillEaterEventFieldNumber = 71;
    private readonly static uint KillEaterEventDefaultValue = 0;

    private uint killEaterEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillEaterEvent {
      get { if ((_hasBits2 & 32) != 0) { return killEaterEvent_; } else { return KillEaterEventDefaultValue; } }
      set {
        _hasBits2 |= 32;
        killEaterEvent_ = value;
      }
    }
    /// <summary>Gets whether the "kill_eater_event" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKillEaterEvent {
      get { return (_hasBits2 & 32) != 0; }
    }
    /// <summary>Clears the value of the "kill_eater_event" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKillEaterEvent() {
      _hasBits2 &= ~32;
    }

    /// <summary>Field number for the "unit_status_label" field.</summary>
    public const int UnitStatusLabelFieldNumber = 72;
    private readonly static uint UnitStatusLabelDefaultValue = 0;

    private uint unitStatusLabel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitStatusLabel {
      get { if ((_hasBits2 & 64) != 0) { return unitStatusLabel_; } else { return UnitStatusLabelDefaultValue; } }
      set {
        _hasBits2 |= 64;
        unitStatusLabel_ = value;
      }
    }
    /// <summary>Gets whether the "unit_status_label" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnitStatusLabel {
      get { return (_hasBits2 & 64) != 0; }
    }
    /// <summary>Clears the value of the "unit_status_label" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnitStatusLabel() {
      _hasBits2 &= ~64;
    }

    /// <summary>Field number for the "spell_generated_attack" field.</summary>
    public const int SpellGeneratedAttackFieldNumber = 73;
    private readonly static bool SpellGeneratedAttackDefaultValue = false;

    private bool spellGeneratedAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpellGeneratedAttack {
      get { if ((_hasBits2 & 128) != 0) { return spellGeneratedAttack_; } else { return SpellGeneratedAttackDefaultValue; } }
      set {
        _hasBits2 |= 128;
        spellGeneratedAttack_ = value;
      }
    }
    /// <summary>Gets whether the "spell_generated_attack" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpellGeneratedAttack {
      get { return (_hasBits2 & 128) != 0; }
    }
    /// <summary>Clears the value of the "spell_generated_attack" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpellGeneratedAttack() {
      _hasBits2 &= ~128;
    }

    /// <summary>Field number for the "at_night_time" field.</summary>
    public const int AtNightTimeFieldNumber = 74;
    private readonly static bool AtNightTimeDefaultValue = false;

    private bool atNightTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AtNightTime {
      get { if ((_hasBits2 & 256) != 0) { return atNightTime_; } else { return AtNightTimeDefaultValue; } }
      set {
        _hasBits2 |= 256;
        atNightTime_ = value;
      }
    }
    /// <summary>Gets whether the "at_night_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAtNightTime {
      get { return (_hasBits2 & 256) != 0; }
    }
    /// <summary>Clears the value of the "at_night_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAtNightTime() {
      _hasBits2 &= ~256;
    }

    /// <summary>Field number for the "attacker_has_scepter" field.</summary>
    public const int AttackerHasScepterFieldNumber = 75;
    private readonly static bool AttackerHasScepterDefaultValue = false;

    private bool attackerHasScepter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AttackerHasScepter {
      get { if ((_hasBits2 & 512) != 0) { return attackerHasScepter_; } else { return AttackerHasScepterDefaultValue; } }
      set {
        _hasBits2 |= 512;
        attackerHasScepter_ = value;
      }
    }
    /// <summary>Gets whether the "attacker_has_scepter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackerHasScepter {
      get { return (_hasBits2 & 512) != 0; }
    }
    /// <summary>Clears the value of the "attacker_has_scepter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackerHasScepter() {
      _hasBits2 &= ~512;
    }

    /// <summary>Field number for the "neutral_camp_team" field.</summary>
    public const int NeutralCampTeamFieldNumber = 76;
    private readonly static uint NeutralCampTeamDefaultValue = 0;

    private uint neutralCampTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NeutralCampTeam {
      get { if ((_hasBits2 & 1024) != 0) { return neutralCampTeam_; } else { return NeutralCampTeamDefaultValue; } }
      set {
        _hasBits2 |= 1024;
        neutralCampTeam_ = value;
      }
    }
    /// <summary>Gets whether the "neutral_camp_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNeutralCampTeam {
      get { return (_hasBits2 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "neutral_camp_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNeutralCampTeam() {
      _hasBits2 &= ~1024;
    }

    /// <summary>Field number for the "regenerated_health" field.</summary>
    public const int RegeneratedHealthFieldNumber = 77;
    private readonly static float RegeneratedHealthDefaultValue = 0F;

    private float regeneratedHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RegeneratedHealth {
      get { if ((_hasBits2 & 2048) != 0) { return regeneratedHealth_; } else { return RegeneratedHealthDefaultValue; } }
      set {
        _hasBits2 |= 2048;
        regeneratedHealth_ = value;
      }
    }
    /// <summary>Gets whether the "regenerated_health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegeneratedHealth {
      get { return (_hasBits2 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "regenerated_health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegeneratedHealth() {
      _hasBits2 &= ~2048;
    }

    /// <summary>Field number for the "will_reincarnate" field.</summary>
    public const int WillReincarnateFieldNumber = 78;
    private readonly static bool WillReincarnateDefaultValue = false;

    private bool willReincarnate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WillReincarnate {
      get { if ((_hasBits2 & 4096) != 0) { return willReincarnate_; } else { return WillReincarnateDefaultValue; } }
      set {
        _hasBits2 |= 4096;
        willReincarnate_ = value;
      }
    }
    /// <summary>Gets whether the "will_reincarnate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWillReincarnate {
      get { return (_hasBits2 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "will_reincarnate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWillReincarnate() {
      _hasBits2 &= ~4096;
    }

    /// <summary>Field number for the "uses_charges" field.</summary>
    public const int UsesChargesFieldNumber = 79;
    private readonly static bool UsesChargesDefaultValue = false;

    private bool usesCharges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsesCharges {
      get { if ((_hasBits2 & 8192) != 0) { return usesCharges_; } else { return UsesChargesDefaultValue; } }
      set {
        _hasBits2 |= 8192;
        usesCharges_ = value;
      }
    }
    /// <summary>Gets whether the "uses_charges" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUsesCharges {
      get { return (_hasBits2 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "uses_charges" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUsesCharges() {
      _hasBits2 &= ~8192;
    }

    /// <summary>Field number for the "tracked_stat_id" field.</summary>
    public const int TrackedStatIdFieldNumber = 80;
    private readonly static uint TrackedStatIdDefaultValue = 0;

    private uint trackedStatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrackedStatId {
      get { if ((_hasBits2 & 16384) != 0) { return trackedStatId_; } else { return TrackedStatIdDefaultValue; } }
      set {
        _hasBits2 |= 16384;
        trackedStatId_ = value;
      }
    }
    /// <summary>Gets whether the "tracked_stat_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrackedStatId {
      get { return (_hasBits2 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "tracked_stat_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrackedStatId() {
      _hasBits2 &= ~16384;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTACombatLogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTACombatLogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TargetName != other.TargetName) return false;
      if (TargetSourceName != other.TargetSourceName) return false;
      if (AttackerName != other.AttackerName) return false;
      if (DamageSourceName != other.DamageSourceName) return false;
      if (InflictorName != other.InflictorName) return false;
      if (IsAttackerIllusion != other.IsAttackerIllusion) return false;
      if (IsAttackerHero != other.IsAttackerHero) return false;
      if (IsTargetIllusion != other.IsTargetIllusion) return false;
      if (IsTargetHero != other.IsTargetHero) return false;
      if (IsVisibleRadiant != other.IsVisibleRadiant) return false;
      if (IsVisibleDire != other.IsVisibleDire) return false;
      if (Value != other.Value) return false;
      if (Health != other.Health) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StunDuration, other.StunDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlowDuration, other.SlowDuration)) return false;
      if (IsAbilityToggleOn != other.IsAbilityToggleOn) return false;
      if (IsAbilityToggleOff != other.IsAbilityToggleOff) return false;
      if (AbilityLevel != other.AbilityLevel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocationX, other.LocationX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocationY, other.LocationY)) return false;
      if (GoldReason != other.GoldReason) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimestampRaw, other.TimestampRaw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ModifierDuration, other.ModifierDuration)) return false;
      if (XpReason != other.XpReason) return false;
      if (LastHits != other.LastHits) return false;
      if (AttackerTeam != other.AttackerTeam) return false;
      if (TargetTeam != other.TargetTeam) return false;
      if (ObsWardsPlaced != other.ObsWardsPlaced) return false;
      if (AssistPlayer0 != other.AssistPlayer0) return false;
      if (AssistPlayer1 != other.AssistPlayer1) return false;
      if (AssistPlayer2 != other.AssistPlayer2) return false;
      if (AssistPlayer3 != other.AssistPlayer3) return false;
      if (StackCount != other.StackCount) return false;
      if (HiddenModifier != other.HiddenModifier) return false;
      if (IsTargetBuilding != other.IsTargetBuilding) return false;
      if (NeutralCampType != other.NeutralCampType) return false;
      if (RuneType != other.RuneType) return false;
      if(!assistPlayers_.Equals(other.assistPlayers_)) return false;
      if (IsHealSave != other.IsHealSave) return false;
      if (IsUltimateAbility != other.IsUltimateAbility) return false;
      if (AttackerHeroLevel != other.AttackerHeroLevel) return false;
      if (TargetHeroLevel != other.TargetHeroLevel) return false;
      if (Xpm != other.Xpm) return false;
      if (Gpm != other.Gpm) return false;
      if (EventLocation != other.EventLocation) return false;
      if (TargetIsSelf != other.TargetIsSelf) return false;
      if (DamageType != other.DamageType) return false;
      if (InvisibilityModifier != other.InvisibilityModifier) return false;
      if (DamageCategory != other.DamageCategory) return false;
      if (Networth != other.Networth) return false;
      if (BuildingType != other.BuildingType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ModifierElapsedDuration, other.ModifierElapsedDuration)) return false;
      if (SilenceModifier != other.SilenceModifier) return false;
      if (HealFromLifesteal != other.HealFromLifesteal) return false;
      if (ModifierPurged != other.ModifierPurged) return false;
      if (SpellEvaded != other.SpellEvaded) return false;
      if (MotionControllerModifier != other.MotionControllerModifier) return false;
      if (LongRangeKill != other.LongRangeKill) return false;
      if (ModifierPurgeAbility != other.ModifierPurgeAbility) return false;
      if (ModifierPurgeNpc != other.ModifierPurgeNpc) return false;
      if (RootModifier != other.RootModifier) return false;
      if (TotalUnitDeathCount != other.TotalUnitDeathCount) return false;
      if (AuraModifier != other.AuraModifier) return false;
      if (ArmorDebuffModifier != other.ArmorDebuffModifier) return false;
      if (NoPhysicalDamageModifier != other.NoPhysicalDamageModifier) return false;
      if (ModifierAbility != other.ModifierAbility) return false;
      if (ModifierHidden != other.ModifierHidden) return false;
      if (InflictorIsStolenAbility != other.InflictorIsStolenAbility) return false;
      if (KillEaterEvent != other.KillEaterEvent) return false;
      if (UnitStatusLabel != other.UnitStatusLabel) return false;
      if (SpellGeneratedAttack != other.SpellGeneratedAttack) return false;
      if (AtNightTime != other.AtNightTime) return false;
      if (AttackerHasScepter != other.AttackerHasScepter) return false;
      if (NeutralCampTeam != other.NeutralCampTeam) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RegeneratedHealth, other.RegeneratedHealth)) return false;
      if (WillReincarnate != other.WillReincarnate) return false;
      if (UsesCharges != other.UsesCharges) return false;
      if (TrackedStatId != other.TrackedStatId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasTargetName) hash ^= TargetName.GetHashCode();
      if (HasTargetSourceName) hash ^= TargetSourceName.GetHashCode();
      if (HasAttackerName) hash ^= AttackerName.GetHashCode();
      if (HasDamageSourceName) hash ^= DamageSourceName.GetHashCode();
      if (HasInflictorName) hash ^= InflictorName.GetHashCode();
      if (HasIsAttackerIllusion) hash ^= IsAttackerIllusion.GetHashCode();
      if (HasIsAttackerHero) hash ^= IsAttackerHero.GetHashCode();
      if (HasIsTargetIllusion) hash ^= IsTargetIllusion.GetHashCode();
      if (HasIsTargetHero) hash ^= IsTargetHero.GetHashCode();
      if (HasIsVisibleRadiant) hash ^= IsVisibleRadiant.GetHashCode();
      if (HasIsVisibleDire) hash ^= IsVisibleDire.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasHealth) hash ^= Health.GetHashCode();
      if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Timestamp);
      if (HasStunDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StunDuration);
      if (HasSlowDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlowDuration);
      if (HasIsAbilityToggleOn) hash ^= IsAbilityToggleOn.GetHashCode();
      if (HasIsAbilityToggleOff) hash ^= IsAbilityToggleOff.GetHashCode();
      if (HasAbilityLevel) hash ^= AbilityLevel.GetHashCode();
      if (HasLocationX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocationX);
      if (HasLocationY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocationY);
      if (HasGoldReason) hash ^= GoldReason.GetHashCode();
      if (HasTimestampRaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimestampRaw);
      if (HasModifierDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ModifierDuration);
      if (HasXpReason) hash ^= XpReason.GetHashCode();
      if (HasLastHits) hash ^= LastHits.GetHashCode();
      if (HasAttackerTeam) hash ^= AttackerTeam.GetHashCode();
      if (HasTargetTeam) hash ^= TargetTeam.GetHashCode();
      if (HasObsWardsPlaced) hash ^= ObsWardsPlaced.GetHashCode();
      if (HasAssistPlayer0) hash ^= AssistPlayer0.GetHashCode();
      if (HasAssistPlayer1) hash ^= AssistPlayer1.GetHashCode();
      if (HasAssistPlayer2) hash ^= AssistPlayer2.GetHashCode();
      if (HasAssistPlayer3) hash ^= AssistPlayer3.GetHashCode();
      if (HasStackCount) hash ^= StackCount.GetHashCode();
      if (HasHiddenModifier) hash ^= HiddenModifier.GetHashCode();
      if (HasIsTargetBuilding) hash ^= IsTargetBuilding.GetHashCode();
      if (HasNeutralCampType) hash ^= NeutralCampType.GetHashCode();
      if (HasRuneType) hash ^= RuneType.GetHashCode();
      hash ^= assistPlayers_.GetHashCode();
      if (HasIsHealSave) hash ^= IsHealSave.GetHashCode();
      if (HasIsUltimateAbility) hash ^= IsUltimateAbility.GetHashCode();
      if (HasAttackerHeroLevel) hash ^= AttackerHeroLevel.GetHashCode();
      if (HasTargetHeroLevel) hash ^= TargetHeroLevel.GetHashCode();
      if (HasXpm) hash ^= Xpm.GetHashCode();
      if (HasGpm) hash ^= Gpm.GetHashCode();
      if (HasEventLocation) hash ^= EventLocation.GetHashCode();
      if (HasTargetIsSelf) hash ^= TargetIsSelf.GetHashCode();
      if (HasDamageType) hash ^= DamageType.GetHashCode();
      if (HasInvisibilityModifier) hash ^= InvisibilityModifier.GetHashCode();
      if (HasDamageCategory) hash ^= DamageCategory.GetHashCode();
      if (HasNetworth) hash ^= Networth.GetHashCode();
      if (HasBuildingType) hash ^= BuildingType.GetHashCode();
      if (HasModifierElapsedDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ModifierElapsedDuration);
      if (HasSilenceModifier) hash ^= SilenceModifier.GetHashCode();
      if (HasHealFromLifesteal) hash ^= HealFromLifesteal.GetHashCode();
      if (HasModifierPurged) hash ^= ModifierPurged.GetHashCode();
      if (HasSpellEvaded) hash ^= SpellEvaded.GetHashCode();
      if (HasMotionControllerModifier) hash ^= MotionControllerModifier.GetHashCode();
      if (HasLongRangeKill) hash ^= LongRangeKill.GetHashCode();
      if (HasModifierPurgeAbility) hash ^= ModifierPurgeAbility.GetHashCode();
      if (HasModifierPurgeNpc) hash ^= ModifierPurgeNpc.GetHashCode();
      if (HasRootModifier) hash ^= RootModifier.GetHashCode();
      if (HasTotalUnitDeathCount) hash ^= TotalUnitDeathCount.GetHashCode();
      if (HasAuraModifier) hash ^= AuraModifier.GetHashCode();
      if (HasArmorDebuffModifier) hash ^= ArmorDebuffModifier.GetHashCode();
      if (HasNoPhysicalDamageModifier) hash ^= NoPhysicalDamageModifier.GetHashCode();
      if (HasModifierAbility) hash ^= ModifierAbility.GetHashCode();
      if (HasModifierHidden) hash ^= ModifierHidden.GetHashCode();
      if (HasInflictorIsStolenAbility) hash ^= InflictorIsStolenAbility.GetHashCode();
      if (HasKillEaterEvent) hash ^= KillEaterEvent.GetHashCode();
      if (HasUnitStatusLabel) hash ^= UnitStatusLabel.GetHashCode();
      if (HasSpellGeneratedAttack) hash ^= SpellGeneratedAttack.GetHashCode();
      if (HasAtNightTime) hash ^= AtNightTime.GetHashCode();
      if (HasAttackerHasScepter) hash ^= AttackerHasScepter.GetHashCode();
      if (HasNeutralCampTeam) hash ^= NeutralCampTeam.GetHashCode();
      if (HasRegeneratedHealth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RegeneratedHealth);
      if (HasWillReincarnate) hash ^= WillReincarnate.GetHashCode();
      if (HasUsesCharges) hash ^= UsesCharges.GetHashCode();
      if (HasTrackedStatId) hash ^= TrackedStatId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasTargetName) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetName);
      }
      if (HasTargetSourceName) {
        output.WriteRawTag(24);
        output.WriteUInt32(TargetSourceName);
      }
      if (HasAttackerName) {
        output.WriteRawTag(32);
        output.WriteUInt32(AttackerName);
      }
      if (HasDamageSourceName) {
        output.WriteRawTag(40);
        output.WriteUInt32(DamageSourceName);
      }
      if (HasInflictorName) {
        output.WriteRawTag(48);
        output.WriteUInt32(InflictorName);
      }
      if (HasIsAttackerIllusion) {
        output.WriteRawTag(56);
        output.WriteBool(IsAttackerIllusion);
      }
      if (HasIsAttackerHero) {
        output.WriteRawTag(64);
        output.WriteBool(IsAttackerHero);
      }
      if (HasIsTargetIllusion) {
        output.WriteRawTag(72);
        output.WriteBool(IsTargetIllusion);
      }
      if (HasIsTargetHero) {
        output.WriteRawTag(80);
        output.WriteBool(IsTargetHero);
      }
      if (HasIsVisibleRadiant) {
        output.WriteRawTag(88);
        output.WriteBool(IsVisibleRadiant);
      }
      if (HasIsVisibleDire) {
        output.WriteRawTag(96);
        output.WriteBool(IsVisibleDire);
      }
      if (HasValue) {
        output.WriteRawTag(104);
        output.WriteUInt32(Value);
      }
      if (HasHealth) {
        output.WriteRawTag(112);
        output.WriteInt32(Health);
      }
      if (HasTimestamp) {
        output.WriteRawTag(125);
        output.WriteFloat(Timestamp);
      }
      if (HasStunDuration) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(StunDuration);
      }
      if (HasSlowDuration) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(SlowDuration);
      }
      if (HasIsAbilityToggleOn) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsAbilityToggleOn);
      }
      if (HasIsAbilityToggleOff) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsAbilityToggleOff);
      }
      if (HasAbilityLevel) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(AbilityLevel);
      }
      if (HasLocationX) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(LocationX);
      }
      if (HasLocationY) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(LocationY);
      }
      if (HasGoldReason) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(GoldReason);
      }
      if (HasTimestampRaw) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(TimestampRaw);
      }
      if (HasModifierDuration) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(ModifierDuration);
      }
      if (HasXpReason) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(XpReason);
      }
      if (HasLastHits) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(LastHits);
      }
      if (HasAttackerTeam) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(AttackerTeam);
      }
      if (HasTargetTeam) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(TargetTeam);
      }
      if (HasObsWardsPlaced) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(ObsWardsPlaced);
      }
      if (HasAssistPlayer0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(AssistPlayer0);
      }
      if (HasAssistPlayer1) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(AssistPlayer1);
      }
      if (HasAssistPlayer2) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(AssistPlayer2);
      }
      if (HasAssistPlayer3) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(AssistPlayer3);
      }
      if (HasStackCount) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(StackCount);
      }
      if (HasHiddenModifier) {
        output.WriteRawTag(160, 2);
        output.WriteBool(HiddenModifier);
      }
      if (HasIsTargetBuilding) {
        output.WriteRawTag(168, 2);
        output.WriteBool(IsTargetBuilding);
      }
      if (HasNeutralCampType) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(NeutralCampType);
      }
      if (HasRuneType) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(RuneType);
      }
      assistPlayers_.WriteTo(output, _repeated_assistPlayers_codec);
      if (HasIsHealSave) {
        output.WriteRawTag(200, 2);
        output.WriteBool(IsHealSave);
      }
      if (HasIsUltimateAbility) {
        output.WriteRawTag(208, 2);
        output.WriteBool(IsUltimateAbility);
      }
      if (HasAttackerHeroLevel) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(AttackerHeroLevel);
      }
      if (HasTargetHeroLevel) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(TargetHeroLevel);
      }
      if (HasXpm) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(Xpm);
      }
      if (HasGpm) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(Gpm);
      }
      if (HasEventLocation) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(EventLocation);
      }
      if (HasTargetIsSelf) {
        output.WriteRawTag(128, 3);
        output.WriteBool(TargetIsSelf);
      }
      if (HasDamageType) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(DamageType);
      }
      if (HasInvisibilityModifier) {
        output.WriteRawTag(144, 3);
        output.WriteBool(InvisibilityModifier);
      }
      if (HasDamageCategory) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(DamageCategory);
      }
      if (HasNetworth) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(Networth);
      }
      if (HasBuildingType) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(BuildingType);
      }
      if (HasModifierElapsedDuration) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(ModifierElapsedDuration);
      }
      if (HasSilenceModifier) {
        output.WriteRawTag(184, 3);
        output.WriteBool(SilenceModifier);
      }
      if (HasHealFromLifesteal) {
        output.WriteRawTag(192, 3);
        output.WriteBool(HealFromLifesteal);
      }
      if (HasModifierPurged) {
        output.WriteRawTag(200, 3);
        output.WriteBool(ModifierPurged);
      }
      if (HasSpellEvaded) {
        output.WriteRawTag(208, 3);
        output.WriteBool(SpellEvaded);
      }
      if (HasMotionControllerModifier) {
        output.WriteRawTag(216, 3);
        output.WriteBool(MotionControllerModifier);
      }
      if (HasLongRangeKill) {
        output.WriteRawTag(224, 3);
        output.WriteBool(LongRangeKill);
      }
      if (HasModifierPurgeAbility) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(ModifierPurgeAbility);
      }
      if (HasModifierPurgeNpc) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(ModifierPurgeNpc);
      }
      if (HasRootModifier) {
        output.WriteRawTag(248, 3);
        output.WriteBool(RootModifier);
      }
      if (HasTotalUnitDeathCount) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(TotalUnitDeathCount);
      }
      if (HasAuraModifier) {
        output.WriteRawTag(136, 4);
        output.WriteBool(AuraModifier);
      }
      if (HasArmorDebuffModifier) {
        output.WriteRawTag(144, 4);
        output.WriteBool(ArmorDebuffModifier);
      }
      if (HasNoPhysicalDamageModifier) {
        output.WriteRawTag(152, 4);
        output.WriteBool(NoPhysicalDamageModifier);
      }
      if (HasModifierAbility) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(ModifierAbility);
      }
      if (HasModifierHidden) {
        output.WriteRawTag(168, 4);
        output.WriteBool(ModifierHidden);
      }
      if (HasInflictorIsStolenAbility) {
        output.WriteRawTag(176, 4);
        output.WriteBool(InflictorIsStolenAbility);
      }
      if (HasKillEaterEvent) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(KillEaterEvent);
      }
      if (HasUnitStatusLabel) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(UnitStatusLabel);
      }
      if (HasSpellGeneratedAttack) {
        output.WriteRawTag(200, 4);
        output.WriteBool(SpellGeneratedAttack);
      }
      if (HasAtNightTime) {
        output.WriteRawTag(208, 4);
        output.WriteBool(AtNightTime);
      }
      if (HasAttackerHasScepter) {
        output.WriteRawTag(216, 4);
        output.WriteBool(AttackerHasScepter);
      }
      if (HasNeutralCampTeam) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(NeutralCampTeam);
      }
      if (HasRegeneratedHealth) {
        output.WriteRawTag(237, 4);
        output.WriteFloat(RegeneratedHealth);
      }
      if (HasWillReincarnate) {
        output.WriteRawTag(240, 4);
        output.WriteBool(WillReincarnate);
      }
      if (HasUsesCharges) {
        output.WriteRawTag(248, 4);
        output.WriteBool(UsesCharges);
      }
      if (HasTrackedStatId) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(TrackedStatId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasTargetName) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetName);
      }
      if (HasTargetSourceName) {
        output.WriteRawTag(24);
        output.WriteUInt32(TargetSourceName);
      }
      if (HasAttackerName) {
        output.WriteRawTag(32);
        output.WriteUInt32(AttackerName);
      }
      if (HasDamageSourceName) {
        output.WriteRawTag(40);
        output.WriteUInt32(DamageSourceName);
      }
      if (HasInflictorName) {
        output.WriteRawTag(48);
        output.WriteUInt32(InflictorName);
      }
      if (HasIsAttackerIllusion) {
        output.WriteRawTag(56);
        output.WriteBool(IsAttackerIllusion);
      }
      if (HasIsAttackerHero) {
        output.WriteRawTag(64);
        output.WriteBool(IsAttackerHero);
      }
      if (HasIsTargetIllusion) {
        output.WriteRawTag(72);
        output.WriteBool(IsTargetIllusion);
      }
      if (HasIsTargetHero) {
        output.WriteRawTag(80);
        output.WriteBool(IsTargetHero);
      }
      if (HasIsVisibleRadiant) {
        output.WriteRawTag(88);
        output.WriteBool(IsVisibleRadiant);
      }
      if (HasIsVisibleDire) {
        output.WriteRawTag(96);
        output.WriteBool(IsVisibleDire);
      }
      if (HasValue) {
        output.WriteRawTag(104);
        output.WriteUInt32(Value);
      }
      if (HasHealth) {
        output.WriteRawTag(112);
        output.WriteInt32(Health);
      }
      if (HasTimestamp) {
        output.WriteRawTag(125);
        output.WriteFloat(Timestamp);
      }
      if (HasStunDuration) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(StunDuration);
      }
      if (HasSlowDuration) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(SlowDuration);
      }
      if (HasIsAbilityToggleOn) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsAbilityToggleOn);
      }
      if (HasIsAbilityToggleOff) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsAbilityToggleOff);
      }
      if (HasAbilityLevel) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(AbilityLevel);
      }
      if (HasLocationX) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(LocationX);
      }
      if (HasLocationY) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(LocationY);
      }
      if (HasGoldReason) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(GoldReason);
      }
      if (HasTimestampRaw) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(TimestampRaw);
      }
      if (HasModifierDuration) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(ModifierDuration);
      }
      if (HasXpReason) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(XpReason);
      }
      if (HasLastHits) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(LastHits);
      }
      if (HasAttackerTeam) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(AttackerTeam);
      }
      if (HasTargetTeam) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(TargetTeam);
      }
      if (HasObsWardsPlaced) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(ObsWardsPlaced);
      }
      if (HasAssistPlayer0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(AssistPlayer0);
      }
      if (HasAssistPlayer1) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(AssistPlayer1);
      }
      if (HasAssistPlayer2) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(AssistPlayer2);
      }
      if (HasAssistPlayer3) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(AssistPlayer3);
      }
      if (HasStackCount) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(StackCount);
      }
      if (HasHiddenModifier) {
        output.WriteRawTag(160, 2);
        output.WriteBool(HiddenModifier);
      }
      if (HasIsTargetBuilding) {
        output.WriteRawTag(168, 2);
        output.WriteBool(IsTargetBuilding);
      }
      if (HasNeutralCampType) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(NeutralCampType);
      }
      if (HasRuneType) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(RuneType);
      }
      assistPlayers_.WriteTo(ref output, _repeated_assistPlayers_codec);
      if (HasIsHealSave) {
        output.WriteRawTag(200, 2);
        output.WriteBool(IsHealSave);
      }
      if (HasIsUltimateAbility) {
        output.WriteRawTag(208, 2);
        output.WriteBool(IsUltimateAbility);
      }
      if (HasAttackerHeroLevel) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(AttackerHeroLevel);
      }
      if (HasTargetHeroLevel) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(TargetHeroLevel);
      }
      if (HasXpm) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(Xpm);
      }
      if (HasGpm) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(Gpm);
      }
      if (HasEventLocation) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(EventLocation);
      }
      if (HasTargetIsSelf) {
        output.WriteRawTag(128, 3);
        output.WriteBool(TargetIsSelf);
      }
      if (HasDamageType) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(DamageType);
      }
      if (HasInvisibilityModifier) {
        output.WriteRawTag(144, 3);
        output.WriteBool(InvisibilityModifier);
      }
      if (HasDamageCategory) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(DamageCategory);
      }
      if (HasNetworth) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(Networth);
      }
      if (HasBuildingType) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(BuildingType);
      }
      if (HasModifierElapsedDuration) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(ModifierElapsedDuration);
      }
      if (HasSilenceModifier) {
        output.WriteRawTag(184, 3);
        output.WriteBool(SilenceModifier);
      }
      if (HasHealFromLifesteal) {
        output.WriteRawTag(192, 3);
        output.WriteBool(HealFromLifesteal);
      }
      if (HasModifierPurged) {
        output.WriteRawTag(200, 3);
        output.WriteBool(ModifierPurged);
      }
      if (HasSpellEvaded) {
        output.WriteRawTag(208, 3);
        output.WriteBool(SpellEvaded);
      }
      if (HasMotionControllerModifier) {
        output.WriteRawTag(216, 3);
        output.WriteBool(MotionControllerModifier);
      }
      if (HasLongRangeKill) {
        output.WriteRawTag(224, 3);
        output.WriteBool(LongRangeKill);
      }
      if (HasModifierPurgeAbility) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(ModifierPurgeAbility);
      }
      if (HasModifierPurgeNpc) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(ModifierPurgeNpc);
      }
      if (HasRootModifier) {
        output.WriteRawTag(248, 3);
        output.WriteBool(RootModifier);
      }
      if (HasTotalUnitDeathCount) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(TotalUnitDeathCount);
      }
      if (HasAuraModifier) {
        output.WriteRawTag(136, 4);
        output.WriteBool(AuraModifier);
      }
      if (HasArmorDebuffModifier) {
        output.WriteRawTag(144, 4);
        output.WriteBool(ArmorDebuffModifier);
      }
      if (HasNoPhysicalDamageModifier) {
        output.WriteRawTag(152, 4);
        output.WriteBool(NoPhysicalDamageModifier);
      }
      if (HasModifierAbility) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(ModifierAbility);
      }
      if (HasModifierHidden) {
        output.WriteRawTag(168, 4);
        output.WriteBool(ModifierHidden);
      }
      if (HasInflictorIsStolenAbility) {
        output.WriteRawTag(176, 4);
        output.WriteBool(InflictorIsStolenAbility);
      }
      if (HasKillEaterEvent) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(KillEaterEvent);
      }
      if (HasUnitStatusLabel) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(UnitStatusLabel);
      }
      if (HasSpellGeneratedAttack) {
        output.WriteRawTag(200, 4);
        output.WriteBool(SpellGeneratedAttack);
      }
      if (HasAtNightTime) {
        output.WriteRawTag(208, 4);
        output.WriteBool(AtNightTime);
      }
      if (HasAttackerHasScepter) {
        output.WriteRawTag(216, 4);
        output.WriteBool(AttackerHasScepter);
      }
      if (HasNeutralCampTeam) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(NeutralCampTeam);
      }
      if (HasRegeneratedHealth) {
        output.WriteRawTag(237, 4);
        output.WriteFloat(RegeneratedHealth);
      }
      if (HasWillReincarnate) {
        output.WriteRawTag(240, 4);
        output.WriteBool(WillReincarnate);
      }
      if (HasUsesCharges) {
        output.WriteRawTag(248, 4);
        output.WriteBool(UsesCharges);
      }
      if (HasTrackedStatId) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(TrackedStatId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasTargetName) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetName);
      }
      if (HasTargetSourceName) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetSourceName);
      }
      if (HasAttackerName) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttackerName);
      }
      if (HasDamageSourceName) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageSourceName);
      }
      if (HasInflictorName) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InflictorName);
      }
      if (HasIsAttackerIllusion) {
        size += 1 + 1;
      }
      if (HasIsAttackerHero) {
        size += 1 + 1;
      }
      if (HasIsTargetIllusion) {
        size += 1 + 1;
      }
      if (HasIsTargetHero) {
        size += 1 + 1;
      }
      if (HasIsVisibleRadiant) {
        size += 1 + 1;
      }
      if (HasIsVisibleDire) {
        size += 1 + 1;
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (HasHealth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (HasTimestamp) {
        size += 1 + 4;
      }
      if (HasStunDuration) {
        size += 2 + 4;
      }
      if (HasSlowDuration) {
        size += 2 + 4;
      }
      if (HasIsAbilityToggleOn) {
        size += 2 + 1;
      }
      if (HasIsAbilityToggleOff) {
        size += 2 + 1;
      }
      if (HasAbilityLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AbilityLevel);
      }
      if (HasLocationX) {
        size += 2 + 4;
      }
      if (HasLocationY) {
        size += 2 + 4;
      }
      if (HasGoldReason) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GoldReason);
      }
      if (HasTimestampRaw) {
        size += 2 + 4;
      }
      if (HasModifierDuration) {
        size += 2 + 4;
      }
      if (HasXpReason) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(XpReason);
      }
      if (HasLastHits) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
      }
      if (HasAttackerTeam) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackerTeam);
      }
      if (HasTargetTeam) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetTeam);
      }
      if (HasObsWardsPlaced) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObsWardsPlaced);
      }
      if (HasAssistPlayer0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer0);
      }
      if (HasAssistPlayer1) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer1);
      }
      if (HasAssistPlayer2) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer2);
      }
      if (HasAssistPlayer3) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer3);
      }
      if (HasStackCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StackCount);
      }
      if (HasHiddenModifier) {
        size += 2 + 1;
      }
      if (HasIsTargetBuilding) {
        size += 2 + 1;
      }
      if (HasNeutralCampType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NeutralCampType);
      }
      if (HasRuneType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RuneType);
      }
      size += assistPlayers_.CalculateSize(_repeated_assistPlayers_codec);
      if (HasIsHealSave) {
        size += 2 + 1;
      }
      if (HasIsUltimateAbility) {
        size += 2 + 1;
      }
      if (HasAttackerHeroLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackerHeroLevel);
      }
      if (HasTargetHeroLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetHeroLevel);
      }
      if (HasXpm) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Xpm);
      }
      if (HasGpm) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Gpm);
      }
      if (HasEventLocation) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EventLocation);
      }
      if (HasTargetIsSelf) {
        size += 2 + 1;
      }
      if (HasDamageType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageType);
      }
      if (HasInvisibilityModifier) {
        size += 2 + 1;
      }
      if (HasDamageCategory) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageCategory);
      }
      if (HasNetworth) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Networth);
      }
      if (HasBuildingType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuildingType);
      }
      if (HasModifierElapsedDuration) {
        size += 2 + 4;
      }
      if (HasSilenceModifier) {
        size += 2 + 1;
      }
      if (HasHealFromLifesteal) {
        size += 2 + 1;
      }
      if (HasModifierPurged) {
        size += 2 + 1;
      }
      if (HasSpellEvaded) {
        size += 2 + 1;
      }
      if (HasMotionControllerModifier) {
        size += 2 + 1;
      }
      if (HasLongRangeKill) {
        size += 2 + 1;
      }
      if (HasModifierPurgeAbility) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ModifierPurgeAbility);
      }
      if (HasModifierPurgeNpc) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ModifierPurgeNpc);
      }
      if (HasRootModifier) {
        size += 2 + 1;
      }
      if (HasTotalUnitDeathCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TotalUnitDeathCount);
      }
      if (HasAuraModifier) {
        size += 2 + 1;
      }
      if (HasArmorDebuffModifier) {
        size += 2 + 1;
      }
      if (HasNoPhysicalDamageModifier) {
        size += 2 + 1;
      }
      if (HasModifierAbility) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ModifierAbility);
      }
      if (HasModifierHidden) {
        size += 2 + 1;
      }
      if (HasInflictorIsStolenAbility) {
        size += 2 + 1;
      }
      if (HasKillEaterEvent) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KillEaterEvent);
      }
      if (HasUnitStatusLabel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnitStatusLabel);
      }
      if (HasSpellGeneratedAttack) {
        size += 2 + 1;
      }
      if (HasAtNightTime) {
        size += 2 + 1;
      }
      if (HasAttackerHasScepter) {
        size += 2 + 1;
      }
      if (HasNeutralCampTeam) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NeutralCampTeam);
      }
      if (HasRegeneratedHealth) {
        size += 2 + 4;
      }
      if (HasWillReincarnate) {
        size += 2 + 1;
      }
      if (HasUsesCharges) {
        size += 2 + 1;
      }
      if (HasTrackedStatId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TrackedStatId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTACombatLogEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasTargetName) {
        TargetName = other.TargetName;
      }
      if (other.HasTargetSourceName) {
        TargetSourceName = other.TargetSourceName;
      }
      if (other.HasAttackerName) {
        AttackerName = other.AttackerName;
      }
      if (other.HasDamageSourceName) {
        DamageSourceName = other.DamageSourceName;
      }
      if (other.HasInflictorName) {
        InflictorName = other.InflictorName;
      }
      if (other.HasIsAttackerIllusion) {
        IsAttackerIllusion = other.IsAttackerIllusion;
      }
      if (other.HasIsAttackerHero) {
        IsAttackerHero = other.IsAttackerHero;
      }
      if (other.HasIsTargetIllusion) {
        IsTargetIllusion = other.IsTargetIllusion;
      }
      if (other.HasIsTargetHero) {
        IsTargetHero = other.IsTargetHero;
      }
      if (other.HasIsVisibleRadiant) {
        IsVisibleRadiant = other.IsVisibleRadiant;
      }
      if (other.HasIsVisibleDire) {
        IsVisibleDire = other.IsVisibleDire;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasHealth) {
        Health = other.Health;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasStunDuration) {
        StunDuration = other.StunDuration;
      }
      if (other.HasSlowDuration) {
        SlowDuration = other.SlowDuration;
      }
      if (other.HasIsAbilityToggleOn) {
        IsAbilityToggleOn = other.IsAbilityToggleOn;
      }
      if (other.HasIsAbilityToggleOff) {
        IsAbilityToggleOff = other.IsAbilityToggleOff;
      }
      if (other.HasAbilityLevel) {
        AbilityLevel = other.AbilityLevel;
      }
      if (other.HasLocationX) {
        LocationX = other.LocationX;
      }
      if (other.HasLocationY) {
        LocationY = other.LocationY;
      }
      if (other.HasGoldReason) {
        GoldReason = other.GoldReason;
      }
      if (other.HasTimestampRaw) {
        TimestampRaw = other.TimestampRaw;
      }
      if (other.HasModifierDuration) {
        ModifierDuration = other.ModifierDuration;
      }
      if (other.HasXpReason) {
        XpReason = other.XpReason;
      }
      if (other.HasLastHits) {
        LastHits = other.LastHits;
      }
      if (other.HasAttackerTeam) {
        AttackerTeam = other.AttackerTeam;
      }
      if (other.HasTargetTeam) {
        TargetTeam = other.TargetTeam;
      }
      if (other.HasObsWardsPlaced) {
        ObsWardsPlaced = other.ObsWardsPlaced;
      }
      if (other.HasAssistPlayer0) {
        AssistPlayer0 = other.AssistPlayer0;
      }
      if (other.HasAssistPlayer1) {
        AssistPlayer1 = other.AssistPlayer1;
      }
      if (other.HasAssistPlayer2) {
        AssistPlayer2 = other.AssistPlayer2;
      }
      if (other.HasAssistPlayer3) {
        AssistPlayer3 = other.AssistPlayer3;
      }
      if (other.HasStackCount) {
        StackCount = other.StackCount;
      }
      if (other.HasHiddenModifier) {
        HiddenModifier = other.HiddenModifier;
      }
      if (other.HasIsTargetBuilding) {
        IsTargetBuilding = other.IsTargetBuilding;
      }
      if (other.HasNeutralCampType) {
        NeutralCampType = other.NeutralCampType;
      }
      if (other.HasRuneType) {
        RuneType = other.RuneType;
      }
      assistPlayers_.Add(other.assistPlayers_);
      if (other.HasIsHealSave) {
        IsHealSave = other.IsHealSave;
      }
      if (other.HasIsUltimateAbility) {
        IsUltimateAbility = other.IsUltimateAbility;
      }
      if (other.HasAttackerHeroLevel) {
        AttackerHeroLevel = other.AttackerHeroLevel;
      }
      if (other.HasTargetHeroLevel) {
        TargetHeroLevel = other.TargetHeroLevel;
      }
      if (other.HasXpm) {
        Xpm = other.Xpm;
      }
      if (other.HasGpm) {
        Gpm = other.Gpm;
      }
      if (other.HasEventLocation) {
        EventLocation = other.EventLocation;
      }
      if (other.HasTargetIsSelf) {
        TargetIsSelf = other.TargetIsSelf;
      }
      if (other.HasDamageType) {
        DamageType = other.DamageType;
      }
      if (other.HasInvisibilityModifier) {
        InvisibilityModifier = other.InvisibilityModifier;
      }
      if (other.HasDamageCategory) {
        DamageCategory = other.DamageCategory;
      }
      if (other.HasNetworth) {
        Networth = other.Networth;
      }
      if (other.HasBuildingType) {
        BuildingType = other.BuildingType;
      }
      if (other.HasModifierElapsedDuration) {
        ModifierElapsedDuration = other.ModifierElapsedDuration;
      }
      if (other.HasSilenceModifier) {
        SilenceModifier = other.SilenceModifier;
      }
      if (other.HasHealFromLifesteal) {
        HealFromLifesteal = other.HealFromLifesteal;
      }
      if (other.HasModifierPurged) {
        ModifierPurged = other.ModifierPurged;
      }
      if (other.HasSpellEvaded) {
        SpellEvaded = other.SpellEvaded;
      }
      if (other.HasMotionControllerModifier) {
        MotionControllerModifier = other.MotionControllerModifier;
      }
      if (other.HasLongRangeKill) {
        LongRangeKill = other.LongRangeKill;
      }
      if (other.HasModifierPurgeAbility) {
        ModifierPurgeAbility = other.ModifierPurgeAbility;
      }
      if (other.HasModifierPurgeNpc) {
        ModifierPurgeNpc = other.ModifierPurgeNpc;
      }
      if (other.HasRootModifier) {
        RootModifier = other.RootModifier;
      }
      if (other.HasTotalUnitDeathCount) {
        TotalUnitDeathCount = other.TotalUnitDeathCount;
      }
      if (other.HasAuraModifier) {
        AuraModifier = other.AuraModifier;
      }
      if (other.HasArmorDebuffModifier) {
        ArmorDebuffModifier = other.ArmorDebuffModifier;
      }
      if (other.HasNoPhysicalDamageModifier) {
        NoPhysicalDamageModifier = other.NoPhysicalDamageModifier;
      }
      if (other.HasModifierAbility) {
        ModifierAbility = other.ModifierAbility;
      }
      if (other.HasModifierHidden) {
        ModifierHidden = other.ModifierHidden;
      }
      if (other.HasInflictorIsStolenAbility) {
        InflictorIsStolenAbility = other.InflictorIsStolenAbility;
      }
      if (other.HasKillEaterEvent) {
        KillEaterEvent = other.KillEaterEvent;
      }
      if (other.HasUnitStatusLabel) {
        UnitStatusLabel = other.UnitStatusLabel;
      }
      if (other.HasSpellGeneratedAttack) {
        SpellGeneratedAttack = other.SpellGeneratedAttack;
      }
      if (other.HasAtNightTime) {
        AtNightTime = other.AtNightTime;
      }
      if (other.HasAttackerHasScepter) {
        AttackerHasScepter = other.AttackerHasScepter;
      }
      if (other.HasNeutralCampTeam) {
        NeutralCampTeam = other.NeutralCampTeam;
      }
      if (other.HasRegeneratedHealth) {
        RegeneratedHealth = other.RegeneratedHealth;
      }
      if (other.HasWillReincarnate) {
        WillReincarnate = other.WillReincarnate;
      }
      if (other.HasUsesCharges) {
        UsesCharges = other.UsesCharges;
      }
      if (other.HasTrackedStatId) {
        TrackedStatId = other.TrackedStatId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Steam.Protos.Dota2.DOTA_COMBATLOG_TYPES) input.ReadEnum();
            break;
          }
          case 16: {
            TargetName = input.ReadUInt32();
            break;
          }
          case 24: {
            TargetSourceName = input.ReadUInt32();
            break;
          }
          case 32: {
            AttackerName = input.ReadUInt32();
            break;
          }
          case 40: {
            DamageSourceName = input.ReadUInt32();
            break;
          }
          case 48: {
            InflictorName = input.ReadUInt32();
            break;
          }
          case 56: {
            IsAttackerIllusion = input.ReadBool();
            break;
          }
          case 64: {
            IsAttackerHero = input.ReadBool();
            break;
          }
          case 72: {
            IsTargetIllusion = input.ReadBool();
            break;
          }
          case 80: {
            IsTargetHero = input.ReadBool();
            break;
          }
          case 88: {
            IsVisibleRadiant = input.ReadBool();
            break;
          }
          case 96: {
            IsVisibleDire = input.ReadBool();
            break;
          }
          case 104: {
            Value = input.ReadUInt32();
            break;
          }
          case 112: {
            Health = input.ReadInt32();
            break;
          }
          case 125: {
            Timestamp = input.ReadFloat();
            break;
          }
          case 133: {
            StunDuration = input.ReadFloat();
            break;
          }
          case 141: {
            SlowDuration = input.ReadFloat();
            break;
          }
          case 144: {
            IsAbilityToggleOn = input.ReadBool();
            break;
          }
          case 152: {
            IsAbilityToggleOff = input.ReadBool();
            break;
          }
          case 160: {
            AbilityLevel = input.ReadUInt32();
            break;
          }
          case 173: {
            LocationX = input.ReadFloat();
            break;
          }
          case 181: {
            LocationY = input.ReadFloat();
            break;
          }
          case 184: {
            GoldReason = input.ReadUInt32();
            break;
          }
          case 197: {
            TimestampRaw = input.ReadFloat();
            break;
          }
          case 205: {
            ModifierDuration = input.ReadFloat();
            break;
          }
          case 208: {
            XpReason = input.ReadUInt32();
            break;
          }
          case 216: {
            LastHits = input.ReadUInt32();
            break;
          }
          case 224: {
            AttackerTeam = input.ReadUInt32();
            break;
          }
          case 232: {
            TargetTeam = input.ReadUInt32();
            break;
          }
          case 240: {
            ObsWardsPlaced = input.ReadUInt32();
            break;
          }
          case 248: {
            AssistPlayer0 = input.ReadUInt32();
            break;
          }
          case 256: {
            AssistPlayer1 = input.ReadUInt32();
            break;
          }
          case 264: {
            AssistPlayer2 = input.ReadUInt32();
            break;
          }
          case 272: {
            AssistPlayer3 = input.ReadUInt32();
            break;
          }
          case 280: {
            StackCount = input.ReadUInt32();
            break;
          }
          case 288: {
            HiddenModifier = input.ReadBool();
            break;
          }
          case 296: {
            IsTargetBuilding = input.ReadBool();
            break;
          }
          case 304: {
            NeutralCampType = input.ReadUInt32();
            break;
          }
          case 312: {
            RuneType = input.ReadUInt32();
            break;
          }
          case 322:
          case 320: {
            assistPlayers_.AddEntriesFrom(input, _repeated_assistPlayers_codec);
            break;
          }
          case 328: {
            IsHealSave = input.ReadBool();
            break;
          }
          case 336: {
            IsUltimateAbility = input.ReadBool();
            break;
          }
          case 344: {
            AttackerHeroLevel = input.ReadUInt32();
            break;
          }
          case 352: {
            TargetHeroLevel = input.ReadUInt32();
            break;
          }
          case 360: {
            Xpm = input.ReadUInt32();
            break;
          }
          case 368: {
            Gpm = input.ReadUInt32();
            break;
          }
          case 376: {
            EventLocation = input.ReadUInt32();
            break;
          }
          case 384: {
            TargetIsSelf = input.ReadBool();
            break;
          }
          case 392: {
            DamageType = input.ReadUInt32();
            break;
          }
          case 400: {
            InvisibilityModifier = input.ReadBool();
            break;
          }
          case 408: {
            DamageCategory = input.ReadUInt32();
            break;
          }
          case 416: {
            Networth = input.ReadUInt32();
            break;
          }
          case 424: {
            BuildingType = input.ReadUInt32();
            break;
          }
          case 437: {
            ModifierElapsedDuration = input.ReadFloat();
            break;
          }
          case 440: {
            SilenceModifier = input.ReadBool();
            break;
          }
          case 448: {
            HealFromLifesteal = input.ReadBool();
            break;
          }
          case 456: {
            ModifierPurged = input.ReadBool();
            break;
          }
          case 464: {
            SpellEvaded = input.ReadBool();
            break;
          }
          case 472: {
            MotionControllerModifier = input.ReadBool();
            break;
          }
          case 480: {
            LongRangeKill = input.ReadBool();
            break;
          }
          case 488: {
            ModifierPurgeAbility = input.ReadUInt32();
            break;
          }
          case 496: {
            ModifierPurgeNpc = input.ReadUInt32();
            break;
          }
          case 504: {
            RootModifier = input.ReadBool();
            break;
          }
          case 512: {
            TotalUnitDeathCount = input.ReadUInt32();
            break;
          }
          case 520: {
            AuraModifier = input.ReadBool();
            break;
          }
          case 528: {
            ArmorDebuffModifier = input.ReadBool();
            break;
          }
          case 536: {
            NoPhysicalDamageModifier = input.ReadBool();
            break;
          }
          case 544: {
            ModifierAbility = input.ReadUInt32();
            break;
          }
          case 552: {
            ModifierHidden = input.ReadBool();
            break;
          }
          case 560: {
            InflictorIsStolenAbility = input.ReadBool();
            break;
          }
          case 568: {
            KillEaterEvent = input.ReadUInt32();
            break;
          }
          case 576: {
            UnitStatusLabel = input.ReadUInt32();
            break;
          }
          case 584: {
            SpellGeneratedAttack = input.ReadBool();
            break;
          }
          case 592: {
            AtNightTime = input.ReadBool();
            break;
          }
          case 600: {
            AttackerHasScepter = input.ReadBool();
            break;
          }
          case 608: {
            NeutralCampTeam = input.ReadUInt32();
            break;
          }
          case 621: {
            RegeneratedHealth = input.ReadFloat();
            break;
          }
          case 624: {
            WillReincarnate = input.ReadBool();
            break;
          }
          case 632: {
            UsesCharges = input.ReadBool();
            break;
          }
          case 640: {
            TrackedStatId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Steam.Protos.Dota2.DOTA_COMBATLOG_TYPES) input.ReadEnum();
            break;
          }
          case 16: {
            TargetName = input.ReadUInt32();
            break;
          }
          case 24: {
            TargetSourceName = input.ReadUInt32();
            break;
          }
          case 32: {
            AttackerName = input.ReadUInt32();
            break;
          }
          case 40: {
            DamageSourceName = input.ReadUInt32();
            break;
          }
          case 48: {
            InflictorName = input.ReadUInt32();
            break;
          }
          case 56: {
            IsAttackerIllusion = input.ReadBool();
            break;
          }
          case 64: {
            IsAttackerHero = input.ReadBool();
            break;
          }
          case 72: {
            IsTargetIllusion = input.ReadBool();
            break;
          }
          case 80: {
            IsTargetHero = input.ReadBool();
            break;
          }
          case 88: {
            IsVisibleRadiant = input.ReadBool();
            break;
          }
          case 96: {
            IsVisibleDire = input.ReadBool();
            break;
          }
          case 104: {
            Value = input.ReadUInt32();
            break;
          }
          case 112: {
            Health = input.ReadInt32();
            break;
          }
          case 125: {
            Timestamp = input.ReadFloat();
            break;
          }
          case 133: {
            StunDuration = input.ReadFloat();
            break;
          }
          case 141: {
            SlowDuration = input.ReadFloat();
            break;
          }
          case 144: {
            IsAbilityToggleOn = input.ReadBool();
            break;
          }
          case 152: {
            IsAbilityToggleOff = input.ReadBool();
            break;
          }
          case 160: {
            AbilityLevel = input.ReadUInt32();
            break;
          }
          case 173: {
            LocationX = input.ReadFloat();
            break;
          }
          case 181: {
            LocationY = input.ReadFloat();
            break;
          }
          case 184: {
            GoldReason = input.ReadUInt32();
            break;
          }
          case 197: {
            TimestampRaw = input.ReadFloat();
            break;
          }
          case 205: {
            ModifierDuration = input.ReadFloat();
            break;
          }
          case 208: {
            XpReason = input.ReadUInt32();
            break;
          }
          case 216: {
            LastHits = input.ReadUInt32();
            break;
          }
          case 224: {
            AttackerTeam = input.ReadUInt32();
            break;
          }
          case 232: {
            TargetTeam = input.ReadUInt32();
            break;
          }
          case 240: {
            ObsWardsPlaced = input.ReadUInt32();
            break;
          }
          case 248: {
            AssistPlayer0 = input.ReadUInt32();
            break;
          }
          case 256: {
            AssistPlayer1 = input.ReadUInt32();
            break;
          }
          case 264: {
            AssistPlayer2 = input.ReadUInt32();
            break;
          }
          case 272: {
            AssistPlayer3 = input.ReadUInt32();
            break;
          }
          case 280: {
            StackCount = input.ReadUInt32();
            break;
          }
          case 288: {
            HiddenModifier = input.ReadBool();
            break;
          }
          case 296: {
            IsTargetBuilding = input.ReadBool();
            break;
          }
          case 304: {
            NeutralCampType = input.ReadUInt32();
            break;
          }
          case 312: {
            RuneType = input.ReadUInt32();
            break;
          }
          case 322:
          case 320: {
            assistPlayers_.AddEntriesFrom(ref input, _repeated_assistPlayers_codec);
            break;
          }
          case 328: {
            IsHealSave = input.ReadBool();
            break;
          }
          case 336: {
            IsUltimateAbility = input.ReadBool();
            break;
          }
          case 344: {
            AttackerHeroLevel = input.ReadUInt32();
            break;
          }
          case 352: {
            TargetHeroLevel = input.ReadUInt32();
            break;
          }
          case 360: {
            Xpm = input.ReadUInt32();
            break;
          }
          case 368: {
            Gpm = input.ReadUInt32();
            break;
          }
          case 376: {
            EventLocation = input.ReadUInt32();
            break;
          }
          case 384: {
            TargetIsSelf = input.ReadBool();
            break;
          }
          case 392: {
            DamageType = input.ReadUInt32();
            break;
          }
          case 400: {
            InvisibilityModifier = input.ReadBool();
            break;
          }
          case 408: {
            DamageCategory = input.ReadUInt32();
            break;
          }
          case 416: {
            Networth = input.ReadUInt32();
            break;
          }
          case 424: {
            BuildingType = input.ReadUInt32();
            break;
          }
          case 437: {
            ModifierElapsedDuration = input.ReadFloat();
            break;
          }
          case 440: {
            SilenceModifier = input.ReadBool();
            break;
          }
          case 448: {
            HealFromLifesteal = input.ReadBool();
            break;
          }
          case 456: {
            ModifierPurged = input.ReadBool();
            break;
          }
          case 464: {
            SpellEvaded = input.ReadBool();
            break;
          }
          case 472: {
            MotionControllerModifier = input.ReadBool();
            break;
          }
          case 480: {
            LongRangeKill = input.ReadBool();
            break;
          }
          case 488: {
            ModifierPurgeAbility = input.ReadUInt32();
            break;
          }
          case 496: {
            ModifierPurgeNpc = input.ReadUInt32();
            break;
          }
          case 504: {
            RootModifier = input.ReadBool();
            break;
          }
          case 512: {
            TotalUnitDeathCount = input.ReadUInt32();
            break;
          }
          case 520: {
            AuraModifier = input.ReadBool();
            break;
          }
          case 528: {
            ArmorDebuffModifier = input.ReadBool();
            break;
          }
          case 536: {
            NoPhysicalDamageModifier = input.ReadBool();
            break;
          }
          case 544: {
            ModifierAbility = input.ReadUInt32();
            break;
          }
          case 552: {
            ModifierHidden = input.ReadBool();
            break;
          }
          case 560: {
            InflictorIsStolenAbility = input.ReadBool();
            break;
          }
          case 568: {
            KillEaterEvent = input.ReadUInt32();
            break;
          }
          case 576: {
            UnitStatusLabel = input.ReadUInt32();
            break;
          }
          case 584: {
            SpellGeneratedAttack = input.ReadBool();
            break;
          }
          case 592: {
            AtNightTime = input.ReadBool();
            break;
          }
          case 600: {
            AttackerHasScepter = input.ReadBool();
            break;
          }
          case 608: {
            NeutralCampTeam = input.ReadUInt32();
            break;
          }
          case 621: {
            RegeneratedHealth = input.ReadFloat();
            break;
          }
          case 624: {
            WillReincarnate = input.ReadBool();
            break;
          }
          case 632: {
            UsesCharges = input.ReadBool();
            break;
          }
          case 640: {
            TrackedStatId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgPendingEventAward : pb::IMessage<CMsgPendingEventAward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgPendingEventAward> _parser = new pb::MessageParser<CMsgPendingEventAward>(() => new CMsgPendingEventAward());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPendingEventAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPendingEventAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPendingEventAward(CMsgPendingEventAward other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      actionId_ = other.actionId_;
      numToGrant_ = other.numToGrant_;
      scoreMode_ = other.scoreMode_;
      auditAction_ = other.auditAction_;
      auditData_ = other.auditData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPendingEventAward Clone() {
      return new CMsgPendingEventAward(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EEvent.EventIdNone;

    private global::Steam.Protos.Dota2.EEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 2;
    private readonly static uint ActionIdDefaultValue = 0;

    private uint actionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActionId {
      get { if ((_hasBits0 & 2) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionId_ = value;
      }
    }
    /// <summary>Gets whether the "action_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActionId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "num_to_grant" field.</summary>
    public const int NumToGrantFieldNumber = 3;
    private readonly static uint NumToGrantDefaultValue = 0;

    private uint numToGrant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumToGrant {
      get { if ((_hasBits0 & 4) != 0) { return numToGrant_; } else { return NumToGrantDefaultValue; } }
      set {
        _hasBits0 |= 4;
        numToGrant_ = value;
      }
    }
    /// <summary>Gets whether the "num_to_grant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumToGrant {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "num_to_grant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumToGrant() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "score_mode" field.</summary>
    public const int ScoreModeFieldNumber = 4;
    private readonly static global::Steam.Protos.Dota2.EEventActionScoreMode ScoreModeDefaultValue = global::Steam.Protos.Dota2.EEventActionScoreMode.KEEventActionScoreModeAdd;

    private global::Steam.Protos.Dota2.EEventActionScoreMode scoreMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EEventActionScoreMode ScoreMode {
      get { if ((_hasBits0 & 8) != 0) { return scoreMode_; } else { return ScoreModeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        scoreMode_ = value;
      }
    }
    /// <summary>Gets whether the "score_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScoreMode {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "score_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScoreMode() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "audit_action" field.</summary>
    public const int AuditActionFieldNumber = 5;
    private readonly static uint AuditActionDefaultValue = 0;

    private uint auditAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AuditAction {
      get { if ((_hasBits0 & 16) != 0) { return auditAction_; } else { return AuditActionDefaultValue; } }
      set {
        _hasBits0 |= 16;
        auditAction_ = value;
      }
    }
    /// <summary>Gets whether the "audit_action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuditAction {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "audit_action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuditAction() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "audit_data" field.</summary>
    public const int AuditDataFieldNumber = 6;
    private readonly static ulong AuditDataDefaultValue = 0UL;

    private ulong auditData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuditData {
      get { if ((_hasBits0 & 32) != 0) { return auditData_; } else { return AuditDataDefaultValue; } }
      set {
        _hasBits0 |= 32;
        auditData_ = value;
      }
    }
    /// <summary>Gets whether the "audit_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuditData {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "audit_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuditData() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPendingEventAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPendingEventAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (ActionId != other.ActionId) return false;
      if (NumToGrant != other.NumToGrant) return false;
      if (ScoreMode != other.ScoreMode) return false;
      if (AuditAction != other.AuditAction) return false;
      if (AuditData != other.AuditData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasActionId) hash ^= ActionId.GetHashCode();
      if (HasNumToGrant) hash ^= NumToGrant.GetHashCode();
      if (HasScoreMode) hash ^= ScoreMode.GetHashCode();
      if (HasAuditAction) hash ^= AuditAction.GetHashCode();
      if (HasAuditData) hash ^= AuditData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      if (HasActionId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActionId);
      }
      if (HasNumToGrant) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumToGrant);
      }
      if (HasScoreMode) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ScoreMode);
      }
      if (HasAuditAction) {
        output.WriteRawTag(40);
        output.WriteUInt32(AuditAction);
      }
      if (HasAuditData) {
        output.WriteRawTag(48);
        output.WriteUInt64(AuditData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      if (HasActionId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActionId);
      }
      if (HasNumToGrant) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumToGrant);
      }
      if (HasScoreMode) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ScoreMode);
      }
      if (HasAuditAction) {
        output.WriteRawTag(40);
        output.WriteUInt32(AuditAction);
      }
      if (HasAuditData) {
        output.WriteRawTag(48);
        output.WriteUInt64(AuditData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasActionId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionId);
      }
      if (HasNumToGrant) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumToGrant);
      }
      if (HasScoreMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScoreMode);
      }
      if (HasAuditAction) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AuditAction);
      }
      if (HasAuditData) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuditData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPendingEventAward other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasActionId) {
        ActionId = other.ActionId;
      }
      if (other.HasNumToGrant) {
        NumToGrant = other.NumToGrant;
      }
      if (other.HasScoreMode) {
        ScoreMode = other.ScoreMode;
      }
      if (other.HasAuditAction) {
        AuditAction = other.AuditAction;
      }
      if (other.HasAuditData) {
        AuditData = other.AuditData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 16: {
            ActionId = input.ReadUInt32();
            break;
          }
          case 24: {
            NumToGrant = input.ReadUInt32();
            break;
          }
          case 32: {
            ScoreMode = (global::Steam.Protos.Dota2.EEventActionScoreMode) input.ReadEnum();
            break;
          }
          case 40: {
            AuditAction = input.ReadUInt32();
            break;
          }
          case 48: {
            AuditData = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EventId = (global::Steam.Protos.Dota2.EEvent) input.ReadEnum();
            break;
          }
          case 16: {
            ActionId = input.ReadUInt32();
            break;
          }
          case 24: {
            NumToGrant = input.ReadUInt32();
            break;
          }
          case 32: {
            ScoreMode = (global::Steam.Protos.Dota2.EEventActionScoreMode) input.ReadEnum();
            break;
          }
          case 40: {
            AuditAction = input.ReadUInt32();
            break;
          }
          case 48: {
            AuditData = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
